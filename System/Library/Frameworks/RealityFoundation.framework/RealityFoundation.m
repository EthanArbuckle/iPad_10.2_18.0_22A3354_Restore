uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  int v4;
  int *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (int *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;

  result = specialized static __RKEntityTriggerSpecification.generateCollisionTriggerSpecifications(decodeContext:)(*(void **)a1, *(void **)(a1 + 8), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  result = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x696669746E656469, 0xEA00000000007265, 2, *a1);
  v6 = v4;
  if (v4)
  {
    v7 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityTriggerSpecification(0) - 8) + 80);
    v9 = (v8 + 32) & ~v8;
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_21BE411F0;
    v10 = (uint64_t *)(v5 + v9);
    *v10 = v7;
    v10[1] = v6;
    result = swift_storeEnumTagMultiPayload();
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  *a2 = v5;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  void (*v5)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v6;
  void *v7;
  id v8;
  float v9;
  float v10;
  uint64_t result;
  unint64_t v12;

  v3 = *(void **)a1;
  v4 = *(void **)(a1 + 8);
  v5 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = (void *)MEMORY[0x220768C3C](0x65636E6174736964, 0xE800000000000000);
  v8 = objc_msgSend(v3, sel_property_, v7);

  if (v8)
  {
    objc_msgSend(v8, sel_floatValue);
    v10 = v9;

  }
  else
  {
    v10 = 0.0;
  }
  v12 = MEMORY[0x24BEE4AF8];
  result = specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 2, v3, v4, v5, v6, &v12, v10);
  *a2 = v12;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>);
  type metadata accessor for __RKEntityTriggerSpecification(0);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  result = swift_storeEnumTagMultiPayload();
  *a1 = v2;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityTriggerSpecification])@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = implicit closure #5 in variable initialization expression of static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator((uint64_t)v5);
  *a2 = result;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(_OWORD *a1@<X0>, unint64_t *a2@<X8>)
{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)((void **)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateEmphasizeActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = static __RKEntityActionSpecification.generateGroupActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  unint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateChangeSceneActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  uint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)((void **)v5);
  *a2 = result;
  return result;
}

{
  __int128 v3;
  uint64_t result;
  _OWORD v5[3];

  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = a1[2];
  result = specialized static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)((uint64_t)v5);
  *a2 = result;
  return result;
}

unint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;

  result = specialized implicit closure #4 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

{
  unint64_t result;

  result = specialized implicit closure #5 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

{
  unint64_t result;

  result = specialized implicit closure #8 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(*(void **)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@guaranteed USDDecodableContext) -> (@owned [__RKEntityActionSpecification])@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t result;

  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, *a1);
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21BE411F0;
  v8 = 1.0;
  if (v4 >= 0.0)
    v8 = v4;
  *(float *)(v7 + v6) = v8;
  result = swift_storeEnumTagMultiPayload();
  *a2 = v7;
  return result;
}

void specialized closure #1 in SetupPair.init<A, B>(_:_:)(uint64_t a1)
{
  uint64_t v2;
  CGColorRef GenericRGB;

  if (swift_conformsToProtocol2())
    v2 = a1;
  else
    v2 = 0;
  if (v2)
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();

  }
}

{
  uint64_t v2;
  CGColorRef GenericRGB;

  if (swift_conformsToProtocol2())
    v2 = a1;
  else
    v2 = 0;
  if (v2)
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();

  }
}

{
  uint64_t v2;
  CGColorRef GenericRGB;

  if (swift_conformsToProtocol2())
    v2 = a1;
  else
    v2 = 0;
  if (v2)
  {
    GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(GenericRGB);
    swift_release();

  }
}

uint64_t specialized closure #1 in SetupPair.init<A, B>(_:_:)(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_conformsToProtocol2();
  if (result)
    v3 = a1;
  else
    v3 = 0;
  if (v3)
  {
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0x7F8000003C23D70ALL, 0x142700000);
    return swift_release();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t result;
  uint64_t v6;
  int *v7;
  char *v8;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (_OWORD *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = swift_conformsToProtocol2();
  if (result)
    v6 = a1;
  else
    v6 = 0;
  if (v6)
  {
    v7 = (int *)type metadata accessor for AnchoringComponent(0);
    *(_QWORD *)((char *)v4 + v7[5]) = 1;
    *(_QWORD *)((char *)v4 + v7[6]) = 1;
    v8 = (char *)v4 + v7[7];
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 3) = 0u;
    *(_OWORD *)v8 = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    v8[64] = 1;
    *v4 = *(_OWORD *)zmmword_21BE41220;
    v4[1] = *(_OWORD *)&zmmword_21BE41220[16];
    v4[2] = *(_OWORD *)&zmmword_21BE41220[32];
    v4[3] = *(_OWORD *)&zmmword_21BE41220[48];
    type metadata accessor for AnchoringComponent.Target(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(*((_QWORD *)v7 - 1) + 56))(v4, 0, 1, v7);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
    return swift_release();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_conformsToProtocol2();
  if (result)
    v6 = a1;
  else
    v6 = 0;
  if (v6)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
    v8 = type metadata accessor for BodyTrackingComponent(0);
    v4[*(int *)(v8 + 20)] = 0;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for BodyTrackingComponent?);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in SetupPair.init<A, B>(_:_:)()
{
  uint64_t v1[3];
  __int128 v2;

  memset(v1, 0, sizeof(v1));
  v2 = xmmword_21BE41200;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1);
  return swift_release();
}

{
  _OWORD v1[2];
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (one-time initialization token for identity != -1)
    swift_once();
  v1[0] = xmmword_21BE41210;
  v1[1] = static simd_quatf.identity;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v1);
  return swift_release();
}

__n128 __swift_memcpy40_4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildBoxWithRoundedCornersOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildBoxWithRoundedCornersOptions);
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildBoxOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildBoxOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildBoxOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildBoxOptions);
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildCylinderOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildCylinderOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildCylinderOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildCylinderOptions);
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildConeOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildConeOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildConeOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildConeOptions);
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildCapsuleOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildCapsuleOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildCapsuleOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildCapsuleOptions);
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for REGeomBuildSphereOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildSphereOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildSphereOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildSphereOptions);
}

uint64_t getEnumTagSinglePayload for REGeomBuildPlaneOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 20);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildPlaneOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 28) = 0;
    if (a2)
      *(_BYTE *)(result + 20) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildPlaneOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildPlaneOptions);
}

void type metadata accessor for REMaterialParameterBlockValue(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialParameterBlockValue);
}

void type metadata accessor for REMetricFileLoadSite(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMetricFileLoadSite);
}

void type metadata accessor for AXCustomContentImportance(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for AXCustomContentImportance);
}

void type metadata accessor for REVideoViewingMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoViewingMode);
}

void type metadata accessor for RIOImportSessionRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RIOImportSessionRef);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for simd_float2x2(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_float2x2);
}

void type metadata accessor for REMaterialParameterType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialParameterType);
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REAudioFileConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REAudioFileConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

void type metadata accessor for REAudioFileConfiguration(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAudioFileConfiguration);
}

void type metadata accessor for MTLTextureType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTextureType);
}

void type metadata accessor for DRTexture_t(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for DRTexture_t);
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for RESceneComponentCollectionPosition(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneComponentCollectionPosition);
}

void type metadata accessor for REColorGamut(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REColorGamut);
}

void type metadata accessor for MTLPrimitiveType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLPrimitiveType);
}

void type metadata accessor for MTLIndexType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLIndexType);
}

void type metadata accessor for MTLVertexFormat(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLVertexFormat);
}

void type metadata accessor for DRMesh_t(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for DRMesh_t);
}

void type metadata accessor for MTLColorWriteMask(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLColorWriteMask);
}

void type metadata accessor for MTLCompareFunction(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLCompareFunction);
}

void type metadata accessor for REAnimationLoopBehavior(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationLoopBehavior);
}

void type metadata accessor for AudioBufferList(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for AudioBufferList);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for AudioTimeStamp(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for AudioTimeStamp(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for AudioTimeStamp);
}

uint64_t storeEnumTagSinglePayload for RETextEdgeInsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for RETextEdgeInsets(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RETextEdgeInsets);
}

void type metadata accessor for REDirectParameterBuffer(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REDirectParameterBuffer);
}

void type metadata accessor for RFServiceManagerRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RFServiceManagerRef);
}

_QWORD *__swift_memcpy8_4(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for REMeshJointInfluence(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshJointInfluence);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGPoint);
}

void type metadata accessor for MTLTriangleFillMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTriangleFillMode);
}

void type metadata accessor for MTLCullMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLCullMode);
}

void type metadata accessor for DRBuffer_t(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for DRBuffer_t);
}

void type metadata accessor for RESubscriptionHandle(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESubscriptionHandle);
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for REMeshInstanceDefinitionRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshInstanceDefinitionRef);
}

void type metadata accessor for REMeshModelDefinitionRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshModelDefinitionRef);
}

void type metadata accessor for REMeshDefinitionRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshDefinitionRef);
}

void type metadata accessor for REEngineConfigurationRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEngineConfigurationRef);
}

void type metadata accessor for MTLTextureUsage(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTextureUsage);
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLPixelFormat);
}

__n128 __swift_memcpy48_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for RERay(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RERay);
}

void type metadata accessor for REComponentClassPtr(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentClassPtr);
}

_DWORD *__swift_memcpy4_1(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MTLTextureSwizzleChannels(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MTLTextureSwizzleChannels(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for MTLTextureSwizzleChannels(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTextureSwizzleChannels);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for CGRect(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGRect);
}

__n128 __swift_memcpy32_16(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for REPoseF(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REPoseF);
}

void type metadata accessor for CGImageRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGImageRef);
}

void type metadata accessor for RERealityFileMajorVersion(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RERealityFileMajorVersion);
}

void type metadata accessor for REAABB(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAABB);
}

void type metadata accessor for REStartupOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REStartupOptions);
}

void type metadata accessor for RERenderFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RERenderFlags);
}

void type metadata accessor for REEngineServiceMask(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEngineServiceMask);
}

void type metadata accessor for REEngineClockMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEngineClockMode);
}

void type metadata accessor for RESRT(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESRT);
}

uint64_t getEnumTagSinglePayload for simd_float3x3(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_float3x3(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for simd_float3x3(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_float3x3);
}

void type metadata accessor for REComponentType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentType);
}

void type metadata accessor for REEasingFunction(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEasingFunction);
}

__n128 __swift_memcpy64_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_float4x4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_float4x4);
}

uint64_t getEnumTagSinglePayload for CMAcceleration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CMAcceleration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMAcceleration(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CMAcceleration);
}

void type metadata accessor for CVBufferRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CVBufferRef);
}

void type metadata accessor for CMClockRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CMClockRef);
}

void type metadata accessor for CFErrorRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CFErrorRef);
}

void type metadata accessor for CMTimebaseRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CMTimebaseRef);
}

void type metadata accessor for REMeshAttributeDescriptorRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshAttributeDescriptorRef);
}

void type metadata accessor for simd_quatf(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_quatf);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for os_unfair_lock_s);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for REAudioReverbPreset(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAudioReverbPreset);
}

void type metadata accessor for REMotionType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMotionType);
}

void type metadata accessor for CGColorRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGColorRef);
}

void protocol witness for SetAlgebra.init() in conformance RERenderFlags(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *protocol witness for SetAlgebra.union(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.intersection(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance RERenderFlags(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *protocol witness for SetAlgebra.remove(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *protocol witness for SetAlgebra.update(with:) in conformance RERenderFlags@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance RERenderFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance RERenderFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance RERenderFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance RERenderFlags(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance RERenderFlags(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance RERenderFlags(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance RERenderFlags()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance RERenderFlags()
{
  return SetAlgebra.init<A>(_:)();
}

_DWORD *protocol witness for SetAlgebra.subtract(_:) in conformance RERenderFlags(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CFStringRef(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CFStringRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CFStringRef()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CFStringRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance REComponentClassPtr()
{
  return OpaquePointer.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance REComponentClassPtr()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REComponentClassPtr()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MTLCullMode(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_DWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REAssetType@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REAssetType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance MTLCullMode@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MTLCullMode(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CGColorRef(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CGColorRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CGColorRef()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REShaderAPI()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance REAssetType()
{
  Swift::UInt32 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REShaderAPI()
{
  Swift::UInt32 *v0;
  Swift::UInt32 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance MTLBlitOption@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance MTLTextureUsage(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *protocol witness for SetAlgebra.union(_:) in conformance MTLTextureUsage@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance MTLTextureUsage@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance MTLTextureUsage@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance MTLTextureUsage(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *protocol witness for SetAlgebra.remove(_:) in conformance MTLTextureUsage@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *protocol witness for SetAlgebra.update(with:) in conformance MTLTextureUsage@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance MTLTextureUsage(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance MTLTextureUsage(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.subtracting(_:) in conformance MTLTextureUsage@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance MTLTextureUsage(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance MTLTextureUsage(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance MTLTextureUsage(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance MTLTextureUsage()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *protocol witness for SetAlgebra.subtract(_:) in conformance MTLTextureUsage(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REColorGamut(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance REShaderStage()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance REColorGamut()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance REShaderStage()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MTLPixelFormat()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_WORD *protocol witness for OptionSet.init(rawValue:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSURLResourceKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSURLResourceKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x220768C3C](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CMTimebaseRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CMTimebaseRef, a3);
  return static _CFObject.== infix(_:_:)();
}

_WORD *protocol witness for RawRepresentable.init(rawValue:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance RERenderFlags@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

_DWORD *protocol witness for OptionSet.init(rawValue:) in conformance RERenderFlags@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CFStringRef, a3);
  return static _CFObject.== infix(_:_:)();
}

void protocol witness for SetAlgebra.init() in conformance REMaterialAssetCustomFeatureFlags(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CGColorRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CGColorRef, a3);
  return static _CFObject.== infix(_:_:)();
}

uint64_t base witness table accessor for Equatable in CGColorRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t base witness table accessor for Equatable in CFStringRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x220772E3C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in CFStringRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
}

uint64_t base witness table accessor for Equatable in CMTimebaseRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef, (uint64_t (*)(uint64_t))type metadata accessor for CMTimebaseRef, (uint64_t)&protocol conformance descriptor for CMTimebaseRef);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REAssetType(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *protocol witness for SetAlgebra.formUnion(_:) in conformance MTLRenderStages(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance MTLTextureUsage@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance REColorGamut@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance REColorGamut(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_WORD *protocol witness for SetAlgebra.union(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.intersection(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *protocol witness for SetAlgebra.remove(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_WORD)v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *protocol witness for SetAlgebra.update(with:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *protocol witness for SetAlgebra.formUnion(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

_WORD *protocol witness for SetAlgebra.subtracting(_:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *a1)
{
  _WORD *v1;

  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance REMaterialAssetPBRFeatureFlags()
{
  _WORD *v0;

  return *v0 == 0;
}

_WORD *protocol witness for SetAlgebra.subtract(_:) in conformance REMaterialAssetPBRFeatureFlags(_WORD *result)
{
  _WORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance REComponentClassPtr()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLResourceKey()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance REMaterialAssetPBRFeatureFlags(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance REMaterialAssetPBRFeatureFlags@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v3;
  uint64_t result;

  v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance USKDataType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKDataType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, (uint64_t (*)(uint64_t))type metadata accessor for USKDataType, (uint64_t)&protocol conformance descriptor for USKDataType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, (uint64_t (*)(uint64_t))type metadata accessor for USKDataType, (uint64_t)&protocol conformance descriptor for USKDataType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKRoleType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, (uint64_t (*)(uint64_t))type metadata accessor for USKRoleType, (uint64_t)&protocol conformance descriptor for USKRoleType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, (uint64_t (*)(uint64_t))type metadata accessor for USKRoleType, (uint64_t)&protocol conformance descriptor for USKRoleType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NSURLResourceKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x220768C3C](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance USKNodeType()
{
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, (uint64_t (*)(uint64_t))type metadata accessor for USKNodeType, (uint64_t)&protocol conformance descriptor for USKNodeType);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, (uint64_t (*)(uint64_t))type metadata accessor for USKNodeType, (uint64_t)&protocol conformance descriptor for USKNodeType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CMTimebaseRef(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CMTimebaseRef, a1);
  return _CFObject.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CMTimebaseRef()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for CMTimebaseRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CMTimebaseRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(a1, a2, a3, (uint64_t)&protocol conformance descriptor for CMTimebaseRef);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CFStringRef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  MEMORY[0x220772E3C](a4, a2);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Hashable in CMTimebaseRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CMTimebaseRef and conformance CMTimebaseRef, (uint64_t (*)(uint64_t))type metadata accessor for CMTimebaseRef, (uint64_t)&protocol conformance descriptor for CMTimebaseRef);
}

uint64_t base witness table accessor for Equatable in REComponentType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentType and conformance REComponentType, (uint64_t (*)(uint64_t))type metadata accessor for REComponentType, (uint64_t)&protocol conformance descriptor for REComponentType);
}

uint64_t base witness table accessor for Equatable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for RawRepresentable in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for SetAlgebra in REEngineServiceMask()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REEngineServiceMask and conformance REEngineServiceMask, (uint64_t (*)(uint64_t))type metadata accessor for REEngineServiceMask, (uint64_t)&protocol conformance descriptor for REEngineServiceMask);
}

uint64_t base witness table accessor for Equatable in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, (uint64_t (*)(uint64_t))type metadata accessor for RERenderFlags, (uint64_t)&protocol conformance descriptor for RERenderFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, (uint64_t (*)(uint64_t))type metadata accessor for RERenderFlags, (uint64_t)&protocol conformance descriptor for RERenderFlags);
}

uint64_t base witness table accessor for RawRepresentable in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, (uint64_t (*)(uint64_t))type metadata accessor for RERenderFlags, (uint64_t)&protocol conformance descriptor for RERenderFlags);
}

uint64_t base witness table accessor for SetAlgebra in RERenderFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type RERenderFlags and conformance RERenderFlags, (uint64_t (*)(uint64_t))type metadata accessor for RERenderFlags, (uint64_t)&protocol conformance descriptor for RERenderFlags);
}

uint64_t base witness table accessor for Equatable in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, (uint64_t (*)(uint64_t))type metadata accessor for REStartupOptions, (uint64_t)&protocol conformance descriptor for REStartupOptions);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, (uint64_t (*)(uint64_t))type metadata accessor for REStartupOptions, (uint64_t)&protocol conformance descriptor for REStartupOptions);
}

uint64_t base witness table accessor for RawRepresentable in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, (uint64_t (*)(uint64_t))type metadata accessor for REStartupOptions, (uint64_t)&protocol conformance descriptor for REStartupOptions);
}

uint64_t base witness table accessor for SetAlgebra in REStartupOptions()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REStartupOptions and conformance REStartupOptions, (uint64_t (*)(uint64_t))type metadata accessor for REStartupOptions, (uint64_t)&protocol conformance descriptor for REStartupOptions);
}

uint64_t base witness table accessor for RawRepresentable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in REComponentClassPtr()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REComponentClassPtr and conformance REComponentClassPtr, (uint64_t (*)(uint64_t))type metadata accessor for REComponentClassPtr, (uint64_t)&protocol conformance descriptor for REComponentClassPtr);
}

uint64_t base witness table accessor for Equatable in MTLPixelFormat()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLPixelFormat and conformance MTLPixelFormat, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&protocol conformance descriptor for MTLPixelFormat);
}

uint64_t base witness table accessor for Equatable in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
}

uint64_t base witness table accessor for RawRepresentable in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
}

uint64_t base witness table accessor for SetAlgebra in MTLTextureUsage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLTextureUsage and conformance MTLTextureUsage, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureUsage, (uint64_t)&protocol conformance descriptor for MTLTextureUsage);
}

uint64_t base witness table accessor for Equatable in MTLCullMode()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type MTLCullMode and conformance MTLCullMode, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&protocol conformance descriptor for MTLCullMode);
}

uint64_t base witness table accessor for Equatable in REColorGamut()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REColorGamut and conformance REColorGamut, (uint64_t (*)(uint64_t))type metadata accessor for REColorGamut, (uint64_t)&protocol conformance descriptor for REColorGamut);
}

uint64_t base witness table accessor for Hashable in CGColorRef()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance USKDataType(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSURLResourceKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSURLResourceKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSURLResourceKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSURLResourceKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t specialized SetAlgebra<>.init(arrayLiteral:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x220772E24]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of BodyTrackingComponent?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for REAssetType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAssetType);
}

void type metadata accessor for REMaterialAssetType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialAssetType);
}

__n128 __swift_memcpy128_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double4x4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_double4x4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_double4x4);
}

__n128 __swift_memcpy96_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for simd_double3x3(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for simd_double3x3(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_double3x3);
}

void type metadata accessor for RESkeletalModelSpacePoseDefinition(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESkeletalModelSpacePoseDefinition);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for RESkeletalPoseMeshMapEx(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESkeletalPoseMeshMapEx);
}

void type metadata accessor for RESkeletalPoseDefinition(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESkeletalPoseDefinition);
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for MTLTextureLevelInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MTLTextureLevelInfo(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for MTLTextureLevelInfo(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTextureLevelInfo);
}

void type metadata accessor for REStateTransitionInterruptionType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REStateTransitionInterruptionType);
}

void type metadata accessor for REStateTransitionConditionOperator(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REStateTransitionConditionOperator);
}

void type metadata accessor for REBlendWeightsDefinition(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REBlendWeightsDefinition);
}

uint64_t getEnumTagSinglePayload for REBlendWeightsMeshMap(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REBlendWeightsMeshMap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for REBlendWeightsMeshMap(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REBlendWeightsMeshMap);
}

void type metadata accessor for REMeshResourceDefinitionRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshResourceDefinitionRef);
}

void type metadata accessor for REEnvironmentResourceCreateSamplingQuality(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEnvironmentResourceCreateSamplingQuality);
}

void type metadata accessor for RIOPxrUsdObjectRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RIOPxrUsdObjectRef);
}

void type metadata accessor for CoreIKTransform(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CoreIKTransform);
}

void type metadata accessor for CFBooleanRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CFBooleanRef);
}

void type metadata accessor for CTLineRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CTLineRef);
}

void type metadata accessor for CTRunRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CTRunRef);
}

void type metadata accessor for CGPathElement(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGPathElement);
}

void type metadata accessor for geom_bbox_2d(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for geom_bbox_2d);
}

void type metadata accessor for RIOPxrSdfPathRef(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RIOPxrSdfPathRef);
}

void type metadata accessor for REReferenceSourceType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REReferenceSourceType);
}

uint64_t initializeBufferWithCopyOfBuffer for simd_quatd(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for simd_quatd(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for simd_quatd(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for simd_quatd);
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for NSProcessInfoThermalState);
}

void type metadata accessor for NSURLResourceKey(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for NSURLResourceKey);
}

uint64_t getEnumTagSinglePayload for RESystemDependency(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RESystemDependency(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for RESystemDependency(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESystemDependency);
}

uint64_t getEnumTagSinglePayload for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

void type metadata accessor for REVideoPlayerVideoReceiverEndpointChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoPlayerVideoReceiverEndpointChangedEvent);
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for REVideoPlayerViewingModeChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoPlayerViewingModeChangedEvent);
}

void type metadata accessor for REVideoPlayerVideoSizeChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoPlayerVideoSizeChangedEvent);
}

uint64_t getEnumTagSinglePayload for REVideoPlayerViewingModeChangedEvent(unsigned __int16 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (!a2)
    return 0;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if ((a2 + 0xFFFF) < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        return 0;
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for REVideoPlayerViewingModeChangedEvent(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_21B9B00BC + 4 * byte_21BE41265[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_21B9B009C + 4 * byte_21BE41260[v4]))();
}

uint64_t sub_21B9B009C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21B9B00BC(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_21B9B00C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21B9B00CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21B9B00D4(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_21B9B00DC(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

void type metadata accessor for REVideoPlayerContentTypeChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoPlayerContentTypeChangedEvent);
}

void type metadata accessor for REAnimationSkeletalPoseUpdateCompleteEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationSkeletalPoseUpdateCompleteEvent);
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for REEntityForceEffectComputeForcesEvent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REEntityForceEffectComputeForcesEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 144) = 0;
    if (a2)
      *(_QWORD *)(result + 136) = a2;
  }
  return result;
}

void type metadata accessor for REEntityForceEffectComputeForcesEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEntityForceEffectComputeForcesEvent);
}

void type metadata accessor for REEntityPhysicsDidSimulateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEntityPhysicsDidSimulateEvent);
}

void type metadata accessor for REEntityPhysicsWillSimulateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEntityPhysicsWillSimulateEvent);
}

void type metadata accessor for REAudioPlayerDidCompleteEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAudioPlayerDidCompleteEvent);
}

void type metadata accessor for REOwnershipChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REOwnershipChangedEvent);
}

void type metadata accessor for REOwnershipResponseEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REOwnershipResponseEvent);
}

void type metadata accessor for REOwnershipRequestEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REOwnershipRequestEvent);
}

void type metadata accessor for REMotionStateDidChangeEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMotionStateDidChangeEvent);
}

void type metadata accessor for REComponentDidChangeEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentDidChangeEvent);
}

void type metadata accessor for REComponentWillRemoveEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentWillRemoveEvent);
}

void type metadata accessor for REComponentWillDeactivateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentWillDeactivateEvent);
}

void type metadata accessor for REComponentDidActivateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentDidActivateEvent);
}

uint64_t getEnumTagSinglePayload for REComponentDidChangeEvent(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REComponentDidChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for REComponentDidAddEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REComponentDidAddEvent);
}

void type metadata accessor for RECollisionDidStopEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RECollisionDidStopEvent);
}

void type metadata accessor for RECollisionDidUpdateEventEx(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RECollisionDidUpdateEventEx);
}

uint64_t getEnumTagSinglePayload for RECollisionDidUpdateEventEx(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 16))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RECollisionDidUpdateEventEx(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = 0;
  }
  return result;
}

void type metadata accessor for RECollisionDidStartEventEx(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RECollisionDidStartEventEx);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for REAnimationTimelineEventCreated(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationTimelineEventCreated);
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventCreated(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventCreated(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventTerminated(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationTimelineEventTerminated);
}

void type metadata accessor for REAnimationTimelineEventResume(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationTimelineEventResume);
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventResume(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventResume(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventPause(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationTimelineEventPause);
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationTimelineEventSkipped(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 72);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationTimelineEventSkipped(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_BYTE *)(result + 72) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REAnimationTimelineEventSkipped(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationTimelineEventSkipped);
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventEnd(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventEnd(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventEnd(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasTimelineEventEnd);
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventUpdate(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 104);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_BYTE *)(result + 104) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventUpdate(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasTimelineEventUpdate);
}

uint64_t getEnumTagSinglePayload for REAnimationHasTimelineEventStart(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REAnimationHasTimelineEventStart(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REAnimationHasTimelineEventStart(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasTimelineEventStart);
}

void type metadata accessor for REAnimationHasStartedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasStartedEvent);
}

void type metadata accessor for REAnimationHasTerminatedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasTerminatedEvent);
}

void type metadata accessor for REAnimationHasLoopedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasLoopedEvent);
}

void type metadata accessor for REAnimationHasCompletedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAnimationHasCompletedEvent);
}

uint64_t getEnumTagSinglePayload for REBlendWeightsDefinition(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REBlendWeightsDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for RESceneEntityDidReparentEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneEntityDidReparentEvent);
}

void type metadata accessor for RESceneEntityWillRemoveEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneEntityWillRemoveEvent);
}

void type metadata accessor for RESceneEntityWillDeactivateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneEntityWillDeactivateEvent);
}

void type metadata accessor for RESceneEntityDidActivateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneEntityDidActivateEvent);
}

uint64_t getEnumTagSinglePayload for REMeshInstanceDefinitionRef(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)a1)
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for REMeshInstanceDefinitionRef(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for RESceneEntityDidAddEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneEntityDidAddEvent);
}

uint64_t getEnumTagSinglePayload for REMotionStateDidChangeEvent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REMotionStateDidChangeEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for RESceneAnchoredStateChangedEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RESceneAnchoredStateChangedEvent);
}

void type metadata accessor for REEngineDoRenderEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEngineDoRenderEvent);
}

void type metadata accessor for REEngineDoUpdateEvent(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REEngineDoUpdateEvent);
}

void type metadata accessor for REMaterialAssetCustomFeatureFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialAssetCustomFeatureFlags);
}

void type metadata accessor for REMaterialAssetPBRFeatureFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialAssetPBRFeatureFlags);
}

uint64_t getEnumTagSinglePayload for REGeomBuildExtrudedTextOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 35);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for REGeomBuildExtrudedTextOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 35) = a2 + 1;
  }
  return result;
}

void type metadata accessor for REGeomBuildExtrudedTextOptions(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildExtrudedTextOptions);
}

void type metadata accessor for REMaterialAssetUnlitFeatureFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMaterialAssetUnlitFeatureFlags);
}

void type metadata accessor for REGeomBuildPlaneOrientation(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REGeomBuildPlaneOrientation);
}

void type metadata accessor for REAudioCalibrationMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAudioCalibrationMode);
}

void type metadata accessor for REAudioNormalizationMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REAudioNormalizationMode);
}

uint64_t getEnumTagSinglePayload for AudioBuffer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for AudioBuffer(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for AudioBuffer);
}

void type metadata accessor for AudioTimeStampFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for AudioTimeStampFlags);
}

void type metadata accessor for SMPTETime(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for SMPTETime);
}

void type metadata accessor for REShaderAPI(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REShaderAPI);
}

void type metadata accessor for REShaderStage(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REShaderStage);
}

void type metadata accessor for MTLTextureSwizzle(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for MTLTextureSwizzle);
}

void type metadata accessor for RELoadTraceType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RELoadTraceType);
}

uint64_t base witness table accessor for Equatable in REShaderStage()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REShaderStage and conformance REShaderStage, (uint64_t (*)(uint64_t))type metadata accessor for REShaderStage, (uint64_t)&protocol conformance descriptor for REShaderStage);
}

uint64_t base witness table accessor for Equatable in REShaderAPI()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REShaderAPI and conformance REShaderAPI, (uint64_t (*)(uint64_t))type metadata accessor for REShaderAPI, (uint64_t)&protocol conformance descriptor for REShaderAPI);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetUnlitFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetUnlitFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetUnlitFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetUnlitFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetUnlitFeatureFlags and conformance REMaterialAssetUnlitFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetUnlitFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetUnlitFeatureFlags);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetPBRFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetPBRFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetPBRFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetPBRFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetPBRFeatureFlags and conformance REMaterialAssetPBRFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetPBRFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetPBRFeatureFlags);
}

uint64_t base witness table accessor for Equatable in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetCustomFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetCustomFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetCustomFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for SetAlgebra in REMaterialAssetCustomFeatureFlags()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REMaterialAssetCustomFeatureFlags and conformance REMaterialAssetCustomFeatureFlags, (uint64_t (*)(uint64_t))type metadata accessor for REMaterialAssetCustomFeatureFlags, (uint64_t)&protocol conformance descriptor for REMaterialAssetCustomFeatureFlags);
}

uint64_t base witness table accessor for RawRepresentable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in NSURLResourceKey()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, (uint64_t)&protocol conformance descriptor for NSURLResourceKey);
}

uint64_t base witness table accessor for Equatable in REAssetType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type REAssetType and conformance REAssetType, (uint64_t (*)(uint64_t))type metadata accessor for REAssetType, (uint64_t)&protocol conformance descriptor for REAssetType);
}

void type metadata accessor for geom_cubic_bezier_2d(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for geom_cubic_bezier_2d);
}

void type metadata accessor for geom_quadratic_bezier_2d(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for geom_quadratic_bezier_2d);
}

void type metadata accessor for geom_line_segment_2d(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for geom_line_segment_2d);
}

void type metadata accessor for CGPathElementType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CGPathElementType);
}

uint64_t getEnumTagSinglePayload for RESkeletalModelSpacePoseDefinition(uint64_t a1, int a2)
{
  int v3;

  if (!a2)
    return 0;
  if (a2 != 1 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2);
  if (*(_QWORD *)(a1 + 8))
    v3 = -1;
  else
    v3 = 0;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for RESkeletalModelSpacePoseDefinition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = 0;
  }
  return result;
}

void type metadata accessor for REMeshIdentifier(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REMeshIdentifier);
}

void type metadata accessor for CTFontSymbolicTraits(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for CTFontSymbolicTraits);
}

void type metadata accessor for USKRoleType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for USKRoleType);
}

void type metadata accessor for USKDataType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for USKDataType);
}

void type metadata accessor for USKNodeType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for USKNodeType);
}

void type metadata accessor for REVideoPlayerContentType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVideoPlayerContentType);
}

void type metadata accessor for REOwnershipResponseResult(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REOwnershipResponseResult);
}

void type metadata accessor for REVerticalTextAlignment(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for REVerticalTextAlignment);
}

void type metadata accessor for RETextAlignment(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RETextAlignment);
}

void type metadata accessor for RELineBreakMode(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for RELineBreakMode);
}

void type metadata accessor for SMPTETimeFlags(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for SMPTETimeFlags);
}

void type metadata accessor for SMPTETimeType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, &lazy cache variable for type metadata for SMPTETimeType);
}

uint64_t base witness table accessor for RawRepresentable in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, (uint64_t (*)(uint64_t))type metadata accessor for USKNodeType, (uint64_t)&protocol conformance descriptor for USKNodeType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, (uint64_t (*)(uint64_t))type metadata accessor for USKNodeType, (uint64_t)&protocol conformance descriptor for USKNodeType);
}

uint64_t base witness table accessor for Equatable in USKNodeType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKNodeType and conformance USKNodeType, (uint64_t (*)(uint64_t))type metadata accessor for USKNodeType, (uint64_t)&protocol conformance descriptor for USKNodeType);
}

uint64_t base witness table accessor for RawRepresentable in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, (uint64_t (*)(uint64_t))type metadata accessor for USKDataType, (uint64_t)&protocol conformance descriptor for USKDataType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, (uint64_t (*)(uint64_t))type metadata accessor for USKDataType, (uint64_t)&protocol conformance descriptor for USKDataType);
}

uint64_t base witness table accessor for Equatable in USKDataType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKDataType and conformance USKDataType, (uint64_t (*)(uint64_t))type metadata accessor for USKDataType, (uint64_t)&protocol conformance descriptor for USKDataType);
}

uint64_t base witness table accessor for RawRepresentable in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, (uint64_t (*)(uint64_t))type metadata accessor for USKRoleType, (uint64_t)&protocol conformance descriptor for USKRoleType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, (uint64_t (*)(uint64_t))type metadata accessor for USKRoleType, (uint64_t)&protocol conformance descriptor for USKRoleType);
}

uint64_t base witness table accessor for Equatable in USKRoleType()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type USKRoleType and conformance USKRoleType, (uint64_t (*)(uint64_t))type metadata accessor for USKRoleType, (uint64_t)&protocol conformance descriptor for USKRoleType);
}

void type metadata accessor for REMeshIdentifierType(uint64_t a1)
{
  type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(a1, (unint64_t *)&lazy cache variable for type metadata for REMeshIdentifierType);
}

void type metadata accessor for REGeomBuildBoxWithRoundedCornersOptions(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t SimpleMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata *v36;
  _UNKNOWN **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  char v42[128];

  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v32 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SimpleMaterial((uint64_t)v1, (uint64_t)v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v9 + 32) = 1701667182;
  *(_QWORD *)(v9 + 40) = 0xE400000000000000;
  swift_beginAccess();
  if (REMaterialAssetGetSourceName())
  {
    v10 = String.init(cString:)();
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 56) = v12;
  *(_QWORD *)(v9 + 72) = v13;
  *(_QWORD *)(v9 + 80) = 0x726F6C6F63;
  *(_QWORD *)(v9 + 88) = 0xE500000000000000;
  *(_QWORD *)(v9 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  v14 = swift_allocObject();
  v15 = v14 + 16;
  *(_QWORD *)(v9 + 96) = v14;
  v36 = &type metadata for SimpleMaterial;
  v37 = &protocol witness table for SimpleMaterial;
  v33 = (void *)swift_allocObject();
  outlined init with copy of SimpleMaterial((uint64_t)v1, (uint64_t)v33 + 16);
  v16 = v1[10];
  v17 = (void *)v1[11];
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(&v33, v16, v17, v15);
  *(_QWORD *)(v9 + 128) = 0x63696C6C6174656DLL;
  *(_QWORD *)(v9 + 136) = 0xE800000000000000;
  *(_QWORD *)(v9 + 168) = &type metadata for MaterialScalarParameter;
  v18 = (unint64_t)specialized Material.getTexture(_:)(9u);
  if (v18)
  {
    v19 = v18 | 0x8000000000000000;
    goto LABEL_11;
  }
  v31 = a1;
  v20 = (void *)v1[9];
  swift_bridgeObjectRetain_n();
  v21 = v20;
  swift_bridgeObjectRetain_n();
  v22 = v21;
  specialized String.withCString<A>(_:)(0x63696C6C6174656DLL, 0xED0000656C616353, v22, (uint64_t)&v33);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41 != 255)
  {
    if (v41 == 2)
    {
      v19 = v33;
      goto LABEL_11;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v33, v34, v35, (uint64_t)v36, (uint64_t)v37, v38, v39, v40, v41);
  }
  v19 = 0;
LABEL_11:
  *(_QWORD *)(v9 + 144) = v19;
  *(_QWORD *)(v9 + 176) = 0x73656E6867756F72;
  *(_QWORD *)(v9 + 184) = 0xE900000000000073;
  *(_QWORD *)(v9 + 216) = &type metadata for MaterialScalarParameter;
  v23 = (unint64_t)specialized Material.getTexture(_:)(0xAu);
  if (v23)
  {
    v24 = v23 | 0x8000000000000000;
  }
  else
  {
    v31 = v3;
    v25 = (void *)v1[9];
    swift_bridgeObjectRetain_n();
    v26 = v25;
    swift_bridgeObjectRetain_n();
    v27 = v26;
    specialized String.withCString<A>(_:)(0x73656E6867756F72, 0xEE00656C61635373, v27, (uint64_t)&v33);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41 == 255)
    {
      v24 = 1065353216;
    }
    else if (v41 == 2)
    {
      v24 = v33;
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v33, v34, v35, (uint64_t)v36, (uint64_t)v37, v38, v39, v40, v41);
      v24 = 1065353216;
    }
    v3 = v31;
  }
  *(_QWORD *)(v9 + 192) = v24;
  *(_QWORD *)(v9 + 224) = 0xD000000000000010;
  *(_QWORD *)(v9 + 232) = 0x800000021BE81C70;
  *(_QWORD *)(v9 + 264) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v9 + 240) = v1[15] == 1;
  v28 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v8, 1, 1, v28);
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v5, *MEMORY[0x24BEE43C0], v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PhysicallyBasedMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t SourceName;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD v81[3];
  ValueMetadata *v82;
  _UNKNOWN **v83;
  _QWORD v84[8];
  unsigned __int8 v85;
  void *v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  char v94[160];

  v2 = v1;
  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PhysicallyBasedMaterial(v1, (uint64_t)v94);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE50920;
  *(_QWORD *)(v11 + 32) = 1701667182;
  *(_QWORD *)(v11 + 40) = 0xE400000000000000;
  swift_beginAccess();
  SourceName = REMaterialAssetGetSourceName();
  v79 = v7;
  v80 = a1;
  v78 = v4;
  if (SourceName)
  {
    v13 = String.init(cString:)();
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v11 + 48) = v13;
  *(_QWORD *)(v11 + 56) = v15;
  *(_QWORD *)(v11 + 72) = v16;
  *(_QWORD *)(v11 + 80) = 0x6F6C6F4365736162;
  *(_QWORD *)(v11 + 88) = 0xE900000000000072;
  *(_QWORD *)(v11 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  v17 = swift_allocObject();
  v18 = v17 + 16;
  *(_QWORD *)(v11 + 96) = v17;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v81, 0, 0, v18);
  *(_QWORD *)(v11 + 128) = 0x73656E6867756F72;
  *(_QWORD *)(v11 + 136) = 0xE900000000000073;
  *(_QWORD *)(v11 + 168) = &type metadata for PhysicallyBasedMaterial.Roughness;
  v19 = swift_allocObject();
  *(_QWORD *)(v11 + 144) = v19;
  v20 = v19 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Roughness.init(material:alternateTintKey:)(v81, v20);
  *(_QWORD *)(v11 + 176) = 0x63696C6C6174656DLL;
  *(_QWORD *)(v11 + 184) = 0xE800000000000000;
  *(_QWORD *)(v11 + 216) = &type metadata for PhysicallyBasedMaterial.Metallic;
  v21 = swift_allocObject();
  *(_QWORD *)(v11 + 192) = v21;
  v22 = v21 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Metallic.init(material:alternateTintKey:)(v81, v22);
  *(_QWORD *)(v11 + 224) = 0x6C616D726F6ELL;
  *(_QWORD *)(v11 + 232) = 0xE600000000000000;
  *(_QWORD *)(v11 + 264) = &type metadata for PhysicallyBasedMaterial.Normal;
  v23 = swift_allocObject();
  *(_QWORD *)(v11 + 240) = v23;
  PhysicallyBasedMaterial.normal.getter(v23 + 16);
  *(_QWORD *)(v11 + 272) = 0x676E69646E656C62;
  *(_QWORD *)(v11 + 280) = 0xE800000000000000;
  *(_QWORD *)(v11 + 312) = &type metadata for PhysicallyBasedMaterial.Blending;
  v24 = swift_allocObject();
  *(_QWORD *)(v11 + 288) = v24;
  PhysicallyBasedMaterial.blending.getter(v24 + 16);
  *(_QWORD *)(v11 + 320) = 0xD000000000000010;
  *(_QWORD *)(v11 + 328) = 0x800000021BE81C90;
  *(_QWORD *)(v11 + 360) = &type metadata for PhysicallyBasedMaterial.AmbientOcclusion;
  v25 = swift_allocObject();
  *(_QWORD *)(v11 + 336) = v25;
  PhysicallyBasedMaterial.ambientOcclusion.getter(v25 + 16);
  *(_QWORD *)(v11 + 368) = 0x72616C7563657073;
  *(_QWORD *)(v11 + 376) = 0xE800000000000000;
  *(_QWORD *)(v11 + 408) = &type metadata for PhysicallyBasedMaterial.Specular;
  v26 = swift_allocObject();
  *(_QWORD *)(v11 + 384) = v26;
  v27 = v26 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Specular.init(material:alternateTintKey:)(v81, v27);
  *(_QWORD *)(v11 + 416) = 0x6E65656873;
  *(_QWORD *)(v11 + 424) = 0xE500000000000000;
  *(_QWORD *)(v11 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicallyBasedMaterial.SheenColor?);
  v28 = swift_allocObject();
  *(_QWORD *)(v11 + 432) = v28;
  v29 = *(_BYTE *)(v2 + 105);
  v76 = v10;
  v77 = v5;
  if ((v29 & 8) != 0)
  {
    v82 = &type metadata for PhysicallyBasedMaterial;
    v83 = &protocol witness table for PhysicallyBasedMaterial;
    v81[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
    PhysicallyBasedMaterial.SheenColor.init(material:alternateTintKey:)(v81, (uint64_t)&v86);
    v30 = v86;
    v33 = v87;
    v31 = v88;
    v32 = v89;
  }
  else
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0uLL;
  }
  *(_QWORD *)(v28 + 16) = v30;
  *(_OWORD *)(v28 + 24) = v33;
  *(_QWORD *)(v28 + 40) = v31;
  *(_DWORD *)(v28 + 48) = v32;
  *(_QWORD *)(v11 + 464) = 0x616F637261656C63;
  *(_QWORD *)(v11 + 472) = 0xE900000000000074;
  *(_QWORD *)(v11 + 504) = &type metadata for PhysicallyBasedMaterial.Clearcoat;
  v34 = swift_allocObject();
  *(_QWORD *)(v11 + 480) = v34;
  v35 = v34 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v81, v35);
  *(_QWORD *)(v11 + 512) = 0xD000000000000012;
  *(_QWORD *)(v11 + 520) = 0x800000021BE81CB0;
  *(_QWORD *)(v11 + 552) = &type metadata for PhysicallyBasedMaterial.ClearcoatRoughness;
  v36 = swift_allocObject();
  *(_QWORD *)(v11 + 528) = v36;
  v37 = v36 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v81, v37);
  *(_QWORD *)(v11 + 560) = 0x6F72746F73696E61;
  *(_QWORD *)(v11 + 568) = 0xEF6C6576654C7970;
  *(_QWORD *)(v11 + 600) = &type metadata for PhysicallyBasedMaterial.AnisotropyLevel;
  v38 = swift_allocObject();
  *(_QWORD *)(v11 + 576) = v38;
  v39 = v38 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.AnisotropyLevel.init(material:alternateTintKey:)(v81, v39);
  *(_QWORD *)(v11 + 608) = 0x6F72746F73696E61;
  *(_QWORD *)(v11 + 616) = 0xEF656C676E417970;
  *(_QWORD *)(v11 + 648) = &type metadata for PhysicallyBasedMaterial.AnisotropyAngle;
  v40 = swift_allocObject();
  *(_QWORD *)(v11 + 624) = v40;
  v41 = v40 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v2, v81[0] + 16);
  PhysicallyBasedMaterial.AnisotropyAngle.init(material:alternateTintKey:)(v81, v41);
  *(_QWORD *)(v11 + 656) = 0xD000000000000011;
  *(_QWORD *)(v11 + 664) = 0x800000021BE81CD0;
  v42 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  v43 = v42;
  swift_bridgeObjectRetain_n();
  v44 = v43;
  specialized String.withCString<A>(_:)(0x6576697373696D65, 0xED0000656C616353, v44, (uint64_t)v84);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v45 = v2;
  v46 = (void *)v84[0];
  v47 = v84[1];
  v48 = v84[2];
  v49 = v84[3];
  v50 = v84[4];
  v51 = v84[5];
  v52 = v84[6];
  v74 = v84[7];
  v75 = v45;
  v53 = v85;
  outlined init with copy of PhysicallyBasedMaterial(v45, (uint64_t)v81);
  if (v53 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v86);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v81);
    v60 = v86;
    v55 = *((_QWORD *)&v87 + 1);
    v54 = v87;
    v56 = v88;
    v57 = v89;
    v58 = v90;
    v59 = v91;
    v61 = v92;
    v53 = v93;
    v62 = v75;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v81);
    v86 = v46;
    *(_QWORD *)&v87 = v47;
    *((_QWORD *)&v87 + 1) = v48;
    v88 = v49;
    v89 = v50;
    v90 = v51;
    v91 = v52;
    v54 = v47;
    v55 = v48;
    v56 = v49;
    v57 = v50;
    v58 = v51;
    v59 = v52;
    v60 = v46;
    v61 = v74;
    v62 = v75;
  }
  v63 = 0;
  if (v53 != 255)
  {
    if (v53 == 2)
      v63 = (int)v60;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v60, v54, v55, v56, v57, v58, v59, v61, v53);
  }
  *(_QWORD *)(v11 + 696) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v11 + 672) = v63;
  strcpy((char *)(v11 + 704), "emissiveColor");
  *(_WORD *)(v11 + 718) = -4864;
  *(_QWORD *)(v11 + 744) = &type metadata for PhysicallyBasedMaterial.EmissiveColor;
  v64 = swift_allocObject();
  *(_QWORD *)(v11 + 720) = v64;
  v65 = v64 + 16;
  v82 = &type metadata for PhysicallyBasedMaterial;
  v83 = &protocol witness table for PhysicallyBasedMaterial;
  v81[0] = swift_allocObject();
  outlined init with copy of PhysicallyBasedMaterial(v62, v81[0] + 16);
  PhysicallyBasedMaterial.EmissiveColor.init(material:alternateTintKey:)(v81, v65);
  *(_QWORD *)(v11 + 752) = 0xD00000000000001ALL;
  *(_QWORD *)(v11 + 760) = 0x800000021BE81CF0;
  *(_QWORD *)(v11 + 792) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, (float32x2_t *)(v11 + 768));
  *(_QWORD *)(v11 + 800) = 0xD000000000000023;
  *(_QWORD *)(v11 + 808) = 0x800000021BE81D10;
  *(_QWORD *)(v11 + 840) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, (float32x2_t *)(v11 + 816));
  *(_QWORD *)(v11 + 848) = 0x6C6C754365636166;
  *(_QWORD *)(v11 + 856) = 0xEB00000000676E69;
  *(_QWORD *)(v11 + 888) = &type metadata for MaterialParameterTypes.FaceCulling;
  v66 = 2;
  v67 = v78;
  v68 = v79;
  v70 = v76;
  v69 = v77;
  if ((*(_BYTE *)(v62 + 88) & 1) == 0)
  {
    if (*(_QWORD *)(v62 + 80) >= 3uLL)
      v66 = 2;
    else
      v66 = *(_QWORD *)(v62 + 80);
  }
  *(_BYTE *)(v11 + 864) = v66;
  *(_QWORD *)(v11 + 896) = 0xD000000000000010;
  *(_QWORD *)(v11 + 904) = 0x800000021BE81C70;
  *(_QWORD *)(v11 + 936) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v11 + 912) = *(_QWORD *)(v62 + 136) == 1;
  v71 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v70, 1, 1, v71);
  (*(void (**)(char *, _QWORD, uint64_t))(v69 + 104))(v68, *MEMORY[0x24BEE43C0], v67);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t UnlitMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[5];
  _BYTE v25[168];

  v23 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v24[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UnlitMaterial((uint64_t)v1, (uint64_t)v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE50910;
  *(_QWORD *)(v9 + 32) = 1701667182;
  *(_QWORD *)(v9 + 40) = 0xE400000000000000;
  swift_beginAccess();
  if (REMaterialAssetGetSourceName())
  {
    v10 = String.init(cString:)();
    v12 = v11;
  }
  else
  {
    v10 = 0;
    v12 = 0;
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 56) = v12;
  *(_QWORD *)(v9 + 72) = v13;
  *(_QWORD *)(v9 + 80) = 0x726F6C6F63;
  *(_QWORD *)(v9 + 88) = 0xE500000000000000;
  *(_QWORD *)(v9 + 120) = &type metadata for PhysicallyBasedMaterial.BaseColor;
  v14 = swift_allocObject();
  v15 = v14 + 16;
  *(_QWORD *)(v9 + 96) = v14;
  v24[3] = &type metadata for UnlitMaterial;
  v24[4] = &protocol witness table for UnlitMaterial;
  v24[0] = swift_allocObject();
  outlined init with copy of UnlitMaterial((uint64_t)v1, v24[0] + 16);
  v16 = v1[10];
  v17 = (void *)v1[11];
  swift_bridgeObjectRetain();
  PhysicallyBasedMaterial.BaseColor.init(material:alternateTintKey:)(v24, v16, v17, v15);
  *(_QWORD *)(v9 + 128) = 0x676E69646E656C62;
  *(_QWORD *)(v9 + 136) = 0xE800000000000000;
  *(_QWORD *)(v9 + 168) = &type metadata for PhysicallyBasedMaterial.Blending;
  v18 = swift_allocObject();
  *(_QWORD *)(v9 + 144) = v18;
  UnlitMaterial.blending.getter(v18 + 16);
  *(_QWORD *)(v9 + 176) = 0xD000000000000010;
  *(_QWORD *)(v9 + 184) = 0x800000021BE81760;
  v19 = specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter();
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  *(_DWORD *)(v9 + 192) = v19;
  *(_BYTE *)(v9 + 196) = BYTE4(v19) & 1;
  *(_QWORD *)(v9 + 216) = v20;
  *(_QWORD *)(v9 + 224) = 0xD000000000000010;
  *(_QWORD *)(v9 + 232) = 0x800000021BE81C70;
  *(_QWORD *)(v9 + 264) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v9 + 240) = v1[14] == 1;
  v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void CustomMaterial.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t SourceName;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  ValueMetadata *v53;
  _UNKNOWN **v54;
  _QWORD v55[8];
  unsigned __int8 v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;

  v2 = v1;
  v4 = type metadata accessor for Mirror.AncestorRepresentation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CustomMaterial(v1, (uint64_t)&v66);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE50930;
  *(_QWORD *)(v11 + 32) = 1701667182;
  *(_QWORD *)(v11 + 40) = 0xE400000000000000;
  swift_beginAccess();
  SourceName = REMaterialAssetGetSourceName();
  v49 = v7;
  v50 = a1;
  v47 = v5;
  v48 = v4;
  v46 = v10;
  if (SourceName)
  {
    v13 = String.init(cString:)();
    v15 = v14;
  }
  else
  {
    v13 = 0;
    v15 = 0;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v11 + 48) = v13;
  *(_QWORD *)(v11 + 56) = v15;
  *(_QWORD *)(v11 + 72) = v16;
  strcpy((char *)(v11 + 80), "lightingModel");
  *(_WORD *)(v11 + 94) = -4864;
  *(_QWORD *)(v11 + 120) = &type metadata for CustomMaterial.LightingModel;
  CustomMaterial.lightingModel.getter((char *)(v11 + 96));
  *(_QWORD *)(v11 + 128) = 0x6F6C6F4365736162;
  *(_QWORD *)(v11 + 136) = 0xE900000000000072;
  *(_QWORD *)(v11 + 168) = &type metadata for CustomMaterial.BaseColor;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.BaseColor.init(material:alternateTintKey:)(v52, 0, 0, v11 + 144);
  *(_QWORD *)(v11 + 176) = 0x73656E6867756F72;
  *(_QWORD *)(v11 + 184) = 0xE900000000000073;
  *(_QWORD *)(v11 + 216) = &type metadata for CustomMaterial.Roughness;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Roughness.init(material:alternateTintKey:)(v52, v11 + 192);
  *(_QWORD *)(v11 + 224) = 0x63696C6C6174656DLL;
  *(_QWORD *)(v11 + 232) = 0xE800000000000000;
  *(_QWORD *)(v11 + 264) = &type metadata for CustomMaterial.Metallic;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Metallic.init(material:alternateTintKey:)(v52, v11 + 240);
  *(_QWORD *)(v11 + 272) = 0x6C616D726F6ELL;
  *(_QWORD *)(v11 + 280) = 0xE600000000000000;
  *(_QWORD *)(v11 + 312) = &type metadata for CustomMaterial.Normal;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Normal.init(material:alternateTintKey:)(v52, v11 + 288);
  strcpy((char *)(v11 + 320), "emissiveColor");
  *(_WORD *)(v11 + 334) = -4864;
  *(_QWORD *)(v11 + 360) = &type metadata for CustomMaterial.EmissiveColor;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(v52, v11 + 336);
  *(_QWORD *)(v11 + 368) = 0xD000000000000010;
  *(_QWORD *)(v11 + 376) = 0x800000021BE81C90;
  *(_QWORD *)(v11 + 408) = &type metadata for CustomMaterial.AmbientOcclusion;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:)(v52, v11 + 384);
  *(_QWORD *)(v11 + 416) = 0x72616C7563657073;
  *(_QWORD *)(v11 + 424) = 0xE800000000000000;
  *(_QWORD *)(v11 + 456) = &type metadata for CustomMaterial.Specular;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Specular.init(material:alternateTintKey:)(v52, v11 + 432);
  *(_QWORD *)(v11 + 464) = 0x616F637261656C63;
  *(_QWORD *)(v11 + 472) = 0xE900000000000074;
  *(_QWORD *)(v11 + 504) = &type metadata for CustomMaterial.Clearcoat;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Clearcoat.init(material:alternateTintKey:)(v52, v11 + 480);
  *(_QWORD *)(v11 + 512) = 0xD000000000000012;
  *(_QWORD *)(v11 + 520) = 0x800000021BE81CB0;
  *(_QWORD *)(v11 + 552) = &type metadata for CustomMaterial.ClearcoatRoughness;
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v52, v11 + 528);
  *(_QWORD *)(v11 + 560) = 0x6D6F74737563;
  *(_QWORD *)(v11 + 568) = 0xE600000000000000;
  *(_QWORD *)(v11 + 600) = &type metadata for CustomMaterial.Custom;
  v17 = swift_allocObject();
  *(_QWORD *)(v11 + 576) = v17;
  v18 = (int8x16_t *)(v17 + 16);
  v53 = &type metadata for CustomMaterial;
  v54 = &protocol witness table for CustomMaterial;
  v52[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v2, v52[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v52, v18);
  *(_QWORD *)(v11 + 608) = 0x676E69646E656C62;
  *(_QWORD *)(v11 + 616) = 0xE800000000000000;
  *(_QWORD *)(v11 + 648) = &type metadata for CustomMaterial.Blending;
  CustomMaterial.blending.getter(v11 + 624);
  *(_QWORD *)(v11 + 656) = 0xD000000000000010;
  *(_QWORD *)(v11 + 664) = 0x800000021BE81760;
  v19 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  v20 = v19;
  swift_bridgeObjectRetain_n();
  v21 = v20;
  v44[1] = 0x800000021BE81760;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v21, (uint64_t)v55);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v2;
  v24 = (void *)v55[0];
  v23 = v55[1];
  v26 = v55[2];
  v25 = v55[3];
  v28 = v55[4];
  v27 = v55[5];
  v29 = v55[6];
  v45 = v55[7];
  v30 = v56;
  v51 = v22;
  outlined init with copy of CustomMaterial(v22, (uint64_t)v52);
  if (v30 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v57);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v52);
    v36 = v57;
    v31 = v58;
    v32 = v59;
    v33 = v60;
    v34 = v61;
    v35 = v62;
    v37 = v63;
    v38 = v64;
    v30 = v65;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v52);
    v57 = v24;
    v58 = v23;
    v59 = v26;
    v60 = v25;
    v61 = v28;
    v62 = v27;
    v63 = v29;
    v31 = v23;
    v32 = v26;
    v33 = v25;
    v34 = v28;
    v35 = v27;
    v36 = v24;
    v37 = v29;
    v38 = v45;
  }
  v39 = 0;
  v40 = 1;
  v41 = v51;
  if (v30 != 255)
  {
    if (v30 == 2)
    {
      v40 = 0;
      v39 = (int)v36;
    }
    outlined consume of __RKMaterialParameterBlock.Parameter?(v36, v31, v32, v33, v34, v35, v37, v38, v30);
  }
  *(_QWORD *)(v11 + 696) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  *(_DWORD *)(v11 + 672) = v39;
  *(_BYTE *)(v11 + 676) = v40;
  *(_QWORD *)(v11 + 704) = 0xD00000000000001ALL;
  *(_QWORD *)(v11 + 712) = 0x800000021BE81CF0;
  *(_QWORD *)(v11 + 744) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, (float32x2_t *)(v11 + 720));
  *(_QWORD *)(v11 + 752) = 0xD000000000000023;
  *(_QWORD *)(v11 + 760) = 0x800000021BE81D10;
  *(_QWORD *)(v11 + 792) = &type metadata for MaterialParameterTypes.TextureCoordinateTransform;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, (float32x2_t *)(v11 + 768));
  *(_QWORD *)(v11 + 800) = 0x6C6C754365636166;
  *(_QWORD *)(v11 + 808) = 0xEB00000000676E69;
  *(_QWORD *)(v11 + 840) = &type metadata for MaterialParameterTypes.FaceCulling;
  if ((*(_BYTE *)(v41 + 48) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v42 = *(_QWORD *)(v41 + 40);
    if (v42 >= 3)
      LOBYTE(v42) = 2;
    *(_BYTE *)(v11 + 816) = v42;
    *(_QWORD *)(v11 + 848) = 0xD000000000000010;
    *(_QWORD *)(v11 + 856) = 0x800000021BE81C70;
    *(_QWORD *)(v11 + 888) = &type metadata for MaterialParameterTypes.TriangleFillMode;
    *(_BYTE *)(v11 + 864) = *(_QWORD *)(v41 + 320) == 1;
    v43 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v46, 1, 1, v43);
    (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v49, *MEMORY[0x24BEE43C0], v48);
    Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t OcclusionMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;

  v25 = a1;
  v24 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  LOBYTE(v6) = *((_BYTE *)v1 + 16);
  v10 = v1[3];
  v9 = (void *)v1[4];
  v11 = *((_BYTE *)v1 + 40);
  v12 = *((_BYTE *)v1 + 41);
  v13 = v1[6];
  v14 = *((_BYTE *)v1 + 56);
  v26 = *v1;
  v27 = v8;
  v28 = v6;
  v29 = v10;
  v30 = v9;
  v31 = v11;
  v32 = v12;
  v33 = v13;
  v34 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v15 + 32) = 1701667182;
  *(_QWORD *)(v15 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v16 = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    v17 = String.init(cString:)();
    v19 = v18;
  }
  else
  {
    v17 = 0;
    v19 = 0;
  }
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v15 + 48) = v17;
  *(_QWORD *)(v15 + 56) = v19;
  *(_QWORD *)(v15 + 72) = v20;
  *(_QWORD *)(v15 + 80) = 0xD000000000000017;
  *(_QWORD *)(v15 + 88) = 0x800000021BE81D40;
  *(_QWORD *)(v15 + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v15 + 96) = v11;
  v21 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v24);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PortalMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  char v29;

  v22 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v1[1];
  LOBYTE(v7) = *((_BYTE *)v1 + 16);
  v11 = v1[3];
  v10 = (void *)v1[4];
  v12 = *((_BYTE *)v1 + 56);
  v23 = *v1;
  v24 = v9;
  v25 = v7;
  v26 = v11;
  v27 = v10;
  v21 = *(_OWORD *)(v1 + 5);
  v28 = v21;
  v29 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v13 + 32) = 1701667182;
  *(_QWORD *)(v13 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v14 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    v15 = String.init(cString:)();
    v17 = v16;
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 56) = v17;
  *(_QWORD *)(v13 + 72) = v18;
  *(_QWORD *)(v13 + 80) = 0xD000000000000010;
  *(_QWORD *)(v13 + 88) = 0x800000021BE81C70;
  *(_QWORD *)(v13 + 120) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v13 + 96) = (_QWORD)v21 == 1;
  v19 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

_QWORD *ShaderGraphMaterial.customMirrorParameters.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  int IsVisibleShaderGraphParameter;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  void **v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  _QWORD v104[5];

  v1 = *v0;
  v2 = v0[1];
  v83 = *((_BYTE *)v0 + 16);
  v4 = v0[3];
  v3 = (void *)v0[4];
  v82 = v0[5];
  v80 = *((_BYTE *)v0 + 49);
  v81 = *((_BYTE *)v0 + 48);
  v79 = v0[7];
  v78 = *((_BYTE *)v0 + 64);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = REMaterialAssetCopyShaderGraphParameterNames();
  if (v6)
  {
    v7 = (void *)v6;
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v1;
    swift_release();

  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v1;
    swift_release();
    v8 = MEMORY[0x24BEE4AF8];
  }
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v76 = v5;
    v77 = v4;
    v11 = (void **)(v8 + 40);
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    v13 = v9;
    v74 = v2;
    v75 = v9;
    while (1)
    {
      v14 = (uint64_t)*(v11 - 1);
      v15 = *v11;
      swift_bridgeObjectRetain();
      v16 = (void *)MEMORY[0x220768C3C](v14, v15);
      IsVisibleShaderGraphParameter = REMaterialAssetIsVisibleShaderGraphParameter();

      if (IsVisibleShaderGraphParameter)
        break;
      swift_bridgeObjectRelease();
LABEL_7:
      v11 += 2;
      if (!--v10)
        goto LABEL_44;
    }
    v89 = v14;
    v90 = v12;
    v94 = (uint64_t)v15;
    v95 = 3027236;
    v96 = 0xE300000000000000;
    v18._countAndFlagsBits = v14;
    v18._object = v15;
    String.append(_:)(v18);
    v19 = v96;
    v92 = v95;
    v104[3] = &type metadata for ShaderGraphMaterial;
    v104[4] = &protocol witness table for ShaderGraphMaterial;
    v20 = swift_allocObject();
    v104[0] = v20;
    *(_QWORD *)(v20 + 16) = v13;
    *(_QWORD *)(v20 + 24) = v2;
    *(_BYTE *)(v20 + 32) = v83;
    *(_QWORD *)(v20 + 40) = v77;
    *(_QWORD *)(v20 + 48) = v76;
    *(_QWORD *)(v20 + 56) = v82;
    *(_BYTE *)(v20 + 64) = v81;
    *(_BYTE *)(v20 + 65) = v80;
    *(_QWORD *)(v20 + 72) = v79;
    *(_BYTE *)(v20 + 80) = v78;
    __swift_project_boxed_opaque_existential_1(v104, (uint64_t)&type metadata for ShaderGraphMaterial);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v76;
    Material.subscript.getter(v92, v19, (uint64_t)&type metadata for ShaderGraphMaterial, (uint64_t)&v95);
    v22 = v103;
    v23 = (void *)v95;
    v25 = v97;
    v24 = v98;
    v26 = v99;
    v27 = v100;
    v87 = v11;
    v88 = v10;
    switch(v103)
    {
      case 0:
        v93 = v95;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 1;
        goto LABEL_30;
      case 1:
        v37 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        swift_retain();
        outlined consume of MaterialParameters.Value?(v23, v37, v25, v24, 0, 0, 0, 0, 0);
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 1;
        v93 = v37;
        v29 = 0;
        goto LABEL_30;
      case 2:
        swift_bridgeObjectRelease();
        v93 = v23;
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 2;
        goto LABEL_30;
      case 3:
        v93 = v95;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 3;
        goto LABEL_30;
      case 4:
        v93 = v95;
        v40 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v40;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 4;
        goto LABEL_30;
      case 5:
        v93 = v95;
        v41 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v41;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 5;
        goto LABEL_30;
      case 6:
        v93 = v95;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 6;
        goto LABEL_30;
      case 7:
        v93 = v95;
        v42 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v42;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 7;
        goto LABEL_30;
      case 8:
        v93 = v95;
        v38 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v38;
        v33 = 0;
        v34 = 0;
        v35 = 8;
        goto LABEL_28;
      case 9:
        v93 = v95;
        v33 = v101;
        v34 = v102;
        v43 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v43;
        v35 = 9;
LABEL_28:
        v44 = (uint64_t)v90;
        v30 = v24;
        v31 = v26;
        v32 = v27;
        goto LABEL_31;
      case 10:
        swift_bridgeObjectRelease();
        v93 = v23 & 1;
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 10;
        goto LABEL_30;
      case 11:
        swift_bridgeObjectRelease();
        v93 = v23;
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 11;
        goto LABEL_30;
      case 12:
        v93 = v95;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 12;
        goto LABEL_30;
      case 13:
        v93 = v95;
        v36 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v36;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 13;
        goto LABEL_30;
      case 14:
        v93 = v95;
        v39 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v39;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 14;
        goto LABEL_30;
      case 15:
        swift_bridgeObjectRelease();
        v93 = v23;
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 15;
        goto LABEL_30;
      case 16:
        v93 = v95;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = 0;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = 16;
        goto LABEL_30;
      case 17:
      case 18:
        v93 = v95;
        v28 = v96;
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        v29 = v28;
        v25 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v22;
LABEL_30:
        v44 = (uint64_t)v90;
LABEL_31:
        v85 = v33;
        v86 = v35;
        v45 = v29;
        v46 = v25;
        v47 = v30;
        v48 = v31;
        v91 = v32;
        v84 = v34;
        outlined copy of MaterialParameters.Value((id)v93, v29, v25, v30, v31, v32, v33, v34, v35);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v95 = v44;
        v51 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v94);
        v52 = *(_QWORD *)(v44 + 16);
        v53 = (v50 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
        {
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x21B9B3EACLL);
        }
        v55 = v50;
        if (*(_QWORD *)(v44 + 24) < v54)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
          v56 = specialized __RawDictionaryStorage.find<A>(_:)(v89, v94);
          if ((v55 & 1) != (v57 & 1))
            goto LABEL_47;
          v51 = v56;
          v12 = (_QWORD *)v95;
          if ((v55 & 1) == 0)
            goto LABEL_40;
LABEL_38:
          v58 = v12[7] + 80 * v51;
          outlined consume of MaterialParameters.Value(*(void **)v58, *(_QWORD *)(v58 + 8), *(_QWORD *)(v58 + 16), *(_QWORD *)(v58 + 24), *(_QWORD *)(v58 + 32), *(_QWORD *)(v58 + 40), *(_QWORD *)(v58 + 48), *(_QWORD *)(v58 + 56), *(_BYTE *)(v58 + 64));
          v59 = (void *)v93;
          *(_QWORD *)v58 = v93;
          *(_QWORD *)(v58 + 8) = v45;
          v60 = v45;
          v61 = v46;
          *(_QWORD *)(v58 + 16) = v46;
          *(_QWORD *)(v58 + 24) = v47;
          v62 = v47;
          v63 = v48;
          *(_QWORD *)(v58 + 32) = v48;
          v64 = v91;
          v66 = v84;
          v65 = v85;
          *(_QWORD *)(v58 + 40) = v91;
          *(_QWORD *)(v58 + 48) = v85;
          *(_QWORD *)(v58 + 56) = v84;
          *(_BYTE *)(v58 + 64) = v86;
          v67 = v86;
LABEL_42:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of MaterialParameters.Value(v59, v60, v61, v62, v63, v64, v65, v66, v67);
          v2 = v74;
          v13 = v75;
          v11 = v87;
          v10 = v88;
          goto LABEL_7;
        }
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v12 = (_QWORD *)v95;
          if ((v50 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v12 = (_QWORD *)v95;
          if ((v55 & 1) != 0)
            goto LABEL_38;
        }
LABEL_40:
        v12[(v51 >> 6) + 8] |= 1 << v51;
        v68 = (uint64_t *)(v12[6] + 16 * v51);
        *v68 = v89;
        v68[1] = v94;
        v69 = v12[7] + 80 * v51;
        v59 = (void *)v93;
        *(_QWORD *)v69 = v93;
        *(_QWORD *)(v69 + 8) = v45;
        v60 = v45;
        v61 = v46;
        *(_QWORD *)(v69 + 16) = v46;
        *(_QWORD *)(v69 + 24) = v47;
        v62 = v47;
        v63 = v48;
        *(_QWORD *)(v69 + 32) = v48;
        v64 = v91;
        v66 = v84;
        v65 = v85;
        *(_QWORD *)(v69 + 40) = v91;
        *(_QWORD *)(v69 + 48) = v85;
        *(_QWORD *)(v69 + 56) = v84;
        v67 = v86;
        *(_BYTE *)(v69 + 64) = v86;
        v70 = v12[2];
        v71 = __OFADD__(v70, 1);
        v72 = v70 + 1;
        if (v71)
          goto LABEL_46;
        v12[2] = v72;
        swift_bridgeObjectRetain();
        goto LABEL_42;
      default:
        swift_bridgeObjectRelease();
        outlined destroy of MaterialParameters((uint64_t)v104);
        swift_bridgeObjectRelease();
        v2 = v74;
        v13 = v75;
        goto LABEL_7;
    }
  }
  v12 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_44:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t ShaderGraphMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[12];
  int v25;
  int v26;
  int v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;

  v32 = a1;
  v31 = type metadata accessor for Mirror.AncestorRepresentation();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v30 = &v24[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v3);
  v28 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *v1;
  v6 = v1[1];
  LODWORD(v4) = *((unsigned __int8 *)v1 + 16);
  v7 = v1[3];
  v8 = (void *)v1[4];
  v9 = v1[5];
  v10 = *((unsigned __int8 *)v1 + 48);
  v11 = *((unsigned __int8 *)v1 + 49);
  v12 = v1[7];
  v13 = *((_BYTE *)v1 + 64);
  v43 = v5;
  v44 = v6;
  v27 = v4;
  v45 = v4;
  v46 = v7;
  v47 = v8;
  v48 = v9;
  v26 = v10;
  v49 = v10;
  v25 = v11;
  v50 = v11;
  v51 = v12;
  v52 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v14 + 32) = 1701667182;
  *(_QWORD *)(v14 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v15 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    v16 = String.init(cString:)();
    v18 = v17;
  }
  else
  {
    v16 = 0;
    v18 = 0;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v14 + 48) = v16;
  *(_QWORD *)(v14 + 56) = v18;
  *(_QWORD *)(v14 + 72) = v19;
  *(_QWORD *)(v14 + 80) = 0x6574656D61726170;
  *(_QWORD *)(v14 + 88) = 0xEA00000000007372;
  v33 = v5;
  v34 = v6;
  v35 = v27;
  v36 = v7;
  v37 = v15;
  v38 = v9;
  v39 = v26;
  v40 = v25;
  v41 = v12;
  v42 = v13;
  v20 = ShaderGraphMaterial.customMirrorParameters.getter();
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MaterialParameters.Value]);
  *(_QWORD *)(v14 + 96) = v20;
  *(_QWORD *)(v14 + 120) = v21;
  *(_QWORD *)(v14 + 128) = 0xD000000000000010;
  *(_QWORD *)(v14 + 136) = 0x800000021BE81C70;
  *(_QWORD *)(v14 + 168) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v14 + 144) = v9 == 1;
  v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v28, 1, 1, v22);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v29 + 104))(v30, *MEMORY[0x24BEE43C0], v31);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t VideoMaterial.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;

  v27 = a1;
  v26 = type metadata accessor for Mirror.AncestorRepresentation();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[1];
  LOBYTE(v4) = *((_BYTE *)v1 + 16);
  v7 = v1[3];
  v8 = (void *)v1[4];
  v10 = v1[5];
  v9 = v1[6];
  v11 = v1[7];
  v12 = *((_BYTE *)v1 + 64);
  v13 = *((_BYTE *)v1 + 65);
  v14 = v1[9];
  v15 = *((_BYTE *)v1 + 80);
  v28 = *v1;
  v29 = v6;
  v30 = v4;
  v31 = v7;
  v32 = v8;
  v33 = v10;
  v34 = v9;
  v35 = v11;
  v36 = v12;
  v37 = v13;
  v38 = v14;
  v39 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v16 + 32) = 1701667182;
  *(_QWORD *)(v16 + 40) = 0xE400000000000000;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v17 = v8;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (REMaterialAssetGetSourceName())
  {
    v18 = String.init(cString:)();
    v20 = v19;
  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(_QWORD *)(v16 + 48) = v18;
  *(_QWORD *)(v16 + 56) = v20;
  *(_QWORD *)(v16 + 72) = v21;
  *(_QWORD *)(v16 + 80) = 0xD000000000000010;
  *(_QWORD *)(v16 + 88) = 0x800000021BE81C70;
  *(_QWORD *)(v16 + 120) = &type metadata for MaterialParameterTypes.TriangleFillMode;
  *(_BYTE *)(v16 + 96) = v11 == 1;
  v22 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v25, *MEMORY[0x24BEE43C0], v26);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized String.withCString<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
    _StringGuts._slowWithCString<A>(_:)();
LABEL_7:

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v6 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v7 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = _StringObject.sharedUTF8.getter();
    }
    _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(v6, v7, (uint64_t (*)(void))partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:));
    goto LABEL_7;
  }
  closure #1 in __RKMaterialParameterBlock.get(parameter:)(a4);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Material.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[20];
  _QWORD v22[8];
  unsigned __int8 v23;

  v4 = v3;
  v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(a1, a2, v10, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v22[0];
  v12 = v22[1];
  v13 = v22[2];
  v14 = v22[3];
  v16 = v22[4];
  v15 = v22[5];
  v17 = v22[6];
  v20 = v22[7];
  v18 = v23;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)v21);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter(a3);
    swift_release();
    return outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
  }
  else
  {
    result = outlined destroy of PhysicallyBasedMaterial((uint64_t)v21);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 56) = v20;
    *(_BYTE *)(a3 + 64) = v18;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[43];
  _QWORD v22[8];
  unsigned __int8 v23;

  v4 = v3;
  v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(a1, a2, v10, (uint64_t)v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v22[0];
  v12 = v22[1];
  v13 = v22[2];
  v14 = v22[3];
  v16 = v22[4];
  v15 = v22[5];
  v17 = v22[6];
  v20 = v22[7];
  v18 = v23;
  outlined init with copy of CustomMaterial(v4, (uint64_t)v21);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter(a3);
    swift_release();
    return outlined destroy of CustomMaterial((uint64_t)v21);
  }
  else
  {
    result = outlined destroy of CustomMaterial((uint64_t)v21);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v14;
    *(_QWORD *)(a3 + 32) = v16;
    *(_QWORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v17;
    *(_QWORD *)(a3 + 56) = v20;
    *(_BYTE *)(a3 + 64) = v18;
  }
  return result;
}

void specialized Material.getUVTransform(withSuffix:)(uint64_t a1@<X0>, void *a2@<X1>, float32x2_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  Swift::String v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  Swift::String v54;
  void *v55;
  void *v56;
  float32x4_t v57;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;

  v4 = v3;
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v62;
  v56 = v61;
  v12 = v63;
  v13 = v64;
  v14 = v65;
  v15 = v66;
  v16 = v67;
  v17 = v68;
  v18 = v69;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v24 = v70;
    v25 = v71;
    v19 = v72;
    v20 = v73;
    v21 = v74;
    v22 = v75;
    v23 = v76;
    v26 = v77;
    v18 = v78;
    if (v78 == 255)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v19 = v12;
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v16;
    v24 = v56;
    v25 = v11;
    v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  v57 = (float32x4_t)xmmword_21BE50960;
LABEL_8:
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  v29 = v59;
  v28 = v60;
  v30 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  v31 = v30;
  swift_bridgeObjectRetain_n();
  v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v62;
  v55 = v61;
  v34 = v63;
  v35 = v64;
  v36 = v65;
  v37 = v66;
  v38 = v67;
  v39 = v68;
  v40 = v69;
  outlined init with copy of PhysicallyBasedMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v47 = v70;
    v41 = v71;
    v42 = v72;
    v43 = v73;
    v44 = v74;
    v45 = v75;
    v46 = v76;
    v48 = v77;
    v40 = v78;
  }
  else
  {
    outlined destroy of PhysicallyBasedMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v41 = v33;
    v42 = v34;
    v43 = v35;
    v44 = v36;
    v45 = v37;
    v46 = v38;
    v47 = v55;
    v48 = v39;
  }
  v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3)
      v49 = (float32x2_t)v47;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  v50 = (int8x16_t)vmulq_f32(v57, v57);
  v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::String v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  Swift::String v54;
  void *v55;
  void *v56;
  float32x4_t v57;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;

  v4 = v3;
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8 = *(void **)(v3 + 32);
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v62;
  v56 = v61;
  v12 = v63;
  v13 = v64;
  v14 = v65;
  v15 = v66;
  v16 = v67;
  v17 = v68;
  v18 = v69;
  outlined init with copy of CustomMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v24 = v70;
    v25 = v71;
    v19 = v72;
    v20 = v73;
    v21 = v74;
    v22 = v75;
    v23 = v76;
    v26 = v77;
    v18 = v78;
    if (v78 == 255)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v19 = v12;
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v16;
    v24 = v56;
    v25 = v11;
    v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  v57 = (float32x4_t)xmmword_21BE50960;
LABEL_8:
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  v29 = v59;
  v28 = v60;
  v30 = *(void **)(v4 + 32);
  swift_bridgeObjectRetain_n();
  v31 = v30;
  swift_bridgeObjectRetain_n();
  v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v62;
  v55 = v61;
  v34 = v63;
  v35 = v64;
  v36 = v65;
  v37 = v66;
  v38 = v67;
  v39 = v68;
  v40 = v69;
  outlined init with copy of CustomMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v47 = v70;
    v41 = v71;
    v42 = v72;
    v43 = v73;
    v44 = v74;
    v45 = v75;
    v46 = v76;
    v48 = v77;
    v40 = v78;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v41 = v33;
    v42 = v34;
    v43 = v35;
    v44 = v36;
    v45 = v37;
    v46 = v38;
    v47 = v55;
    v48 = v39;
  }
  v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3)
      v49 = (float32x2_t)v47;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  v50 = (int8x16_t)vmulq_f32(v57, v57);
  v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::String v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  float32x2_t v49;
  int8x16_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float v53;
  Swift::String v54;
  void *v55;
  void *v56;
  float32x4_t v57;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;

  v4 = v3;
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 13;
  _print_unlocked<A, B>(_:_:)();
  v54._countAndFlagsBits = a1;
  v54._object = a2;
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8 = *(void **)(v3 + 72);
  swift_bridgeObjectRetain_n();
  v9 = v8;
  swift_bridgeObjectRetain_n();
  v10 = v9;
  specialized String.withCString<A>(_:)(0, 0xE000000000000000, v10, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v62;
  v56 = v61;
  v12 = v63;
  v13 = v64;
  v14 = v65;
  v15 = v66;
  v16 = v67;
  v17 = v68;
  v18 = v69;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)&v59);
  if (v18 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v24 = v70;
    v25 = v71;
    v19 = v72;
    v20 = v73;
    v21 = v74;
    v22 = v75;
    v23 = v76;
    v26 = v77;
    v18 = v78;
    if (v78 == 255)
      goto LABEL_7;
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v19 = v12;
    v20 = v13;
    v21 = v14;
    v22 = v15;
    v23 = v16;
    v24 = v56;
    v25 = v11;
    v26 = v17;
  }
  if (v18 == 5)
  {
    v27.i64[0] = (uint64_t)v24;
    v27.i64[1] = v25;
    v57 = v27;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, 5u);
    goto LABEL_8;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v25, v19, v20, v21, v22, v23, v26, v18);
LABEL_7:
  v57 = (float32x4_t)xmmword_21BE50960;
LABEL_8:
  v59 = 0;
  v60 = 0xE000000000000000;
  LOBYTE(v70) = 14;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v54);
  v29 = v59;
  v28 = v60;
  v30 = *(void **)(v4 + 72);
  swift_bridgeObjectRetain_n();
  v31 = v30;
  swift_bridgeObjectRetain_n();
  v32 = v31;
  specialized String.withCString<A>(_:)(v29, v28, v32, (uint64_t)&v61);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33 = v62;
  v55 = v61;
  v34 = v63;
  v35 = v64;
  v36 = v65;
  v37 = v66;
  v38 = v67;
  v39 = v68;
  v40 = v69;
  outlined init with copy of UnlitMaterial(v4, (uint64_t)&v59);
  if (v40 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)&v70);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v47 = v70;
    v41 = v71;
    v42 = v72;
    v43 = v73;
    v44 = v74;
    v45 = v75;
    v46 = v76;
    v48 = v77;
    v40 = v78;
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)&v59);
    swift_bridgeObjectRelease();
    v41 = v33;
    v42 = v34;
    v43 = v35;
    v44 = v36;
    v45 = v37;
    v46 = v38;
    v47 = v55;
    v48 = v39;
  }
  v49 = 0;
  if (v40 != 255)
  {
    if (v40 == 3)
      v49 = (float32x2_t)v47;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v47, v41, v42, v43, v44, v45, v46, v48, v40);
  }
  v50 = (int8x16_t)vmulq_f32(v57, v57);
  v51 = (float32x2_t)vextq_s8(v50, v50, 4uLL).u64[0];
  v50.i32[1] = vextq_s8(v50, v50, 8uLL).i32[1];
  v52 = vsqrt_f32(vadd_f32(v51, *(float32x2_t *)v50.i8));
  v53 = atan2f(v57.f32[1], v57.f32[0]);
  *a3 = v49;
  a3[1] = v52;
  a3[2].f32[0] = v53;
}

unint64_t specialized Material.getScalar(_:)(unsigned __int8 a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  uint64_t v9;
  void *v11[8];
  unsigned __int8 v12;

  v2 = *(void **)(v1 + 72);
  v3 = PbrCommonKeys.Constants.rawValue.getter(a1);
  v5 = v4;
  swift_bridgeObjectRetain_n();
  v6 = v2;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(v3, v5, v7, (uint64_t)v11);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 == 255)
    goto LABEL_5;
  if (v12 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v11[0], (uint64_t)v11[1], (uint64_t)v11[2], (uint64_t)v11[3], (uint64_t)v11[4], (uint64_t)v11[5], (uint64_t)v11[6], (uint64_t)v11[7], v12);
LABEL_5:
    v9 = 0;
    v8 = 1;
    return v9 | ((unint64_t)v8 << 32);
  }
  v8 = 0;
  v9 = LODWORD(v11[0]);
  return v9 | ((unint64_t)v8 << 32);
}

uint64_t outlined init with copy of SimpleMaterial(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SimpleMaterial(a2, a1);
  return a2;
}

void *specialized Material.getTexture(_:)(unsigned __int8 a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;

  v2 = *(void **)(v1 + 72);
  v3 = PbrCommonKeys.Textures.rawValue.getter(a1);
  v5 = v4;
  swift_bridgeObjectRetain_n();
  v6 = v2;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(v3, v5, v7, (uint64_t)&v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v17;
  if (!v25)
    return v17;
  if (v25 == 255)
    return 0;
  v9 = v18;
  v10 = v19;
  v11 = v20;
  v12 = v21;
  v13 = v22;
  v14 = v23;
  v15 = v24;
  if (v25 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v18, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v8, v9, v10, v11, v12, v13, v14, v15, 1u);
  return (void *)v9;
}

uint64_t sub_21B9B55CC()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void outlined consume of __RKMaterialParameterBlock.Parameter?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    outlined consume of __RKMaterialParameterBlock.Parameter(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void outlined consume of __RKMaterialParameterBlock.Parameter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v9;

  switch(a9)
  {
    case 6:
      goto LABEL_6;
    case 1:
      v9 = a1;
      swift_release();
      a1 = v9;
LABEL_6:

      return;
    case 0:
      swift_release();
      break;
  }
}

unint64_t specialized MaterialWithOpacityThresholdInternal.opacityThresholdInternal.getter()
{
  uint64_t v0;
  uint64_t FunctionConstant;
  void *v2;
  uint64_t v3;
  char v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  void *v28;
  _BYTE v29[40];
  _QWORD v30[8];
  unsigned __int8 v31;
  _QWORD v32[8];
  unsigned __int8 v33;

  swift_beginAccess();
  REMaterialAssetGetMaterialDefinition();
  FunctionConstant = REMaterialAssetGetFunctionConstant();
  if (FunctionConstant)
  {
    v2 = (void *)FunctionConstant;
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 1702195828 && v3 == 0xE400000000000000)
    {

      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_11;
  }
  if ((REAssetHandleResolvesToSameAssetPath() & 1) == 0 && (REAssetHandleResolvesToSameAssetPath() & 1) == 0)
    goto LABEL_17;
LABEL_11:
  v6 = *(void **)(v0 + 72);
  swift_bridgeObjectRetain_n();
  v7 = v6;
  swift_bridgeObjectRetain_n();
  v8 = v7;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v8, (uint64_t)v30);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v30[1];
  v28 = (void *)v30[0];
  v10 = v30[2];
  v11 = v30[3];
  v12 = v30[4];
  v13 = v30[5];
  v15 = v30[6];
  v14 = v30[7];
  v16 = v31;
  outlined init with copy of UnlitMaterial(v0, (uint64_t)v29);
  if (v16 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v32);
    swift_release();
    outlined destroy of UnlitMaterial((uint64_t)v29);
    v24 = (void *)v32[0];
    v17 = v32[1];
    v18 = v32[2];
    v19 = v32[3];
    v20 = v32[4];
    v21 = v32[5];
    v22 = v32[6];
    v23 = v32[7];
    v16 = v33;
    if (v33 == 255)
    {
LABEL_17:
      v26 = 0;
      v25 = 1;
      return v26 | ((unint64_t)v25 << 32);
    }
  }
  else
  {
    outlined destroy of UnlitMaterial((uint64_t)v29);
    v17 = v9;
    v18 = v10;
    v19 = v11;
    v20 = v12;
    v21 = v13;
    v22 = v15;
    v23 = v14;
    v24 = v28;
  }
  if (v16 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v17, v18, v19, v20, v21, v22, v23, v16);
    goto LABEL_17;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v24, v17, v18, v19, v20, v21, v22, v23, 2u);
  v25 = 0;
  v26 = v24;
  return v26 | ((unint64_t)v25 << 32);
}

uint64_t outlined init with copy of PhysicallyBasedMaterial(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PhysicallyBasedMaterial(a2, a1);
  return a2;
}

uint64_t sub_21B9B5968()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (*(_QWORD *)(v0 + 80))
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21B9B59D0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32) >= 2uLL)
  {

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
  {

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t sub_21B9B5A44()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {

    if (*(_QWORD *)(v0 + 32))
    {

      swift_release();
    }
  }
  return swift_deallocObject();
}

uint64_t objectdestroy_9Tm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t outlined destroy of PhysicallyBasedMaterial(uint64_t a1)
{
  destroy for PhysicallyBasedMaterial(a1);
  return a1;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
  {

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t outlined init with copy of UnlitMaterial(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for UnlitMaterial(a2, a1);
  return a2;
}

uint64_t sub_21B9B5B78()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with copy of CustomMaterial(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CustomMaterial(a2, a1);
  return a2;
}

uint64_t sub_21B9B5C28()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(_QWORD *)(v0 + 80) - 1) >= 2)
    swift_release();
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(_BYTE *)(v0 + 112));
  if (*(_QWORD *)(v0 + 144))
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  if (*(_QWORD *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if ((unint64_t)(*(_QWORD *)(v0 + 304) - 1) >= 3)
    swift_release();
  return swift_deallocObject();
}

void outlined consume of CustomMaterial.CustomUniformsState(void *a1, void *a2, char a3)
{
  if (a3)
  {
    if (a3 != 1)
      return;

    a1 = a2;
  }

}

uint64_t sub_21B9B5D20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of CustomMaterial(uint64_t a1)
{
  destroy for CustomMaterial(a1);
  return a1;
}

uint64_t outlined destroy of UnlitMaterial(uint64_t a1)
{
  destroy for UnlitMaterial(a1);
  return a1;
}

uint64_t sub_21B9B5DAC()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of MaterialParameters(uint64_t a1)
{
  destroy for AnyMeshBuffer();
  return a1;
}

id outlined copy of MaterialParameters.Value(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v9;

  if (a9 == 6)
    return result;
  if (a9 != 1)
  {
    if (a9)
      return result;
    v9 = result;
  }
  return (id)swift_retain();
}

void outlined consume of MaterialParameters.Value(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v9;

  if (a9 == 6)
  {
LABEL_5:

    return;
  }
  if (a9 != 1)
  {
    if (a9)
      return;
    v9 = a1;
    swift_release();
    a1 = v9;
    goto LABEL_5;
  }
  swift_release();
}

void outlined consume of MaterialParameters.Value?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255)
    outlined consume of MaterialParameters.Value(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

double partial apply for closure #1 in __RKMaterialParameterBlock.get(parameter:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in __RKMaterialParameterBlock.get(parameter:)(a1);
}

uint64_t __RKEntityInteractionsComponent.didAdd(componentRef:)(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t Entity;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t SceneNullable;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  uint64_t inited;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  os_log_type_t v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  os_log_type_t v106;
  _QWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  __int128 v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  uint64_t v129;
  __int128 v130;
  unint64_t *v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  Swift::String v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;

  v121 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v123 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v3 = (char *)v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for String.Encoding();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for JSONEncoder.OutputFormatting();
  result = MEMORY[0x24BDAC7A8](v5);
  if (!a1)
    goto LABEL_93;
  Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v8 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
    __break(1u);
LABEL_93:
    __break(1u);
    return result;
  }
  v10 = specialized static Entity.entityInfoType(_:)(Entity);
  if (v10)
  {
    v9 = (*(uint64_t (**)(void))(v10 + 232))();
    v11 = *(_QWORD *)(v9 + 16);
    swift_retain();
    MEMORY[0x22076D160](v11, 0);
    *(_QWORD *)(v9 + 16) = Entity;
    MEMORY[0x22076D160](Entity, v9);
    swift_release();
    goto LABEL_8;
  }
  v8 = makeEntity(for:)(Entity);
LABEL_4:
  v9 = v8;
LABEL_8:
  v12 = v110;
  swift_weakAssign();
  v137 = 91;
  v138 = 0xE100000000000000;
  v136._countAndFlagsBits = 0;
  v136._object = (void *)0xE000000000000000;
  v135 = v9;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v136);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  v109 = v9;
  swift_release();
  v16 = v138;
  v111 = v137;
  v17 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v17, &v137);
  v18 = *(_QWORD *)(v12 + 16);
  if (!v18 || !*(_QWORD *)(v18 + 16))
  {
    v137 = v111;
    v138 = v16;
    v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, (uint64_t *)&v137);
    v20 = v110;
    v21 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v20 + 16) = v21;
    v18 = v21;
  }
  v22 = one-time initialization token for interactionsLoggingEnabled;
  swift_bridgeObjectRetain();
  if (v22 != -1)
    goto LABEL_91;
  while (1)
  {
    v122 = v3;
    v124 = v16;
    if (interactionsLoggingEnabled)
    {
      v137 = v111;
      v138 = v16;
      v23 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v23, (uint64_t *)&v137);
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      v24 = JSONEncoder.init()();
      static JSONEncoder.OutputFormatting.prettyPrinted.getter();
      dispatch thunk of JSONEncoder.outputFormatting.setter();
      v137 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
      lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], &lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityInteractionSpecification, MEMORY[0x24BEE12A0]);
      v73 = dispatch thunk of JSONEncoder.encode<A>(_:)();
      v75 = v74;
      v108 = 0;
      static String.Encoding.utf8.getter();
      v76 = String.init(data:encoding:)();
      if (v77)
      {
        v125 = v73;
        v126 = v75;
        v127 = (char *)v24;
        v120 = v18;
        v137 = 10;
        v138 = 0xE100000000000000;
        MEMORY[0x24BDAC7A8](v76);
        v107[-2] = &v137;
        v78 = v108;
        v81 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)&v107[-4], v79, v80);
        v108 = v78;
        v128 = v81;
        v83 = *(_QWORD *)(v81 + 16);
        v84 = &static __Engine.customComponents;
        if (v83)
        {
          v85 = (uint64_t *)(v128 + 56);
          *(_QWORD *)&v82 = 136315394;
          v130 = v82;
          v129 = MEMORY[0x24BEE4AD8] + 8;
          do
          {
            v86 = *(v85 - 3);
            v87 = *(v85 - 2);
            v89 = *(v85 - 1);
            v88 = *v85;
            swift_bridgeObjectRetain();
            v90 = static os_log_type_t.debug.getter();
            if (*((_BYTE *)v84 + 648) == 1)
            {
              v91 = v90;
              v132 = v107;
              v137 = 0;
              v138 = 0xE000000000000000;
              v92._countAndFlagsBits = 0;
              v92._object = (void *)0xE000000000000000;
              String.append(_:)(v92);
              v93._countAndFlagsBits = MEMORY[0x220768CFC](v86, v87, v89, v88);
              String.append(_:)(v93);
              swift_bridgeObjectRelease();
              v94._countAndFlagsBits = 0;
              v94._object = (void *)0xE000000000000000;
              String.append(_:)(v94);
              v95 = v138;
              v131 = (unint64_t *)v137;
              if (one-time initialization token for interactionsLogger != -1)
                swift_once();
              v96 = type metadata accessor for Logger();
              __swift_project_value_buffer(v96, (uint64_t)interactionsLogger);
              v97 = v124;
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              v98 = Logger.logObject.getter();
              v99 = v91;
              if (os_log_type_enabled(v98, v91))
              {
                v100 = swift_slowAlloc();
                v101 = swift_slowAlloc();
                v137 = v101;
                *(_DWORD *)v100 = v130;
                swift_bridgeObjectRetain();
                *(_QWORD *)(v100 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v97, (uint64_t *)&v137);
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v100 + 12) = 2080;
                swift_bridgeObjectRetain();
                *(_QWORD *)(v100 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v131, v95, (uint64_t *)&v137);
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_21B9AA000, v98, v99, "%s%s", (uint8_t *)v100, 0x16u);
                swift_arrayDestroy();
                v102 = v101;
                v84 = &static __Engine.customComponents;
                MEMORY[0x220772F44](v102, -1, -1);
                MEMORY[0x220772F44](v100, -1, -1);
                swift_bridgeObjectRelease();

              }
              else
              {
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            v85 += 4;
            --v83;
          }
          while (v83);
        }
        swift_bridgeObjectRelease();
        outlined consume of Data._Representation(v125, v126);
        swift_release();
        v3 = v122;
        v16 = v124;
        v18 = v120;
      }
      else
      {
        swift_release();
        outlined consume of Data._Representation(v73, v75);
      }
    }
    else
    {
      v108 = 0;
    }
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
    {
      swift_bridgeObjectRelease();
      v29 = v111;
      v137 = v111;
      v138 = v16;
      v30 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v30, (uint64_t *)&v137);
      v137 = v29;
      v138 = v16;
      v31 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v31, &v137);
      goto LABEL_82;
    }
    v26 = SceneNullable;
    v27 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v27)
    {
      v28 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      v28 = Scene.init(coreScene:)(v26);
    }
    v32 = v28;
    v33 = Scene.__interactionService.getter();
    type metadata accessor for __RKEntityInteractionManager();
    v34 = swift_dynamicCastClass();
    if (!v34)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v68 = v111;
      v137 = v111;
      v138 = v16;
      v69 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v69, &v137);
      swift_release();
      v137 = v68;
      v138 = v16;
      v70 = static os_log_type_t.debug.getter();
      v71 = (uint64_t *)&v137;
      goto LABEL_81;
    }
    v107[1] = v32;
    v139 = MEMORY[0x24BEE4AF8];
    v119 = *(_QWORD *)(v18 + 16);
    if (!v119)
      break;
    v35 = v34;
    v118 = type metadata accessor for __RKEntityTrigger();
    v117 = type metadata accessor for __RKEntityAction();
    v115 = v18 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
    v116 = (uint64_t *)(v35 + 40);
    swift_beginAccess();
    v36 = 0;
    v114 = xmmword_21BE50AD0;
    v120 = v18;
    v112 = (_QWORD *)(v35 + 64);
    v113 = v33;
    while (1)
    {
      if (v36 >= *(_QWORD *)(v18 + 16))
        goto LABEL_89;
      v37 = *(_QWORD *)(v123 + 72);
      *(_QWORD *)&v130 = v36;
      outlined init with copy of __RKEntityInteractionSpecification(v115 + v37 * v36, (uint64_t)v3);
      v16 = *v116;
      swift_retain();
      static __RKEntityTrigger.trigger(for:entityLookupTable:)((uint64_t)v3);
      v39 = v38;
      v40 = v121;
      static __RKEntityAction.action(for:entityLookupTable:)((uint64_t)&v3[*(int *)(v121 + 20)], v16);
      v42 = v41;
      v43 = (unint64_t *)&v3[*(int *)(v40 + 24)];
      v18 = *v43;
      v3 = (char *)v43[1];
      type metadata accessor for __RKEntityInteraction();
      v44 = swift_allocObject();
      *(_QWORD *)(v44 + 32) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      v125 = v44 + 48;
      *(_BYTE *)(v44 + 40) = 1;
      *(_QWORD *)(v44 + 56) = 0;
      *(_QWORD *)(v44 + 16) = v39;
      *(_QWORD *)(v44 + 24) = v42;
      v131 = (unint64_t *)(v44 + 24);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v114;
      *(_QWORD *)(inited + 32) = v39;
      v133 = inited;
      specialized Array._endMutation()();
      v46 = v133;
      type metadata accessor for __RKEntityTriggerGroup();
      v47 = swift_dynamicCastClass();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain_n();
      if (v47)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v46 = *(_QWORD *)(v47 + 24);
        swift_bridgeObjectRetain();
        swift_release();
      }
      v132 = (_QWORD *)v44;
      v126 = v39;
      if (v46 >> 62)
      {
        swift_bridgeObjectRetain();
        v48 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v128 = v18;
      v129 = v16;
      v127 = v3;
      if (v48)
        break;
LABEL_60:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v62 = v132;
      v63 = v127;
      v132[6] = v128;
      v62[7] = v63;
      swift_release();
      swift_bridgeObjectRelease();
      v64 = v112;
      swift_beginAccess();
      v65 = swift_retain();
      MEMORY[0x220768F0C](v65);
      if (*(_QWORD *)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v64 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
      v66 = swift_retain();
      MEMORY[0x220768F0C](v66);
      v3 = v122;
      v16 = v124;
      v18 = v120;
      v67 = v130;
      if (*(_QWORD *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v36 = v67 + 1;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v3);
      if (v36 == v119)
      {
        swift_bridgeObjectRelease();
        v72 = v139;
        goto LABEL_80;
      }
    }
    if (v48 < 1)
      goto LABEL_90;
    v3 = (char *)(v46 & 0xC000000000000001);
    swift_beginAccess();
    v49 = 0;
    while (1)
    {
      if (v3)
        MEMORY[0x220769770](v49, v46);
      else
        swift_retain();
      type metadata accessor for __RKEntityProximityTrigger();
      v50 = swift_dynamicCastClass();
      if (!v50)
        goto LABEL_54;
      v51 = v50;
      v52 = swift_beginAccess();
      v53 = *(unsigned __int8 *)(v51 + 36);
      if (v53 == 1)
        break;
      if (v53 != 2)
        goto LABEL_54;
      v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 432))(v52);
      swift_release();
      if (v54)
      {
        swift_beginAccess();
        *(_BYTE *)(v54 + 88) = 1;
        v132[4] = v54;
LABEL_54:
        swift_release();
      }
      if (v48 == ++v49)
        goto LABEL_60;
    }
    type metadata accessor for __RKEntityActionGroup();
    v55 = swift_dynamicCastClass();
    if (!v55)
      goto LABEL_54;
    v56 = v55;
    v57 = (uint64_t *)(v55 + 112);
    swift_beginAccess();
    v18 = *(_QWORD *)(v56 + 112);
    if (v18 >> 62)
    {
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      v61 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v61 != 2)
      {
LABEL_53:
        swift_release();
        swift_release();
        goto LABEL_54;
      }
    }
    else
    {
      v58 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_retain();
      if (v58 != 2)
        goto LABEL_53;
    }
    v16 = *v57;
    if ((*v57 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v18 = MEMORY[0x220769770](0, v16);
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }
    if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v18 = *(_QWORD *)(v16 + 32);
      swift_retain();
LABEL_45:
      *v131 = v18;
      swift_release();
      v16 = *v57;
      if ((*v57 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v18 = MEMORY[0x220769770](1, v16);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_87;
        v18 = *(_QWORD *)(v16 + 40);
        swift_retain();
      }
      swift_beginAccess();
      *(_BYTE *)(v18 + 88) = 1;
      swift_release();
      v59 = *v57;
      if ((v59 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v60 = MEMORY[0x220769770](1, v59);
      }
      else
      {
        if (*(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
          goto LABEL_88;
        v60 = *(_QWORD *)(v59 + 40);
        swift_bridgeObjectRetain();
        swift_retain();
      }
      swift_release_n();
      swift_release();
      swift_bridgeObjectRelease();
      v132[4] = v60;
      goto LABEL_54;
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_once();
  }
  swift_bridgeObjectRelease();
  v72 = MEMORY[0x24BEE4AF8];
LABEL_80:
  v103 = v110;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v103 + 24) = v72;
  v104 = v111;
  v133 = v111;
  v134 = v16;
  v105 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v105, (uint64_t *)&v133);
  Scene.enableCollisions(_:)(1);
  v133 = v104;
  v134 = v16;
  v106 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v106, (uint64_t *)&v133);
  swift_release();
  swift_unknownObjectRelease();
  v133 = v104;
  v134 = v16;
  v70 = static os_log_type_t.debug.getter();
  v71 = (uint64_t *)&v133;
LABEL_81:
  specialized InteractionsLogger.log(_:_:)(v70, v71);
LABEL_82:
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t cloneInteractionsComponentComponent(_:)()
{
  uint64_t Class;
  uint64_t v1;
  uint64_t Object;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v10[48];

  Class = REComponentGetClass();
  v1 = REComponentCreateByClassOpaquePointer(Class);
  Object = RECustomComponentGetObject();
  if (Object && (v3 = (uint64_t *)Object, (v4 = RECustomComponentGetObject()) != 0))
  {
    v5 = v4;
    if (!v3[1])
    {
      v6 = *v3;
      if (*v3)
      {
        type metadata accessor for IntrospectionDataCleanupHelper();
        v7 = swift_allocObject();
        *(_QWORD *)(v7 + 16) = v6;
        v3[1] = v7;
      }
    }
    outlined init with copy of __RKEntityInteractionsComponent((uint64_t)v3, (uint64_t)v10);
    swift_arrayDestroy();
    outlined init with take of __RKEntityInteractionsComponent((uint64_t)v10, v5);
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v8 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
  return v1;
}

uint64_t __RKEntityInteractionsComponent.decodedJSON()()
{
  const char **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void (*v10)(const char *, _QWORD);
  _QWORD v12[2];

  v1 = type metadata accessor for Data.Deallocator();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  if (!*v0)
    return MEMORY[0x24BEE4AF8];
  v6 = strlen(*v0);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCDB98], v1);
  Data.Deallocator._deallocator.getter();
  if (v6)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    v7 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    v6 = specialized Data._Representation.init(_:count:)(v7, v6);
    v9 = v8;
    swift_release();
  }
  else
  {
    v10 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
    v10(v5, 0);
    swift_release();
    swift_release();
    v9 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
  lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityInteractionSpecification, MEMORY[0x24BEE12D0]);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  swift_release();
  outlined consume of Data._Representation(v6, v9);
  return v12[1];
}

uint64_t __RKEntityInteractionsComponent.specifications.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v3 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v19 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v4);
  v18 = (char *)v14 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v9);
  v10 = *(_QWORD *)(v1 + 16);
  if (!v10
    || (swift_bridgeObjectRetain(),
        swift_bridgeObjectRetain(),
        v11 = specialized static Array<A>.== infix(_:_:)(a1, v10),
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        (v11 & 1) == 0))
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v20 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](&lazy protocol witness table cache variable for type [__RKEntityInteractionSpecification] and conformance <A> [A], &lazy protocol witness table cache variable for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityInteractionSpecification, MEMORY[0x24BEE12A0]);
    v14[0] = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v16 = v6;
    v17 = v3;
    v15 = v13;
    swift_release();
    __asm { BR              X10 }
  }
  return swift_bridgeObjectRelease();
}

void sub_21B9B7758(uint64_t a1)
{
  _QWORD *v1;

  *v1 = a1;
  JUMPOUT(0x21B9B7760);
}

uint64_t implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(98);
  v0._countAndFlagsBits = 0xD000000000000035;
  v0._object = (void *)0x800000021BE82010;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000021BE82050;
  v2._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v2);
  return 0;
}

uint64_t static __RKEntityInteractionsComponent.componentType.getter()
{
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration)
    return *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
  else
    return 0;
}

uint64_t __RKEntityInteractionsComponent.reRegisterInteractions()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t SceneNullable;
  uint64_t v17;
  id v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  os_log_type_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  os_log_type_t v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  void (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t inited;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  _QWORD v85[2];
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;

  v1 = v0;
  v2 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v3 = *(_QWORD *)(v2 - 8);
  v97 = v2;
  v98 = v3;
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_weakLoadStrong();
  v111 = 91;
  v112 = 0xE100000000000000;
  if (Strong)
  {
    v109 = 0;
    v110 = 0xE000000000000000;
    v108 = Strong;
    _print_unlocked<A, B>(_:_:)();
    v7 = v109;
    v8 = v110;
  }
  else
  {
    v8 = 0xE300000000000000;
    v7 = 7104878;
  }
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  v14 = v111;
  v13 = (void (*)(_QWORD))v112;
  v15 = swift_weakLoadStrong();
  if (!v15)
  {
    v111 = v14;
    v112 = (unint64_t)v13;
    v19 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v19, &v111);
    return swift_bridgeObjectRelease();
  }
  v85[1] = v15;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_50:
    v111 = v14;
    v112 = (unint64_t)v13;
    v40 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v40, &v111);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  v17 = SceneNullable;
  v18 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v18)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v17);
  }
  v20 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    goto LABEL_50;
  }
  v22 = (_QWORD *)v21;
  v23 = *(_QWORD *)(v1 + 24);
  v94 = (_QWORD *)(v1 + 24);
  v95 = v20;
  v96 = v5;
  if (v23)
  {
    v111 = v14;
    v112 = (unint64_t)v13;
    swift_bridgeObjectRetain();
    v24 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v24, &v111);
    v102 = v23 & 0xFFFFFFFFFFFFFF8;
    v103 = v23;
    if (v23 >> 62)
      goto LABEL_57;
    v105 = *(_QWORD **)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v105)
    {
      do
      {
        v99 = v14;
        v100 = v13;
        v101 = v1;
        v93 = (char *)v22;
        v22 += 8;
        v5 = (char *)v103;
        v106 = v103 & 0xC000000000000001;
        swift_beginAccess();
        v25 = 0;
        v104 = v5 + 32;
        v1 = v102;
        v26 = v105;
        while (1)
        {
          if (v106)
          {
            v27 = MEMORY[0x220769770](v25, v5);
            v28 = __OFADD__(v25++, 1);
            if (v28)
              goto LABEL_54;
          }
          else
          {
            if (v25 >= *(_QWORD *)(v1 + 16))
              goto LABEL_55;
            v27 = *(_QWORD *)&v104[8 * v25];
            swift_retain();
            v28 = __OFADD__(v25++, 1);
            if (v28)
              goto LABEL_54;
          }
          v29 = *v22;
          if (*v22 >> 62)
          {
            swift_bridgeObjectRetain();
            v26 = v105;
            v14 = _CocoaArrayWrapper.endIndex.getter();
            if (!v14)
              goto LABEL_15;
          }
          else
          {
            v14 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v14)
              goto LABEL_15;
          }
          v13 = (void (*)(_QWORD))(v29 & 0xC000000000000001);
          if ((v29 & 0xC000000000000001) != 0)
            break;
          if (*(_QWORD *)(v29 + 32) != v27)
            goto LABEL_27;
LABEL_41:
          swift_bridgeObjectRelease();
          v30 = 0;
LABEL_42:
          swift_beginAccess();
          v13 = *(void (**)(_QWORD))(**(_QWORD **)(v27 + 24) + 448);
          v34 = swift_retain();
          v13(v34);
          swift_release();
          swift_beginAccess();
          v35 = *v22;
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *v22 = v35;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v35 < 0 || (v35 & 0x4000000000000000) != 0)
            specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          v37 = v35 & 0xFFFFFFFFFFFFFF8;
          v38 = *(_QWORD *)(v37 + 16);
          if (v30 >= v38)
            goto LABEL_56;
          v13 = (void (*)(_QWORD))(v38 - 1);
          v39 = v38 - 1 - v30;
          if (v39 < 0)
            goto LABEL_116;
          memmove((void *)(v37 + 8 * v30 + 32), (const void *)(v37 + 8 * v30 + 40), 8 * v39);
          *(_QWORD *)(v37 + 16) = v13;
          specialized Array._endMutation()();
          swift_endAccess();
          swift_release();
          swift_release();
          v26 = v105;
LABEL_16:
          if ((_QWORD *)v25 == v26)
          {
            swift_bridgeObjectRelease();
            v5 = v96;
            v13 = v100;
            v1 = v101;
            v14 = v99;
            v22 = v93;
            goto LABEL_59;
          }
        }
        v32 = MEMORY[0x220769770](0, v29);
        swift_unknownObjectRelease();
        v33 = v32 == v27;
        v26 = v105;
        if (v33)
          goto LABEL_41;
LABEL_27:
        if (v14 == 1)
        {
LABEL_15:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        v1 = 5;
        while (1)
        {
          v30 = v1 - 4;
          if (v13)
          {
            v5 = (char *)MEMORY[0x220769770](v1 - 4, v29);
            swift_unknownObjectRelease();
            if (v5 == (char *)v27)
              goto LABEL_36;
          }
          else if (*(_QWORD *)(v29 + 8 * v1) == v27)
          {
LABEL_36:
            swift_bridgeObjectRelease();
            v1 = v102;
            v5 = (char *)v103;
            goto LABEL_42;
          }
          v31 = v1 - 3;
          if (__OFADD__(v30, 1))
            break;
          ++v1;
          if (v31 == v14)
          {
            swift_release();
            swift_bridgeObjectRelease();
            v1 = v102;
            v5 = (char *)v103;
            v26 = v105;
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        swift_bridgeObjectRetain();
        v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        v105 = (_QWORD *)v43;
      }
      while (v43);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v111 = v14;
    v112 = (unint64_t)v13;
    v42 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v42, &v111);
  }
LABEL_59:
  *(_QWORD *)(v1 + 24) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v111 = v14;
  v112 = (unint64_t)v13;
  v44 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v44, &v111);
  swift_bridgeObjectRelease();
  v45 = *(_QWORD *)(v1 + 16);
  if (!v45)
    goto LABEL_115;
  v93 = *(char **)(v45 + 16);
  if (!v93)
  {
    swift_release();
    return swift_unknownObjectRelease();
  }
  v92 = type metadata accessor for __RKEntityTrigger();
  v91 = type metadata accessor for __RKEntityAction();
  v86 = v22 + 8;
  v89 = v45 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
  swift_bridgeObjectRetain();
  v90 = v22 + 5;
  swift_beginAccess();
  v46 = 0;
  v88 = xmmword_21BE50AD0;
  v87 = v45;
  while (1)
  {
    if ((unint64_t)v46 >= *(_QWORD *)(v45 + 16))
      goto LABEL_113;
    outlined init with copy of __RKEntityInteractionSpecification(v89 + *(_QWORD *)(v98 + 72) * (_QWORD)v46, (uint64_t)v5);
    v47 = *v90;
    swift_retain();
    static __RKEntityTrigger.trigger(for:entityLookupTable:)((uint64_t)v5);
    v49 = v48;
    v50 = v97;
    static __RKEntityAction.action(for:entityLookupTable:)((uint64_t)&v5[*(int *)(v97 + 20)], v47);
    v52 = v51;
    v53 = (uint64_t *)&v5[*(int *)(v50 + 24)];
    v54 = *v53;
    v55 = v53[1];
    type metadata accessor for __RKEntityInteraction();
    v56 = swift_allocObject();
    *(_QWORD *)(v56 + 32) = 0;
    *(_QWORD *)(v56 + 48) = 0;
    v99 = v56 + 48;
    *(_BYTE *)(v56 + 40) = 1;
    *(_QWORD *)(v56 + 56) = 0;
    *(_QWORD *)(v56 + 16) = v49;
    *(_QWORD *)(v56 + 24) = v52;
    v105 = (_QWORD *)(v56 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v88;
    *(_QWORD *)(inited + 32) = v49;
    v107 = inited;
    specialized Array._endMutation()();
    v58 = v107;
    type metadata accessor for __RKEntityTriggerGroup();
    v59 = swift_dynamicCastClass();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain_n();
    if (v59)
    {
      swift_retain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v58 = *(_QWORD *)(v59 + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    v103 = v47;
    v104 = v46;
    v101 = v55;
    v102 = v54;
    v100 = v49;
    if (!(v58 >> 62))
    {
      v60 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v60)
        break;
      goto LABEL_101;
    }
    swift_bridgeObjectRetain();
    v60 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v60)
      break;
LABEL_101:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v79 = v101;
    *(_QWORD *)(v56 + 48) = v102;
    *(_QWORD *)(v56 + 56) = v79;
    swift_release();
    swift_bridgeObjectRelease();
    v80 = v86;
    swift_beginAccess();
    v81 = swift_retain();
    MEMORY[0x220768F0C](v81);
    if (*(_QWORD *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    v82 = v94;
    v5 = v96;
    v45 = v87;
    v83 = v104;
    if (*v94)
    {
      v84 = swift_retain();
      MEMORY[0x220768F0C](v84);
      if (*(_QWORD *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v82 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v5);
    }
    else
    {
      outlined destroy of __RKEntityInteractionSpecification((uint64_t)v96);
      swift_release();
    }
    v46 = v83 + 1;
    if (v46 == v93)
    {
      swift_release();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  if (v60 < 1)
    goto LABEL_114;
  swift_beginAccess();
  v61 = 0;
  v106 = v56;
  while (2)
  {
    if ((v58 & 0xC000000000000001) != 0)
      MEMORY[0x220769770](v61, v58);
    else
      swift_retain();
    type metadata accessor for __RKEntityProximityTrigger();
    v62 = swift_dynamicCastClass();
    if (!v62)
      goto LABEL_94;
    v63 = v62;
    v64 = swift_beginAccess();
    v65 = *(unsigned __int8 *)(v63 + 36);
    if (v65 != 1)
    {
      if (v65 != 2)
        goto LABEL_94;
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 432))(v64);
      swift_release();
      if (v66)
      {
        swift_beginAccess();
        *(_BYTE *)(v66 + 88) = 1;
        *(_QWORD *)(v56 + 32) = v66;
        goto LABEL_94;
      }
LABEL_95:
      if (v60 == ++v61)
        goto LABEL_101;
      continue;
    }
    break;
  }
  type metadata accessor for __RKEntityActionGroup();
  v67 = swift_dynamicCastClass();
  if (!v67)
    goto LABEL_94;
  v68 = v67;
  v69 = (uint64_t *)(v67 + 112);
  swift_beginAccess();
  v70 = *(_QWORD *)(v68 + 112);
  if (!(v70 >> 62))
  {
    v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_retain();
    if (v71 == 2)
      goto LABEL_82;
LABEL_93:
    swift_release();
    swift_release();
    v56 = v106;
LABEL_94:
    swift_release();
    goto LABEL_95;
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v78 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v78 != 2)
    goto LABEL_93;
LABEL_82:
  v72 = *v69;
  if ((*v69 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v73 = MEMORY[0x220769770](0, v72);
    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  if (*(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v73 = *(_QWORD *)(v72 + 32);
    swift_retain();
LABEL_85:
    *v105 = v73;
    swift_release();
    v74 = *v69;
    if ((*v69 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v75 = MEMORY[0x220769770](1, v74);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (*(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_111;
      v75 = *(_QWORD *)(v74 + 40);
      swift_retain();
    }
    swift_beginAccess();
    *(_BYTE *)(v75 + 88) = 1;
    swift_release();
    v76 = *v69;
    v56 = v106;
    if ((v76 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v77 = MEMORY[0x220769770](1, v76);
    }
    else
    {
      if (*(_QWORD *)((v76 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        goto LABEL_112;
      v77 = *(_QWORD *)(v76 + 40);
      swift_bridgeObjectRetain();
      swift_retain();
    }
    swift_release_n();
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v56 + 32) = v77;
    goto LABEL_94;
  }
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  os_log_type_t v10;
  os_log_type_t v11;
  uint64_t SceneNullable;
  uint64_t v13;
  id v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  os_log_type_t v20;
  _QWORD v21[2];
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v24[0] = 91;
    v24[1] = 0xE100000000000000;
    v22 = 0;
    v23 = 0xE000000000000000;
    v21[0] = result;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 8285;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    v7._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 8250;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    swift_release();
    v9 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v9, v24);
    swift_beginAccess();
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetComponentByClassOpaquePointer(*(_QWORD *)(v4 + 16), *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3))&& RECustomComponentGetObject())
    {
      v22 = 91;
      v23 = 0xE100000000000000;
      v10 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v10, &v22);
      __RKEntityInteractionsComponent.reRegisterInteractions()();
    }
    else
    {
      v22 = 91;
      v23 = 0xE100000000000000;
      v11 = static os_log_type_t.error.getter();
      specialized InteractionsLogger.log(_:_:)(v11, &v22);
    }
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v13 = SceneNullable;
      v14 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v14)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v13);
      }
      if ((id)RESceneGetSwiftObject())
      {
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          Scene.__interactionService.getter();
          type metadata accessor for __RKEntityInteractionManager();
          if (swift_dynamicCastClass())
          {
            v22 = 91;
            v23 = 0xE100000000000000;
            v15 = static os_log_type_t.info.getter();
            specialized InteractionsLogger.log(_:_:)(v15, &v22);
            type metadata accessor for __RKStartTrigger();
            v16 = swift_allocObject();
            *(_DWORD *)(v16 + 16) = 0;
            swift_beginAccess();
            v17 = *(_QWORD *)(a2 + 16);
            swift_bridgeObjectRetain();
            __RKEntityInteractionManager.__performInteractions(matching:on:)(v16, v17);
            swift_release();
            swift_unknownObjectRelease_n();
            swift_unknownObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v21[0] = 91;
            v21[1] = 0xE100000000000000;
            v18 = static os_log_type_t.debug.getter();
            v19 = v21;
LABEL_19:
            specialized InteractionsLogger.log(_:_:)(v18, v19);
            swift_release();
            return swift_bridgeObjectRelease();
          }
          swift_release();
          swift_unknownObjectRelease_n();
          swift_unknownObjectRelease();
        }
        else
        {
          swift_release();
          swift_unknownObjectRelease_n();
        }
      }
      else
      {
        swift_release();
      }
    }
    v22 = 91;
    v23 = 0xE100000000000000;
    v20 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v22);
    v22 = 91;
    v23 = 0xE100000000000000;
    v18 = static os_log_type_t.debug.getter();
    v19 = &v22;
    goto LABEL_19;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t __RKEntityInteractionsComponent.Registration.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RKEntityInteractionsComponent.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  int v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)(uint64_t);
  uint64_t (*v12)(uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(), (v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityInteractionsComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(_QWORD *)(v0 + 16) = v1;
  v5 = xmmword_21BE50AE0;
  v6 = 1;
  v7 = &v5;
  v8 = 0;
  v9 = @objc createInteractionsComponentObject(componentType:);
  v10 = @objc destroyInteractionsComponentObject(componentType:rawPointer:);
  v11 = @objc didAddInteractionsComponentObject(componentRef:);
  v12 = @objc willRemoveInteractionsComponentObject(componentRef:);
  v13 = @objc interactionsComponentEntityDidActivate(componentRef:);
  v14 = 0;
  v15 = v1;
  v16 = 0;
  v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  v3 = v2;
  REComponentTypeSetCloneCallback();
  *(_QWORD *)(v0 + 24) = v3;
  REStructBuilderDestroy();
  return v0;
}

uint64_t @objc destroyInteractionsComponentObject(componentType:rawPointer:)()
{
  swift_arrayDestroy();
  return RECIntrospectionFree();
}

uint64_t @objc didAddInteractionsComponentObject(componentRef:)(uint64_t a1)
{
  uint64_t result;

  result = RECustomComponentGetObject();
  if (result)
    return __RKEntityInteractionsComponent.didAdd(componentRef:)(a1);
  return result;
}

uint64_t @objc willRemoveInteractionsComponentObject(componentRef:)(uint64_t a1)
{
  return @objc willRemoveInteractionsComponentObject(componentRef:)(a1, specialized __RKEntityInteractionsComponent.willRemove(componentRef:));
}

uint64_t @objc interactionsComponentEntityDidActivate(componentRef:)(uint64_t a1)
{
  return @objc willRemoveInteractionsComponentObject(componentRef:)(a1, specialized __RKEntityInteractionsComponent.didActivate(componentRef:));
}

uint64_t @objc willRemoveInteractionsComponentObject(componentRef:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t result;

  result = RECustomComponentGetObject();
  if (result)
    return a2();
  return result;
}

uint64_t __RKEntityInteractionsComponent.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityInteractionsComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __RKEntityInteractionsComponent.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKEntityInteractionsComponent.registration.setter(void *a1)
{
  swift_beginAccess();
  static __RKEntityInteractionsComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityInteractionsComponent.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__interactions.getter()
{
  uint64_t Object;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[48];

  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
    return MEMORY[0x24BEE4AF8];
  if (!REEntityGetCustomComponent())
    return MEMORY[0x24BEE4AF8];
  Object = RECustomComponentGetObject();
  if (!Object)
    return MEMORY[0x24BEE4AF8];
  v1 = *(_QWORD *)(Object + 16);
  outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v4);
  if (v1)
    v2 = v1;
  else
    v2 = __RKEntityInteractionsComponent.decodedJSON()();
  swift_bridgeObjectRetain();
  outlined destroy of __RKEntityInteractionsComponent((uint64_t)v4);
  return v2;
}

uint64_t outlined init with copy of __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for __RKEntityInteractionsComponent(a2, a1);
  return a2;
}

uint64_t outlined destroy of __RKEntityInteractionsComponent(uint64_t a1)
{
  destroy for __RKEntityInteractionsComponent();
  return a1;
}

uint64_t Entity.__interactions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  swift_beginAccess();
  if (!static __RKEntityInteractionsComponent.registration)
    return swift_bridgeObjectRelease();
  v3 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
  if (*(_QWORD *)(a1 + 16))
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](*(_QWORD *)(v1 + 16), v3)) && RECustomComponentGetObject())
      return __RKEntityInteractionsComponent.specifications.setter(a1);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = REEntityGetCustomComponent();
  if (result)
    return REEntityRemoveComponentByClass();
  return result;
}

void (*Entity.__interactions.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Object;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v5 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v3);
    if (v5)
      v6 = v5;
    else
      v6 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v3);
  }
  else
  {
    v6 = MEMORY[0x24BEE4AF8];
  }
  v3[9] = v6;
  return Entity.__interactions.modify;
}

void Entity.__interactions.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  if ((a2 & 1) != 0)
  {
    v4 = swift_bridgeObjectRetain();
    Entity.__interactions.setter(v4);
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (!static __RKEntityInteractionsComponent.registration)
    goto LABEL_9;
  v5 = *((_QWORD *)static __RKEntityInteractionsComponent.registration + 3);
  v6 = v2[10];
  if (*(_QWORD *)(v3 + 16))
  {
    if (!REEntityGetCustomComponent() && !MEMORY[0x22076CF2C](*(_QWORD *)(v6 + 16), v5)
      || !RECustomComponentGetObject())
    {
      goto LABEL_9;
    }
    __RKEntityInteractionsComponent.specifications.setter(v3);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (REEntityGetCustomComponent())
      REEntityRemoveComponentByClass();
  }
LABEL_10:
  free(v2);
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityInteractionsComponent()
{
  return &protocol witness table for __RKEntityInteractionsComponent.Registration;
}

uint64_t sub_21B9B9A44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Entity.__interactions.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21B9B9A6C()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  return Entity.__interactions.setter(v0);
}

uint64_t destroy for __RKEntityInteractionsComponent()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_weakCopyAssign();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t initializeWithTake for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_weakTakeInit();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionsComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionsComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionsComponent()
{
  return &type metadata for __RKEntityInteractionsComponent;
}

uint64_t type metadata accessor for __RKEntityInteractionsComponent.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityInteractionsComponent.Registration()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionsComponent.Registration.RegistrationError, &type metadata for __RKEntityInteractionsComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionsComponent.Registration.RegistrationError, &type metadata for __RKEntityInteractionsComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionsComponent.Registration.RegistrationError and conformance __RKEntityInteractionsComponent.Registration.RegistrationError);
  }
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t outlined init with take of __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  swift_weakTakeInit();
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return a2;
}

uint64_t specialized createInteractionsComponentObject(componentType:)()
{
  uint64_t v0;
  _OWORD v2[2];
  char v3;
  _BYTE v4[48];

  v0 = RECIntrospectionAlloc();
  memset(v2, 0, sizeof(v2));
  swift_weakInit();
  v3 = 2;
  outlined init with take of __RKEntityInteractionsComponent((uint64_t)v2, (uint64_t)v4);
  outlined init with take of __RKEntityInteractionsComponent((uint64_t)v4, v0);
  return v0;
}

uint64_t specialized __RKEntityInteractionsComponent.willRemove(componentRef:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t SceneNullable;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  os_log_type_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];
  uint64_t v53;
  unint64_t v54;

  v1 = v0;
  Strong = swift_weakLoadStrong();
  v53 = 91;
  v54 = 0xE100000000000000;
  if (Strong)
  {
    v52[3] = 0;
    v52[4] = 0xE000000000000000;
    v52[0] = Strong;
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v53;
  v9 = v54;
  v11 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v11, &v53);
  if (!swift_weakLoadStrong())
  {
    v53 = v10;
    v54 = v9;
    v15 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v53);
LABEL_54:
    v53 = v10;
    v54 = v9;
    v41 = static os_log_type_t.debug.getter();
    v42 = &v53;
    goto LABEL_55;
  }
  if (!*(_QWORD *)(v0 + 24))
  {
    swift_release();
LABEL_51:
    swift_weakAssign();
    v52[0] = v10;
    v52[1] = v9;
    v41 = static os_log_type_t.debug.getter();
    v42 = v52;
LABEL_55:
    specialized InteractionsLogger.log(_:_:)(v41, v42);
    return swift_bridgeObjectRelease();
  }
  v51 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_53:
    swift_bridgeObjectRelease();
    v53 = v10;
    v54 = v9;
    v43 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v43, &v53);
    swift_release();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 24) = 0;
    swift_weakAssign();
    goto LABEL_54;
  }
  v13 = SceneNullable;
  v14 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v14)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v13);
  }
  Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v16 = swift_dynamicCastClass();
  if (!v16)
  {
    swift_unknownObjectRelease();
    goto LABEL_53;
  }
  v17 = v16;
  v47 = v1;
  v45 = v10;
  v46 = v9;
  v53 = v10;
  v54 = v9;
  v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v53);
  v19 = v51;
  v20 = v51 & 0xFFFFFFFFFFFFFF8;
  if (v51 >> 62)
  {
LABEL_60:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_15;
    goto LABEL_50;
  }
  v21 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
  {
LABEL_50:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    *(_QWORD *)(v47 + 24) = 0;
    v10 = v45;
    v9 = v46;
    goto LABEL_51;
  }
LABEL_15:
  v22 = (uint64_t *)(v17 + 64);
  v23 = v19 & 0xC000000000000001;
  swift_beginAccess();
  v24 = 0;
  v49 = v19 + 32;
  v50 = v19 & 0xC000000000000001;
  v48 = v21;
  while (1)
  {
    while (1)
    {
      if (v23)
      {
        v25 = MEMORY[0x220769770](v24, v19);
        v26 = __OFADD__(v24++, 1);
        if (v26)
          goto LABEL_57;
      }
      else
      {
        if (v24 >= *(_QWORD *)(v20 + 16))
          goto LABEL_58;
        v25 = *(_QWORD *)(v49 + 8 * v24);
        swift_retain();
        v26 = __OFADD__(v24++, 1);
        if (v26)
          goto LABEL_57;
      }
      v27 = *v22;
      if ((unint64_t)*v22 >> 62)
      {
        swift_bridgeObjectRetain();
        v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17)
          goto LABEL_16;
      }
      else
      {
        v17 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v17)
          goto LABEL_16;
      }
      if ((v27 & 0xC000000000000001) == 0)
        break;
      v31 = MEMORY[0x220769770](0, v27);
      swift_unknownObjectRelease();
      v32 = v31 == v25;
      v23 = v50;
      if (v32)
        goto LABEL_41;
LABEL_27:
      if (v17 != 1)
      {
        v28 = v20;
        v20 = 5;
        while (1)
        {
          v29 = v20 - 4;
          if ((v27 & 0xC000000000000001) != 0)
          {
            v19 = MEMORY[0x220769770](v20 - 4, v27);
            swift_unknownObjectRelease();
            if (v19 == v25)
              goto LABEL_36;
          }
          else if (*(_QWORD *)(v27 + 8 * v20) == v25)
          {
LABEL_36:
            swift_bridgeObjectRelease();
            v19 = v51;
            v20 = v28;
            v21 = v48;
            goto LABEL_42;
          }
          v30 = v20 - 3;
          if (__OFADD__(v29, 1))
            break;
          ++v20;
          if (v30 == v17)
          {
            swift_release();
            swift_bridgeObjectRelease();
            v19 = v51;
            v20 = v28;
            v21 = v48;
            goto LABEL_49;
          }
        }
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      if (v24 == v21)
        goto LABEL_50;
    }
    if (*(_QWORD *)(v27 + 32) != v25)
      goto LABEL_27;
LABEL_41:
    swift_bridgeObjectRelease();
    v29 = 0;
LABEL_42:
    swift_beginAccess();
    v33 = *(void (**)(uint64_t))(**(_QWORD **)(v25 + 24) + 448);
    v34 = swift_retain();
    v33(v34);
    swift_release();
    swift_beginAccess();
    v17 = *v22;
    isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *v22 = v17;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      specialized _ArrayBuffer._consumeAndCreateNew()(v17);
    v36 = v17 & 0xFFFFFFFFFFFFFF8;
    v37 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v29 >= v37)
      goto LABEL_59;
    v38 = v37 - 1;
    v39 = v37 - 1 - v29;
    if (v39 < 0)
      break;
    v40 = v36 + 8 * v29;
    v17 = *(_QWORD *)(v40 + 32);
    memmove((void *)(v40 + 32), (const void *)(v40 + 40), 8 * v39);
    *(_QWORD *)(v36 + 16) = v38;
    specialized Array._endMutation()();
    swift_endAccess();
    swift_release();
    swift_release();
LABEL_49:
    v23 = v50;
    if (v24 == v21)
      goto LABEL_50;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t SceneNullable;
  uint64_t v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t ChildCount;
  uint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t Parent;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  Swift::Int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  NSString *v60;
  Class v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  uint64_t v66;
  NSString *v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  void (*v83)(_QWORD, _QWORD);
  uint64_t v84;
  uint64_t v85;
  _QWORD v86[2];
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v78 - v7;
  Strong = swift_weakLoadStrong();
  v89 = 91;
  v90 = 0xE100000000000000;
  if (Strong)
  {
    v87 = 0;
    v88 = 0xE000000000000000;
    v85 = Strong;
    _print_unlocked<A, B>(_:_:)();
    v10 = v87;
    v11 = v88;
  }
  else
  {
    v11 = 0xE300000000000000;
    v10 = 7104878;
  }
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8285;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 8250;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  swift_release();
  v17 = v89;
  v16 = v90;
  v18 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v89);
  v19 = swift_weakLoadStrong();
  if (!v19)
  {
    v89 = v17;
    v90 = v16;
    v25 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &v89);
LABEL_27:
    v89 = v17;
    v90 = v16;
    v40 = static os_log_type_t.debug.getter();
    v41 = &v89;
LABEL_28:
    specialized InteractionsLogger.log(_:_:)(v40, v41);
    return swift_bridgeObjectRelease();
  }
  v20 = v19;
  v89 = v17;
  v90 = v16;
  v21 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v21, &v89);
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
  {
    v89 = v17;
    v90 = v16;
    v26 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v26, &v89);
LABEL_26:
    swift_release();
    goto LABEL_27;
  }
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
LABEL_25:
    v89 = v17;
    v90 = v16;
    v39 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v39, &v89);
    goto LABEL_26;
  }
  v23 = SceneNullable;
  v24 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v24)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v23);
  }
  v27 = Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v28 = swift_dynamicCastClass();
  if (!v28)
  {
    swift_unknownObjectRelease();
    goto LABEL_25;
  }
  v29 = v28;
  swift_beginAccess();
  if (*(_BYTE *)(v29 + 26) != 1)
  {
    v87 = v17;
    v88 = v16;
    v43 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v43, &v87, partial apply for implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:), v29);
    swift_unknownObjectRelease();
    swift_release();
LABEL_66:
    v87 = v17;
    v88 = v16;
    v40 = static os_log_type_t.debug.getter();
    v41 = &v87;
    goto LABEL_28;
  }
  v79 = v29;
  v80 = v2;
  v83 = (void (*)(_QWORD, _QWORD))v6;
  v84 = v27;
  v81 = v3;
  v82 = v8;
  swift_retain();
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
LABEL_15:
    swift_retain();
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      v87 = v17;
      v88 = v16;
      v30 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v30, &v87);
      *(_BYTE *)(v1 + 40) = 1;
      v31 = swift_allocObject();
      *(_QWORD *)(v31 + 16) = 0;
      v32 = (uint64_t *)(v31 + 16);
      swift_retain();
      ChildCount = REEntityGetChildCount();
      if (ChildCount < 0)
      {
LABEL_76:
        __break(1u);
      }
      else
      {
        v34 = ChildCount;
        v35 = v83;
        v78 = v31;
        if (!ChildCount)
        {
          swift_release();
LABEL_68:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v66 = swift_allocObject();
          *(_OWORD *)(v66 + 16) = xmmword_21BE50AD0;
          *(_QWORD *)(v66 + 32) = v20;
          v87 = v66;
          specialized Array._endMutation()();
          *v32 = v87;
          swift_retain();
          swift_bridgeObjectRelease();
          goto LABEL_69;
        }
        v36 = 0;
        do
        {
          if (v36 >= REEntityGetChildCount())
          {
            __break(1u);
            goto LABEL_75;
          }
          ++v36;
        }
        while (v34 != v36);
        swift_release();
        v87 = v20;
        v37 = specialized Entity.ChildCollection.filter(recursive:_:)(1);
        *v32 = v37;
        swift_bridgeObjectRelease();
        if (!v37)
          goto LABEL_68;
        v38 = swift_retain();
        MEMORY[0x220768F0C](v38);
        if (*(_QWORD *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(_QWORD *)((*v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
LABEL_23:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v35 = v83;
LABEL_69:
          v67 = (NSString *)MEMORY[0x220768C3C](0x747365544358, 0xE600000000000000);
          v68 = NSClassFromString(v67);

          v70 = v81;
          v71 = (uint64_t)v82;
          if (v68 && (v72 = v79, v69 = swift_beginAccess(), (*(_BYTE *)(v72 + 25) & 1) != 0))
          {
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
          }
          else
          {
            specialized static __ServiceLocator.shared.getter(v69);
            swift_beginAccess();
            swift_unownedRetainStrong();
            static DispatchTime.now()();
            MEMORY[0x220768A98](v35, 0.05);
            v83 = *(void (**)(_QWORD, _QWORD))(v70 + 8);
            v73 = v35;
            v74 = v80;
            v83(v73, v80);
            v75 = swift_allocObject();
            swift_weakInit();
            v76 = swift_allocObject();
            v77 = v78;
            *(_QWORD *)(v76 + 16) = v75;
            *(_QWORD *)(v76 + 24) = v77;
            swift_retain();
            swift_retain();
            __Engine.asyncAfterOnEngineQueue(deadline:_:)(v71, (uint64_t)partial apply for closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:), v76);
            swift_release();
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            v83(v71, v74);
            swift_release();
            swift_release();
          }
          swift_release();
          v86[0] = v17;
          v86[1] = v16;
          v40 = static os_log_type_t.debug.getter();
          v41 = v86;
          goto LABEL_28;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_23;
    }
LABEL_65:
    swift_release();
    v87 = v17;
    v88 = v16;
    v65 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v65, &v87);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_66;
  }
  while (1)
  {
    swift_retain();
    Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_release();
      goto LABEL_65;
    }
    v45 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
      goto LABEL_32;
    }
    if ((REEntityIsBeingDestroyed() & 1) != 0)
    {
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
      swift_once();
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v46 & 1) == 0))
    {
      swift_endAccess();
      v47 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)(&type metadata for __EntityInfoComponent, &protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v85;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent() || (Object = RECustomComponentGetObject()) == 0)
    {
LABEL_62:
      makeEntity(for:)(v45);
      swift_release_n();
      goto LABEL_32;
    }
    v50 = *(unsigned __int8 **)Object;
    if (*(_QWORD *)(Object + 8) || !v50)
    {
      result = swift_retain();
    }
    else
    {
      v51 = *v50;
      v52 = String.init(utf8String:)();
      v54 = v53 ? v52 : 0;
      v55 = v53 ? v53 : 0xE000000000000000;
      v50 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v51 == 42, v54, v55);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v50;
    }
    if (!v50)
      break;
    swift_retain();
    v56 = String.init(utf8String:)();
    v58 = v57;
    swift_release();
    if (v58)
      v59 = v56;
    else
      v59 = 0;
    if (!v58)
      v58 = 0xE000000000000000;
    v60 = (NSString *)MEMORY[0x220768C3C](v59, v58);
    swift_bridgeObjectRelease();
    v61 = NSClassFromString(v60);

    swift_release();
    if (!v61)
      goto LABEL_62;
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    v62 = swift_dynamicCastMetatype();
    if (!v62)
      goto LABEL_62;
    v63 = (*(uint64_t (**)(void))(v62 + 232))();
    v64 = *(_QWORD *)(v63 + 16);
    swift_retain();
    MEMORY[0x22076D160](v64, 0);
    *(_QWORD *)(v63 + 16) = v45;
    MEMORY[0x22076D160](v45, v63);
    swift_release_n();
    swift_release();
LABEL_32:
    REAnchorComponentGetComponentType();
    if (REEntityGetComponentByClass())
      goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  return implicit closure #7 in __RKEntityInteractionsComponent.didActivate(componentRef:)();
}

uint64_t sub_21B9BAE04()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21B9BAE28()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21B9BAE4C()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)()
{
  uint64_t v0;

  return closure #2 in __RKEntityInteractionsComponent.didActivate(componentRef:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t outlined init with copy of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of __RKEntityInteractionSpecification(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x220772E30](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:)(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined init with take of __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type [__RKEntityInteractionSpecification] and conformance <A> [A](unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityInteractionSpecification]);
    v10 = lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(a2, a3);
    result = MEMORY[0x220772E3C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification and conformance __RKEntityInteractionSpecification(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for __RKEntityInteractionSpecification(255);
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionsComponent.Registration.RegistrationError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionsComponent.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21B9BB154 + 4 * byte_21BE50AF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21B9BB174 + 4 * byte_21BE50AF5[v4]))();
}

_BYTE *sub_21B9BB154(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21B9BB174(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9BB17C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9BB184(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9BB18C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9BB194(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return 0;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionsComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.Shadow.depthBias.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void DirectionalLightComponent.Shadow.depthBias.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*DirectionalLightComponent.Shadow.depthBias.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.Shadow.maximumDistance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void DirectionalLightComponent.Shadow.maximumDistance.setter(float a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 12) = LODWORD(a1);
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(float *)(v1 + 4) = a1;
}

uint64_t *(*DirectionalLightComponent.Shadow.maximumDistance.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 4);
  return DirectionalLightComponent.Shadow.maximumDistance.modify;
}

uint64_t *DirectionalLightComponent.Shadow.maximumDistance.modify(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *result;
  v2 = *((unsigned int *)result + 2);
  *(_QWORD *)(v1 + 12) = v2;
  *(_DWORD *)(v1 + 20) = 0;
  *(_BYTE *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 4) = v2;
  return result;
}

double DirectionalLightComponent.Shadow.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 2048.00048;
  *(_QWORD *)a1 = 0x40A000003F800000;
  *(_BYTE *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 12) = 1084227584;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

void DirectionalLightComponent.Shadow.init(maximumDistance:depthBias:)(uint64_t a1@<X8>, unsigned int a2@<S0>, float a3@<S1>)
{
  *(float *)a1 = a3;
  *(float *)(a1 + 4) = *(float *)&a2;
  *(_BYTE *)(a1 + 8) = 3;
  *(_QWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 24) = 1;
}

uint64_t DirectionalLightComponent.Shadow.shadowProjection.setter(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 12);
  *(_QWORD *)(v1 + 12) = *(_QWORD *)result;
  *(_DWORD *)(v1 + 20) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t static DirectionalLightComponent.Shadow.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int CullMode;
  int AutomaticallyAdjustsShadowProjection;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  float v13;
  unint64_t v14;
  char v15;

  REDirectionalLightShadowMapComponentGetDepthBias();
  v3 = v2;
  REDirectionalLightShadowMapComponentGetDistance();
  v5 = v4;
  CullMode = REDirectionalLightShadowMapComponentGetCullModeEx();
  AutomaticallyAdjustsShadowProjection = REDirectionalLightShadowMapComponentGetAutomaticallyAdjustsShadowProjection();
  REDirectionalLightShadowMapComponentGetZNear();
  v9 = v8;
  REDirectionalLightShadowMapComponentGetZFar();
  v11 = v10;
  result = REDirectionalLightShadowMapComponentGetOrthographicScale();
  v14 = v9 | ((unint64_t)v11 << 32);
  if (AutomaticallyAdjustsShadowProjection)
  {
    v14 = v5;
    v13 = 0.0;
  }
  v15 = 1;
  if (!CullMode)
    v15 = 3;
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_BYTE *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 12) = v14;
  *(float *)(a1 + 20) = v13;
  *(_BYTE *)(a1 + 24) = AutomaticallyAdjustsShadowProjection;
  return result;
}

uint64_t *DirectionalLightComponent.Shadow.init(shadowProjection:depthBias:cullMode:)@<X0>(uint64_t *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v4;
  int v5;
  char v6;
  char v7;

  v4 = *result;
  v5 = *((_DWORD *)result + 2);
  v6 = *((_BYTE *)result + 12);
  v7 = *a2;
  *(float *)a3 = a4;
  *(_DWORD *)(a3 + 4) = 1084227584;
  *(_BYTE *)(a3 + 8) = v7;
  *(_QWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 20) = v5;
  *(_BYTE *)(a3 + 24) = v6;
  return result;
}

uint64_t DirectionalLightComponent.Shadow.__toCore(_:)()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 24);
  REDirectionalLightShadowMapComponentSetDepthBias();
  if ((v1 & 1) != 0)
  {
    REDirectionalLightShadowMapComponentSetDistance();
  }
  else
  {
    REDirectionalLightShadowMapComponentSetZNear();
    REDirectionalLightShadowMapComponentSetZFar();
    REDirectionalLightShadowMapComponentSetOrthographicScale();
  }
  REDirectionalLightShadowMapComponentSetAutomaticallyAdjustsShadowProjection();
  REDirectionalLightShadowMapComponentSetCullMode();
  return RENetworkMarkComponentDirty();
}

void static DirectionalLightComponent.Shadow.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 76;
}

void protocol witness for static Component.__coreComponentType.getter in conformance DirectionalLightComponent.Shadow(_DWORD *a1@<X8>)
{
  *a1 = 76;
}

id DirectionalLightComponent.__color.getter()
{
  id *v0;

  return *v0;
}

void DirectionalLightComponent.__color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*DirectionalLightComponent.__color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float DirectionalLightComponent.intensity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void DirectionalLightComponent.intensity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*DirectionalLightComponent.intensity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t DirectionalLightComponent.isRealWorldProxy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 12);
}

uint64_t DirectionalLightComponent.isRealWorldProxy.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t (*DirectionalLightComponent.isRealWorldProxy.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void DirectionalLightComponent.init(cgColor:intensity:isRealWorldProxy:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{

  *(_QWORD *)a3 = a1;
  *(float *)(a3 + 8) = a4;
  *(_BYTE *)(a3 + 12) = a2;
}

void static DirectionalLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  char IsProxy;
  uint64_t v5;

  REDirectionalLightComponentGetColorGamut3F();
  REDirectionalLightComponentGetIntensity();
  v3 = v2;
  IsProxy = REDirectionalLightComponentGetIsProxy();
  v5 = RECreateCGColorFromColorGamut();

  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 12) = IsProxy;
}

uint64_t DirectionalLightComponent.__toCore(_:)()
{
  RECGColorToColorGamut();
  REDirectionalLightComponentSetColorGamut3F();
  REDirectionalLightComponentSetIntensity();
  REDirectionalLightComponentSetIsProxy();
  return RENetworkMarkComponentDirty();
}

void static DirectionalLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 49;
}

uint64_t static DirectionalLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  float v4;
  int v5;

  v2 = *(float *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = *(float *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v3 ^ v5 ^ 1) & (v2 == v4);
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DirectionalLightComponent()
{
  RECGColorToColorGamut();
  REDirectionalLightComponentSetColorGamut3F();
  REDirectionalLightComponentSetIntensity();
  REDirectionalLightComponentSetIsProxy();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DirectionalLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 49;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  float v2;
  int v3;
  float v4;
  int v5;

  v2 = *(float *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = *(float *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 12);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v3 ^ v5 ^ 1) & (v2 == v4);
}

void DirectionalLightComponent.Shadow.cullModeOverride.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

_BYTE *DirectionalLightComponent.Shadow.cullModeOverride.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 8) = *result;
  return result;
}

_BYTE *(*DirectionalLightComponent.Shadow.cullModeOverride.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 8);
  return DirectionalLightComponent.Shadow.cullModeOverride.modify;
}

_BYTE *DirectionalLightComponent.Shadow.cullModeOverride.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 8) = result[8];
  return result;
}

void DirectionalLightComponent.Shadow.shadowProjection.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;

  v2 = *(_DWORD *)(v1 + 20);
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 12);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
}

uint64_t (*DirectionalLightComponent.Shadow.shadowProjection.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(_DWORD *)(v1 + 20);
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 12);
  *(_DWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 12) = v3;
  return DirectionalLightComponent.Shadow.shadowProjection.modify;
}

uint64_t DirectionalLightComponent.Shadow.shadowProjection.modify(uint64_t result)
{
  uint64_t v1;
  int v2;
  char v3;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_DWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 12);
  *(_QWORD *)(v1 + 12) = *(_QWORD *)result;
  *(_DWORD *)(v1 + 20) = v2;
  *(_BYTE *)(v1 + 24) = v3;
  return result;
}

uint64_t DirectionalLightComponent.Shadow.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  char v24;

  v19 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_BYTE *)(v1 + 8);
  v11 = *(_QWORD *)(v1 + 12);
  v12 = *(_DWORD *)(v1 + 20);
  v13 = *(_BYTE *)(v1 + 24);
  v7.n128_u64[0] = *(_QWORD *)v1;
  v18 = v7;
  v20 = v7.n128_u64[0];
  v21 = v10;
  v22 = v11;
  v23 = v12;
  v24 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v14 + 32) = 0xD000000000000010;
  *(_QWORD *)(v14 + 40) = 0x800000021BE820D0;
  *(_QWORD *)(v14 + 48) = v11;
  *(_DWORD *)(v14 + 56) = v12;
  *(_BYTE *)(v14 + 60) = v13;
  *(_QWORD *)(v14 + 72) = &type metadata for DirectionalLightComponent.Shadow.ShadowProjectionType;
  *(_QWORD *)(v14 + 80) = 0x6169426874706564;
  *(_QWORD *)(v14 + 88) = 0xE900000000000073;
  v15 = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v14 + 96) = v18.n128_u32[0];
  *(_QWORD *)(v14 + 120) = v15;
  *(_QWORD *)(v14 + 128) = 0xD000000000000010;
  *(_QWORD *)(v14 + 136) = 0x800000021BE820F0;
  *(_QWORD *)(v14 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterialParameterTypes.FaceCulling?);
  *(_BYTE *)(v14 + 144) = v10;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static DirectionalLightComponent.Shadow.ShadowProjectionType.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if ((*((_BYTE *)a1 + 12) & 1) != 0)
    return (*((_BYTE *)a2 + 12) & 1) != 0 && *(float *)&v2 == *(float *)&v3;
  if ((*((_BYTE *)a2 + 12) & 1) != 0)
    return 0;
  LODWORD(v3) = *(float *)&v2 == *(float *)&v3;
  if (*((float *)&v2 + 1) != *((float *)&v3 + 1))
    LODWORD(v3) = 0;
  if (*((float *)a1 + 2) == *((float *)a2 + 2))
    return v3;
  else
    return 0;
}

uint64_t specialized static DirectionalLightComponent.Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  float v5;
  char v6;
  int v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  BOOL v11;

  if (*(float *)a1 != *(float *)a2 || *(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 12);
  v5 = *(float *)(a1 + 20);
  v6 = *(_BYTE *)(a1 + 24);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 12);
  if (v3 == 3)
  {
    if (v7 != 3)
      return 0;
LABEL_11:
    if ((v6 & 1) != 0)
    {
      if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(float *)&v4 != *(float *)&v8)
        return 0;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        return 0;
      v10 = HIDWORD(v8);
      v11 = *(float *)&v4 == COERCE_FLOAT(*(_QWORD *)(a2 + 12)) && *((float *)&v4 + 1) == *(float *)&v10;
      if (!v11 || v5 != *(float *)(a2 + 20))
        return 0;
    }
    return 1;
  }
  result = 0;
  if (v7 != 3 && v3 == v7)
    goto LABEL_11;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef;
  if (!lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef)
  {
    type metadata accessor for CGColorRef(255);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CGColorRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef);
  }
  return result;
}

float sub_21B9BBDA8@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_21B9BBDB4(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(_QWORD *)(a2 + 12) = *(unsigned int *)a1;
  *(_DWORD *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(float *)(a2 + 4) = result;
  return result;
}

uint64_t sub_21B9BBDD4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8);
  return result;
}

_BYTE *sub_21B9BBDE0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_21B9BBDEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 20);
  v3 = *(_BYTE *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 12) = v3;
  return result;
}

uint64_t sub_21B9BBE08(uint64_t result, uint64_t a2)
{
  int v2;
  char v3;

  v2 = *(_DWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 12);
  *(_QWORD *)(a2 + 12) = *(_QWORD *)result;
  *(_DWORD *)(a2 + 20) = v2;
  *(_BYTE *)(a2 + 24) = v3;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  v4 = v3;
  return a1;
}

void destroy for DirectionalLightComponent(id *a1)
{

}

uint64_t assignWithCopy for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

_QWORD *__swift_memcpy13_8(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t assignWithTake for DirectionalLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  return a1;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 13))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 13) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent()
{
  return &type metadata for DirectionalLightComponent;
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent.Shadow(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent.Shadow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent.Shadow()
{
  return &type metadata for DirectionalLightComponent.Shadow;
}

_QWORD *__swift_memcpy13_4(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t destructiveInjectEnumTag for DirectionalLightComponent.Shadow.ShadowProjectionType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 12) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DirectionalLightComponent.Shadow.ShadowProjectionType()
{
  return &type metadata for DirectionalLightComponent.Shadow.ShadowProjectionType;
}

uint64_t one-time initialization function for UpdateLoop()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.UpdateLoop = result;
  return result;
}

id static __REOSLog.UpdateLoop.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for UpdateLoop, (id *)&static __REOSLog.UpdateLoop);
}

uint64_t one-time initialization function for ARQL()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.ARQL = result;
  return result;
}

id static __REOSLog.ARQL.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for ARQL, (id *)&static __REOSLog.ARQL);
}

uint64_t one-time initialization function for RealityComposer()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  static __REOSLog.RealityComposer = result;
  return result;
}

id static __REOSLog.RealityComposer.getter()
{
  return static __REOSLog.UpdateLoop.getter(&one-time initialization token for RealityComposer, (id *)&static __REOSLog.RealityComposer);
}

id static __REOSLog.UpdateLoop.getter(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t one-time initialization function for UpdateLoop(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.UpdateLoop, &one-time initialization token for UpdateLoop, (id *)&static __REOSLog.UpdateLoop);
}

uint64_t static __RESignpostID.UpdateLoop.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for UpdateLoop, (uint64_t)static __RESignpostID.UpdateLoop, a1);
}

uint64_t one-time initialization function for ARQL(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.ARQL, &one-time initialization token for ARQL, (id *)&static __REOSLog.ARQL);
}

uint64_t static __RESignpostID.ARQL.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for ARQL, (uint64_t)static __RESignpostID.ARQL, a1);
}

uint64_t static __RESignpostID.UpdateLoop.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for OSSignpostID();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for RealityComposer(uint64_t a1)
{
  return one-time initialization function for UpdateLoop(a1, static __RESignpostID.RealityComposer, &one-time initialization token for RealityComposer, (id *)&static __REOSLog.RealityComposer);
}

uint64_t one-time initialization function for UpdateLoop(uint64_t a1, uint64_t *a2, _QWORD *a3, id *a4)
{
  uint64_t v7;
  id v8;

  v7 = type metadata accessor for OSSignpostID();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v8 = *a4;
  return OSSignpostID.init(log:)();
}

uint64_t static __RESignpostID.RealityComposer.getter@<X0>(uint64_t a1@<X8>)
{
  return static __RESignpostID.UpdateLoop.getter(&one-time initialization token for RealityComposer, (uint64_t)static __RESignpostID.RealityComposer, a1);
}

uint64_t __REOSSignpostScope.__allocating_init(osLog:signpostID:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a3;
  *(_QWORD *)(v10 + 24) = a4;
  *(_BYTE *)(v10 + 32) = a5;
  *(_QWORD *)(v10 + 40) = a1;
  v11 = v10 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  v12 = type metadata accessor for OSSignpostID();
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  v14 = a1;
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  return v10;
}

uint64_t __REOSSignpostScope.init(osLog:signpostID:name:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  *(_BYTE *)(v5 + 32) = a5;
  *(_QWORD *)(v5 + 40) = a1;
  v8 = v5 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, a2, v9);
  v11 = a1;
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, v9);
  return v5;
}

uint64_t __REOSSignpostScope.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  static os_signpost_type_t.end.getter();
  v1 = *(void **)(v0 + 40);
  v2 = v0 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  os_signpost(_:dso:log:name:signpostID:)();

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t __REOSSignpostScope.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  static os_signpost_type_t.end.getter();
  v1 = *(void **)(v0 + 40);
  v2 = v0 + OBJC_IVAR____TtC10RealityKit19__REOSSignpostScope_signpostID;
  os_signpost(_:dso:log:name:signpostID:)();

  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for __REOSLog()
{
  return &type metadata for __REOSLog;
}

ValueMetadata *type metadata accessor for __RESignpostID()
{
  return &type metadata for __RESignpostID;
}

uint64_t ObjC metadata update function for __REOSSignpostScope()
{
  return type metadata accessor for __REOSSignpostScope();
}

uint64_t type metadata accessor for __REOSSignpostScope()
{
  uint64_t result;

  result = type metadata singleton initialization cache for __REOSSignpostScope;
  if (!type metadata singleton initialization cache for __REOSSignpostScope)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for __REOSSignpostScope()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for __REOSSignpostScope()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __REOSSignpostScope.__allocating_init(osLog:signpostID:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

BOOL static __RKSimulationSceneCoordinatorState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __RKSimulationSceneCoordinatorState.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int __RKSimulationSceneCoordinatorState.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKSimulationSceneCoordinatorState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKSimulationSceneCoordinatorState()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance __RKSimulationSceneCoordinatorState()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKSimulationSceneCoordinatorState()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for __RKSimulationSceneCoordinator();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  result = swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 32) = 0;
  static __RKSimulationSceneCoordinator.shared = v0;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for __RKActiveSceneManager();
  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v1;
  static __RKActiveSceneManager.shared = (_UNKNOWN *)result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for AnalyticsManager();
  result = swift_initStaticObject();
  static AnalyticsManager.shared = result;
  return result;
}

{
  uint64_t result;
  uint64_t v1;

  type metadata accessor for SystemRegistry();
  result = swift_allocObject();
  v1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(result + 24) = v1;
  static SystemRegistry.shared = (_UNKNOWN *)result;
  return result;
}

uint64_t __RKSimulationSceneCoordinator.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 32) = 0;
  return v0;
}

uint64_t static __RKSimulationSceneCoordinator.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKSimulationSceneCoordinator.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  static __RKSimulationSceneCoordinator.shared = a1;
  return swift_release();
}

uint64_t (*static __RKSimulationSceneCoordinator.shared.modify())()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKSimulationSceneCoordinator.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_BYTE *)(v0 + 32) = 0;
  return v0;
}

uint64_t __RKSimulationSceneCoordinator.delegate.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return MEMORY[0x22077301C](v0 + 16);
}

uint64_t __RKSimulationSceneCoordinator.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*__RKSimulationSceneCoordinator.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess();
  v4 = MEMORY[0x22077301C](v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v3[3] = v4;
  v3[4] = v5;
  return __RKSimulationSceneCoordinator.delegate.modify;
}

void __RKSimulationSceneCoordinator.delegate.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 24) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t __RKSimulationSceneCoordinator.simulationState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t __RKSimulationSceneCoordinator.simulationState.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*__RKSimulationSceneCoordinator.simulationState.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKSimulationSceneCoordinator.changeToScene(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  char v5;

  swift_beginAccess();
  if (MEMORY[0x22077301C](v1 + 16))
  {
    v3 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType();
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 8))(v1, a1, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t __RKSimulationSceneCoordinator.deinit()
{
  uint64_t v0;

  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + 16);
  return v0;
}

uint64_t outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t __RKSimulationSceneCoordinator.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?(v0 + 16);
  return swift_deallocClassInstance();
}

unint64_t lazy protocol witness table accessor for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState;
  if (!lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKSimulationSceneCoordinatorState, &type metadata for __RKSimulationSceneCoordinatorState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSimulationSceneCoordinatorState and conformance __RKSimulationSceneCoordinatorState);
  }
  return result;
}

uint64_t sub_21B9BCF1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *a1;
  v4 = *a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x22077301C](v4);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_21B9BCF74(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_21B9BCFCC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_21B9BD010(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinatorDelegate.coordinator(_:didRequestToChangeToScene:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for __RKSimulationSceneCoordinatorState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKSimulationSceneCoordinatorState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21B9BD140 + 4 * byte_21BE50E55[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21B9BD174 + 4 * byte_21BE50E50[v4]))();
}

uint64_t sub_21B9BD174(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9BD17C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B9BD184);
  return result;
}

uint64_t sub_21B9BD190(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B9BD198);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21B9BD19C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9BD1A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for __RKSimulationSceneCoordinatorState(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for __RKSimulationSceneCoordinatorState(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for __RKSimulationSceneCoordinatorState()
{
  return &type metadata for __RKSimulationSceneCoordinatorState;
}

uint64_t type metadata accessor for __RKSimulationSceneCoordinator()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKSimulationSceneCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.delegate.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.simulationState.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __RKSimulationSceneCoordinator.changeToScene(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t FromToByAnimation.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_BYTE *)(v0 + 184);
  if (*(_QWORD *)(v0 + 160))
  {
    v4 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 184));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t outlined copy of BindTarget?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return outlined copy of BindTarget(a1, a2, a3);
  return a1;
}

uint64_t outlined copy of BindTarget(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u && (((1 << a3) & 0x33) != 0 || a3 == 2))
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of BindTarget?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 0xFF)
    return outlined consume of BindTarget(a1, a2, a3);
  return a1;
}

uint64_t outlined consume of BindTarget(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 5u && (((1 << a3) & 0x33) != 0 || a3 == 2))
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t key path setter for FromToByAnimation.name : <A>FromToByAnimation<A>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return FromToByAnimation.name.setter(v1, v2);
}

uint64_t FromToByAnimation.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return result;
}

uint64_t (*FromToByAnimation.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = FromToByAnimation.name.getter();
  a1[1] = v3;
  return FromToByAnimation.name.modify;
}

uint64_t FromToByAnimation.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 152) = v4;
    *(_QWORD *)(v3 + 160) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 152) = v4;
    *(_QWORD *)(v3 + 160) = v2;
  }
  return result;
}

uint64_t FromToByAnimation.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 192) != 1)
    return *(unsigned int *)(v0 + 188);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t FromToByAnimation.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 188) = result;
  *(_BYTE *)(v1 + 192) = 0;
  return result;
}

uint64_t *(*FromToByAnimation.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 192) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 188);
  }
  *v2 = v3;
  return FromToByAnimation.blendLayer.modify;
}

uint64_t *FromToByAnimation.blendLayer.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 188) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 192) = 0;
  return result;
}

uint64_t FromToByAnimation.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 168);
  v4 = *(_QWORD *)(v1 + 176);
  v5 = *(unsigned __int8 *)(v1 + 184);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

double key path getter for FromToByAnimation.bindTarget : <A>FromToByAnimation<A>@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  FromToByAnimation.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for FromToByAnimation.bindTarget : <A>FromToByAnimation<A>(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v4[2];
  unsigned __int8 v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v4[0] = *(_QWORD *)a1;
  v4[1] = v1;
  v5 = v2;
  outlined copy of BindTarget(v4[0], v1, v2);
  return FromToByAnimation.bindTarget.setter(v4);
}

uint64_t FromToByAnimation.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176), *(_BYTE *)(v1 + 184));
  *(_QWORD *)(v1 + 168) = v2;
  *(_QWORD *)(v1 + 176) = v3;
  *(_BYTE *)(v1 + 184) = v4;
  return result;
}

uint64_t (*FromToByAnimation.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  FromToByAnimation.bindTarget.getter(a1);
  return FromToByAnimation.bindTarget.modify;
}

uint64_t FromToByAnimation.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v2, v4);
    outlined consume of BindTarget?(*(_QWORD *)(v5 + 168), *(_QWORD *)(v5 + 176), *(_BYTE *)(v5 + 184));
    *(_QWORD *)(v5 + 168) = v3;
    *(_QWORD *)(v5 + 176) = v2;
    *(_BYTE *)(v5 + 184) = v4;
    return outlined consume of BindTarget(v3, v2, v4);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v5 + 168), *(_QWORD *)(v5 + 176), *(_BYTE *)(v5 + 184));
    *(_QWORD *)(v5 + 168) = v3;
    *(_QWORD *)(v5 + 176) = v2;
    *(_BYTE *)(v5 + 184) = v4;
  }
  return result;
}

uint64_t FromToByAnimation.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 193);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *FromToByAnimation.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 193) = *result;
  return result;
}

unsigned __int8 *(*FromToByAnimation.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 194) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 193);
  }
  *v2 = v3;
  return FromToByAnimation.fillMode.modify;
}

unsigned __int8 *FromToByAnimation.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(_QWORD *)result + 193) = result[8];
  return result;
}

uint64_t FromToByAnimation.isAdditive.getter()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v1 = *(unsigned __int8 *)(v0 + 195);
  if (v1 != 2)
    return v1 & 1;
  result = *(_QWORD *)(*(_QWORD *)(v0 + 200) + 16);
  if (result)
    return RETimelineDefinitionIsAdditive();
  return result;
}

uint64_t FromToByAnimation.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 195) = result;
  return result;
}

_BYTE *(*FromToByAnimation.isAdditive.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  *a1 = v1;
  v2 = a1 + 1;
  v3 = *(unsigned __int8 *)(v1 + 195);
  if (v3 == 2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
    if (v4)
      LOBYTE(v4) = RETimelineDefinitionIsAdditive();
  }
  else
  {
    LOBYTE(v4) = v3 & 1;
  }
  *v2 = v4;
  return FromToByAnimation.isAdditive.modify;
}

_BYTE *FromToByAnimation.isAdditive.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 195) = result[8];
  return result;
}

__n128 FromToByAnimation.timing.getter@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2;
  __n128 *v3;
  unsigned __int32 v4;
  unsigned __int8 v5;
  __n128 result;

  v3 = (__n128 *)(v2 + *(int *)(a1 + 56));
  v4 = v3[1].n128_u32[0];
  v5 = v3[1].n128_u8[4];
  result = *v3;
  *a2 = *v3;
  a2[1].n128_u32[0] = v4;
  a2[1].n128_u8[4] = v5;
  return result;
}

double key path getter for FromToByAnimation.timing : <A>FromToByAnimation<A>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, __n128 *a4@<X8>)
{
  uint64_t v5;
  unsigned __int32 v6;
  unsigned __int8 v7;
  double result;
  __n128 v9;
  unsigned __int32 v10;
  unsigned __int8 v11;

  v5 = type metadata accessor for FromToByAnimation(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  FromToByAnimation.timing.getter(v5, &v9);
  v6 = v10;
  v7 = v11;
  result = v9.n128_f64[0];
  *a4 = v9;
  a4[1].n128_u32[0] = v6;
  a4[1].n128_u8[4] = v7;
  return result;
}

double key path setter for FromToByAnimation.timing : <A>FromToByAnimation<A>(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int32 v6;
  unsigned __int8 v7;
  uint64_t v8;
  double result;
  __n128 v10;
  unsigned __int32 v11;
  unsigned __int8 v12;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = a1[1].n128_u32[0];
  v7 = a1[1].n128_u8[4];
  v10 = *a1;
  v11 = v6;
  v12 = v7;
  v8 = type metadata accessor for FromToByAnimation(0, v4, v5, a4);
  *(_QWORD *)&result = FromToByAnimation.timing.setter(&v10, v8).n128_u64[0];
  return result;
}

__n128 FromToByAnimation.timing.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int32 v3;
  unsigned __int8 v4;
  __n128 *v5;
  __n128 result;

  v3 = a1[1].n128_u32[0];
  v4 = a1[1].n128_u8[4];
  v5 = (__n128 *)(v2 + *(int *)(a2 + 56));
  result = *a1;
  *v5 = *a1;
  v5[1].n128_u32[0] = v3;
  v5[1].n128_u8[4] = v4;
  return result;
}

void (*FromToByAnimation.timing.modify(_QWORD *a1, uint64_t a2))(void **a1)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  char v8;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[3] = a2;
  v5[4] = v2;
  v6 = v2 + *(int *)(a2 + 56);
  v7 = *(_DWORD *)(v6 + 16);
  v8 = *(_BYTE *)(v6 + 20);
  *(_OWORD *)v5 = *(_OWORD *)v6;
  *((_DWORD *)v5 + 4) = v7;
  *((_BYTE *)v5 + 20) = v8;
  return FromToByAnimation.timing.modify;
}

void FromToByAnimation.timing.modify(void **a1)
{
  _DWORD *v1;
  int v2;
  char v3;
  uint64_t v4;

  v1 = *a1;
  v2 = v1[4];
  v3 = *((_BYTE *)v1 + 20);
  v4 = *((_QWORD *)v1 + 4) + *(int *)(*((_QWORD *)v1 + 3) + 56);
  *(_OWORD *)v4 = *(_OWORD *)v1;
  *(_DWORD *)(v4 + 16) = v2;
  *(_BYTE *)(v4 + 20) = v3;
  free(v1);
}

uint64_t FromToByAnimation.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  *(_BYTE *)(v2 + 9) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimStart.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = FromToByAnimation.trimStart.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimStart.modify;
}

uint64_t FromToByAnimation.trimStart.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_WORD *)(v1 + 8) = v2;
  return result;
}

uint64_t FromToByAnimation.trimEnd.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = v0[7];
  v14 = v0[6];
  v15 = v1;
  v16 = v0[8];
  v17 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v10 = v0[2];
  v11 = v2;
  v3 = v0[5];
  v12 = v0[4];
  v13 = v3;
  v4 = v0[1];
  v8 = *v0;
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  *(_BYTE *)(v2 + 25) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimEnd.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = FromToByAnimation.trimEnd.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimEnd.modify;
}

uint64_t FromToByAnimation.trimEnd.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t FromToByAnimation.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipDuration;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 96);
  v14 = v1;
  v15 = *(_OWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 32);
  v10 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v11 = *(_OWORD *)(v0 + 64);
  v12 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t FromToByAnimation.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  *(_BYTE *)(v2 + 41) = 0;
  return result;
}

uint64_t (*FromToByAnimation.trimDuration.modify(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  char v3;

  *(_QWORD *)(a1 + 16) = v1;
  *(_QWORD *)a1 = FromToByAnimation.trimDuration.getter();
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return FromToByAnimation.trimDuration.modify;
}

uint64_t FromToByAnimation.trimDuration.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)result;
  *(_WORD *)(v1 + 40) = v2;
  return result;
}

double FromToByAnimation.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 112);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 64);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
  *(_BYTE *)(v1 + 56) = 0;
}

double (*FromToByAnimation.offset.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = FromToByAnimation.offset.getter();
  return FromToByAnimation.offset.modify;
}

double FromToByAnimation.offset.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 48) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 56) = 0;
  return result;
}

double FromToByAnimation.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
  *(_BYTE *)(v1 + 72) = 0;
}

double (*FromToByAnimation.delay.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = FromToByAnimation.delay.getter();
  return FromToByAnimation.delay.modify;
}

double FromToByAnimation.delay.modify(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  result = *(double *)a1;
  *(_QWORD *)(v1 + 64) = *(_QWORD *)a1;
  *(_BYTE *)(v1 + 72) = 0;
  return result;
}

float FromToByAnimation.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void FromToByAnimation.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

float (*FromToByAnimation.speed.modify(uint64_t a1))(float *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = FromToByAnimation.speed.getter();
  return FromToByAnimation.speed.modify;
}

float FromToByAnimation.speed.modify(float *a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)a1;
  result = a1[2];
  *(float *)(v1 + 76) = result;
  *(_BYTE *)(v1 + 80) = 0;
  return result;
}

void FromToByAnimation.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 96);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 144);
  v4 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *FromToByAnimation.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = *result;
  return result;
}

_BYTE *(*FromToByAnimation.repeatMode.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  FromToByAnimation.repeatMode.getter((_BYTE *)(a1 + 8));
  return FromToByAnimation.repeatMode.modify;
}

_BYTE *FromToByAnimation.repeatMode.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 81) = result[8];
  return result;
}

double FromToByAnimation.duration.getter(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  int v10;
  double v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = MEMORY[0x24BDAC7A8](a1);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v7 + *(int *)(v6 + 52);
  v9 = *(double *)v8;
  v10 = *(unsigned __int8 *)(v8 + 8);
  (*(void (**)(char *, __n128))(v2 + 16))(v5, v3);
  if (v10 == 1)
  {
    if (*(_QWORD *)(*((_QWORD *)v5 + 25) + 16))
    {
      RETimelineDefinitionGetDuration();
      v9 = v11;
    }
    else
    {
      v9 = 0.0;
    }
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v9;
}

uint64_t FromToByAnimation.duration.setter(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2 + *(int *)(result + 52);
  *(double *)v3 = a2;
  *(_BYTE *)(v3 + 8) = 0;
  return result;
}

double (*FromToByAnimation.duration.modify(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = v2;
  *(double *)a1 = FromToByAnimation.duration.getter(a2);
  return FromToByAnimation.duration.modify;
}

double FromToByAnimation.duration.modify(uint64_t a1)
{
  double result;
  uint64_t v2;

  result = *(double *)a1;
  v2 = *(_QWORD *)(a1 + 16) + *(int *)(*(_QWORD *)(a1 + 8) + 52);
  *(_QWORD *)v2 = *(_QWORD *)a1;
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

uint64_t FromToByAnimation.init(name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, int a14, char *a15, char *a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  char v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  char v64;
  uint64_t v65[2];
  char v66;
  _OWORD v67[9];
  uint64_t v68;

  v60 = a6[1];
  v61 = *a6;
  v58 = *((_BYTE *)a6 + 20);
  v59 = *((_DWORD *)a6 + 4);
  v50 = a8[1];
  v51 = *a8;
  v49 = *((_BYTE *)a8 + 16);
  v31 = *a15;
  v52 = *a16;
  v32 = (int *)type metadata accessor for FromToByAnimation(0, a23, a24, a4);
  v33 = a9 + v32[10];
  v34 = type metadata accessor for Optional();
  v53 = *(_QWORD *)(v34 - 8);
  v35 = *(void (**)(void))(v53 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35)(v33, 1, 1, v34);
  v36 = a9 + v32[11];
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35)(v36, 1, 1, v34);
  v54 = a9 + v32[12];
  v35();
  v37 = a9 + v32[13];
  *(_QWORD *)v37 = 0;
  *(_BYTE *)(v37 + 8) = 1;
  *(_QWORD *)(a9 + v32[15]) = 0;
  *(_BYTE *)(a9 + v32[16]) = 2;
  *(_BYTE *)(a9 + v32[17]) = 2;
  *(_BYTE *)(a9 + v32[18]) = 2;
  *(_QWORD *)(a9 + v32[19]) = 0;
  v65[0] = 0;
  v65[1] = 0;
  v66 = -1;
  v64 = v31;
  v63 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a1, a2, v65, 0, &v64, &v63, a17, a18 & 1, (uint64_t)v67, a11, a12, a13, a19, a20 & 1, a21, a22 & 1);
  v38 = v67[7];
  v39 = v67[8];
  *(_OWORD *)(a9 + 96) = v67[6];
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_QWORD *)(a9 + 144) = v68;
  v40 = v67[3];
  *(_OWORD *)(a9 + 32) = v67[2];
  *(_OWORD *)(a9 + 48) = v40;
  v41 = v67[5];
  *(_OWORD *)(a9 + 64) = v67[4];
  *(_OWORD *)(a9 + 80) = v41;
  v42 = v67[1];
  *(_OWORD *)a9 = v67[0];
  *(_OWORD *)(a9 + 16) = v42;
  type metadata accessor for TimelineDefinition();
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(a9 + 152) = a1;
  *(_QWORD *)(a9 + 160) = a2;
  *(_QWORD *)(a9 + 168) = v51;
  *(_QWORD *)(a9 + 176) = v50;
  *(_BYTE *)(a9 + 184) = v49;
  *(_DWORD *)(a9 + 188) = a14;
  *(_BYTE *)(a9 + 192) = 0;
  *(_BYTE *)(a9 + 193) = v52;
  *(_BYTE *)(a9 + 194) = 0;
  *(_BYTE *)(a9 + 195) = a7;
  *(_QWORD *)(a9 + 200) = v43;
  v44 = type metadata accessor for Optional();
  v45 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 8);
  swift_bridgeObjectRetain();
  v45(v33, v44);
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
  v46(v33, a3, v34);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v35)(v33, 0, 1, v34);
  v45(v36, v44);
  v46(v36, a4, v34);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v35)(v36, 0, 1, v34);
  v45(v54, v44);
  v46(v54, a5, v34);
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v35)(v54, 0, 1, v34);
  *(double *)v37 = a10;
  *(_BYTE *)(v37 + 8) = 0;
  v48 = a9 + v32[14];
  *(_QWORD *)v48 = v61;
  *(_QWORD *)(v48 + 8) = v60;
  *(_DWORD *)(v48 + 16) = v59;
  *(_BYTE *)(v48 + 20) = v58;
  return result;
}

uint64_t specialized FromToByAnimation.createResource(timelineDefinition:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[8];
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  if (a1._rawValue)
  {
    v3 = *(__int128 *)((char *)v1 + 168);
    *(_OWORD *)v87 = *(__int128 *)((char *)v1 + 152);
    *(_OWORD *)&v87[16] = v3;
    v88 = *(__int128 *)((char *)v1 + 184);
    v4 = *((_QWORD *)v1 + 25);
    *(_QWORD *)&v89 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((*((_BYTE *)v1 + 264) & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetDuration();
    RETimelineDefinitionSetDuration();
    *(_OWORD *)v87 = v1[17];
    *(_QWORD *)&v87[13] = *(_QWORD *)((char *)v1 + 285);
    AnimationTimingFunction.coreEasingFunction.getter();
    if (*(_QWORD *)(v27 + 16))
      RETimelineDefinitionSetEasingFunctionEx();
    v28 = v1[7];
    v29 = v1[5];
    v82 = v1[6];
    v83 = v28;
    v30 = v1[7];
    v84 = v1[8];
    v31 = v1[3];
    v32 = v1[1];
    v78 = v1[2];
    v79 = v31;
    v33 = v1[3];
    v34 = v1[5];
    v80 = v1[4];
    v81 = v34;
    v35 = v1[1];
    v76 = *v1;
    v77 = v35;
    v92 = v82;
    v93 = v30;
    v94 = v1[8];
    v88 = v78;
    v89 = v33;
    v90 = v80;
    v91 = v29;
    v85 = *((_QWORD *)v1 + 18);
    v95 = *((_QWORD *)v1 + 18);
    *(_OWORD *)v87 = v76;
    *(_OWORD *)&v87[16] = v32;
    if (TimelineClipProperties.isClipped.getter())
    {
      v57 = v82;
      v58 = v83;
      v59 = v84;
      v60 = DWORD1(v84);
      v61 = BYTE8(v84);
      v62 = BYTE9(v84);
      v63 = BYTE10(v84);
      v64 = BYTE11(v84);
      v36 = v85;
      v55 = v81;
      v56 = BYTE1(v81);
      v53 = BYTE8(v80);
      v54 = HIDWORD(v80);
      v51 = v79;
      v52 = v80;
      v50 = BYTE8(v79);
      v49 = v78;
      v47 = BYTE9(v78);
      v48 = BYTE8(v78);
      v37 = v77;
      v38 = BYTE8(v77);
      v39 = BYTE9(v77);
      v40 = v76;
      v41 = BYTE8(v76);
      v42 = BYTE9(v76);
      outlined init with take of Transform?((uint64_t)&v81 + 8, (uint64_t)v86, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      v43 = swift_allocObject();
      *(Swift::OpaquePointer *)(v43 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v76);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v86);
      *(_QWORD *)&v66 = v40;
      BYTE8(v66) = v41;
      BYTE9(v66) = v42;
      *(_QWORD *)&v67 = v37;
      BYTE8(v67) = v38;
      BYTE9(v67) = v39;
      *(_QWORD *)&v68 = v49;
      BYTE8(v68) = v48;
      BYTE9(v68) = v47;
      *(_QWORD *)&v69 = v51;
      BYTE8(v69) = v50;
      *(_QWORD *)&v70 = v52;
      BYTE8(v70) = v53;
      HIDWORD(v70) = v54;
      LOBYTE(v71) = v55;
      BYTE1(v71) = v56;
      *((_QWORD *)&v71 + 1) = v43;
      v72 = v57;
      v73 = v58;
      LOBYTE(v74) = v59;
      DWORD1(v74) = v60;
      BYTE8(v74) = v61;
      BYTE9(v74) = v62;
      BYTE10(v74) = v63;
      BYTE11(v74) = v64;
      v75 = v36;
      v95 = v36;
      v93 = v58;
      v94 = v74;
      *(_OWORD *)v87 = v66;
      *(_OWORD *)&v87[16] = v67;
      v91 = v71;
      v92 = v57;
      v89 = v69;
      v90 = v70;
      v88 = v68;
      outlined retain of TimelineClipProperties((uint64_t)&v66);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v87, &v65);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v66);
      outlined release of TimelineClipProperties((uint64_t)&v66);
      return v65;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    v45 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v45;
  }
  else
  {
    v5 = *((_QWORD *)v1 + 18);
    v6 = v1[7];
    v92 = v1[6];
    v93 = v6;
    v94 = v1[8];
    v7 = v1[3];
    v88 = v1[2];
    v89 = v7;
    v8 = v1[5];
    v90 = v1[4];
    v91 = v8;
    v9 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v9;
    v95 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      v18 = *(_QWORD **)(*((_QWORD *)v1 + 25) + 16);
      if (v18)
      {
        v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v87);
        v20 = *(_QWORD *)&v87[24];
        v21 = v88;
        __swift_project_boxed_opaque_existential_1(v87, *(uint64_t *)&v87[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          v24 = String.init(cString:)();
          v26 = v25;
          type metadata accessor for AnimationResource();
          v18 = (_QWORD *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    v10 = v1[7];
    v92 = v1[6];
    v93 = v10;
    v94 = v1[8];
    v11 = v1[3];
    v88 = v1[2];
    v89 = v11;
    v12 = v1[5];
    v90 = v1[4];
    v91 = v12;
    v13 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v13;
    v95 = v5;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v14 = v1[7];
      v92 = v1[6];
      v93 = v14;
      v94 = v1[8];
      v15 = v1[3];
      v88 = v1[2];
      v89 = v15;
      v16 = v1[5];
      v90 = v1[4];
      v91 = v16;
      v17 = v1[1];
      *(_OWORD *)v87 = *v1;
      *(_OWORD *)&v87[16] = v17;
      v95 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    v46 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v46;
  }
}

{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[8];
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  if (a1._rawValue)
  {
    v3 = *(__int128 *)((char *)v1 + 168);
    *(_OWORD *)v87 = *(__int128 *)((char *)v1 + 152);
    *(_OWORD *)&v87[16] = v3;
    v88 = *(__int128 *)((char *)v1 + 184);
    v4 = *((_QWORD *)v1 + 25);
    *(_QWORD *)&v89 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[19] & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetDuration();
    RETimelineDefinitionSetDuration();
    *(_OWORD *)v87 = v1[20];
    *(_QWORD *)&v87[13] = *(_QWORD *)((char *)v1 + 333);
    AnimationTimingFunction.coreEasingFunction.getter();
    if (*(_QWORD *)(v27 + 16))
      RETimelineDefinitionSetEasingFunctionEx();
    v28 = v1[7];
    v29 = v1[5];
    v82 = v1[6];
    v83 = v28;
    v30 = v1[7];
    v84 = v1[8];
    v31 = v1[3];
    v32 = v1[1];
    v78 = v1[2];
    v79 = v31;
    v33 = v1[3];
    v34 = v1[5];
    v80 = v1[4];
    v81 = v34;
    v35 = v1[1];
    v76 = *v1;
    v77 = v35;
    v92 = v82;
    v93 = v30;
    v94 = v1[8];
    v88 = v78;
    v89 = v33;
    v90 = v80;
    v91 = v29;
    v85 = *((_QWORD *)v1 + 18);
    v95 = *((_QWORD *)v1 + 18);
    *(_OWORD *)v87 = v76;
    *(_OWORD *)&v87[16] = v32;
    if (TimelineClipProperties.isClipped.getter())
    {
      v57 = v82;
      v58 = v83;
      v59 = v84;
      v60 = DWORD1(v84);
      v61 = BYTE8(v84);
      v62 = BYTE9(v84);
      v63 = BYTE10(v84);
      v64 = BYTE11(v84);
      v36 = v85;
      v55 = v81;
      v56 = BYTE1(v81);
      v53 = BYTE8(v80);
      v54 = HIDWORD(v80);
      v51 = v79;
      v52 = v80;
      v50 = BYTE8(v79);
      v49 = v78;
      v47 = BYTE9(v78);
      v48 = BYTE8(v78);
      v37 = v77;
      v38 = BYTE8(v77);
      v39 = BYTE9(v77);
      v40 = v76;
      v41 = BYTE8(v76);
      v42 = BYTE9(v76);
      outlined init with take of Transform?((uint64_t)&v81 + 8, (uint64_t)v86, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      v43 = swift_allocObject();
      *(Swift::OpaquePointer *)(v43 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v76);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v86);
      *(_QWORD *)&v66 = v40;
      BYTE8(v66) = v41;
      BYTE9(v66) = v42;
      *(_QWORD *)&v67 = v37;
      BYTE8(v67) = v38;
      BYTE9(v67) = v39;
      *(_QWORD *)&v68 = v49;
      BYTE8(v68) = v48;
      BYTE9(v68) = v47;
      *(_QWORD *)&v69 = v51;
      BYTE8(v69) = v50;
      *(_QWORD *)&v70 = v52;
      BYTE8(v70) = v53;
      HIDWORD(v70) = v54;
      LOBYTE(v71) = v55;
      BYTE1(v71) = v56;
      *((_QWORD *)&v71 + 1) = v43;
      v72 = v57;
      v73 = v58;
      LOBYTE(v74) = v59;
      DWORD1(v74) = v60;
      BYTE8(v74) = v61;
      BYTE9(v74) = v62;
      BYTE10(v74) = v63;
      BYTE11(v74) = v64;
      v75 = v36;
      v95 = v36;
      v93 = v58;
      v94 = v74;
      *(_OWORD *)v87 = v66;
      *(_OWORD *)&v87[16] = v67;
      v91 = v71;
      v92 = v57;
      v89 = v69;
      v90 = v70;
      v88 = v68;
      outlined retain of TimelineClipProperties((uint64_t)&v66);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v87, &v65);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v66);
      outlined release of TimelineClipProperties((uint64_t)&v66);
      return v65;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    v45 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v45;
  }
  else
  {
    v5 = *((_QWORD *)v1 + 18);
    v6 = v1[7];
    v92 = v1[6];
    v93 = v6;
    v94 = v1[8];
    v7 = v1[3];
    v88 = v1[2];
    v89 = v7;
    v8 = v1[5];
    v90 = v1[4];
    v91 = v8;
    v9 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v9;
    v95 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      v18 = *(_QWORD **)(*((_QWORD *)v1 + 25) + 16);
      if (v18)
      {
        v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v87);
        v20 = *(_QWORD *)&v87[24];
        v21 = v88;
        __swift_project_boxed_opaque_existential_1(v87, *(uint64_t *)&v87[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          v24 = String.init(cString:)();
          v26 = v25;
          type metadata accessor for AnimationResource();
          v18 = (_QWORD *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    v10 = v1[7];
    v92 = v1[6];
    v93 = v10;
    v94 = v1[8];
    v11 = v1[3];
    v88 = v1[2];
    v89 = v11;
    v12 = v1[5];
    v90 = v1[4];
    v91 = v12;
    v13 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v13;
    v95 = v5;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v14 = v1[7];
      v92 = v1[6];
      v93 = v14;
      v94 = v1[8];
      v15 = v1[3];
      v88 = v1[2];
      v89 = v15;
      v16 = v1[5];
      v90 = v1[4];
      v91 = v16;
      v17 = v1[1];
      *(_OWORD *)v87 = *v1;
      *(_OWORD *)&v87[16] = v17;
      v95 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    v46 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v46;
  }
}

{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[8];
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  if (a1._rawValue)
  {
    v3 = *(__int128 *)((char *)v1 + 168);
    *(_OWORD *)v87 = *(__int128 *)((char *)v1 + 152);
    *(_OWORD *)&v87[16] = v3;
    v88 = *(__int128 *)((char *)v1 + 184);
    v4 = *((_QWORD *)v1 + 25);
    *(_QWORD *)&v89 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[25] & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetDuration();
    RETimelineDefinitionSetDuration();
    *(_OWORD *)v87 = v1[26];
    *(_QWORD *)&v87[13] = *(_QWORD *)((char *)v1 + 429);
    AnimationTimingFunction.coreEasingFunction.getter();
    if (*(_QWORD *)(v27 + 16))
      RETimelineDefinitionSetEasingFunctionEx();
    v28 = v1[7];
    v29 = v1[5];
    v82 = v1[6];
    v83 = v28;
    v30 = v1[7];
    v84 = v1[8];
    v31 = v1[3];
    v32 = v1[1];
    v78 = v1[2];
    v79 = v31;
    v33 = v1[3];
    v34 = v1[5];
    v80 = v1[4];
    v81 = v34;
    v35 = v1[1];
    v76 = *v1;
    v77 = v35;
    v92 = v82;
    v93 = v30;
    v94 = v1[8];
    v88 = v78;
    v89 = v33;
    v90 = v80;
    v91 = v29;
    v85 = *((_QWORD *)v1 + 18);
    v95 = *((_QWORD *)v1 + 18);
    *(_OWORD *)v87 = v76;
    *(_OWORD *)&v87[16] = v32;
    if (TimelineClipProperties.isClipped.getter())
    {
      v57 = v82;
      v58 = v83;
      v59 = v84;
      v60 = DWORD1(v84);
      v61 = BYTE8(v84);
      v62 = BYTE9(v84);
      v63 = BYTE10(v84);
      v64 = BYTE11(v84);
      v36 = v85;
      v55 = v81;
      v56 = BYTE1(v81);
      v53 = BYTE8(v80);
      v54 = HIDWORD(v80);
      v51 = v79;
      v52 = v80;
      v50 = BYTE8(v79);
      v49 = v78;
      v47 = BYTE9(v78);
      v48 = BYTE8(v78);
      v37 = v77;
      v38 = BYTE8(v77);
      v39 = BYTE9(v77);
      v40 = v76;
      v41 = BYTE8(v76);
      v42 = BYTE9(v76);
      outlined init with take of Transform?((uint64_t)&v81 + 8, (uint64_t)v86, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      v43 = swift_allocObject();
      *(Swift::OpaquePointer *)(v43 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v76);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v86);
      *(_QWORD *)&v66 = v40;
      BYTE8(v66) = v41;
      BYTE9(v66) = v42;
      *(_QWORD *)&v67 = v37;
      BYTE8(v67) = v38;
      BYTE9(v67) = v39;
      *(_QWORD *)&v68 = v49;
      BYTE8(v68) = v48;
      BYTE9(v68) = v47;
      *(_QWORD *)&v69 = v51;
      BYTE8(v69) = v50;
      *(_QWORD *)&v70 = v52;
      BYTE8(v70) = v53;
      HIDWORD(v70) = v54;
      LOBYTE(v71) = v55;
      BYTE1(v71) = v56;
      *((_QWORD *)&v71 + 1) = v43;
      v72 = v57;
      v73 = v58;
      LOBYTE(v74) = v59;
      DWORD1(v74) = v60;
      BYTE8(v74) = v61;
      BYTE9(v74) = v62;
      BYTE10(v74) = v63;
      BYTE11(v74) = v64;
      v75 = v36;
      v95 = v36;
      v93 = v58;
      v94 = v74;
      *(_OWORD *)v87 = v66;
      *(_OWORD *)&v87[16] = v67;
      v91 = v71;
      v92 = v57;
      v89 = v69;
      v90 = v70;
      v88 = v68;
      outlined retain of TimelineClipProperties((uint64_t)&v66);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v87, &v65);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v66);
      outlined release of TimelineClipProperties((uint64_t)&v66);
      return v65;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    v45 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v45;
  }
  else
  {
    v5 = *((_QWORD *)v1 + 18);
    v6 = v1[7];
    v92 = v1[6];
    v93 = v6;
    v94 = v1[8];
    v7 = v1[3];
    v88 = v1[2];
    v89 = v7;
    v8 = v1[5];
    v90 = v1[4];
    v91 = v8;
    v9 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v9;
    v95 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      v18 = *(_QWORD **)(*((_QWORD *)v1 + 25) + 16);
      if (v18)
      {
        v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v87);
        v20 = *(_QWORD *)&v87[24];
        v21 = v88;
        __swift_project_boxed_opaque_existential_1(v87, *(uint64_t *)&v87[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          v24 = String.init(cString:)();
          v26 = v25;
          type metadata accessor for AnimationResource();
          v18 = (_QWORD *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    v10 = v1[7];
    v92 = v1[6];
    v93 = v10;
    v94 = v1[8];
    v11 = v1[3];
    v88 = v1[2];
    v89 = v11;
    v12 = v1[5];
    v90 = v1[4];
    v91 = v12;
    v13 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v13;
    v95 = v5;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v14 = v1[7];
      v92 = v1[6];
      v93 = v14;
      v94 = v1[8];
      v15 = v1[3];
      v88 = v1[2];
      v89 = v15;
      v16 = v1[5];
      v90 = v1[4];
      v91 = v16;
      v17 = v1[1];
      *(_OWORD *)v87 = *v1;
      *(_OWORD *)&v87[16] = v17;
      v95 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    v46 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v46;
  }
}

{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t TimelineAsset;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  int v54;
  char v55;
  char v56;
  __int128 v57;
  __int128 v58;
  char v59;
  int v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[8];
  _BYTE v87[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  if (a1._rawValue)
  {
    v3 = *(__int128 *)((char *)v1 + 168);
    *(_OWORD *)v87 = *(__int128 *)((char *)v1 + 152);
    *(_OWORD *)&v87[16] = v3;
    v88 = *(__int128 *)((char *)v1 + 184);
    v4 = *((_QWORD *)v1 + 25);
    *(_QWORD *)&v89 = v4;
    TimelineBaseProperties.writeProperties(_:)(a1);
    if ((v1[15] & 1) != 0 && *(_QWORD *)(v4 + 16))
      RETimelineDefinitionGetDuration();
    RETimelineDefinitionSetDuration();
    *(_OWORD *)v87 = v1[16];
    *(_QWORD *)&v87[13] = *(_QWORD *)((char *)v1 + 269);
    AnimationTimingFunction.coreEasingFunction.getter();
    if (*(_QWORD *)(v27 + 16))
      RETimelineDefinitionSetEasingFunctionEx();
    v28 = v1[7];
    v29 = v1[5];
    v82 = v1[6];
    v83 = v28;
    v30 = v1[7];
    v84 = v1[8];
    v31 = v1[3];
    v32 = v1[1];
    v78 = v1[2];
    v79 = v31;
    v33 = v1[3];
    v34 = v1[5];
    v80 = v1[4];
    v81 = v34;
    v35 = v1[1];
    v76 = *v1;
    v77 = v35;
    v92 = v82;
    v93 = v30;
    v94 = v1[8];
    v88 = v78;
    v89 = v33;
    v90 = v80;
    v91 = v29;
    v85 = *((_QWORD *)v1 + 18);
    v95 = *((_QWORD *)v1 + 18);
    *(_OWORD *)v87 = v76;
    *(_OWORD *)&v87[16] = v32;
    if (TimelineClipProperties.isClipped.getter())
    {
      v57 = v82;
      v58 = v83;
      v59 = v84;
      v60 = DWORD1(v84);
      v61 = BYTE8(v84);
      v62 = BYTE9(v84);
      v63 = BYTE10(v84);
      v64 = BYTE11(v84);
      v36 = v85;
      v55 = v81;
      v56 = BYTE1(v81);
      v53 = BYTE8(v80);
      v54 = HIDWORD(v80);
      v51 = v79;
      v52 = v80;
      v50 = BYTE8(v79);
      v49 = v78;
      v47 = BYTE9(v78);
      v48 = BYTE8(v78);
      v37 = v77;
      v38 = BYTE8(v77);
      v39 = BYTE9(v77);
      v40 = v76;
      v41 = BYTE8(v76);
      v42 = BYTE9(v76);
      outlined init with take of Transform?((uint64_t)&v81 + 8, (uint64_t)v86, &demangling cache variable for type metadata for TimelineDefinition?);
      type metadata accessor for TimelineDefinition();
      v43 = swift_allocObject();
      *(Swift::OpaquePointer *)(v43 + 16) = a1;
      outlined retain of TimelineClipProperties((uint64_t)&v76);
      RERetain();
      outlined release of TimelineDefinition?((uint64_t)v86);
      *(_QWORD *)&v66 = v40;
      BYTE8(v66) = v41;
      BYTE9(v66) = v42;
      *(_QWORD *)&v67 = v37;
      BYTE8(v67) = v38;
      BYTE9(v67) = v39;
      *(_QWORD *)&v68 = v49;
      BYTE8(v68) = v48;
      BYTE9(v68) = v47;
      *(_QWORD *)&v69 = v51;
      BYTE8(v69) = v50;
      *(_QWORD *)&v70 = v52;
      BYTE8(v70) = v53;
      HIDWORD(v70) = v54;
      LOBYTE(v71) = v55;
      BYTE1(v71) = v56;
      *((_QWORD *)&v71 + 1) = v43;
      v72 = v57;
      v73 = v58;
      LOBYTE(v74) = v59;
      DWORD1(v74) = v60;
      BYTE8(v74) = v61;
      BYTE9(v74) = v62;
      BYTE10(v74) = v63;
      BYTE11(v74) = v64;
      v75 = v36;
      v95 = v36;
      v93 = v58;
      v94 = v74;
      *(_OWORD *)v87 = v66;
      *(_OWORD *)&v87[16] = v67;
      v91 = v71;
      v92 = v57;
      v89 = v69;
      v90 = v70;
      v88 = v68;
      outlined retain of TimelineClipProperties((uint64_t)&v66);
      swift_retain();
      closure #1 in TimelineClipProperties.createClip()((uint64_t)v87, &v65);
      swift_release();
      swift_release();
      outlined release of TimelineClipProperties((uint64_t)&v66);
      outlined release of TimelineClipProperties((uint64_t)&v66);
      return v65;
    }
    type metadata accessor for TimelineDefinition();
    *(Swift::OpaquePointer *)(swift_allocObject() + 16) = a1;
    RERetain();
    v45 = TimelineDefinition.resource.getter();
    swift_setDeallocating();
    RERelease();
    swift_deallocClassInstance();
    swift_release();
    return (uint64_t)v45;
  }
  else
  {
    v5 = *((_QWORD *)v1 + 18);
    v6 = v1[7];
    v92 = v1[6];
    v93 = v6;
    v94 = v1[8];
    v7 = v1[3];
    v88 = v1[2];
    v89 = v7;
    v8 = v1[5];
    v90 = v1[4];
    v91 = v8;
    v9 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v9;
    v95 = v5;
    if (!TimelineClipProperties.isClipped.getter())
    {
      v18 = *(_QWORD **)(*((_QWORD *)v1 + 25) + 16);
      if (v18)
      {
        v19 = specialized static __ServiceLocator.shared.getter() + 120;
        swift_beginAccess();
        outlined init with copy of __REAssetService(v19, (uint64_t)v87);
        v20 = *(_QWORD *)&v87[24];
        v21 = v88;
        __swift_project_boxed_opaque_existential_1(v87, *(uint64_t *)&v87[24]);
        (*(void (**)(uint64_t, uint64_t))(v21 + 32))(v20, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
        TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
        if (TimelineAsset)
        {
          v23 = TimelineAsset;
          RETimelineDefinitionGetName();
          v24 = String.init(cString:)();
          v26 = v25;
          type metadata accessor for AnimationResource();
          v18 = (_QWORD *)swift_allocObject();
          v18[2] = v23;
          v18[3] = v24;
          v18[4] = v26;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
        }
        else
        {
          return 0;
        }
      }
      return (uint64_t)v18;
    }
    v10 = v1[7];
    v92 = v1[6];
    v93 = v10;
    v94 = v1[8];
    v11 = v1[3];
    v88 = v1[2];
    v89 = v11;
    v12 = v1[5];
    v90 = v1[4];
    v91 = v12;
    v13 = v1[1];
    *(_OWORD *)v87 = *v1;
    *(_OWORD *)&v87[16] = v13;
    v95 = v5;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v14 = v1[7];
      v92 = v1[6];
      v93 = v14;
      v94 = v1[8];
      v15 = v1[3];
      v88 = v1[2];
      v89 = v15;
      v16 = v1[5];
      v90 = v1[4];
      v91 = v16;
      v17 = v1[1];
      *(_OWORD *)v87 = *v1;
      *(_OWORD *)&v87[16] = v17;
      v95 = v5;
      return TimelineClipProperties.createClip()();
    }
    swift_retain();
    v46 = TimelineDefinition.resource.getter();
    swift_release();
    return (uint64_t)v46;
  }
}

_QWORD *FromToByAnimation.createResource()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, __n128);
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  void (*v34)(uint64_t);
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _BYTE v42[464];
  _BYTE v43[464];
  _BYTE v44[464];
  _BYTE v45[464];
  _BYTE v46[464];

  MEMORY[0x24BDAC7A8](a1);
  v37 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v38 = (char *)&v36 - v4;
  MEMORY[0x24BDAC7A8](v5);
  v39 = (char *)&v36 - v6;
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v36 - v8;
  MEMORY[0x24BDAC7A8](v9);
  v41 = (char *)&v36 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v36 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v36 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v36 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v36 - v21;
  v24 = MEMORY[0x24BDAC7A8](v23);
  v28 = v27;
  v29 = *(void (**)(char *, __n128))(v25 + 16);
  v29((char *)&v36 - v26, v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Float>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x130uLL);
    outlined release of FromToByAnimation<Float>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x130uLL);
    memcpy(v42, v43, 0x130uLL);
    v30 = FromToByAnimation<>.createResource()();
    outlined release of FromToByAnimation<Float>((uint64_t)v45);
    return v30;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v19, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Double>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x140uLL);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x140uLL);
    memcpy(v42, v43, 0x140uLL);
    v31 = FromToByAnimation<>.createResource()();
LABEL_7:
    v30 = v31;
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v45);
    return v30;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v16, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD2<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x140uLL);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x140uLL);
    memcpy(v42, v43, 0x140uLL);
    v31 = FromToByAnimation<>.createResource()();
    goto LABEL_7;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v13, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD3<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x170uLL);
    memcpy(v42, v43, 0x170uLL);
    v32 = FromToByAnimation<>.createResource()();
LABEL_14:
    v30 = v32;
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v45);
    return v30;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v41, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<SIMD4<Float>>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x170uLL);
    memcpy(v42, v43, 0x170uLL);
    v32 = FromToByAnimation<>.createResource()();
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v40, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<simd_quatf>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, 0x170uLL);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, 0x170uLL);
    memcpy(v42, v43, 0x170uLL);
    v32 = FromToByAnimation<>.createResource()();
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v29)(v39, v28, a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<Transform>);
  if (swift_dynamicCast())
  {
    memcpy(v44, v46, sizeof(v44));
    outlined release of FromToByAnimation<Transform>((uint64_t)v44);
    ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
    swift_dynamicCast();
    memcpy(v45, v43, sizeof(v45));
    memcpy(v42, v43, sizeof(v42));
    v30 = FromToByAnimation<>.createResource()();
    outlined release of FromToByAnimation<Transform>((uint64_t)v45);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v29)(v38, v28, a1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<JointTransforms>);
    if (swift_dynamicCast())
    {
      memcpy(v44, v46, 0x130uLL);
      v34 = (void (*)(uint64_t))outlined consume of JointTransforms??;
      outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v44, (void (*)(uint64_t))outlined consume of JointTransforms??);
      ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
      swift_dynamicCast();
      memcpy(v45, v43, 0x130uLL);
      memcpy(v42, v43, 0x130uLL);
      v35 = FromToByAnimation<>.createResource()();
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v29)(v37, v28, a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FromToByAnimation<BlendShapeWeights>);
      if ((swift_dynamicCast() & 1) == 0)
        return 0;
      memcpy(v44, v46, 0x130uLL);
      v34 = (void (*)(uint64_t))outlined consume of BlendShapeWeights??;
      outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v44, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
      ((void (*)(char *, uint64_t, uint64_t))v29)(v22, v28, a1);
      swift_dynamicCast();
      memcpy(v45, v43, 0x130uLL);
      memcpy(v42, v43, 0x130uLL);
      v35 = FromToByAnimation<>.createResource()();
    }
    v30 = v35;
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)v45, v34);
  }
  return v30;
}

_QWORD *FromToByAnimation<>.createResource()()
{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _DWORD *FloatFromValue;
  unint64_t v6;
  _DWORD *FloatToValue;
  unint64_t v8;
  _DWORD *FloatByValue;
  unint64_t v10;
  Swift::OpaquePointer v11;
  _BYTE v13[8];
  _BYTE v14[8];
  _BYTE v15[9];
  char v16;
  _BYTE v17[2];
  _BYTE v18[8];
  _BYTE v19[5];
  _BYTE v20[2];
  char v21;
  _BYTE v22[8];
  _BYTE v23[8];
  _BYTE v24[8];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD __dst[19];
  _BYTE v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  _BYTE v52[16];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  v40 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v40;
    outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v15, &demangling cache variable for type metadata for Float??), outlined init with take of Transform?((uint64_t)v15, (uint64_t)v22, &demangling cache variable for type metadata for Float??), v22[5] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v14, &demangling cache variable for type metadata for Float??), outlined init with take of Transform?((uint64_t)v14, (uint64_t)v23, &demangling cache variable for type metadata for Float??), v23[5] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14],
          (uint64_t)v13,
          &demangling cache variable for type metadata for Float??),
        outlined init with take of Transform?((uint64_t)v13, (uint64_t)v24, &demangling cache variable for type metadata for Float??), (v24[5] & 1) == 0))
  {
LABEL_14:
    v1 = v40;
    if (*(_QWORD *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<Float>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByFloatAnimation();
    swift_release();
    if ((BYTE5(__dst[13]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_24;
      outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
      FloatFromValue = (_DWORD *)RETimelineDefinitionGetFloatFromValue();
      if (!FloatFromValue)
      {
        outlined release of FromToByAnimation<Float>((uint64_t)__dst);
LABEL_24:
        RETimelineDefinitionSetFloatFromValue();
        if ((BYTE13(__dst[13]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_31;
          outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
          FloatToValue = (_DWORD *)RETimelineDefinitionGetFloatToValue();
          if (!FloatToValue)
          {
            outlined release of FromToByAnimation<Float>((uint64_t)__dst);
LABEL_31:
            RETimelineDefinitionSetFloatToValue();
            if ((BYTE5(__dst[14]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<Float>((uint64_t)__dst);
                FloatByValue = (_DWORD *)RETimelineDefinitionGetFloatByValue();
                if (!FloatByValue)
                {
                  outlined release of FromToByAnimation<Float>((uint64_t)__dst);
                  goto LABEL_38;
                }
                LODWORD(v10) = *FloatByValue;
                outlined release of FromToByAnimation<Float>((uint64_t)__dst);
                goto LABEL_36;
              }
            }
            else
            {
              v10 = LODWORD(__dst[14]) | ((unint64_t)BYTE4(__dst[14]) << 32);
              if ((v10 & 0x100000000) == 0)
LABEL_36:
                LODWORD(v25) = v10;
            }
LABEL_38:
            RETimelineDefinitionSetFloatByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          LODWORD(v8) = *FloatToValue;
          outlined release of FromToByAnimation<Float>((uint64_t)__dst);
        }
        else
        {
          v8 = DWORD2(__dst[13]) | ((unint64_t)BYTE12(__dst[13]) << 32);
          if ((v8 & 0x100000000) != 0)
            goto LABEL_31;
        }
        LODWORD(v25) = v8;
        goto LABEL_31;
      }
      LODWORD(v6) = *FloatFromValue;
      outlined release of FromToByAnimation<Float>((uint64_t)__dst);
    }
    else
    {
      v6 = LODWORD(__dst[13]) | ((unint64_t)BYTE4(__dst[13]) << 32);
      if ((v6 & 0x100000000) != 0)
        goto LABEL_24;
    }
    LODWORD(v25) = v6;
    goto LABEL_24;
  }
  v48 = __dst[6];
  v49 = __dst[7];
  v50 = __dst[8];
  v44 = __dst[2];
  v45 = __dst[3];
  v46 = __dst[4];
  v47 = __dst[5];
  v42 = __dst[0];
  v43 = __dst[1];
  v31 = __dst[6];
  v32 = __dst[7];
  v33 = __dst[8];
  v27 = __dst[2];
  v28 = __dst[3];
  v29 = __dst[4];
  v30 = __dst[5];
  v2 = *(_QWORD *)&__dst[9];
  v25 = __dst[0];
  v26 = __dst[1];
  v34 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v31 = v48;
  v32 = v49;
  v33 = v50;
  v27 = v44;
  v28 = v45;
  v29 = v46;
  v30 = v47;
  v25 = v42;
  v26 = v43;
  v34 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v31 = v48;
    v32 = v49;
    v33 = v50;
    v27 = v44;
    v28 = v45;
    v29 = v46;
    v30 = v47;
    v25 = v42;
    v26 = v43;
    v34 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *DoubleFromValue;
  uint64_t v6;
  uint64_t *DoubleToValue;
  uint64_t v8;
  uint64_t *DoubleByValue;
  uint64_t v10;
  Swift::OpaquePointer v11;
  char v13;
  _BYTE v14[2];
  _BYTE v15[8];
  _BYTE v16[5];
  _BYTE v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD __dst[20];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[24];
  _BYTE v49[16];
  _BYTE v50[16];
  _BYTE v51[16];
  _BYTE v52[16];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v34 = *(_OWORD *)((char *)&__dst[9] + 8);
  v35 = *(_OWORD *)((char *)&__dst[10] + 8);
  v36 = *(_OWORD *)((char *)&__dst[11] + 8);
  v37 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v37;
    outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v34);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 4, (uint64_t)v15, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for Int32?);
  if (v16[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 9, (uint64_t)v14, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v17[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 11, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?);
  if (v18 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[16], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v49, &demangling cache variable for type metadata for Double?);
  if (v49[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v32, &demangling cache variable for type metadata for Double??), outlined init with take of Transform?((uint64_t)v32, (uint64_t)v50, &demangling cache variable for type metadata for Double??), v50[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v31, &demangling cache variable for type metadata for Double??), outlined init with take of Transform?((uint64_t)v31, (uint64_t)v51, &demangling cache variable for type metadata for Double??), v51[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15],
          (uint64_t)v30,
          &demangling cache variable for type metadata for Double??),
        outlined init with take of Transform?((uint64_t)v30, (uint64_t)v52, &demangling cache variable for type metadata for Double??), (v52[9] & 1) == 0))
  {
LABEL_14:
    v1 = v37;
    if (*(_QWORD *)(v37 + 16))
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v34);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByDoubleAnimation();
    swift_release();
    if ((BYTE9(__dst[13]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_25;
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      DoubleFromValue = (uint64_t *)RETimelineDefinitionGetDoubleFromValue();
      if (!DoubleFromValue)
      {
        outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetDoubleFromValue();
        if ((BYTE9(__dst[14]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_33;
          outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
          DoubleToValue = (uint64_t *)RETimelineDefinitionGetDoubleToValue();
          if (!DoubleToValue)
          {
            outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetDoubleToValue();
            if ((BYTE9(__dst[15]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                DoubleByValue = (uint64_t *)RETimelineDefinitionGetDoubleByValue();
                if (!DoubleByValue)
                {
                  outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                  goto LABEL_41;
                }
                v10 = *DoubleByValue;
                outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                goto LABEL_39;
              }
            }
            else if ((BYTE8(__dst[15]) & 1) == 0)
            {
              v10 = *(_QWORD *)&__dst[15];
LABEL_39:
              *(_QWORD *)&v19 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetDoubleByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          v8 = *DoubleToValue;
          outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
        }
        else
        {
          if ((BYTE8(__dst[14]) & 1) != 0)
            goto LABEL_33;
          v8 = *(_QWORD *)&__dst[14];
        }
        *(_QWORD *)&v19 = v8;
        goto LABEL_33;
      }
      v6 = *DoubleFromValue;
      outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    }
    else
    {
      if ((BYTE8(__dst[13]) & 1) != 0)
        goto LABEL_25;
      v6 = *(_QWORD *)&__dst[13];
    }
    *(_QWORD *)&v19 = v6;
    goto LABEL_25;
  }
  v45 = __dst[6];
  v46 = __dst[7];
  v47 = __dst[8];
  v41 = __dst[2];
  v42 = __dst[3];
  v43 = __dst[4];
  v44 = __dst[5];
  v39 = __dst[0];
  v40 = __dst[1];
  v24 = __dst[5];
  v25 = __dst[6];
  v26 = __dst[7];
  v27 = __dst[8];
  v21 = __dst[2];
  v22 = __dst[3];
  v23 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v19 = __dst[0];
  v20 = __dst[1];
  v28 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v26 = v46;
  v27 = v47;
  v21 = v41;
  v22 = v42;
  v24 = v44;
  v25 = v45;
  v23 = v43;
  v19 = v39;
  v20 = v40;
  v28 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v26 = v46;
    v27 = v47;
    v21 = v41;
    v22 = v42;
    v24 = v44;
    v25 = v45;
    v23 = v43;
    v19 = v39;
    v20 = v40;
    v28 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *Float2FromValue;
  uint64_t v6;
  uint64_t *Float2ToValue;
  uint64_t v8;
  uint64_t *Float2ByValue;
  uint64_t v10;
  Swift::OpaquePointer v11;
  char v13;
  _BYTE v14[2];
  _BYTE v15[8];
  _BYTE v16[5];
  _BYTE v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD __dst[20];
  _BYTE v30[16];
  _BYTE v31[16];
  _BYTE v32[16];
  _BYTE v33[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _BYTE v38[24];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[24];
  _BYTE v49[16];
  _BYTE v50[16];
  _BYTE v51[16];
  _BYTE v52[16];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v34 = *(_OWORD *)((char *)&__dst[9] + 8);
  v35 = *(_OWORD *)((char *)&__dst[10] + 8);
  v36 = *(_OWORD *)((char *)&__dst[11] + 8);
  v37 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v37;
    outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v34);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v35, (uint64_t)v38, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v38, (uint64_t)v48, &demangling cache variable for type metadata for BindTarget?);
  if (v48[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 4, (uint64_t)v15, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)v16, &demangling cache variable for type metadata for Int32?);
  if (v16[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 9, (uint64_t)v14, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v14, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v17[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v36 + 11, (uint64_t)&v13, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)&v18, &demangling cache variable for type metadata for Bool?);
  if (v18 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[16], (uint64_t)v33, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v33, (uint64_t)v49, &demangling cache variable for type metadata for Double?);
  if (v49[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v32, &demangling cache variable for type metadata for SIMD2<Float>??), outlined init with take of Transform?((uint64_t)v32, (uint64_t)v50, &demangling cache variable for type metadata for SIMD2<Float>??), v50[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v31, &demangling cache variable for type metadata for SIMD2<Float>??), outlined init with take of Transform?((uint64_t)v31, (uint64_t)v51, &demangling cache variable for type metadata for SIMD2<Float>??), v51[9] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15],
          (uint64_t)v30,
          &demangling cache variable for type metadata for SIMD2<Float>??),
        outlined init with take of Transform?((uint64_t)v30, (uint64_t)v52, &demangling cache variable for type metadata for SIMD2<Float>??), (v52[9] & 1) == 0))
  {
LABEL_14:
    v1 = v37;
    if (*(_QWORD *)(v37 + 16))
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v34);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v34);
    outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByFloat2Animation();
    swift_release();
    if ((BYTE9(__dst[13]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_25;
      outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
      Float2FromValue = (uint64_t *)RETimelineDefinitionGetFloat2FromValue();
      if (!Float2FromValue)
      {
        outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat2FromValue();
        if ((BYTE9(__dst[14]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_33;
          outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
          Float2ToValue = (uint64_t *)RETimelineDefinitionGetFloat2ToValue();
          if (!Float2ToValue)
          {
            outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat2ToValue();
            if ((BYTE9(__dst[15]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                Float2ByValue = (uint64_t *)RETimelineDefinitionGetFloat2ByValue();
                if (!Float2ByValue)
                {
                  outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                  goto LABEL_41;
                }
                v10 = *Float2ByValue;
                outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
                goto LABEL_39;
              }
            }
            else if ((BYTE8(__dst[15]) & 1) == 0)
            {
              v10 = *(_QWORD *)&__dst[15];
LABEL_39:
              *(_QWORD *)&v19 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat2ByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          v8 = *Float2ToValue;
          outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
        }
        else
        {
          if ((BYTE8(__dst[14]) & 1) != 0)
            goto LABEL_33;
          v8 = *(_QWORD *)&__dst[14];
        }
        *(_QWORD *)&v19 = v8;
        goto LABEL_33;
      }
      v6 = *Float2FromValue;
      outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)__dst);
    }
    else
    {
      if ((BYTE8(__dst[13]) & 1) != 0)
        goto LABEL_25;
      v6 = *(_QWORD *)&__dst[13];
    }
    *(_QWORD *)&v19 = v6;
    goto LABEL_25;
  }
  v45 = __dst[6];
  v46 = __dst[7];
  v47 = __dst[8];
  v41 = __dst[2];
  v42 = __dst[3];
  v43 = __dst[4];
  v44 = __dst[5];
  v39 = __dst[0];
  v40 = __dst[1];
  v24 = __dst[5];
  v25 = __dst[6];
  v26 = __dst[7];
  v27 = __dst[8];
  v21 = __dst[2];
  v22 = __dst[3];
  v23 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v19 = __dst[0];
  v20 = __dst[1];
  v28 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v26 = v46;
  v27 = v47;
  v21 = v41;
  v22 = v42;
  v24 = v44;
  v25 = v45;
  v23 = v43;
  v19 = v39;
  v20 = v40;
  v28 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v26 = v46;
    v27 = v47;
    v21 = v41;
    v22 = v42;
    v24 = v44;
    v25 = v45;
    v23 = v43;
    v19 = v39;
    v20 = v40;
    v28 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 *Float3FromValue;
  __int128 v6;
  __int128 *Float3ToValue;
  __int128 v8;
  __int128 *Float3ByValue;
  __int128 v10;
  Swift::OpaquePointer v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[2];
  _BYTE v18[8];
  _BYTE v19[5];
  _BYTE v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD __dst[23];
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  _BYTE v52[16];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[24];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  v40 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for SIMD3<Float>??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for SIMD3<Float>??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for SIMD3<Float>??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for SIMD3<Float>??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for SIMD3<Float>??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for SIMD3<Float>??), (v55[17] & 1) == 0))
  {
LABEL_14:
    v1 = v40;
    if (*(_QWORD *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByFloat3Animation();
    swift_release();
    if ((BYTE1(__dst[14]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_25;
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      Float3FromValue = (__int128 *)RETimelineDefinitionGetFloat3FromValue();
      if (!Float3FromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat3FromValue();
        if ((BYTE1(__dst[16]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_33;
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          Float3ToValue = (__int128 *)RETimelineDefinitionGetFloat3ToValue();
          if (!Float3ToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat3ToValue();
            if ((BYTE1(__dst[18]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                Float3ByValue = (__int128 *)RETimelineDefinitionGetFloat3ByValue();
                if (!Float3ByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                v15 = *Float3ByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              v10 = __dst[17];
LABEL_39:
              v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat3ByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          v14 = *Float3ToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          v8 = v14;
        }
        else
        {
          if ((__dst[16] & 1) != 0)
            goto LABEL_33;
          v8 = __dst[15];
        }
        v22 = v8;
        goto LABEL_33;
      }
      v13 = *Float3FromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v6 = v13;
    }
    else
    {
      if ((__dst[14] & 1) != 0)
        goto LABEL_25;
      v6 = __dst[13];
    }
    v22 = v6;
    goto LABEL_25;
  }
  v48 = __dst[6];
  v49 = __dst[7];
  v50 = __dst[8];
  v44 = __dst[2];
  v45 = __dst[3];
  v46 = __dst[4];
  v47 = __dst[5];
  v42 = __dst[0];
  v43 = __dst[1];
  v27 = __dst[5];
  v28 = __dst[6];
  v29 = __dst[7];
  v30 = __dst[8];
  v24 = __dst[2];
  v25 = __dst[3];
  v26 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v22 = __dst[0];
  v23 = __dst[1];
  v31 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v29 = v49;
  v30 = v50;
  v24 = v44;
  v25 = v45;
  v27 = v47;
  v28 = v48;
  v26 = v46;
  v22 = v42;
  v23 = v43;
  v31 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v29 = v49;
    v30 = v50;
    v24 = v44;
    v25 = v45;
    v27 = v47;
    v28 = v48;
    v26 = v46;
    v22 = v42;
    v23 = v43;
    v31 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 *Float4FromValue;
  __int128 v6;
  __int128 *Float4ToValue;
  __int128 v8;
  __int128 *Float4ByValue;
  __int128 v10;
  Swift::OpaquePointer v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[2];
  _BYTE v18[8];
  _BYTE v19[5];
  _BYTE v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD __dst[23];
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  _BYTE v52[16];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[24];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  v40 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for SIMD4<Float>??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for SIMD4<Float>??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for SIMD4<Float>??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for SIMD4<Float>??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for SIMD4<Float>??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for SIMD4<Float>??), (v55[17] & 1) == 0))
  {
LABEL_14:
    v1 = v40;
    if (*(_QWORD *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByFloat4Animation();
    swift_release();
    if ((BYTE1(__dst[14]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_25;
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      Float4FromValue = (__int128 *)RETimelineDefinitionGetFloat4FromValue();
      if (!Float4FromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetFloat4FromValue();
        if ((BYTE1(__dst[16]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_33;
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          Float4ToValue = (__int128 *)RETimelineDefinitionGetFloat4ToValue();
          if (!Float4ToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetFloat4ToValue();
            if ((BYTE1(__dst[18]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                Float4ByValue = (__int128 *)RETimelineDefinitionGetFloat4ByValue();
                if (!Float4ByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                v15 = *Float4ByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              v10 = __dst[17];
LABEL_39:
              v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetFloat4ByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          v14 = *Float4ToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          v8 = v14;
        }
        else
        {
          if ((__dst[16] & 1) != 0)
            goto LABEL_33;
          v8 = __dst[15];
        }
        v22 = v8;
        goto LABEL_33;
      }
      v13 = *Float4FromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v6 = v13;
    }
    else
    {
      if ((__dst[14] & 1) != 0)
        goto LABEL_25;
      v6 = __dst[13];
    }
    v22 = v6;
    goto LABEL_25;
  }
  v48 = __dst[6];
  v49 = __dst[7];
  v50 = __dst[8];
  v44 = __dst[2];
  v45 = __dst[3];
  v46 = __dst[4];
  v47 = __dst[5];
  v42 = __dst[0];
  v43 = __dst[1];
  v27 = __dst[5];
  v28 = __dst[6];
  v29 = __dst[7];
  v30 = __dst[8];
  v24 = __dst[2];
  v25 = __dst[3];
  v26 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v22 = __dst[0];
  v23 = __dst[1];
  v31 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v29 = v49;
  v30 = v50;
  v24 = v44;
  v25 = v45;
  v27 = v47;
  v28 = v48;
  v26 = v46;
  v22 = v42;
  v23 = v43;
  v31 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v29 = v49;
    v30 = v50;
    v24 = v44;
    v25 = v45;
    v27 = v47;
    v28 = v48;
    v26 = v46;
    v22 = v42;
    v23 = v43;
    v31 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 *QuaternionFromValue;
  __int128 v6;
  __int128 *QuaternionToValue;
  __int128 v8;
  __int128 *QuaternionByValue;
  __int128 v10;
  Swift::OpaquePointer v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[2];
  _BYTE v18[8];
  _BYTE v19[5];
  _BYTE v20[2];
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD __dst[23];
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];
  _BYTE v36[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _BYTE v41[24];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[24];
  _BYTE v52[16];
  _BYTE v53[32];
  _BYTE v54[32];
  _BYTE v55[24];
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v37 = *(_OWORD *)((char *)&__dst[9] + 8);
  v38 = *(_OWORD *)((char *)&__dst[10] + 8);
  v39 = *(_OWORD *)((char *)&__dst[11] + 8);
  v40 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v40;
    outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v37);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v38, (uint64_t)v41, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v41, (uint64_t)v51, &demangling cache variable for type metadata for BindTarget?);
  if (v51[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 4, (uint64_t)v18, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v18, (uint64_t)v19, &demangling cache variable for type metadata for Int32?);
  if (v19[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 9, (uint64_t)v17, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v17, (uint64_t)v20, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v20[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v39 + 11, (uint64_t)&v16, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v16, (uint64_t)&v21, &demangling cache variable for type metadata for Bool?);
  if (v21 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[18] + 8, (uint64_t)v36, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)v52, &demangling cache variable for type metadata for Double?);
  if (v52[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v35, &demangling cache variable for type metadata for simd_quatf??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)v53, &demangling cache variable for type metadata for simd_quatf??), v53[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[15], (uint64_t)v34, &demangling cache variable for type metadata for simd_quatf??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)v54, &demangling cache variable for type metadata for simd_quatf??), v54[17] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17],
          (uint64_t)v33,
          &demangling cache variable for type metadata for simd_quatf??),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)v55, &demangling cache variable for type metadata for simd_quatf??), (v55[17] & 1) == 0))
  {
LABEL_14:
    v1 = v40;
    if (*(_QWORD *)(v40 + 16))
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v37);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v37);
    outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToByQuaternionAnimation();
    swift_release();
    if ((BYTE1(__dst[14]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_25;
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      QuaternionFromValue = (__int128 *)RETimelineDefinitionGetQuaternionFromValue();
      if (!QuaternionFromValue)
      {
        outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_25:
        RETimelineDefinitionSetQuaternionFromValue();
        if ((BYTE1(__dst[16]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_33;
          outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          QuaternionToValue = (__int128 *)RETimelineDefinitionGetQuaternionToValue();
          if (!QuaternionToValue)
          {
            outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
LABEL_33:
            RETimelineDefinitionSetQuaternionToValue();
            if ((BYTE1(__dst[18]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                QuaternionByValue = (__int128 *)RETimelineDefinitionGetQuaternionByValue();
                if (!QuaternionByValue)
                {
                  outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                  goto LABEL_41;
                }
                v15 = *QuaternionByValue;
                outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
                v10 = v15;
                goto LABEL_39;
              }
            }
            else if ((__dst[18] & 1) == 0)
            {
              v10 = __dst[17];
LABEL_39:
              v22 = v10;
            }
LABEL_41:
            RETimelineDefinitionSetQuaternionByValue();
            v11._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v11);
            RERelease();
            return (_QWORD *)v3;
          }
          v14 = *QuaternionToValue;
          outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
          v8 = v14;
        }
        else
        {
          if ((__dst[16] & 1) != 0)
            goto LABEL_33;
          v8 = __dst[15];
        }
        v22 = v8;
        goto LABEL_33;
      }
      v13 = *QuaternionFromValue;
      outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v6 = v13;
    }
    else
    {
      if ((__dst[14] & 1) != 0)
        goto LABEL_25;
      v6 = __dst[13];
    }
    v22 = v6;
    goto LABEL_25;
  }
  v48 = __dst[6];
  v49 = __dst[7];
  v50 = __dst[8];
  v44 = __dst[2];
  v45 = __dst[3];
  v46 = __dst[4];
  v47 = __dst[5];
  v42 = __dst[0];
  v43 = __dst[1];
  v27 = __dst[5];
  v28 = __dst[6];
  v29 = __dst[7];
  v30 = __dst[8];
  v24 = __dst[2];
  v25 = __dst[3];
  v26 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v22 = __dst[0];
  v23 = __dst[1];
  v31 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v29 = v49;
  v30 = v50;
  v24 = v44;
  v25 = v45;
  v27 = v47;
  v28 = v48;
  v26 = v46;
  v22 = v42;
  v23 = v43;
  v31 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v29 = v49;
    v30 = v50;
    v24 = v44;
    v25 = v45;
    v27 = v47;
    v28 = v48;
    v26 = v46;
    v22 = v42;
    v23 = v43;
    v31 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  __int128 *SRTFromValue;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 *SRTToValue;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *SRTByValue;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  Swift::OpaquePointer v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char v28;
  _BYTE v29[2];
  _BYTE v30[8];
  _BYTE v31[5];
  _BYTE v32[2];
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD __dst[29];
  _BYTE v45[64];
  _BYTE v46[64];
  _BYTE v47[64];
  _BYTE v48[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[24];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  _BYTE v64[16];
  _BYTE v65[64];
  _BYTE v66[64];
  _BYTE v67[56];
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  memcpy(__dst, v0, sizeof(__dst));
  v49 = *(_OWORD *)((char *)&__dst[9] + 8);
  v50 = *(_OWORD *)((char *)&__dst[10] + 8);
  v51 = *(_OWORD *)((char *)&__dst[11] + 8);
  v52 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v52;
    outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
    outlined retain of TimelineBaseProperties((uint64_t)&v49);
    goto LABEL_17;
  }
  outlined init with take of Transform?((uint64_t)&v50, (uint64_t)v53, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v53, (uint64_t)v63, &demangling cache variable for type metadata for BindTarget?);
  if (v63[16] != 255)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v51 + 4, (uint64_t)v30, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v31, &demangling cache variable for type metadata for Int32?);
  if (v31[4] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v51 + 9, (uint64_t)v29, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v32, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v32[1] != 1)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&v51 + 11, (uint64_t)&v28, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v28, (uint64_t)&v33, &demangling cache variable for type metadata for Bool?);
  if (v33 != 2)
    goto LABEL_14;
  outlined init with take of Transform?((uint64_t)&__dst[24] + 8, (uint64_t)v48, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v48, (uint64_t)v64, &demangling cache variable for type metadata for Double?);
  if (v64[8] != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v47, &demangling cache variable for type metadata for Transform??), outlined init with take of Transform?((uint64_t)v47, (uint64_t)v65, &demangling cache variable for type metadata for Transform??), v65[49] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17], (uint64_t)v46, &demangling cache variable for type metadata for Transform??), outlined init with take of Transform?((uint64_t)v46, (uint64_t)v66, &demangling cache variable for type metadata for Transform??), v66[49] != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[21],
          (uint64_t)v45,
          &demangling cache variable for type metadata for Transform??),
        outlined init with take of Transform?((uint64_t)v45, (uint64_t)v67, &demangling cache variable for type metadata for Transform??), (v67[49] & 1) == 0))
  {
LABEL_14:
    v1 = v52;
    if (*(_QWORD *)(v52 + 16))
    {
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v49);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      outlined retain of TimelineBaseProperties((uint64_t)&v49);
    }
LABEL_17:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v49);
    outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = (void *)RETimelineDefinitionCreateFromToBySRTAnimation();
    swift_release();
    if ((BYTE1(__dst[16]) & 1) != 0)
    {
      if (!*(_QWORD *)(v1 + 16))
        goto LABEL_27;
      outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
      SRTFromValue = (__int128 *)RETimelineDefinitionGetSRTFromValue();
      if (!SRTFromValue)
      {
        outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
LABEL_27:
        RETimelineDefinitionSetSRTFromValue();
        if ((BYTE1(__dst[20]) & 1) != 0)
        {
          if (!*(_QWORD *)(v1 + 16))
            goto LABEL_37;
          outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
          SRTToValue = (__int128 *)RETimelineDefinitionGetSRTToValue();
          if (!SRTToValue)
          {
            outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
LABEL_37:
            RETimelineDefinitionSetSRTToValue();
            if ((BYTE1(__dst[24]) & 1) != 0)
            {
              if (*(_QWORD *)(v1 + 16))
              {
                outlined retain of FromToByAnimation<Transform>((uint64_t)__dst);
                SRTByValue = (__int128 *)RETimelineDefinitionGetSRTByValue();
                if (!SRTByValue)
                {
                  outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
                  goto LABEL_47;
                }
                v24 = SRTByValue[1];
                v27 = *SRTByValue;
                v21 = SRTByValue[2];
                if (one-time initialization token for identity != -1)
                  swift_once();
                outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
                v15 = v24;
                v14 = v27;
                v16 = v21;
                goto LABEL_45;
              }
            }
            else if ((__dst[24] & 1) == 0)
            {
              v14 = __dst[21];
              v15 = __dst[22];
              v16 = __dst[23];
LABEL_45:
              v34 = v14;
              v35 = v15;
              v36 = v16;
            }
LABEL_47:
            RETimelineDefinitionSetSRTByValue();
            v17._rawValue = v4;
            v3 = specialized FromToByAnimation.createResource(timelineDefinition:)(v17);
            RERelease();
            return (_QWORD *)v3;
          }
          v23 = SRTToValue[1];
          v26 = *SRTToValue;
          v20 = SRTToValue[2];
          if (one-time initialization token for identity != -1)
            swift_once();
          outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
          v11 = v23;
          v10 = v26;
          v12 = v20;
        }
        else
        {
          if ((__dst[20] & 1) != 0)
            goto LABEL_37;
          v10 = __dst[17];
          v11 = __dst[18];
          v12 = __dst[19];
        }
        v34 = v10;
        v35 = v11;
        v36 = v12;
        goto LABEL_37;
      }
      v22 = SRTFromValue[1];
      v25 = *SRTFromValue;
      v19 = SRTFromValue[2];
      if (one-time initialization token for identity != -1)
        swift_once();
      outlined release of FromToByAnimation<Transform>((uint64_t)__dst);
      v7 = v22;
      v6 = v25;
      v8 = v19;
    }
    else
    {
      if ((__dst[16] & 1) != 0)
        goto LABEL_27;
      v6 = __dst[13];
      v7 = __dst[14];
      v8 = __dst[15];
    }
    v34 = v6;
    v35 = v7;
    v36 = v8;
    goto LABEL_27;
  }
  v60 = __dst[6];
  v61 = __dst[7];
  v62 = __dst[8];
  v56 = __dst[2];
  v57 = __dst[3];
  v58 = __dst[4];
  v59 = __dst[5];
  v54 = __dst[0];
  v55 = __dst[1];
  v39 = __dst[5];
  v40 = __dst[6];
  v41 = __dst[7];
  v42 = __dst[8];
  v36 = __dst[2];
  v37 = __dst[3];
  v38 = __dst[4];
  v2 = *(_QWORD *)&__dst[9];
  v34 = __dst[0];
  v35 = __dst[1];
  v43 = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v41 = v61;
  v42 = v62;
  v36 = v56;
  v37 = v57;
  v39 = v59;
  v40 = v60;
  v38 = v58;
  v34 = v54;
  v35 = v55;
  v43 = v2;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v41 = v61;
    v42 = v62;
    v36 = v56;
    v37 = v57;
    v39 = v59;
    v40 = v60;
    v38 = v58;
    v34 = v54;
    v35 = v55;
    v43 = v2;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v3 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v3;
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t SkeletalPoseFromJointCount;
  uint64_t v5;
  char *SkeletalPoseFromValue;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t SkeletalPoseToJointCount;
  uint64_t v13;
  char *SkeletalPoseToValue;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t SkeletalPoseByJointCount;
  uint64_t v21;
  char *SkeletalPoseByValue;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v30;
  _OWORD v31[19];
  _OWORD __dst[19];
  _BYTE v33[8];
  _BYTE v34[8];
  _BYTE v35[8];
  _BYTE v36[8];
  _BYTE v37[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  _BYTE v43[2];
  _BYTE v44[8];
  _BYTE v45[24];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  _BYTE v56[5];
  _BYTE v57[2];
  char v58;
  _BYTE v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  memcpy(__dst, v0, sizeof(__dst));
  v38 = *(_OWORD *)((char *)&__dst[9] + 8);
  v39 = *(_OWORD *)((char *)&__dst[10] + 8);
  v40 = *(_OWORD *)((char *)&__dst[11] + 8);
  v41 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v41;
    outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
    outlined retain of TimelineBaseProperties((uint64_t)&v38);
LABEL_15:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v38);
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = (void *)RETimelineDefinitionCreateFromToBySkeletalPoseAnimation();
    swift_release();
    v3 = *(_QWORD *)&__dst[13];
    if (*(_QWORD *)&__dst[13])
    {
      if (*(_QWORD *)&__dst[13] != 1)
        goto LABEL_21;
      if (*(_QWORD *)(v1 + 16))
      {
        outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
        SkeletalPoseFromJointCount = RETimelineDefinitionGetSkeletalPoseFromJointCount();
        if (SkeletalPoseFromJointCount)
        {
          v5 = SkeletalPoseFromJointCount;
          SkeletalPoseFromValue = (char *)RETimelineDefinitionGetSkeletalPoseFromValue();
          if (SkeletalPoseFromValue)
          {
            specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseFromValue, v5);
            outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
LABEL_21:
            outlined copy of JointTransforms??(v3);
            RETimelineDefinitionSetSkeletalPoseFromValue();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            v7 = FromToByAnimation<>.jointNames.getter();
            v8 = v7[2];
            if (v8)
            {
              v9 = 0;
              v10 = v7 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetSkeletalPoseFromJointName();
                swift_release();
                v10 += 2;
                ++v9;
              }
              while (v8 != v9);
            }
            swift_bridgeObjectRelease();
            v11 = *((_QWORD *)&__dst[13] + 1);
            if (!*((_QWORD *)&__dst[13] + 1))
            {
LABEL_39:
              RETimelineDefinitionSetSkeletalPoseToValue();
              v19 = *(_QWORD *)&__dst[14];
              if (!*(_QWORD *)&__dst[14])
                goto LABEL_50;
              goto LABEL_40;
            }
LABEL_28:
            if (v11 == 1)
            {
              if (!*(_QWORD *)(v1 + 16))
                goto LABEL_39;
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
              SkeletalPoseToJointCount = RETimelineDefinitionGetSkeletalPoseToJointCount();
              if (!SkeletalPoseToJointCount
                || (v13 = SkeletalPoseToJointCount,
                    (SkeletalPoseToValue = (char *)RETimelineDefinitionGetSkeletalPoseToValue()) == 0))
              {
                outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
                goto LABEL_39;
              }
              specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseToValue, v13);
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
            }
            outlined copy of JointTransforms??(v11);
            RETimelineDefinitionSetSkeletalPoseToValue();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            v15 = FromToByAnimation<>.jointNames.getter();
            v16 = v15[2];
            if (v16)
            {
              v17 = 0;
              v18 = v15 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetSkeletalPoseToJointName();
                swift_release();
                v18 += 2;
                ++v17;
              }
              while (v16 != v17);
            }
            swift_bridgeObjectRelease();
            v19 = *(_QWORD *)&__dst[14];
            if (!*(_QWORD *)&__dst[14])
              goto LABEL_50;
LABEL_40:
            if (v19 != 1)
            {
LABEL_45:
              outlined copy of JointTransforms??(v19);
              RETimelineDefinitionSetSkeletalPoseByValue();
              swift_bridgeObjectRelease();
              memcpy(v31, __dst, sizeof(v31));
              v23 = FromToByAnimation<>.jointNames.getter();
              v24 = v23[2];
              if (v24)
              {
                v25 = 0;
                v26 = v23 + 5;
                do
                {
                  String.utf8CString.getter();
                  RETimelineDefinitionSetSkeletalPoseByJointName();
                  swift_release();
                  v26 += 2;
                  ++v25;
                }
                while (v24 != v25);
              }
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            if (*(_QWORD *)(v1 + 16))
            {
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
              SkeletalPoseByJointCount = RETimelineDefinitionGetSkeletalPoseByJointCount();
              if (SkeletalPoseByJointCount)
              {
                v21 = SkeletalPoseByJointCount;
                SkeletalPoseByValue = (char *)RETimelineDefinitionGetSkeletalPoseByValue();
                if (SkeletalPoseByValue)
                {
                  specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseByValue, v21);
                  outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
                  goto LABEL_45;
                }
              }
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
            }
LABEL_50:
            RETimelineDefinitionSetSkeletalPoseByValue();
LABEL_51:
            v27._rawValue = v2;
            v28 = specialized FromToByAnimation.createResource(timelineDefinition:)(v27);
            RERelease();
            return (_QWORD *)v28;
          }
        }
        outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of JointTransforms??);
      }
    }
    RETimelineDefinitionSetSkeletalPoseFromValue();
    v11 = *((_QWORD *)&__dst[13] + 1);
    if (!*((_QWORD *)&__dst[13] + 1))
      goto LABEL_39;
    goto LABEL_28;
  }
  outlined init with take of Transform?((uint64_t)&v39, (uint64_t)v45, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v45, (uint64_t)v55, &demangling cache variable for type metadata for BindTarget?);
  if (v55[16] != 255)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 4, (uint64_t)v44, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v56, &demangling cache variable for type metadata for Int32?);
  if (v56[4] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 9, (uint64_t)v43, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v57, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v57[1] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 11, (uint64_t)&v42, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v42, (uint64_t)&v58, &demangling cache variable for type metadata for Bool?);
  if (v58 != 2)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v59, &demangling cache variable for type metadata for Double?);
  if (v59[8] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v36, &demangling cache variable for type metadata for JointTransforms??);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v60, &demangling cache variable for type metadata for JointTransforms??);
  if (v60 != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v35, &demangling cache variable for type metadata for JointTransforms??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v61, &demangling cache variable for type metadata for JointTransforms??), v61 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v34, &demangling cache variable for type metadata for JointTransforms??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v62, &demangling cache variable for type metadata for JointTransforms??), v62 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[17] + 8,
          (uint64_t)v33,
          &demangling cache variable for type metadata for [String]?),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?), v63))
  {
LABEL_12:
    v1 = v41;
    if (*(_QWORD *)(v41 + 16))
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of JointTransforms??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
    }
    goto LABEL_15;
  }
  v52 = __dst[6];
  v53 = __dst[7];
  v54 = __dst[8];
  v48 = __dst[2];
  v49 = __dst[3];
  v50 = __dst[4];
  v51 = __dst[5];
  v46 = __dst[0];
  v47 = __dst[1];
  v31[6] = __dst[6];
  v31[7] = __dst[7];
  v31[8] = __dst[8];
  v31[2] = __dst[2];
  v31[3] = __dst[3];
  v31[4] = __dst[4];
  v31[5] = __dst[5];
  v30 = *(_QWORD *)&__dst[9];
  v31[0] = __dst[0];
  v31[1] = __dst[1];
  *(_QWORD *)&v31[9] = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v31[6] = v52;
  v31[7] = v53;
  v31[8] = v54;
  v31[2] = v48;
  v31[3] = v49;
  v31[4] = v50;
  v31[5] = v51;
  v31[0] = v46;
  v31[1] = v47;
  *(_QWORD *)&v31[9] = v30;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v31[6] = v52;
    v31[7] = v53;
    v31[8] = v54;
    v31[2] = v48;
    v31[3] = v49;
    v31[4] = v50;
    v31[5] = v51;
    v31[0] = v46;
    v31[1] = v47;
    *(_QWORD *)&v31[9] = v30;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v28 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v28;
}

{
  const void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t BlendShapeWeightsFromWeightCount;
  uint64_t v5;
  char *BlendShapeWeightsFromValue;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t BlendShapeWeightsToWeightCount;
  uint64_t v13;
  char *BlendShapeWeightsToValue;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t BlendShapeWeightsByWeightCount;
  uint64_t v21;
  char *BlendShapeWeightsByValue;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  Swift::OpaquePointer v27;
  uint64_t v28;
  uint64_t v30;
  _OWORD v31[19];
  _OWORD __dst[19];
  _BYTE v33[8];
  _BYTE v34[8];
  _BYTE v35[8];
  _BYTE v36[8];
  _BYTE v37[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  _BYTE v43[2];
  _BYTE v44[8];
  _BYTE v45[24];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[24];
  _BYTE v56[5];
  _BYTE v57[2];
  char v58;
  _BYTE v59[16];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  memcpy(__dst, v0, sizeof(__dst));
  v38 = *(_OWORD *)((char *)&__dst[9] + 8);
  v39 = *(_OWORD *)((char *)&__dst[10] + 8);
  v40 = *(_OWORD *)((char *)&__dst[11] + 8);
  v41 = *((_QWORD *)&__dst[12] + 1);
  if (*(_QWORD *)&__dst[10])
  {
    v1 = v41;
    outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
    outlined retain of TimelineBaseProperties((uint64_t)&v38);
LABEL_15:
    swift_bridgeObjectRetain();
    outlined release of TimelineBaseProperties((uint64_t)&v38);
    outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v2 = (void *)RETimelineDefinitionCreateFromToByBlendShapeWeightsAnimation();
    swift_release();
    v3 = *(_QWORD *)&__dst[13];
    if (*(_QWORD *)&__dst[13])
    {
      if (*(_QWORD *)&__dst[13] != 1)
        goto LABEL_21;
      if (*(_QWORD *)(v1 + 16))
      {
        outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
        BlendShapeWeightsFromWeightCount = RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
        if (BlendShapeWeightsFromWeightCount)
        {
          v5 = BlendShapeWeightsFromWeightCount;
          BlendShapeWeightsFromValue = (char *)RETimelineDefinitionGetBlendShapeWeightsFromValue();
          if (BlendShapeWeightsFromValue)
          {
            specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsFromValue, v5);
            outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
LABEL_21:
            outlined copy of JointTransforms??(v3);
            RETimelineDefinitionSetBlendShapeWeightsFromValues();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            v7 = FromToByAnimation<>.weightNames.getter();
            v8 = v7[2];
            if (v8)
            {
              v9 = 0;
              v10 = v7 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetBlendShapeWeightsFromWeightName();
                swift_release();
                v10 += 2;
                ++v9;
              }
              while (v8 != v9);
            }
            swift_bridgeObjectRelease();
            v11 = *((_QWORD *)&__dst[13] + 1);
            if (!*((_QWORD *)&__dst[13] + 1))
            {
LABEL_39:
              RETimelineDefinitionSetBlendShapeWeightsToValues();
              v19 = *(_QWORD *)&__dst[14];
              if (!*(_QWORD *)&__dst[14])
                goto LABEL_50;
              goto LABEL_40;
            }
LABEL_28:
            if (v11 == 1)
            {
              if (!*(_QWORD *)(v1 + 16))
                goto LABEL_39;
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
              BlendShapeWeightsToWeightCount = RETimelineDefinitionGetBlendShapeWeightsToWeightCount();
              if (!BlendShapeWeightsToWeightCount
                || (v13 = BlendShapeWeightsToWeightCount,
                    (BlendShapeWeightsToValue = (char *)RETimelineDefinitionGetBlendShapeWeightsToValue()) == 0))
              {
                outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
                goto LABEL_39;
              }
              specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsToValue, v13);
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
            }
            outlined copy of JointTransforms??(v11);
            RETimelineDefinitionSetBlendShapeWeightsToValues();
            swift_bridgeObjectRelease();
            memcpy(v31, __dst, sizeof(v31));
            v15 = FromToByAnimation<>.weightNames.getter();
            v16 = v15[2];
            if (v16)
            {
              v17 = 0;
              v18 = v15 + 5;
              do
              {
                String.utf8CString.getter();
                RETimelineDefinitionSetBlendShapeWeightsToWeightName();
                swift_release();
                v18 += 2;
                ++v17;
              }
              while (v16 != v17);
            }
            swift_bridgeObjectRelease();
            v19 = *(_QWORD *)&__dst[14];
            if (!*(_QWORD *)&__dst[14])
              goto LABEL_50;
LABEL_40:
            if (v19 != 1)
            {
LABEL_45:
              outlined copy of JointTransforms??(v19);
              RETimelineDefinitionSetBlendShapeWeightsByValues();
              swift_bridgeObjectRelease();
              memcpy(v31, __dst, sizeof(v31));
              v23 = FromToByAnimation<>.weightNames.getter();
              v24 = v23[2];
              if (v24)
              {
                v25 = 0;
                v26 = v23 + 5;
                do
                {
                  String.utf8CString.getter();
                  RETimelineDefinitionSetBlendShapeWeightsByWeightName();
                  swift_release();
                  v26 += 2;
                  ++v25;
                }
                while (v24 != v25);
              }
              swift_bridgeObjectRelease();
              goto LABEL_51;
            }
            if (*(_QWORD *)(v1 + 16))
            {
              outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
              BlendShapeWeightsByWeightCount = RETimelineDefinitionGetBlendShapeWeightsByWeightCount();
              if (BlendShapeWeightsByWeightCount)
              {
                v21 = BlendShapeWeightsByWeightCount;
                BlendShapeWeightsByValue = (char *)RETimelineDefinitionGetBlendShapeWeightsByValue();
                if (BlendShapeWeightsByValue)
                {
                  specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsByValue, v21);
                  outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
                  goto LABEL_45;
                }
              }
              outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
            }
LABEL_50:
            RETimelineDefinitionSetBlendShapeWeightsByValues();
LABEL_51:
            v27._rawValue = v2;
            v28 = specialized FromToByAnimation.createResource(timelineDefinition:)(v27);
            RERelease();
            return (_QWORD *)v28;
          }
        }
        outlined release of FromToByAnimation<BlendShapeWeights>((uint64_t)__dst, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
      }
    }
    RETimelineDefinitionSetBlendShapeWeightsFromValues();
    v11 = *((_QWORD *)&__dst[13] + 1);
    if (!*((_QWORD *)&__dst[13] + 1))
      goto LABEL_39;
    goto LABEL_28;
  }
  outlined init with take of Transform?((uint64_t)&v39, (uint64_t)v45, &demangling cache variable for type metadata for BindTarget?);
  outlined init with take of Transform?((uint64_t)v45, (uint64_t)v55, &demangling cache variable for type metadata for BindTarget?);
  if (v55[16] != 255)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 4, (uint64_t)v44, &demangling cache variable for type metadata for Int32?);
  outlined init with take of Transform?((uint64_t)v44, (uint64_t)v56, &demangling cache variable for type metadata for Int32?);
  if (v56[4] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 9, (uint64_t)v43, &demangling cache variable for type metadata for AnimationFillMode?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v57, &demangling cache variable for type metadata for AnimationFillMode?);
  if (v57[1] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&v40 + 11, (uint64_t)&v42, &demangling cache variable for type metadata for Bool?);
  outlined init with take of Transform?((uint64_t)&v42, (uint64_t)&v58, &demangling cache variable for type metadata for Bool?);
  if (v58 != 2)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&__dst[14] + 8, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v37, (uint64_t)v59, &demangling cache variable for type metadata for Double?);
  if (v59[8] != 1)
    goto LABEL_12;
  outlined init with take of Transform?((uint64_t)&__dst[13], (uint64_t)v36, &demangling cache variable for type metadata for BlendShapeWeights??);
  outlined init with take of Transform?((uint64_t)v36, (uint64_t)&v60, &demangling cache variable for type metadata for BlendShapeWeights??);
  if (v60 != 1
    || (outlined init with take of Transform?((uint64_t)&__dst[13] + 8, (uint64_t)v35, &demangling cache variable for type metadata for BlendShapeWeights??), outlined init with take of Transform?((uint64_t)v35, (uint64_t)&v61, &demangling cache variable for type metadata for BlendShapeWeights??), v61 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[14], (uint64_t)v34, &demangling cache variable for type metadata for BlendShapeWeights??), outlined init with take of Transform?((uint64_t)v34, (uint64_t)&v62, &demangling cache variable for type metadata for BlendShapeWeights??), v62 != 1)|| (outlined init with take of Transform?((uint64_t)&__dst[18] + 8,
          (uint64_t)v33,
          &demangling cache variable for type metadata for [String]?),
        outlined init with take of Transform?((uint64_t)v33, (uint64_t)&v63, &demangling cache variable for type metadata for [String]?), v63))
  {
LABEL_12:
    v1 = v41;
    if (*(_QWORD *)(v41 + 16))
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
      RETimelineDefinitionGetName();
      String.init(cString:)();
    }
    else
    {
      outlined retain of FromToByAnimation<JointTransforms>((uint64_t)__dst, (void (*)(uint64_t))outlined copy of BlendShapeWeights??);
      outlined retain of TimelineBaseProperties((uint64_t)&v38);
    }
    goto LABEL_15;
  }
  v52 = __dst[6];
  v53 = __dst[7];
  v54 = __dst[8];
  v48 = __dst[2];
  v49 = __dst[3];
  v50 = __dst[4];
  v51 = __dst[5];
  v46 = __dst[0];
  v47 = __dst[1];
  v31[6] = __dst[6];
  v31[7] = __dst[7];
  v31[8] = __dst[8];
  v31[2] = __dst[2];
  v31[3] = __dst[3];
  v31[4] = __dst[4];
  v31[5] = __dst[5];
  v30 = *(_QWORD *)&__dst[9];
  v31[0] = __dst[0];
  v31[1] = __dst[1];
  *(_QWORD *)&v31[9] = *(_QWORD *)&__dst[9];
  if (!TimelineClipProperties.isClipped.getter())
    return TimelineDefinition.resource.getter();
  v31[6] = v52;
  v31[7] = v53;
  v31[8] = v54;
  v31[2] = v48;
  v31[3] = v49;
  v31[4] = v50;
  v31[5] = v51;
  v31[0] = v46;
  v31[1] = v47;
  *(_QWORD *)&v31[9] = v30;
  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    v31[6] = v52;
    v31[7] = v53;
    v31[8] = v54;
    v31[2] = v48;
    v31[3] = v49;
    v31[4] = v50;
    v31[5] = v51;
    v31[0] = v46;
    v31[1] = v47;
    *(_QWORD *)&v31[9] = v30;
    return (_QWORD *)TimelineClipProperties.createClip()();
  }
  else
  {
    swift_retain();
    v28 = (uint64_t)TimelineDefinition.resource.getter();
    swift_release();
  }
  return (_QWORD *)v28;
}

_QWORD *FromToByAnimation.generate()(uint64_t a1)
{
  _QWORD *result;
  uint64_t v2;

  result = FromToByAnimation.createResource()(a1);
  if (!result)
  {
    lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
    swift_allocError();
    *(_QWORD *)v2 = 0xD00000000000001CLL;
    *(_QWORD *)(v2 + 8) = 0x800000021BE822D0;
    *(_BYTE *)(v2 + 16) = 0;
    return (_QWORD *)swift_willThrow();
  }
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)FromToByAnimation.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance FromToByAnimation<A>(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return FromToByAnimation.fillMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimStart.getter();
}

uint64_t protocol witness for AnimationDefinition.trimStart.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimStart.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimStart.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimEnd.getter();
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimEnd.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimEnd.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance FromToByAnimation<A>()
{
  return FromToByAnimation.trimDuration.getter();
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance FromToByAnimation<A>(uint64_t a1, char a2)
{
  return FromToByAnimation.trimDuration.setter(a1, a2 & 1);
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.trimDuration.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.offset.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.delay.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.speed.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance FromToByAnimation<A>(char *a1)
{
  char v2;

  v2 = *a1;
  return FromToByAnimation.repeatMode.setter(&v2);
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance FromToByAnimation<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FromToByAnimation.repeatMode.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

_QWORD *protocol witness for AnimationDefinitionInternal.generate() in conformance FromToByAnimation<A>(uint64_t a1)
{
  return FromToByAnimation.generate()(a1);
}

unint64_t FromToByAnimation<>.fromValue.getter()
{
  uint64_t v0;
  unsigned int *FloatFromValue;
  unsigned __int8 v2;
  uint64_t v3;

  if ((*(_BYTE *)(v0 + 213) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16)
      && (FloatFromValue = (unsigned int *)RETimelineDefinitionGetFloatFromValue()) != 0)
    {
      v2 = 0;
      v3 = *FloatFromValue;
    }
    else
    {
      v3 = 0;
      v2 = 1;
    }
  }
  else
  {
    v3 = *(unsigned int *)(v0 + 208);
    v2 = *(_BYTE *)(v0 + 212) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _DWORD *FloatFromValue;
  char v6;
  _QWORD v7[38];

  result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[26] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[26];
    v6 = BYTE4(v7[26]) & 1;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatFromValue = (_DWORD *)RETimelineDefinitionGetFloatFromValue();
  if (!FloatFromValue)
  {
    result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatFromValue;
  result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 208) = result;
  *(_BYTE *)(v1 + 212) = BYTE4(result) & 1;
  *(_BYTE *)(v1 + 213) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.fromValue.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int *FloatFromValue;
  char v4;
  int v5;

  *(_QWORD *)a1 = v1;
  if ((*(_BYTE *)(v1 + 213) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (FloatFromValue = (int *)RETimelineDefinitionGetFloatFromValue()) != 0)
    {
      v4 = 0;
      v5 = *FloatFromValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 208);
    v4 = *(_BYTE *)(v1 + 212) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t *FromToByAnimation<>.fromValue.modify(uint64_t *result)
{
  uint64_t v1;
  BOOL v2;

  v1 = *result;
  v2 = *((_BYTE *)result + 12) != 0;
  *(_DWORD *)(v1 + 208) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 212) = v2;
  *(_BYTE *)(v1 + 213) = 0;
  return result;
}

unint64_t FromToByAnimation<>.toValue.getter()
{
  uint64_t v0;
  unsigned int *FloatToValue;
  unsigned __int8 v2;
  uint64_t v3;

  if ((*(_BYTE *)(v0 + 221) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16)
      && (FloatToValue = (unsigned int *)RETimelineDefinitionGetFloatToValue()) != 0)
    {
      v2 = 0;
      v3 = *FloatToValue;
    }
    else
    {
      v3 = 0;
      v2 = 1;
    }
  }
  else
  {
    v3 = *(unsigned int *)(v0 + 216);
    v2 = *(_BYTE *)(v0 + 220) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _DWORD *FloatToValue;
  char v6;
  _QWORD v7[38];

  result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[27] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[27];
    v6 = BYTE4(v7[27]) & 1;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatToValue = (_DWORD *)RETimelineDefinitionGetFloatToValue();
  if (!FloatToValue)
  {
    result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatToValue;
  result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 216) = result;
  *(_BYTE *)(v1 + 220) = BYTE4(result) & 1;
  *(_BYTE *)(v1 + 221) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.toValue.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int *FloatToValue;
  char v4;
  int v5;

  *(_QWORD *)a1 = v1;
  if ((*(_BYTE *)(v1 + 221) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (FloatToValue = (int *)RETimelineDefinitionGetFloatToValue()) != 0)
    {
      v4 = 0;
      v5 = *FloatToValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 216);
    v4 = *(_BYTE *)(v1 + 220) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v4;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t *FromToByAnimation<>.toValue.modify(uint64_t *result)
{
  uint64_t v1;
  BOOL v2;

  v1 = *result;
  v2 = *((_BYTE *)result + 12) != 0;
  *(_DWORD *)(v1 + 216) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 220) = v2;
  *(_BYTE *)(v1 + 221) = 0;
  return result;
}

unint64_t FromToByAnimation<>.byValue.getter()
{
  uint64_t v0;
  unsigned int *FloatByValue;
  unsigned __int8 v2;
  uint64_t v3;

  if ((*(_BYTE *)(v0 + 229) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16)
      && (FloatByValue = (unsigned int *)RETimelineDefinitionGetFloatByValue()) != 0)
    {
      v2 = 0;
      v3 = *FloatByValue;
    }
    else
    {
      v3 = 0;
      v2 = 1;
    }
  }
  else
  {
    v3 = *(unsigned int *)(v0 + 224);
    v2 = *(_BYTE *)(v0 + 228) & 1;
  }
  return v3 | ((unint64_t)v2 << 32);
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Float>@<X0>(void *__src@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _DWORD *FloatByValue;
  char v6;
  _QWORD v7[38];

  result = (uint64_t)memcpy(v7, __src, sizeof(v7));
  if ((v7[28] & 0x10000000000) == 0)
  {
    LODWORD(v4) = v7[28];
    v6 = BYTE4(v7[28]) & 1;
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v7[25] + 16);
  if (!v4)
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<Float>((uint64_t)v7);
  FloatByValue = (_DWORD *)RETimelineDefinitionGetFloatByValue();
  if (!FloatByValue)
  {
    result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
    LODWORD(v4) = 0;
    goto LABEL_7;
  }
  LODWORD(v4) = *FloatByValue;
  result = outlined release of FromToByAnimation<Float>((uint64_t)v7);
  v6 = 0;
LABEL_8:
  *(_DWORD *)a2 = v4;
  *(_BYTE *)(a2 + 4) = v6;
  return result;
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 224) = result;
  *(_BYTE *)(v1 + 228) = BYTE4(result) & 1;
  *(_BYTE *)(v1 + 229) = 0;
  return result;
}

uint64_t *(*FromToByAnimation<>.byValue.modify(uint64_t a1))(uint64_t *result)
{
  uint64_t v1;
  int *FloatByValue;
  char v4;
  int v5;

  *(_QWORD *)a1 = v1;
  if ((*(_BYTE *)(v1 + 229) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (FloatByValue = (int *)RETimelineDefinitionGetFloatByValue()) != 0)
    {
      v4 = 0;
      v5 = *FloatByValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 224);
    v4 = *(_BYTE *)(v1 + 228) & 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 12) = v4;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t *FromToByAnimation<>.byValue.modify(uint64_t *result)
{
  uint64_t v1;
  BOOL v2;

  v1 = *result;
  v2 = *((_BYTE *)result + 12) != 0;
  *(_DWORD *)(v1 + 224) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 228) = v2;
  *(_BYTE *)(v1 + 229) = 0;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter()
{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x24BE25150]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x24BE25188]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x24BE251A8]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x24BE251C8]);
}

{
  return FromToByAnimation<>.fromValue.getter(MEMORY[0x24BE25228]);
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 208) = result;
  *(_BYTE *)(v2 + 216) = a2 & 1;
  *(_BYTE *)(v2 + 217) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t *DoubleFromValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 217) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (DoubleFromValue = (uint64_t *)RETimelineDefinitionGetDoubleFromValue()) != 0)
    {
      v4 = 0;
      v5 = *DoubleFromValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 208);
    v4 = *(_BYTE *)(v1 + 216) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2FromValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 217) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (Float2FromValue = (uint64_t *)RETimelineDefinitionGetFloat2FromValue()) != 0)
    {
      v4 = 0;
      v5 = *Float2FromValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 208);
    v4 = *(_BYTE *)(v1 + 216) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t FromToByAnimation<>.toValue.getter()
{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x24BE25158]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x24BE25190]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x24BE251B0]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x24BE251D0]);
}

{
  return FromToByAnimation<>.toValue.getter(MEMORY[0x24BE25230]);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 224) = result;
  *(_BYTE *)(v2 + 232) = a2 & 1;
  *(_BYTE *)(v2 + 233) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.toValue.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t *DoubleToValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 233) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (DoubleToValue = (uint64_t *)RETimelineDefinitionGetDoubleToValue()) != 0)
    {
      v4 = 0;
      v5 = *DoubleToValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 224);
    v4 = *(_BYTE *)(v1 + 232) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2ToValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 233) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (Float2ToValue = (uint64_t *)RETimelineDefinitionGetFloat2ToValue()) != 0)
    {
      v4 = 0;
      v5 = *Float2ToValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 224);
    v4 = *(_BYTE *)(v1 + 232) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t FromToByAnimation<>.byValue.getter()
{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x24BE25148]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x24BE25180]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x24BE251A0]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x24BE251C0]);
}

{
  return FromToByAnimation<>.byValue.getter(MEMORY[0x24BE25220]);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 240) = result;
  *(_BYTE *)(v2 + 248) = a2 & 1;
  *(_BYTE *)(v2 + 249) = 0;
  return result;
}

uint64_t (*FromToByAnimation<>.byValue.modify(uint64_t a1))()
{
  uint64_t v1;
  uint64_t *DoubleByValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 249) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (DoubleByValue = (uint64_t *)RETimelineDefinitionGetDoubleByValue()) != 0)
    {
      v4 = 0;
      v5 = *DoubleByValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 240);
    v4 = *(_BYTE *)(v1 + 248) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  uint64_t *Float2ByValue;
  char v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = v1;
  if ((*(_BYTE *)(v1 + 249) & 1) != 0)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16)
      && (Float2ByValue = (uint64_t *)RETimelineDefinitionGetFloat2ByValue()) != 0)
    {
      v4 = 0;
      v5 = *Float2ByValue;
    }
    else
    {
      v5 = 0;
      v4 = 1;
    }
  }
  else
  {
    v5 = *(_QWORD *)(v1 + 240);
    v4 = *(_BYTE *)(v1 + 248) & 1;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v4;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t FromToByAnimation<>.fromValue.getter(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 217) & 1) == 0)
    return *(_QWORD *)(v1 + 208);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 225) & 1) == 0)
    return *(_QWORD *)(v1 + 208);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[40];

  result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[27] & 0x100) == 0)
  {
    v8 = v10[26];
    v9 = v10[27] & 1;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    v8 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  v8 = *v7;
  result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v9 = 0;
LABEL_8:
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 208) = *(_QWORD *)result;
  *(_WORD *)(v1 + 216) = v2;
  return result;
}

uint64_t FromToByAnimation<>.toValue.getter(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 233) & 1) == 0)
    return *(_QWORD *)(v1 + 224);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 257) & 1) == 0)
    return *(_QWORD *)(v1 + 240);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[40];

  result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[29] & 0x100) == 0)
  {
    v8 = v10[28];
    v9 = v10[29] & 1;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    v8 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  v8 = *v7;
  result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v9 = 0;
LABEL_8:
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 224) = *(_QWORD *)result;
  *(_WORD *)(v1 + 232) = v2;
  return result;
}

uint64_t FromToByAnimation<>.byValue.getter(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 249) & 1) == 0)
    return *(_QWORD *)(v1 + 240);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 289) & 1) == 0)
    return *(_QWORD *)(v1 + 272);
  result = *(_QWORD *)(*(_QWORD *)(v1 + 200) + 16);
  if (result)
  {
    result = a1();
    if (result)
      return *(_QWORD *)result;
  }
  return result;
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD v10[40];

  result = (uint64_t)memcpy(v10, __src, sizeof(v10));
  if ((v10[31] & 0x100) == 0)
  {
    v8 = v10[30];
    v9 = v10[31] & 1;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(v10[25] + 16);
  if (!v6)
  {
LABEL_7:
    v8 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  outlined retain of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v7 = (uint64_t *)a2(v6);
  if (!v7)
  {
    result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
    goto LABEL_7;
  }
  v8 = *v7;
  result = outlined release of FromToByAnimation<SIMD2<Float>>((uint64_t)v10);
  v9 = 0;
LABEL_8:
  *(_QWORD *)a3 = v8;
  *(_BYTE *)(a3 + 8) = v9;
  return result;
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 240) = *(_QWORD *)result;
  *(_WORD *)(v1 + 248) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float3FromValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 225) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float3FromValue = (__int128 *)RETimelineDefinitionGetFloat3FromValue();
      if (Float3FromValue)
      {
        v6 = 0;
        v4 = *Float3FromValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 208);
    v6 = *(_BYTE *)(v1 + 224) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float4FromValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 225) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float4FromValue = (__int128 *)RETimelineDefinitionGetFloat4FromValue();
      if (Float4FromValue)
      {
        v6 = 0;
        v4 = *Float4FromValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 208);
    v6 = *(_BYTE *)(v1 + 224) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *QuaternionFromValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 225) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      QuaternionFromValue = (__int128 *)RETimelineDefinitionGetQuaternionFromValue();
      if (QuaternionFromValue)
      {
        v6 = 0;
        v4 = *QuaternionFromValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 208);
    v6 = *(_BYTE *)(v1 + 224) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t (*FromToByAnimation<>.toValue.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float3ToValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 257) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float3ToValue = (__int128 *)RETimelineDefinitionGetFloat3ToValue();
      if (Float3ToValue)
      {
        v6 = 0;
        v4 = *Float3ToValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 240);
    v6 = *(_BYTE *)(v1 + 256) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float4ToValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 257) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float4ToValue = (__int128 *)RETimelineDefinitionGetFloat4ToValue();
      if (Float4ToValue)
      {
        v6 = 0;
        v4 = *Float4ToValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 240);
    v6 = *(_BYTE *)(v1 + 256) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *QuaternionToValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 257) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      QuaternionToValue = (__int128 *)RETimelineDefinitionGetQuaternionToValue();
      if (QuaternionToValue)
      {
        v6 = 0;
        v4 = *QuaternionToValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 240);
    v6 = *(_BYTE *)(v1 + 256) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.toValue.modify;
}

uint64_t (*FromToByAnimation<>.byValue.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float3ByValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 289) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float3ByValue = (__int128 *)RETimelineDefinitionGetFloat3ByValue();
      if (Float3ByValue)
      {
        v6 = 0;
        v4 = *Float3ByValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 272);
    v6 = *(_BYTE *)(v1 + 288) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *Float4ByValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 289) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      Float4ByValue = (__int128 *)RETimelineDefinitionGetFloat4ByValue();
      if (Float4ByValue)
      {
        v6 = 0;
        v4 = *Float4ByValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 272);
    v6 = *(_BYTE *)(v1 + 288) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  __int128 *QuaternionByValue;
  char v6;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  if ((*(_BYTE *)(v1 + 289) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      QuaternionByValue = (__int128 *)RETimelineDefinitionGetQuaternionByValue();
      if (QuaternionByValue)
      {
        v6 = 0;
        v4 = *QuaternionByValue;
      }
      else
      {
        v6 = 1;
        v4 = 0uLL;
      }
    }
    else
    {
      v6 = 1;
    }
  }
  else
  {
    v4 = *(_OWORD *)(v1 + 272);
    v6 = *(_BYTE *)(v1 + 288) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_BYTE *)v3 + 16) = v6;
  return FromToByAnimation<>.byValue.modify;
}

uint64_t key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  char v9;
  __int128 v10;
  _OWORD __dst[23];

  result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if ((BYTE1(__dst[14]) & 1) != 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)&__dst[12] + 1) + 16);
    v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v8 = (__int128 *)a2(v6);
      if (v8)
      {
        v10 = *v8;
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v7 = v10;
        v9 = 0;
      }
      else
      {
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v9 = 1;
        v7 = 0uLL;
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v7 = __dst[13];
    v9 = __dst[14] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  char v9;
  __int128 v10;
  _OWORD __dst[23];

  result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if ((BYTE1(__dst[16]) & 1) != 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)&__dst[12] + 1) + 16);
    v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v8 = (__int128 *)a2(v6);
      if (v8)
      {
        v10 = *v8;
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v7 = v10;
        v9 = 0;
      }
      else
      {
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v9 = 1;
        v7 = 0uLL;
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v7 = __dst[15];
    v9 = __dst[16] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>@<X0>(void *__src@<X0>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 *v8;
  char v9;
  __int128 v10;
  _OWORD __dst[23];

  result = (uint64_t)memcpy(__dst, __src, sizeof(__dst));
  if ((BYTE1(__dst[18]) & 1) != 0)
  {
    v6 = *(_QWORD *)(*((_QWORD *)&__dst[12] + 1) + 16);
    v7 = 0uLL;
    if (v6)
    {
      outlined retain of FromToByAnimation<simd_quatf>((uint64_t)__dst);
      v8 = (__int128 *)a2(v6);
      if (v8)
      {
        v10 = *v8;
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v7 = v10;
        v9 = 0;
      }
      else
      {
        result = outlined release of FromToByAnimation<simd_quatf>((uint64_t)__dst);
        v9 = 1;
        v7 = 0uLL;
      }
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v7 = __dst[17];
    v9 = __dst[18] & 1;
  }
  *(_OWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = v9;
  return result;
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 208) = result;
  *(_QWORD *)(v3 + 216) = a2;
  *(_BYTE *)(v3 + 224) = a3 & 1;
  *(_BYTE *)(v3 + 225) = 0;
  return result;
}

void FromToByAnimation<>.fromValue.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = v1[3];
  v3 = *((_BYTE *)v1 + 16);
  *(_OWORD *)(v2 + 208) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 224) = v3;
  free(v1);
}

{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __int128 v4;
  __int128 v5;

  v1 = *a1;
  v2 = v1[7];
  v3 = *((_BYTE *)v1 + 48);
  v4 = *((_OWORD *)v1 + 1);
  v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 208) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 224) = v4;
  *(_OWORD *)(v2 + 240) = v5;
  *(_WORD *)(v2 + 256) = v3;
  free(v1);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 240) = result;
  *(_QWORD *)(v3 + 248) = a2;
  v4 = v3 + 240;
  *(_BYTE *)(v4 + 16) = a3 & 1;
  *(_BYTE *)(v4 + 17) = 0;
  return result;
}

void FromToByAnimation<>.toValue.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = v1[3];
  v3 = *((_BYTE *)v1 + 16);
  *(_OWORD *)(v2 + 240) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 256) = v3;
  free(v1);
}

{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __int128 v4;
  __int128 v5;

  v1 = *a1;
  v2 = v1[7];
  v3 = *((_BYTE *)v1 + 48);
  v4 = *((_OWORD *)v1 + 1);
  v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 272) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 288) = v4;
  *(_OWORD *)(v2 + 304) = v5;
  *(_WORD *)(v2 + 320) = v3;
  free(v1);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 272) = result;
  *(_QWORD *)(v3 + 280) = a2;
  *(_BYTE *)(v3 + 288) = a3 & 1;
  *(_BYTE *)(v3 + 289) = 0;
  return result;
}

void FromToByAnimation<>.byValue.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = v1[3];
  v3 = *((_BYTE *)v1 + 16);
  *(_OWORD *)(v2 + 272) = *(_OWORD *)v1;
  *(_WORD *)(v2 + 288) = v3;
  free(v1);
}

{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  __int128 v4;
  __int128 v5;

  v1 = *a1;
  v2 = v1[7];
  v3 = *((_BYTE *)v1 + 48);
  v4 = *((_OWORD *)v1 + 1);
  v5 = *((_OWORD *)v1 + 2);
  *(_OWORD *)(v2 + 336) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 352) = v4;
  *(_OWORD *)(v2 + 368) = v5;
  *(_WORD *)(v2 + 384) = v3;
  free(v1);
}

void FromToByAnimation<>.fromValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *SRTFromValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(v1 + 257) & 1) != 0)
  {
    v3 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTFromValue = (uint64_t *)RETimelineDefinitionGetSRTFromValue();
      if (SRTFromValue)
      {
        v6 = *SRTFromValue;
        v5 = SRTFromValue[1];
        v8 = SRTFromValue[2];
        v7 = SRTFromValue[3];
        v9 = SRTFromValue[4];
        v10 = SRTFromValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTFromValue[3];
          v14 = SRTFromValue[2];
          v15 = SRTFromValue[1];
          v16 = *SRTFromValue;
          v17 = SRTFromValue[4];
          swift_once();
          v6 = v16;
          v9 = v17;
          v8 = v14;
          v5 = v15;
          v7 = v18;
        }
        v11 = 0;
        *(_QWORD *)&v3 = v6;
        *((_QWORD *)&v3 + 1) = v5;
        *(_QWORD *)&v12 = v8;
        *((_QWORD *)&v12 + 1) = v7;
        *(_QWORD *)&v13 = v9;
        *((_QWORD *)&v13 + 1) = v10;
      }
      else
      {
        v11 = 1;
        v12 = 0uLL;
        v13 = 0uLL;
        v3 = 0uLL;
      }
    }
    else
    {
      v11 = 1;
      v12 = 0uLL;
      v13 = 0uLL;
    }
  }
  else
  {
    v12 = *(_OWORD *)(v1 + 224);
    v13 = *(_OWORD *)(v1 + 240);
    v3 = *(_OWORD *)(v1 + 208);
    v11 = *(_BYTE *)(v1 + 256) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v11;
}

double FromToByAnimation<>.fromValue.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  unsigned __int8 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  unsigned __int8 v8;

  outlined init with take of Transform?(a1, (uint64_t)v6, &demangling cache variable for type metadata for Transform?);
  v2 = v6[1];
  *(_OWORD *)(v1 + 208) = v6[0];
  *(_OWORD *)(v1 + 224) = v2;
  v3 = v1 + 208;
  v4 = v8;
  result = *(double *)&v7;
  *(_OWORD *)(v3 + 32) = v7;
  *(_WORD *)(v3 + 48) = v4;
  return result;
}

void (*FromToByAnimation<>.fromValue.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  uint64_t *SRTFromValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if ((*(_BYTE *)(v1 + 257) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTFromValue = (uint64_t *)RETimelineDefinitionGetSRTFromValue();
      if (SRTFromValue)
      {
        v7 = *SRTFromValue;
        v6 = SRTFromValue[1];
        v8 = SRTFromValue[2];
        v9 = SRTFromValue[3];
        v10 = SRTFromValue[4];
        v11 = SRTFromValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTFromValue[2];
          v19 = SRTFromValue[1];
          v16 = *SRTFromValue;
          v17 = SRTFromValue[4];
          swift_once();
          v7 = v16;
          v10 = v17;
          v8 = v18;
          v6 = v19;
        }
        v12 = 0;
        *(_QWORD *)&v4 = v7;
        *((_QWORD *)&v4 + 1) = v6;
        *(_QWORD *)&v13 = v8;
        *((_QWORD *)&v13 + 1) = v9;
        *(_QWORD *)&v14 = v10;
        *((_QWORD *)&v14 + 1) = v11;
      }
      else
      {
        v12 = 1;
        v13 = 0uLL;
        v14 = 0uLL;
        v4 = 0uLL;
      }
    }
    else
    {
      v12 = 1;
      v13 = 0uLL;
      v14 = 0uLL;
    }
  }
  else
  {
    v13 = *(_OWORD *)(v1 + 224);
    v14 = *(_OWORD *)(v1 + 240);
    v4 = *(_OWORD *)(v1 + 208);
    v12 = *(_BYTE *)(v1 + 256) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((_BYTE *)v3 + 48) = v12;
  return FromToByAnimation<>.fromValue.modify;
}

void FromToByAnimation<>.toValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *SRTToValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(v1 + 321) & 1) != 0)
  {
    v3 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTToValue = (uint64_t *)RETimelineDefinitionGetSRTToValue();
      if (SRTToValue)
      {
        v6 = *SRTToValue;
        v5 = SRTToValue[1];
        v8 = SRTToValue[2];
        v7 = SRTToValue[3];
        v9 = SRTToValue[4];
        v10 = SRTToValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTToValue[3];
          v14 = SRTToValue[2];
          v15 = SRTToValue[1];
          v16 = *SRTToValue;
          v17 = SRTToValue[4];
          swift_once();
          v6 = v16;
          v9 = v17;
          v8 = v14;
          v5 = v15;
          v7 = v18;
        }
        v11 = 0;
        *(_QWORD *)&v3 = v6;
        *((_QWORD *)&v3 + 1) = v5;
        *(_QWORD *)&v12 = v8;
        *((_QWORD *)&v12 + 1) = v7;
        *(_QWORD *)&v13 = v9;
        *((_QWORD *)&v13 + 1) = v10;
      }
      else
      {
        v11 = 1;
        v12 = 0uLL;
        v13 = 0uLL;
        v3 = 0uLL;
      }
    }
    else
    {
      v11 = 1;
      v12 = 0uLL;
      v13 = 0uLL;
    }
  }
  else
  {
    v12 = *(_OWORD *)(v1 + 288);
    v13 = *(_OWORD *)(v1 + 304);
    v3 = *(_OWORD *)(v1 + 272);
    v11 = *(_BYTE *)(v1 + 320) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v11;
}

double FromToByAnimation<>.toValue.setter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  unsigned __int8 v7;

  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Transform?);
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)(v1 + 272) = v5[0];
  *(_OWORD *)(v1 + 288) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 304) = v6;
  *(_WORD *)(v1 + 320) = v2;
  return result;
}

void (*FromToByAnimation<>.toValue.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  uint64_t *SRTToValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if ((*(_BYTE *)(v1 + 321) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTToValue = (uint64_t *)RETimelineDefinitionGetSRTToValue();
      if (SRTToValue)
      {
        v7 = *SRTToValue;
        v6 = SRTToValue[1];
        v8 = SRTToValue[2];
        v9 = SRTToValue[3];
        v10 = SRTToValue[4];
        v11 = SRTToValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTToValue[2];
          v19 = SRTToValue[1];
          v16 = *SRTToValue;
          v17 = SRTToValue[4];
          swift_once();
          v7 = v16;
          v10 = v17;
          v8 = v18;
          v6 = v19;
        }
        v12 = 0;
        *(_QWORD *)&v4 = v7;
        *((_QWORD *)&v4 + 1) = v6;
        *(_QWORD *)&v13 = v8;
        *((_QWORD *)&v13 + 1) = v9;
        *(_QWORD *)&v14 = v10;
        *((_QWORD *)&v14 + 1) = v11;
      }
      else
      {
        v12 = 1;
        v13 = 0uLL;
        v14 = 0uLL;
        v4 = 0uLL;
      }
    }
    else
    {
      v12 = 1;
      v13 = 0uLL;
      v14 = 0uLL;
    }
  }
  else
  {
    v13 = *(_OWORD *)(v1 + 288);
    v14 = *(_OWORD *)(v1 + 304);
    v4 = *(_OWORD *)(v1 + 272);
    v12 = *(_BYTE *)(v1 + 320) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((_BYTE *)v3 + 48) = v12;
  return FromToByAnimation<>.toValue.modify;
}

void FromToByAnimation<>.byValue.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *SRTByValue;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((*(_BYTE *)(v1 + 385) & 1) != 0)
  {
    v3 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTByValue = (uint64_t *)RETimelineDefinitionGetSRTByValue();
      if (SRTByValue)
      {
        v6 = *SRTByValue;
        v5 = SRTByValue[1];
        v8 = SRTByValue[2];
        v7 = SRTByValue[3];
        v9 = SRTByValue[4];
        v10 = SRTByValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTByValue[3];
          v14 = SRTByValue[2];
          v15 = SRTByValue[1];
          v16 = *SRTByValue;
          v17 = SRTByValue[4];
          swift_once();
          v6 = v16;
          v9 = v17;
          v8 = v14;
          v5 = v15;
          v7 = v18;
        }
        v11 = 0;
        *(_QWORD *)&v3 = v6;
        *((_QWORD *)&v3 + 1) = v5;
        *(_QWORD *)&v12 = v8;
        *((_QWORD *)&v12 + 1) = v7;
        *(_QWORD *)&v13 = v9;
        *((_QWORD *)&v13 + 1) = v10;
      }
      else
      {
        v11 = 1;
        v12 = 0uLL;
        v13 = 0uLL;
        v3 = 0uLL;
      }
    }
    else
    {
      v11 = 1;
      v12 = 0uLL;
      v13 = 0uLL;
    }
  }
  else
  {
    v12 = *(_OWORD *)(v1 + 352);
    v13 = *(_OWORD *)(v1 + 368);
    v3 = *(_OWORD *)(v1 + 336);
    v11 = *(_BYTE *)(v1 + 384) & 1;
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 48) = v11;
}

double FromToByAnimation<>.byValue.setter(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  __int128 v3;
  double result;
  _OWORD v5[2];
  __int128 v6;
  unsigned __int8 v7;

  outlined init with take of Transform?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Transform?);
  v2 = v7;
  v3 = v5[1];
  *(_OWORD *)(v1 + 336) = v5[0];
  *(_OWORD *)(v1 + 352) = v3;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 368) = v6;
  *(_WORD *)(v1 + 384) = v2;
  return result;
}

void (*FromToByAnimation<>.byValue.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;
  uint64_t *SRTByValue;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[7] = v1;
  if ((*(_BYTE *)(v1 + 385) & 1) != 0)
  {
    v4 = 0uLL;
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SRTByValue = (uint64_t *)RETimelineDefinitionGetSRTByValue();
      if (SRTByValue)
      {
        v7 = *SRTByValue;
        v6 = SRTByValue[1];
        v8 = SRTByValue[2];
        v9 = SRTByValue[3];
        v10 = SRTByValue[4];
        v11 = SRTByValue[5];
        if (one-time initialization token for identity != -1)
        {
          v18 = SRTByValue[2];
          v19 = SRTByValue[1];
          v16 = *SRTByValue;
          v17 = SRTByValue[4];
          swift_once();
          v7 = v16;
          v10 = v17;
          v8 = v18;
          v6 = v19;
        }
        v12 = 0;
        *(_QWORD *)&v4 = v7;
        *((_QWORD *)&v4 + 1) = v6;
        *(_QWORD *)&v13 = v8;
        *((_QWORD *)&v13 + 1) = v9;
        *(_QWORD *)&v14 = v10;
        *((_QWORD *)&v14 + 1) = v11;
      }
      else
      {
        v12 = 1;
        v13 = 0uLL;
        v14 = 0uLL;
        v4 = 0uLL;
      }
    }
    else
    {
      v12 = 1;
      v13 = 0uLL;
      v14 = 0uLL;
    }
  }
  else
  {
    v13 = *(_OWORD *)(v1 + 352);
    v14 = *(_OWORD *)(v1 + 368);
    v4 = *(_OWORD *)(v1 + 336);
    v12 = *(_BYTE *)(v1 + 384) & 1;
  }
  *(_OWORD *)v3 = v4;
  *((_OWORD *)v3 + 1) = v13;
  *((_OWORD *)v3 + 2) = v14;
  *((_BYTE *)v3 + 48) = v12;
  return FromToByAnimation<>.byValue.modify;
}

_QWORD *FromToByAnimation<>.jointNames.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t SkeletalPoseFromJointCount;
  uint64_t v3;
  _QWORD *result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD **)(v0 + 280);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  SkeletalPoseFromJointCount = RETimelineDefinitionGetSkeletalPoseFromJointCount();
  if (!SkeletalPoseFromJointCount)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = SkeletalPoseFromJointCount;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, SkeletalPoseFromJointCount & ~(SkeletalPoseFromJointCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v1 = result;
    for (i = 0; i != v3; ++i)
    {
      if (RETimelineDefinitionGetSkeletalPoseFromJointName())
      {
        v6 = String.init(cString:)();
        v8 = v7;
        v10 = v1[2];
        v9 = v1[3];
        if (v10 >= v9 >> 1)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
        v1[2] = v10 + 1;
        v11 = &v1[2 * v10];
        v11[4] = v6;
        v12 = v11 + 4;
      }
      else
      {
        v14 = v1[2];
        v13 = v1[3];
        if (v14 >= v13 >> 1)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v1);
        v1[2] = v14 + 1;
        v15 = &v1[2 * v14];
        v15[4] = 0;
        v12 = v15 + 4;
        v8 = 0xE000000000000000;
      }
      v12[1] = v8;
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t FromToByAnimation<>.jointNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 280) = a1;
  return result;
}

uint64_t (*FromToByAnimation<>.jointNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  const void *v1;
  _BYTE v4[304];

  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = FromToByAnimation<>.jointNames.getter();
  return FromToByAnimation<>.jointNames.modify;
}

uint64_t FromToByAnimation<>.jointNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 280) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 280) = v2;
  }
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.fromValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE25288], (uint64_t (*)(uint64_t))MEMORY[0x24BE25298], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.fromValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE250D0], (uint64_t (*)(uint64_t))MEMORY[0x24BE250C8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(_QWORD))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.fromValue.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of JointTransforms??(*(_QWORD *)(v1 + 208));
  *(_QWORD *)(v1 + 208) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.fromValue.modify(char **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  char *SkeletalPoseFromJointCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 208);
  SkeletalPoseFromJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SkeletalPoseFromJointCount = (char *)RETimelineDefinitionGetSkeletalPoseFromJointCount();
      if (SkeletalPoseFromJointCount)
      {
        v5 = (uint64_t)SkeletalPoseFromJointCount;
        SkeletalPoseFromJointCount = (char *)RETimelineDefinitionGetSkeletalPoseFromValue();
        if (SkeletalPoseFromJointCount)
          SkeletalPoseFromJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseFromJointCount, v5);
      }
    }
    else
    {
      SkeletalPoseFromJointCount = 0;
    }
  }
  *a1 = SkeletalPoseFromJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.fromValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsFromWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 208);
  BlendShapeWeightsFromWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      BlendShapeWeightsFromWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
      if (BlendShapeWeightsFromWeightCount)
      {
        v5 = (uint64_t)BlendShapeWeightsFromWeightCount;
        BlendShapeWeightsFromWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsFromValue();
        if (BlendShapeWeightsFromWeightCount)
          BlendShapeWeightsFromWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsFromWeightCount, v5);
      }
    }
    else
    {
      BlendShapeWeightsFromWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsFromWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.fromValue.modify;
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.fromValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.fromValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.toValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.toValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE252B8], (uint64_t (*)(uint64_t))MEMORY[0x24BE252C0], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.toValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE250F0], (uint64_t (*)(uint64_t))MEMORY[0x24BE250E8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(_QWORD))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.toValue.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of JointTransforms??(*(_QWORD *)(v1 + 216));
  *(_QWORD *)(v1 + 216) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.toValue.modify(char **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  char *SkeletalPoseToJointCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 216);
  SkeletalPoseToJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SkeletalPoseToJointCount = (char *)RETimelineDefinitionGetSkeletalPoseToJointCount();
      if (SkeletalPoseToJointCount)
      {
        v5 = (uint64_t)SkeletalPoseToJointCount;
        SkeletalPoseToJointCount = (char *)RETimelineDefinitionGetSkeletalPoseToValue();
        if (SkeletalPoseToJointCount)
          SkeletalPoseToJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseToJointCount, v5);
      }
    }
    else
    {
      SkeletalPoseToJointCount = 0;
    }
  }
  *a1 = SkeletalPoseToJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.toValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsToWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 216);
  BlendShapeWeightsToWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      BlendShapeWeightsToWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsToWeightCount();
      if (BlendShapeWeightsToWeightCount)
      {
        v5 = (uint64_t)BlendShapeWeightsToWeightCount;
        BlendShapeWeightsToWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsToValue();
        if (BlendShapeWeightsToWeightCount)
          BlendShapeWeightsToWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsToWeightCount, v5);
      }
    }
    else
    {
      BlendShapeWeightsToWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsToWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.toValue.modify;
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.toValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.toValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.byValue.getter@<X0>(uint64_t *a1@<X8>)
{
  return FromToByAnimation<>.byValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE25278], (uint64_t (*)(uint64_t))MEMORY[0x24BE25280], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), outlined copy of JointTransforms??, a1);
}

{
  return FromToByAnimation<>.byValue.getter((uint64_t (*)(uint64_t))MEMORY[0x24BE250C0], (uint64_t (*)(uint64_t))MEMORY[0x24BE250B8], (uint64_t (*)(uint64_t, uint64_t))specialized _copyCollectionToContiguousArray<A>(_:), (uint64_t (*)(_QWORD))outlined copy of BlendShapeWeights??, a1);
}

uint64_t FromToByAnimation<>.byValue.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = outlined consume of JointTransforms??(*(_QWORD *)(v1 + 224));
  *(_QWORD *)(v1 + 224) = v2;
  return result;
}

uint64_t (*FromToByAnimation<>.byValue.modify(char **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  char *SkeletalPoseByJointCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 224);
  SkeletalPoseByJointCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      SkeletalPoseByJointCount = (char *)RETimelineDefinitionGetSkeletalPoseByJointCount();
      if (SkeletalPoseByJointCount)
      {
        v5 = (uint64_t)SkeletalPoseByJointCount;
        SkeletalPoseByJointCount = (char *)RETimelineDefinitionGetSkeletalPoseByValue();
        if (SkeletalPoseByJointCount)
          SkeletalPoseByJointCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(SkeletalPoseByJointCount, v5);
      }
    }
    else
    {
      SkeletalPoseByJointCount = 0;
    }
  }
  *a1 = SkeletalPoseByJointCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.byValue.modify;
}

{
  uint64_t v1;
  uint64_t v3;
  char *BlendShapeWeightsByWeightCount;
  uint64_t v5;

  a1[1] = (char *)v1;
  v3 = *(_QWORD *)(v1 + 224);
  BlendShapeWeightsByWeightCount = (char *)v3;
  if (v3 == 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
    {
      BlendShapeWeightsByWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsByWeightCount();
      if (BlendShapeWeightsByWeightCount)
      {
        v5 = (uint64_t)BlendShapeWeightsByWeightCount;
        BlendShapeWeightsByWeightCount = (char *)RETimelineDefinitionGetBlendShapeWeightsByValue();
        if (BlendShapeWeightsByWeightCount)
          BlendShapeWeightsByWeightCount = (char *)specialized _copyCollectionToContiguousArray<A>(_:)(BlendShapeWeightsByWeightCount, v5);
      }
    }
    else
    {
      BlendShapeWeightsByWeightCount = 0;
    }
  }
  *a1 = BlendShapeWeightsByWeightCount;
  outlined copy of JointTransforms??(v3);
  return FromToByAnimation<>.byValue.modify;
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t *a1, char a2)
{
  return FromToByAnimation<>.byValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of JointTransforms??);
}

{
  return FromToByAnimation<>.byValue.modify(a1, a2, (void (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t FromToByAnimation<>.isScaleAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 288);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
  return 1;
}

uint64_t FromToByAnimation<>.isScaleAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 288) = result;
  return result;
}

_BYTE *(*FromToByAnimation<>.isScaleAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseScaleChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 288);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
      SkeletalPoseScaleChannelMask = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    else
      SkeletalPoseScaleChannelMask = 1;
  }
  else
  {
    SkeletalPoseScaleChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseScaleChannelMask;
  return FromToByAnimation<>.isScaleAnimated.modify;
}

_BYTE *FromToByAnimation<>.isScaleAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 288) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.isRotationAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 289);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
  return 1;
}

uint64_t FromToByAnimation<>.isRotationAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 289) = result;
  return result;
}

_BYTE *(*FromToByAnimation<>.isRotationAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseRotationChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 289);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
      SkeletalPoseRotationChannelMask = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    else
      SkeletalPoseRotationChannelMask = 1;
  }
  else
  {
    SkeletalPoseRotationChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseRotationChannelMask;
  return FromToByAnimation<>.isRotationAnimated.modify;
}

_BYTE *FromToByAnimation<>.isRotationAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 289) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.isTranslationAnimated.getter()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 290);
  if (v1 != 2)
    return v1 & 1;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
  return 1;
}

uint64_t FromToByAnimation<>.isTranslationAnimated.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 290) = result;
  return result;
}

_BYTE *(*FromToByAnimation<>.isTranslationAnimated.modify(_QWORD *a1))(_BYTE *result)
{
  uint64_t v1;
  char *v2;
  int v3;
  char SkeletalPoseTranslationChannelMask;

  *a1 = v1;
  v2 = (char *)(a1 + 1);
  v3 = *(unsigned __int8 *)(v1 + 290);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 200) + 16))
      SkeletalPoseTranslationChannelMask = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    else
      SkeletalPoseTranslationChannelMask = 1;
  }
  else
  {
    SkeletalPoseTranslationChannelMask = v3 & 1;
  }
  *v2 = SkeletalPoseTranslationChannelMask;
  return FromToByAnimation<>.isTranslationAnimated.modify;
}

_BYTE *FromToByAnimation<>.isTranslationAnimated.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 290) = result[8];
  return result;
}

uint64_t FromToByAnimation<>.init(jointNames:name:isScaleAnimated:isRotationAnimated:isTranslationAnimated:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, uint64_t *a14, uint64_t *a15, char a16, uint64_t *a17, int a18, char *a19, char *a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v53;
  char v54;
  uint64_t v55[2];
  char v56;
  _OWORD v57[9];
  uint64_t v58;

  v44 = *a7;
  v30 = *a8;
  v31 = *a14;
  v48 = *a15;
  v47 = a15[1];
  v45 = *((_BYTE *)a15 + 20);
  v46 = *((_DWORD *)a15 + 4);
  v32 = *a17;
  v33 = a17[1];
  v34 = *((_BYTE *)a17 + 16);
  v35 = *a19;
  v36 = *a20;
  *(_QWORD *)(a9 + 296) = 0;
  v55[0] = 0;
  v55[1] = 0;
  v56 = -1;
  v54 = v35;
  v53 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v55, 0, &v54, &v53, a21, a22 & 1, (uint64_t)v57, a11, a12, a13, a23, a24 & 1, a25, a26 & 1);
  v37 = v57[7];
  v38 = v57[8];
  *(_OWORD *)(a9 + 96) = v57[6];
  *(_OWORD *)(a9 + 112) = v37;
  *(_OWORD *)(a9 + 128) = v38;
  *(_QWORD *)(a9 + 144) = v58;
  v39 = v57[3];
  *(_OWORD *)(a9 + 32) = v57[2];
  *(_OWORD *)(a9 + 48) = v39;
  v40 = v57[5];
  *(_OWORD *)(a9 + 64) = v57[4];
  *(_OWORD *)(a9 + 80) = v40;
  v41 = v57[1];
  *(_OWORD *)a9 = v57[0];
  *(_OWORD *)(a9 + 16) = v41;
  type metadata accessor for TimelineDefinition();
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(a9 + 152) = a2;
  *(_QWORD *)(a9 + 160) = a3;
  *(_QWORD *)(a9 + 168) = v32;
  *(_QWORD *)(a9 + 176) = v33;
  *(_BYTE *)(a9 + 184) = v34;
  *(_DWORD *)(a9 + 188) = a18;
  *(_BYTE *)(a9 + 192) = 0;
  *(_BYTE *)(a9 + 193) = v36;
  *(_BYTE *)(a9 + 194) = 0;
  *(_BYTE *)(a9 + 195) = a16;
  *(_BYTE *)(a9 + 288) = a4;
  *(_BYTE *)(a9 + 289) = a5;
  *(_BYTE *)(a9 + 290) = a6;
  *(_QWORD *)(a9 + 200) = v42;
  *(_QWORD *)(a9 + 208) = v44;
  *(_QWORD *)(a9 + 216) = v30;
  *(_QWORD *)(a9 + 224) = v31;
  *(double *)(a9 + 232) = a10;
  *(_BYTE *)(a9 + 240) = 0;
  *(_QWORD *)(a9 + 256) = v48;
  *(_QWORD *)(a9 + 264) = v47;
  *(_DWORD *)(a9 + 272) = v46;
  *(_BYTE *)(a9 + 276) = v45;
  *(_QWORD *)(a9 + 280) = a1;
  return swift_bridgeObjectRetain();
}

_QWORD *FromToByAnimation<>.weightNames.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t BlendShapeWeightsFromWeightCount;
  uint64_t v3;
  _QWORD *result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD **)(v0 + 296);
  if (v1)
  {
    swift_bridgeObjectRetain();
    return v1;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 200) + 16))
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  BlendShapeWeightsFromWeightCount = RETimelineDefinitionGetBlendShapeWeightsFromWeightCount();
  if (!BlendShapeWeightsFromWeightCount)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v3 = BlendShapeWeightsFromWeightCount;
  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, BlendShapeWeightsFromWeightCount & ~(BlendShapeWeightsFromWeightCount >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((v3 & 0x8000000000000000) == 0)
  {
    v1 = result;
    for (i = 0; i != v3; ++i)
    {
      if (RETimelineDefinitionGetBlendShapeWeightsFromWeightName())
      {
        v6 = String.init(cString:)();
        v8 = v7;
        v10 = v1[2];
        v9 = v1[3];
        if (v10 >= v9 >> 1)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v1);
        v1[2] = v10 + 1;
        v11 = &v1[2 * v10];
        v11[4] = v6;
        v12 = v11 + 4;
      }
      else
      {
        v14 = v1[2];
        v13 = v1[3];
        if (v14 >= v13 >> 1)
          v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v1);
        v1[2] = v14 + 1;
        v15 = &v1[2 * v14];
        v15[4] = 0;
        v12 = v15 + 4;
        v8 = 0xE000000000000000;
      }
      v12[1] = v8;
    }
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t FromToByAnimation<>.weightNames.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 296) = a1;
  return result;
}

uint64_t (*FromToByAnimation<>.weightNames.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  const void *v1;
  _BYTE v4[304];

  a1[1] = v1;
  memcpy(v4, v1, sizeof(v4));
  *a1 = FromToByAnimation<>.weightNames.getter();
  return FromToByAnimation<>.weightNames.modify;
}

uint64_t FromToByAnimation<>.weightNames.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 296) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 296) = v2;
  }
  return result;
}

uint64_t FromToByAnimation<>.fromValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t (*v15)(_QWORD);

  v8 = *(_QWORD *)(v5 + 208);
  v9 = v8;
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 200) + 16);
    if (v10)
    {
      v15 = a4;
      v9 = a1(v10);
      if (v9)
      {
        v13 = v9;
        v9 = a2(v10);
        if (v9)
          v9 = a3(v9, v13);
      }
      a4 = v15;
    }
    else
    {
      v9 = 0;
    }
  }
  *a5 = v9;
  return a4(v8);
}

uint64_t FromToByAnimation<>.fromValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 208);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(_QWORD *)(v5 + 208) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = ((uint64_t (*)(_QWORD))a3)(*(_QWORD *)(v5 + 208));
    *(_QWORD *)(v5 + 208) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.toValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t (*v15)(_QWORD);

  v8 = *(_QWORD *)(v5 + 216);
  v9 = v8;
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 200) + 16);
    if (v10)
    {
      v15 = a4;
      v9 = a1(v10);
      if (v9)
      {
        v13 = v9;
        v9 = a2(v10);
        if (v9)
          v9 = a3(v9, v13);
      }
      a4 = v15;
    }
    else
    {
      v9 = 0;
    }
  }
  *a5 = v9;
  return a4(v8);
}

uint64_t FromToByAnimation<>.toValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 216);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(_QWORD *)(v5 + 216) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = ((uint64_t (*)(_QWORD))a3)(*(_QWORD *)(v5 + 216));
    *(_QWORD *)(v5 + 216) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.byValue.getter@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t (*v15)(_QWORD);

  v8 = *(_QWORD *)(v5 + 224);
  v9 = v8;
  if (v8 == 1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)(v5 + 200) + 16);
    if (v10)
    {
      v15 = a4;
      v9 = a1(v10);
      if (v9)
      {
        v13 = v9;
        v9 = a2(v10);
        if (v9)
          v9 = a3(v9, v13);
      }
      a4 = v15;
    }
    else
    {
      v9 = 0;
    }
  }
  *a5 = v9;
  return a4(v8);
}

uint64_t FromToByAnimation<>.byValue.modify(uint64_t *a1, char a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(v5 + 224);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    a3(v6);
    *(_QWORD *)(v5 + 224) = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = ((uint64_t (*)(_QWORD))a3)(*(_QWORD *)(v5 + 224));
    *(_QWORD *)(v5 + 224) = v4;
  }
  return result;
}

uint64_t FromToByAnimation<>.init(weightNames:name:from:to:by:duration:timing:isAdditive:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, float a13@<S3>, uint64_t *a14, int a15, char *a16, char *a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v48;
  char v49;
  uint64_t v50[2];
  char v51;
  _OWORD v52[9];
  uint64_t v53;

  v41 = *a4;
  v27 = *a5;
  v28 = *a6;
  v44 = a7[1];
  v45 = *a7;
  v42 = *((_BYTE *)a7 + 20);
  v43 = *((_DWORD *)a7 + 4);
  v29 = *a14;
  v30 = a14[1];
  v31 = *((_BYTE *)a14 + 16);
  v32 = *a16;
  v33 = *a17;
  *(_QWORD *)(a9 + 280) = 0;
  *(_WORD *)(a9 + 288) = 514;
  *(_BYTE *)(a9 + 290) = 2;
  v50[0] = 0;
  v50[1] = 0;
  v51 = -1;
  v49 = v32;
  v48 = 0;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v50, 0, &v49, &v48, a18, a19 & 1, (uint64_t)v52, a11, a12, a13, a20, a21 & 1, a22, a23 & 1);
  v34 = v52[7];
  v35 = v52[8];
  *(_OWORD *)(a9 + 96) = v52[6];
  *(_OWORD *)(a9 + 112) = v34;
  *(_OWORD *)(a9 + 128) = v35;
  *(_QWORD *)(a9 + 144) = v53;
  v36 = v52[3];
  *(_OWORD *)(a9 + 32) = v52[2];
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v52[5];
  *(_OWORD *)(a9 + 64) = v52[4];
  *(_OWORD *)(a9 + 80) = v37;
  v38 = v52[1];
  *(_OWORD *)a9 = v52[0];
  *(_OWORD *)(a9 + 16) = v38;
  type metadata accessor for TimelineDefinition();
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = 0;
  *(_QWORD *)(a9 + 152) = a2;
  *(_QWORD *)(a9 + 160) = a3;
  *(_QWORD *)(a9 + 168) = v29;
  *(_QWORD *)(a9 + 176) = v30;
  *(_BYTE *)(a9 + 184) = v31;
  *(_DWORD *)(a9 + 188) = a15;
  *(_BYTE *)(a9 + 192) = 0;
  *(_BYTE *)(a9 + 193) = v33;
  *(_BYTE *)(a9 + 194) = 0;
  *(_BYTE *)(a9 + 195) = a8;
  *(_QWORD *)(a9 + 200) = v39;
  *(_QWORD *)(a9 + 208) = v41;
  *(_QWORD *)(a9 + 216) = v27;
  *(_QWORD *)(a9 + 224) = v28;
  *(double *)(a9 + 232) = a10;
  *(_BYTE *)(a9 + 240) = 0;
  *(_QWORD *)(a9 + 256) = v45;
  *(_QWORD *)(a9 + 264) = v44;
  *(_DWORD *)(a9 + 272) = v43;
  *(_BYTE *)(a9 + 276) = v42;
  *(_QWORD *)(a9 + 296) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t outlined retain of TimelineClipProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of TimelineClipProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v4);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FromToByAnimation);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Float]>, &demangling cache variable for type metadata for [Float]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhysicsJoint>, &demangling cache variable for type metadata for PhysicsJoint);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>, &demangling cache variable for type metadata for StateMachineParameterProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ForceEffectBase>, &demangling cache variable for type metadata for ForceEffectBase);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Material>, (uint64_t *)&demangling cache variable for type metadata for Material);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Component>, &demangling cache variable for type metadata for Component);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AnimationDefinition>, &demangling cache variable for type metadata for AnimationDefinition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BlendTreeNode>, &demangling cache variable for type metadata for BlendTreeNode);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<JointTransforms>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeights>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &demangling cache variable for type metadata for CodingKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt64>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[Int]>, &demangling cache variable for type metadata for [Int]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[simd_float4x4]>, &demangling cache variable for type metadata for [simd_float4x4]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[RESRT]>, &demangling cache variable for type metadata for [RESRT]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String]>, &demangling cache variable for type metadata for [String]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UnsafePointer<Int8>]>, &demangling cache variable for type metadata for [UnsafePointer<Int8>]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<Int8>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalModelSpacePoseDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalPoseDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.LoadStatistics.Observer.Log>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKActiveSceneObserver>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineConditionProtocol>, &demangling cache variable for type metadata for StateMachineConditionProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommandParameterProtocol>, &demangling cache variable for type metadata for StateMachineCommandParameterProtocol);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineCommand>, &demangling cache variable for type metadata for StateMachineCommand);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<UnsafePointer<Int8>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<REBlendWeightsDefinition>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<VFXParameter>, &demangling cache variable for type metadata for VFXParameter);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [(String, String)])>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[PathSpan]>, &demangling cache variable for type metadata for [PathSpan]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PathSpan>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseBezierCurve>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<System.Type>, (void (*)(_QWORD, int64_t, _QWORD *, _QWORD *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<[_Proto_BlendShapeMeshDescriptor_v1]>, &demangling cache variable for type metadata for [_Proto_BlendShapeMeshDescriptor_v1]);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(REMaterialAssetType, (_:_:_:))>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VirtualEnvironmentProbeComponent.Probe>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeightsData>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<VideoMaterial>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[11 * v8 + 4])
          memmove(v12, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SetupPair>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Terminatable, keyed: Bool)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__MaterialResource.CoreMaterialFunction>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Error>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 176);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[22 * v8 + 4])
          memmove(v12, a4 + 4, 176 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Constraint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 160);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[20 * v8 + 4])
          memmove(v12, a4 + 4, 160 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESkeletalPoseMeshMapEx>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineTransition>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4])
          memmove(v12, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineState>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REBlendWeightsMeshMap>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeWeightsAndMeshesGroup_v1>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton.Joint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4])
          memmove(v12, a4 + 4, 144 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.AssetMap.SceneDescriptor.SceneCompatibilityVariant>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Model>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Instance>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 112);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[14 * v8 + 4])
          memmove(v12, a4 + 4, 112 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CoreIKTransform>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape<PiecewiseBezierCurve>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshDescriptor>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4])
          memmove(v12, a4 + 4, 104 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedShapeDescriptor>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 520);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[65 * v8 + 4])
          memmove(v12, a4 + 4, 520 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UInt32, simd_float4x4)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 80);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[10 * v8 + 4])
          memmove(v12, a4 + 4, 80 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UnsafePointer<Int8>?>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CollisionCastHit>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4])
          memmove(v12, a4 + 4, 96 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(__REAsset, [__REAssetDescriptor], OpaquePointer)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 + 31;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4])
          memmove(v13, a4 + 4, v8 << 6);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Double>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Shape<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<_Proto_BlendShapeMeshDescriptor_v1>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t outlined copy of JointTransforms??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<REShaderAPI>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v12 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  int64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 31;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x24BEE4AF8];
      v13 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 32])
          memmove(v13, a4 + 32, 2 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LocalizedStringResource>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCD380]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.RotorTypeInternal>, type metadata accessor for AccessibilityComponent.RotorTypeInternal);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AccessibilityComponent.CustomContent>, type metadata accessor for AccessibilityComponent.CustomContent);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityInteractionSpecification>, type metadata accessor for __RKEntityInteractionSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityTriggerSpecification>, type metadata accessor for __RKEntityTriggerSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCEA58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, (uint64_t (*)(_QWORD))MEMORY[0x24BDCDAC0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>, type metadata accessor for __RKEntityActionSpecification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PhotogrammetrySessionImpl.RequestMap.Entry>, type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__REAssetBundle.AssetMap.SceneDescriptor>, (uint64_t (*)(_QWORD))type metadata accessor for __REAssetBundle.AssetMap.SceneDescriptor);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CheckedContinuation<(), Never>>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (v15 = v11 == -1) : (v15 = 0), v15))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                  - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (unint64_t)v13 + v17;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(_QWORD *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<__SceneImportOperation.ImportedScene>, type metadata accessor for __SceneImportOperation.ImportedScene);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4])
          memmove(v15, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4])
          memmove(v16, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v9 + 4])
          memmove(v13, a4 + 4, 48 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4])
          memmove(v14, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4])
          memmove(v13, a4 + 4, 24 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 80);
      v13 = v11 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[10 * v9 + 4])
          memmove(v13, a4 + 4, 80 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (_QWORD *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v14 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4])
          memmove(v14, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *(_QWORD *)(a4 + 24);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *(_QWORD *)(a4 + 16);
    if (v7 <= v8)
      v9 = *(_QWORD *)(a4 + 16);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKRuntimeSceneCoordinator.WeakObserver>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = (unint64_t)(v10 + 4);
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = MEMORY[0x24BEE4AF8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v10 < a4 || v13 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v10 != (_QWORD *)a4)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, a4);
LABEL_26:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = *((_QWORD *)a4 + 3);
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = *((_QWORD *)a4 + 2);
    if (v8 <= v9)
      v10 = *((_QWORD *)a4 + 2);
    else
      v10 = v8;
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = (char *)swift_allocObject();
      v12 = _swift_stdlib_malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
      v14 = v11 + 32;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)MEMORY[0x24BEE4AF8];
      v14 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v9 + 32])
          memmove(v14, a4 + 32, 4 * v9);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, void (*a6)(_QWORD, int64_t, _QWORD *, _QWORD *))
{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      v15 = v13 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4])
          memmove(v15, a4 + 4, 24 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v15 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    a6(0, v11, v15, a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 17;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      v16 = v13 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4])
          memmove(v16, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    a6(0, v11, v16, a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Constraint>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKRig.Joint>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 29;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * (v5 >> 2);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (_DWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Transform>);
  v3 = swift_allocObject();
  v4 = _swift_stdlib_malloc_size((const void *)v3);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = 2 * ((uint64_t)(v4 - 32) / 48);
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (_OWORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_retain();
  result = REEntityGetChildCount();
  if (result < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v3 = result;
    if (result)
    {
      v4 = 0;
      do
      {
        result = REEntityGetChildCount();
        if (v4 >= result)
        {
          __break(1u);
          goto LABEL_13;
        }
        ++v4;
      }
      while (v3 != v4);
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v5 = (_QWORD *)swift_allocObject();
      v6 = _swift_stdlib_malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v3;
      v5[3] = (2 * (v7 >> 3)) | 1;
      swift_retain();
      v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v5 + 4), v3, a1);
      swift_release();
      if (v8 != v3)
      {
        __break(1u);
        goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      swift_release();
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = REEntityGetChildCount();
  if (result < 0)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v3 = result;
    if (!result)
      return MEMORY[0x24BEE4AF8];
    v4 = 0;
    do
    {
      result = REEntityGetChildCount();
      if (v4 >= result)
      {
        __break(1u);
        goto LABEL_13;
      }
      ++v4;
    }
    while (v3 != v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = (_QWORD *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    v5[2] = v3;
    v5[3] = (2 * (v7 >> 3)) | 1;
    swift_retain();
    v8 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v9, (uint64_t)(v5 + 4), v3, a1);
    swift_release();
    if (v8 != v3)
    {
      __break(1u);
      return MEMORY[0x24BEE4AF8];
    }
    return (uint64_t)v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  v8[3] = a1;
  v2 = Entity.ComponentSet.count.getter();
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = v2;
  if (v2 <= 0)
  {
    v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Component>);
    v4 = (_QWORD *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    v4[2] = v3;
    v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  }
  swift_retain();
  v6 = specialized Sequence._copySequenceContents(initializing:)(v8, (uint64_t)(v4 + 4), v3, a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (v6 == v3)
    return (uint64_t)v4;
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  result = Scene.AnchorCollection.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    v3 = result;
    if (result)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<HasAnchoring>);
      v4 = (uint64_t *)swift_allocObject();
      v5 = _swift_stdlib_malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 17;
      v4[2] = v3;
      v4[3] = 2 * (v6 >> 4);
      swift_retain();
      v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v4 + 4, v3, a1);
      swift_release();
      if (v7 == v3)
        return (uint64_t)v4;
      __break(1u);
    }
    return MEMORY[0x24BEE4AF8];
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource._Proto_Level_v1>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  _QWORD v10[3];
  unint64_t v11;
  _OWORD v12[2];
  uint64_t v13;
  _BYTE v14[8];
  _BYTE v15[8];
  uint64_t v16;

  v2 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v2;
  v13 = *(_QWORD *)(a1 + 32);
  outlined init with take of Transform?((uint64_t)v12, (uint64_t)v15, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)&v16, &demangling cache variable for type metadata for AnimationLibraryResource?);
  v3 = v16;
  if (v16)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v3 + 24);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v12 + 8, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    outlined init with take of Transform?((uint64_t)v14, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    v4 = v10[0];
    if (!v10[0])
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: AnimationResource)>);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v6[2] = v5;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 24);
  outlined retain of AnimationLibraryComponent.AnimationCollection(a1);
  v8 = specialized Sequence._copySequenceContents(initializing:)(&v11, v6 + 4, v5);
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v8 != v5)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Skeleton>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Instance>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BlendShapeWeightsData>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 1;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 5);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Model>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MeshResource.Part>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 + 31;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRelease();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  unint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SkeletalPose>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<AudioMixGroup>, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ConfigurationCatalog.Configuration>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ExtrudedGlyphDescriptor>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 + 31;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 6);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, &demangling cache variable for type metadata for _ContiguousArrayStorage<ComponentInfo>, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  _BYTE v9[8];

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PhysicsJoint>);
  v5 = (_QWORD *)swift_allocObject();
  v6 = _swift_stdlib_malloc_size(v5);
  v5[2] = v2;
  v5[3] = 2 * ((uint64_t)(v6 - 32) / 40);
  v7 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v9, (uint64_t)(v5 + 4), v2, a1, a2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v7 != v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v5;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t))specialized Sequence._copySequenceContents(initializing:));
}

void specialized _copyCollectionToContiguousArray<A>(_:)(void *a1)
{
  uint64_t PartCount;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8[2];

  PartCount = DRMeshGetPartCount();
  if (PartCount)
  {
    v3 = PartCount;
    if (PartCount <= 0)
    {
      v4 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LowLevelMesh.Part>);
      v4 = swift_allocObject();
      v5 = _swift_stdlib_malloc_size((const void *)v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 + 31;
      *(_QWORD *)(v4 + 16) = v3;
      *(_QWORD *)(v4 + 24) = 2 * (v6 >> 6);
    }
    v7 = specialized Sequence._copySequenceContents(initializing:)(v8, (_OWORD *)(v4 + 32), v3, (uint64_t)a1);

    if (v7 != v3)
      __break(1u);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9[2];

  v2 = geom_collection_size_u();
  if (v2)
  {
    v3 = v2;
    if (v2 < 1)
    {
      v4 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      v4 = (_QWORD *)swift_allocObject();
      v5 = _swift_stdlib_malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 29;
      v4[2] = v3;
      v4[3] = 2 * (v6 >> 2);
    }
    v7 = a1;
    v8 = specialized Sequence._copySequenceContents(initializing:)(v9, (uint64_t)(v4 + 4), v3);

    if (v8 != v3)
      __break(1u);
  }
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t))
{
  uint64_t v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_10;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v6 <= 0)
    {
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v7 = (_QWORD *)swift_allocObject();
      v8 = _swift_stdlib_malloc_size(v7);
      v9 = v8 - 32;
      if (v8 < 32)
        v9 = v8 - 25;
      v7[2] = v6;
      v7[3] = (2 * (v9 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a3 = (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t))a3(&v11, v7 + 4, v6, a1, a2);
    swift_bridgeObjectRelease();
    if (a3 == (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, unint64_t, uint64_t))v6)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v6)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v7;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13[4];
  uint64_t v14;
  uint64_t v15;

  v13[0] = a1;
  v14 = a3;
  v15 = a2;
  v6 = Entity.ComponentSet.distance(from:to:)(&v15, &v14);
  if (!v6)
    return MEMORY[0x24BEE4AF8];
  v7 = (uint64_t)v6;
  if ((uint64_t)v6 <= 0)
  {
    v8 = (uint64_t *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Entity.ComponentSet.Index>);
    v8 = (uint64_t *)swift_allocObject();
    v9 = _swift_stdlib_malloc_size(v8);
    v10 = v9 - 32;
    if (v9 < 32)
      v10 = v9 - 25;
    v8[2] = v7;
    v8[3] = 2 * (v10 >> 3);
  }
  swift_retain();
  v11 = specialized Sequence._copySequenceContents(initializing:)(v13, v8 + 4, v7, a1, a2, a3);
  result = swift_release();
  if (v11 == (_QWORD *)v7)
    return (uint64_t)v8;
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v4 = 4 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 29;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 2);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 4 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Float>>);
    v4 = 8 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 25;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 3);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 8 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD3<Float>>);
}

{
  return specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, &demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD4<Float>>);
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
    v4 = 16 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 17;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 4);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 16 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  size_t v5;
  char *v6;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RESRT>);
    v4 = (char *)swift_allocObject();
    v5 = _swift_stdlib_malloc_size(v4);
    *((_QWORD *)v4 + 2) = a2;
    *((_QWORD *)v4 + 3) = 2 * ((uint64_t)(v5 - 32) / 48);
    v6 = v4 + 32;
    if (&v4[48 * a2 + 32] <= a1 || v6 >= &a1[48 * a2])
    {
      memcpy(v6, a1, 48 * a2);
      return (uint64_t)v4;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SIMD2<Double>>);
    v4 = 16 * a2;
    v5 = (char *)swift_allocObject();
    v6 = _swift_stdlib_malloc_size(v5);
    v7 = v6 - 32;
    if (v6 < 32)
      v7 = v6 - 17;
    *((_QWORD *)v5 + 2) = a2;
    *((_QWORD *)v5 + 3) = 2 * (v7 >> 4);
    v8 = v5 + 32;
    if (&v5[v4 + 32] <= a1 || v8 >= &a1[v4])
    {
      memcpy(v8, a1, 16 * a2);
      return (uint64_t)v5;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;

  if (!a2)
    return MEMORY[0x24BEE4AF8];
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v5 = 16 * a2;
    v6 = (char *)swift_allocObject();
    v7 = _swift_stdlib_malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 17;
    *((_QWORD *)v6 + 2) = a2;
    *((_QWORD *)v6 + 3) = 2 * (v8 >> 4);
    v9 = v6 + 32;
    if (&v6[v5 + 32] <= a1 || v9 >= &a1[v5])
    {
      memcpy(v9, a1, 16 * a2);
      return (uint64_t)v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of JointTransforms??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_21B9CD4EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation.name.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21B9CD518()
{
  return 16;
}

__n128 sub_21B9CD524(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD530@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = FromToByAnimation.blendLayer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21B9CD558(unsigned int *a1)
{
  return FromToByAnimation.blendLayer.setter(*a1);
}

uint64_t sub_21B9CD57C()
{
  return 16;
}

__n128 sub_21B9CD588(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD59C()
{
  return 16;
}

__n128 sub_21B9CD5A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD5B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = FromToByAnimation.fillMode.getter(&v3);
  *a1 = v3;
  return result;
}

unsigned __int8 *sub_21B9CD5EC(unsigned __int8 *a1)
{
  unsigned __int8 v2;

  v2 = *a1;
  return FromToByAnimation.fillMode.setter(&v2);
}

uint64_t sub_21B9CD620()
{
  return 16;
}

__n128 sub_21B9CD62C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD638@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = FromToByAnimation.isAdditive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_21B9CD664(unsigned __int8 *a1)
{
  return FromToByAnimation.isAdditive.setter(*a1);
}

uint64_t sub_21B9CD688()
{
  return 16;
}

__n128 sub_21B9CD694(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD6A8()
{
  return 16;
}

__n128 sub_21B9CD6B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD6C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = FromToByAnimation.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21B9CD6F0(uint64_t a1)
{
  return FromToByAnimation.trimStart.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21B9CD71C()
{
  return 16;
}

__n128 sub_21B9CD728(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD734@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = FromToByAnimation.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21B9CD764(uint64_t a1)
{
  return FromToByAnimation.trimEnd.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21B9CD790()
{
  return 16;
}

__n128 sub_21B9CD79C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CD7A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = FromToByAnimation.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21B9CD7D8(uint64_t a1)
{
  return FromToByAnimation.trimDuration.setter(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_21B9CD804()
{
  return 16;
}

__n128 sub_21B9CD810(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21B9CD81C(double *a1@<X8>)
{
  *a1 = FromToByAnimation.offset.getter();
}

void sub_21B9CD844(double *a1)
{
  FromToByAnimation.offset.setter(*a1);
}

uint64_t sub_21B9CD868()
{
  return 16;
}

__n128 sub_21B9CD874(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21B9CD880(double *a1@<X8>)
{
  *a1 = FromToByAnimation.delay.getter();
}

void sub_21B9CD8A8(double *a1)
{
  FromToByAnimation.delay.setter(*a1);
}

uint64_t sub_21B9CD8CC()
{
  return 16;
}

__n128 sub_21B9CD8D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21B9CD8E4(float *a1@<X8>)
{
  *a1 = FromToByAnimation.speed.getter();
}

void sub_21B9CD90C(float *a1)
{
  FromToByAnimation.speed.setter(*a1);
}

uint64_t sub_21B9CD930()
{
  return 16;
}

__n128 sub_21B9CD93C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21B9CD948(_BYTE *a1@<X8>)
{
  char v2;

  FromToByAnimation.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21B9CD980(char *a1)
{
  char v2;

  v2 = *a1;
  return FromToByAnimation.repeatMode.setter(&v2);
}

uint64_t sub_21B9CD9B4()
{
  return 16;
}

__n128 sub_21B9CD9C0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21B9CD9CC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for FromToByAnimation(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  *a4 = FromToByAnimation.duration.getter(v5);
}

uint64_t sub_21B9CDA04(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  uint64_t v5;

  v4 = *a1;
  v5 = type metadata accessor for FromToByAnimation(0, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), a4);
  return FromToByAnimation.duration.setter(v5, v4);
}

uint64_t sub_21B9CDA44()
{
  return 16;
}

__n128 sub_21B9CDA50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9CDA60(uint64_t result, uint64_t a2)
{
  BOOL v2;

  v2 = *(_BYTE *)(result + 4) != 0;
  *(_DWORD *)(a2 + 208) = *(_DWORD *)result;
  *(_BYTE *)(a2 + 212) = v2;
  *(_BYTE *)(a2 + 213) = 0;
  return result;
}

uint64_t sub_21B9CDA88()
{
  return 0;
}

uint64_t sub_21B9CDA9C(uint64_t result, uint64_t a2)
{
  BOOL v2;

  v2 = *(_BYTE *)(result + 4) != 0;
  *(_DWORD *)(a2 + 216) = *(_DWORD *)result;
  *(_BYTE *)(a2 + 220) = v2;
  *(_BYTE *)(a2 + 221) = 0;
  return result;
}

uint64_t sub_21B9CDAC4()
{
  return 0;
}

uint64_t sub_21B9CDAD8(uint64_t result, uint64_t a2)
{
  BOOL v2;

  v2 = *(_BYTE *)(result + 4) != 0;
  *(_DWORD *)(a2 + 224) = *(_DWORD *)result;
  *(_BYTE *)(a2 + 228) = v2;
  *(_BYTE *)(a2 + 229) = 0;
  return result;
}

uint64_t sub_21B9CDB00()
{
  return 0;
}

uint64_t sub_21B9CDB10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25150], a2);
}

uint64_t sub_21B9CDB30()
{
  return 0;
}

uint64_t sub_21B9CDB40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25158], a2);
}

uint64_t sub_21B9CDB60()
{
  return 0;
}

uint64_t sub_21B9CDB70@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25148], a2);
}

uint64_t sub_21B9CDB90()
{
  return 0;
}

uint64_t sub_21B9CDBA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25188], a2);
}

uint64_t keypath_set_66Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 208) = *(_QWORD *)result;
  *(_WORD *)(a2 + 216) = v2;
  return result;
}

uint64_t sub_21B9CDBD8()
{
  return 0;
}

uint64_t sub_21B9CDBE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25190], a2);
}

uint64_t keypath_set_70Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)result;
  *(_WORD *)(a2 + 232) = v2;
  return result;
}

uint64_t sub_21B9CDC20()
{
  return 0;
}

uint64_t sub_21B9CDC30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<Double>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25180], a2);
}

uint64_t keypath_set_74Tm(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 240) = *(_QWORD *)result;
  *(_WORD *)(a2 + 248) = v2;
  return result;
}

uint64_t sub_21B9CDC68()
{
  return 0;
}

uint64_t sub_21B9CDC78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251A8], a2);
}

uint64_t sub_21B9CDC98()
{
  return 0;
}

uint64_t sub_21B9CDCA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251B0], a2);
}

uint64_t sub_21B9CDCC8()
{
  return 0;
}

uint64_t sub_21B9CDCD8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251A0], a2);
}

uint64_t sub_21B9CDCF8()
{
  return 0;
}

uint64_t sub_21B9CDD08@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251C8], a2);
}

uint64_t sub_21B9CDD28()
{
  return 0;
}

uint64_t sub_21B9CDD38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251D0], a2);
}

uint64_t sub_21B9CDD58()
{
  return 0;
}

uint64_t sub_21B9CDD68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE251C0], a2);
}

uint64_t sub_21B9CDD88()
{
  return 0;
}

uint64_t sub_21B9CDD98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.fromValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25228], a2);
}

__n128 keypath_set_90Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  a2[13] = *a1;
  a2[14].n128_u16[0] = v2;
  return result;
}

uint64_t sub_21B9CDDD0()
{
  return 0;
}

uint64_t sub_21B9CDDE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.toValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25230], a2);
}

__n128 keypath_set_94Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  a2[15] = *a1;
  a2[16].n128_u16[0] = v2;
  return result;
}

uint64_t sub_21B9CDE18()
{
  return 0;
}

uint64_t sub_21B9CDE28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for FromToByAnimation<>.byValue : FromToByAnimation<SIMD3<Float>>(a1, (uint64_t (*)(uint64_t))MEMORY[0x24BE25220], a2);
}

__n128 keypath_set_98Tm(__n128 *a1, __n128 *a2)
{
  unsigned __int8 v2;
  __n128 result;

  v2 = a1[1].n128_u8[0];
  result = *a1;
  a2[17] = *a1;
  a2[18].n128_u16[0] = v2;
  return result;
}

uint64_t sub_21B9CDE60()
{
  return 0;
}

uint64_t sub_21B9CDE70@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  FromToByAnimation<>.fromValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_21B9CDEB4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 224) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 240) = result;
  *(_WORD *)(a2 + 256) = v2;
  return result;
}

uint64_t sub_21B9CDED4()
{
  return 0;
}

uint64_t sub_21B9CDEE4@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  FromToByAnimation<>.toValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_21B9CDF28(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 288) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 304) = result;
  *(_WORD *)(a2 + 320) = v2;
  return result;
}

uint64_t sub_21B9CDF48()
{
  return 0;
}

uint64_t sub_21B9CDF58@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[64];

  FromToByAnimation<>.byValue.getter((uint64_t)v3);
  return outlined init with take of Transform?((uint64_t)v3, a1, &demangling cache variable for type metadata for Transform?);
}

__n128 sub_21B9CDF9C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  __int128 v3;
  __n128 result;

  v2 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 336) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 352) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 368) = result;
  *(_WORD *)(a2 + 384) = v2;
  return result;
}

uint64_t sub_21B9CDFBC()
{
  return 0;
}

_QWORD *sub_21B9CDFCC@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = FromToByAnimation<>.jointNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21B9CDFF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 280) = v3;
  return result;
}

uint64_t sub_21B9CE034()
{
  return 0;
}

uint64_t sub_21B9CE044@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.fromValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE07C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_142Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_21B9CE088()
{
  return 0;
}

uint64_t sub_21B9CE098@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.toValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE0D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_146Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_21B9CE0DC()
{
  return 0;
}

uint64_t sub_21B9CE0EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.byValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE124(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_150Tm(a1, a2, a3, a4, outlined consume of JointTransforms??);
}

uint64_t sub_21B9CE130()
{
  return 0;
}

uint64_t sub_21B9CE140@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 288);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 200) + 16))
      result = RETimelineDefinitionGetSkeletalPoseScaleChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21B9CE18C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 288) = *result;
  return result;
}

uint64_t sub_21B9CE198()
{
  return 0;
}

uint64_t sub_21B9CE1A8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 289);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 200) + 16))
      result = RETimelineDefinitionGetSkeletalPoseRotationChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21B9CE1F4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 289) = *result;
  return result;
}

uint64_t sub_21B9CE200()
{
  return 0;
}

uint64_t sub_21B9CE210@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 290);
  if (v3 == 2)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 200) + 16))
      result = RETimelineDefinitionGetSkeletalPoseTranslationChannelMask();
    else
      result = 1;
  }
  else
  {
    result = v3 & 1;
  }
  *a2 = result;
  return result;
}

_BYTE *sub_21B9CE25C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 290) = *result;
  return result;
}

uint64_t sub_21B9CE268()
{
  return 0;
}

_QWORD *sub_21B9CE278@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = FromToByAnimation<>.weightNames.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21B9CE2A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 296) = v3;
  return result;
}

uint64_t sub_21B9CE2E0()
{
  return 0;
}

uint64_t sub_21B9CE2F0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.fromValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE328(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_142Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_142Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 208);
  swift_bridgeObjectRetain();
  result = a5(v8);
  *(_QWORD *)(a2 + 208) = v7;
  return result;
}

uint64_t sub_21B9CE378()
{
  return 0;
}

uint64_t sub_21B9CE388@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.toValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE3C0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_146Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_146Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  result = a5(v8);
  *(_QWORD *)(a2 + 216) = v7;
  return result;
}

uint64_t sub_21B9CE410()
{
  return 0;
}

uint64_t sub_21B9CE420@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = FromToByAnimation<>.byValue.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_21B9CE458(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_150Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))outlined consume of BlendShapeWeights??);
}

uint64_t keypath_set_150Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a1;
  v8 = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  result = a5(v8);
  *(_QWORD *)(a2 + 224) = v7;
  return result;
}

uint64_t sub_21B9CE4A8()
{
  return 0;
}

uint64_t type metadata instantiation function for FromToByAnimation()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for FromToByAnimation()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Optional();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for FromToByAnimation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  v5 = v4 + ((unsigned __int16)((v3 & 0xF0) + 31) & (unsigned __int16)~(v3 & 0xF0) & 0x1F0);
  swift_retain();
  return v5;
}

uint64_t destroy for FromToByAnimation(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;

  swift_release();
  swift_bridgeObjectRelease();
  v4 = *(unsigned __int8 *)(a1 + 128);
  if (v4 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  swift_release();
  v5 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  v6 = *(unsigned __int8 *)(v5 + 32);
  if (v6 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), v6);
  swift_release();
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v5 + v9 + 56;
  v11 = ~v9;
  v12 = v10 & ~v9;
  v13 = *(unsigned int *)(v8 + 84);
  if ((_DWORD)v13)
    v14 = *(_QWORD *)(v8 + 64);
  else
    v14 = *(_QWORD *)(v8 + 64) + 1;
  if (v13 > 1)
  {
    v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    if (v17(v10 & ~v9, *(unsigned int *)(v8 + 84), v7) >= 2)
    {
      v18 = ((v10 | v9) + v14) & v11;
      goto LABEL_36;
    }
  }
  else if (*(_BYTE *)(v12 + v14))
  {
    v15 = (*(unsigned __int8 *)(v12 + v14) - 1) << (8 * v14);
    if (v14 > 3)
      v15 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v16 = v14;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    if (v15 != -1)
    {
      v19 = v14 + 1;
      v18 = ((v10 | v9) + v14 + 1) & v11;
      v20 = *(unsigned __int8 *)(v18 + v14);
      if (!*(_BYTE *)(v18 + v14))
        goto LABEL_41;
      goto LABEL_29;
    }
  }
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v17(v10 & ~v9, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10 & ~v9, v7);
  if (v13 >= 2)
    v21 = v14;
  else
    v21 = v14 + 1;
  v18 = ((v10 | v9) + v21) & v11;
  if (v13 <= 1)
  {
    v19 = v14 + 1;
    v20 = *(unsigned __int8 *)(v18 + v14);
    if (!*(_BYTE *)(v18 + v14))
      goto LABEL_41;
LABEL_29:
    v22 = (v20 - 1) << (8 * v14);
    if (v14 > 3)
      v22 = 0;
    if ((_DWORD)v14)
    {
      if (v14 <= 3)
        v23 = v14;
      else
        v23 = 4;
      __asm { BR              X11 }
    }
    if (v22 != -1)
    {
      v24 = (v18 + v9 + v19) & v11;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_36:
  if (v17(v18, v13, v7) >= 2)
  {
    v24 = (v14 + v9 + v18) & v11;
    goto LABEL_52;
  }
  v19 = v14;
LABEL_41:
  v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v17(v18, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v18, v7);
  v24 = (v19 + v9 + v18) & v11;
  if (v13 > 1)
  {
LABEL_52:
    if (v17(v24, v13, v7) >= 2)
      goto LABEL_57;
    goto LABEL_55;
  }
LABEL_44:
  if (!*(_BYTE *)(v24 + v14))
    goto LABEL_55;
  v25 = (*(unsigned __int8 *)(v24 + v14) - 1) << (8 * v14);
  if (v14 > 3)
    v25 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v26 = v14;
    else
      v26 = 4;
    __asm { BR              X11 }
  }
  if (v25 == -1)
  {
LABEL_55:
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v24, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v7);
  }
LABEL_57:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  size_t v26;
  int v27;
  int v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  void *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  void *v38;
  _BYTE *v39;
  int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v8 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 112);
    v10 = *(_QWORD *)(a2 + 120);
    outlined copy of BindTarget(v9, v10, v8);
    *(_QWORD *)(a1 + 112) = v9;
    *(_QWORD *)(a1 + 120) = v10;
    *(_BYTE *)(a1 + 128) = v8;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v11 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v12 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  v13 = *(unsigned __int8 *)(v12 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 == 255)
  {
    v16 = *(_OWORD *)(v12 + 16);
    *(_BYTE *)(v11 + 32) = *(_BYTE *)(v12 + 32);
    *(_OWORD *)(v11 + 16) = v16;
  }
  else
  {
    v14 = *(_QWORD *)(v12 + 16);
    v15 = *(_QWORD *)(v12 + 24);
    outlined copy of BindTarget(v14, v15, v13);
    *(_QWORD *)(v11 + 16) = v14;
    *(_QWORD *)(v11 + 24) = v15;
    *(_BYTE *)(v11 + 32) = v13;
  }
  v17 = *(_DWORD *)(v12 + 36);
  *(_BYTE *)(v11 + 40) = *(_BYTE *)(v12 + 40);
  *(_DWORD *)(v11 + 36) = v17;
  *(_WORD *)(v11 + 41) = *(_WORD *)(v12 + 41);
  *(_BYTE *)(v11 + 43) = *(_BYTE *)(v12 + 43);
  *(_QWORD *)(v11 + 48) = *(_QWORD *)(v12 + 48);
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = v12 + v20;
  v22 = v11 + v20 + 56;
  v23 = v21 + 56;
  v24 = (unsigned __int8 *)((v21 + 56) & ~v20);
  v25 = *(unsigned int *)(v19 + 84);
  if ((_DWORD)v25)
    v26 = *(_QWORD *)(v19 + 64);
  else
    v26 = *(_QWORD *)(v19 + 64) + 1;
  swift_retain();
  v51 = v18;
  if (v25 > 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v19 + 48))(v24, v25, v18) >= 2)
    {
LABEL_26:
      if (v25 >= 2)
        v30 = v26;
      else
        v30 = v26 + 1;
      memcpy((void *)(v22 & ~v20), v24, v30);
      v29 = ~v20;
      goto LABEL_30;
    }
  }
  else if (v24[v26])
  {
    v27 = (v24[v26] - 1) << (8 * v26);
    if (v26 > 3)
      v27 = 0;
    if ((_DWORD)v26)
    {
      if (v26 <= 3)
        v28 = v26;
      else
        v28 = 4;
      __asm { BR              X11 }
    }
    if (v27 != -1)
      goto LABEL_26;
  }
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v19 + 48))(v24, 1, v18))
  {
    memcpy((void *)(v22 & ~v20), v24, v26);
  }
  else
  {
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v19 + 16))(v22 & ~v20, v24, v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v22 & ~v20, 0, 1, v18);
  }
  v29 = ~v20;
  if (v25 <= 1)
    *(_BYTE *)((v22 & ~v20) + v26) = 0;
LABEL_30:
  if (v25 >= 2)
    v31 = v26;
  else
    v31 = v26 + 1;
  v32 = (void *)(((v22 | v20) + v31) & v29);
  v33 = (unsigned __int8 *)(((v23 | v20) + v31) & v29);
  if (v25 > 1)
  {
    v37 = ((v23 | v20) + v31) & v29;
    v34 = v51;
    if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v19 + 48))(v37, v25, v51) >= 2)
      goto LABEL_49;
LABEL_43:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v19 + 48))(v33, 1, v34))
    {
      memcpy(v32, v33, v26);
      if (v25 < 2)
      {
LABEL_45:
        *((_BYTE *)v32 + v26) = 0;
        v38 = (void *)(((unint64_t)v32 + v31 + v20) & v29);
        v39 = (_BYTE *)((unint64_t)&v33[v31 + v20] & v29);
LABEL_50:
        if (v39[v26])
        {
          v40 = (v39[v26] - 1) << (8 * v26);
          if (v26 > 3)
            v40 = 0;
          if ((_DWORD)v26)
          {
            if (v26 <= 3)
              v41 = v26;
            else
              v41 = 4;
            __asm { BR              X11 }
          }
          if (v40 != -1)
            goto LABEL_65;
        }
        goto LABEL_59;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v19 + 16))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v32, 0, 1, v34);
      if (v25 < 2)
        goto LABEL_45;
    }
    v38 = (void *)(((unint64_t)v32 + v31 + v20) & v29);
    v39 = (_BYTE *)((unint64_t)&v33[v31 + v20] & v29);
    goto LABEL_58;
  }
  v34 = v51;
  if (!v33[v26])
    goto LABEL_43;
  v35 = (v33[v26] - 1) << (8 * v26);
  if (v26 > 3)
    v35 = 0;
  if ((_DWORD)v26)
  {
    if (v26 <= 3)
      v36 = v26;
    else
      v36 = 4;
    __asm { BR              X11 }
  }
  if (v35 == -1)
    goto LABEL_43;
LABEL_49:
  memcpy(v32, v33, v31);
  v38 = (void *)(((unint64_t)v32 + v31 + v20) & v29);
  v39 = (_BYTE *)((unint64_t)&v33[v31 + v20] & v29);
  if (v25 <= 1)
    goto LABEL_50;
LABEL_58:
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v39, v25, v34) >= 2)
  {
LABEL_65:
    memcpy(v38, v39, v31);
    goto LABEL_66;
  }
LABEL_59:
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v39, 1, v34))
  {
    memcpy(v38, v39, v26);
    if (v25 > 1)
      goto LABEL_66;
    goto LABEL_63;
  }
  (*(void (**)(void *, _BYTE *, uint64_t))(v19 + 16))(v38, v39, v34);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v38, 0, 1, v34);
  if (v25 <= 1)
LABEL_63:
    *((_BYTE *)v38 + v26) = 0;
LABEL_66:
  v42 = ((unint64_t)v38 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (unint64_t)&v39[v31 + 7] & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)v43;
  *(_BYTE *)(v42 + 8) = *(_BYTE *)(v43 + 8);
  *(_QWORD *)v42 = v44;
  v45 = ((unint64_t)v38 + v31 + 31) & 0xFFFFFFFFFFFFFFF0;
  v46 = (unint64_t)&v39[v31 + 31] & 0xFFFFFFFFFFFFFFF0;
  v47 = *(_OWORD *)v46;
  *(_QWORD *)(v45 + 13) = *(_QWORD *)(v46 + 0xD);
  *(_OWORD *)v45 = v47;
  v48 = (v45 + 28) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v46 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v48 = *(_QWORD *)v49;
  *(_BYTE *)(v48 + 8) = *(_BYTE *)(v49 + 8);
  *(_BYTE *)(v48 + 9) = *(_BYTE *)(v49 + 9);
  *(_BYTE *)(v48 + 10) = *(_BYTE *)(v49 + 10);
  *(_QWORD *)((v48 + 18) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v49 + 18) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FromToByAnimation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  __int128 *v26;
  __int128 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  size_t v48;
  int v49;
  int v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  size_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t (*v59)(unsigned __int8 *, uint64_t, uint64_t);
  int v60;
  int v61;
  size_t v62;
  size_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t (*v69)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t (*v77)(unsigned __int8 *, uint64_t, uint64_t);
  int v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  char v82;
  int v83;
  int v84;
  uint64_t (*v85)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t (*v90)(unsigned __int8 *, uint64_t, uint64_t);
  int v91;
  int v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  size_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v105;
  size_t __n;
  size_t __na;
  uint64_t v108;

  v6 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 19);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v10;
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (__int128 *)(a1 + 112);
  v12 = (__int128 *)(a2 + 14);
  v13 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v13 == 255)
    {
      v22 = *v12;
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *v11 = v22;
    }
    else
    {
      v19 = a2[14];
      v20 = a2[15];
      outlined copy of BindTarget(v19, v20, *((_BYTE *)a2 + 128));
      *(_QWORD *)(a1 + 112) = v19;
      *(_QWORD *)(a1 + 120) = v20;
      *(_BYTE *)(a1 + 128) = v13;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    v21 = *((_BYTE *)a2 + 128);
    *v11 = *v12;
    *(_BYTE *)(a1 + 128) = v21;
  }
  else
  {
    v14 = a2[14];
    v15 = a2[15];
    outlined copy of BindTarget(v14, v15, *((_BYTE *)a2 + 128));
    v16 = *(_QWORD *)(a1 + 112);
    v17 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    v18 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v13;
    outlined consume of BindTarget(v16, v17, v18);
  }
  v23 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v23;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  v24 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v25 = ((unint64_t)a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = (__int128 *)(v24 + 16);
  v27 = (__int128 *)(v25 + 16);
  v28 = *(unsigned __int8 *)(v25 + 32);
  if (*(unsigned __int8 *)(v24 + 32) == 255)
  {
    if (v28 == 255)
    {
      v37 = *v27;
      *(_BYTE *)(v24 + 32) = *(_BYTE *)(v25 + 32);
      *v26 = v37;
    }
    else
    {
      v34 = *(_QWORD *)(v25 + 16);
      v35 = *(_QWORD *)(v25 + 24);
      outlined copy of BindTarget(v34, v35, *(_BYTE *)(v25 + 32));
      *(_QWORD *)(v24 + 16) = v34;
      *(_QWORD *)(v24 + 24) = v35;
      *(_BYTE *)(v24 + 32) = v28;
    }
  }
  else if (v28 == 255)
  {
    outlined destroy of BindTarget(v24 + 16);
    v36 = *(_BYTE *)(v25 + 32);
    *v26 = *v27;
    *(_BYTE *)(v24 + 32) = v36;
  }
  else
  {
    v29 = *(_QWORD *)(v25 + 16);
    v30 = *(_QWORD *)(v25 + 24);
    outlined copy of BindTarget(v29, v30, *(_BYTE *)(v25 + 32));
    v31 = *(_QWORD *)(v24 + 16);
    v32 = *(_QWORD *)(v24 + 24);
    *(_QWORD *)(v24 + 16) = v29;
    *(_QWORD *)(v24 + 24) = v30;
    v33 = *(_BYTE *)(v24 + 32);
    *(_BYTE *)(v24 + 32) = v28;
    outlined consume of BindTarget(v31, v32, v33);
  }
  v38 = *(_DWORD *)(v25 + 36);
  *(_BYTE *)(v24 + 40) = *(_BYTE *)(v25 + 40);
  *(_DWORD *)(v24 + 36) = v38;
  *(_WORD *)(v24 + 41) = *(_WORD *)(v25 + 41);
  *(_BYTE *)(v24 + 43) = *(_BYTE *)(v25 + 43);
  *(_QWORD *)(v24 + 48) = *(_QWORD *)(v25 + 48);
  swift_retain();
  swift_release();
  v39 = *(_QWORD *)(a3 + 16);
  v40 = *(_QWORD *)(v39 - 8);
  v41 = *(unsigned __int8 *)(v40 + 80);
  v42 = v25 + v41;
  v43 = v24 + v41 + 56;
  v108 = ~v41;
  v44 = (unsigned __int8 *)(v43 & ~v41);
  v45 = v42 + 56;
  v46 = (unsigned __int8 *)((v42 + 56) & ~v41);
  v47 = *(unsigned int *)(v40 + 84);
  if ((_DWORD)v47)
    v48 = *(_QWORD *)(v40 + 64);
  else
    v48 = *(_QWORD *)(v40 + 64) + 1;
  if (v47 > 1)
  {
    v105 = v42 + 56;
    __n = v43;
    v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
    v52 = v51(v43 & ~v41, v47, v39);
    v53 = v51((uint64_t)v46, v47, v39);
    if (v52 >= 2)
    {
      v45 = v105;
      v43 = __n;
      if (v53 >= 2)
        goto LABEL_61;
LABEL_65:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v46, 1, v39))
      {
        memcpy(v44, v46, v48);
        if (v47 > 1)
          goto LABEL_68;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v44, v46, v39);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v44, 0, 1, v39);
        if (v47 > 1)
          goto LABEL_68;
      }
      v44[v48] = 0;
      goto LABEL_68;
    }
    if (v53 >= 2)
      goto LABEL_45;
    goto LABEL_51;
  }
  if (!v44[v48])
    goto LABEL_35;
  v49 = (v44[v48] - 1) << (8 * v48);
  if (v48 > 3)
    v49 = 0;
  if ((_DWORD)v48)
  {
    if (v48 <= 3)
      v50 = v48;
    else
      v50 = 4;
    __asm { BR              X12 }
  }
  if (v49 == -1)
  {
LABEL_35:
    v105 = v45;
    __n = v43;
    if (v46[v48])
    {
      v54 = (v46[v48] - 1) << (8 * v48);
      if (v48 > 3)
        v54 = 0;
      if ((_DWORD)v48)
      {
        if (v48 <= 3)
          v55 = v48;
        else
          v55 = 4;
        __asm { BR              X11 }
      }
      if (v54 != -1)
      {
        v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
LABEL_45:
        if (!v51((uint64_t)v44, 1, v39))
          (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v44, v39);
        if (v47 >= 2)
          v56 = v48;
        else
          v56 = v48 + 1;
        v57 = v44;
        v58 = v46;
        goto LABEL_57;
      }
    }
LABEL_51:
    v59 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
    v60 = v59(v44, 1, v39);
    v61 = v59(v46, 1, v39);
    if (v60)
    {
      if (!v61)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v44, v46, v39);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v44, 0, 1, v39);
LABEL_58:
        v45 = v105;
        v43 = __n;
        goto LABEL_68;
      }
    }
    else
    {
      if (!v61)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 24))(v44, v46, v39);
        goto LABEL_58;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v44, v39);
    }
    v57 = v44;
    v58 = v46;
    v56 = v48;
LABEL_57:
    memcpy(v57, v58, v56);
    goto LABEL_58;
  }
  if (!v46[v48] || (v46[v48] - 1) << (8 * v48) == -1)
    goto LABEL_65;
LABEL_61:
  if (v47 >= 2)
    v62 = v48;
  else
    v62 = v48 + 1;
  memcpy(v44, v46, v62);
LABEL_68:
  if (v47 >= 2)
    v63 = v48;
  else
    v63 = v48 + 1;
  v64 = (unsigned __int8 *)(((v43 | v41) + v63) & v108);
  v65 = (unsigned __int8 *)(((v45 | v41) + v63) & v108);
  if (v47 > 1)
  {
    __na = v63;
    v68 = v40;
    v69 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
    v70 = v69(v64, v47, v39);
    v71 = v69(v65, v47, v39);
    if (v70 >= 2)
    {
      v40 = v68;
      v63 = __na;
      if (v71 >= 2)
      {
LABEL_113:
        v75 = v64;
        v76 = v65;
LABEL_114:
        memcpy(v75, v76, v63);
        goto LABEL_115;
      }
LABEL_117:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v65, 1, v39))
      {
        memcpy(v64, v65, v48);
        if (v47 < 2)
        {
LABEL_119:
          v64[v48] = 0;
          v80 = (unsigned __int8 *)((unint64_t)&v64[v63 + v41] & v108);
          v81 = (unsigned __int8 *)((unint64_t)&v65[v63 + v41] & v108);
          goto LABEL_120;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v64, v65, v39);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v64, 0, 1, v39);
        if (v47 < 2)
          goto LABEL_119;
      }
      v80 = (unsigned __int8 *)((unint64_t)&v64[v63 + v41] & v108);
      v81 = (unsigned __int8 *)((unint64_t)&v65[v63 + v41] & v108);
      goto LABEL_131;
    }
    if (v71 >= 2)
    {
LABEL_101:
      v74 = v69(v64, 1, v39);
      v40 = v68;
      if (!v74)
        (*(void (**)(unsigned __int8 *, uint64_t))(v68 + 8))(v64, v39);
      v75 = v64;
      v76 = v65;
      v63 = __na;
      goto LABEL_114;
    }
  }
  else
  {
    if (v64[v48])
    {
      v66 = (v64[v48] - 1) << (8 * v48);
      if (v48 > 3)
        v66 = 0;
      if ((_DWORD)v48)
      {
        if (v48 <= 3)
          v67 = v48;
        else
          v67 = 4;
        __asm { BR              X12 }
      }
      if (v66 != -1)
      {
        if (v65[v48] && (v65[v48] - 1) << (8 * v48) != -1)
          goto LABEL_113;
        goto LABEL_117;
      }
    }
    __na = v63;
    v68 = v40;
    if (v65[v48])
    {
      v72 = (v65[v48] - 1) << (8 * v48);
      if (v48 > 3)
        v72 = 0;
      if ((_DWORD)v48)
      {
        if (v48 <= 3)
          v73 = v48;
        else
          v73 = 4;
        __asm { BR              X11 }
      }
      if (v72 != -1)
      {
        v69 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
        goto LABEL_101;
      }
    }
  }
  v77 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v68 + 48);
  v78 = v77(v64, 1, v39);
  v79 = v77(v65, 1, v39);
  if (v78)
  {
    if (v79)
    {
      memcpy(v64, v65, v48);
      v40 = v68;
    }
    else
    {
      v40 = v68;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v68 + 16))(v64, v65, v39);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v39);
    }
  }
  else
  {
    v40 = v68;
    if (v79)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v68 + 8))(v64, v39);
      memcpy(v64, v65, v48);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v68 + 24))(v64, v65, v39);
    }
  }
  v63 = __na;
LABEL_115:
  v80 = (unsigned __int8 *)((unint64_t)&v64[v63 + v41] & v108);
  v81 = (unsigned __int8 *)((unint64_t)&v65[v63 + v41] & v108);
  if (v47 > 1)
  {
LABEL_131:
    v85 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
    v86 = v85(v80, v47, v39);
    v87 = v85(v81, v47, v39);
    if (v86 < 2)
    {
      if (v87 < 2)
        goto LABEL_151;
      goto LABEL_149;
    }
    if (v87 < 2)
    {
LABEL_162:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48))(v81, 1, v39))
      {
        memcpy(v80, v81, v48);
        if (v47 > 1)
          goto LABEL_161;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v80, v81, v39);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v80, 0, 1, v39);
        if (v47 > 1)
          goto LABEL_161;
      }
      v80[v48] = 0;
      goto LABEL_161;
    }
LABEL_159:
    v93 = v80;
    v94 = v81;
    v95 = v63;
    goto LABEL_160;
  }
LABEL_120:
  v82 = 8 * v48;
  if (v80[v48])
  {
    v83 = (v80[v48] - 1) << v82;
    if (v48 > 3)
      v83 = 0;
    if ((_DWORD)v48)
    {
      if (v48 <= 3)
        v84 = v48;
      else
        v84 = 4;
      __asm { BR              X12 }
    }
    if (v83 != -1)
    {
      if (!v81[v48] || (v81[v48] - 1) << v82 == -1)
        goto LABEL_162;
      goto LABEL_159;
    }
  }
  if (v81[v48])
  {
    v88 = (v81[v48] - 1) << v82;
    if (v48 > 3)
      v88 = 0;
    if ((_DWORD)v48)
    {
      if (v48 <= 3)
        v89 = v48;
      else
        v89 = 4;
      __asm { BR              X11 }
    }
    if (v88 != -1)
    {
      v85 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
LABEL_149:
      if (!v85(v80, 1, v39))
        (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v80, v39);
      goto LABEL_159;
    }
  }
LABEL_151:
  v90 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v40 + 48);
  v91 = v90(v80, 1, v39);
  v92 = v90(v81, 1, v39);
  if (!v91)
  {
    if (!v92)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 24))(v80, v81, v39);
      goto LABEL_161;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v40 + 8))(v80, v39);
    goto LABEL_156;
  }
  if (v92)
  {
LABEL_156:
    v93 = v80;
    v94 = v81;
    v95 = v48;
LABEL_160:
    memcpy(v93, v94, v95);
    goto LABEL_161;
  }
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v40 + 16))(v80, v81, v39);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v80, 0, 1, v39);
LABEL_161:
  v96 = (unint64_t)&v80[v63 + 7] & 0xFFFFFFFFFFFFFFF8;
  v97 = (unint64_t)&v81[v63 + 7] & 0xFFFFFFFFFFFFFFF8;
  v98 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  *(_QWORD *)v96 = v98;
  v99 = (unint64_t)&v80[v63 + 31] & 0xFFFFFFFFFFFFFFF0;
  v100 = (unint64_t)&v81[v63 + 31] & 0xFFFFFFFFFFFFFFF0;
  v101 = *(_OWORD *)v100;
  *(_QWORD *)(v99 + 13) = *(_QWORD *)(v100 + 0xD);
  *(_OWORD *)v99 = v101;
  v102 = (v99 + 28) & 0xFFFFFFFFFFFFFFF8;
  v103 = (v100 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v102 = *(_QWORD *)v103;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  *(_BYTE *)(v102 + 9) = *(_BYTE *)(v103 + 9);
  *(_BYTE *)(v102 + 10) = *(_BYTE *)(v103 + 10);
  *(_QWORD *)((v102 + 18) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v103 + 18) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of BindTarget(uint64_t a1)
{
  destroy for BindTarget(a1);
  return a1;
}

uint64_t initializeWithTake for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  size_t v23;
  int v24;
  int v25;
  size_t v26;
  size_t v27;
  void *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  int v32;
  size_t v33;
  void *v34;
  _BYTE *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;

  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v10 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  v12 = *(_OWORD *)(v10 + 16);
  v11 = *(_OWORD *)(v10 + 32);
  v13 = *(_OWORD *)v10;
  *(_QWORD *)(v9 + 48) = *(_QWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 16) = v12;
  *(_OWORD *)(v9 + 32) = v11;
  *(_OWORD *)v9 = v13;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = v16 + 56 + v9;
  v18 = ~v16;
  v19 = v17 & ~v16;
  v20 = v16 + 56 + v10;
  v21 = (_BYTE *)(v20 & ~v16);
  v22 = *(unsigned int *)(v15 + 84);
  if ((_DWORD)v22)
    v23 = *(_QWORD *)(v15 + 64);
  else
    v23 = *(_QWORD *)(v15 + 64) + 1;
  v47 = v14;
  if (v22 > 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t))(v15 + 48))(v20 & ~v16, v22) >= 2)
    {
LABEL_20:
      if (v22 >= 2)
        v26 = v23;
      else
        v26 = v23 + 1;
      memcpy((void *)(v17 & ~v16), (const void *)(v20 & ~v16), v26);
      goto LABEL_24;
    }
  }
  else if (v21[v23])
  {
    v24 = (v21[v23] - 1) << (8 * v23);
    if (v23 > 3)
      v24 = 0;
    if ((_DWORD)v23)
    {
      if (v23 <= 3)
        v25 = v23;
      else
        v25 = 4;
      __asm { BR              X11 }
    }
    if (v24 != -1)
      goto LABEL_20;
  }
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v21, 1, v47))
  {
    memcpy((void *)(v17 & ~v16), v21, v23);
  }
  else
  {
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v15 + 32))(v19, v21, v47);
    (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v19, 0, 1, v47);
  }
  v18 = ~v16;
  if (v22 <= 1)
    *(_BYTE *)(v19 + v23) = 0;
LABEL_24:
  if (v22 >= 2)
    v27 = v23;
  else
    v27 = v23 + 1;
  v28 = (void *)(((v17 | v16) + v27) & v18);
  v29 = (unsigned __int8 *)(((v20 | v16) + v27) & v18);
  if (v22 > 1)
  {
    v33 = ((v20 | v16) + v27) & v18;
    v30 = v47;
    if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v15 + 48))(v33, v22, v47) >= 2)
      goto LABEL_43;
LABEL_37:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v15 + 48))(v29, 1, v30))
    {
      memcpy(v28, v29, v23);
      if (v22 < 2)
      {
LABEL_39:
        *((_BYTE *)v28 + v23) = 0;
        v34 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
        v35 = (_BYTE *)((unint64_t)&v29[v27 + v16] & v18);
LABEL_44:
        if (v35[v23])
        {
          v36 = (v35[v23] - 1) << (8 * v23);
          if (v23 > 3)
            v36 = 0;
          if ((_DWORD)v23)
          {
            if (v23 <= 3)
              v37 = v23;
            else
              v37 = 4;
            __asm { BR              X11 }
          }
          if (v36 != -1)
            goto LABEL_59;
        }
        goto LABEL_53;
      }
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v15 + 32))(v28, v29, v30);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v28, 0, 1, v30);
      if (v22 < 2)
        goto LABEL_39;
    }
    v34 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
    v35 = (_BYTE *)((unint64_t)&v29[v27 + v16] & v18);
    goto LABEL_52;
  }
  v30 = v47;
  if (!v29[v23])
    goto LABEL_37;
  v31 = (v29[v23] - 1) << (8 * v23);
  if (v23 > 3)
    v31 = 0;
  if ((_DWORD)v23)
  {
    if (v23 <= 3)
      v32 = v23;
    else
      v32 = 4;
    __asm { BR              X11 }
  }
  if (v31 == -1)
    goto LABEL_37;
LABEL_43:
  memcpy(v28, v29, v27);
  v34 = (void *)(((unint64_t)v28 + v27 + v16) & v18);
  v35 = (_BYTE *)((unint64_t)&v29[v27 + v16] & v18);
  if (v22 <= 1)
    goto LABEL_44;
LABEL_52:
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v35, v22, v30) >= 2)
  {
LABEL_59:
    memcpy(v34, v35, v27);
    goto LABEL_60;
  }
LABEL_53:
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v35, 1, v30))
  {
    memcpy(v34, v35, v23);
    if (v22 > 1)
      goto LABEL_60;
    goto LABEL_57;
  }
  (*(void (**)(void *, _BYTE *, uint64_t))(v15 + 32))(v34, v35, v30);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v34, 0, 1, v30);
  if (v22 <= 1)
LABEL_57:
    *((_BYTE *)v34 + v23) = 0;
LABEL_60:
  v38 = ((unint64_t)v34 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (unint64_t)&v35[v27 + 7] & 0xFFFFFFFFFFFFFFF8;
  v40 = *(_QWORD *)v39;
  *(_BYTE *)(v38 + 8) = *(_BYTE *)(v39 + 8);
  *(_QWORD *)v38 = v40;
  v41 = ((unint64_t)v34 + v27 + 31) & 0xFFFFFFFFFFFFFFF0;
  v42 = (unint64_t)&v35[v27 + 31] & 0xFFFFFFFFFFFFFFF0;
  v43 = *(_OWORD *)v42;
  *(_QWORD *)(v41 + 13) = *(_QWORD *)(v42 + 0xD);
  *(_OWORD *)v41 = v43;
  v44 = (v41 + 28) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v42 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_BYTE *)(v44 + 8) = *(_BYTE *)(v45 + 8);
  *(_BYTE *)(v44 + 9) = *(_BYTE *)(v45 + 9);
  *(_BYTE *)(v44 + 10) = *(_BYTE *)(v45 + 10);
  *(_QWORD *)((v44 + 18) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((v45 + 18) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for FromToByAnimation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  size_t v33;
  int v34;
  int v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  size_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  uint64_t (*v44)(unsigned __int8 *, uint64_t, uint64_t);
  int v45;
  int v46;
  size_t v47;
  size_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t (*v54)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  uint64_t (*v62)(unsigned __int8 *, uint64_t, uint64_t);
  int v63;
  int v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  char v67;
  int v68;
  int v69;
  uint64_t (*v70)(unsigned __int8 *, uint64_t, uint64_t);
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  uint64_t (*v75)(unsigned __int8 *, uint64_t, uint64_t);
  int v76;
  int v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  size_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v90;
  size_t __n;
  size_t __na;
  uint64_t v93;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  v8 = (_OWORD *)(a2 + 112);
  v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 != 255)
  {
    v10 = *(unsigned __int8 *)(a2 + 128);
    if (v10 != 255)
    {
      v11 = *(_QWORD *)(a1 + 112);
      v12 = *(_QWORD *)(a1 + 120);
      *(_OWORD *)(a1 + 112) = *v8;
      *(_BYTE *)(a1 + 128) = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined destroy of BindTarget(a1 + 112);
  }
  *(_OWORD *)(a1 + 112) = *v8;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  v13 = (a1 + 159) & 0xFFFFFFFFFFFFFFF8;
  v14 = (a2 + 159) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
  swift_bridgeObjectRelease();
  v15 = (__int128 *)(v13 + 16);
  v16 = (__int128 *)(v14 + 16);
  v17 = *(unsigned __int8 *)(v13 + 32);
  if (v17 == 255)
  {
    v21 = *v16;
    *(_BYTE *)(v13 + 32) = *(_BYTE *)(v14 + 32);
    *v15 = v21;
  }
  else
  {
    v18 = *(unsigned __int8 *)(v14 + 32);
    if (v18 == 255)
    {
      outlined destroy of BindTarget(v13 + 16);
      v22 = *(_BYTE *)(v14 + 32);
      *v15 = *v16;
      *(_BYTE *)(v13 + 32) = v22;
    }
    else
    {
      v19 = *(_QWORD *)(v13 + 16);
      v20 = *(_QWORD *)(v13 + 24);
      *(_OWORD *)(v13 + 16) = *v16;
      *(_BYTE *)(v13 + 32) = v18;
      outlined consume of BindTarget(v19, v20, v17);
    }
  }
  v23 = *(_DWORD *)(v14 + 36);
  *(_BYTE *)(v13 + 40) = *(_BYTE *)(v14 + 40);
  *(_DWORD *)(v13 + 36) = v23;
  *(_WORD *)(v13 + 41) = *(_WORD *)(v14 + 41);
  *(_BYTE *)(v13 + 43) = *(_BYTE *)(v14 + 43);
  *(_QWORD *)(v13 + 48) = *(_QWORD *)(v14 + 48);
  swift_release();
  v24 = *(_QWORD *)(a3 + 16);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned __int8 *)(v25 + 80);
  v27 = v14 + v26;
  v28 = v13 + v26 + 56;
  v93 = ~v26;
  v29 = (unsigned __int8 *)(v28 & ~v26);
  v30 = v27 + 56;
  v31 = (unsigned __int8 *)((v27 + 56) & ~v26);
  v32 = *(unsigned int *)(v25 + 84);
  if ((_DWORD)v32)
    v33 = *(_QWORD *)(v25 + 64);
  else
    v33 = *(_QWORD *)(v25 + 64) + 1;
  if (v32 > 1)
  {
    v90 = v27 + 56;
    __n = v28;
    v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    v37 = v36(v28 & ~v26, v32, v24);
    v38 = v36((uint64_t)v31, v32, v24);
    if (v37 >= 2)
    {
      v30 = v90;
      v28 = __n;
      if (v38 >= 2)
        goto LABEL_57;
LABEL_61:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v31, 1, v24))
      {
        memcpy(v29, v31, v33);
        if (v32 > 1)
          goto LABEL_64;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v29, v31, v24);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
        if (v32 > 1)
          goto LABEL_64;
      }
      v29[v33] = 0;
      goto LABEL_64;
    }
    if (v38 >= 2)
      goto LABEL_41;
    goto LABEL_47;
  }
  if (!v29[v33])
    goto LABEL_31;
  v34 = (v29[v33] - 1) << (8 * v33);
  if (v33 > 3)
    v34 = 0;
  if ((_DWORD)v33)
  {
    if (v33 <= 3)
      v35 = v33;
    else
      v35 = 4;
    __asm { BR              X12 }
  }
  if (v34 == -1)
  {
LABEL_31:
    v90 = v30;
    __n = v28;
    if (v31[v33])
    {
      v39 = (v31[v33] - 1) << (8 * v33);
      if (v33 > 3)
        v39 = 0;
      if ((_DWORD)v33)
      {
        if (v33 <= 3)
          v40 = v33;
        else
          v40 = 4;
        __asm { BR              X11 }
      }
      if (v39 != -1)
      {
        v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
LABEL_41:
        if (!v36((uint64_t)v29, 1, v24))
          (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v29, v24);
        if (v32 >= 2)
          v41 = v33;
        else
          v41 = v33 + 1;
        v42 = v29;
        v43 = v31;
        goto LABEL_53;
      }
    }
LABEL_47:
    v44 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
    v45 = v44(v29, 1, v24);
    v46 = v44(v31, 1, v24);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v29, v31, v24);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v29, 0, 1, v24);
LABEL_54:
        v30 = v90;
        v28 = __n;
        goto LABEL_64;
      }
    }
    else
    {
      if (!v46)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 40))(v29, v31, v24);
        goto LABEL_54;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v29, v24);
    }
    v42 = v29;
    v43 = v31;
    v41 = v33;
LABEL_53:
    memcpy(v42, v43, v41);
    goto LABEL_54;
  }
  if (!v31[v33] || (v31[v33] - 1) << (8 * v33) == -1)
    goto LABEL_61;
LABEL_57:
  if (v32 >= 2)
    v47 = v33;
  else
    v47 = v33 + 1;
  memcpy(v29, v31, v47);
LABEL_64:
  if (v32 >= 2)
    v48 = v33;
  else
    v48 = v33 + 1;
  v49 = (unsigned __int8 *)(((v28 | v26) + v48) & v93);
  v50 = (unsigned __int8 *)(((v30 | v26) + v48) & v93);
  if (v32 > 1)
  {
    __na = v48;
    v53 = v25;
    v54 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
    v55 = v54(v49, v32, v24);
    v56 = v54(v50, v32, v24);
    if (v55 >= 2)
    {
      v25 = v53;
      v48 = __na;
      if (v56 >= 2)
      {
LABEL_109:
        v60 = v49;
        v61 = v50;
LABEL_110:
        memcpy(v60, v61, v48);
        goto LABEL_111;
      }
LABEL_113:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v50, 1, v24))
      {
        memcpy(v49, v50, v33);
        if (v32 < 2)
        {
LABEL_115:
          v49[v33] = 0;
          v65 = (unsigned __int8 *)((unint64_t)&v49[v48 + v26] & v93);
          v66 = (unsigned __int8 *)((unint64_t)&v50[v48 + v26] & v93);
          goto LABEL_116;
        }
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v49, v50, v24);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v49, 0, 1, v24);
        if (v32 < 2)
          goto LABEL_115;
      }
      v65 = (unsigned __int8 *)((unint64_t)&v49[v48 + v26] & v93);
      v66 = (unsigned __int8 *)((unint64_t)&v50[v48 + v26] & v93);
      goto LABEL_127;
    }
    if (v56 >= 2)
    {
LABEL_97:
      v59 = v54(v49, 1, v24);
      v25 = v53;
      if (!v59)
        (*(void (**)(unsigned __int8 *, uint64_t))(v53 + 8))(v49, v24);
      v60 = v49;
      v61 = v50;
      v48 = __na;
      goto LABEL_110;
    }
  }
  else
  {
    if (v49[v33])
    {
      v51 = (v49[v33] - 1) << (8 * v33);
      if (v33 > 3)
        v51 = 0;
      if ((_DWORD)v33)
      {
        if (v33 <= 3)
          v52 = v33;
        else
          v52 = 4;
        __asm { BR              X12 }
      }
      if (v51 != -1)
      {
        if (v50[v33] && (v50[v33] - 1) << (8 * v33) != -1)
          goto LABEL_109;
        goto LABEL_113;
      }
    }
    __na = v48;
    v53 = v25;
    if (v50[v33])
    {
      v57 = (v50[v33] - 1) << (8 * v33);
      if (v33 > 3)
        v57 = 0;
      if ((_DWORD)v33)
      {
        if (v33 <= 3)
          v58 = v33;
        else
          v58 = 4;
        __asm { BR              X11 }
      }
      if (v57 != -1)
      {
        v54 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
        goto LABEL_97;
      }
    }
  }
  v62 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v53 + 48);
  v63 = v62(v49, 1, v24);
  v64 = v62(v50, 1, v24);
  if (v63)
  {
    if (v64)
    {
      memcpy(v49, v50, v33);
      v25 = v53;
    }
    else
    {
      v25 = v53;
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v53 + 32))(v49, v50, v24);
      (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v24);
    }
  }
  else
  {
    v25 = v53;
    if (v64)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v53 + 8))(v49, v24);
      memcpy(v49, v50, v33);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v53 + 40))(v49, v50, v24);
    }
  }
  v48 = __na;
LABEL_111:
  v65 = (unsigned __int8 *)((unint64_t)&v49[v48 + v26] & v93);
  v66 = (unsigned __int8 *)((unint64_t)&v50[v48 + v26] & v93);
  if (v32 > 1)
  {
LABEL_127:
    v70 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
    v71 = v70(v65, v32, v24);
    v72 = v70(v66, v32, v24);
    if (v71 < 2)
    {
      if (v72 < 2)
        goto LABEL_147;
      goto LABEL_145;
    }
    if (v72 < 2)
    {
LABEL_158:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48))(v66, 1, v24))
      {
        memcpy(v65, v66, v33);
        if (v32 > 1)
          goto LABEL_157;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v65, v66, v24);
        (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v65, 0, 1, v24);
        if (v32 > 1)
          goto LABEL_157;
      }
      v65[v33] = 0;
      goto LABEL_157;
    }
LABEL_155:
    v78 = v65;
    v79 = v66;
    v80 = v48;
    goto LABEL_156;
  }
LABEL_116:
  v67 = 8 * v33;
  if (v65[v33])
  {
    v68 = (v65[v33] - 1) << v67;
    if (v33 > 3)
      v68 = 0;
    if ((_DWORD)v33)
    {
      if (v33 <= 3)
        v69 = v33;
      else
        v69 = 4;
      __asm { BR              X12 }
    }
    if (v68 != -1)
    {
      if (!v66[v33] || (v66[v33] - 1) << v67 == -1)
        goto LABEL_158;
      goto LABEL_155;
    }
  }
  if (v66[v33])
  {
    v73 = (v66[v33] - 1) << v67;
    if (v33 > 3)
      v73 = 0;
    if ((_DWORD)v33)
    {
      if (v33 <= 3)
        v74 = v33;
      else
        v74 = 4;
      __asm { BR              X11 }
    }
    if (v73 != -1)
    {
      v70 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
LABEL_145:
      if (!v70(v65, 1, v24))
        (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v65, v24);
      goto LABEL_155;
    }
  }
LABEL_147:
  v75 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v25 + 48);
  v76 = v75(v65, 1, v24);
  v77 = v75(v66, 1, v24);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 40))(v65, v66, v24);
      goto LABEL_157;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v25 + 8))(v65, v24);
    goto LABEL_152;
  }
  if (v77)
  {
LABEL_152:
    v78 = v65;
    v79 = v66;
    v80 = v33;
LABEL_156:
    memcpy(v78, v79, v80);
    goto LABEL_157;
  }
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(v65, v66, v24);
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v65, 0, 1, v24);
LABEL_157:
  v81 = (unint64_t)&v65[v48 + 7] & 0xFFFFFFFFFFFFFFF8;
  v82 = (unint64_t)&v66[v48 + 7] & 0xFFFFFFFFFFFFFFF8;
  v83 = *(_QWORD *)v82;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_QWORD *)v81 = v83;
  v84 = (unint64_t)&v65[v48 + 31] & 0xFFFFFFFFFFFFFFF0;
  v85 = (unint64_t)&v66[v48 + 31] & 0xFFFFFFFFFFFFFFF0;
  v86 = *(_OWORD *)v85;
  *(_QWORD *)(v84 + 13) = *(_QWORD *)(v85 + 0xD);
  *(_OWORD *)v84 = v86;
  v87 = (v84 + 28) & 0xFFFFFFFFFFFFFFF8;
  v88 = (v85 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v87 = *(_QWORD *)v88;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v87 + 8) = *(_BYTE *)(v88 + 8);
  *(_BYTE *)(v87 + 9) = *(_BYTE *)(v88 + 9);
  *(_BYTE *)(v87 + 10) = *(_BYTE *)(v88 + 10);
  *(_QWORD *)((v87 + 18) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((v88 + 18) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FromToByAnimation(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unsigned int v18;
  BOOL v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = v6 - 1;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (v5 >= 2)
    v9 = v7;
  else
    v9 = 0;
  if (v5 >= 2)
    v10 = v8;
  else
    v10 = v8 + 1;
  if (v9 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  else
    v11 = v9;
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v4 + 80);
  if (v11 < a2)
  {
    if (((((((((v10 + ((v10 + v12 + ((v10 + v12 + ((v12 + 208) & ~v12)) & ~v12)) & ~v12) + 31) & 0xFFFFFFFFFFFFFFF0)
             + 28) & 0xFFFFFFFFFFFFFFF8)
           + 18) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v13 = 2;
    else
      v13 = a2 - v11 + 1;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v15 = v14;
    else
      v15 = 0;
    __asm { BR              X16 }
  }
  if ((v9 & 0x80000000) != 0)
  {
    if (v5 >= 2)
    {
      v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 159) & 0xFFFFFFFFFFFFFFF8) + v12 + 56) & ~v12);
      v19 = v18 >= 2;
      result = v18 - 2;
      if ((_DWORD)result != 0 && v19)
        return result;
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 144);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

void storeEnumTagSinglePayload for FromToByAnimation(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v10;
  if (v8 >= 2)
    v11 = v9 - 1;
  else
    v11 = 0;
  if (v8 >= 2)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = *(unsigned __int8 *)(v7 + 80);
  if (v11 <= 0x7FFFFFFF)
    v14 = 0x7FFFFFFF;
  else
    v14 = v11;
  if (v14 < a3)
  {
    v15 = a3 - v14;
    if ((((((((_DWORD)v12
             + (((_DWORD)v12
               + (_DWORD)v13
               + (((_DWORD)v12 + (_DWORD)v13 + (((_DWORD)v13 + 208) & ~(_DWORD)v13)) & ~(_DWORD)v13)) & ~(_DWORD)v13)
             + 31) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 18) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v16 = v15 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v6 = v17;
    else
      v6 = 0;
  }
  if (a2 > v14)
  {
    if ((((((((_DWORD)v12
             + (((_DWORD)v12
               + (_DWORD)v13
               + (((_DWORD)v12 + (_DWORD)v13 + (((_DWORD)v13 + 208) & ~(_DWORD)v13)) & ~(_DWORD)v13)) & ~(_DWORD)v13)
             + 31) & 0xFFFFFFF0)
           + 28) & 0xFFFFFFF8)
         + 18) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      v18 = ~v14 + a2;
      bzero(a1, ((((((v12 + ((v12 + v13 + ((v12 + v13 + ((v13 + 208) & ~v13)) & ~v13)) & ~v13) + 31) & 0xFFFFFFFFFFFFFFF0) + 28) & 0xFFFFFFFFFFFFFFF8)+ 18) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v18;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X17 }
}

uint64_t sub_21B9D1318@<X0>(unsigned int a1@<W1>, unsigned int a2@<W2>, size_t a3@<X8>, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int v20;
  int v21;
  uint64_t result;

  *(_BYTE *)(v17 + v18) = 0;
  if (a1)
  {
    if ((v15 & 0x80000000) != 0)
    {
      v19 = (void *)((((v17 + 159) & 0xFFFFFFFFFFFFFFF8) + v16 + 56) & v12);
      if (v15 >= a1)
      {
        if (a1 + 1 <= v14)
        {
          if (a1 != -1 && a2 >= 2)
            return (*(uint64_t (**)(void *, _QWORD))(v13 + 56))(v19, a1 + 2);
        }
        else if ((_DWORD)a3)
        {
          if (a3 <= 3)
            v21 = a3;
          else
            v21 = 4;
          bzero(v19, a3);
          __asm { BR              X10 }
        }
      }
      else if ((_DWORD)v11)
      {
        if (v11 <= 3)
          v20 = v11;
        else
          v20 = 4;
        bzero(v19, v11);
        __asm { BR              X10 }
      }
    }
    else if ((a1 & 0x80000000) != 0)
    {
      *(_OWORD *)(v17 + 136) = 0u;
      *(_OWORD *)(v17 + 120) = 0u;
      *(_OWORD *)(v17 + 104) = 0u;
      *(_OWORD *)(v17 + 88) = 0u;
      *(_OWORD *)(v17 + 72) = 0u;
      *(_OWORD *)(v17 + 56) = 0u;
      *(_OWORD *)(v17 + 40) = 0u;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_QWORD *)v17 = a1 ^ 0x80000000;
    }
    else
    {
      *(_QWORD *)(v17 + 144) = a1 - 1;
    }
  }
  return result;
}

void sub_21B9D1474()
{
  _BYTE *v0;
  char v1;

  *v0 = v1;
}

void sub_21B9D14A8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21B9D14B8()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21B9D14C0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v4;
  size_t v5;

  if (!result)
    return MEMORY[0x24BEE4AF8];
  v2 = result;
  if (result >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v4 = swift_allocObject();
    v5 = _swift_stdlib_malloc_size((const void *)v4);
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = 2 * v5 - 64;
    *(_BYTE *)(v4 + 32) = a2;
    if (v2 != 1)
    {
      *(_BYTE *)(v4 + 33) = a2;
      if (v2 != 2)
        memset((void *)(v4 + 34), a2, v2 - 2);
    }
    return v4;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v6[2] = v3;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 80);
  v8 = a3(&v10, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : AnimationResource].Iterator._Variant();
  if (v8 != v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (REMaterialAssetType, ()));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 72 * a1 + 32;
    v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 520 * a1 + 32;
    v6 = a3 + 520 * v4;
    if (v5 >= v6 || v5 + 520 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 104 * a1 + 32;
    v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Terminatable, keyed: Bool));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 88 * a1 + 32;
    v6 = a3 + 88 * v4;
    if (v5 >= v6 || v5 + 88 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 160 * a1 + 32;
    v6 = a3 + 160 * v4;
    if (v5 >= v6 || v5 + 160 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKActiveSceneObserver);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + (a1 << 6) + 32;
    v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 112 * a1 + 32;
    v6 = a3 + 112 * v4;
    if (v5 >= v6 || v5 + 112 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                   - 8);
    v9 = *(unsigned __int8 *)(v8 + 80);
    v10 = *(_QWORD *)(v8 + 72);
    v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
    v12 = v10 * v4;
    v13 = a3 + v12;
    v14 = v11 + v12;
    if (v11 >= v13 || v14 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 176 * a1 + 32;
    v6 = a3 + 176 * v4;
    if (v5 >= v6 || v5 + 176 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAsset, [__REAssetDescriptor], OpaquePointer));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 144 * a1 + 32;
    v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, [(String, String)]));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape<PiecewiseBezierCurve>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 96 * a1 + 32;
    v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape<PiecewiseLinearPolygon<UnsafeMutableBufferPointer<SIMD2<Double>>>>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 48 * a1 + 32);
    v6 = 48 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 2 * a1 + 32);
    v6 = 2 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 24 * a1 + 32);
    v6 = 24 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 40 * a1 + 32);
    v6 = 40 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 80 * a1 + 32);
    v6 = 80 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + (a1 << 6) + 32);
    v6 = v4 << 6;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 40 * a1 + 32;
    v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined retain of FromToByAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<simd_quatf>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of FromToByAnimation<SIMD2<Float>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<SIMD2<Float>>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of FromToByAnimation<Float>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of FromToByAnimation<Float>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of AnimationLibraryComponent.AnimationCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v2, v3);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationError and conformance AnimationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationError and conformance AnimationError;
  if (!lazy protocol witness table cache variable for type AnimationError and conformance AnimationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationError, &type metadata for AnimationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationError and conformance AnimationError);
  }
  return result;
}

uint64_t outlined release of FromToByAnimation<BlendShapeWeights>(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 168);
  v11 = *(_QWORD *)(a1 + 208);
  v12 = *(_QWORD *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 224);
  v7 = *(_BYTE *)(a1 + 128);
  v8 = *(_BYTE *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v10, v6, v8);
  swift_release();
  a2(v11);
  a2(v12);
  a2(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of FromToByAnimation<Transform>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v6);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v4, v5, v7);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined retain of TimelineBaseProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget?(v2, v3, v4);
  swift_retain();
  return a1;
}

uint64_t outlined release of TimelineBaseProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v2, v3, v4);
  swift_release();
  return a1;
}

uint64_t outlined init with copy of __REAssetService(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined release of TimelineDefinition?(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t outlined retain of FromToByAnimation<Transform>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = *(_BYTE *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v2, v3, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with take of Transform?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of FromToByAnimation<JointTransforms>(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 168);
  v11 = *(_QWORD *)(a1 + 208);
  v12 = *(_QWORD *)(a1 + 216);
  v13 = *(_QWORD *)(a1 + 224);
  v7 = *(_BYTE *)(a1 + 128);
  v8 = *(_BYTE *)(a1 + 184);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v4, v5, v7);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of BindTarget?(v10, v6, v8);
  swift_retain();
  a2(v11);
  a2(v12);
  a2(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x220772DB8](a1, v6, a5);
}

unint64_t __RKEntityTriggerSpecification.init(decodeContext:)@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void **v3;
  void *v5;
  unint64_t result;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  void (*v35)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  id v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  uint64_t v49;
  _QWORD v50[6];
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;

  v3 = a1;
  v5 = *a1;
  result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7372656767697274, 0xE800000000000000, 0, *a1);
  if (v2)
  {

    swift_release();
    v60 = v3[3];
    outlined release of [String : String]((uint64_t)&v60);
    v59 = v3[4];
    outlined release of [String : String]((uint64_t)&v59);
    v58 = v3[5];
    v7 = &v58;
    return outlined release of [String : String]((uint64_t)v7);
  }
  v8 = result;
  v51 = MEMORY[0x24BEE4AF8];
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_6;
LABEL_30:
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_31;
LABEL_28:

    swift_release();
    v57 = v3[3];
    outlined release of [String : String]((uint64_t)&v57);
    v56 = v3[4];
    outlined release of [String : String]((uint64_t)&v56);
    v55 = v3[5];
    outlined release of [String : String]((uint64_t)&v55);
    *a2 = v36;
    type metadata accessor for __RKEntityTriggerSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  v9 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_30;
LABEL_6:
  if (v9 < 1)
  {
    __break(1u);
    return result;
  }
  v37 = v5;
  v38 = a2;
  v10 = 0;
  v48 = v3[1];
  v11 = v8 & 0xC000000000000001;
  v41 = v8;
  v42 = v3;
  v39 = v8 & 0xC000000000000001;
  v40 = v9;
  do
  {
    if (v11)
      v16 = (id)MEMORY[0x220769770](v10, v8);
    else
      v16 = *(id *)(v8 + 8 * v10 + 32);
    v17 = v16;
    v18 = objc_msgSend(v48, sel_objectAtPath_, v16, v37, v38);
    if (v18)
    {
      v19 = v18;
      objc_opt_self();
      v20 = swift_dynamicCastObjCClass();
      if (!v20)
        goto LABEL_12;
      v21 = (void *)v20;
      v23 = v3[2];
      v22 = v3[3];
      v25 = v3[4];
      v24 = v3[5];
      v46 = v19;
      v43 = v48;
      v45 = v23;
      swift_retain();
      v44 = v22;
      swift_bridgeObjectRetain();
      v26 = (uint64_t)v25;
      swift_bridgeObjectRetain();
      v47 = v24;
      swift_bridgeObjectRetain();
      v27 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 2, v21);
      v29 = v28;
      if (v28)
      {
        v30 = (uint64_t)v27;
        if (one-time initialization token for triggerTypeToTriggerSpecificationsGenerator != -1)
          swift_once();
        v31 = static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator;
        v32 = v26;
        if (*((_QWORD *)static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator + 2))
        {
          swift_bridgeObjectRetain();
          v33 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v29);
          if ((v34 & 1) != 0)
          {
            v35 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v31[7] + 16 * v33);
            swift_retain();
            swift_bridgeObjectRelease_n();
            v15 = v43;
            v50[0] = v21;
            v50[1] = v43;
            v50[2] = v45;
            v50[3] = v44;
            v50[4] = v32;
            v50[5] = v47;
            v35(&v49, v50);
            swift_release();
            v14 = v49;
            goto LABEL_11;
          }
          swift_bridgeObjectRelease();
        }
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_21BE411F0;
        *(_QWORD *)(v12 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v12 + 32) = v30;
        *(_QWORD *)(v12 + 40) = v29;
        type metadata accessor for OS_os_log();
        v13 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

        v14 = MEMORY[0x24BEE4AF8];
      }
      else
      {
        v14 = MEMORY[0x24BEE4AF8];
      }
      v15 = v43;
LABEL_11:
      specialized Array.append<A>(contentsOf:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      v8 = v41;
      v3 = v42;
      v11 = v39;
      v9 = v40;
LABEL_12:

    }
    ++v10;

  }
  while (v9 != v10);
  swift_bridgeObjectRelease();
  v36 = v51;
  v5 = v37;
  a2 = v38;
  if (*(_QWORD *)(v51 + 16))
    goto LABEL_28;
LABEL_31:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError();
  swift_allocError();
  swift_willThrow();

  swift_release();
  v54 = v3[3];
  outlined release of [String : String]((uint64_t)&v54);
  v53 = v3[4];
  outlined release of [String : String]((uint64_t)&v53);
  v52 = v3[5];
  v7 = &v52;
  return outlined release of [String : String]((uint64_t)v7);
}

void *one-time initialization function for triggerTypeToTriggerSpecificationsGenerator()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for triggerTypeToTriggerSpecificationsGenerator);
  static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator = result;
  return result;
}

unint64_t implicit closure #5 in variable initialization expression of static __RKEntityTriggerSpecification.triggerTypeToTriggerSpecificationsGenerator(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)a1;
  v2 = *(void **)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v4;
  v9 = MEMORY[0x24BEE4AF8];
  v10 = v5;
  v6 = v1;
  v7 = v2;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v12);
  outlined retain of [String : String]((uint64_t)&v11);
  outlined retain of [String : String]((uint64_t)&v10);
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 2, v6, v7, v3, v4, &v9, v3);
  swift_release();

  outlined release of [String : String]((uint64_t)&v12);
  outlined release of [String : String]((uint64_t)&v11);
  outlined release of [String : String]((uint64_t)&v10);
  return v9;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TriggerUSDLoadingError, &type metadata for __RKEntityTriggerSpecification.TriggerUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TriggerUSDLoadingError, &type metadata for __RKEntityTriggerSpecification.TriggerUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerUSDLoadingError and conformance __RKEntityTriggerSpecification.TriggerUSDLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t specialized static __RKEntityTriggerSpecification.generateCollisionTriggerSpecifications(decodeContext:)(void *a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4)
{
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v8 = MEMORY[0x24BEE4AF8];
  v11 = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x726564696C6C6F63uLL, 0xE900000000000073, 2, a1, a2, a3, a4, &v11);
  if (*(_QWORD *)(v11 + 16))
  {
    v10 = v8;
    specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 2, a1, a2, a3, a4, &v10, &v11);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityTriggerSpecification.TriggerUSDLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21B9D6090 + 4 * byte_21BE510F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21B9D60B0 + 4 * byte_21BE510F5[v4]))();
}

_BYTE *sub_21B9D6090(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21B9D60B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9D60B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9D60C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9D60C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9D60D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTriggerSpecification.TriggerUSDLoadingError()
{
  return &type metadata for __RKEntityTriggerSpecification.TriggerUSDLoadingError;
}

uint64_t IntrospectionDataCleanupHelper.__deallocating_deinit()
{
  RECIntrospectionFree();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for IntrospectionDataCleanupHelper()
{
  return objc_opt_self();
}

uint64_t specialized DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  Swift::String v0;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  return swift_bridgeObjectRelease();
}

uint64_t BindPath.parts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.TextureCoordinateTransformPath.offset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v3 = *(_QWORD **)v1;
  if (*(_QWORD *)(v1 + 8) == 1)
  {
    swift_bridgeObjectRetain_n();
    v4 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v6 = v4[2];
    v9 = v4[3];
    v7 = v6 + 1;
    if (v6 >= v9 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v6 + 1, 1, v4);
    v8 = 0xE900000000000031;
  }
  else
  {
    swift_bridgeObjectRetain_n();
    v4 = v3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v6 = v4[2];
    v5 = v4[3];
    v7 = v6 + 1;
    if (v6 >= v5 >> 1)
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
    v8 = 0xE800000000000000;
  }
  v4[2] = v7;
  v10 = &v4[3 * v6];
  v10[4] = 0x74657366664F7675;
  v10[5] = v8;
  *((_BYTE *)v10 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.baseColorTint.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51200;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.roughnessScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51210;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.metallicScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51220;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.specularScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51230;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.sheenTint.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51240;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.clearcoatScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51250;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.clearcoatRoughnessScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000017;
  v7[5] = 0x800000021BE81740;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.anisotropyLevelScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000014;
  v7[5] = 0x800000021BE817C0;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.anisotropyAngleScale.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000014;
  v7[5] = 0x800000021BE817E0;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.emissiveColor.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51260;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.emissiveIntensity.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51270;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.opacityThreshold.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  v7[4] = 0xD000000000000010;
  v7[5] = 0x800000021BE81760;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.MaterialPath.textureCoordinate.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.MaterialPath.secondaryTextureCoordinate.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 1;
  return swift_bridgeObjectRetain();
}

uint64_t BindTarget.MaterialPath.customValue.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = *v1;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v6 = v4[2];
  v5 = v4[3];
  if (v6 >= v5 >> 1)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
  v4[2] = v6 + 1;
  v7 = &v4[3 * v6];
  *((_OWORD *)v7 + 2) = xmmword_21BE51280;
  *((_BYTE *)v7 + 48) = 10;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.ScenePath.anchorEntity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD **v3;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((_BYTE *)v11 + 48) = 2;
  *a3 = v7;
  return result;
}

uint64_t BindTarget.EntityPath.transform.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v3 = *v1;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v3[2] = v6 + 1;
  v7 = &v3[3 * v6];
  v7[4] = 0;
  v7[5] = 0;
  *((_BYTE *)v7 + 48) = 12;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.jointTransforms.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  _QWORD *v7;

  v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  *(_QWORD *)&result = 1;
  v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_21BE41200;
  *((_BYTE *)v7 + 48) = 12;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeights()@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v3 = *v1;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v6 = v3[2];
  v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
    v3 = (_QWORD *)result;
  }
  v3[2] = v6 + 1;
  v7 = &v3[3 * v6];
  v7[4] = 0;
  v7[5] = 0;
  *((_BYTE *)v7 + 48) = 4;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeightsAtIndex(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v5 = *v2;
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v8 + 1;
  v9 = &v5[3 * v8];
  v9[4] = a1;
  v9[5] = 0;
  *((_BYTE *)v9 + 48) = 4;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.blendShapeWeightsWithID(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v3;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((_BYTE *)v11 + 48) = 5;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.billboardBlendFactor.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  _QWORD *v7;

  v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  *(_QWORD *)&result = 4;
  v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_21BE51290;
  *((_BYTE *)v7 + 48) = 12;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

double BindTarget.EntityPath.opacity.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  double result;
  _QWORD *v7;

  v3 = *v1;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  *(_QWORD *)&result = 2;
  v7 = &v3[3 * v5];
  *((_OWORD *)v7 + 2) = xmmword_21BE512A0;
  *((_BYTE *)v7 + 48) = 12;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.parameter(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v3;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((_BYTE *)v11 + 48) = 3;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 2;
  return result;
}

RealityFoundation::BindTarget::MaterialPath __swiftcall BindTarget.EntityPath.material(_:)(Swift::Int a1)
{
  _QWORD *v1;
  _QWORD **v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  RealityFoundation::BindTarget::MaterialPath result;

  v4 = v1;
  v5 = *v2;
  swift_bridgeObjectRetain_n();
  v6 = v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  v8 = v6[2];
  v7 = v6[3];
  if (v8 >= v7 >> 1)
    v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
  v6[2] = v8 + 1;
  v9 = &v6[3 * v8];
  v9[4] = a1;
  v9[5] = 0;
  *((_BYTE *)v9 + 48) = 9;
  result.bindPath.parts._rawValue = (void *)swift_bridgeObjectRelease();
  *v4 = v6;
  return result;
}

uint64_t BindTarget.EntityPath.self.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  *(_QWORD *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return swift_bridgeObjectRetain();
}

RealityFoundation::BindTarget::IkSolverPath __swiftcall BindTarget.EntityPath.ikSolver(_:)(RealityFoundation::IKComponent::Solver::ID_optional a1)
{
  _QWORD *v1;
  _QWORD **v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  RealityFoundation::BindTarget::IkSolverPath result;

  v3 = v1;
  v4 = *(_QWORD *)a1.value.nameHash;
  v5 = *(unsigned __int8 *)(a1.value.nameHash + 8);
  v6 = *v2;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v7[2] = v9 + 1;
  v10 = &v7[3 * v9];
  v10[4] = v4;
  v10[5] = v5;
  *((_BYTE *)v10 + 48) = 6;
  result.bindPath.parts._rawValue = (void *)swift_bridgeObjectRelease();
  *v3 = v7;
  return result;
}

uint64_t BindTarget.IkSolverPath.constraintTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v3 = *v1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRetain();
  v5 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[3 * v7];
  v8[4] = v4;
  v8[5] = 0;
  *((_BYTE *)v8 + 48) = 7;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.IkSolverPath.constraintLookAtTarget(_:)@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v3 = *v1;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  v4 = StringProtocol.hash.getter();
  swift_bridgeObjectRetain();
  v5 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
  v7 = v5[2];
  v6 = v5[3];
  if (v7 >= v6 >> 1)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
  v5[2] = v7 + 1;
  v8 = &v5[3 * v7];
  v8[4] = v4;
  v8[5] = 0;
  *((_BYTE *)v8 + 48) = 8;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 2;
  return result;
}

uint64_t BindTarget.EntityPath.skeletalPose(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD **v3;
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[3 * v10];
  v11[4] = a1;
  v11[5] = a2;
  *((_BYTE *)v11 + 48) = 11;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 2;
  return result;
}

uint64_t static BindTarget.scene(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 0;
  *a3 = v6;
  return swift_bridgeObjectRetain();
}

uint64_t static BindTarget.anchorEntity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 1;
  *a3 = v6;
  return swift_bridgeObjectRetain();
}

uint64_t static BindTarget.entity(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v6 + 32) = a1;
  *(_QWORD *)(v6 + 40) = a2;
  *(_BYTE *)(v6 + 48) = 2;
  *a3 = v6;
  return swift_bridgeObjectRetain();
}

double static BindTarget.material(_:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<BindPath.Part>);
  v4 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v4 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 9;
  *a2 = v4;
  return result;
}

RealityFoundation::InternalBindPath __swiftcall InternalBindPath.init(_:)(RealityFoundation::InternalBindPath result)
{
  RealityFoundation::InternalBindPath *v1;

  *v1 = result;
  return result;
}

void static InternalBindPath.bindPathVersion0(_:)(__int128 *a1)
{
  char v1;
  __int128 v2;
  char v3;

  v1 = *((_BYTE *)a1 + 16);
  v2 = *a1;
  v3 = v1;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v2);
}

unint64_t specialized static InternalBindPath.parameterNameFromPath<A>(_:)()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t result;
  void *v6;
  uint64_t v7;

  if (Substring.distance(from:to:)() < 3)
    return 0;
  if (Substring.subscript.getter() == 91 && v0 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) == 0)
      return 0;
  }
  v2 = Substring.index(before:)();
  if (Substring.subscript.getter() == 93 && v3 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0)
    return 0;
LABEL_10:
  result = Substring.index(after:)();
  if (v2 >> 14 >= result >> 14)
  {
    Substring.subscript.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    String.init<A>(_:)();
    String.utf8CString.getter();
    v6 = (void *)REBindKeyUnescape();
    swift_release();
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    return v7;
  }
  __break(1u);
  return result;
}

uint64_t static InternalBindPath.targetFromPath(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t countAndFlagsBits;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t object;
  unint64_t v14;
  Swift::String v15;
  BOOL v16;
  uint64_t v17;
  Swift::String v18;
  char v20;
  Swift::String v21;
  uint64_t result;
  char v23;
  unint64_t v24;
  Swift::String v25;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  Swift::String v32;
  char v33;
  __int128 v34;
  uint64_t *v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  Swift::String v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  Swift::String v109;
  Swift::String v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  unint64_t v127;
  Swift::String v128;
  Swift::String v129;
  char v130;
  Swift::String v131;
  char v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD v137[2];
  Swift::String v138;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (unint64_t)&v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(a1, a2, 46, 0xE100000000000000, 92, 0xE100000000000000);
  v12 = v11;
  object = *(_QWORD *)(v11 + 16);
  v14 = object - 2;
  if (object == 2)
  {
    v4 = 0xE90000000000006DLL;
    v15 = String.lowercased()();
    v16 = v15._countAndFlagsBits == 0x726F66736E617274 && v15._object == (void *)0xE90000000000006DLL;
    if (v16
      || (countAndFlagsBits = v15._countAndFlagsBits,
          object = (unint64_t)v15._object,
          (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
LABEL_21:
      if (*(_QWORD *)(v12 + 16) >= 2uLL)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v21 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v21._countAndFlagsBits == 0x726F66736E617274 && v21._object == (void *)0xE90000000000006DLL)
        {
          result = swift_bridgeObjectRelease();
LABEL_26:
          *(_QWORD *)a3 = 0;
          *(_QWORD *)(a3 + 8) = 0;
LABEL_27:
          *(_BYTE *)(a3 + 16) = 6;
          return result;
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_26;
        goto LABEL_111;
      }
      __break(1u);
      goto LABEL_128;
    }
    v136 = a1;
    a1 = 0xD000000000000015;
    if (v15._countAndFlagsBits == 0xD000000000000015 && v15._object == (void *)0x800000021BE826F0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      a1 = v136;
      goto LABEL_21;
    }
    if ((v15._countAndFlagsBits != 0x6C6174656C656B73 || v15._object != (void *)0xEC00000065736F70)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (v15._countAndFlagsBits != 0xD000000000000018 || v15._object != (void *)0x800000021BE82710)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if ((v15._countAndFlagsBits != 0x65756C617679656BLL || v15._object != (void *)0xE800000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && (v15._countAndFlagsBits != 0xD000000000000014 || v15._object != (void *)0x800000021BE82730)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_129;
      }
      swift_bridgeObjectRelease();
      a1 = v136;
      if (*(_QWORD *)(v12 + 16) >= 2uLL)
      {
        v66 = *(void **)(v12 + 56);
        v138._countAndFlagsBits = *(_QWORD *)(v12 + 48);
        v138._object = v66;
        strcpy((char *)v137, "keyValueStore");
        HIWORD(v137[1]) = -4864;
        v67 = type metadata accessor for Locale();
        (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v10, 1, 1, v67);
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        StringProtocol.range<A>(of:options:range:locale:)();
        v69 = v68;
        v71 = v70;
        outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v71 & 1) == 0)
        {
          v72 = *(_QWORD *)(v12 + 48);
          v73 = *(_QWORD *)(v12 + 56);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          specialized Collection.subscript.getter(v69, v72, v73);
          swift_bridgeObjectRelease();
          v74 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
          v76 = v75;
          result = swift_bridgeObjectRelease();
          v77 = HIBYTE(v76) & 0xF;
          if ((v76 & 0x2000000000000000) == 0)
            v77 = v74 & 0xFFFFFFFFFFFFLL;
          if (v77)
          {
            *(_QWORD *)a3 = v74;
            *(_QWORD *)(a3 + 8) = v76;
            *(_BYTE *)(a3 + 16) = 1;
            return result;
          }
        }
        goto LABEL_110;
      }
      __break(1u);
      goto LABEL_182;
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v12 + 16) >= 2uLL)
    {
      v32 = String.lowercased()();
      if (v32._countAndFlagsBits == 0xD000000000000010 && v32._object == (void *)0x800000021BE82790)
      {
        swift_bridgeObjectRelease();
LABEL_65:
        result = swift_bridgeObjectRelease();
        v34 = xmmword_21BE41200;
LABEL_66:
        *(_OWORD *)a3 = v34;
        goto LABEL_27;
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        goto LABEL_65;
      v37 = *(void **)(v12 + 56);
      v138._countAndFlagsBits = *(_QWORD *)(v12 + 48);
      v138._object = v37;
      strcpy((char *)v137, "skeletalposes");
      HIWORD(v137[1]) = -4864;
      v38 = type metadata accessor for Locale();
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v10, 1, 1, v38);
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol.range<A>(of:options:range:locale:)();
      v40 = v39;
      v42 = v41;
      outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v42 & 1) != 0)
        goto LABEL_38;
      v43 = *(_QWORD *)(v12 + 48);
      v44 = *(_QWORD *)(v12 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Collection.subscript.getter(v40, v43, v44);
      swift_bridgeObjectRelease();
      v45 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
      v47 = v46;
      result = swift_bridgeObjectRelease();
      v48 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000) == 0)
        v48 = v45 & 0xFFFFFFFFFFFFLL;
      a1 = v136;
      if (v48)
      {
        *(_QWORD *)a3 = v45;
        *(_QWORD *)(a3 + 8) = v47;
        *(_BYTE *)(a3 + 16) = 5;
        return result;
      }
LABEL_110:
      swift_bridgeObjectRelease();
      goto LABEL_111;
    }
    __break(1u);
LABEL_170:
    v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v93 & 1) != 0)
    {
LABEL_171:
      v106 = *(_QWORD *)(v12 + 16);
      if (object <= v106)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v131 = String.lowercased()();
        swift_bridgeObjectRelease();
        if (v131._countAndFlagsBits != 0x636146646E656C62 || v131._object != (void *)0xEB00000000726F74)
        {
          v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
          result = swift_bridgeObjectRelease();
          a2 = v135;
          a1 = v136;
          if ((v132 & 1) == 0)
            goto LABEL_111;
          goto LABEL_175;
        }
LABEL_174:
        result = swift_bridgeObjectRelease();
LABEL_175:
        v34 = xmmword_21BE51290;
        goto LABEL_66;
      }
LABEL_186:
      __break(1u);
LABEL_187:
      v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v106 > 1), a2, 1, (_QWORD *)v93);
LABEL_133:
      *(_QWORD *)(v93 + 16) = a2;
      v107 = v93 + 24 * a1;
      *(_QWORD *)(v107 + 32) = object;
      *(_QWORD *)(v107 + 40) = 0;
      *(_BYTE *)(v107 + 48) = 9;
      if (*(_QWORD *)(v12 + 16) < 2uLL)
      {
        __break(1u);
      }
      else
      {
        object = *(_QWORD *)(v12 + 48);
        a2 = *(_QWORD *)(v12 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v12 = *(_QWORD *)(v93 + 16);
        v10 = *(_QWORD *)(v93 + 24);
        a1 = v12 + 1;
        swift_bridgeObjectRetain();
        if (v12 < v10 >> 1)
        {
LABEL_135:
          *(_QWORD *)(v93 + 16) = a1;
          v108 = v93 + 24 * v12;
          *(_QWORD *)(v108 + 32) = object;
          *(_QWORD *)(v108 + 40) = a2;
          *(_BYTE *)(v108 + 48) = 10;
          result = swift_bridgeObjectRelease();
          *(_QWORD *)a3 = v93;
          goto LABEL_45;
        }
      }
      v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), a1, 1, (_QWORD *)v93);
      goto LABEL_135;
    }
LABEL_165:
    swift_bridgeObjectRelease();
    a2 = v135;
    a1 = v136;
    goto LABEL_111;
  }
  if (object < 3)
    goto LABEL_110;
  countAndFlagsBits = v11 + 32;
  static InternalBindPath.entityPathFromParts(_:)((uint64_t *)(v11 + 32), 0, (2 * v14) | 1, (unint64_t)&v138);
  if (v14 >= *(_QWORD *)(v12 + 16))
  {
LABEL_128:
    __break(1u);
LABEL_129:
    v93 = a1 + 6;
    v94._countAndFlagsBits = a1 + 6;
    v94._object = (void *)0x800000021BE82750;
    if (String.hasPrefix(_:)(v94))
    {
      v138._countAndFlagsBits = countAndFlagsBits;
      v138._object = (void *)object;
      v137[0] = a1 + 6;
      v137[1] = 0x800000021BE82750;
      v95 = type metadata accessor for Locale();
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v10, 1, 1, v95);
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.range<A>(of:options:range:locale:)();
      v97 = v96;
      v99 = v98;
      outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      if ((v99 & 1) == 0)
      {
        specialized Collection.subscript.getter(v97, countAndFlagsBits, object);
        v10 = v100;
        swift_bridgeObjectRelease();
        v101 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
        v103 = v102;
        swift_bridgeObjectRelease();
        v104 = specialized FixedWidthInteger.init(_:)(v101, v103);
        if ((v105 & 1) == 0)
        {
          object = v104;
          v93 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
          a1 = *(_QWORD *)(v93 + 16);
          v106 = *(_QWORD *)(v93 + 24);
          a2 = a1 + 1;
          if (a1 < v106 >> 1)
            goto LABEL_133;
          goto LABEL_187;
        }
        goto LABEL_38;
      }
      goto LABEL_150;
    }
    v109._object = (void *)(v4 - 9);
    v109._countAndFlagsBits = 0x72616F626C6C6962;
    if (String.hasPrefix(_:)(v109) || countAndFlagsBits == a1 && object == 0x800000021BE82770)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v93 & 1) == 0)
        goto LABEL_38;
    }
    v106 = *(_QWORD *)(v12 + 16);
    if (v106 >= 2)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v129 = String.lowercased()();
      swift_bridgeObjectRelease();
      if (v129._countAndFlagsBits != 0x636146646E656C62 || v129._object != (void *)0xEB00000000726F74)
      {
        v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
        result = swift_bridgeObjectRelease();
        a1 = v136;
        if ((v130 & 1) == 0)
          goto LABEL_111;
        goto LABEL_175;
      }
      goto LABEL_174;
    }
    __break(1u);
    goto LABEL_186;
  }
  v135 = a2;
  v136 = a1;
  v134 = (_QWORD *)v138._countAndFlagsBits;
  v17 = 0x726F66736E617274;
  v18 = String.lowercased()();
  if (v18._countAndFlagsBits == 0x726F66736E617274 && v18._object == (void *)0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    a2 = v135;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    a2 = v135;
    if ((v20 & 1) == 0)
    {
      v24 = 0xD000000000000015;
      if ((v18._countAndFlagsBits != 0xD000000000000015 || v18._object != (void *)0x800000021BE826F0)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v31 = v18._countAndFlagsBits == 0x6C6174656C656B73 && v18._object == (void *)0xEC00000065736F70;
        if (!v31
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          && (v18._countAndFlagsBits != 0xD000000000000018 || v18._object != (void *)0x800000021BE82710)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v18._countAndFlagsBits == 0x65756C617679656BLL && v18._object == (void *)0xE800000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
            || v18._countAndFlagsBits == 0xD000000000000014 && v18._object == (void *)0x800000021BE82730
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            if (object > *(_QWORD *)(v12 + 16))
            {
              __break(1u);
              goto LABEL_184;
            }
            v78 = countAndFlagsBits + 16 * object;
            v79 = *(_QWORD *)(v78 - 16);
            v80 = *(void **)(v78 - 8);
            v81 = (uint64_t *)(v78 - 16);
            v138._countAndFlagsBits = v79;
            v138._object = v80;
            strcpy((char *)v137, "keyValueStore");
            HIWORD(v137[1]) = -4864;
            v82 = type metadata accessor for Locale();
            (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v10, 1, 1, v82);
            lazy protocol witness table accessor for type String and conformance String();
            swift_bridgeObjectRetain();
            StringProtocol.range<A>(of:options:range:locale:)();
            v84 = v83;
            v86 = v85;
            outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v86 & 1) == 0)
            {
              v87 = *v81;
              v88 = v81[1];
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              specialized Collection.subscript.getter(v84, v87, v88);
              swift_bridgeObjectRelease();
              v12 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
              v24 = v89;
              swift_bridgeObjectRelease();
              v90 = HIBYTE(v24) & 0xF;
              if ((v24 & 0x2000000000000000) == 0)
                v90 = v12 & 0xFFFFFFFFFFFFLL;
              if (v90)
              {
                swift_bridgeObjectRetain();
                object = (unint64_t)v134;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
LABEL_123:
                  v92 = *(_QWORD *)(object + 16);
                  v91 = *(_QWORD *)(object + 24);
                  if (v92 >= v91 >> 1)
                    object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v91 > 1), v92 + 1, 1, (_QWORD *)object);
                  *(_QWORD *)(object + 16) = v92 + 1;
                  v64 = object + 24 * v92;
                  *(_QWORD *)(v64 + 32) = v12;
                  *(_QWORD *)(v64 + 40) = v24;
                  v65 = 3;
                  goto LABEL_99;
                }
LABEL_184:
                object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(object + 16) + 1, 1, (_QWORD *)object);
                goto LABEL_123;
              }
            }
LABEL_150:
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
          a2 = 0xD000000000000015;
          a1 = 0xD00000000000001BLL;
          v93 = 0x800000021BE82750;
          v110._countAndFlagsBits = 0xD00000000000001BLL;
          v110._object = (void *)0x800000021BE82750;
          if (!String.hasPrefix(_:)(v110))
          {
            swift_bridgeObjectRelease();
            v128._object = (void *)0xE900000000000064;
            v128._countAndFlagsBits = 0x72616F626C6C6962;
            if (String.hasPrefix(_:)(v128)
              || v18._countAndFlagsBits == 0xD000000000000015 && v18._object == (void *)0x800000021BE82770)
            {
              swift_bridgeObjectRelease();
              goto LABEL_171;
            }
            goto LABEL_170;
          }
          v138 = v18;
          v137[0] = 0xD00000000000001BLL;
          v137[1] = 0x800000021BE82750;
          v111 = type metadata accessor for Locale();
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v10, 1, 1, v111);
          lazy protocol witness table accessor for type String and conformance String();
          StringProtocol.range<A>(of:options:range:locale:)();
          v113 = v112;
          v115 = v114;
          outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
          swift_bridgeObjectRelease();
          if ((v115 & 1) != 0)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            specialized Collection.subscript.getter(v113, v18._countAndFlagsBits, (unint64_t)v18._object);
            swift_bridgeObjectRelease();
            v116 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
            v118 = v117;
            swift_bridgeObjectRelease();
            v119 = specialized FixedWidthInteger.init(_:)(v116, v118);
            if ((v120 & 1) == 0)
            {
              v121 = v119;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v134[2] + 1, 1, v134);
              v123 = v134[2];
              v122 = v134[3];
              v124 = v123 + 1;
              if (v123 >= v122 >> 1)
                v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v122 > 1), v123 + 1, 1, v134);
              v125 = v134;
              v134[2] = v124;
              v126 = &v125[3 * v123];
              v126[4] = v121;
              v126[5] = 0;
              *((_BYTE *)v126 + 48) = 9;
              if (object > *(_QWORD *)(v12 + 16))
              {
                __break(1u);
              }
              else
              {
                v127 = countAndFlagsBits + 16 * object;
                v123 = *(_QWORD *)(v127 - 16);
                v121 = *(_QWORD *)(v127 - 8);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v12 = v134[2];
                object = v134[3];
                v124 = v12 + 1;
                swift_bridgeObjectRetain();
                if (v12 < object >> 1)
                {
LABEL_149:
                  object = (unint64_t)v134;
                  v134[2] = v124;
                  v64 = object + 24 * v12;
                  *(_QWORD *)(v64 + 32) = v123;
                  *(_QWORD *)(v64 + 40) = v121;
                  v65 = 10;
LABEL_99:
                  *(_BYTE *)(v64 + 48) = v65;
                  result = swift_bridgeObjectRelease();
                  *(_QWORD *)a3 = object;
                  goto LABEL_45;
                }
              }
              v134 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(object > 1), v124, 1, v134);
              goto LABEL_149;
            }
          }
          swift_bridgeObjectRelease();
          goto LABEL_165;
        }
        swift_bridgeObjectRelease();
        if (object > *(_QWORD *)(v12 + 16))
        {
          __break(1u);
        }
        else
        {
          v35 = (uint64_t *)(countAndFlagsBits + 16 * object - 16);
          v36 = String.lowercased()();
          if (v36._countAndFlagsBits == 0xD000000000000010 && v36._object == (void *)0x800000021BE82790)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v49 & 1) == 0)
            {
              v52 = (void *)v35[1];
              v138._countAndFlagsBits = *v35;
              v138._object = v52;
              strcpy((char *)v137, "skeletalposes");
              HIWORD(v137[1]) = -4864;
              v53 = type metadata accessor for Locale();
              (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v10, 1, 1, v53);
              lazy protocol witness table accessor for type String and conformance String();
              swift_bridgeObjectRetain();
              StringProtocol.range<A>(of:options:range:locale:)();
              v55 = v54;
              v57 = v56;
              outlined destroy of BodyTrackingComponent?(v10, &demangling cache variable for type metadata for Locale?);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v57 & 1) == 0)
              {
                v58 = *v35;
                v59 = v35[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                specialized Collection.subscript.getter(v55, v58, v59);
                swift_bridgeObjectRelease();
                v12 = specialized static InternalBindPath.parameterNameFromPath<A>(_:)();
                v14 = v60;
                swift_bridgeObjectRelease();
                v61 = HIBYTE(v14) & 0xF;
                if ((v14 & 0x2000000000000000) == 0)
                  v61 = v12 & 0xFFFFFFFFFFFFLL;
                if (v61)
                {
                  swift_bridgeObjectRetain();
                  object = (unint64_t)v134;
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  {
LABEL_96:
                    v63 = *(_QWORD *)(object + 16);
                    v62 = *(_QWORD *)(object + 24);
                    if (v63 >= v62 >> 1)
                      object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, (_QWORD *)object);
                    *(_QWORD *)(object + 16) = v63 + 1;
                    v64 = object + 24 * v63;
                    *(_QWORD *)(v64 + 32) = v12;
                    *(_QWORD *)(v64 + 40) = v14;
                    v65 = 11;
                    goto LABEL_99;
                  }
LABEL_182:
                  object = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(object + 16) + 1, 1, (_QWORD *)object);
                  goto LABEL_96;
                }
              }
              goto LABEL_150;
            }
          }
          swift_bridgeObjectRelease();
          v17 = (uint64_t)v134;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
            goto LABEL_78;
        }
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, (_QWORD *)v17);
        v17 = result;
LABEL_78:
        v51 = *(_QWORD *)(v17 + 16);
        v50 = *(_QWORD *)(v17 + 24);
        if (v51 >= v50 >> 1)
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v50 > 1), v51 + 1, 1, (_QWORD *)v17);
          v17 = result;
        }
        *(_QWORD *)(v17 + 16) = v51 + 1;
        v30 = v17 + 24 * v51;
        *(_OWORD *)(v30 + 32) = xmmword_21BE41200;
LABEL_44:
        *(_BYTE *)(v30 + 48) = 12;
        *(_QWORD *)a3 = v17;
LABEL_45:
        *(_QWORD *)(a3 + 8) = 0;
        *(_BYTE *)(a3 + 16) = 2;
        return result;
      }
    }
    swift_bridgeObjectRelease();
  }
  if (object > *(_QWORD *)(v12 + 16))
  {
    __break(1u);
    goto LABEL_137;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v25._countAndFlagsBits == 0x726F66736E617274 && v25._object == (void *)0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    v17 = (uint64_t)v134;
LABEL_40:
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) != 0)
    {
LABEL_41:
      v29 = *(_QWORD *)(v17 + 16);
      v28 = *(_QWORD *)(v17 + 24);
      if (v29 >= v28 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v28 > 1), v29 + 1, 1, (_QWORD *)v17);
        v17 = result;
      }
      *(_QWORD *)(v17 + 16) = v29 + 1;
      v30 = v17 + 24 * v29;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 40) = 0;
      goto LABEL_44;
    }
LABEL_137:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1, (_QWORD *)v17);
    v17 = result;
    goto LABEL_41;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v17 = (uint64_t)v134;
  if ((v27 & 1) != 0)
    goto LABEL_40;
LABEL_38:
  swift_bridgeObjectRelease();
  a1 = v136;
LABEL_111:
  *(_QWORD *)a3 = a1;
  *(_QWORD *)(a3 + 8) = a2;
  *(_BYTE *)(a3 + 16) = 0;
  return swift_bridgeObjectRetain();
}

void static InternalBindPath.entityPathFromParts(_:)(uint64_t *a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD v45[2];
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = (char *)v45 - v14;
  v16 = a3 >> 1;
  v45[0] = a4;
  if (a3 >> 1 != a2)
  {
    if (a2 > 0 || a3 < 2)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v17 = a1[1];
    v48 = *a1;
    v49 = v17;
    v46 = 12079;
    v47 = 0xE200000000000000;
    v45[1] = lazy protocol witness table accessor for type String and conformance String();
    v18 = (_QWORD *)StringProtocol.components<A>(separatedBy:)();
    a3 = (unint64_t)v18;
    if (v18[2] == 2)
    {
      v19 = v18[4];
      v7 = v18[5];
      v20 = v19 == 0x3A65636976726573 && v7 == 0xE800000000000000;
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v6 = (unint64_t)a1;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        v21 = (void *)REBindKeyUnescape();
        swift_release();
        a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v7 = v22;
        swift_bridgeObjectRelease();

        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v4 = v5[2];
        v14 = v5[3];
        a4 = v4 + 1;
        if (v4 >= (unint64_t)v14 >> 1)
          goto LABEL_58;
        while (1)
        {
          v5[2] = a4;
          v23 = &v5[3 * v4];
          v23[4] = a3;
          v23[5] = v7;
          *((_BYTE *)v23 + 48) = 0;
          v4 = 1;
          a1 = (uint64_t *)v6;
LABEL_20:
          v14 = v16 - a2;
          if (__OFSUB__(v16, a2))
            break;
          if (v14 < v4)
            goto LABEL_54;
          if (v4 == v14)
            goto LABEL_23;
          if (v4 >= v14)
            goto LABEL_55;
          if (v4 >= v16)
            goto LABEL_56;
          if (v14 <= (uint64_t)v16)
          {
            v6 = v4 + a2 - v16;
            v4 = (uint64_t)&a1[2 * v4 + 1];
            while (1)
            {
              v29 = *(_QWORD *)(v4 - 8);
              v7 = *(_QWORD *)v4;
              if ((*(_QWORD *)v4 & 0x2000000000000000) != 0)
                v30 = HIBYTE(*(_QWORD *)v4) & 0xFLL;
              else
                v30 = v29 & 0xFFFFFFFFFFFFLL;
              if (v30)
              {
                v48 = *(_QWORD *)(v4 - 8);
                v49 = v7;
                v46 = 0x7365697469746E65;
                v47 = 0xE90000000000005BLL;
                v31 = type metadata accessor for Locale();
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v15, 1, 1, v31);
                swift_bridgeObjectRetain();
                a4 = StringProtocol.range<A>(of:options:range:locale:)();
                a3 = v32;
                a2 = v33;
                outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for Locale?);
                swift_bridgeObjectRelease();
                v34 = String.index(before:)();
                if ((a2 & 1) != 0 || a4 >= 0x4000)
                  goto LABEL_44;
                v16 = v34;
                if (String.subscript.getter() == 93 && v35 == 0xE100000000000000)
                {
                  swift_bridgeObjectRelease();
                }
                else
                {
                  a4 = v35;
                  a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if ((a2 & 1) == 0)
                    goto LABEL_44;
                }
                v14 = v16 >> 14;
                if (v16 >> 14 < a3 >> 14)
                {
                  __break(1u);
                  goto LABEL_52;
                }
                v37 = String.subscript.getter();
                MEMORY[0x220768CFC](v37);
                swift_bridgeObjectRelease();
                String.utf8CString.getter();
                v38 = (void *)REBindKeyUnescape();
                swift_release();
                v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                v40 = v39;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                v7 = v40;
              }
              else
              {
                v29 = 0;
                v7 = 0xE000000000000000;
              }
LABEL_44:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
              v42 = v5[2];
              v41 = v5[3];
              if (v42 >= v41 >> 1)
                v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v41 > 1), v42 + 1, 1, v5);
              v4 += 16;
              v5[2] = v42 + 1;
              v43 = &v5[3 * v42];
              v43[4] = v29;
              v43[5] = v7;
              *((_BYTE *)v43 + 48) = 2;
              if (__CFADD__(v6++, 1))
                goto LABEL_23;
            }
          }
LABEL_57:
          __break(1u);
LABEL_58:
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)((unint64_t)v14 > 1), a4, 1, v5);
        }
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      if (v19 == 0x3A656E656373 && v7 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        v24 = *(_QWORD *)(a3 + 48);
        v25 = *(_QWORD *)(a3 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        a3 = specialized static InternalBindPath.entityNameFromKey(_:)(v24, v25);
        v7 = v26;
        swift_bridgeObjectRelease();
        v4 = 1;
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
        v6 = v5[2];
        v27 = v5[3];
        a4 = v6 + 1;
        if (v6 >= v27 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v6 + 1, 1, v5);
        v5[2] = a4;
        v28 = &v5[3 * v6];
        v28[4] = a3;
        v28[5] = v7;
        *((_BYTE *)v28 + 48) = 1;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_20;
  }
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_23:
  *(_QWORD *)v45[0] = v5;
}

uint64_t BindableValue.init(_:animatedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a5 + *(int *)(type metadata accessor for BindableValue(0, a3, a4, a4) + 36);
  v10 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a5, a1, a3);
  v11 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, a2, v11);
}

uint64_t BindableValue.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v3 = v2;
  v6 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = type metadata accessor for Optional();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))((char *)&v18 - v14, v3 + *(int *)(a1 + 36), v11, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a1);
  v16 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(a2, v8, v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a1);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a2, v15, v10);
  }
}

uint64_t key path setter for BindableValue.value : <A>BindableValue<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a4 + a3 - 16);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v13 - v7;
  (*(void (**)(char *, __n128))(v9 + 16))((char *)&v13 - v7, v6);
  v11 = type metadata accessor for BindableValue(0, v4, v5, v10);
  return BindableValue.baseValue.setter(v8, v11);
}

void (*BindableValue.value.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x28uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *v5 = v2;
  v5[1] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[2] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[3] = malloc(v8);
  v9 = malloc(v8);
  v5[4] = v9;
  BindableValue.value.getter(a2, (uint64_t)v9);
  return BindableValue.value.modify;
}

void BindableValue.value.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[3];
  v4 = (void *)(*a1)[4];
  v5 = (*a1)[1];
  v6 = (*a1)[2];
  v7 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[3], v4, v5);
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 40))(v7, v3, v5);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 40))(**a1, v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t BindableValue.baseValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t BindableValue.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*BindableValue.baseValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BindableValue.animatedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t BindableValue.animatedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*BindableValue.animatedValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL BindableValue.isOverriden.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  _BOOL8 v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v11 - v7, v1 + *(int *)(a1 + 36), v4, v6);
  v9 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v8, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v9;
}

uint64_t BindableValuesReference.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v39)(uint64_t *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(char *, uint64_t, uint64_t);
  void (*v66)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v67;
  char *v68;
  uint64_t (*v69)(void);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  char v85[40];
  __int128 v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  char v91;

  v9 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v9);
  v75 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v63 - v12;
  v14 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v74 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v76 = (char *)&v63 - v18;
  v19 = *a1;
  v20 = a1[1];
  LODWORD(v81) = *((unsigned __int8 *)a1 + 16);
  v21 = *v4;
  v22 = swift_conformsToProtocol2();
  if (v22)
    v24 = v22;
  else
    v24 = 0;
  if (v22)
    v25 = a2;
  else
    v25 = 0;
  if (!v25)
    goto LABEL_10;
  v77 = a2;
  v73 = v14;
  v68 = v13;
  v78 = a3;
  v79 = a4;
  v71 = v19;
  v90[0] = v19;
  v90[1] = v20;
  v70 = v20;
  v91 = v81;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v90);
  v26 = *(uint64_t (**)(void))(v24 + 40);
  v72 = v21;
  v69 = v26;
  v27 = v26();
  swift_bridgeObjectRelease();
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 24);
  v29 = type metadata accessor for Optional();
  v80 = &v63;
  v30 = *(_QWORD *)(v29 - 8);
  v31 = MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v63 - v32;
  v28(v27, v25, v24, v31);
  v34 = *(_QWORD *)(v25 - 8);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  if (v35(v33, 1, v25) == 1)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
    REBindPointDestroy();
    a4 = v79;
    a3 = v78;
    a2 = v77;
LABEL_10:
    v36 = type metadata accessor for BindableValue(0, a2, a3, v23);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a4, 1, 1, v36);
  }
  v65 = (uint64_t (*)(char *, uint64_t, uint64_t))v35;
  v66 = v28;
  v63 = v30;
  v64 = v29;
  v67 = v27;
  v88 = v25;
  v89 = v24;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v86);
  v39 = *(void (**)(uint64_t *, char *, uint64_t))(v34 + 32);
  v39(boxed_opaque_existential_1, v33, v25);
  outlined init with take of BindableDataInternal(&v86, (uint64_t)v90);
  *(_QWORD *)&v86 = v71;
  *((_QWORD *)&v86 + 1) = v70;
  v87 = v81;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v86);
  v40 = v69();
  swift_bridgeObjectRelease();
  if (REBindPointIsOverrideEnabled())
  {
    v80 = (uint64_t *)v39;
    outlined init with copy of __REAssetService((uint64_t)v90, (uint64_t)&v86);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
    v41 = (uint64_t)v76;
    v42 = v77;
    v43 = swift_dynamicCast();
    v44 = v42;
    v45 = MEMORY[0x24BDAC7A8](v43);
    v47 = (char *)&v63 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
    v81 = v40;
    v66(v40, v25, v24, v45);
    v48 = v65(v47, 1, v25);
    v49 = v78;
    v50 = (uint64_t)v68;
    if (v48 == 1)
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v47, v64);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v50, 1, 1, v44);
    }
    else
    {
      v83 = v25;
      v84 = v24;
      v59 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v82);
      ((void (*)(uint64_t *, char *, uint64_t))v80)(v59, v47, v25);
      outlined init with take of BindableDataInternal(&v82, (uint64_t)v85);
      swift_dynamicCast();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v50, 0, 1, v44);
    }
    v60 = v79;
    BindableValue.init(_:animatedValue:)(v41, v50, v44, v49, v79);
    v62 = type metadata accessor for BindableValue(0, v44, v49, v61);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v60, 0, 1, v62);
    REBindPointDestroy();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    return REBindPointDestroy();
  }
  else
  {
    outlined init with copy of __REAssetService((uint64_t)v90, (uint64_t)&v86);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
    v51 = (uint64_t)v74;
    v52 = v77;
    swift_dynamicCast();
    v53 = v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v75, 1, 1, v52);
    v54 = v79;
    v55 = (uint64_t)v53;
    v56 = v78;
    BindableValue.init(_:animatedValue:)(v51, v55, v52, v78, v79);
    v58 = type metadata accessor for BindableValue(0, v52, v56, v57);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v54, 0, 1, v58);
    REBindPointDestroy();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
    return REBindPointDestroy();
  }
}

uint64_t BindableValuesReference.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD v73[2];
  unsigned __int8 v74;
  uint64_t v75;
  uint64_t v76;

  v69 = type metadata accessor for Optional();
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x24BDAC7A8](v69);
  v68 = (char *)&v59 - v9;
  v70 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v64 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v66 = (char *)&v59 - v13;
  v71 = a4;
  v15 = type metadata accessor for BindableValue(255, a4, a5, v14);
  v16 = type metadata accessor for Optional();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v59 - v18;
  v20 = *(_QWORD *)(v15 - 8);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v72 = (char *)&v59 - v23;
  v25 = *(_QWORD *)a2;
  v24 = *(_QWORD *)(a2 + 8);
  v26 = *(_BYTE *)(a2 + 16);
  v27 = a1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v19, a1, v16, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, v15) == 1)
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v28(a1, v16);
    outlined consume of BindTarget(v25, v24, v26);
    return ((uint64_t (*)(char *, uint64_t))v28)(v19, v16);
  }
  else
  {
    v30 = v70;
    v63 = v17;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v72, v19, v15);
    v31 = v71;
    v32 = swift_conformsToProtocol2();
    if (v32)
      v33 = v32;
    else
      v33 = 0;
    if (!v32)
      v31 = 0;
    if (v31)
    {
      v60 = v20;
      v61 = v16;
      v62 = v27;
      v34 = v25;
      v73[0] = v25;
      v73[1] = v24;
      v74 = v26;
      specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v73);
      v35 = v30;
      v37 = v36;
      v39 = v38;
      outlined consume of BindTarget(v34, v24, v26);
      v40 = v37;
      v41 = v35;
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 40))(v40, v39, *v65, 1, 0, v31, v33);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
      v44 = v66;
      v45 = v71;
      v46 = v72;
      v59 = v43;
      v43(v66, v72, v71);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
      swift_dynamicCast();
      v47 = v75;
      v48 = v76;
      __swift_project_boxed_opaque_existential_1(v73, v75);
      v49 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 8);
      v65 = (_QWORD *)v42;
      v49(v42, 0, v47, v48);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      v51 = v67;
      v50 = v68;
      v52 = v69;
      (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v68, &v46[*(int *)(v15 + 36)], v69);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v50, 1, v45) == 1)
      {
        (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v52);
      }
      else
      {
        v54 = v64;
        v55 = v50;
        v56 = v71;
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v64, v55, v71);
        v59(v44, v54, v56);
        swift_dynamicCast();
        v57 = v75;
        v58 = v76;
        __swift_project_boxed_opaque_existential_1(v73, v75);
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v58 + 8))(v65, 1, v57, v58);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v54, v56);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      }
      v16 = v61;
      v27 = v62;
      v53 = v63;
      REBindPointDestroy();
      v20 = v60;
    }
    else
    {
      outlined consume of BindTarget(v25, v24, v26);
      v53 = v63;
      v46 = v72;
    }
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v27, v16);
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v46, v15);
  }
}

void (*BindableValuesReference.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v21[2];
  unsigned __int8 v22;
  uint64_t v23;

  v11 = malloc(0x58uLL);
  *a1 = v11;
  v11[2] = a5;
  v11[3] = v5;
  *v11 = a3;
  v11[1] = a4;
  type metadata accessor for BindableValue(255, a4, a5, v12);
  v13 = type metadata accessor for Optional();
  v11[4] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v11[5] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v11[6] = malloc(v15);
  v16 = malloc(v15);
  v17 = *(_QWORD *)a2;
  v18 = *(_QWORD *)(a2 + 8);
  v11[7] = v16;
  v11[8] = v17;
  v11[9] = v18;
  v19 = *(_BYTE *)(a2 + 16);
  *((_BYTE *)v11 + 80) = v19;
  v23 = *v5;
  v21[0] = v17;
  v21[1] = v18;
  v22 = v19;
  outlined copy of BindTarget(v17, v18, v19);
  BindableValuesReference.subscript.getter(v21, a4, a5, (uint64_t)v16);
  return BindableValuesReference.subscript.modify;
}

void BindableValuesReference.subscript.modify(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = *(_QWORD **)a1;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 80);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  v7 = *(void **)(*(_QWORD *)a1 + 48);
  v8 = *(void **)(*(_QWORD *)a1 + 56);
  if ((a2 & 1) != 0)
  {
    v9 = v3[4];
    v10 = v3[5];
    v11 = v3[2];
    v12 = v3[1];
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
    v16 = v6;
    v17 = v5;
    v18 = v4;
    BindableValuesReference.subscript.setter((uint64_t)v7, (uint64_t)&v16, v13, v12, v11);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v8, v9);
  }
  else
  {
    v14 = v3[2];
    v15 = v3[1];
    v16 = *(_QWORD *)(*(_QWORD *)a1 + 64);
    v17 = v5;
    v18 = v4;
    BindableValuesReference.subscript.setter((uint64_t)v8, (uint64_t)&v16, a3, v15, v14);
  }
  free(v8);
  free(v7);
  free(v3);
}

void (*ParameterSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t *v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v20[2];
  char v21;
  uint64_t v22;

  v13 = malloc(0x50uLL);
  *a1 = v13;
  v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *v13 = a2;
  v13[1] = a3;
  type metadata accessor for BindableValue(255, a5, a6, v14);
  v15 = type metadata accessor for Optional();
  v13[6] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v13[7] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v13[8] = malloc(v17);
  v18 = malloc(v17);
  v13[9] = v18;
  v22 = *v6;
  v20[0] = a2;
  v20[1] = a3;
  v21 = 1;
  BindableValuesReference.subscript.getter(v20, a5, a6, (uint64_t)v18);
  return ParameterSet.subscript.modify;
}

void ParameterSet.subscript.modify(uint64_t **a1, char a2)
{
  ParameterSet.subscript.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))ParameterSet.subscript.setter);
}

uint64_t (*Entity.bindableValues.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t ParameterSet.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v7[2];
  char v8;
  uint64_t v9;

  v9 = *v5;
  v7[0] = a1;
  v7[1] = a2;
  v8 = 1;
  return BindableValuesReference.subscript.getter(v7, a3, a4, a5);
}

uint64_t ParameterSet.subscript.setter(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(char *, char *, uint64_t);
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t result;
  char *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, __n128);
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  _QWORD v60[2];
  char v61;
  uint64_t v62;
  uint64_t v63;

  v51 = a2;
  v55 = a3;
  v49 = a6;
  v8 = type metadata accessor for BindableValue(255, a5, a6, a4);
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v53 = (char *)&v47 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v54 = (char *)&v47 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v47 - v17;
  v19 = *(_QWORD *)(a5 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1;
  v56 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  v56(v18, (uint64_t)a1, v9, v21);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v18, 1, v8);
  v52 = v25;
  if (v27 == 1)
  {
    v28 = a5;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
LABEL_6:
    v59 = 0;
    v57 = 0u;
    v58 = 0u;
    v29 = v24;
    v30 = v54;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v18, a5);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
  v28 = a5;
  if (!swift_dynamicCast())
    goto LABEL_6;
  v29 = v24;
  v30 = v54;
  if (*((_QWORD *)&v58 + 1))
  {
    outlined init with take of BindableDataInternal(&v57, (uint64_t)v60);
    v31 = v62;
    v32 = v63;
    __swift_project_boxed_opaque_existential_1(v60, v62);
    v33 = v32;
    v34 = *(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56);
    v35 = v55;
    v34(v51, v55, *v50, v31, v33);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    v36 = v28;
    goto LABEL_8;
  }
LABEL_7:
  outlined destroy of BodyTrackingComponent?((uint64_t)&v57, &demangling cache variable for type metadata for BindableDataInternal?);
  v36 = v28;
  v35 = v55;
LABEL_8:
  v37 = v26(v29, 1, v8);
  v38 = (void (*)(char *, char *, uint64_t))v56;
  ((void (*)(char *, char *, uint64_t))v56)(v30, v29, v9);
  if (v37 == 1)
  {
    v39 = *(void (**)(char *, uint64_t))(v10 + 8);
    v39(v30, v9);
    goto LABEL_13;
  }
  v40 = v53;
  v38(v53, v30, v9);
  result = v26(v40, 1, v8);
  if ((_DWORD)result != 1)
  {
    v42 = v40;
    v43 = BindableValue.isOverriden.getter(v8);
    v39 = *(void (**)(char *, uint64_t))(v10 + 8);
    v39(v30, v9);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v8);
    if (v43)
    {
      v44 = *v50;
      v45 = (uint64_t)v48;
      ((void (*)(char *, char *, uint64_t))v56)(v48, v29, v9);
      v60[0] = v51;
      v60[1] = v35;
      v61 = 1;
      *(_QWORD *)&v57 = v44;
      swift_retain();
      BindableValuesReference.subscript.setter(v45, (uint64_t)v60, v46, v36, v49);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v39)(v29, v9);
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return ((uint64_t (*)(char *, uint64_t))v39)(v29, v9);
  }
  __break(1u);
  return result;
}

void (*Entity.ParameterSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t *v6;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  uint64_t v20[2];
  char v21;
  uint64_t v22;

  v13 = malloc(0x50uLL);
  *a1 = v13;
  v13[4] = a6;
  v13[5] = v6;
  v13[2] = a4;
  v13[3] = a5;
  *v13 = a2;
  v13[1] = a3;
  type metadata accessor for BindableValue(255, a5, a6, v14);
  v15 = type metadata accessor for Optional();
  v13[6] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v13[7] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v13[8] = malloc(v17);
  v18 = malloc(v17);
  v13[9] = v18;
  v22 = *v6;
  v20[0] = a2;
  v20[1] = a3;
  v21 = 1;
  BindableValuesReference.subscript.getter(v20, a5, a6, (uint64_t)v18);
  return Entity.ParameterSet.subscript.modify;
}

void Entity.ParameterSet.subscript.modify(uint64_t **a1, char a2)
{
  ParameterSet.subscript.modify(a1, a2, (void (*)(void *, uint64_t, uint64_t))Entity.ParameterSet.subscript.setter);
}

void ParameterSet.subscript.modify(uint64_t **a1, char a2, void (*a3)(void *, uint64_t, uint64_t))
{
  uint64_t *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = (void *)(*a1)[8];
  v6 = (void *)(*a1)[9];
  if ((a2 & 1) != 0)
  {
    v7 = v4[6];
    v8 = v4[7];
    v10 = *v4;
    v9 = v4[1];
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v5, v6, v7);
    swift_bridgeObjectRetain();
    a3(v5, v10, v9);
    (*(void (**)(void *, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v12 = *v4;
    v11 = v4[1];
    swift_bridgeObjectRetain();
    a3(v6, v12, v11);
  }
  free(v6);
  free(v5);
  free(v4);
}

uint64_t Entity.parameters.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t Entity.bindableValues.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_release();
  if (v2 != v1)
    __break(1u);
  return result;
}

uint64_t (*Entity.parameters.modify(_QWORD *a1))()
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return Entity.bindableValues.modify;
}

uint64_t Entity.bindableValues.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    if (v3 == v4)
      return result;
    __break(1u);
  }
  if (v3 != v4)
    __break(1u);
  return result;
}

uint64_t Entity.subscript.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t SceneNullable;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;

  v2 = v1;
  v3 = *a1;
  v50 = *(_QWORD *)(*a1 + 16);
  if (!v50)
  {
    swift_retain();
    return v2;
  }
  v49 = v3 + 32;
  result = swift_retain();
  v5 = 0;
  v48 = v3;
  while (1)
  {
    if (!v2)
      return v2;
    if (v5 >= *(_QWORD *)(v3 + 16))
      goto LABEL_66;
    v9 = v49 + 24 * v5;
    v11 = *(_QWORD *)v9;
    v10 = *(_QWORD *)(v9 + 8);
    v12 = *(unsigned __int8 *)(v9 + 16);
    if (*(_BYTE *)(v9 + 16))
      break;
    swift_retain();
    outlined copy of BindPath.Part(v11, v10, 0);
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v23 = SceneNullable;
      if ((id)RESceneGetSwiftObject())
      {
        swift_release();
        type metadata accessor for Scene();
        v24 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        type metadata accessor for Scene();
        v24 = swift_allocObject();
        *(_OWORD *)(v24 + 24) = 0u;
        *(_OWORD *)(v24 + 40) = 0u;
        *(_QWORD *)(v24 + 56) = 0;
        swift_unknownObjectWeakInit();
        *(_QWORD *)(v24 + 104) = 0;
        *(_OWORD *)(v24 + 88) = 0u;
        *(_OWORD *)(v24 + 72) = 0u;
        swift_weakInit();
        *(_OWORD *)(v24 + 216) = 0u;
        *(_OWORD *)(v24 + 200) = 0u;
        *(_OWORD *)(v24 + 184) = 0u;
        *(_OWORD *)(v24 + 168) = 0u;
        *(_OWORD *)(v24 + 152) = 0u;
        *(_OWORD *)(v24 + 136) = 0u;
        *(_OWORD *)(v24 + 120) = 0u;
        RERetain();
        *(_QWORD *)(v24 + 16) = v23;
        RESceneSetSwiftObject();
        swift_release();
      }
      v51 = v24;
      v52 = 0;
      swift_retain();
      if (Scene.AnchorCollection.endIndex.getter() >= 1)
      {
        v43 = 0;
        while (1)
        {
          v27 = Scene.AnchorCollection.subscript.getter(v43);
          if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 128))(v27) == v11 && v10 == v44)
          {
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_60;
          }
          v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v46 & 1) != 0)
            break;
          ++v43;
          swift_release();
          if (v43 >= Scene.AnchorCollection.endIndex.getter())
            goto LABEL_52;
        }
        swift_release();
        swift_release();
LABEL_60:
        swift_release();
        v28 = v11;
        v29 = v10;
        v30 = 0;
        goto LABEL_61;
      }
LABEL_52:
      swift_release();
    }
    swift_release_n();
    v6 = v11;
    v7 = v10;
    v8 = 0;
LABEL_5:
    result = outlined consume of BindPath.Part(v6, v7, v8);
    v2 = 0;
LABEL_6:
    if (++v5 == v50)
      return v2;
  }
  if (v12 == 1)
  {
    swift_retain();
    outlined copy of BindPath.Part(v11, v10, 1u);
    v25 = Entity.anchor.getter();
    swift_release();
    if (v25)
    {
      HasHierarchy.children.getter(&v51);
      swift_release();
      v26 = v51;
      outlined copy of BindPath.Part(v11, v10, 1u);
      v27 = specialized Sequence.first(where:)(v26, v11, v10);
      v3 = v48;
      outlined consume of BindPath.Part(v11, v10, 1u);
      swift_release();
      swift_release();
      v28 = v11;
      v29 = v10;
      v30 = 1;
LABEL_61:
      result = outlined consume of BindPath.Part(v28, v29, v30);
      v2 = v27;
      goto LABEL_6;
    }
    swift_release();
    v6 = v11;
    v7 = v10;
    v8 = 1;
    goto LABEL_5;
  }
  if (v12 != 2)
  {
    v51 = 0;
    v52 = 0xE000000000000000;
    outlined copy of BindPath.Part(v11, v10, v12);
    _StringGuts.grow(_:)(63);
    v54 = v51;
    v55 = v52;
    v31._countAndFlagsBits = 0xD000000000000026;
    v31._object = (void *)0x800000021BE82370;
    String.append(_:)(v31);
    v51 = v5;
    v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 10272;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    v51 = v11;
    v52 = v10;
    v53 = v12;
    _print_unlocked<A, B>(_:_:)();
    v34._countAndFlagsBits = 0xD000000000000013;
    v34._object = (void *)0x800000021BE823A0;
    String.append(_:)(v34);
    v36 = v54;
    v35 = v55;
    if (one-time initialization token for logger != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static AnimationLogger.logger);
    swift_bridgeObjectRetain_n();
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc();
      v47 = v36;
      v41 = swift_slowAlloc();
      v51 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v40 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v35, &v51);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v38, v39, "%s", (uint8_t *)v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v41, -1, -1);
      v42 = v40;
      v3 = v48;
      MEMORY[0x220772F44](v42, -1, -1);
      swift_bridgeObjectRelease();

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_release();
    v6 = v11;
    v7 = v10;
    v8 = v12;
    goto LABEL_5;
  }
  swift_retain_n();
  outlined copy of BindPath.Part(v11, v10, 2u);
  if (REEntityGetChildCount() < 1)
  {
LABEL_40:
    swift_release_n();
    v2 = 0;
LABEL_57:
    result = outlined consume of BindPath.Part(v11, v10, 2u);
    goto LABEL_6;
  }
  v13 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v13 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_68;
    v14 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v15 = swift_dynamicCastClassUnconditional();
LABEL_18:
      v16 = v15;
      goto LABEL_22;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      goto LABEL_67;
    v17 = specialized static Entity.entityInfoType(_:)(v14);
    if (!v17)
    {
      v15 = makeEntity(for:)(v14);
      goto LABEL_18;
    }
    v16 = (*(uint64_t (**)(void))(v17 + 232))();
    v18 = *(_QWORD *)(v16 + 16);
    swift_retain();
    MEMORY[0x22076D160](v18, 0);
    *(_QWORD *)(v16 + 16) = v14;
    MEMORY[0x22076D160](v14, v16);
    swift_release();
LABEL_22:
    result = REEntityGetChildCount();
    if (v13 >= result)
      goto LABEL_65;
    REEntityGetName();
    if (String.init(cString:)() == v11 && v10 == v19)
    {
      swift_release_n();
      swift_bridgeObjectRelease();
LABEL_56:
      swift_release();
      v2 = v16;
      goto LABEL_57;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
    {
      swift_release_n();
      goto LABEL_56;
    }
    ++v13;
    swift_release();
    if (v13 >= REEntityGetChildCount())
      goto LABEL_40;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  swift_bridgeObjectRetain();
  v8 = String.subscript.getter();
  v10 = v9;
  v12 = v11;
  v14 = v13;
  result = swift_bridgeObjectRelease();
  v16 = v8 >> 14;
  v17 = v10 >> 14;
  if (v8 >> 14 == v10 >> 14)
  {
    v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_3:
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
  v62 = a3;
  v63 = a4;
  v18 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (2)
  {
    v23 = v10;
    if (v17 == v8 >> 14)
      goto LABEL_26;
    v58 = v16;
    v59 = v18;
    swift_bridgeObjectRetain();
    v24 = 0;
    v23 = v8;
    do
    {
      swift_bridgeObjectRetain();
      v25 = Substring.index(after:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v26 = Substring.subscript.getter();
      v28 = v27;
      swift_bridgeObjectRelease();
      if (a6)
      {
        if (v26 == a5 && v28 == a6)
        {
          swift_bridgeObjectRelease();
LABEL_10:
          v24 ^= 1u;
          goto LABEL_11;
        }
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      v30 = Substring.subscript.getter();
      v32 = v31;
      swift_bridgeObjectRelease();
      if (v30 == v62 && v32 == v63)
      {
        swift_bridgeObjectRelease();
LABEL_22:
        if ((v24 & 1) == 0)
          goto LABEL_25;
        goto LABEL_23;
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        goto LABEL_22;
LABEL_23:
      v24 = 0;
LABEL_11:
      v23 = v25;
    }
    while (v17 != v25 >> 14);
    v23 = v10;
LABEL_25:
    result = swift_bridgeObjectRelease();
    v16 = v58;
    v18 = v59;
LABEL_26:
    if (v23 >> 14 == v17)
    {
      v34 = MEMORY[0x220768CFC](v8, v10, v12, v14);
      v36 = v35;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
      v38 = v18[2];
      v37 = v18[3];
      if (v38 >= v37 >> 1)
        v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v18);
      v18[2] = v38 + 1;
      v19 = &v18[2 * v38];
      v19[4] = v34;
      v19[5] = v36;
      result = MEMORY[0x2207694D0](0, 0xE000000000000000);
      v8 = result;
      v10 = v20;
      v12 = v21;
      v14 = v22;
LABEL_6:
      v16 = v8 >> 14;
      v17 = v10 >> 14;
      if (v8 >> 14 == v10 >> 14)
        goto LABEL_3;
      continue;
    }
    break;
  }
  if (v23 >> 14 < v16)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    v60 = Substring.subscript.getter();
    v40 = v39;
    v42 = v41;
    v43 = v18;
    v45 = v44;
    swift_bridgeObjectRelease();
    v46 = MEMORY[0x220768CFC](v60, v40, v42, v45);
    v61 = v47;
    v48 = v43;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
    v50 = v48[2];
    v49 = v48[3];
    if (v50 >= v49 >> 1)
      v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v48[2] = v50 + 1;
    v51 = v48;
    v52 = &v48[2 * v50];
    v52[4] = v46;
    v52[5] = v61;
    swift_bridgeObjectRetain();
    v53 = Substring.index(after:)();
    result = swift_bridgeObjectRelease();
    if (v17 >= v53 >> 14)
    {
      v8 = Substring.subscript.getter();
      v10 = v54;
      v12 = v55;
      v57 = v56;
      result = swift_bridgeObjectRelease();
      v14 = v57;
      v18 = v51;
      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized static InternalBindPath.entityNameFromKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[4];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) != 0)
    v7 = HIBYTE(a2) & 0xF;
  else
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v7)
    return 0;
  v21[2] = a1;
  v21[3] = a2;
  v21[0] = 0x7365697469746E65;
  v21[1] = 0xE90000000000005BLL;
  v8 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  lazy protocol witness table accessor for type String and conformance String();
  v9 = StringProtocol.range<A>(of:options:range:locale:)();
  v11 = v10;
  v13 = v12;
  outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
  swift_bridgeObjectRelease();
  v14 = String.index(before:)();
  if ((v13 & 1) != 0 || v9 >> 14)
    goto LABEL_14;
  v15 = v14;
  if (String.subscript.getter() == 93 && v16 == 0xE100000000000000)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    return a1;
  }
LABEL_12:
  if (v15 >> 14 >= v11 >> 14)
  {
    v19 = String.subscript.getter();
    MEMORY[0x220768CFC](v19);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    v20 = (void *)REBindKeyUnescape();
    swift_release();
    a1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();

    return a1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static BindPath.Part.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v9;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  switch(v4)
  {
    case 0u:
      if (*(_BYTE *)(a2 + 16))
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 0);
      outlined copy of BindPath.Part(v5, v6, 0);
      outlined consume of BindPath.Part(v2, v3, 0);
      outlined consume of BindPath.Part(v5, v6, 0);
      return v9 & 1;
    case 1u:
      if (v7 != 1)
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 1u);
      outlined copy of BindPath.Part(v5, v6, 1u);
      outlined consume of BindPath.Part(v2, v3, 1u);
      outlined consume of BindPath.Part(v5, v6, 1u);
      return v9 & 1;
    case 2u:
      if (v7 != 2)
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 2u);
      outlined copy of BindPath.Part(v5, v6, 2u);
      outlined consume of BindPath.Part(v2, v3, 2u);
      outlined consume of BindPath.Part(v5, v6, 2u);
      return v9 & 1;
    case 3u:
      if (v7 != 3)
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 3u);
      outlined copy of BindPath.Part(v5, v6, 3u);
      outlined consume of BindPath.Part(v2, v3, 3u);
      outlined consume of BindPath.Part(v5, v6, 3u);
      return v9 & 1;
    case 6u:
      if (v7 != 6)
        goto LABEL_67;
      outlined consume of BindPath.Part(*(_QWORD *)a1, v3, 6u);
      outlined consume of BindPath.Part(v5, v6, 6u);
      v14 = (v6 & 1) == 0 && v2 == v5;
      if ((v3 & 1) != 0)
        v9 = v6 & 1;
      else
        v9 = v14;
      return v9 & 1;
    case 7u:
      if (v7 != 7)
        goto LABEL_67;
      outlined consume of BindPath.Part(*(_QWORD *)a1, v3, 7u);
      v15 = v5;
      v16 = v6;
      v17 = 7;
      goto LABEL_42;
    case 8u:
      if (v7 != 8)
        goto LABEL_67;
      outlined consume of BindPath.Part(*(_QWORD *)a1, v3, 8u);
      v15 = v5;
      v16 = v6;
      v17 = 8;
      goto LABEL_42;
    case 9u:
      if (v7 != 9)
        goto LABEL_67;
      outlined consume of BindPath.Part(*(_QWORD *)a1, v3, 9u);
      v15 = v5;
      v16 = v6;
      v17 = 9;
LABEL_42:
      outlined consume of BindPath.Part(v15, v16, v17);
      v9 = v2 == v5;
      break;
    case 0xAu:
      if (v7 != 10)
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 0xAu);
      outlined copy of BindPath.Part(v5, v6, 0xAu);
      outlined consume of BindPath.Part(v2, v3, 0xAu);
      outlined consume of BindPath.Part(v5, v6, 0xAu);
      break;
    case 0xBu:
      if (v7 != 11)
        goto LABEL_67;
      if (v2 == v5 && v3 == v6)
        v9 = 1;
      else
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of BindPath.Part(v2, v3, 0xBu);
      outlined copy of BindPath.Part(v5, v6, 0xBu);
      outlined consume of BindPath.Part(v2, v3, 0xBu);
      outlined consume of BindPath.Part(v5, v6, 0xBu);
      break;
    case 0xCu:
      if (v2 <= 4)
        __asm { BR              X9 }
      goto LABEL_67;
    default:
LABEL_67:
      outlined copy of BindPath.Part(*(_QWORD *)a1, v3, v4);
      outlined copy of BindPath.Part(v5, v6, v7);
      outlined consume of BindPath.Part(v2, v3, v4);
      outlined consume of BindPath.Part(v5, v6, v7);
      v9 = 0;
      break;
  }
  return v9 & 1;
}

void specialized static BindTarget.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_21B9DCBE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  Swift::String v6;
  Swift::String v7;
  char v9;

  if (v5)
  {
    swift_bridgeObjectRetain();
    outlined copy of BindTarget(v0, v1, v5);
    outlined consume of BindTarget(v2, v3, v4);
    outlined consume of BindTarget(v0, v1, v5);
    v9 = 0;
  }
  else
  {
    v6 = String.lowercased()();
    v7 = String.lowercased()();
    if (v6._countAndFlagsBits == v7._countAndFlagsBits && v6._object == v7._object)
      v9 = 1;
    else
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of BindTarget(v0, v1, 0);
    outlined copy of BindTarget(v2, v3, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BindTarget(v2, v3, 0);
    outlined consume of BindTarget(v0, v1, 0);
  }
  return v9 & 1;
}

void specialized static InternalBindPath.pathFromTarget(_:_:)(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21B9DD044()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return v0;
}

void sub_21B9DDA8C()
{
  JUMPOUT(0x21B9DDA48);
}

void sub_21B9DDA9C()
{
  JUMPOUT(0x21B9DDA48);
}

void sub_21B9DDAAC()
{
  JUMPOUT(0x21B9DDAB8);
}

uint64_t type metadata accessor for BindableValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BindableValue);
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of BindableDataInternal(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined copy of BindPath.Part(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBu && ((1 << a3) & 0xC2F) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of BindPath.Part(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 0xBu && ((1 << a3) & 0xC2F) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_20:
    swift_release();
    return 0;
  }
  v5 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v5 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_27;
    v7 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v8 = swift_dynamicCastClassUnconditional();
LABEL_7:
      v9 = v8;
      goto LABEL_11;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      goto LABEL_26;
    v10 = specialized static Entity.entityInfoType(_:)(v7);
    if (!v10)
    {
      v8 = makeEntity(for:)(v7);
      goto LABEL_7;
    }
    v9 = (*(uint64_t (**)(void))(v10 + 232))();
    v11 = *(_QWORD *)(v9 + 16);
    swift_retain();
    MEMORY[0x22076D160](v11, 0);
    *(_QWORD *)(v9 + 16) = v7;
    MEMORY[0x22076D160](v7, v9);
    swift_release();
LABEL_11:
    result = REEntityGetChildCount();
    if (v5 >= result)
      goto LABEL_25;
    REEntityGetName();
    if (String.init(cString:)() == a2 && v12 == a3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return v9;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
    {
      swift_release();
      return v9;
    }
    ++v5;
    swift_release();
    if (v5 >= REEntityGetChildCount())
      goto LABEL_20;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_21B9DDD48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for BindableValue(0, *(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8), a3);
  return BindableValue.value.getter(v5, a4);
}

uint64_t sub_21B9DDD84()
{
  return 16;
}

__n128 sub_21B9DDD90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_21B9DDD9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

_QWORD *keypath_set_2Tm(_QWORD *result, _QWORD *a2)
{
  if (*result != *a2)
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for BindPath()
{
  return &type metadata for BindPath;
}

uint64_t initializeBufferWithCopyOfBuffer for BindPath.Part(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of BindPath.Part);
}

uint64_t destroy for BindPath.Part(uint64_t a1)
{
  return outlined consume of BindPath.Part(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t *assignWithCopy for BindPath.Part(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of BindPath.Part, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindPath.Part);
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for BindPath.Part(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindPath.Part);
}

uint64_t getEnumTagSinglePayload for BindPath.Part(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BindPath.Part(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 244;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for BindPath.Part(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t destructiveInjectEnumTag for BindPath.Part(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 12;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BindPath.Part()
{
  return &type metadata for BindPath.Part;
}

uint64_t initializeBufferWithCopyOfBuffer for BindTarget(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of BindTarget);
}

uint64_t destroy for BindTarget(uint64_t a1)
{
  return outlined consume of BindTarget(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for BindPath.Part(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for BindTarget(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of BindTarget, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindTarget);
}

uint64_t *assignWithCopy for BindPath.Part(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for BindTarget(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for BindPath.Part(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of BindTarget);
}

uint64_t *assignWithTake for BindPath.Part(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindTarget(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BindTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for BindTarget(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t destructiveInjectEnumTag for BindTarget(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BindTarget()
{
  return &type metadata for BindTarget;
}

ValueMetadata *type metadata accessor for BindTarget.ScenePath()
{
  return &type metadata for BindTarget.ScenePath;
}

_QWORD *initializeBufferWithCopyOfBuffer for BindTarget.TextureCoordinateTransformPath(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BindTarget.TextureCoordinateTransformPath()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for BindTarget.TextureCoordinateTransformPath(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for BindTarget.TextureCoordinateTransformPath(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BindTarget.TextureCoordinateTransformPath(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BindTarget.TextureCoordinateTransformPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BindTarget.TextureCoordinateTransformPath()
{
  return &type metadata for BindTarget.TextureCoordinateTransformPath;
}

ValueMetadata *type metadata accessor for BindTarget.MaterialPath()
{
  return &type metadata for BindTarget.MaterialPath;
}

ValueMetadata *type metadata accessor for BindTarget.EntityPath()
{
  return &type metadata for BindTarget.EntityPath;
}

ValueMetadata *type metadata accessor for BindTarget.IkSolverPath()
{
  return &type metadata for BindTarget.IkSolverPath;
}

_QWORD *initializeBufferWithCopyOfBuffer for InternalBindPath(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for InternalBindPath()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for InternalBindPath(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for InternalBindPath(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalBindPath(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalBindPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalBindPath()
{
  return &type metadata for InternalBindPath;
}

uint64_t type metadata instantiation function for BindableValue()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for BindableValue()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for BindableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  int v14;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t *, uint64_t);
  _QWORD *v19;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_DWORD *)(v6 + 80);
  v9 = v8;
  v10 = ~(unint64_t)v8;
  v11 = v7 + v8;
  if (*(_DWORD *)(v6 + 84))
    v12 = *(_QWORD *)(v6 + 64);
  else
    v12 = v7 + 1;
  v13 = ((v7 + v8) & ~(unint64_t)v8) + v12;
  v14 = v8 & 0x100000;
  if (v9 > 7 || v14 != 0 || v13 > 0x18)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v9 + 16) & v10));
    swift_retain();
  }
  else
  {
    v18 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v18(a1, a2, *(_QWORD *)(a3 + 16));
    v19 = (_QWORD *)(((unint64_t)a2 + v11) & v10);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48))(v19, 1, v5))
    {
      memcpy((void *)(((unint64_t)v4 + v11) & v10), v19, v12);
    }
    else
    {
      v18((uint64_t *)(((unint64_t)v4 + v11) & v10), v19, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((unint64_t)v4 + v11) & v10, 0, 1, v5);
    }
  }
  return v4;
}

uint64_t destroy for BindableValue(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t (*v7)(unint64_t, uint64_t);

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v7 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  v7(a1, v3);
  v5 = (*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  if (!(_DWORD)result)
    return v7(v5, v3);
  return result;
}

void *initializeWithCopy for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (void *)(((unint64_t)a1 + v8 + v9) & ~v9);
  v11 = (const void *)(((unint64_t)a2 + v8 + v9) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v12 = v8;
    else
      v12 = v8 + 1;
    memcpy(v10, v11, v12);
  }
  else
  {
    v7(v10, v11, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (void *)(((unint64_t)a1 + v8 + v9) & ~v9);
  v11 = (void *)(((unint64_t)a2 + v8 + v9) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v13 = v12(v10, 1, v5);
  v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v10, v11, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      v7(v10, v11, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v15 = v8;
  else
    v15 = v8 + 1;
  memcpy(v10, v11, v15);
  return a1;
}

void *initializeWithTake for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (void *)(((unint64_t)a1 + v8 + v9) & ~v9);
  v11 = (const void *)(((unint64_t)a2 + v8 + v9) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v12 = v8;
    else
      v12 = v8 + 1;
    memcpy(v10, v11, v12);
  }
  else
  {
    v7(v10, v11, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for BindableValue(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, const void *, uint64_t);
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  size_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(void *, const void *, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (void *)(((unint64_t)a1 + v8 + v9) & ~v9);
  v11 = (void *)(((unint64_t)a2 + v8 + v9) & ~v9);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v13 = v12(v10, 1, v5);
  v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v10, v11, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v14)
    {
      v7(v10, v11, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v15 = v8;
  else
    v15 = v8 + 1;
  memcpy(v10, v11, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for BindableValue(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(v4 + 64);
  if (v5)
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = v6 + 1;
  if (!a2)
    return 0;
  v8 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_21;
  v9 = v7 + ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_21:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_21;
LABEL_14:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return v5 + v13 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21B9DEA78 + 4 * byte_21BE51311[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for BindableValue(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = (v8 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!v7)
    ++v8;
  v10 = v8 + v9;
  v11 = a3 >= v7;
  v12 = a3 - v7;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      v15 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v15))
      {
        v13 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v13 = 2;
      }
      else
      {
        v13 = v15 > 1;
      }
    }
    else
    {
      v13 = 1u;
    }
  }
  else
  {
    v13 = 0;
  }
  if (v7 < a2)
  {
    v14 = ~v7 + a2;
    if (v10 < 4)
    {
      if ((_DWORD)v10)
      {
        v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if ((_DWORD)v10 == 3)
        {
          *a1 = v16;
          *((_BYTE *)a1 + 2) = BYTE2(v16);
        }
        else if ((_DWORD)v10 == 2)
        {
          *a1 = v16;
        }
        else
        {
          *(_BYTE *)a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

ValueMetadata *type metadata accessor for BindableValuesReference()
{
  return &type metadata for BindableValuesReference;
}

ValueMetadata *type metadata accessor for ParameterSet()
{
  return &type metadata for ParameterSet;
}

ValueMetadata *type metadata accessor for Entity.ParameterSet()
{
  return &type metadata for Entity.ParameterSet;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

id __AmbientLightComponent.color.getter()
{
  id *v0;

  return *v0;
}

void __AmbientLightComponent.color.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*__AmbientLightComponent.color.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __AmbientLightComponent.intensity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void __AmbientLightComponent.intensity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*__AmbientLightComponent.intensity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

CGColorRef __AmbientLightComponent.init()@<X0>(uint64_t a1@<X8>)
{
  CGColorRef result;

  result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = 1143652352;
  return result;
}

void __AmbientLightComponent.init(cgColor:intensity:)(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{

  *(_QWORD *)a2 = a1;
  *(float *)(a2 + 8) = a3;
}

void static __AmbientLightComponent.__fromCore(_:)(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  uint64_t v4;

  REAmbientLightComponentGetColorGamut3F();
  REAmbientLightComponentGetIntensity();
  v3 = v2;
  v4 = RECreateCGColorFromColorGamut();

  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v3;
}

uint64_t __AmbientLightComponent.__toCore(_:)()
{
  RECGColorToColorGamut();
  REAmbientLightComponentSetColorGamut3F();
  REAmbientLightComponentSetIntensity();
  return RENetworkMarkComponentDirty();
}

void static __AmbientLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 48;
}

uint64_t static __AmbientLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 8);
  v3 = *(float *)(a2 + 8);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v2 == v3);
}

void protocol witness for static Component.__coreComponentType.getter in conformance __AmbientLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 48;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 8);
  v3 = *(float *)(a2 + 8);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef();
  return static _CFObject.== infix(_:_:)() & (v2 == v3);
}

uint64_t initializeBufferWithCopyOfBuffer for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for __AmbientLightComponent(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for __AmbientLightComponent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 12))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __AmbientLightComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 12) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __AmbientLightComponent()
{
  return &type metadata for __AmbientLightComponent;
}

uint64_t __RKEmphasisPopAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisPopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisPopAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisPopAnimation.createPopAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 264, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulPopAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 52, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildPopAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 118, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicPopAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

Swift::Bool __swiftcall RKChangeSceneActionSimulationTechnique.switchScenes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t SceneNullable;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  if (*(_QWORD *)(v0 + 16))
  {
    v1 = v0;
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v3 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v3)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(SceneNullable);
      }
      Scene.__interactionService.getter();
      type metadata accessor for __RKEntityInteractionManager();
      SceneNullable = swift_dynamicCastClass();
      if (SceneNullable)
      {
        swift_beginAccess();
        v4 = *(_QWORD *)(SceneNullable + 48);
        v5 = OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
        swift_beginAccess();
        if (MEMORY[0x22077301C](v4 + 16))
        {
          v6 = *(_QWORD *)(v4 + 24);
          SceneNullable = v1 + v5;
          ObjectType = swift_getObjectType();
          v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8);
          v9 = swift_retain();
          LOBYTE(SceneNullable) = v8(v9, SceneNullable, ObjectType, v6);
          swift_release();
          swift_unknownObjectRelease();
        }
        else
        {
          LOBYTE(SceneNullable) = 0;
        }
        swift_retain();
        specialized RKChangeSceneActionSimulationTechnique.reRegisterInteractions(rootEntity:)();
        swift_release();
      }
      swift_release();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    LOBYTE(SceneNullable) = 0;
  }
  return SceneNullable & 1;
}

uint64_t RKChangeSceneActionSimulationTechnique.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionSimulationTechnique()
{
  return type metadata accessor for RKChangeSceneActionSimulationTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionSimulationTechnique()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RKChangeSceneActionSimulationTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionSimulationTechnique)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionSimulationTechnique()
{
  return swift_updateClassMetadata2();
}

uint64_t specialized RKChangeSceneActionSimulationTechnique.reRegisterInteractions(rootEntity:)()
{
  uint64_t Object;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[48];

  swift_beginAccess();
  if (static __RKEntityInteractionsComponent.registration
    && REEntityGetCustomComponent()
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v1 = *(_QWORD *)(Object + 16);
    outlined init with copy of __RKEntityInteractionsComponent(Object, (uint64_t)v8);
    if (v1)
      v2 = v1;
    else
      v2 = __RKEntityInteractionsComponent.decodedJSON()();
    swift_bridgeObjectRetain();
    outlined destroy of __RKEntityInteractionsComponent((uint64_t)v8);
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
  }
  v3 = *(_QWORD *)(v2 + 16);
  result = swift_bridgeObjectRelease();
  if (v3)
  {
    if (static __RKEntityInteractionsComponent.registration
      && REEntityGetCustomComponent()
      && (v5 = RECustomComponentGetObject()) != 0)
    {
      v6 = *(_QWORD *)(v5 + 16);
      outlined init with copy of __RKEntityInteractionsComponent(v5, (uint64_t)v8);
      if (v6)
        v7 = v6;
      else
        v7 = __RKEntityInteractionsComponent.decodedJSON()();
      swift_bridgeObjectRetain();
      outlined destroy of __RKEntityInteractionsComponent((uint64_t)v8);
    }
    else
    {
      v7 = MEMORY[0x24BEE4AF8];
    }
    Entity.__interactions.setter(MEMORY[0x24BEE4AF8]);
    return Entity.__interactions.setter(v7);
  }
  return result;
}

uint64_t specialized InteractionsLogger.init<A>(_:_:)@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;

  if (a1)
  {
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  result = swift_release();
  *a2 = 91;
  a2[1] = 0xE100000000000000;
  return result;
}

uint64_t __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:direction:upVector:)(uint64_t a1, float a2, __n128 a3, __n128 a4)
{
  uint64_t v6;

  type metadata accessor for __RKEntityLookAtCameraAction();
  swift_allocObject();
  v6 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a2, 0.0, a3, 0.0, a4, a1, 0);
  swift_release();
  return v6;
}

uint64_t __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(uint64_t a1, char a2, float a3, float a4, __n128 a5, float a6, __n128 a7)
{
  uint64_t v12;

  swift_allocObject();
  v12 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a3, a4, a5, a6, a7, a1, a2);
  swift_release();
  return v12;
}

uint64_t type metadata accessor for __RKEntityLookAtCameraAction()
{
  return objc_opt_self();
}

uint64_t __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(uint64_t a1, char a2, float a3, float a4, __n128 a5, float a6, __n128 a7)
{
  uint64_t v7;

  v7 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(a3, a4, a5, a6, a7, a1, a2);
  swift_release();
  return v7;
}

Swift::Void __swiftcall __RKEntityLookAtCameraAction.setFinalRotation()()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  BOOL v3;
  float v4;
  float v5;
  __int128 v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  float v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  BOOL v16;
  float v17;
  float v18;
  uint64_t v19;
  BOOL v20;
  float v21;
  float v22;
  uint64_t v23;
  BOOL v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v1 = 0;
  v2 = *(_OWORD *)(v0 + 128);
  while (1)
  {
    v39 = v2;
    v4 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v40 = xmmword_21BE51670;
    v5 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1 & 3)));
    v3 = v4 == v5;
    if (v1 == 2)
      break;
    while (1)
    {
      ++v1;
      if (v3)
        break;
      if (v1 == 2)
        goto LABEL_9;
      v3 = 0;
    }
  }
  if (v4 == v5)
  {
    v6 = xmmword_21BE51680;
LABEL_12:
    v9 = -1131480523;
LABEL_13:
    v10 = *(float *)&v9;
LABEL_14:
    *(_OWORD *)(v0 + 256) = v6;
    goto LABEL_15;
  }
LABEL_9:
  v7 = 0;
  while (1)
  {
    v37 = v2;
    v13 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
    v38 = xmmword_21BE41240;
    v14 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
    v8 = v13 == v14;
    if (v7 == 2)
      break;
    while (1)
    {
      ++v7;
      if (v8)
        break;
      if (v7 == 2)
        goto LABEL_18;
      v8 = 0;
    }
  }
  if (v13 == v14)
  {
    v6 = xmmword_21BE41250;
    goto LABEL_12;
  }
LABEL_18:
  v11 = 0;
  while (1)
  {
    v35 = v2;
    v17 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v36 = xmmword_21BE51690;
    v18 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v12 = v17 == v18;
    if (v11 == 2)
      break;
    while (1)
    {
      ++v11;
      if (v12)
        break;
      if (v11 == 2)
        goto LABEL_26;
      v12 = 0;
    }
  }
  if (v17 == v18)
  {
    v6 = xmmword_21BE516A0;
    goto LABEL_12;
  }
LABEL_26:
  v15 = 0;
  while (1)
  {
    v33 = v2;
    v21 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v34 = xmmword_21BE41230;
    v22 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v16 = v21 == v22;
    if (v15 == 2)
      break;
    while (1)
    {
      ++v15;
      if (v16)
        break;
      if (v15 == 2)
        goto LABEL_34;
      v16 = 0;
    }
  }
  if (v21 == v22)
  {
    v6 = xmmword_21BE516B0;
    goto LABEL_12;
  }
LABEL_34:
  v19 = 0;
  while (1)
  {
    v31 = v2;
    v25 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v32 = xmmword_21BE41220;
    v26 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
    v20 = v25 == v26;
    if (v19 == 2)
      break;
    while (1)
    {
      ++v19;
      if (v20)
        break;
      if (v19 == 2)
        goto LABEL_42;
      v20 = 0;
    }
  }
  if (v25 == v26)
  {
    v6 = xmmword_21BE516C0;
    v9 = 1016003125;
    goto LABEL_13;
  }
LABEL_42:
  v23 = 0;
  while (1)
  {
    v29 = v2;
    v27 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v30 = xmmword_21BE516D0;
    v28 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v23 & 3)));
    v24 = v27 == v28;
    if (v23 == 2)
      break;
    while (1)
    {
      ++v23;
      if (v24)
        break;
      if (v23 == 2)
      {
        v10 = 0.017453;
        goto LABEL_15;
      }
      v24 = 0;
    }
  }
  v10 = 0.017453;
  if (v27 == v28)
  {
    v6 = xmmword_21BE516E0;
    goto LABEL_14;
  }
LABEL_15:
  *(float *)(v0 + 144) = *(float *)(v0 + 144) * v10;
}

double __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)(float32x2_t a1, float a2, double a3, float32x2_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  BOOL v8;
  float v9;
  double v10;
  double v11;
  float32x4_t v12;
  float32x4_t v13;
  double v14;
  double v16;
  __int128 v17;

  v6 = 0;
  v7 = *(_OWORD *)(v5 + 160);
  while (1)
  {
    v17 = v7;
    v9 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v8 = v9 == 0.0;
    if (v6 == 2)
      break;
    while (1)
    {
      ++v6;
      if (v8)
        break;
      if (v6 == 2)
        goto LABEL_9;
      v8 = 0;
    }
  }
  if (v9 == 0.0)
  {
    REMakeLookAtPose();
    v16 = v10;
    __sincosf_stret(*(float *)(v5 + 144) * 0.5);
    return v16;
  }
  else
  {
LABEL_9:
    *(float32x2_t *)v12.f32 = vsub_f32(a1, a4);
    v12.i64[1] = COERCE_UNSIGNED_INT(a2 - a5);
    v13 = vmulq_f32(v12, v12);
    v11 = 0.0;
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]) != 0.0)
    {
      __sincosf_stret(*(float *)(v5 + 144) * 0.5);
      REMakeLookAtPose();
      return v14;
    }
  }
  return v11;
}

Swift::Void __swiftcall __RKEntityLookAtCameraAction.update()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WorldSRT;
  __int128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  __n128 v12;
  float v13;
  __n128 v14;
  uint64_t v15;
  double v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _BYTE v23[16];
  __n128 v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = StaticString.description.getter();
  v32 = v1;
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v4 = v31;
  v3 = v32;
  swift_beginAccess();
  if (!*(_QWORD *)(v0 + 16))
  {
    v29 = v31;
    v30 = v32;
    v20 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v20, &v29);
    swift_bridgeObjectRelease();
    return;
  }
  swift_retain();
  if (REEntityGetSceneNullable())
  {
    RETransformComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      WorldSRT = RETransformComponentGetWorldSRT();
      v26 = v6;
      MEMORY[0x24BDAC7A8](WorldSRT);
      v28 = v7;
      v24 = v7;
      v25 = v8;
      v29 = v31;
      v30 = v32;
      v9 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v9, &v29, partial apply for implicit closure #4 in __RKEntityLookAtCameraAction.update(), v23);
      if (RESceneFindFirstCameraComponent())
      {
        v10 = v28.n128_f32[2];
        v11 = RECustomMatrixCameraComponentCalculateWorldPose();
        v27 = v12;
        v13 = v12.n128_f32[2];
        MEMORY[0x24BDAC7A8](v11);
        v24 = v27;
        v25 = v14;
        v29 = v4;
        v30 = v3;
        v15 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v15, &v29, partial apply for implicit closure #5 in __RKEntityLookAtCameraAction.update(), v23);
        __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)((float32x2_t)v27.n128_u64[0], v13, v16, (float32x2_t)v28.n128_u64[0], v10);
        v27 = v17;
        v24 = MEMORY[0x24BDAC7A8](v18);
        v25 = v27;
        v29 = v4;
        v30 = v3;
        v19 = static os_log_type_t.debug.getter();
        specialized InteractionsLogger.log(_:_:)(v19, &v29, partial apply for implicit closure #6 in __RKEntityLookAtCameraAction.update(), v23);
        swift_bridgeObjectRelease();
        RETransformComponentSetWorldAnimatedSRT();
        RENetworkMarkComponentDirty();
        REAnimationComponentGetComponentType();
        if (!REEntityGetComponentByClass() || (REAnimationComponentHasRunningAnimations() & 1) == 0)
          RETransformComponentSetWorldOrientation();
        goto LABEL_12;
      }
    }
    else
    {
      v29 = v31;
      v30 = v32;
      v22 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v22, &v29);
    }
  }
  else
  {
    v29 = v31;
    v30 = v32;
    v21 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v21, &v29);
  }
  swift_bridgeObjectRelease();
LABEL_12:
  swift_release();
}

uint64_t implicit closure #4 in __RKEntityLookAtCameraAction.update()(Swift::Int a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(a1);
  v5._countAndFlagsBits = a2;
  v5._object = a3;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4120]);
  v6._countAndFlagsBits = SIMD.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t implicit closure #6 in __RKEntityLookAtCameraAction.update()()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x800000021BE829A0;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  type metadata accessor for simd_quatf(0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.createLookAtAnimation()()
{
  uint64_t v0;
  uint64_t result;
  __int128 v2;
  __int128 v3;
  uint64_t ServiceLocator;
  double v5;
  __int128 v6;
  __int128 v7;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    if (REEntityGetSceneNullable())
    {
      RETransformComponentGetComponentType();
      result = REEntityGetComponentByClass();
      if (!result)
      {
        __break(1u);
        goto LABEL_13;
      }
      RETransformComponentGetWorldPose();
      v7 = v2;
      RETransformComponentGetLocalUnanimatedSRT();
      if (RESceneFindFirstCameraComponent())
      {
        RECustomMatrixCameraComponentCalculateWorldPose();
        v6 = v3;
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        if (RESceneGetECSManagerNullable())
        {
          ServiceLocator = REECSManagerGetServiceLocator();
          result = MEMORY[0x22076FD58](ServiceLocator);
          if (result)
          {
            __RKEntityLookAtCameraAction.getPose(cameraPose:currentPose:)(*(float32x2_t *)&v6, *((float *)&v6 + 2), v5, *(float32x2_t *)&v7, *((float *)&v7 + 2));
            RETransformComponentGetWorldOrientation();
            RETransformComponentSetWorldOrientation();
            RETransformComponentGetLocalUnanimatedSRT();
            RETransformComponentSetWorldOrientation();
            RENetworkMarkComponentDirty();
            REMakeSRT();
            REFromToByAnimationDefaultParameters();
            result = REAssetManagerTimelineAssetCreateSRTAnimation();
            if (result)
            {
              *(_QWORD *)(v0 + 240) = REAnimationComponentPlay();
              *(_BYTE *)(v0 + 248) = 0;
              RERelease();
              swift_release();
              return 1;
            }
            goto LABEL_14;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          __break(1u);
          return result;
        }
      }
    }
    swift_release();
  }
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t ComponentByClass;
  int MotionType;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t inited;
  char IsValid;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t (*v30)();
  double v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v36 = 91;
  v37 = 0xE100000000000000;
  if (v2)
  {
    *(_QWORD *)&v33 = 0;
    *((_QWORD *)&v33 + 1) = 0xE000000000000000;
    v38 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v4 = 0xE000000000000000;
    v3 = 0;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v36;
  v9 = v37;
  v11 = *(_QWORD *)(v0 + 16);
  if (!v11)
  {
    v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v36);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_14:
      v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v36);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_14;
  v13 = *(_QWORD *)(v11 + 16);
  RERigidBodyComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
  {
    MotionType = RERigidBodyComponentGetMotionType();
    if (MotionType != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
  }
  else
  {
    MotionType = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindPoint<Transform>);
  inited = swift_initStackObject();
  swift_retain();
  *(_QWORD *)(inited + 16) = REBindPointCreateReferenceForEntityAnimatedValuesSRT();
  *(_BYTE *)(inited + 24) = 0;
  IsValid = REBindPointIsValid();
  swift_release();
  if ((IsValid & 1) != 0)
  {
    v21 = ComponentByClass == 0;
    REBindPointSetOverrideEnabled();
    v22 = swift_allocObject();
    swift_weakInit();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = v22;
    *(_QWORD *)(v23 + 24) = v13;
    *(_DWORD *)(v23 + 32) = MotionType;
    *(_BYTE *)(v23 + 36) = v21;
    v24 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = partial apply for specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:);
    *(_QWORD *)(v1 + 40) = v23;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v24);
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v25 = CACurrentMediaTime();
    v26 = *(float *)(v1 + 112);
    *(double *)(v1 + 224) = v25 + *(float *)(v1 + 108);
    if (v26 >= 0.1)
    {
      if (*(_QWORD *)(v1 + 24))
        REEngineGetCurrentTime();
      else
        v31 = CACurrentMediaTime();
      *(double *)(v1 + 232) = v31 + *(float *)(v1 + 112);
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      v29 = swift_allocObject();
      swift_weakInit();
      v30 = partial apply for closure #2 in __RKEntityLookAtCameraAction.perform(with:);
    }
    else
    {
      v27 = *(_QWORD *)(v1 + 96);
      v28 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 1;
      *(_BYTE *)(v1 + 104) = 1;
      v36 = v27;
      LOBYTE(v37) = v28;
      __RKEntityAction.state.didset((uint64_t)&v36);
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      v29 = swift_allocObject();
      swift_weakInit();
      v30 = partial apply for closure #3 in __RKEntityLookAtCameraAction.perform(with:);
    }
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v33, (uint64_t)v30, v29, &v36);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v33, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v36, v1 + 184);
    swift_endAccess();
    v36 = v10;
    v37 = v9;
    v32 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v32, &v36);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    swift_setDeallocating();
    result = REBindPointDestroy();
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    v6 = result + 184;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6, (uint64_t)&v8);
    if (*((_QWORD *)&v9 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v8, (uint64_t)v7);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v8, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v7, v7[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v8, &demangling cache variable for type metadata for Cancellable?);
    }
    v10 = 0;
    v8 = 0u;
    v9 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v8, v6);
    swift_endAccess();
    swift_beginAccess();
    if (*(_QWORD *)(v5 + 16))
    {
      swift_retain();
      REAnimationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        if (REAnimationComponentHasRunningAnimations())
        {
          if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
            || (swift_beginAccess(), *(_BYTE *)(v5 + 104) == 1) && *(_QWORD *)(v5 + 96) == 3)
          {
            REAnimationComponentStopAllAnimations();
            RENetworkMarkComponentDirty();
          }
        }
      }
      swift_release();
      *(_QWORD *)(v5 + 240) = 0;
      *(_BYTE *)(v5 + 248) = 1;
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a3 & 0x100000000) == 0 && (_DWORD)a3 != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityLookAtCameraAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  char v3;
  double v4;
  uint64_t v5;
  char v6;
  double v7;
  uint64_t v8;
  char v9;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    if ((*(_BYTE *)(result + 249) & 1) == 0 && *(float *)(result + 112) >= 0.1)
    {
      *(_BYTE *)(result + 249) = __RKEntityLookAtCameraAction.createLookAtAnimation()() & 1;
      swift_beginAccess();
      v2 = *(_QWORD *)(v1 + 96);
      v3 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 1;
      *(_BYTE *)(v1 + 104) = 1;
      v8 = v2;
      v9 = v3;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      swift_release();
    }
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v4 = CACurrentMediaTime();
    if (*(double *)(v1 + 224) <= v4 && (*(_BYTE *)(v1 + 176) & 1) == 0)
    {
      swift_beginAccess();
      v5 = *(_QWORD *)(v1 + 96);
      v6 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 2;
      *(_BYTE *)(v1 + 104) = 1;
      v8 = v5;
      v9 = v6;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      swift_release();
      *(_BYTE *)(v1 + 249) = 0;
    }
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v7 = CACurrentMediaTime();
    if (*(double *)(v1 + 232) <= v7)
    {
      swift_beginAccess();
      if (*(_QWORD *)(v1 + 16))
      {
        swift_retain();
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          if (REAnimationComponentHasRunningAnimations())
          {
            if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
              || (swift_beginAccess(), *(_BYTE *)(v1 + 104) == 1) && *(_QWORD *)(v1 + 96) == 3)
            {
              REAnimationComponentStopAllAnimations();
              RENetworkMarkComponentDirty();
            }
          }
        }
        swift_release();
        *(_QWORD *)(v1 + 240) = 0;
        *(_BYTE *)(v1 + 248) = 1;
      }
      *(double *)(v1 + 232) = *(double *)(v1 + 232) + *(float *)(v1 + 112);
      *(_BYTE *)(v1 + 249) = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in __RKEntityLookAtCameraAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  double v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    __RKEntityLookAtCameraAction.update()();
    if (*(_QWORD *)(v1 + 24))
      REEngineGetCurrentTime();
    else
      v2 = CACurrentMediaTime();
    if (*(double *)(v1 + 224) <= v2)
    {
      swift_beginAccess();
      v3 = *(_QWORD *)(v1 + 96);
      v4 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = 2;
      *(_BYTE *)(v1 + 104) = 1;
      v5 = v3;
      v6 = v4;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v5);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityLookAtCameraAction.reversed()()
{
  return 0;
}

uint64_t __RKEntityLookAtCameraAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  __n128 *v1;
  float v3;
  float v4;
  float v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  __n128 v11;
  __n128 v12;

  swift_beginAccess();
  v3 = v1[6].n128_f32[3];
  v4 = v1[7].n128_f32[0];
  v5 = v1[9].n128_f32[0];
  v11 = v1[10];
  v12 = v1[8];
  v6 = v1[11].n128_i8[0];
  v7 = type metadata accessor for __RKEntityLookAtCameraAction();
  swift_allocObject();
  v8 = swift_retain();
  v9 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(v3, v4, v12, v5, v11, v8, v6);
  result = swift_release();
  a1[3] = v7;
  *a1 = v9;
  return result;
}

uint64_t __RKEntityLookAtCameraAction.clone(matching:newEntity:)(uint64_t a1)
{
  __n128 *v1;
  unint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  char v8;
  uint64_t v9;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14[4];

  swift_beginAccess();
  v3 = v1[1].n128_u64[0];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = v1[6].n128_f32[3];
    v6 = v1[7].n128_f32[0];
    v7 = v1[9].n128_f32[0];
    v11 = v1[10];
    v12 = v1[8];
    v8 = v1[11].n128_i8[0];
    type metadata accessor for __RKEntityLookAtCameraAction();
    swift_allocObject();
    v9 = swift_retain();
    v4 = specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(v5, v6, v12, v7, v11, v9, v8);
    swift_release();
  }
  else
  {
    __RKEntityLookAtCameraAction.copy(with:)(v14);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v13;
    else
      return 0;
  }
  return v4;
}

void __RKEntityLookAtCameraAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityLookAtCameraAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityLookAtCameraAction.__ivar_destroyer()
{
  uint64_t v0;

  return outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityLookAtCameraAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityLookAtCameraAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;

  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &v12);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a2;
  v8[4] = a3;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SceneEvents.Update> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Update>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
  v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  result = type metadata accessor for AnyCancellable();
  v11 = MEMORY[0x24BDB9B58];
  a4[3] = result;
  a4[4] = v11;
  *a4 = v9;
  return result;
}

{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;

  specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &v12);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v7;
  v8[3] = a2;
  v8[4] = a3;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<SceneEvents.Render>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
  v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_release();
  result = type metadata accessor for AnyCancellable();
  v11 = MEMORY[0x24BDB9B58];
  a4[3] = result;
  a4[4] = v11;
  *a4 = v9;
  return result;
}

uint64_t specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup())
      a3(v6);
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *))
{
  uint64_t result;
  uint64_t v5;

  v5 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (RESceneIsFromActiveRealityRendererSceneGroup())
      a3(&v5);
    return swift_release();
  }
  return result;
}

uint64_t specialized __RKEntityLookAtCameraAction.init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)(float a1, float a2, __n128 a3, float a4, __n128 a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)(v7 + 232) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *(_OWORD *)(v7 + 200) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_WORD *)(v7 + 248) = 1;
  *(_QWORD *)(v7 + 256) = 0;
  *(_QWORD *)(v7 + 264) = 0;
  *(float *)(v7 + 108) = a1;
  *(float *)(v7 + 112) = a2;
  *(__n128 *)(v7 + 128) = a3;
  *(__n128 *)(v7 + 160) = a5;
  *(_BYTE *)(v7 + 176) = a7;
  *(float *)(v7 + 144) = a4;
  v8 = swift_retain();
  v9 = __RKEntityAction.init(targetEntity:)(v8);
  __RKEntityLookAtCameraAction.setFinalRotation()();
  return v9;
}

uint64_t partial apply for implicit closure #4 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #4 in __RKEntityLookAtCameraAction.update()(23, 0xD000000000000015, (void *)0x800000021BE829E0);
}

uint64_t partial apply for implicit closure #5 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #4 in __RKEntityLookAtCameraAction.update()(22, 0xD000000000000014, (void *)0x800000021BE829C0);
}

uint64_t partial apply for implicit closure #6 in __RKEntityLookAtCameraAction.update()()
{
  return implicit closure #6 in __RKEntityLookAtCameraAction.update()();
}

uint64_t sub_21B9E1920()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21B9E1944()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #1 in __RKEntityLookAtCameraAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 36) << 32));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t partial apply for closure #3 in __RKEntityLookAtCameraAction.perform(with:)()
{
  return closure #3 in __RKEntityLookAtCameraAction.perform(with:)();
}

uint64_t outlined assign with take of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in __RKEntityLookAtCameraAction.perform(with:)()
{
  return closure #2 in __RKEntityLookAtCameraAction.perform(with:)();
}

uint64_t method lookup function for __RKEntityLookAtCameraAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityLookAtCameraAction.__allocating_init(targetEntity:duration:animationDuration:direction:rotation:upVector:loops:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 904))();
}

uint64_t dispatch thunk of __RKEntityLookAtCameraAction.update()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t partial apply for specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24));
}

uint64_t objectdestroy_10Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(_QWORD *a1)
{
  uint64_t v1;

  return specialized closure #2 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD *))(v1 + 24));
}

uint64_t outlined init with copy of Cancellable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Cancellable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (__int128 *)(a1 + 48);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *((_QWORD *)v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *((_QWORD *)v6 - 2);
    v18 = v6[1];
    v19 = *v6;
    v17 = v6[2];
    v10 = *((_QWORD *)v6 + 6);
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v11 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v9;
    v12[1] = v8;
    v13 = v2[7] + 56 * result;
    *(_OWORD *)v13 = v19;
    *(_OWORD *)(v13 + 16) = v18;
    *(_OWORD *)(v13 + 32) = v17;
    *(_QWORD *)(v13 + 48) = v10;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_14;
    v2[2] = v16;
    v6 = (__int128 *)((char *)v6 + 72);
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *((_QWORD *)v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *((_QWORD *)v6 - 2);
    v15 = *v6;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v10 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v9;
    v11[1] = v8;
    *(_OWORD *)(v2[7] + 16 * result) = v15;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_14;
    v2[2] = v14;
    v6 += 2;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *(v6 - 2);
    v9 = *v6;
    if (!v8)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v10 = *(v6 - 3);
    v11 = *(v6 - 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v10, v8);
    if ((v12 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v10;
    v13[1] = v8;
    v14 = (_QWORD *)(v2[7] + 16 * result);
    *v14 = v11;
    v14[1] = v9;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_16;
    v6 += 4;
    v2[2] = v17;
    ++v5;
    if (v7 == v3)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>, (uint64_t (*)(uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  result = swift_retain();
  v5 = 0;
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v8 = *(v6 - 1);
    if (!v8)
      goto LABEL_9;
    v9 = *(v6 - 2);
    v10 = *v6;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v11 & 1) != 0)
      goto LABEL_13;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v9;
    v12[1] = v8;
    *(_QWORD *)(v2[7] + 8 * result) = v10;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_14;
    v2[2] = v15;
    v6 += 3;
    ++v5;
    if (v7 == v3)
    {
LABEL_9:
      swift_release();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  unint64_t result;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  __int128 v26;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v21 = *(_QWORD *)(a1 + 16);
  if (!v21)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v20 = v2 + 64;
  result = swift_retain();
  v5 = 0;
  v6 = (_BYTE *)(a1 + 120);
  while (!__OFADD__(v5, 1))
  {
    v7 = *((_QWORD *)v6 - 10);
    v8 = *((_QWORD *)v6 - 3);
    if (!v7)
    {
      swift_bridgeObjectRetain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v22 = v5 + 1;
    v9 = *((_QWORD *)v6 - 11);
    v24 = *(_OWORD *)(v6 - 72);
    v10 = *(v6 - 56);
    v11 = *((_QWORD *)v6 - 6);
    v12 = *(v6 - 40);
    v13 = *(v6 - 39);
    v23 = *((_QWORD *)v6 - 4);
    v26 = *((_OWORD *)v6 - 1);
    v25 = *v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v7);
    if ((v14 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v15 = (uint64_t *)(v3[6] + 16 * result);
    *v15 = v9;
    v15[1] = v7;
    v16 = v3[7] + 80 * result;
    *(_OWORD *)v16 = v24;
    *(_BYTE *)(v16 + 16) = v10;
    *(_QWORD *)(v16 + 24) = v11;
    *(_BYTE *)(v16 + 32) = v12;
    *(_BYTE *)(v16 + 33) = v13;
    *(_QWORD *)(v16 + 40) = v23;
    *(_QWORD *)(v16 + 48) = v8;
    *(_OWORD *)(v16 + 56) = v26;
    *(_BYTE *)(v16 + 72) = v25;
    v17 = v3[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_16;
    v3[2] = v19;
    ++v5;
    v6 += 96;
    if (v22 == v21)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>, (uint64_t (*)(uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, Entity), &demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, char *, uint64_t);
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, UUID));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, UUID));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    v19 = *(_QWORD *)(v18 - 8);
    v20 = *(_QWORD *)(v19 + 72) * v16;
    v21 = v17 + v20;
    v22 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
    v22(v21, v5, v18);
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(v7[7] + v20, v9, v18);
    v23 = v7[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v7[2] = v25;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, (_:)>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, CFStringRef>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CodingUserInfoKey, Any));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = &v5[*(int *)(v2 + 48)];
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (CodingUserInfoKey, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    result = (unint64_t)outlined init with take of Any(v9, (_OWORD *)(v7[7] + 32 * v16));
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[112];
  __int128 v22;
  _BYTE v23[104];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = v3 - 1;
  for (i = 32; ; i += 128)
  {
    v6 = *(_OWORD *)(a1 + i + 16);
    v20 = *(_OWORD *)(a1 + i);
    *(_OWORD *)v21 = v6;
    v7 = *(_OWORD *)(a1 + i + 80);
    *(_OWORD *)&v21[48] = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)&v21[64] = v7;
    v8 = *(_OWORD *)(a1 + i + 112);
    *(_OWORD *)&v21[80] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v21[96] = v8;
    v9 = *(_OWORD *)(a1 + i + 48);
    *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + i + 32);
    *(_OWORD *)&v21[32] = v9;
    v10 = *((_QWORD *)&v8 + 1);
    LOWORD(v22) = v20;
    *((_QWORD *)&v22 + 1) = *((_QWORD *)&v20 + 1);
    v23[0] = v21[0];
    *(_WORD *)&v23[1] = *(_WORD *)&v21[1];
    *(_OWORD *)&v23[8] = *(_OWORD *)&v21[8];
    *(_OWORD *)&v23[24] = *(_OWORD *)&v21[24];
    *(_OWORD *)&v23[40] = *(_OWORD *)&v21[40];
    *(_OWORD *)&v23[56] = *(_OWORD *)&v21[56];
    *(_OWORD *)&v23[72] = *(_OWORD *)&v21[72];
    *(_OWORD *)&v23[88] = *(_OWORD *)&v21[88];
    outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)((uint64_t)&v20);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v22);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = v2[6] + 120 * result;
    v14 = *(_OWORD *)&v23[64];
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v23[48];
    *(_OWORD *)(v13 + 80) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v23[80];
    *(_QWORD *)(v13 + 112) = *(_QWORD *)&v23[96];
    v15 = *(_OWORD *)v23;
    *(_OWORD *)v13 = v22;
    *(_OWORD *)(v13 + 16) = v15;
    v16 = *(_OWORD *)&v23[32];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v23[16];
    *(_OWORD *)(v13 + 48) = v16;
    *(_QWORD *)(v2[7] + 8 * result) = v10;
    v17 = v2[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_12;
    v2[2] = v19;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[112];
  __int128 v22;
  _BYTE v23[104];

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_10;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = v3 - 1;
  for (i = 32; ; i += 128)
  {
    v6 = *(_OWORD *)(a1 + i + 16);
    v20 = *(_OWORD *)(a1 + i);
    *(_OWORD *)v21 = v6;
    v7 = *(_OWORD *)(a1 + i + 80);
    *(_OWORD *)&v21[48] = *(_OWORD *)(a1 + i + 64);
    *(_OWORD *)&v21[64] = v7;
    v8 = *(_OWORD *)(a1 + i + 112);
    *(_OWORD *)&v21[80] = *(_OWORD *)(a1 + i + 96);
    *(_OWORD *)&v21[96] = v8;
    v9 = *(_OWORD *)(a1 + i + 48);
    *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + i + 32);
    *(_OWORD *)&v21[32] = v9;
    v10 = *((_QWORD *)&v8 + 1);
    LOWORD(v22) = v20;
    *((_QWORD *)&v22 + 1) = *((_QWORD *)&v20 + 1);
    v23[0] = v21[0];
    *(_WORD *)&v23[1] = *(_WORD *)&v21[1];
    *(_OWORD *)&v23[8] = *(_OWORD *)&v21[8];
    *(_OWORD *)&v23[24] = *(_OWORD *)&v21[24];
    *(_OWORD *)&v23[40] = *(_OWORD *)&v21[40];
    *(_OWORD *)&v23[56] = *(_OWORD *)&v21[56];
    *(_OWORD *)&v23[72] = *(_OWORD *)&v21[72];
    *(_OWORD *)&v23[88] = *(_OWORD *)&v21[88];
    outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)((uint64_t)&v20);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v22);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = v2[6] + 120 * result;
    v14 = *(_OWORD *)&v23[64];
    *(_OWORD *)(v13 + 64) = *(_OWORD *)&v23[48];
    *(_OWORD *)(v13 + 80) = v14;
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v23[80];
    *(_QWORD *)(v13 + 112) = *(_QWORD *)&v23[96];
    v15 = *(_OWORD *)v23;
    *(_OWORD *)v13 = v22;
    *(_OWORD *)(v13 + 16) = v15;
    v16 = *(_OWORD *)&v23[32];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v23[16];
    *(_OWORD *)(v13 + 48) = v16;
    *(_QWORD *)(v2[7] + 8 * result) = v10;
    v17 = v2[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_12;
    v2[2] = v19;
    if (!v4)
    {
      swift_release();
      goto LABEL_10;
    }
    --v4;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, __MaterialResource.BuildParameters.Value>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 64);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 4);
    v6 = *((_QWORD *)v4 - 3);
    v7 = *((_QWORD *)v4 - 2);
    v8 = *((_QWORD *)v4 - 1);
    v9 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 32 * result;
    *(_QWORD *)v13 = v7;
    *(_QWORD *)(v13 + 8) = v8;
    *(_BYTE *)(v13 + 16) = v9;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 48;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  Swift::UInt v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  Swift::UInt *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (Swift::UInt *)(v2[6] + 24 * result);
    *v11 = v5;
    v11[1] = v6;
    v11[2] = v8;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, StateMachineParameterProtocol));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = outlined init with take of BindableDataInternal(&v17, v3[7] + 40 * result);
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Task<(), Never>));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UUID, Task<(), Never>));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  char v8;
  __int16 v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  char v19;
  __int128 v20;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_12;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v4, (uint64_t)&v16, &demangling cache variable for type metadata for (MeshBuffers.Identifier, MeshBufferErased));
    v5 = v16;
    v6 = v17;
    v7 = v18;
    v8 = v19;
    v9 = v19 ? 256 : 0;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17, v9 | v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = v2[6] + 24 * result;
    *(_QWORD *)v12 = v5;
    *(_QWORD *)(v12 + 8) = v6;
    *(_BYTE *)(v12 + 16) = v7;
    *(_BYTE *)(v12 + 17) = v8;
    result = outlined init with take of BindableDataInternal(&v20, v2[7] + 40 * result);
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_14;
    v2[2] = v15;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    outlined copy of Data._Representation(v7, v8);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (uint64_t *)(v2[7] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int32>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v6, (uint64_t)v15, &demangling cache variable for type metadata for (AnyHashable, Any));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : String]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef?, CFBooleanRef?>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = *v4;
    v8 = v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v2[6] + v11) = v5;
    *(_QWORD *)(v2[7] + v11) = v6;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  unint64_t result;
  char v20;
  _OWORD *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v27 = v2 + 64;
  swift_retain();
  v5 = (_OWORD *)(a1 + 128);
  while (1)
  {
    v28 = v4;
    v6 = *((_QWORD *)v5 - 11);
    v7 = *((_QWORD *)v5 - 10);
    v8 = *((_QWORD *)v5 - 9);
    v9 = *((_QWORD *)v5 - 8);
    v10 = *((_WORD *)v5 - 28);
    v11 = *((_DWORD *)v5 - 13);
    v13 = *((_QWORD *)v5 - 6);
    v12 = *((_QWORD *)v5 - 5);
    v14 = *((_QWORD *)v5 - 4);
    v15 = *((_QWORD *)v5 - 3);
    v16 = *((_QWORD *)v5 - 2);
    v17 = *((_WORD *)v5 - 4);
    v18 = *((_DWORD *)v5 - 1);
    v29 = *v5;
    *(_QWORD *)&v30 = *((_QWORD *)v5 - 12);
    *((_QWORD *)&v30 + 1) = v6;
    *(_QWORD *)&v31 = v7;
    *((_QWORD *)&v31 + 1) = v8;
    *(_QWORD *)&v32 = v9;
    WORD4(v32) = v10;
    HIDWORD(v32) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v30);
    if ((v20 & 1) != 0)
      break;
    *(_QWORD *)(v27 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = (_OWORD *)(v3[6] + 48 * result);
    v22 = v31;
    *v21 = v30;
    v21[1] = v22;
    v21[2] = v32;
    v23 = v3[7] + (result << 6);
    *(_QWORD *)v23 = v13;
    *(_QWORD *)(v23 + 8) = v12;
    *(_QWORD *)(v23 + 16) = v14;
    *(_QWORD *)(v23 + 24) = v15;
    *(_QWORD *)(v23 + 32) = v16;
    *(_WORD *)(v23 + 40) = v17;
    *(_DWORD *)(v23 + 44) = v18;
    *(_OWORD *)(v23 + 48) = v29;
    v24 = v3[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_11;
    v3[2] = v26;
    v5 += 7;
    v4 = v28 - 1;
    if (v28 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CFStringRef, Swift.AnyObject>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (UUID, USKObjectPath), &demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = (uint64_t *)(a1 + 40);
  do
  {
    v5 = *(v4 - 1);
    if (!v5)
      break;
    v6 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if ((v8 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v5;
    *(_QWORD *)(v3[7] + v9) = v6;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v4 += 2;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = (_OWORD *)(a1 + 40); *(_QWORD *)i; i = (_OWORD *)((char *)i + 24))
  {
    v11 = *i;
    v5 = *((_QWORD *)i - 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v5;
    *(_OWORD *)(v3[7] + 16 * result) = v11;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v3[2] = v10;
    if (!--v1)
      return (unint64_t)v3;
  }
  return (unint64_t)v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = v1 - 1;
    for (i = (_OWORD *)(a1 + 104); ; i = (_OWORD *)((char *)i + 88))
    {
      v22 = *i;
      if (!*((_QWORD *)i - 7))
        goto LABEL_11;
      v21 = *(_OWORD *)((char *)i - 56);
      v20 = v4;
      v6 = *((_QWORD *)i - 1);
      v8 = *((_QWORD *)i - 9);
      v7 = *((_QWORD *)i - 8);
      v9 = *((_QWORD *)i - 5);
      v10 = *((_DWORD *)i - 8);
      v11 = *((_BYTE *)i - 28);
      v12 = *((_QWORD *)i - 3);
      v13 = *((_BYTE *)i - 16);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v15 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v8;
      v16 = v3[7] + 80 * result;
      *(_QWORD *)v16 = v7;
      *(_OWORD *)(v16 + 8) = v21;
      *(_QWORD *)(v16 + 24) = v9;
      *(_DWORD *)(v16 + 32) = v10;
      *(_BYTE *)(v16 + 36) = v11;
      *(_QWORD *)(v16 + 40) = v12;
      *(_BYTE *)(v16 + 48) = v13;
      *(_QWORD *)(v16 + 56) = v6;
      *(_OWORD *)(v16 + 64) = v22;
      v17 = v3[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_14;
      v3[2] = v19;
      if (!v20)
      {
        swift_bridgeObjectRetain();
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return (unint64_t)v3;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v20 - 1;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _OWORD *i;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v4 = v1 - 1;
    for (i = (_OWORD *)(a1 + 104); ; i = (_OWORD *)((char *)i + 88))
    {
      v22 = *i;
      if (!*((_QWORD *)i - 7))
        goto LABEL_11;
      v21 = *(_OWORD *)((char *)i - 56);
      v20 = v4;
      v6 = *((_QWORD *)i - 1);
      v8 = *((_QWORD *)i - 9);
      v7 = *((_QWORD *)i - 8);
      v9 = *((_QWORD *)i - 5);
      v10 = *((_DWORD *)i - 8);
      v11 = *((_BYTE *)i - 28);
      v12 = *((_QWORD *)i - 3);
      v13 = *((_BYTE *)i - 16);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v15 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v8;
      v16 = v3[7] + 80 * result;
      *(_QWORD *)v16 = v7;
      *(_OWORD *)(v16 + 8) = v21;
      *(_QWORD *)(v16 + 24) = v9;
      *(_DWORD *)(v16 + 32) = v10;
      *(_BYTE *)(v16 + 36) = v11;
      *(_QWORD *)(v16 + 40) = v12;
      *(_BYTE *)(v16 + 48) = v13;
      *(_QWORD *)(v16 + 56) = v6;
      *(_OWORD *)(v16 + 64) = v22;
      v17 = v3[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_14;
      v3[2] = v19;
      if (!v20)
      {
        swift_bridgeObjectRetain();
LABEL_11:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return (unint64_t)v3;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v4 = v20 - 1;
    }
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t Trace;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UInt32, LoadTrace));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (unsigned int *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of (Int, URL)(v9, (uint64_t)v5, &demangling cache variable for type metadata for (UInt32, LoadTrace));
      v11 = *v5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v7[6] + 4 * result) = v11;
      v15 = v7[7];
      Trace = type metadata accessor for LoadTrace(0);
      result = outlined init with take of LoadTrace(v8, v15 + *(_QWORD *)(*(_QWORD *)(Trace - 8) + 72) * v14);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v5 = *((_QWORD *)i - 1);
      v11 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_OWORD *)(v3[7] + 16 * result) = v11;
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = (_OWORD *)(a1 + 56); *((_QWORD *)i - 2); i = (_OWORD *)((char *)i + 40))
  {
    v13 = *(i - 1);
    v5 = *((_QWORD *)i - 3);
    v12 = *i;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v5;
    v8 = (_OWORD *)(v3[7] + 32 * result);
    *v8 = v13;
    v8[1] = v12;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v3[2] = v11;
    if (!--v1)
      return (unint64_t)v3;
  }
  return (unint64_t)v3;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  unsigned int v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REAssetType, LoadableResource.Type>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = (_OWORD *)(a1 + 40); *(_QWORD *)i; i = (_OWORD *)((char *)i + 24))
  {
    v11 = *i;
    v5 = *((_DWORD *)i - 2);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v7 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v5;
    *(_OWORD *)(v3[7] + 16 * result) = v11;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v3[2] = v10;
    if (!--v1)
      return (unint64_t)v3;
  }
  return (unint64_t)v3;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  Swift::UInt v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::UInt v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 16)
    {
      outlined init with copy of (Int, URL)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)&v12, v3[7] + 8 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v13 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v13;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v13 + 1);
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!v7)
      goto LABEL_8;
    v11 = *v6++;
    v13 = v11;
    swift_retain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  uint64_t v1;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(unsigned __int16 *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 34);
  v6 = *(unsigned __int8 *)(a1 + 35);
  v7 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v10 = (unsigned __int16 *)(a1 + 48);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v3[6] + 4 * result;
    *(_WORD *)v11 = v4;
    *(_BYTE *)(v11 + 2) = v5;
    *(_BYTE *)(v11 + 3) = v6;
    *(_QWORD *)(v3[7] + 8 * result) = v7;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v3[2] = v14;
    if (!--v1)
      goto LABEL_8;
    v15 = v10 + 8;
    v4 = *v10;
    v5 = *((unsigned __int8 *)v10 + 2);
    v6 = *((unsigned __int8 *)v10 + 3);
    v16 = *((_QWORD *)v10 + 1);
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
    v10 = v15;
    v7 = v16;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(unsigned __int16 *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 34);
  v6 = *(unsigned __int8 *)(a1 + 35);
  v7 = *(_QWORD *)(a1 + 40);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v10 = (unsigned __int16 *)(a1 + 48);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = v3[6] + 4 * result;
    *(_WORD *)v11 = v4;
    *(_BYTE *)(v11 + 2) = v5;
    *(_BYTE *)(v11 + 3) = v6;
    *(_QWORD *)(v3[7] + 8 * result) = v7;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      break;
    v3[2] = v14;
    if (!--v1)
      goto LABEL_8;
    v15 = v10 + 8;
    v4 = *v10;
    v5 = *((unsigned __int8 *)v10 + 2);
    v6 = *((unsigned __int8 *)v10 + 3);
    v16 = *((_QWORD *)v10 + 1);
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4 | (v5 << 16) | (v6 << 24));
    v10 = v15;
    v7 = v16;
    if ((v17 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  Swift::UInt16 v5;
  Swift::UInt v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 56); ; i += 4)
    {
      v5 = *((_WORD *)i - 12);
      v6 = *(i - 2);
      v7 = *((unsigned __int8 *)i - 8);
      v8 = *((unsigned __int8 *)i - 7);
      v9 = *((unsigned __int8 *)i - 6);
      v10 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (v8 << 8) | (v9 << 16) | v7);
      if ((v12 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v13 = v3[6] + 24 * result;
      *(_WORD *)v13 = v5;
      *(_QWORD *)(v13 + 8) = v6;
      *(_BYTE *)(v13 + 16) = v7;
      *(_BYTE *)(v13 + 17) = v8;
      *(_BYTE *)(v13 + 18) = v9;
      *(_QWORD *)(v3[7] + 8 * result) = v10;
      v14 = v3[2];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_10;
      v3[2] = v16;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  Swift::UInt16 v5;
  Swift::UInt v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_QWORD *)(a1 + 56); ; i += 4)
    {
      v5 = *((_WORD *)i - 12);
      v6 = *(i - 2);
      v7 = *((unsigned __int8 *)i - 8);
      v8 = *((unsigned __int8 *)i - 7);
      v9 = *((unsigned __int8 *)i - 6);
      v10 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, (v8 << 8) | (v9 << 16) | v7);
      if ((v12 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v13 = v3[6] + 24 * result;
      *(_WORD *)v13 = v5;
      *(_QWORD *)(v13 + 8) = v6;
      *(_BYTE *)(v13 + 16) = v7;
      *(_BYTE *)(v13 + 17) = v8;
      *(_BYTE *)(v13 + 18) = v9;
      *(_QWORD *)(v3[7] + 8 * result) = v10;
      v14 = v3[2];
      v15 = __OFADD__(v14, 1);
      v16 = v14 + 1;
      if (v15)
        goto LABEL_10;
      v3[2] = v16;
      swift_retain();
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  unint64_t result;
  char v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v13 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v5 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    swift_retain();
    return (unint64_t)v3;
  }
  v6 = (__int128 *)(a1 + 48);
  v7 = v1 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v13;
    *(_QWORD *)(v3[7] + 8 * result) = *((_QWORD *)&v13 + 1);
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!v7)
      goto LABEL_8;
    v11 = *v6++;
    v13 = v11;
    swift_retain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentType, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  LODWORD(v4) = *(_DWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = (uint64_t *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v6;
    v10[1] = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *((unsigned int *)v9 - 4);
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = a1 + 32; ; i += 48)
    {
      outlined init with copy of (Int, URL)(i, (uint64_t)&v11, &demangling cache variable for type metadata for (UnsafeRawPointer, ActionHandlerProtocol));
      v5 = v11;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = outlined init with take of BindableDataInternal(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (uint64_t *)(a1 + 56); ; i += 12)
    {
      v19 = v1;
      v5 = *(i - 3);
      v6 = *(i - 1);
      v7 = *i;
      v9 = i[1];
      v8 = i[2];
      v11 = i[3];
      v10 = i[4];
      v12 = i[5];
      v21 = i[6];
      v20 = *((_BYTE *)i + 56);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v15 = v3[7] + 80 * result;
      *(_QWORD *)v15 = v6;
      *(_QWORD *)(v15 + 8) = v7;
      *(_QWORD *)(v15 + 16) = v9;
      *(_QWORD *)(v15 + 24) = v8;
      *(_QWORD *)(v15 + 32) = v11;
      *(_QWORD *)(v15 + 40) = v10;
      *(_QWORD *)(v15 + 48) = v12;
      *(_QWORD *)(v15 + 56) = v21;
      *(_BYTE *)(v15 + 64) = v20;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v3[2] = v18;
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _OWORD *i;
  uint64_t v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_OWORD *)(a1 + 64); ; i += 3)
    {
      v5 = *((_QWORD *)i - 4);
      v12 = *i;
      v13 = *(i - 1);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v8 = (_OWORD *)(v3[7] + 32 * result);
      *v8 = v13;
      v8[1] = v12;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, URL));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    v8 = (char *)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      outlined init with copy of (Int, URL)(v9, (uint64_t)v5, &demangling cache variable for type metadata for (Int, URL));
      v11 = *v5;
      result = specialized __RawDictionaryStorage.find<A>(_:)(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for URL();
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v8, v16);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unint64_t result;
  char v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_BYTE *)(a1 + 56);
  v8 = *(_BYTE *)(a1 + 57);
  v9 = *(_BYTE *)(a1 + 58);
  v10 = *(_BYTE *)(a1 + 59);
  v23 = a1;
  v11 = *(_BYTE *)(a1 + 60);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if ((v13 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v14 = (char *)(v23 + 92);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v15 = v3[7] + 24 * result;
    *(_QWORD *)v15 = v5;
    *(_QWORD *)(v15 + 8) = v6;
    *(_BYTE *)(v15 + 16) = v7 & 1;
    *(_BYTE *)(v15 + 17) = v8 & 1;
    *(_BYTE *)(v15 + 18) = v9;
    *(_BYTE *)(v15 + 19) = v10;
    *(_BYTE *)(v15 + 20) = v11 & 1;
    v16 = v3[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      break;
    v3[2] = v18;
    if (!--v1)
      goto LABEL_8;
    v19 = v14 + 32;
    v4 = *(_QWORD *)(v14 - 28);
    v24 = *(_QWORD *)(v14 - 20);
    v20 = *(_QWORD *)(v14 - 12);
    v22 = *(v14 - 4);
    v8 = *(v14 - 3);
    v9 = *(v14 - 2);
    v10 = *(v14 - 1);
    v11 = *v14;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    v14 = v19;
    v5 = v24;
    v6 = v20;
    v7 = v22;
    if ((v21 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  _DWORD *i;
  Swift::UInt v5;
  int v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
    for (i = (_DWORD *)(a1 + 40); ; i += 4)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_13;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  result = swift_retain();
  v8 = 0;
  v9 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v10 = v8 + 1;
    if (__OFADD__(v8, 1))
      break;
    v12 = *(v9 - 1);
    v11 = *v9;
    if (!v12)
    {
      swift_retain();
LABEL_12:
      swift_release();
      goto LABEL_13;
    }
    v13 = *(v9 - 2);
    swift_bridgeObjectRetain();
    swift_retain();
    result = a3(v13, v12);
    if ((v14 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (_QWORD *)(v5[6] + 16 * result);
    *v15 = v13;
    v15[1] = v12;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v16 = v5[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_16;
    v5[2] = v18;
    v9 += 3;
    ++v8;
    if (v10 == v6)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v14 = *v5;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = (uint64_t *)(a1 + 40);
  do
  {
    v6 = *(v5 - 1);
    if (!v6)
      break;
    v7 = *v5;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*(v5 - 1));
    if ((v9 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v7;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v5 += 2;
    --v2;
  }
  while (v2);
  return (unint64_t)v4;
}

{
  uint64_t v2;
  _QWORD *v4;
  unint64_t result;
  char v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v14 = *(_OWORD *)(a1 + 32);
  result = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(a1 + 32));
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v4;
  }
  v7 = (__int128 *)(a1 + 48);
  v8 = v2 - 1;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v14;
    *(_QWORD *)(v4[7] + 8 * result) = *((_QWORD *)&v14 + 1);
    v9 = v4[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v4[2] = v11;
    if (!v8)
      goto LABEL_8;
    v12 = *v7++;
    v14 = v12;
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    --v8;
    if ((v13 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)();
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  v24 = v4 + 64;
  swift_retain();
  v7 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v26 = v6;
    v9 = *(v7 - 3);
    v8 = *(v7 - 2);
    v10 = *(v7 - 1);
    v11 = v7[1];
    v28 = v7[2];
    v29 = *v7;
    v12 = v7[4];
    v27 = v7[3];
    v14 = v7[5];
    v13 = v7[6];
    v15 = *((_BYTE *)v7 + 56);
    swift_bridgeObjectRetain();
    LOBYTE(v23) = v15;
    a3(v10, v29, v11, v28, v27, v12, v14, v13, v23);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v9, v8);
    if ((v17 & 1) != 0)
      break;
    *(_QWORD *)(v24 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = (uint64_t *)(v5[6] + 16 * result);
    *v18 = v9;
    v18[1] = v8;
    v19 = v5[7] + 80 * result;
    *(_QWORD *)v19 = v10;
    *(_QWORD *)(v19 + 8) = v29;
    *(_QWORD *)(v19 + 16) = v11;
    *(_QWORD *)(v19 + 24) = v28;
    *(_QWORD *)(v19 + 32) = v27;
    *(_QWORD *)(v19 + 40) = v12;
    *(_QWORD *)(v19 + 48) = v14;
    *(_QWORD *)(v19 + 56) = v13;
    *(_BYTE *)(v19 + 64) = v15;
    v20 = v5[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v7 += 12;
    v5[2] = v22;
    v6 = v26 - 1;
    if (v26 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v26[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (Int, URL)(v16, (uint64_t)v9, a2);
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9);
    if ((v19 & 1) != 0)
      break;
    v20 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v21 = v11[6];
    v22 = type metadata accessor for UUID();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v20, v9, v22);
    *(_QWORD *)(v11[7] + 8 * v20) = *(_QWORD *)&v9[v13];
    v23 = v11[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v11[2] = v25;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t one-time initialization function for instances()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__RealityFileURLResolver>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8], &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
  *(_QWORD *)(v0 + 24) = result;
  static __RealityFileURLResolver.instances = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__RealityFileARReferenceProvidingPlugin>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static __RealityFileARReferenceProvidingPlugin.instances = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__USDARReferenceProvidingPlugin>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static __USDARReferenceProvidingPlugin.instances = v0;
  return result;
}

void *one-time initialization function for weakInstances()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  static __RealityFileURLResolver.weakInstances = result;
  return result;
}

uint64_t static __RealityFileURLResolver.weakShared.setter(uint64_t a1)
{
  specialized static __RealityFileURLResolver.weakShared.setter(a1);
  return swift_release();
}

uint64_t (*static __RealityFileURLResolver.weakShared.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  *a1 = specialized static __RealityFileURLResolver.weakShared.getter();
  return static __RealityFileURLResolver.weakShared.modify;
}

uint64_t static __RealityFileURLResolver.weakShared.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_retain();
    specialized static __RealityFileURLResolver.weakShared.setter(v3);
    swift_release();
  }
  else
  {
    specialized static __RealityFileURLResolver.weakShared.setter(v2);
  }
  return swift_release();
}

_QWORD *static __RealityFileURLResolver.shared.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v7);
  if (one-time initialization token for instances != -1)
    swift_once();
  v1 = static __RealityFileURLResolver.instances;
  v2 = v8;
  v3 = v9;
  v4 = __swift_project_boxed_opaque_existential_1(v7, v8);
  swift_retain();
  v5 = specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v4, v1, v2, v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

_QWORD *static __RealityFileURLResolver.instance(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = a1[3];
  v3 = a1[4];
  v4 = __swift_project_boxed_opaque_existential_1(a1, v2);
  return specialized static __RealityFileURLResolver.instance(for:)((uint64_t)v4, v1, v2, v3);
}

uint64_t __RealityFileURLResolver.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  __RealityFileURLResolver.init()();
  return v0;
}

_QWORD *__RealityFileURLResolver.init()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  _BYTE *v17;
  Swift::UInt v18;
  uint64_t v19;
  _BYTE v21[16];
  __int128 v22[2];

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v6);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  *(_QWORD *)&v22[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v7, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
  v0[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v9 = MEMORY[0x24BEE4AF8];
  v1[8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v1[9] = v9;
  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v22);
  outlined init with take of BindableDataInternal(v22, (uint64_t)(v1 + 2));
  if (one-time initialization token for weakInstances != -1)
    swift_once();
  v11 = v1[5];
  v12 = v1[6];
  v13 = __swift_project_boxed_opaque_existential_1(v1 + 2, v11);
  v14 = *(_QWORD *)(v11 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = &v21[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, __n128))(v14 + 16))(v17, v15);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v17, v11);
  swift_weakInit();
  v19 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v19, (uint64_t)v21);
  v21[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v21, v18);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init());
  return v1;
}

uint64_t @objc closure #1 in __RealityFileURLResolver.init()()
{
  return closure #1 in __RealityFileURLResolver.init()((uint64_t)&unk_24DF9E0D0, (uint64_t)partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver(), (uint64_t)thunk for @callee_guaranteed () -> ()partial apply, (uint64_t)&block_descriptor_43);
}

uint64_t closure #1 in __RealityFileURLResolver.init()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t Strong;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  char *v22;
  _QWORD aBlock[6];
  _BYTE v27[8];
  _BYTE v28[8];

  if (one-time initialization token for weakInstances != -1)
LABEL_31:
    swift_once();
  swift_beginAccess();
  v4 = static __RealityFileURLResolver.weakInstances;
  v22 = (char *)static __RealityFileURLResolver.weakInstances + 64;
  v5 = 1 << *((_BYTE *)static __RealityFileURLResolver.weakInstances + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *((_QWORD *)static __RealityFileURLResolver.weakInstances + 8);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain_n();
  v10 = 0;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v10 << 6);
LABEL_26:
    outlined init with copy of (Int, URL)(v4[7] + 8 * v12, (uint64_t)v28, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v28, (uint64_t)v27);
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v17 = Strong;
      v18 = *(void **)(Strong + 56);
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = a2;
      *(_QWORD *)(v19 + 24) = v17;
      aBlock[4] = a3;
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = a4;
      v20 = _Block_copy(aBlock);
      v21 = v18;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v21, v20);

      _Block_release(v20);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
      swift_release_n();
      swift_release();
      if ((v21 & 1) != 0)
      {
        __break(1u);
LABEL_29:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v13 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v13];
  ++v10;
  if (v14)
    goto LABEL_25;
  v10 = v13 + 1;
  if (v13 + 1 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v10];
  if (v14)
    goto LABEL_25;
  v10 = v13 + 2;
  if (v13 + 2 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v10];
  if (v14)
    goto LABEL_25;
  v10 = v13 + 3;
  if (v13 + 3 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v10];
  if (v14)
    goto LABEL_25;
  v10 = v13 + 4;
  if (v13 + 4 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v10];
  if (v14)
  {
LABEL_25:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_26;
  }
  v15 = v13 + 5;
  if (v15 >= v8)
    goto LABEL_29;
  v14 = *(_QWORD *)&v22[8 * v15];
  if (v14)
  {
    v10 = v15;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v14 = *(_QWORD *)&v22[8 * v10];
    ++v15;
    if (v14)
      goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t @objc closure #1 in __RealityFileURLResolver.init(_:)()
{
  return closure #1 in __RealityFileURLResolver.init()((uint64_t)&unk_24DF9E080, (uint64_t)partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver(), (uint64_t)thunk for @callee_guaranteed () -> ()partial apply, (uint64_t)&block_descriptor_35);
}

uint64_t __RealityFileURLResolver.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  uint64_t result;
  _QWORD v6[6];

  v1 = *(void **)(v0 + 56);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver();
  *(_QWORD *)(v2 + 24) = v0;
  v6[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v6[5] = v2;
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 1107296256;
  v6[2] = thunk for @escaping @callee_guaranteed () -> ();
  v6[3] = &block_descriptor;
  v3 = _Block_copy(v6);
  v4 = v1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v3);

  _Block_release(v3);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  return result;
}

uint64_t __RealityFileURLResolver.__deallocating_deinit()
{
  __RealityFileURLResolver.deinit();
  return swift_deallocClassInstance();
}

uint64_t static __RealityFileURLResolver.assetPathPrefix.getter()
{
  return 0x7974696C616572;
}

void one-time initialization function for schemePrefix()
{
  Swift::String v0;

  v0._countAndFlagsBits = 58;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  static __RealityFileURLResolver.schemePrefix = 0x7974696C616572;
  unk_2551922C0 = 0xE700000000000000;
}

uint64_t static __RealityFileURLResolver.schemePrefix.getter()
{
  uint64_t v0;

  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  v0 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t __RealityFileURLResolver.registerRealityFileResolver(assetService:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  outlined init with copy of __REAssetService(v0 + 16, (uint64_t)v6);
  v1 = v7;
  v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  outlined init with copy of __REAssetService(v0 + 16, (uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  REAssetManagerRegisterAssetResolver();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

id @objc closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(a2, a3);
}

Swift::Void __swiftcall __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  NSObject *v4;
  _QWORD v5[6];

  v1 = *(void **)(v0 + 56);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver();
  *(_QWORD *)(v2 + 24) = v0;
  v5[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v5[5] = v2;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed () -> ();
  v5[3] = &block_descriptor_8;
  v3 = _Block_copy(v5);
  v4 = v1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v3);

  _Block_release(v3);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v3 & 1) != 0)
    __break(1u);
}

uint64_t closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  id v34;
  void (*v35)(char *, uint64_t, uint64_t, uint64_t);
  id v36;
  NSURL *v37;
  void *v38;
  void *v39;
  unsigned int v40;
  id v41;
  void *v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  id v49[8];

  v49[7] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for URL();
  v47 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v46 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v6 = *(_QWORD *)(a1 + 64);
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 64) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v8 = 0;
  v45 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v7;
  v9 = v6 + 64;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  if (v12)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v8++, 1))
  {
    __break(1u);
    goto LABEL_39;
  }
  if (v8 < v13)
  {
    v19 = *(_QWORD *)(v9 + 8 * v8);
    if (v19)
    {
LABEL_19:
      v12 = (v19 - 1) & v19;
      for (i = __clz(__rbit64(v19)) + (v8 << 6); ; i = v16 | (v8 << 6))
      {
        v21 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * i);
        v22 = *v21;
        v23 = v21[1];
        v24 = (void *)objc_opt_self();
        swift_bridgeObjectRetain();
        v25 = objc_msgSend(v24, sel_defaultManager);
        v26 = (void *)MEMORY[0x220768C3C](v22, v23);
        swift_bridgeObjectRelease();
        v49[0] = 0;
        LODWORD(v23) = objc_msgSend(v25, sel_removeItemAtPath_error_, v26, v49);

        if ((_DWORD)v23)
        {
          v27 = v49[0];
          if (!v12)
            goto LABEL_7;
        }
        else
        {
          v14 = v49[0];
          v15 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (!v12)
            goto LABEL_7;
        }
LABEL_6:
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
      }
    }
    v20 = v8 + 1;
    if (v8 + 1 < v13)
    {
      v19 = *(_QWORD *)(v9 + 8 * v20);
      if (v19)
        goto LABEL_18;
      v20 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_27;
      v19 = *(_QWORD *)(v9 + 8 * v20);
      if (v19)
        goto LABEL_18;
      v20 = v8 + 3;
      if (v8 + 3 >= v13)
        goto LABEL_27;
      v19 = *(_QWORD *)(v9 + 8 * v20);
      if (v19)
      {
LABEL_18:
        v8 = v20;
        goto LABEL_19;
      }
      v20 = v8 + 4;
      if (v8 + 4 < v13)
      {
        v19 = *(_QWORD *)(v9 + 8 * v20);
        if (v19)
          goto LABEL_18;
        while (1)
        {
          v8 = v20 + 1;
          if (__OFADD__(v20, 1))
            break;
          if (v8 >= v13)
            goto LABEL_27;
          v19 = *(_QWORD *)(v9 + 8 * v8);
          ++v20;
          if (v19)
            goto LABEL_19;
        }
LABEL_39:
        __break(1u);
      }
    }
  }
LABEL_27:
  swift_release();
  v28 = *(_QWORD *)(v45 + 16);
  if (v28)
  {
    v30 = v46;
    v29 = v47;
    v31 = v45 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
    v32 = *(_QWORD *)(v47 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
    v33(v46, v31, v2);
    while (1)
    {
      v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
      v35(v30, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v30, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v48, v30, v2);
      v36 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      URL._bridgeToObjectiveC()(v37);
      v39 = v38;
      v49[0] = 0;
      v40 = objc_msgSend(v36, sel_removeItemAtURL_error_, v38, v49);

      if (v40)
      {
        v34 = v49[0];
      }
      else
      {
        v41 = v49[0];
        v42 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
      v29 = v47;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v2);
      v31 += v32;
      --v28;
      v30 = v46;
      if (!v28)
        goto LABEL_36;
      v33(v46, v31, v2);
    }
  }
  else
  {
    v30 = v46;
    v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56);
LABEL_36:
    v35(v30, 1, 1, v2);
  }
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @callee_guaranteed () -> ()(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t __RealityFileURLResolver.resolvedURL(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, char *, uint64_t);
  id v26;
  id v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  uint64_t v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  void (*v36)(uint64_t, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for CharacterSet();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  v39 = a2;
  static CharacterSet.urlQueryAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!v20)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v37, 1, 1, v8);
  URL.init(string:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for URL?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v37, 1, 1, v8);
  }
  v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v21(v14, v7, v8);
  v22 = URL.pathComponents.getter();
  v23 = v22;
  v24 = *(_QWORD *)(v22 + 16);
  if (!v24)
    goto LABEL_12;
  v36 = (void (*)(uint64_t, char *, uint64_t))v21;
  MEMORY[0x24BDAC7A8](v22);
  *(&v36 - 2) = v25;
  *(&v36 - 1) = (void (*)(uint64_t, char *, uint64_t))v23;
  v27 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  OS_dispatch_queue.sync<A>(execute:)();

  if (!v39)
  {
LABEL_12:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v37, 1, 1, v8);
  }
  URL.init(fileURLWithPath:)();
  result = swift_bridgeObjectRelease();
  v29 = v24 - 1;
  if (v24 == 1)
  {
LABEL_11:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    swift_bridgeObjectRelease();
    v35 = v37;
    v36(v37, v12, v8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v35, 0, 1, v8);
  }
  v30 = *(_QWORD *)(v23 + 16);
  if (v30 >= 2 && v24 <= v30)
  {
    v31 = (void **)(v23 + 56);
    do
    {
      v32 = (uint64_t)*(v31 - 1);
      v33 = *v31;
      swift_bridgeObjectRetain();
      v34._countAndFlagsBits = v32;
      v34._object = v33;
      URL.appendPathComponent(_:)(v34);
      swift_bridgeObjectRelease();
      v31 += 2;
      --v29;
    }
    while (v29);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in __RealityFileURLResolver.resolvedURL(for:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  result = unk_2551922C0;
  v16 = static __RealityFileURLResolver.schemePrefix;
  v17 = unk_2551922C0;
  if (a2[2])
  {
    v7 = a2[4];
    v8 = (void *)a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v10 = *(_QWORD *)(a1 + 64);
    if (*(_QWORD *)(v10 + 16))
    {
      swift_bridgeObjectRetain();
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
      if ((v12 & 1) != 0)
      {
        v13 = (uint64_t *)(*(_QWORD *)(v10 + 56) + 16 * v11);
        v15 = *v13;
        v14 = v13[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
LABEL_10:
        *a3 = v15;
        a3[1] = v14;
        return result;
      }
      swift_bridgeObjectRelease();
    }
    result = swift_bridgeObjectRelease();
    v15 = 0;
    v14 = 0;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t __RealityFileURLResolver.resolvedURL(group:name:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;

  v10._countAndFlagsBits = 47;
  v10._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v10)
    || (v11 = 47,
        v12 = (void *)0xE100000000000000,
        v13._countAndFlagsBits = 47,
        v13._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v13)))
  {
    v11 = 0;
    v12 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v11;
  v14._object = v12;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = a3;
  v15._object = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  if (String.hasPrefix(_:)((Swift::String)static __RealityFileURLResolver.schemePrefix)
    && (lazy protocol witness table accessor for type String and conformance String(),
        v16 = StringProtocol.components<A>(separatedBy:)(),
        swift_bridgeObjectRelease(),
        (v17 = *(_QWORD *)(v16 + 16)) != 0))
  {
    v18 = v16 + 16 * v17;
    v19 = *(_QWORD *)(v18 + 16);
    v20 = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __RealityFileURLResolver.resolvedURL(for:)(v19, v20, a5);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_21BE411F0;
    _StringGuts.grow(_:)(53);
    v23._object = (void *)0x800000021BE82A40;
    v23._countAndFlagsBits = 0xD000000000000027;
    String.append(_:)(v23);
    v24._countAndFlagsBits = a1;
    v24._object = a2;
    String.append(_:)(v24);
    v25._countAndFlagsBits = 0x20656D616E202C22;
    v25._object = (void *)0xE900000000000022;
    String.append(_:)(v25);
    v26._countAndFlagsBits = a3;
    v26._object = a4;
    String.append(_:)(v26);
    v27._countAndFlagsBits = 34;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 32) = 0;
    *(_QWORD *)(v22 + 40) = 0xE000000000000000;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    v28 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a5, 1, 1, v28);
  }
}

Swift::Void __swiftcall __RealityFileURLResolver.setResolvedURLPath(_:for:)(Swift::String _, Swift::String a2)
{
  uint64_t v2;
  uint64_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];

  v3 = v2;
  object = a2._object;
  countAndFlagsBits = a2._countAndFlagsBits;
  v6 = _._object;
  v7 = _._countAndFlagsBits;
  v8 = *(void **)(v3 + 56);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v3;
  v9[3] = countAndFlagsBits;
  v9[4] = object;
  v9[5] = v7;
  v9[6] = v6;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = partial apply for closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:);
  *(_QWORD *)(v10 + 24) = v9;
  v13[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v13[5] = v10;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed () -> ();
  v13[3] = &block_descriptor_18;
  v11 = _Block_copy(v13);
  v12 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v11);

  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v6 & 1) != 0)
    __break(1u);
}

uint64_t closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  char v22;
  char *v23;
  char v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a5;
  v44 = a4;
  v8 = type metadata accessor for URL();
  v41 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v38 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v38 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v40 = (char *)&v38 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v42 = (char *)&v38 - v20;
  v21 = (uint64_t *)(a1 + 64);
  swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v22 & 1) != 0)
    {
      v38 = v10;
      v39 = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      URL.init(fileURLWithPath:)();
      swift_bridgeObjectRelease();
      v23 = v40;
      URL.init(fileURLWithPath:)();
      URL.standardized.getter();
      URL.standardized.getter();
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)();
      v25 = v41;
      v26 = *(void (**)(char *, uint64_t))(v41 + 8);
      v26(v13, v8);
      v26(v16, v8);
      if ((v24 & 1) != 0)
      {
        v27 = v23;
      }
      else
      {
        v28 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
        v29 = v38;
        v28(v38, v42, v8);
        v30 = (unint64_t *)(a1 + 72);
        swift_beginAccess();
        v31 = *(_QWORD *)(a1 + 72);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(a1 + 72) = v31;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
          *v30 = v31;
        }
        v34 = *(_QWORD *)(v31 + 16);
        v33 = *(_QWORD *)(v31 + 24);
        if (v34 >= v33 >> 1)
        {
          v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
          *v30 = v31;
        }
        *(_QWORD *)(v31 + 16) = v34 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v31+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(_QWORD *)(v41 + 72) * v34, v29, v8);
        swift_endAccess();
        v27 = v40;
      }
      v26(v27, v8);
      v26(v42, v8);
      a2 = v39;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v35 = v43;
  swift_bridgeObjectRetain();
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v45 = *v21;
  *v21 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v44, v35, a2, a3, v36);
  *v21 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

Swift::String __swiftcall __RealityFileURLResolver.createSchemePrefix(with:)(Swift::String with)
{
  void *object;
  uint64_t countAndFlagsBits;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String result;
  __int128 v7;

  object = with._object;
  countAndFlagsBits = with._countAndFlagsBits;
  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  v7 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = countAndFlagsBits;
  v3._object = object;
  String.append(_:)(v3);
  v5 = (void *)*((_QWORD *)&v7 + 1);
  v4 = v7;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

Swift::String __swiftcall __RealityFileURLResolver.createSubAssetPath(with:)(Swift::String with)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  String.append(_:)(with);
  v1 = 0x2F737465737361;
  v2 = (void *)0xE700000000000000;
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall __RealityFileURLResolver.createFullSchemePath(group:name:)(Swift::String group, Swift::String name)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String result;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v4 = group._object;
  v5 = group._countAndFlagsBits;
  v6._countAndFlagsBits = 47;
  v6._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v6)
    || (v7 = 47,
        v8 = (void *)0xE100000000000000,
        v9._countAndFlagsBits = 47,
        v9._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v9)))
  {
    v7 = 0;
    v8 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v7;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = countAndFlagsBits;
  v11._object = object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12 = v5;
  v13 = v4;
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

uint64_t static __RealityFileURLResolver.createFullSchemePath(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  uint64_t v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v7._countAndFlagsBits = 47;
  v7._object = (void *)0xE100000000000000;
  if (String.hasSuffix(_:)(v7)
    || (v8 = 47,
        v9 = (void *)0xE100000000000000,
        v10._countAndFlagsBits = 47,
        v10._object = (void *)0xE100000000000000,
        String.hasPrefix(_:)(v10)))
  {
    v8 = 0;
    v9 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = v8;
  v11._object = v9;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *specialized static __RealityFileURLResolver.instance(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;

  if (one-time initialization token for instances != -1)
    swift_once();
  v7 = static __RealityFileURLResolver.instances;
  swift_retain();
  v8 = specialized AssetServiceScopedRegistry.instance(for:)(a1, v7, a3, a4);
  swift_release();
  return v8;
}

_QWORD *specialized AssetServiceScopedRegistry.instance(for:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  os_unfair_lock_s *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[3];
  void *v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[5];

  v26[3] = type metadata accessor for __REAssetManager();
  v26[4] = &protocol witness table for __REAssetManager;
  v26[0] = a1;
  v4 = *(_QWORD *)(a1 + 88);
  v5 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  swift_retain();
  os_unfair_lock_lock(v5);
  swift_beginAccess();
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0))
  {
    v9 = *(_QWORD **)(*(_QWORD *)(v6 + 56) + 8 * v7);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v5);
    outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)aBlock);
    type metadata accessor for __RealityFileURLResolver();
    v10 = (_QWORD *)swift_allocObject();
    v11 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)aBlock, (uint64_t)v22);
    MEMORY[0x24BDAC7A8](v11);
    v13 = (_QWORD *)((char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    v9 = specialized __RealityFileURLResolver.init(_:)(*v13, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    os_unfair_lock_lock(v5);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, v4, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(a2 + 24) = v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v16 = swift_allocObject();
    swift_weakInit();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v4;
    v23 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v24 = v17;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v22 = &block_descriptor_27;
    v18 = _Block_copy(aBlock);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v18);
  }
  os_unfair_lock_unlock(v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v9;
}

_QWORD *specialized __RealityFileURLResolver.init(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  Swift::UInt v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  _QWORD v19[5];

  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v8);
  v10 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v10);
  v19[3] = type metadata accessor for __REAssetManager();
  v19[4] = &protocol witness table for __REAssetManager;
  v16 = a1;
  v19[0] = a1;
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v17 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v9, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BEE5750], v4);
  a2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v11 = MEMORY[0x24BEE4AF8];
  a2[8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a2[9] = v11;
  outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)(a2 + 2));
  if (one-time initialization token for weakInstances != -1)
    swift_once();
  v12 = *(_QWORD *)(v16 + 88);
  swift_weakInit();
  v13 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v13, (uint64_t)v18);
  v18[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v18, v12);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init(_:));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return a2;
}

_QWORD *specialized __RealityFileURLResolver.init(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25[5];

  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v8 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.Attributes();
  v12 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v11);
  v13 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v13);
  v25[3] = a3;
  v25[4] = a4;
  v22 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v25);
  v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32);
  v20[1] = boxed_opaque_existential_1;
  v15(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v12, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5750], v21);
  a2[7] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v16 = MEMORY[0x24BEE4AF8];
  a2[8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  a2[9] = v16;
  outlined init with copy of __REAssetService((uint64_t)v25, (uint64_t)(a2 + 2));
  if (one-time initialization token for weakInstances != -1)
    swift_once();
  v17 = (*(uint64_t (**)(uint64_t))(v22 + 32))(a3);
  swift_weakInit();
  v18 = swift_weakAssign();
  outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v18, (uint64_t)v24);
  v24[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v24, v17);
  swift_endAccess();
  atexit((void (*)(void))@objc closure #1 in __RealityFileURLResolver.init(_:));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  return a2;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[6];
  if (!v4)
    return (unint64_t)v3;
  for (i = a1 + 5; ; i += 3)
  {
    v6 = *(i - 1);
    v7 = *i;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v6;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v7;
    v10[1] = v4;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_13;
    v3[2] = v13;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    v4 = i[4];
    if (!v4)
      return (unint64_t)v3;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = a1[5];
  if (!v4)
    return (unint64_t)v3;
  for (i = a1 + 4; ; i += 2)
  {
    v6 = *i;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*i);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v3[6] + v9) = v6;
    *(_QWORD *)(v3[7] + v9) = v4;
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_13;
    v3[2] = v12;
    if (!--v1)
    {
      swift_bridgeObjectRetain();
      return (unint64_t)v3;
    }
    swift_bridgeObjectRetain();
    v4 = i[3];
    if (!v4)
      return (unint64_t)v3;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[5];
  v4 = a1[6];
  if (!v5)
  {
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v6 = a1 + 4;
  while (1)
  {
    v7 = *v6;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v4;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_12;
    v3[2] = v13;
    if (--v1)
    {
      swift_retain();
      v5 = v6[4];
      v4 = v6[5];
      v6 += 3;
      if (v5)
        continue;
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<Int, String>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  _OWORD *i;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  for (i = (_OWORD *)(a1 + 40); *(_QWORD *)i; i = (_OWORD *)((char *)i + 24))
  {
    v14 = *i;
    v8 = *((_QWORD *)i - 1);
    result = a3(v8);
    if ((v10 & 1) != 0)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v6[6] + 8 * result) = v8;
    *(_OWORD *)(v6[7] + 16 * result) = v14;
    v11 = v6[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v6[2] = v13;
    if (!--v3)
      return (unint64_t)v6;
  }
  return (unint64_t)v6;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  Swift::UInt v5;
  Swift::UInt *i;
  Swift::UInt v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = a1[2];
  if (!v2)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v5 = a1[5];
  if (!v5)
    return (unint64_t)v4;
  for (i = a1 + 4; ; i += 2)
  {
    v7 = *i;
    result = specialized __RawDictionaryStorage.find<A>(_:)(*i);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v7;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_13;
    v4[2] = v13;
    if (!--v2)
    {
      swift_retain();
      return (unint64_t)v4;
    }
    swift_retain();
    v5 = i[3];
    if (!v5)
      return (unint64_t)v4;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1[2];
  if (!v3)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  result = a3(v7);
  if ((v11 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v6;
  }
  v12 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v6[6] + 8 * result) = v7;
    v13 = (_QWORD *)(v6[7] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    v14 = v6[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      break;
    v6[2] = v16;
    if (!--v3)
      goto LABEL_8;
    v17 = v12 + 3;
    v7 = *(v12 - 2);
    v8 = *(v12 - 1);
    v18 = *v12;
    swift_bridgeObjectRetain();
    result = a3(v7);
    v12 = v17;
    v9 = v18;
    if ((v19 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t specialized static __RealityFileURLResolver.weakShared.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t Strong;
  uint64_t v9;
  char v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for weakInstances != -1)
    swift_once();
  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  v1 = v12;
  v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  swift_beginAccess();
  v4 = static __RealityFileURLResolver.weakInstances;
  if (*((_QWORD *)static __RealityFileURLResolver.weakInstances + 2)
    && (v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v6 & 1) != 0))
  {
    outlined init with copy of (Int, URL)(v4[7] + 8 * v5, (uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
    v10 = 0;
    Strong = swift_weakLoadStrong();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    swift_endAccess();
  }
  else
  {
    v9 = 0;
    v10 = 1;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v9, &demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>?);
    swift_endAccess();
    Strong = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return Strong;
}

uint64_t specialized static __RealityFileURLResolver.weakShared.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt v5;
  _BYTE v7[24];
  uint64_t v8;
  BOOL v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for weakInstances != -1)
    swift_once();
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v10);
  v3 = v11;
  v4 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  if (a1)
  {
    swift_weakInit();
    swift_weakAssign();
    outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v7, (uint64_t)&v8);
  }
  else
  {
    v8 = 0;
  }
  v9 = a1 == 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)&v8, v5);
  swift_endAccess();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  uint64_t v0;

  return closure #1 in __RealityFileURLResolver.unregisterRealityFileResolver()(v0);
}

uint64_t sub_21B9E8F10()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_21B9E8F58()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.resolvedURL(for:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in __RealityFileURLResolver.resolvedURL(for:)(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_21B9E8F80()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)()
{
  uint64_t *v0;

  return closure #1 in __RealityFileURLResolver.setResolvedURLPath(_:for:)(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_21B9E8FC4()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for __RealityFileURLResolver()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RealityFileURLResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RealityFileURLResolver.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.registerRealityFileResolver(assetService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.registerRealityFileResolver()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.unregisterRealityFileResolver()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.resolvedURL(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.resolvedURL(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.setResolvedURLPath(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createSchemePrefix(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createSubAssetPath(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of __RealityFileURLResolver.createFullSchemePath(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t type metadata instantiation function for __RealityFileURLResolver.Weak()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for __RealityFileURLResolver.Weak(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for __RealityFileURLResolver.Weak);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t outlined init with take of LoadTrace(uint64_t a1, uint64_t a2)
{
  uint64_t Trace;

  Trace = type metadata accessor for LoadTrace(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Trace - 8) + 32))(a2, a1, Trace);
  return a2;
}

id outlined copy of __RKMaterialParameterBlock.Parameter(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  id v9;

  switch(a9)
  {
    case 6:
      return result;
    case 1:
      v9 = result;
      return (id)swift_retain();
    case 0:
      return (id)swift_retain();
  }
  return result;
}

id outlined copy of __MaterialResource.CoreMaterialFunction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id result;

  if (a3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a6;
  }
  return result;
}

uint64_t outlined retain of (CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(void **)(a1 + 112);
  outlined copy of __MaterialResource.CoreMaterialFunction?(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(void **)(a1 + 64));
  outlined copy of __MaterialResource.CoreMaterialFunction?(v2, v3, v4, v5, v6, v7);
  swift_retain();
  return a1;
}

id specialized closure #1 in __RealityFileURLResolver.registerRealityFileResolver()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = String.init(cString:)();
  v12 = v11;
  if (a2)
  {
    v13 = v10;
    type metadata accessor for __REAssetManager();
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = 0u;
    *(_OWORD *)(v14 + 32) = 0u;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_BYTE *)(v14 + 80) = 2;
    *(_WORD *)(v14 + 96) = 514;
    *(_QWORD *)(v14 + 88) = a2;
    v15 = one-time initialization token for instances;
    swift_retain();
    if (v15 != -1)
      swift_once();
    v16 = static __RealityFileURLResolver.instances;
    swift_retain();
    specialized AssetServiceScopedRegistry.instance(for:)(v14, v16);
    swift_release();
    swift_release();
    __RealityFileURLResolver.resolvedURL(for:)(v13, v12, (uint64_t)v5);
    swift_release();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      swift_release();
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
      return 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      v18 = URL.path.getter();
      v20 = v19;
      v21 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
      v22 = (void *)MEMORY[0x220768C3C](v18, v20);
      swift_bridgeObjectRelease();
      v23 = objc_msgSend(v21, sel_initWithString_, v22);

      v17 = objc_msgSend(v23, sel_fileSystemRepresentation);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v24 = v23;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v17;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_21B9E94DC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21B9E9500()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:)()
{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

{
  uint64_t v0;

  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

uint64_t sub_21B9E952C()
{
  return swift_deallocObject();
}

uint64_t sub_21B9E953C()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of (Int, URL)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t __RKEntityActionSpecification.init(decodeContext:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  void **v3;
  void *v5;
  unint64_t result;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  void (*v29)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  unsigned __int8 v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  _QWORD v49[6];
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;

  v3 = a1;
  v5 = *a1;
  result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x736E6F69746361, 0xE700000000000000, 0, *a1);
  if (v2)
  {

    swift_release();
    v62 = v3[3];
    outlined release of [String : String]((uint64_t)&v62);
    v61 = v3[4];
    outlined release of [String : String]((uint64_t)&v61);
    v60 = v3[5];
    v7 = &v60;
    return outlined release of [String : String]((uint64_t)v7);
  }
  v8 = result;
  v50 = MEMORY[0x24BEE4AF8];
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v9)
      goto LABEL_6;
LABEL_31:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x24BEE4AF8];
    if (!*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
      goto LABEL_32;
LABEL_26:
    v34 = (void *)MEMORY[0x220768C3C](0x766973756C637865, 0xE900000000000065);
    v35 = objc_msgSend(v5, sel_property_, v34);

    if (v35)
    {
      v36 = objc_msgSend(v35, sel_BOOLValue);

      swift_release();
      v56 = v3[3];
      outlined release of [String : String]((uint64_t)&v56);
      v55 = v3[4];
      outlined release of [String : String]((uint64_t)&v55);
      v54 = v3[5];
      outlined release of [String : String]((uint64_t)&v54);

    }
    else
    {

      swift_release();
      v59 = v3[3];
      outlined release of [String : String]((uint64_t)&v59);
      v58 = v3[4];
      outlined release of [String : String]((uint64_t)&v58);
      v57 = v3[5];
      outlined release of [String : String]((uint64_t)&v57);
      v36 = 0;
    }
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v33;
    *(_BYTE *)(a2 + 16) = v36;
    *(_QWORD *)(a2 + 24) = 1;
    *(_WORD *)(a2 + 32) = 0;
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  v9 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_31;
LABEL_6:
  if (v9 < 1)
  {
    __break(1u);
    return result;
  }
  v37 = v5;
  v38 = a2;
  v10 = 0;
  v11 = v8 & 0xC000000000000001;
  v47 = v3[1];
  v40 = v9;
  v41 = v8;
  v42 = v3;
  v39 = v8 & 0xC000000000000001;
  do
  {
    if (v11)
      v12 = (id)MEMORY[0x220769770](v10, v8);
    else
      v12 = *(id *)(v8 + 8 * v10 + 32);
    v13 = v12;
    v14 = objc_msgSend(v47, sel_objectAtPath_, v12, v37, v38);
    if (v14)
    {
      v15 = v14;
      objc_opt_self();
      v16 = swift_dynamicCastObjCClass();
      if (!v16)
        goto LABEL_9;
      v17 = (void *)v16;
      v18 = v3[2];
      v19 = v3[3];
      v20 = v3[4];
      v21 = v3[5];
      v44 = v15;
      v45 = v47;
      v43 = v18;
      swift_retain();
      v46 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v22 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 1, v17);
      v24 = v23;
      if (v23)
      {
        v25 = (uint64_t)v22;
        if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1)
          swift_once();
        v26 = static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator;
        if (*((_QWORD *)static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator + 2))
        {
          swift_bridgeObjectRetain();
          v27 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
          if ((v28 & 1) != 0)
          {
            v29 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v26[7] + 16 * v27);
            swift_retain();
            swift_bridgeObjectRelease_n();
            v49[0] = v17;
            v49[1] = v45;
            v49[2] = v43;
            v49[3] = v46;
            v49[4] = v20;
            v49[5] = v21;
            v29(&v48, v49);
            swift_release();
            v30 = v48;
LABEL_8:
            specialized Array.append<A>(contentsOf:)(v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();

            v8 = v41;
            v3 = v42;
            v11 = v39;
            v9 = v40;
LABEL_9:

            goto LABEL_10;
          }
          swift_bridgeObjectRelease();
        }
        static os_log_type_t.debug.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v31 = swift_allocObject();
        *(_OWORD *)(v31 + 16) = xmmword_21BE411F0;
        *(_QWORD *)(v31 + 56) = MEMORY[0x24BEE0D00];
        *(_QWORD *)(v31 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(_QWORD *)(v31 + 32) = v25;
        *(_QWORD *)(v31 + 40) = v24;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v32 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();

      }
      v30 = MEMORY[0x24BEE4AF8];
      goto LABEL_8;
    }
LABEL_10:
    ++v10;

  }
  while (v9 != v10);
  swift_bridgeObjectRelease();
  v33 = v50;
  v5 = v37;
  a2 = v38;
  if (*(_QWORD *)(v50 + 16))
    goto LABEL_26;
LABEL_32:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError();
  swift_allocError();
  swift_willThrow();

  swift_release();
  v53 = v3[3];
  outlined release of [String : String]((uint64_t)&v53);
  v52 = v3[4];
  outlined release of [String : String]((uint64_t)&v52);
  v51 = v3[5];
  v7 = &v51;
  return outlined release of [String : String]((uint64_t)v7);
}

void *one-time initialization function for actionTypeToActionSpecificationsGenerator()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for actionTypeToActionSpecificationsGenerator);
  static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator = result;
  return result;
}

unint64_t static __RKEntityActionSpecification.generateGroupActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  int v19;
  unint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void (*v31)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE v46[12];
  int v47;
  __int128 v48;
  int v49;
  int v50;
  void (*v51)(uint64_t *__return_ptr, _QWORD *);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[6];
  uint64_t v65;

  v2 = type metadata accessor for __RKEntityActionSpecification(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v4);
  v8 = &v46[-v7];
  v9 = *(void **)a1;
  v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x73706F6F6CLL, 0xE500000000000000, 1, *(void **)a1);
  v11 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x436D726F66726570, 0xEC000000746E756FLL, 1, v9);
  v53 = v2;
  v54 = v3;
  v55 = v6;
  v52 = v11;
  v12 = *(void **)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = v9;
  v18 = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  v62 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __RKEntityGroupActionOrder.init(decodeContext:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, _QWORD))specialized USKNode.valueForProperty<A>(named:requestContext:getter:), (Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrderUSD.init(rawValue:), (void (*)(uint64_t))lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, (char *)v64);
  v56 = v13;
  v19 = LOBYTE(v64[0]);
  result = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x736E6F69746361, 0xE700000000000000, 1, v17);
  v21 = result;
  v49 = v19;
  v65 = MEMORY[0x24BEE4AF8];
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v22 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v22)
  {
    v47 = v10;
    if (v22 >= 1)
    {
      v23 = 0;
      v59 = v21 & 0xC000000000000001;
      v48 = xmmword_21BE411F0;
      v60 = v22;
      v61 = v21;
      v58 = v15;
      while (1)
      {
        if (v59)
          v24 = (id)MEMORY[0x220769770](v23, v21);
        else
          v24 = *(id *)(v21 + 8 * v23 + 32);
        v25 = v24;
        v26 = objc_msgSend(v18, sel_objectAtPath_, v24);
        if (v26)
        {
          v27 = v26;
          objc_opt_self();
          v28 = swift_dynamicCastObjCClass();
          if (v28)
          {
            v29 = (void *)v28;
            v57 = v18;
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v30 = v27;
            v31 = (void (*)(uint64_t *__return_ptr, _QWORD *))specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x64693A6F666E69, 0xE700000000000000, 1, v29);
            v33 = v32;
            if (v32)
            {
              v51 = v31;
              if (one-time initialization token for actionTypeToActionSpecificationsGenerator != -1)
                swift_once();
              v34 = static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator;
              if (*((_QWORD *)static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator + 2))
              {
                swift_bridgeObjectRetain();
                v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v51, v33);
                if ((v36 & 1) != 0)
                {
                  v51 = *(void (**)(uint64_t *__return_ptr, _QWORD *))(v34[7] + 16 * v35);
                  swift_retain();
                  swift_bridgeObjectRelease_n();
                  v64[0] = v29;
                  v64[1] = v57;
                  v64[2] = v56;
                  v64[3] = v58;
                  v64[4] = v62;
                  v64[5] = v16;
                  v51(&v63, v64);
                  swift_release();
                  v37 = v63;
                  goto LABEL_25;
                }
                swift_bridgeObjectRelease();
              }
              v50 = static os_log_type_t.debug.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
              v38 = swift_allocObject();
              *(_OWORD *)(v38 + 16) = v48;
              *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE0D00];
              *(_QWORD *)(v38 + 64) = lazy protocol witness table accessor for type String and conformance String();
              *(_QWORD *)(v38 + 32) = v51;
              *(_QWORD *)(v38 + 40) = v33;
              type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
              v39 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();

            }
            v37 = MEMORY[0x24BEE4AF8];
LABEL_25:
            if (*(_QWORD *)(v37 + 16))
            {
              specialized Array.append<A>(contentsOf:)(v37);

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

            }
            else
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();

              swift_bridgeObjectRelease();
            }
            goto LABEL_10;
          }

        }
LABEL_10:
        ++v23;
        v21 = v61;
        if (v60 == v23)
        {
          swift_bridgeObjectRelease();
          v40 = v65;
          LOBYTE(v10) = v47;
          goto LABEL_30;
        }
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v40 = MEMORY[0x24BEE4AF8];
LABEL_30:
    v42 = v54;
    v41 = (uint64_t)v55;
    if (*(_QWORD *)(v40 + 16))
    {
      v43 = (int)v52;
      *v8 = v49;
      if ((v10 & 1) != 0)
        v43 = 0;
      *((_QWORD *)v8 + 1) = v40;
      v8[16] = 0;
      *((_QWORD *)v8 + 3) = v43;
      *((_WORD *)v8 + 16) = 0;
      swift_storeEnumTagMultiPayload();
      static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:)((uint64_t)v8, v41);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v44 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_21BE411F0;
      outlined init with take of __RKEntityActionSpecification(v41, v45 + v44, type metadata accessor for __RKEntityActionSpecification);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for __RKEntityActionSpecification);
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    return v45;
  }
  return result;
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t started;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  char v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;

  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v6 = &v36[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v36[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for __RKEntityActionSpecification(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v20 = &v36[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v18);
  v22 = &v36[-v21];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v36[-v21], v23);
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    v24 = a1;
    v42 = a2;
    v25 = *((_QWORD *)v22 + 1);
    if (*(_QWORD *)(v25 + 16) == 1)
    {
      v26 = v22[16];
      v27 = *((_QWORD *)v22 + 3);
      v28 = v22[32];
      v29 = v22[33];
      if ((v28 & 1) != 0)
      {
        v30 = 1;
LABEL_8:
        v32 = *v22;
        v37 = v26;
        v39 = v29;
        v38 = v27;
        v40 = v30;
        v41 = v24;
        outlined init with copy of __RKEntityActionSpecification(v25 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v20, type metadata accessor for __RKEntityActionSpecification);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 0u:
            v33 = type metadata accessor for __RKEntityAudioActionArguments;
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v9, type metadata accessor for __RKEntityAudioActionArguments);
            v43[0] = v32;
            v44 = v25;
            v45 = v37;
            v46 = v38;
            v47 = v28;
            v48 = v39;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)(v41, v40, (uint64_t)v9, v42);
            v34 = (uint64_t)v9;
            goto LABEL_15;
          case 0xAu:
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v6, type metadata accessor for __RKEntityStartAnimateActionArguments);
            v43[0] = v32;
            v44 = v25;
            v45 = v37;
            v46 = v38;
            v47 = v28;
            v48 = v39;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:startAnimateActionArguments:)(v40, (uint64_t)v6, v42);
            v34 = (uint64_t)v6;
            v35 = type metadata accessor for __RKEntityStartAnimateActionArguments;
            goto LABEL_16;
          case 0x10u:
            v33 = type metadata accessor for __RKEntityOrbitEntityActionArguments;
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v12, type metadata accessor for __RKEntityOrbitEntityActionArguments);
            v43[0] = v32;
            v44 = v25;
            v45 = v37;
            v46 = v38;
            v47 = v28;
            v48 = v39;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)(v43, v40, (uint64_t)v12, v42);
            v34 = (uint64_t)v12;
            goto LABEL_15;
          case 0x13u:
            v33 = type metadata accessor for __RKEntitySpinActionArguments;
            outlined init with take of __RKEntityActionSpecification((uint64_t)v20, (uint64_t)v15, type metadata accessor for __RKEntitySpinActionArguments);
            v43[0] = v32;
            v44 = v25;
            v45 = v37;
            v46 = v38;
            v47 = v28;
            v48 = v39;
            static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)(v43, v40, (uint64_t)v15, v42);
            v34 = (uint64_t)v15;
LABEL_15:
            v35 = v33;
LABEL_16:
            outlined destroy of __RKEntityActionSpecification(v34, v35);
            return swift_bridgeObjectRelease();
          default:
            swift_bridgeObjectRelease();
            outlined init with copy of __RKEntityActionSpecification(v41, v42, type metadata accessor for __RKEntityActionSpecification);
            return outlined destroy of __RKEntityActionSpecification((uint64_t)v20, type metadata accessor for __RKEntityActionSpecification);
        }
      }
      v30 = *((_QWORD *)v22 + 3);
      if (v27 >= 1)
        goto LABEL_8;
    }
    outlined init with copy of __RKEntityActionSpecification(v24, v42, type metadata accessor for __RKEntityActionSpecification);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v22, type metadata accessor for __RKEntityActionSpecification);
    return outlined init with copy of __RKEntityActionSpecification(a1, a2, type metadata accessor for __RKEntityActionSpecification);
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:spinActionArguments:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[4];
  unsigned __int8 v32;
  char v33;
  unsigned __int8 v34;

  v8 = type metadata accessor for __RKEntitySpinActionArguments(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    v12 = (unsigned int *)(a3 + *(int *)(v9 + 20));
    v13 = *v12;
    v14 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    v15 = *v14;
    LOBYTE(v14) = *((_BYTE *)v14 + 4);
    v34 = *((_BYTE *)v12 + 4);
    v33 = (char)v14;
    v16 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v13 | ((unint64_t)v34 << 32), v15 | ((unint64_t)v14 << 32));
    if (v16 >= (float)a2)
    {
      v16 = (float)a2;
    }
    else if ((~LODWORD(v16) & 0x7F800000) == 0 && (LODWORD(v16) & 0x7FFFFF) != 0)
    {
      v16 = (float)a2;
    }
    static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)(a3, a4, v16);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v17 = a1[32];
    v18 = *((_QWORD *)a1 + 3);
    v19 = a1[16];
    v20 = *a1;
    v21 = (unsigned int *)(a3 + *(int *)(v9 + 20));
    v22 = *v21;
    v23 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    v24 = *v23;
    LOBYTE(v23) = *((_BYTE *)v23 + 4);
    v32 = *((_BYTE *)v21 + 4);
    v31[0] = (_BYTE)v23;
    v25 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v22 | ((unint64_t)v32 << 32), v24 | ((unint64_t)v23 << 32));
    static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)(a3, (uint64_t)v11, v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v27 = (v26 + 32) & ~v26;
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_21BE411F0;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v11, v28 + v27, type metadata accessor for __RKEntitySpinActionArguments);
    swift_storeEnumTagMultiPayload();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntitySpinActionArguments);
    *(_BYTE *)a4 = v20;
    if (v17)
      v29 = 1;
    else
      v29 = v18;
    *(_QWORD *)(a4 + 8) = v28;
    *(_BYTE *)(a4 + 16) = v19 & 1;
    *(_QWORD *)(a4 + 24) = v29;
    *(_WORD *)(a4 + 32) = 0;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:orbitActionArguments:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[4];
  unsigned __int8 v32;
  char v33;
  unsigned __int8 v34;

  v8 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    v12 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    v13 = *v12;
    v14 = (unsigned int *)(a3 + *(int *)(v9 + 28));
    v15 = *v14;
    LOBYTE(v14) = *((_BYTE *)v14 + 4);
    v34 = *((_BYTE *)v12 + 4);
    v33 = (char)v14;
    v16 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v13 | ((unint64_t)v34 << 32), v15 | ((unint64_t)v14 << 32));
    if (v16 >= (float)a2)
    {
      v16 = (float)a2;
    }
    else if ((~LODWORD(v16) & 0x7F800000) == 0 && (LODWORD(v16) & 0x7FFFFF) != 0)
    {
      v16 = (float)a2;
    }
    static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)(a3, a4, v16);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    v17 = a1[32];
    v18 = *((_QWORD *)a1 + 3);
    v19 = a1[16];
    v20 = *a1;
    v21 = (unsigned int *)(a3 + *(int *)(v9 + 24));
    v22 = *v21;
    v23 = (unsigned int *)(a3 + *(int *)(v9 + 28));
    v24 = *v23;
    LOBYTE(v23) = *((_BYTE *)v23 + 4);
    v32 = *((_BYTE *)v21 + 4);
    v31[0] = (_BYTE)v23;
    v25 = specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(v22 | ((unint64_t)v32 << 32), v24 | ((unint64_t)v23 << 32));
    static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)(a3, (uint64_t)v11, v25);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v26 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v27 = (v26 + 32) & ~v26;
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_21BE411F0;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v11, v28 + v27, type metadata accessor for __RKEntityOrbitEntityActionArguments);
    swift_storeEnumTagMultiPayload();
    outlined destroy of __RKEntityActionSpecification((uint64_t)v11, type metadata accessor for __RKEntityOrbitEntityActionArguments);
    *(_BYTE *)a4 = v20;
    if (v17)
      v29 = 1;
    else
      v29 = v18;
    *(_QWORD *)(a4 + 8) = v28;
    *(_BYTE *)(a4 + 16) = v19 & 1;
    *(_QWORD *)(a4 + 24) = v29;
    *(_WORD *)(a4 + 32) = 0;
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:audioActionArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 >= 1)
    return outlined init with copy of __RKEntityActionSpecification(a1, a4, type metadata accessor for __RKEntityActionSpecification);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3, v8);
  v13 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  v14 = v13;
  v15 = v13[6];
  v16 = (uint64_t *)(a3 + v13[5]);
  v17 = *v16;
  v36 = v16[1];
  v37 = v17;
  v18 = *(unsigned __int8 *)(a3 + v15);
  if (v18 == 3)
    v18 = 0;
  v35 = v18;
  v20 = v13[9];
  v19 = v13[10];
  if (*(_BYTE *)(a3 + v20) == 3)
    v21 = 0;
  else
    v21 = *(unsigned __int8 *)(a3 + v20);
  v22 = v13[7];
  v34 = v13[8];
  v23 = a3 + v22;
  v24 = *(unsigned __int8 *)(a3 + v19);
  v25 = *(_QWORD *)(a3 + v22);
  v26 = *(unsigned __int8 *)(v23 + 8);
  if (v24 == 3)
    v24 = 1;
  v32 = v21;
  v33 = v24;
  v27 = a4 + v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v11, v8);
  v28 = (_QWORD *)(a4 + v14[5]);
  v29 = v36;
  *v28 = v37;
  v28[1] = v29;
  *(_BYTE *)(a4 + v15) = v35;
  *(_BYTE *)(a4 + v20) = v32;
  v30 = 0x3FF0000000000000;
  if (!v26)
    v30 = v25;
  *(_QWORD *)v27 = v30;
  *(_BYTE *)(v27 + 8) = 0;
  *(_BYTE *)(a4 + v34) = 1;
  *(_BYTE *)(a4 + v14[10]) = v33;
  type metadata accessor for __RKEntityActionSpecification(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t static __RKEntityActionSpecification.collapseAndReturnGroupActionSpecification(_:groupActionArguments:loopCount:startAnimateActionArguments:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  int *started;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  char v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE *v25;
  _BYTE v26[4];
  int v27;
  uint64_t v28;

  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v14 = *(_QWORD *)(a2 + started[5]);
  v15 = v14 * a1;
  if ((unsigned __int128)(v14 * (__int128)a1) >> 64 == (v14 * a1) >> 63)
  {
    v16 = started[7];
    v27 = *(unsigned __int8 *)(a2 + started[6]);
    v17 = *(_QWORD *)(a2 + v16);
    v18 = started[9];
    v19 = *(_QWORD *)(a2 + started[8]);
    v20 = *(_BYTE *)(a2 + started[10]);
    v21 = *(_DWORD *)(a2 + started[11]);
    v28 = a3;
    v22 = *(_BYTE *)(a2 + v18);
    v23 = (uint64_t)&v8[started[14]];
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v24(v23, 1, 1, v9);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v8, v12, v9);
    *(_QWORD *)&v8[started[5]] = v15;
    v8[started[6]] = v27;
    v8[started[10]] = v20;
    *(_QWORD *)&v8[started[8]] = v19;
    *(_QWORD *)&v8[started[7]] = v17;
    *(_DWORD *)&v8[started[11]] = v21;
    v8[started[9]] = v22;
    v8[started[12]] = 0;
    v25 = &v8[started[13]];
    *(_QWORD *)v25 = 0x3FF0000000000000;
    v25[8] = 0;
    outlined destroy of UUID?(v23);
    v24(v23, 1, 1, v9);
    outlined init with take of __RKEntityActionSpecification((uint64_t)v8, v28, type metadata accessor for __RKEntityStartAnimateActionArguments);
    type metadata accessor for __RKEntityActionSpecification(0);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static __RKEntityActionSpecification.copySpinActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  float v12;
  int v13;
  uint64_t v14;
  float v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  float v22;
  float v23;
  uint64_t result;
  float v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  v10 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  v11 = a1 + v10[5];
  v12 = *(float *)v11;
  v13 = *(unsigned __int8 *)(v11 + 4);
  v14 = a1 + v10[6];
  v15 = *(float *)v14;
  v16 = *(unsigned __int8 *)(v14 + 4);
  v17 = *(_BYTE *)(a1 + v10[7]);
  v18 = a1 + v10[8];
  if ((*(_BYTE *)(v18 + 16) & 1) != 0)
  {
    v19 = 0;
    v20 = 0x3F80000000000000;
  }
  else
  {
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  v21 = v17 & 1;
  if (v16)
    v15 = 1.0;
  if (v13)
    v12 = 1.0;
  v22 = v12 * a3;
  v23 = v15 * a3;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
  if (v22 < 0.0)
    v25 = 1.0;
  else
    v25 = v22;
  v26 = a2 + v10[5];
  *(float *)v26 = v25;
  *(_BYTE *)(v26 + 4) = 0;
  if (v23 < 0.0)
    v27 = 1.0;
  else
    v27 = v23;
  v28 = v10[7];
  v29 = a2 + v10[6];
  v30 = a2 + v10[8];
  *(float *)v29 = v27;
  *(_BYTE *)(v29 + 4) = 0;
  *(_BYTE *)(a2 + v28) = v21;
  *(_QWORD *)v30 = v20;
  *(_QWORD *)(v30 + 8) = v19;
  *(_BYTE *)(v30 + 16) = 0;
  return result;
}

uint64_t static __RKEntityActionSpecification.copyOrbitActionArguments(_:multiplier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  float v26;
  float v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t result;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v39 - v11;
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v13((char *)&v39 - v11, a1, v6);
  v14 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v13(v10, a1 + v14[5], v6);
  v15 = a1 + v14[6];
  v16 = *(float *)v15;
  v17 = *(unsigned __int8 *)(v15 + 4);
  v18 = a1 + v14[7];
  v19 = *(float *)v18;
  v20 = *(unsigned __int8 *)(v18 + 4);
  v21 = a1 + v14[8];
  if ((*(_BYTE *)(v21 + 16) & 1) != 0)
  {
    v22 = 0;
    v23 = 0x3F80000000000000;
  }
  else
  {
    v23 = *(_QWORD *)v21;
    v22 = *(_QWORD *)(v21 + 8);
  }
  if (v20)
    v19 = 1.0;
  if (v17)
    v16 = 1.0;
  v24 = *(_BYTE *)(a1 + v14[9]) & 1;
  v25 = *(_BYTE *)(a1 + v14[10]) & 1;
  v26 = v16 * a3;
  v27 = v19 * a3;
  v28 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v28(a2, v12, v6);
  result = ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(a2 + v14[5], v10, v6);
  if (v26 < 0.0)
    v30 = 1.0;
  else
    v30 = v26;
  v31 = a2 + v14[6];
  v32 = a2 + v14[7];
  v33 = v14[9];
  v34 = a2 + v14[8];
  v35 = v14[10];
  v36 = v14[11];
  v37 = a2 + v14[12];
  v38 = a2 + v14[13];
  *(float *)v31 = v30;
  *(_BYTE *)(v31 + 4) = 0;
  *(float *)v32 = v27;
  *(_BYTE *)(v32 + 4) = 0;
  *(_QWORD *)v34 = v23;
  *(_QWORD *)(v34 + 8) = v22;
  *(_BYTE *)(v34 + 16) = 0;
  *(_BYTE *)(a2 + v33) = v24;
  *(_BYTE *)(a2 + v35) = v25;
  *(_BYTE *)(a2 + v36) = 0;
  *(_DWORD *)v37 = 0;
  *(_BYTE *)(v37 + 4) = 0;
  *(_DWORD *)v38 = 0;
  *(_BYTE *)(v38 + 4) = 0;
  return result;
}

uint64_t __RKEntityAudioActionType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(void **)a1;
  v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1701869940, 0xE400000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v18 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityAudioActionType.init(rawValue:)(*(Swift::String *)&v6), v9 != 3))
  {

    swift_release();
    v12 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    v11 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v15 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

uint64_t __RKAudioSpatialModeSelection.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  uint64_t result;
  void *v9;
  Swift::String v10;
  Swift::Int v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(void **)a1;
  v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x646F4D6C61727561, 0xE900000000000065, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v28 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v28);
    v27 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v27);
    v26 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v26);
  }
  v9 = v7;
  if (!v7)
    goto LABEL_8;
  v10._countAndFlagsBits = (uint64_t)v6;
  v10._object = v9;
  v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKAudioSpatialModeSelectionUSD.init(rawValue:), v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {

    swift_release();
    v16 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    v15 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    v12 = 0;
    v14 = *(_QWORD *)(a1 + 40);
    v13 = &v14;
    goto LABEL_11;
  }
  if (v11 == 1)
  {

    swift_release();
    v19 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    v18 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 40);
    v12 = 2;
    v13 = &v17;
    goto LABEL_11;
  }
  if (v11 != 2)
  {
LABEL_8:
    lazy protocol witness table accessor for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v25 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v25);
    v24 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v24);
    v23 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v23);
  }

  swift_release();
  v22 = *(_QWORD *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v22);
  v21 = *(_QWORD *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v21);
  v20 = *(_QWORD *)(a1 + 40);
  v12 = 1;
  v13 = &v20;
LABEL_11:
  result = outlined release of [String : String]((uint64_t)v13);
  *a2 = v12;
  return result;
}

uint64_t __RKEntityEmphasisAnimationType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(void **)a1;
  v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v18 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityEmphasisAnimationType.init(rawValue:)(*(Swift::String *)&v6), v9 != 8))
  {

    swift_release();
    v12 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    v11 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v15 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

uint64_t __RKEntityActionAnimationStyle.init(decodeContext:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(void **)a1;
  v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x656C797473, 0xE500000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v18 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v7 && (__RKEntityActionAnimationStyle.init(rawValue:)(*(Swift::String *)&v6), v9 != 3))
  {

    swift_release();
    v12 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    v11 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = v9;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v15 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.ActionUSDLoadingError, &type metadata for __RKEntityActionSpecification.ActionUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.ActionUSDLoadingError, &type metadata for __RKEntityActionSpecification.ActionUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionUSDLoadingError and conformance __RKEntityActionSpecification.ActionUSDLoadingError);
  }
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v25)(char *, char *, uint64_t);
  unint64_t *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;

  v35 = a3;
  v37 = a2;
  v38 = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v33 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v33 - v19;
  v34 = type metadata accessor for __RKEntityActionSpecification(0);
  v36 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v20, v38, v5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v20, 0, 1, v5);
  v38 = a4;
  swift_bridgeObjectRetain();
  v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  outlined init with copy of UUID?((uint64_t)v20, (uint64_t)v18);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v23(v18, 1, v5) == 1)
  {
    UUID.init(uuidString:)();
    result = v23(v15, 1, v5);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v25(v8, v15, v5);
    outlined destroy of UUID?((uint64_t)v18);
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v25(v8, v18, v5);
  }
  v26 = v37;
  v25(v11, v8, v5);
  v27 = &v11[*(int *)(v9 + 20)];
  v28 = v38;
  *(_QWORD *)v27 = v35;
  *((_QWORD *)v27 + 1) = v28;
  outlined destroy of UUID?((uint64_t)v20);
  *(_QWORD *)&v11[*(int *)(v9 + 24)] = v33;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v11, (uint64_t)v22, type metadata accessor for __RKEntityCustomActionArguments);
  swift_storeEnumTagMultiPayload();
  v29 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v26 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    *v26 = v29;
  }
  v32 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29);
    *v26 = v29;
  }
  *(_QWORD *)(v29 + 16) = v32 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v22, v29+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v32, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, uint64_t a3, int a4, float a5, float a6, __n128 a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  void (*v23)(char *, char *, uint64_t);
  int *v24;
  unint64_t *v25;
  float v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __n128 *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t *v41;
  __n128 v42;
  int v43;

  v43 = a4;
  v42 = a7;
  v41 = a2;
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v40 - v16;
  v18 = type metadata accessor for __RKEntityActionSpecification(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v22(v17, a1, v11);
  v22(v15, a3, v11);
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v21, v17, v11);
  v24 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v23(&v21[v24[5]], v15, v11);
  v25 = v41;
  v26 = 1.0;
  if (a5 >= 0.0)
    v26 = a5;
  v27 = &v21[v24[6]];
  v28 = &v21[v24[7]];
  v29 = v24[9];
  v30 = (__n128 *)&v21[v24[8]];
  v31 = v24[10];
  v32 = v24[11];
  v33 = &v21[v24[12]];
  v34 = &v21[v24[13]];
  *(float *)v27 = v26;
  v27[4] = 0;
  *(float *)v28 = a6;
  v28[4] = 0;
  *v30 = v42;
  v30[1].n128_u8[0] = 0;
  v21[v29] = v43;
  v21[v31] = 0;
  v21[v32] = 0;
  *(_DWORD *)v33 = 0;
  v33[4] = 0;
  *(_DWORD *)v34 = 0;
  v34[4] = 0;
  swift_storeEnumTagMultiPayload();
  v35 = *v25;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v25 = v35;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v35 + 16) + 1, 1, v35);
    *v25 = v35;
  }
  v38 = *(_QWORD *)(v35 + 16);
  v37 = *(_QWORD *)(v35 + 24);
  if (v38 >= v37 >> 1)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v35);
    *v25 = v35;
  }
  *(_QWORD *)(v35 + 16) = v38 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v21, v35+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v38, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateSpinActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, float a3, float a4, __n128 a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  char *v18;
  float v19;
  uint64_t v20;
  char *v21;
  __n128 *v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  __n128 v28;

  v28 = a5;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for __RKEntityActionSpecification(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v12, v9);
  if (a3 < 0.0)
    a3 = 1.0;
  v17 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  v18 = &v16[v17[5]];
  *(float *)v18 = a3;
  v18[4] = 0;
  if (a4 < 0.0)
    v19 = 1.0;
  else
    v19 = a4;
  v20 = v17[7];
  v21 = &v16[v17[6]];
  v22 = (__n128 *)&v16[v17[8]];
  *(float *)v21 = v19;
  v21[4] = 0;
  v16[v20] = 0;
  *v22 = v28;
  v22[1].n128_u8[0] = 0;
  swift_storeEnumTagMultiPayload();
  v23 = *a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
    *a2 = v23;
  }
  v26 = *(_QWORD *)(v23 + 16);
  v25 = *(_QWORD *)(v23 + 24);
  if (v26 >= v25 >> 1)
  {
    v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
    *a2 = v23;
  }
  *(_QWORD *)(v23 + 16) = v26 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v16, v23+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v26, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityActionMultiplePerformBehavior.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  uint64_t result;
  void *v9;
  Swift::String v10;
  Swift::Int v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(void **)a1;
  v6 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0xD000000000000018, 0x800000021BE82B50, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v28 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v28);
    v27 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v27);
    v26 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v26);
  }
  v9 = v7;
  if (!v7)
    goto LABEL_8;
  v10._countAndFlagsBits = (uint64_t)v6;
  v10._object = v9;
  v11 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionMultiplePerformBehaviorUSD.init(rawValue:), v10);
  swift_bridgeObjectRelease();
  if (!v11)
  {

    swift_release();
    v16 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    v15 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 40);
    v12 = 1;
    v13 = &v14;
    goto LABEL_11;
  }
  if (v11 == 1)
  {

    swift_release();
    v19 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    v18 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    v12 = 0;
    v17 = *(_QWORD *)(a1 + 40);
    v13 = &v17;
    goto LABEL_11;
  }
  if (v11 != 2)
  {
LABEL_8:
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v25 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v25);
    v24 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v24);
    v23 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v23);
  }

  swift_release();
  v22 = *(_QWORD *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v22);
  v21 = *(_QWORD *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v21);
  v20 = *(_QWORD *)(a1 + 40);
  v12 = 2;
  v13 = &v20;
LABEL_11:
  result = outlined release of [String : String]((uint64_t)v13);
  *a2 = v12;
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, int a3, int a4, int a5, double a6, double a7, float a8)
{
  int *started;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  _BYTE *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  _BYTE v32[4];
  int v33;
  int v34;
  int v35;
  unint64_t *v36;
  uint64_t v37;

  v34 = a4;
  v35 = a5;
  v33 = a3;
  v36 = a2;
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = &v32[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for __RKEntityActionSpecification(0);
  v37 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v32[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v22 = (uint64_t)&v14[started[14]];
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v23(v22, 1, 1, v15);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v16 + 32))(v14, v18, v15);
  *(_QWORD *)&v14[started[5]] = 1;
  v14[started[6]] = v33;
  v14[started[10]] = v34;
  *(double *)&v14[started[8]] = a7;
  *(double *)&v14[started[7]] = a6;
  *(float *)&v14[started[11]] = a8;
  v14[started[9]] = v35;
  v14[started[12]] = 0;
  v24 = &v14[started[13]];
  *(_QWORD *)v24 = 0x3FF0000000000000;
  v24[8] = 0;
  outlined destroy of UUID?(v22);
  v23(v22, 1, 1, v15);
  v25 = (uint64_t)v14;
  v26 = v36;
  outlined init with take of __RKEntityActionSpecification(v25, (uint64_t)v21, type metadata accessor for __RKEntityStartAnimateActionArguments);
  swift_storeEnumTagMultiPayload();
  v27 = *v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v26 = v27;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v27 + 16) + 1, 1, v27);
    *v26 = v27;
  }
  v30 = *(_QWORD *)(v27 + 16);
  v29 = *(_QWORD *)(v27 + 24);
  if (v30 >= v29 >> 1)
  {
    v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v27);
    *v26 = v27;
  }
  *(_QWORD *)(v27 + 16) = v30 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v21, v27+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v30, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityGroupActionOrder.init(decodeContext:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, unint64_t, uint64_t, _QWORD)@<X1>, Swift::OpaquePointer a3@<X2>, void (*a4)(uint64_t)@<X3>, char *a5@<X8>)
{
  uint64_t v5;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  void *v14;
  Swift::String v15;
  Swift::Int v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = *(void **)a1;
  v11 = a2(1701869940, 0xE400000000000000, 1, *(_QWORD *)a1);
  if (v5)
  {

    swift_release();
    v30 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v30);
    v29 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v29);
    v28 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v28);
  }
  v14 = v12;
  if (!v12)
    goto LABEL_7;
  v15._countAndFlagsBits = v11;
  v15._object = v14;
  v16 = _findStringSwitchCase(cases:string:)(a3, v15);
  v11 = swift_bridgeObjectRelease();
  if (!v16)
  {

    swift_release();
    v21 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v21);
    v20 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v20);
    v19 = *(_QWORD *)(a1 + 40);
    v17 = 1;
    v18 = &v19;
    goto LABEL_9;
  }
  if (v16 != 1)
  {
LABEL_7:
    a4(v11);
    swift_allocError();
    swift_willThrow();

    swift_release();
    v27 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v27);
    v26 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v26);
    v25 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v25);
  }

  swift_release();
  v24 = *(_QWORD *)(a1 + 24);
  outlined release of [String : String]((uint64_t)&v24);
  v23 = *(_QWORD *)(a1 + 32);
  outlined release of [String : String]((uint64_t)&v23);
  v17 = 0;
  v22 = *(_QWORD *)(a1 + 40);
  v18 = &v22;
LABEL_9:
  result = outlined release of [String : String]((uint64_t)v18);
  *a5 = v17;
  return result;
}

uint64_t __RKEntityMoveEase.init(decodeContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  Swift::String v6;
  uint64_t result;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(void **)a1;
  v6._countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6570795465736165, 0xE800000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v19 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v19);
    v18 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v17);
  }
  else if (v6._object && (v8 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v6), v8 != 4))
  {
    v9 = v8;

    swift_release();
    v13 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v13);
    v12 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v12);
    v11 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v11);
    if ((v9 - 1) >= 3u)
      v10 = 0;
    else
      v10 = 6;
    *a2 = v10;
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v16 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v16);
    v15 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v14);
  }
  return result;
}

uint64_t __RKEntityMoveEaseType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  Swift::String v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(void **)a1;
  v6._countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6570795465736165, 0xE800000000000000, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v17 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v16);
    v15 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v15);
  }
  else if (v6._object && (v8 = specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(v6), v8 != 4))
  {

    swift_release();
    v11 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v10);
    v9 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v9);
    *a2 = 0x2010000u >> (8 * v8);
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v14 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v13);
    v12 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v12);
  }
  return result;
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, char a3, int a4, int a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, float a10)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  __n128 v34;
  __n128 v35;
  int v36;
  __n128 v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t *v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v40 = a6;
  v41 = a2;
  v38 = a4;
  v39 = a5;
  v34 = a9;
  v35 = a8;
  v37 = a7;
  v36 = a3 & 1;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityActionSpecification(0);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  v23 = v34;
  v25 = v35.n128_i64[1];
  v24 = v35.n128_u64[0];
  v26 = v37.n128_u32[0];
  v45 = v36;
  v44 = v38;
  v43 = v39;
  outlined init with copy of UUID?(v40, (uint64_t)v14);
  v42 = 0;
  v27 = (uint64_t)v18;
  v28 = v41;
  __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)(v27, v23.n128_i64[0], v23.n128_i64[1], 0, v24, v25, 0, v26, (uint64_t)v22, a10, 0.0, 0.0, &v45, &v44, &v43, 0, (uint64_t)v14);
  swift_storeEnumTagMultiPayload();
  v29 = *v28;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v28 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v29 + 16) + 1, 1, v29);
    *v28 = v29;
  }
  v32 = *(_QWORD *)(v29 + 16);
  v31 = *(_QWORD *)(v29 + 24);
  if (v32 >= v31 >> 1)
  {
    v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v29);
    *v28 = v29;
  }
  *(_QWORD *)(v29 + 16) = v32 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v22, v29+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v32, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1, unint64_t *a2, int a3, uint64_t a4)
{
  int *started;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  char *v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  uint64_t v32;

  v30 = a3;
  v31 = a2;
  v29 = a1;
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __RKEntityActionSpecification(0);
  v32 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v18(v14, v29, v11);
  v18(v10, a4, v11);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v19(v10, 0, 1, v11);
  v20 = (uint64_t)&v7[started[14]];
  v19((char *)v20, 1, 1, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v7, v14, v11);
  *(_QWORD *)&v7[started[5]] = 1;
  v7[started[6]] = v30;
  v7[started[10]] = 0;
  *(_QWORD *)&v7[started[8]] = 0;
  *(_QWORD *)&v7[started[7]] = 0;
  *(_DWORD *)&v7[started[11]] = 1065353216;
  v7[started[9]] = 0;
  v7[started[12]] = 0;
  v21 = started[13];
  v22 = v31;
  v23 = &v7[v21];
  *(_QWORD *)v23 = 0x3FF0000000000000;
  v23[8] = 0;
  outlined assign with take of UUID?((uint64_t)v10, v20);
  outlined init with take of __RKEntityActionSpecification((uint64_t)v7, (uint64_t)v17, type metadata accessor for __RKEntityStartAnimateActionArguments);
  swift_storeEnumTagMultiPayload();
  v24 = *v22;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v22 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
    *v22 = v24;
  }
  v27 = *(_QWORD *)(v24 + 16);
  v26 = *(_QWORD *)(v24 + 24);
  if (v27 >= v26 >> 1)
  {
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1, v24);
    *v22 = v24;
  }
  *(_QWORD *)(v24 + 16) = v27 + 1;
  return outlined init with take of __RKEntityActionSpecification((uint64_t)v17, v24+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v27, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t closure #1 in static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, unint64_t *a5, int a6, int a7, int a8, float a9, float a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  char v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t *v60;
  char v61;
  char v62;
  char v63[16];
  char v64;
  void *v65;
  void *v66;
  void *v67;

  v58 = a7;
  v59 = a8;
  v57 = a6;
  v60 = a5;
  v56 = a1;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityActionSpecification(0);
  v55 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v54 - v23;
  if (a2 == 2003789939 && a3 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    v25 = *a4;
    v26 = a4[1];
    v27 = a4[3];
    v28 = a4[5];
    v66 = a4[4];
    v67 = v27;
    v65 = v28;
    v29 = v25;
    v30 = v26;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v67);
    outlined retain of [String : String]((uint64_t)&v66);
    outlined retain of [String : String]((uint64_t)&v65);
    __RKEntityShowActionBuildInAnimationType.init(decodeContext:)((uint64_t)a4, &v64);
    v31 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v56, v15);
    v64 = v57;
    v63[0] = v58;
    v62 = v59;
    v61 = v31;
    __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)((uint64_t)v18, &v64, v63, 1, 0, &v62, &v61, (uint64_t)v24, a9, a10, 1.0, 0.0, 0.0);
    swift_storeEnumTagMultiPayload();
    v32 = v60;
    v33 = *v60;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v32 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
      *v32 = v33;
    }
    v35 = v55;
    v37 = *(_QWORD *)(v33 + 16);
    v36 = *(_QWORD *)(v33 + 24);
    if (v37 >= v36 >> 1)
    {
      v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v33);
      *v32 = v33;
    }
    *(_QWORD *)(v33 + 16) = v37 + 1;
    v38 = v33
        + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
        + *(_QWORD *)(v35 + 72) * v37;
    v39 = (uint64_t)v24;
    return outlined init with take of __RKEntityActionSpecification(v39, v38, type metadata accessor for __RKEntityActionSpecification);
  }
  if (a2 == 1701079400 && a3 == 0xE400000000000000
    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    v41 = *a4;
    v42 = a4[1];
    v43 = a4[3];
    v44 = a4[5];
    v66 = a4[4];
    v67 = v43;
    v65 = v44;
    v45 = v41;
    v46 = v42;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v67);
    outlined retain of [String : String]((uint64_t)&v66);
    outlined retain of [String : String]((uint64_t)&v65);
    __RKEntityHideActionBuildOutAnimationType.init(decodeContext:)((uint64_t)a4, &v64);
    v47 = v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v56, v15);
    v64 = v57;
    v63[0] = v58;
    v62 = v59;
    v61 = v47;
    __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)((uint64_t)v18, &v64, v63, 1, 0, &v62, &v61, (uint64_t)v22, a9, a10, 0.0, 0.0, 0.0);
    swift_storeEnumTagMultiPayload();
    v48 = v60;
    v49 = *v60;
    v50 = swift_isUniquelyReferenced_nonNull_native();
    *v48 = v49;
    if ((v50 & 1) == 0)
    {
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1, v49);
      *v48 = v49;
    }
    v51 = v55;
    v53 = *(_QWORD *)(v49 + 16);
    v52 = *(_QWORD *)(v49 + 24);
    if (v53 >= v52 >> 1)
    {
      v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1, v49);
      *v48 = v49;
    }
    *(_QWORD *)(v49 + 16) = v53 + 1;
    v38 = v49
        + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
        + *(_QWORD *)(v51 + 72) * v53;
    v39 = (uint64_t)v22;
    return outlined init with take of __RKEntityActionSpecification(v39, v38, type metadata accessor for __RKEntityActionSpecification);
  }
  return result;
}

void __RKEntityShowActionBuildInAnimationType.init(decodeContext:)(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  void *v2;
  void *v5;
  Swift::String v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(void **)a1;
  v6._countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v20 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v20);
    v19 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v19);
    v18 = *(_QWORD *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v18);

LABEL_3:
    *a2 = 0;
    return;
  }
  if (!v6._object)
  {

    swift_release();
    v17 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v16);
    v15 = *(_QWORD *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v15);
    goto LABEL_3;
  }
  v7 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v6);
  if (v7 == 10)
  {
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v14 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v13);
    v12 = *(_QWORD *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v12);
  }
  else
  {
    v8 = v7;

    swift_release();
    v11 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v10);
    v9 = *(_QWORD *)(a1 + 40);
    outlined release of [String : String]((uint64_t)&v9);
    *a2 = byte_21BE5228A[v8];
  }
}

uint64_t __RKEntityHideActionBuildOutAnimationType.init(decodeContext:)@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  Swift::String v6;
  uint64_t result;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(void **)a1;
  v6._countAndFlagsBits = (uint64_t)specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x79546E6F69746F6DLL, 0xEA00000000006570, 1, *(void **)a1);
  if (v2)
  {

    swift_release();
    v18 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v18);
    v17 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v17);
    v16 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v16);
  }
  else if (v6._object && (v8 = specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(v6), v8 != 10))
  {
    v9 = v8;

    swift_release();
    v12 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v12);
    v11 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v11);
    v10 = *(_QWORD *)(a1 + 40);
    result = outlined release of [String : String]((uint64_t)&v10);
    *a2 = byte_21BE5228A[v9];
  }
  else
  {
    lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError();
    swift_allocError();
    swift_willThrow();

    swift_release();
    v15 = *(_QWORD *)(a1 + 24);
    outlined release of [String : String]((uint64_t)&v15);
    v14 = *(_QWORD *)(a1 + 32);
    outlined release of [String : String]((uint64_t)&v14);
    v13 = *(_QWORD *)(a1 + 40);
    return outlined release of [String : String]((uint64_t)&v13);
  }
  return result;
}

void specialized closure #1 in static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(uint64_t a1, void *a2, uint64_t a3, unint64_t *a4, int a5, int a6, double a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t *v49;
  unint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  int v56;
  id v57;

  v56 = a5;
  LODWORD(v57) = a6;
  v12 = type metadata accessor for __RKEntityActionSpecification(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a2, sel_path);
  v17 = objc_msgSend(v16, sel_stringValue);

  if (!v17)
    goto LABEL_10;
  v55 = a4;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  if (!*(_QWORD *)(a3 + 16) || (v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20), (v22 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_10:
    static os_log_type_t.error.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_21BE50940;
    v39 = objc_msgSend(a2, sel_path);
    v40 = objc_msgSend(v39, sel_stringValue);

    if (v40)
    {
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v43 = v42;

    }
    else
    {
      v41 = 0;
      v43 = 0;
    }
    v44 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v38 + 56) = MEMORY[0x24BEE0D00];
    v45 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v38 + 64) = v45;
    if (v43)
      v46 = v41;
    else
      v46 = 0x296C6C756E28;
    v47 = 0xE600000000000000;
    if (v43)
      v47 = v43;
    *(_QWORD *)(v38 + 32) = v46;
    *(_QWORD *)(v38 + 40) = v47;
    v48 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F69647561, 0xE500000000000000, 1, a2);
    v51 = v48;
    if (v48)
    {
      v52 = objc_msgSend(v48, sel_path);

      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v50 = v54;

      v49 = (uint64_t *)(v38 + 72);
      *(_QWORD *)(v38 + 96) = v44;
      *(_QWORD *)(v38 + 104) = v45;
      if (v50)
      {
        *v49 = v53;
        goto LABEL_21;
      }
    }
    else
    {
      v49 = (uint64_t *)(v38 + 72);
      *(_QWORD *)(v38 + 96) = v44;
      *(_QWORD *)(v38 + 104) = v45;
    }
    *v49 = 0x296C6C756E28;
    v50 = 0xE600000000000000;
LABEL_21:
    *(_QWORD *)(v38 + 80) = v50;
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v57 = (id)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    return;
  }
  v23 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v21);
  v25 = *v23;
  v24 = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v26 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v15, a1, v26);
  v27 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  v28 = v27[8];
  v29 = &v15[v27[7]];
  v30 = v27[9];
  v31 = v27[6];
  v32 = &v15[v27[5]];
  *(_QWORD *)v32 = v25;
  *((_QWORD *)v32 + 1) = v24;
  v15[v31] = v56;
  v15[v30] = (char)v57;
  *(double *)v29 = a7;
  v29[8] = 0;
  v15[v28] = 0;
  v15[v27[10]] = 1;
  swift_storeEnumTagMultiPayload();
  v33 = v55;
  v34 = *v55;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v33 = v34;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
    *v33 = v34;
  }
  v37 = *(_QWORD *)(v34 + 16);
  v36 = *(_QWORD *)(v34 + 24);
  if (v37 >= v36 >> 1)
  {
    v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v34);
    *v33 = v34;
  }
  *(_QWORD *)(v34 + 16) = v37 + 1;
  outlined init with take of __RKEntityActionSpecification((uint64_t)v15, v34+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(_QWORD *)(v13 + 72) * v37, type metadata accessor for __RKEntityActionSpecification);
}

unint64_t specialized static __RKEntityActionSpecification.generateAudioActionSpecifications(decodeContext:)(void **a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  unsigned __int8 v9;
  double v10;
  double v11;
  id v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25[2];
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v2 = *a1;
  v3 = a1[1];
  v5 = (uint64_t)a1[2];
  v4 = a1[3];
  v6 = a1[5];
  v27 = a1[4];
  v28 = (uint64_t)v4;
  v26 = (uint64_t)v6;
  v7 = v2;
  v8 = v3;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  __RKEntityAudioActionType.init(decodeContext:)((uint64_t)a1, v25);
  v9 = v25[0];
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1852399975, 0xE400000000000000, 1, v7);
  v11 = v10;
  v12 = v7;
  v13 = v8;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  __RKAudioSpatialModeSelection.init(decodeContext:)((uint64_t)a1, (char *)v25);
  v15 = v28;
  v16 = v26;
  v17 = v25[0];
  v25[0] = MEMORY[0x24BEE4AF8];
  v18 = v12;
  v19 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v28);
  outlined retain of [String : String]((uint64_t)&v27);
  outlined retain of [String : String]((uint64_t)&v26);
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v18, v19, v5, v15, v18, v11, v16, v25, v9, v17);
  swift_release();

  outlined release of [String : String]((uint64_t)&v28);
  outlined release of [String : String]((uint64_t)&v27);
  outlined release of [String : String]((uint64_t)&v26);
  v20 = v25[0];
  if (*(_QWORD *)(v25[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v21 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v22 = (v21 + 32) & ~v21;
    v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_21BE411F0;
    v24 = v23 + v22;
    *(_BYTE *)v24 = 0;
    *(_QWORD *)(v24 + 8) = v20;
    *(_BYTE *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 1;
    *(_WORD *)(v24 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v23;
  }
  return v20;
}

uint64_t specialized static __RKEntityActionSpecification.generateChangeSceneActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  char **p_name;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  id v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void (*v37)(char *, char *, uint64_t);
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, char *, uint64_t);
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  id v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v52 - v6;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD **)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v52 - v13;
  v15 = *(void **)a1;
  v16 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x656E656373, 0xE500000000000000, 1, *(void **)a1);
  if (v16)
  {
    v17 = *(void **)(a1 + 8);
    v54 = v16;
    v18 = objc_msgSend(v17, sel_objectAtPath_);
    p_name = (char **)(&stru_24DFECFF8 + 8);
    if (!v18
      || (v20 = v18,
          objc_opt_self(),
          v21 = swift_dynamicCastObjCClass(),
          v20,
          p_name = &stru_24DFECFF8.name,
          !v21))
    {
LABEL_9:
      v27 = v54;
      v28 = objc_msgSend(v54, p_name[407]);
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v32 = v31;

      }
      else
      {
        v30 = 0x6E776F6E6B6E753CLL;
        v32 = 0xE90000000000003ELL;
      }
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_21BE411F0;
      *(_QWORD *)(v33 + 56) = MEMORY[0x24BEE0D00];
      *(_QWORD *)(v33 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v33 + 32) = v30;
      *(_QWORD *)(v33 + 40) = v32;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v34 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      return MEMORY[0x24BEE4AF8];
    }
    v22 = objc_msgSend(v54, sel_stringValue);
    if (v22)
    {
      v23 = v22;
      v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v25 = v24;

      v22 = (id)v53;
    }
    else
    {
      v25 = 0;
    }
    USDDecodableContext.identifierForScene(uskNodePath:)((uint64_t)v22, v25, (uint64_t)v7);
    swift_bridgeObjectRelease();
    v26 = (unsigned int (*)(char *, uint64_t, uint64_t))v9[6];
    if (v26(v7, 1, v8) == 1)
    {
      outlined destroy of UUID?((uint64_t)v7);
      p_name = &stru_24DFECFF8.name;
      goto LABEL_9;
    }
    v37 = (void (*)(char *, char *, uint64_t))v9[4];
    v37(v14, v7, v8);
    Scene.__sceneIdentifier.getter((uint64_t)v5);
    if (v26(v5, 1, v8) != 1)
    {
      v37(v12, v5, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v43 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
      v44 = (v43 + 32) & ~v43;
      v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = xmmword_21BE411F0;
      v45 = v35 + v44;
      v46 = (void (*)(uint64_t, char *, uint64_t))v9[2];
      v46(v45, v12, v8);
      v47 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v46(v45 + *(int *)(v47 + 20), v14, v8);
      swift_storeEnumTagMultiPayload();

      v48 = (void (*)(char *, uint64_t))v9[1];
      v48(v12, v8);
      v48(v14, v8);
      return v35;
    }
    outlined destroy of UUID?((uint64_t)v5);
    v38 = objc_msgSend(v15, sel_path);
    v39 = objc_msgSend(v38, sel_stringValue);

    if (v39)
    {
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;

    }
    else
    {
      v40 = 0x6E776F6E6B6E753CLL;
      v42 = 0xE90000000000003ELL;
    }
    v49 = v54;
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v50 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v50 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v50 + 32) = v40;
    *(_QWORD *)(v50 + 40) = v42;
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v51 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v9[1])(v14, v8);
  }
  return MEMORY[0x24BEE4AF8];
}

unint64_t specialized static __RKEntityActionSpecification.generateEmphasizeActionSpecifications(decodeContext:)(uint64_t a1)
{
  void *v2;
  float v3;
  float v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(void **)a1;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, *(void **)a1);
  v4 = v3;
  v6 = *(void **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = v7;
  v21 = *(_QWORD *)(a1 + 40);
  v8 = v2;
  v9 = v6;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v23);
  outlined retain of [String : String]((uint64_t)&v22);
  outlined retain of [String : String]((uint64_t)&v21);
  __RKEntityEmphasisAnimationType.init(decodeContext:)(a1, v20);
  v10 = v20[0];
  v11 = v8;
  v12 = v9;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v23);
  outlined retain of [String : String]((uint64_t)&v22);
  outlined retain of [String : String]((uint64_t)&v21);
  __RKEntityActionAnimationStyle.init(decodeContext:)(a1, v20);
  v14 = v20[0];
  v20[0] = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v11, v12, v5, v23, v20, v4, v14, v10);
  v15 = v20[0];
  if (*(_QWORD *)(v20[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v16 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v17 = (v16 + 32) & ~v16;
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_21BE411F0;
    v19 = v18 + v17;
    *(_BYTE *)v19 = 0;
    *(_QWORD *)(v19 + 8) = v15;
    *(_BYTE *)(v19 + 16) = 0;
    *(_QWORD *)(v19 + 24) = 1;
    *(_WORD *)(v19 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v18;
  }
  return v15;
}

float specialized static __RKEntityActionSpecification.calculateMaximumMultiplier(lhs:rhs:)(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)&a1;
  v3 = 1.0;
  if ((a1 & 0x100000000) != 0)
    v2 = 1.0;
  if ((a2 & 0x100000000) == 0)
    v3 = *(float *)&a2;
  if (v2 <= v3)
  {
    if ((LODWORD(v3) & 0x7FFFFF) == 0)
      v2 = v3;
    if ((~LODWORD(v3) & 0x7F800000) != 0)
      v2 = v3;
  }
  return roundf(3.4028e38 / v2);
}

unint64_t specialized implicit closure #4 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, void (*a3)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a4)
{
  float64x2_t v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x797469636F6C6576, 0xE800000000000000, 1, a1);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(v8);
  *(float *)&v9 = v9;
  *(_QWORD *)&v8.f64[1] = LODWORD(v9);
  v16 = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, a1, a2, a3, a4, &v16, (__n128)v8);
  v10 = v16;
  if (*(_QWORD *)(v16 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v12 = (v11 + 32) & ~v11;
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_21BE411F0;
    v14 = v13 + v12;
    *(_BYTE *)v14 = 0;
    *(_QWORD *)(v14 + 8) = v10;
    *(_BYTE *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 1;
    *(_WORD *)(v14 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v13;
  }
  return v10;
}

unint64_t specialized implicit closure #5 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  __n128 v10;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  unint64_t v19;

  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, a1);
  v9 = v8;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x746E6F7266, 0xE500000000000000, 1, a1);
  v18 = v10;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x726F746365567075, 0xE800000000000000, 1, a1);
  v19 = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661uLL, 0xEF737463656A624FLL, 1, a1, a2, a3, a4, &v19, v9, v18, v12);
  v13 = v19;
  if (*(_QWORD *)(v19 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v14 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21BE411F0;
    v17 = v16 + v15;
    *(_BYTE *)v17 = 0;
    *(_QWORD *)(v17 + 8) = v13;
    *(_BYTE *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 1;
    *(_WORD *)(v17 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v16;
  }
  return v13;
}

uint64_t specialized static __RKEntityActionSpecification.generateNotificationActionSpecifications(decodeContext:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  id v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v59 = a4;
  v60 = a2;
  v61 = a3;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v52 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v52 - v19;
  v21 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x696669746E656469, 0xEA00000000007265, 1, a1);
  v57 = v6;
  v58 = a1;
  v24 = v61;
  v25 = MEMORY[0x24BEE4AF8];
  if (!v22)
    return v25;
  v26 = v18;
  v55 = (uint64_t)v21;
  v56 = v22;
  v53 = v8;
  v54 = v9;
  v27 = (void *)MEMORY[0x220768C3C](0x6465746365666661, 0xEF737463656A624FLL);
  v28 = objc_msgSend(v58, sel_property_, v27);

  v29 = v11;
  v52 = v15;
  v30 = (uint64_t)v26;
  v31 = (void *)v60;
  if (v28)
  {
    v32 = v24;
    v33 = objc_msgSend(v28, sel_objectPathArray);

    type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v35 >= 1)
    {
      v62 = v25;
      v36 = v56;
      swift_bridgeObjectRetain();
      specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, (char *)1, v58, v31, v32, v59, (unint64_t *)&v62, v55, v36);
      swift_bridgeObjectRelease_n();
      v25 = v62;
      if (*(_QWORD *)(v62 + 16) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
        v37 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
        v38 = (v37 + 32) & ~v37;
        v39 = swift_allocObject();
        *(_OWORD *)(v39 + 16) = xmmword_21BE411F0;
        v40 = v39 + v38;
        *(_BYTE *)v40 = 0;
        *(_QWORD *)(v40 + 8) = v25;
        *(_BYTE *)(v40 + 16) = 0;
        *(_QWORD *)(v40 + 24) = 1;
        *(_WORD *)(v40 + 32) = 0;
        swift_storeEnumTagMultiPayload();
        return v39;
      }
      return v25;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
  v61 = type metadata accessor for __RKEntityActionSpecification(0);
  v41 = *(unsigned __int8 *)(*(_QWORD *)(v61 - 8) + 80);
  v42 = (v41 + 32) & ~v41;
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_21BE411F0;
  v43 = v57;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56))(v20, 1, 1, v5);
  v60 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  outlined init with copy of UUID?((uint64_t)v20, v30);
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  v45 = (uint64_t)v29;
  if (v44(v30, 1, v5) != 1)
  {
    v47 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
    v48 = v53;
    v47(v53, v30, v5);
    goto LABEL_14;
  }
  v46 = v52;
  UUID.init(uuidString:)();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v44)(v46, 1, v5);
  if ((_DWORD)result != 1)
  {
    v47 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 32);
    v48 = v53;
    v47(v53, (uint64_t)v46, v5);
    outlined destroy of UUID?(v30);
LABEL_14:
    v47((char *)v45, (uint64_t)v48, v5);
    v49 = v54;
    v50 = (uint64_t *)(v45 + *(int *)(v54 + 20));
    v51 = v56;
    *v50 = v55;
    v50[1] = v51;
    outlined destroy of UUID?((uint64_t)v20);
    *(_QWORD *)(v45 + *(int *)(v49 + 24)) = v60;
    outlined init with take of __RKEntityActionSpecification(v45, v25 + v42, type metadata accessor for __RKEntityCustomActionArguments);
    swift_storeEnumTagMultiPayload();
    return v25;
  }
  __break(1u);
  return result;
}

uint64_t specialized static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(void **a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  id v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  int v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[12];
  int v37;
  __int128 v38;
  uint64_t v39;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = &v36[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v36[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *a1;
  v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7265746E6563, 0xE600000000000000, 1, *a1);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v9);
    v13 = v12;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6974756C6F766572, 0xEB00000000736E6FLL, 1, v9);
    v15 = v14;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1936291937, 0xE400000000000000, 1, v9);
    v38 = v16;
    v18 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x506F546E67696C61, 0xEB00000000687461, 1, v9);
    v19 = objc_msgSend(a1[1], sel_objectAtPath_, v10);
    if (!v19)
      goto LABEL_11;
    v20 = v19;
    objc_opt_self();
    v21 = swift_dynamicCastObjCClass();

    if (!v21)
      goto LABEL_11;
    v37 = v18;
    v22 = objc_msgSend(v10, sel_stringValue);
    if (v22)
    {
      v23 = v22;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0;
    }
    v27 = v37;
    USDDecodableContext.identifierForPath(uskNodePath:)(v24, v26, (uint64_t)v4);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of UUID?((uint64_t)v4);
LABEL_11:
      static os_log_type_t.debug.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_21BE411F0;
      *(_QWORD *)(v28 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
      *(_QWORD *)(v28 + 64) = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
      *(_QWORD *)(v28 + 32) = v10;
      type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
      v29 = v10;
      v30 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
      return v11;
    }
    v31 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
    v39 = v11;
    MEMORY[0x24BDAC7A8](v31);
    *(_QWORD *)&v36[-64] = &v39;
    *(_QWORD *)&v36[-56] = v8;
    *(_DWORD *)&v36[-48] = v13;
    *(_DWORD *)&v36[-44] = v15;
    *(_OWORD *)&v36[-32] = v38;
    v36[-16] = v27 & 1;
    USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, (void (*)(char *))partial apply for closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:), (uint64_t)&v36[-80]);
    v32 = v39;
    v11 = v39;
    if (*(_QWORD *)(v39 + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v33 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
      v34 = (v33 + 32) & ~v33;
      v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_21BE411F0;
      v35 = v11 + v34;
      *(_BYTE *)v35 = 0;
      *(_QWORD *)(v35 + 8) = v32;
      *(_BYTE *)(v35 + 16) = 0;
      *(_QWORD *)(v35 + 24) = 1;
      *(_WORD *)(v35 + 32) = 0;
      swift_storeEnumTagMultiPayload();
    }
    swift_bridgeObjectRetain();

    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
  }
  return v11;
}

unint64_t specialized implicit closure #8 in variable initialization expression of static __RKEntityActionSpecification.actionTypeToActionSpecificationsGenerator(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  float v8;
  float v9;
  float v10;
  float v11;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, a1);
  v9 = v8;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6974756C6F766572, 0xEB00000000736E6FLL, 1, a1);
  v11 = v10;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1936291937, 0xE400000000000000, 1, a1);
  v19 = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, (char *)1, a1, a2, a3, a4, &v19, v9, v11, v13);
  v14 = v19;
  if (*(_QWORD *)(v19 + 16) > 1uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v16 = (v15 + 32) & ~v15;
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_21BE411F0;
    v18 = v17 + v16;
    *(_BYTE *)v18 = 0;
    *(_QWORD *)(v18 + 8) = v14;
    *(_BYTE *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 1;
    *(_WORD *)(v18 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v17;
  }
  return v14;
}

unint64_t specialized static __RKEntityActionSpecification.generateStartAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  char v7;
  float v8;
  float v9;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(void **)a1;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7472617473, 0xE500000000000000, 1, *(void **)a1);
  v4 = v3;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v2);
  v6 = v5;
  v7 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6465737265766572, 0xE800000000000000, 1, v2);
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F6974616D696E61, 0xEE0064656570536ELL, 1, v2);
  v9 = v8;
  v11 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7365737265766572, 0xE800000000000000, 1, v2);
  v13 = *(void **)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 32);
  v26 = v14;
  v24 = *(_QWORD *)(a1 + 40);
  v15 = v2;
  v16 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v26);
  outlined retain of [String : String]((uint64_t)&v25);
  outlined retain of [String : String]((uint64_t)&v24);
  __RKEntityActionMultiplePerformBehavior.init(decodeContext:)(a1, (char *)v23);
  v17 = v23[0];
  v23[0] = MEMORY[0x24BEE4AF8];
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v15, v16, v12, v26, v23, v4, v6, v9, v17, v7 & 1, v11 & 1);
  v18 = v23[0];
  if (*(_QWORD *)(v23[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v19 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_21BE411F0;
    v22 = v21 + v20;
    *(_BYTE *)v22 = 0;
    *(_QWORD *)(v22 + 8) = v18;
    *(_BYTE *)(v22 + 16) = 0;
    *(_QWORD *)(v22 + 24) = 1;
    *(_WORD *)(v22 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    return v21;
  }
  return v18;
}

unint64_t specialized static __RKEntityActionSpecification.generateTransformActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  unint64_t v10;
  float v11;
  float v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  int v18;
  id v19;
  id v20;
  int v21;
  id v22;
  id v23;
  id v25;
  void *v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  void *v32;
  id v33;
  unsigned __int8 v34;
  uint64_t v35;
  id v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  id v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v48 - v6;
  v8 = *(void **)a1;
  v9 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7261546D726F6678, 0xEB00000000746567, 1, *(void **)a1);
  v10 = MEMORY[0x24BEE4AF8];
  if (!v9)
    return v10;
  specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v8);
  v12 = v11;
  v13 = *(void **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v59 = *(_QWORD *)(a1 + 32);
  v60 = v15;
  v58 = *(_QWORD *)(a1 + 40);
  v16 = v8;
  v17 = v13;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityGroupActionOrder.init(decodeContext:)(a1, (uint64_t (*)(uint64_t, unint64_t, uint64_t, _QWORD))specialized USKNode.valueForProperty<A>(named:requestContext:getter:), (Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveSelectionUSD.init(rawValue:), (void (*)(uint64_t))lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError, (char *)v57);
  v18 = LOBYTE(v57[0]);
  v19 = v16;
  v20 = v17;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityMoveEase.init(decodeContext:)(a1, (char *)v57);
  v56 = v18;
  v21 = LOBYTE(v57[0]);
  v22 = v19;
  v23 = v20;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityMoveEaseType.init(decodeContext:)(a1, v57);
  v54 = LOBYTE(v57[0]);
  v55 = v21;
  v25 = objc_msgSend(v23, sel_objectAtPath_, v9);
  if (!v25)
  {
LABEL_10:
    static os_log_type_t.debug.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v35 + 56) = type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for USKObjectPath);
    *(_QWORD *)(v35 + 64) = lazy protocol witness table accessor for type USKObjectPath and conformance NSObject();
    *(_QWORD *)(v35 + 32) = v9;
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    v36 = v9;
    v37 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return v10;
  }
  v26 = v25;
  v53 = v22;
  objc_opt_self();
  v27 = swift_dynamicCastObjCClass();
  if (!v27)
  {

    goto LABEL_10;
  }
  v51 = v26;
  v52 = v14;
  objc_msgSend((id)objc_opt_self(), sel_localTransformWithNode_time_, v27, 0.0);
  REMakeSRTFromMatrix();
  v49 = v29;
  v50 = v28;
  v48 = v30;
  if (one-time initialization token for identity != -1)
    swift_once();
  v31 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v7, 1, 1, v31);
  v32 = v53;
  v33 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0xD000000000000010, 0x800000021BE82BC0, 1, v53);
  v34 = v56;
  v38 = v33;
  if (v33)
  {
    v39 = objc_msgSend(v33, sel_stringValue, *(_OWORD *)&v48, *(_OWORD *)&v49, *(_OWORD *)&v50);
    if (v39)
    {
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v43 = v42;

    }
    else
    {
      v41 = 0;
      v43 = 0;
    }
    USDDecodableContext.identifierForPath(uskNodePath:)(v41, v43, (uint64_t)v5);

    swift_bridgeObjectRelease();
    outlined assign with take of UUID?((uint64_t)v5, (uint64_t)v7);
    v34 = v56;
    v32 = v53;
  }
  v57[0] = v10;
  specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v32, v23, v52, v60, v57, v50, v49, v48, v12, v34, v55, v54, (uint64_t)v7);
  v10 = v57[0];
  if (*(_QWORD *)(v57[0] + 16) >= 2uLL)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
    v44 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
    v45 = (v44 + 32) & ~v44;
    v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_21BE411F0;
    v47 = v46 + v45;
    *(_BYTE *)v47 = 0;
    *(_QWORD *)(v47 + 8) = v10;
    *(_BYTE *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = 1;
    *(_WORD *)(v47 + 32) = 0;
    swift_storeEnumTagMultiPayload();
    v10 = v46;
  }

  outlined destroy of UUID?((uint64_t)v7);
  return v10;
}

uint64_t specialized static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  char v34[16];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)a1;
  v10 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6F6974616D696E61, 0xE90000000000006ELL, 1, *(void **)a1);
  v12 = v10;
  v13 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v33 = *(id *)(a1 + 8);
    v14 = objc_msgSend(v33, sel_objectAtPath_, v10);
    if (v14)
    {
      v15 = v14;
      objc_opt_self();
      if (swift_dynamicCastObjCClass())
      {

        v32 = v12;
        v16 = objc_msgSend(v12, sel_stringValue);
        if (v16)
        {
          v17 = v16;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v19 = v18;

          v16 = (id)v31;
        }
        else
        {
          v19 = 0;
        }
        v20 = v32;
        USDDecodableContext.identifierForPath(uskNodePath:)((uint64_t)v16, v19, (uint64_t)v4);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {

          outlined destroy of UUID?((uint64_t)v4);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
          v21 = *(_QWORD *)(a1 + 24);
          v22 = *(_QWORD *)(a1 + 40);
          v36 = *(_QWORD *)(a1 + 32);
          v37 = v21;
          v35 = v22;
          v23 = v9;
          v24 = v33;
          swift_retain();
          outlined retain of [String : String]((uint64_t)&v37);
          outlined retain of [String : String]((uint64_t)&v36);
          outlined retain of [String : String]((uint64_t)&v35);
          v25 = __RKEntityActionMultiplePerformBehavior.init(decodeContext:)(a1, v34);
          *(_QWORD *)v34 = v13;
          MEMORY[0x24BDAC7A8](v25);
          *(&v31 - 4) = (uint64_t)v34;
          *((_BYTE *)&v31 - 24) = v26;
          *(&v31 - 2) = (uint64_t)v8;
          USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, (void (*)(char *))partial apply for closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:), (uint64_t)(&v31 - 6));
          v27 = *(_QWORD *)v34;
          v13 = *(_QWORD *)v34;
          if (*(_QWORD *)(*(_QWORD *)v34 + 16) >= 2uLL)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
            v28 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8)
                                     + 80);
            v29 = (v28 + 32) & ~v28;
            v13 = swift_allocObject();
            *(_OWORD *)(v13 + 16) = xmmword_21BE411F0;
            v30 = v13 + v29;
            *(_BYTE *)v30 = 0;
            *(_QWORD *)(v30 + 8) = v27;
            *(_BYTE *)(v30 + 16) = 0;
            *(_QWORD *)(v30 + 24) = 1;
            *(_WORD *)(v30 + 32) = 0;
            swift_storeEnumTagMultiPayload();
          }
          swift_bridgeObjectRetain();

          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          swift_bridgeObjectRelease();
        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
  return v13;
}

unint64_t specialized static __RKEntityActionSpecification.generateVisibilityActionSpecifications(decodeContext:)(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  unsigned __int8 v17;
  id v18;
  id v19;
  unsigned __int8 v20;
  id v21;
  id v22;
  unsigned __int8 v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(void **)a1;
  v3 = specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(1701869940, 0xE400000000000000, 1, *(void **)a1);
  v5 = v4;
  v6 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v7 = (uint64_t)v3;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x6E6F697461727564, 0xE800000000000000, 1, v2);
    v9 = v8;
    specialized USKNode.valueForProperty<A>(named:requestContext:getter:)(0x7473694465766F6DLL, 0xEC00000065636E61, 1, v2);
    v11 = v10;
    v13 = *(void **)(a1 + 8);
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(_QWORD *)(a1 + 24);
    v34 = *(_QWORD *)(a1 + 32);
    v35 = v14;
    v33 = *(_QWORD *)(a1 + 40);
    v15 = v2;
    v16 = v13;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityActionAnimationStyle.init(decodeContext:)(a1, v32);
    v17 = v32[0];
    v18 = v15;
    v19 = v16;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityMoveEase.init(decodeContext:)(a1, (char *)v32);
    v20 = v32[0];
    v21 = v18;
    v22 = v19;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    __RKEntityMoveEaseType.init(decodeContext:)(a1, v32);
    v24 = v32[0];
    v31 = v35;
    v32[0] = v6;
    v25 = v21;
    v26 = v22;
    swift_retain();
    outlined retain of [String : String]((uint64_t)&v35);
    outlined retain of [String : String]((uint64_t)&v34);
    outlined retain of [String : String]((uint64_t)&v33);
    swift_bridgeObjectRetain();
    specialized USDDecodableContext.forEachObjectPathInProperty(named:requestContext:block:)(0x6465746365666661, 0xEF737463656A624FLL, 1, v25, v26, v12, v31, v7, v9, v11, v5, (void **)a1, v32, v20, v24, v17);
    swift_release();

    outlined release of [String : String]((uint64_t)&v35);
    outlined release of [String : String]((uint64_t)&v34);
    outlined release of [String : String]((uint64_t)&v33);
    swift_bridgeObjectRelease_n();
    v6 = v32[0];
    if (*(_QWORD *)(v32[0] + 16) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__RKEntityActionSpecification>);
      v27 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for __RKEntityActionSpecification(0) - 8) + 80);
      v28 = (v27 + 32) & ~v27;
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_21BE411F0;
      v30 = v29 + v28;
      *(_BYTE *)v30 = 0;
      *(_QWORD *)(v30 + 8) = v6;
      *(_BYTE *)(v30 + 16) = 0;
      *(_QWORD *)(v30 + 24) = 1;
      *(_WORD *)(v30 + 32) = 0;
      swift_storeEnumTagMultiPayload();
      return v29;
    }
  }
  return v6;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError, &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError, &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError and conformance __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError, &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError, &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError and conformance __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError, &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError, &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType.MoveEaseTypeLoadingError and conformance __RKEntityMoveEaseType.MoveEaseTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase.MoveEaseLoadingError, &type metadata for __RKEntityMoveEase.MoveEaseLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase.MoveEaseLoadingError, &type metadata for __RKEntityMoveEase.MoveEaseLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase.MoveEaseLoadingError and conformance __RKEntityMoveEase.MoveEaseLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError, &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError, &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle.AnimationStyleLoadingError and conformance __RKEntityActionAnimationStyle.AnimationStyleLoadingError);
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static __RKEntityActionSpecification.generateTransformAnimationActionSpecifications(decodeContext:)(a1, *(unint64_t **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t outlined assign with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError, &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError, &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError and conformance __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError);
  }
  return result;
}

uint64_t type metadata accessor for OS_os_log(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USKObjectPath and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject;
  if (!lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject)
  {
    v1 = type metadata accessor for OS_os_log(255, &lazy cache variable for type metadata for USKObjectPath);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE5BE8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USKObjectPath and conformance NSObject);
  }
  return result;
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection.MoveSelectionLoadingError, &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection.MoveSelectionLoadingError, &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection.MoveSelectionLoadingError and conformance __RKEntityMoveSelection.MoveSelectionLoadingError);
  }
  return result;
}

uint64_t partial apply for closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static __RKEntityActionSpecification.generateOrbitActionSpecifications(decodeContext:)(a1, *(unint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 64), *(float *)(v1 + 32), *(float *)(v1 + 36), *(__n128 *)(v1 + 48));
}

uint64_t outlined init with take of __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of __RKEntityActionSpecification(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError and conformance __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError, &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError and conformance __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError, &type metadata for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError, &type metadata for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError and conformance __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType.AudioActionTypeLoadingError, &type metadata for __RKEntityAudioActionType.AudioActionTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType.AudioActionTypeLoadingError, &type metadata for __RKEntityAudioActionType.AudioActionTypeLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType.AudioActionTypeLoadingError and conformance __RKEntityAudioActionType.AudioActionTypeLoadingError);
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAudioActionType.AudioActionTypeLoadingError()
{
  return &type metadata for __RKEntityAudioActionType.AudioActionTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError()
{
  return &type metadata for __RKAudioSpatialModeSelection.AudioSpatialModeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityEmphasisAnimationType.EmphasisAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityGroupActionOrder.EmphasisAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveSelection.MoveSelectionLoadingError()
{
  return &type metadata for __RKEntityMoveSelection.MoveSelectionLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError()
{
  return &type metadata for __RKEntityActionMultiplePerformBehavior.MultiplePerformBehaviorLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityActionAnimationStyle.AnimationStyleLoadingError()
{
  return &type metadata for __RKEntityActionAnimationStyle.AnimationStyleLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEase.MoveEaseLoadingError()
{
  return &type metadata for __RKEntityMoveEase.MoveEaseLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityMoveEaseType.MoveEaseTypeLoadingError()
{
  return &type metadata for __RKEntityMoveEaseType.MoveEaseTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityHideActionBuildOutAnimationType.BuildOutAnimationTypeLoadingError;
}

ValueMetadata *type metadata accessor for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError()
{
  return &type metadata for __RKEntityShowActionBuildInAnimationType.BuildInAnimationTypeLoadingError;
}

uint64_t storeEnumTagSinglePayload for __RKEntityAudioActionType.AudioActionTypeLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21B9F0808 + 4 * byte_21BE51844[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21B9F0828 + 4 * byte_21BE51849[v4]))();
}

_BYTE *sub_21B9F0808(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21B9F0828(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9F0830(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9F0838(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9F0840(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9F0848(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionSpecification.ActionUSDLoadingError()
{
  return &type metadata for __RKEntityActionSpecification.ActionUSDLoadingError;
}

_QWORD *specialized static __Engine.makeSharedEngine(_:)(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *a1;
  v2 = (void *)objc_opt_self();
  swift_retain();
  v3 = objc_msgSend(v2, sel_standardUserDefaults);
  v4 = (void *)MEMORY[0x220768C3C](0xD000000000000020, 0x800000021BE82D60);
  v5 = objc_msgSend(v3, sel_BOOLForKey_, v4);

  v6 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v7 = objc_msgSend(v6, sel_environment);

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v8 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000018, 0x800000021BE82D90);
    v10 = v9;
    swift_bridgeObjectRelease();
    if (((v10 | v5) & 1) != 0)
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      goto LABEL_8;
  }
  REEngineConfigurationGetRenderFlags();
  if ((int)REGetRetainCount() >= 2)
  {
    swift_retain();
    v11 = REEngineConfigurationClone();
    type metadata accessor for EngineConfiguration();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    swift_release_n();
    v1 = v12;
  }
  REEngineConfigurationSetRenderFlags();
LABEL_8:
  v14 = v1;
  type metadata accessor for __Engine();
  swift_allocObject();
  return __Engine.init(configuration:)(&v14);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioFileResource.LoadingStrategy(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileResource.LoadingStrategy()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioFileResource.LoadingStrategy()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileResource.LoadingStrategy()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AudioFileResource.LoadingStrategy()
{
  lazy protocol witness table accessor for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AudioFileResource.LoadingStrategy()
{
  lazy protocol witness table accessor for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy();
  return RawRepresentable<>.encode(to:)();
}

uint64_t AudioFileResource.LoadingStrategy.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x64616F6C657270;
  else
    return 0x6D6165727473;
}

uint64_t AudioFileResource.LoadingStrategy.init(rawValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  BOOL v4;
  uint64_t result;
  char v8;
  char v9;

  v4 = a1 == 0x6D6165727473 && a2 == 0xE600000000000000;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result = swift_bridgeObjectRelease();
    v8 = 0;
  }
  else if (a1 == 0x64616F6C657270 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v8 = 1;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      v8 = 1;
    else
      v8 = 2;
  }
  *a3 = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy;
  if (!lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileResource.LoadingStrategy, &type metadata for AudioFileResource.LoadingStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy;
  if (!lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileResource.LoadingStrategy, &type metadata for AudioFileResource.LoadingStrategy);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.LoadingStrategy and conformance AudioFileResource.LoadingStrategy);
  }
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioFileResource.LoadingStrategy@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return AudioFileResource.LoadingStrategy.init(rawValue:)(*a1, a1[1], a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioFileResource.LoadingStrategy(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6D6165727473;
  if (*v1)
    v2 = 0x64616F6C657270;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t storeEnumTagSinglePayload for AudioFileResource.LoadingStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21B9F11C0 + 4 * byte_21BE52299[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21B9F11F4 + 4 * byte_21BE52294[v4]))();
}

uint64_t sub_21B9F11F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F11FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B9F1204);
  return result;
}

uint64_t sub_21B9F1210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B9F1218);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21B9F121C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F1224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.LoadingStrategy()
{
  return &type metadata for AudioFileResource.LoadingStrategy;
}

void ReverbComponent.reverb.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *ReverbComponent.reverb.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ReverbComponent.reverb.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

_BYTE *ReverbComponent.init(reverb:)@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void ReverbComponent.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

uint64_t static ReverbComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 11)
  {
    if (v3 == 11)
      return 1;
  }
  else if (v2 == 10)
  {
    if (v3 == 10)
      return 1;
  }
  else if (v2 == v3 && (v3 & 0xFE) != 10)
  {
    return 1;
  }
  return 0;
}

Swift::Int ReverbComponent.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static ReverbComponent.__fromCore(_:)(char *a1@<X8>)
{
  uint64_t ReverbPreset;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  ReverbPreset = REReverbComponentGetReverbPreset();
  Reverb.Preset.init(core:)(ReverbPreset, (char *)&v11);
  v3 = v11;
  if (v11 == 10)
  {
    if (one-time initialization token for audio != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.audio);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v11 = v8;
      *(_DWORD *)v7 = 136315138;
      type metadata accessor for REAudioReverbPreset(0);
      v9 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v5, v6, "Unsupported reverb preset %s. Setting to anechoic.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v8, -1, -1);
      MEMORY[0x220772F44](v7, -1, -1);
    }

    v3 = 11;
  }
  *a1 = v3;
}

uint64_t ReverbComponent.__toCore(_:)()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = *v0;
  if (v1 == 10)
  {
    if (one-time initialization token for audio != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.audio);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_21B9AA000, v3, v4, "Automatic reverb case deprecated. Remove component instead.", v5, 2u);
      MEMORY[0x220772F44](v5, -1, -1);
    }

  }
  else if (v1 != 11)
  {
    Reverb.Preset.core.getter();
  }
  REReverbComponentSetPriority();
  REReverbComponentSetReverbPresetWithBlend();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ReverbComponent(_DWORD *a1@<X8>)
{
  *a1 = 5000;
}

void static ReverbComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5000;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ReverbComponent()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ReverbComponent()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReverbComponent()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((_DWORD)v1 == 10)
  {
    v1 = 0;
  }
  else if ((_DWORD)v1 == 11)
  {
    v1 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ReverbComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 11)
  {
    if (v2 == 10)
    {
      if (v3 == 10)
        return 1;
    }
    else if (v2 == v3 && (v3 & 0xFE) != 10)
    {
      return 1;
    }
    return 0;
  }
  return v3 == 11;
}

unint64_t lazy protocol witness table accessor for type ReverbComponent and conformance ReverbComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent;
  if (!lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ReverbComponent, &type metadata for ReverbComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReverbComponent and conformance ReverbComponent);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReverbComponent(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  if (*a1 <= 0xBu)
    v6 = 11;
  else
    v6 = *a1;
  v7 = v6 - 12;
  if (*a1 < 0xAu)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ReverbComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21B9F1970 + 4 * byte_21BE523B5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21B9F19A4 + 4 * byte_21BE523B0[v4]))();
}

uint64_t sub_21B9F19A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F19AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B9F19B4);
  return result;
}

uint64_t sub_21B9F19C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B9F19C8);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21B9F19CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F19D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReverbComponent()
{
  return &type metadata for ReverbComponent;
}

double static SIMD3<>.one.getter()
{
  return 0.00781250185;
}

double static SIMD3<>.positiveInfinity.getter()
{
  return 1.40444843e306;
}

double static SIMD3<>.negativeInfinity.getter()
{
  return -1.4044491e306;
}

__n128 simd_float4x4.identity.getter()
{
  return *(__n128 *)MEMORY[0x24BDAEE00];
}

float32x2_t simd_float4x4.transform(position:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  int32x4_t v5;

  v5 = (int32x4_t)vaddq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2), a5);
  return vdiv_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 3));
}

double simd_float4x4.transform(normal:)(float32x4_t a1, simd_float3 a2, simd_float3 a3, simd_float3 a4)
{
  int32x4_t v4;
  int32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  double result;
  simd_float3x3 v10;
  simd_float3x3 v11;

  a2.i32[3] = 0;
  a3.i32[3] = 0;
  a4.i32[3] = 0;
  v10.columns[0] = a2;
  v10.columns[1] = a3;
  v10.columns[2] = a4;
  v11 = __invert_f3(v10);
  v4 = vdupq_laneq_s32((int32x4_t)v11.columns[0], 2);
  v11.columns[0] = (simd_float3)vzip1q_s32((int32x4_t)v11.columns[0], (int32x4_t)v11.columns[2]);
  v5 = vzip1q_s32((int32x4_t)v11.columns[1], (int32x4_t)0);
  v6 = (float32x4_t)vzip1q_s32((int32x4_t)v11.columns[0], v5);
  v7 = (float32x4_t)vzip2q_s32((int32x4_t)v11.columns[0], v5);
  v11.columns[1] = (simd_float3)vzip1q_s32(v4, vdupq_laneq_s32((int32x4_t)v11.columns[1], 2));
  v7.i32[2] = vdupq_lane_s32(*(int32x2_t *)(&v11 + 32), 1).i32[2];
  v11.columns[1].i32[2] = v11.columns[2].i32[2];
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, a1.f32[0]), v7, *(float32x2_t *)a1.f32, 1), (float32x4_t)v11.columns[1], a1, 2).u64[0];
  return result;
}

__n64 simd_float4x4.transform(force:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t v6;
  __n64 result;

  v4 = vmulq_f32(a2, a2);
  v4.f32[0] = sqrtf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32));
  v5 = vmulq_f32(a3, a3);
  v5.f32[0] = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  v6 = (float32x2_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2).u64[0];
  result.n64_f32[0] = (float)(v4.f32[0] * (float)(v4.f32[0] * v4.f32[0])) * v6.f32[0];
  result.n64_u32[1] = vmuls_lane_f32(v5.f32[0] * (float)(v5.f32[0] * v5.f32[0]), v6, 1);
  return result;
}

__n64 simd_float4x4.transform(torque:)(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x2_t v6;
  __n64 result;

  v4 = vmulq_f32(a2, a2);
  v4.f32[0] = sqrtf(v4.f32[2] + vaddv_f32(*(float32x2_t *)v4.f32));
  v5 = vmulq_f32(a3, a3);
  v5.f32[0] = sqrtf(v5.f32[2] + vaddv_f32(*(float32x2_t *)v5.f32));
  v6 = (float32x2_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2, a1.f32[0]), a3, *(float32x2_t *)a1.f32, 1), a4, a1, 2).u64[0];
  result.n64_f32[0] = (float)(v4.f32[0] * (float)(v4.f32[0] * (float)(v4.f32[0] * v4.f32[0]))) * v6.f32[0];
  result.n64_u32[1] = vmuls_lane_f32(v5.f32[0] * (float)(v5.f32[0] * (float)(v5.f32[0] * v5.f32[0])), v6, 1);
  return result;
}

double one-time initialization function for identity()
{
  double result;

  result = 0.0;
  static simd_quatf.identity = xmmword_21BE41250;
  return result;
}

{
  double result;

  if (one-time initialization token for identity != -1)
    swift_once();
  result = *(double *)&static simd_quatf.identity;
  static Transform.identity = xmmword_21BE41210;
  xmmword_2551B1050 = static simd_quatf.identity;
  xmmword_2551B1060 = 0uLL;
  return result;
}

double static simd_quatf.identity.getter()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static simd_quatf.identity;
}

uint64_t __RKEmphasisFlipAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisFlipAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisFlipAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisFlipAnimation.createFlipAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 125, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulFlipAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 183, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildFlipAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicFlipAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  return 0x66666F6C6C6F72;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.DistanceAttenuation.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x66666F6C6C6F72 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance Audio.DistanceAttenuation.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.DistanceAttenuation.CodingKeys()
{
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  return 0x726F74636166;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.DistanceAttenuation.RolloffCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x726F74636166 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
  return CodingKey.debugDescription.getter();
}

void static Audio.DistanceAttenuation.default.getter(_QWORD *a1@<X8>)
{
  *a1 = 0x3FF0000000000000;
}

BOOL static Audio.DistanceAttenuation.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void Audio.DistanceAttenuation.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

uint64_t Audio.DistanceAttenuation.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.DistanceAttenuation.RolloffCodingKeys>);
  v10 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.DistanceAttenuation.CodingKeys>);
  v9 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v5);
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.CodingKeys, &unk_24DF9EC58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.CodingKeys, &unk_24DF9EC58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.CodingKeys, &unk_24DF9EC58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.CodingKeys, &unk_24DF9EC58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.RolloffCodingKeys, &unk_24DF9ECE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.RolloffCodingKeys, &unk_24DF9ECE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.RolloffCodingKeys, &unk_24DF9ECE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation.RolloffCodingKeys, &unk_24DF9ECE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys);
  }
  return result;
}

Swift::Int Audio.DistanceAttenuation.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t Audio.DistanceAttenuation.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void (*v18)(_QWORD *, _QWORD, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;

  v25 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.DistanceAttenuation.RolloffCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.DistanceAttenuation.CodingKeys>);
  v7 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Audio.DistanceAttenuation.CodingKeys and conformance Audio.DistanceAttenuation.CodingKeys();
  v28 = v9;
  v10 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v10)
  {
    v27 = a1;
    v24 = v7;
    v11 = v26;
    if (*(_QWORD *)(KeyedDecodingContainer.allKeys.getter() + 16) == 1)
    {
      lazy protocol witness table accessor for type Audio.DistanceAttenuation.RolloffCodingKeys and conformance Audio.DistanceAttenuation.RolloffCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v12 = v24;
      KeyedDecodingContainer.decode(_:forKey:)();
      v14 = v13;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v28, v11);
      a1 = v27;
      *v25 = v14;
    }
    else
    {
      v15 = type metadata accessor for DecodingError();
      swift_allocError();
      v17 = v16;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *v17 = &type metadata for Audio.DistanceAttenuation;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      v18 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104);
      v19 = v15;
      v20 = v26;
      v18(v17, *MEMORY[0x24BEE26D0], v19);
      swift_willThrow();
      v21 = v24;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v20);
      a1 = v27;
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Audio.DistanceAttenuation(double *a1, double *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance Audio.DistanceAttenuation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Audio.DistanceAttenuation()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation, &type metadata for Audio.DistanceAttenuation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation, &type metadata for Audio.DistanceAttenuation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation;
  if (!lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.DistanceAttenuation, &type metadata for Audio.DistanceAttenuation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.DistanceAttenuation and conformance Audio.DistanceAttenuation);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Audio.DistanceAttenuation@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Audio.DistanceAttenuation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Audio.DistanceAttenuation(_QWORD *a1)
{
  return Audio.DistanceAttenuation.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for Audio.DistanceAttenuation()
{
  return &type metadata for Audio.DistanceAttenuation;
}

void *type metadata accessor for Audio.DistanceAttenuation.CodingKeys()
{
  return &unk_24DF9EC58;
}

uint64_t storeEnumTagSinglePayload for Audio.DistanceAttenuation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21B9F280C + 4 * byte_21BE524C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21B9F282C + 4 * byte_21BE524C5[v4]))();
}

_BYTE *sub_21B9F280C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21B9F282C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9F2834(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9F283C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21B9F2844(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21B9F284C(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Audio.DistanceAttenuation.RolloffCodingKeys()
{
  return &unk_24DF9ECE8;
}

uint64_t one-time initialization function for audio()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.audio);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.audio);
  return Logger.init(subsystem:category:)();
}

BOOL static AudioResource.InputMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void AudioResource.InputMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int AudioResource.InputMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioResource.InputMode and conformance AudioResource.InputMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode;
  if (!lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.InputMode, &type metadata for AudioResource.InputMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.InputMode and conformance AudioResource.InputMode);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AudioResource.InputMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioResource.InputMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21B9F2C30 + 4 * byte_21BE52819[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21B9F2C64 + 4 * asc_21BE52814[v4]))();
}

uint64_t sub_21B9F2C64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F2C6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B9F2C74);
  return result;
}

uint64_t sub_21B9F2C80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B9F2C88);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21B9F2C8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B9F2C94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for AudioResource.InputMode(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.InputMode()
{
  return &type metadata for AudioResource.InputMode;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t IsEqual;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  __int128 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unint64_t v62;
  unint64_t v63;
  unsigned __int8 v64[8];
  uint64_t v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  unsigned __int8 v73;
  uint64_t v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  char v78;

  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    IsEqual = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_61:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (IsEqual != v7)
      return 0;
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  IsEqual = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v6 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_61;
LABEL_3:
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (IsEqual != v7)
    return 0;
LABEL_4:
  if (!IsEqual)
    return 1;
  v8 = a1 & 0xFFFFFFFFFFFFFF8;
  v9 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0)
    v10 = a1;
  else
    v10 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v4)
    v9 = v10;
  v11 = a2 & 0xFFFFFFFFFFFFFF8;
  v12 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  v13 = (a2 & 0x8000000000000000) != 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v12 = v13;
  if (v9 == v12)
    return 1;
  if (IsEqual < 0)
    goto LABEL_66;
  v63 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_67:
    result = MEMORY[0x220769770](0, a1);
    v7 = result;
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_69;
    }
    v7 = *(_QWORD *)(a1 + 32);
    result = swift_retain();
  }
  v62 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v11 + 16))
    {
      __break(1u);
      return result;
    }
    v15 = *(_QWORD *)(a2 + 32);
    swift_retain();
    goto LABEL_23;
  }
LABEL_69:
  v15 = MEMORY[0x220769770](0, a2);
LABEL_23:
  if (*(_QWORD *)(v7 + 16) == *(_QWORD *)(v15 + 16))
  {
    swift_release();
    swift_release();
    if (IsEqual == 1)
      return 1;
LABEL_34:
    v28 = 1 - IsEqual;
    v29 = 5;
    v53 = v11;
    v54 = v8;
    while (1)
    {
      if (v28 + v29 == 5)
      {
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      v30 = v29 - 4;
      if (v63)
      {
        v31 = MEMORY[0x220769770](v29 - 4, a1);
        if (v62)
          goto LABEL_40;
      }
      else
      {
        if (v30 >= *(_QWORD *)(v8 + 16))
          goto LABEL_64;
        v31 = *(_QWORD *)(a1 + 8 * v29);
        swift_retain();
        if (v62)
        {
LABEL_40:
          v32 = MEMORY[0x220769770](v29 - 4, a2);
          goto LABEL_45;
        }
      }
      if (v30 >= *(_QWORD *)(v11 + 16))
        goto LABEL_65;
      v32 = *(_QWORD *)(a2 + 8 * v29);
      swift_retain();
LABEL_45:
      if (*(_QWORD *)(v31 + 16) == *(_QWORD *)(v32 + 16))
        goto LABEL_35;
      type metadata accessor for AudioFileResource();
      v33 = swift_dynamicCastClass();
      if (v33 && (v34 = v33, (v35 = swift_dynamicCastClass()) != 0))
      {
        IsEqual = *(_QWORD *)(v34 + 16);
        if (IsEqual == *(_QWORD *)(v35 + 16))
        {
LABEL_35:
          swift_release();
          swift_release();
          goto LABEL_36;
        }
        swift_retain();
        swift_retain();
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v70);
        v36 = v70;
        v60 = v72;
        v61 = v71;
        v59 = v73;
        v37 = v75;
        v58 = v74;
        v57 = v76;
        v56 = v77;
        v55 = v78;
        AudioFileResource.CreateOptions.init(from:)((uint64_t)&v70);
        v38 = v70;
        v39 = v71;
        v40 = v72;
        v41 = v73;
        v42 = v74;
        v43 = v76;
        v44 = v77;
        v45 = v78;
        v46 = v75;
        v70 = v36;
        v71 = v61;
        v72 = v60;
        v73 = v59;
        v74 = v58;
        v75 = v37;
        v76 = v57;
        v77 = v56;
        v78 = v55;
        v64[0] = v38;
        v64[1] = v39;
        v64[2] = v40;
        v64[3] = v41;
        v65 = v42;
        v66 = v46;
        v67 = v43;
        v68 = v44;
        v69 = v45;
        v47 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v70, v64);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0)
        {
          swift_release_n();
          goto LABEL_57;
        }
        IsEqual = REAudioFileAssetIsEqual();
        swift_release_n();
        swift_release_n();
        v11 = v53;
        v8 = v54;
        if ((IsEqual & 1) == 0)
          return 0;
      }
      else
      {
        type metadata accessor for AudioFileGroupResource();
        v48 = swift_dynamicCastClass();
        if (!v48)
          goto LABEL_57;
        v49 = v48;
        v50 = swift_dynamicCastClass();
        if (!v50)
          goto LABEL_57;
        v51 = *(_QWORD *)(v49 + 24);
        v52 = *(_QWORD *)(v50 + 24);
        swift_retain();
        swift_retain();
        IsEqual = specialized static Array<A>.== infix(_:_:)(v51, v52);
        swift_release_n();
        swift_release_n();
        if ((IsEqual & 1) == 0)
          return 0;
      }
LABEL_36:
      ++v29;
      result = 1;
      if (v28 + v29 == 5)
        return result;
    }
  }
  v16 = v11;
  type metadata accessor for AudioFileResource();
  v17 = swift_dynamicCastClass();
  if (v17)
  {
    v18 = v17;
    v19 = swift_dynamicCastClass();
    if (v19)
    {
      v20 = v19;
      swift_retain();
      swift_retain();
      v21 = specialized static AudioFileResource.== infix(_:_:)(v18, v20);
      goto LABEL_30;
    }
  }
  type metadata accessor for AudioFileGroupResource();
  v22 = swift_dynamicCastClass();
  if (v22)
  {
    v23 = v22;
    v24 = swift_dynamicCastClass();
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 24);
      v26 = *(_QWORD *)(v24 + 24);
      swift_retain();
      swift_retain();
      v21 = specialized static Array<A>.== infix(_:_:)(v25, v26);
LABEL_30:
      v27 = v21;
      swift_release_n();
      swift_release_n();
      v11 = v16;
      if ((v27 & 1) != 0)
      {
        if (IsEqual == 1)
          return 1;
        goto LABEL_34;
      }
      return 0;
    }
  }
LABEL_57:
  swift_release();
  swift_release();
  return 0;
}

float specialized static Array<A>.== infix(_:_:)(float32x4_t *a1, float32x4_t *a2)
{
  uint64_t v2;
  float result;
  float32x4_t *v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;

  v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0])
  {
    if (v2)
    {
      if (a1 != a2)
      {
        result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(a1[3], a2[3]), (int8x16_t)vceqq_f32(a1[2], a2[2])), vandq_s8((int8x16_t)vceqq_f32(a1[4], a2[4]), (int8x16_t)vceqq_f32(a1[5], a2[5])))));
        if ((LODWORD(result) & 0x80000000) != 0)
        {
          v4 = a2 + 9;
          v5 = a1 + 9;
          do
          {
            if (!--v2)
              break;
            v6 = v4[-3];
            v7 = v4[-2];
            v8 = v4[-1];
            v9 = *v4;
            v4 += 4;
            v11 = v5[-1];
            v10 = *v5;
            v13 = v5[-3];
            v12 = v5[-2];
            v5 += 4;
            result = COERCE_FLOAT(vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v12, v7), (int8x16_t)vceqq_f32(v13, v6)), vandq_s8((int8x16_t)vceqq_f32(v11, v8), (int8x16_t)vceqq_f32(v10, v9)))));
          }
          while ((LODWORD(result) & 0x80000000) != 0);
        }
      }
    }
  }
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BOOL8 result;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  do
  {
    v5 = 0;
    v6 = 16 * v3++;
    v7 = *(_OWORD *)(v4 + v6);
    v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      v13 = v7;
      v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      v14 = v8;
      v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      result = v10 == v11;
      if (v5 == 2)
        break;
      while (1)
      {
        ++v5;
        if (result)
          break;
        result = 0;
        if (v5 == 2)
          return result;
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BOOL8 result;
  float v10;
  float v11;
  __int128 v13;
  __int128 v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  do
  {
    v5 = 0;
    v6 = 16 * v3++;
    v7 = *(_OWORD *)(v4 + v6);
    v8 = *(_OWORD *)(a2 + 32 + v6);
    while (1)
    {
      v13 = v7;
      v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      v14 = v8;
      v11 = *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
      result = v10 == v11;
      if (v5 == 3)
        break;
      while (1)
      {
        ++v5;
        if (result)
          break;
        result = 0;
        if (v5 == 3)
          return result;
      }
    }
  }
  while (v10 == v11 && v3 != v2);
  return result;
}

{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  char v6;
  char v7;
  char v8;
  BOOL v10;
  __int128 v12;
  char v13;
  __int128 v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v8 = 1;
    }
    else
    {
      v3 = v2 - 1;
      v4 = (_BYTE *)(a2 + 48);
      v5 = (_BYTE *)(a1 + 48);
      do
      {
        v6 = *v5;
        v14 = *((_OWORD *)v5 - 1);
        v15 = v6;
        v7 = *v4;
        v12 = *((_OWORD *)v4 - 1);
        v13 = v7;
        v8 = specialized static BindPath.Part.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v12);
        v10 = v3-- != 0;
        if ((v8 & 1) == 0)
          break;
        v4 += 24;
        v5 += 24;
      }
      while (v10);
    }
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(char *, uint64_t);
  BOOL v20;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v22 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v22 = *(_QWORD *)(v8 + 72);
      v23 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v17 = dispatch thunk of static Equatable.== infix(_:_:)();
        v18 = *(void (**)(char *, uint64_t))(v23 + 8);
        v18(v7, v4);
        v18(v10, v4);
        v20 = v14-- != 0;
        if ((v17 & 1) == 0)
          break;
        v12 += v22;
        a2 = v16;
        a1 = v15;
      }
      while (v20);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t (*)(char *, char *))static __RKEntityTriggerSpecification.== infix(_:_:));
}

{
  return specialized static Array<A>.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityActionSpecification, (uint64_t (*)(char *, char *))static __RKEntityActionSpecification.== infix(_:_:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;

  v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      outlined init with copy of __RKEntityActionSpecification(a1 + v12, (uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
      outlined init with copy of __RKEntityActionSpecification(a2 + v12, (uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      specialized static __RKEntityTriggerSpecification.== infix(_:_:)((uint64_t)v10, (uint64_t)v7);
      if ((v14 & 1) == 0)
        break;
      specialized static __RKEntityActionSpecification.== infix(_:_:)((uint64_t)&v10[*(int *)(v4 + 20)], (uint64_t)&v7[*(int *)(v4 + 20)]);
      if ((v15 & 1) == 0)
        break;
      v16 = *(int *)(v4 + 24);
      v17 = &v10[v16];
      v18 = *(_QWORD *)&v10[v16 + 8];
      v19 = &v7[v16];
      v20 = *((_QWORD *)v19 + 1);
      if (v18)
      {
        if (!v20)
          break;
        v21 = *(_QWORD *)v17 == *(_QWORD *)v19 && v18 == v20;
        if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          break;
      }
      else if (v20)
      {
        break;
      }
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
      v12 += v13;
      if (!--v11)
        return 1;
    }
    outlined destroy of __RKEntityActionSpecification((uint64_t)v7, type metadata accessor for __RKEntityInteractionSpecification);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for __RKEntityInteractionSpecification);
    return 0;
  }
  return 1;
}

uint64_t specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

{
  uint64_t v2;
  char v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *i;
  BOOL v10;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (a1[5] == a2[5] && a1[6] == a2[6]
    || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    v7 = v2 - 1;
    if (!v7)
      return 1;
    v8 = a2 + 9;
    for (i = a1 + 9; *(i - 2) == *(v8 - 2); i += 3)
    {
      v10 = *(i - 1) == *(v8 - 1) && *i == *v8;
      if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        break;
      v8 += 3;
      result = 1;
      if (!--v7)
        return result;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        outlined init with copy of __RKEntityActionSpecification(a1 + v16, (uint64_t)v14, a3);
        outlined init with copy of __RKEntityActionSpecification(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v11, a3);
        outlined destroy of __RKEntityActionSpecification((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

unint64_t specialized static Array<A>.== infix(_:_:)(unint64_t result, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  float v19;
  float v20;
  uint64_t v21;
  BOOL v22;
  float v23;
  float v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  float v35;
  float v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  float v41;
  float v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v3 = result;
  v4 = result >> 62;
  if (!(result >> 62))
  {
    v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_72:
    swift_bridgeObjectRetain();
    v43 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5 == v43)
      goto LABEL_4;
    return 0;
  }
  swift_bridgeObjectRetain();
  v5 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  v6 = a2 >> 62;
  if (a2 >> 62)
    goto LABEL_72;
LABEL_3:
  if (v5 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_4:
  if (!v5)
    return 1;
  v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v3 < 0)
    v8 = v3;
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v4)
    v7 = v8;
  v9 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if ((a2 & 0x8000000000000000) != 0)
    v10 = a2;
  else
    v10 = a2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
    return 1;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      v11 = 0;
      v12 = a2 & 0xC000000000000001;
      while (1)
      {
        if (v11 == v5)
          goto LABEL_75;
        if ((v3 & 0xC000000000000001) != 0)
        {
          result = MEMORY[0x220769770](v11, v3);
          v13 = result;
          if (!v12)
            goto LABEL_25;
        }
        else
        {
          if (v11 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_79;
          v13 = *(_QWORD *)(v3 + 32 + 8 * v11);
          result = swift_retain();
          if (!v12)
          {
LABEL_25:
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_80;
            v14 = *(_QWORD *)(a2 + 32 + 8 * v11);
            swift_retain();
            goto LABEL_27;
          }
        }
        v14 = MEMORY[0x220769770](v11, a2);
LABEL_27:
        if (*(_QWORD *)(v13 + 16) != *(_QWORD *)(v14 + 16))
          goto LABEL_48;
        v15 = 0;
        ++v11;
        v16 = *(_OWORD *)(v13 + 32);
        v17 = *(_OWORD *)(v14 + 32);
        v18 = 1;
        while (1)
        {
          while (!v18)
          {
            if (v15 == 2)
              goto LABEL_48;
            v18 = 0;
            ++v15;
          }
          v52 = v16;
          v19 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
          v53 = v17;
          v20 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
          v18 = v19 == v20;
          if (v15 == 2)
            break;
          ++v15;
        }
        if (v19 != v20)
        {
LABEL_48:
          swift_release();
          swift_release();
          return 0;
        }
        v44 = *(_OWORD *)(v14 + 48);
        v45 = *(_OWORD *)(v13 + 48);
        swift_release();
        swift_release();
        v21 = 0;
        v22 = 1;
        while (!v22)
        {
          result = 0;
          v22 = 0;
          if (v21 == 3)
            return result;
LABEL_37:
          ++v21;
        }
        v50 = v45;
        v23 = *(float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
        v51 = v44;
        v24 = *(float *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
        v22 = v23 == v24;
        if (v21 != 3)
          goto LABEL_37;
        v25 = v23 != v24 || v11 == v5;
        result = v23 == v24;
        if (v25)
          return result;
      }
    }
    v26 = 0;
    v27 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v28 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_51:
    if (v26 == v5)
      goto LABEL_76;
    if (v26 == v27)
      goto LABEL_77;
    if (v26 == v28)
      goto LABEL_78;
    v29 = *(_QWORD *)(v3 + 32 + 8 * v26);
    v30 = *(_QWORD *)(a2 + 32 + 8 * v26);
    if (*(_QWORD *)(v29 + 16) != *(_QWORD *)(v30 + 16))
      return 0;
    v31 = 0;
    ++v26;
    v32 = *(_OWORD *)(v29 + 32);
    v33 = *(_OWORD *)(v30 + 32);
    v34 = 1;
    while (1)
    {
      if (v34)
      {
        v48 = v32;
        v35 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        v49 = v33;
        v36 = *(float *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        v34 = v35 == v36;
        if (v31 == 2)
        {
          if (v35 != v36)
            return 0;
          v37 = 0;
          v38 = *(_OWORD *)(v29 + 48);
          v39 = *(_OWORD *)(v30 + 48);
          v40 = 1;
          while (2)
          {
            if (!v40)
            {
              result = 0;
              v40 = 0;
              if (v37 == 3)
                return result;
              goto LABEL_64;
            }
            v46 = v38;
            v41 = *(float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v37 & 3)));
            v47 = v39;
            v42 = *(float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v37 & 3)));
            v40 = v41 == v42;
            if (v37 != 3)
            {
LABEL_64:
              ++v37;
              continue;
            }
            break;
          }
          if (v41 != v42)
            return 0;
          result = 1;
          if (v26 == v5)
            return result;
          goto LABEL_51;
        }
      }
      else
      {
        result = 0;
        v34 = 0;
        if (v31 == 2)
          return result;
      }
      ++v31;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
  return result;
}

BOOL specialized static Array<A>.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t AudioLibraryComponent.resources.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AudioLibraryComponent.resources.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*AudioLibraryComponent.resources.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::AudioLibraryComponent __swiftcall AudioLibraryComponent.init(resources:)(RealityFoundation::AudioLibraryComponent resources)
{
  RealityFoundation::AudioLibraryComponent *v1;

  v1->resources._rawValue = resources.resources._rawValue;
  return resources;
}

uint64_t AudioLibraryComponent.init(dictionaryLiteral:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v6 = v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

void static AudioLibraryComponent.__fromCore(_:)(unint64_t *a1@<X8>)
{
  void *v2;
  unint64_t v3;

  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v2 = (void *)REAudioLibraryComponentCopyAssetNames();
  type metadata accessor for CFStringRef(0);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

  *a1 = v3;
}

void AudioLibraryComponent.__toCore(_:)(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  __int128 v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t AssetForName;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 v38;
  char v39;
  int IsEqual;
  Swift::UInt32 v41;
  _QWORD *rawValue;
  unint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 *v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, __n128);
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  int64_t v84;
  _QWORD v85[2];
  __int128 v86;
  char v87;
  uint64_t v88;
  unsigned __int8 v89;
  _BYTE v90[40];
  uint64_t v91;
  unsigned __int8 v92;

  v2 = *a1;
  *(_QWORD *)v90 = *v1;
  v3 = *(_QWORD *)v90;
  AudioLibraryComponent.removeDeletedResources(component:)();
  v4 = *(_QWORD *)(*(_QWORD *)v90 + 64);
  v81 = *(_QWORD *)v90 + 64;
  v5 = 1 << *(_BYTE *)(*(_QWORD *)v90 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & v4;
  v82 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  *((_QWORD *)&v9 + 1) = 2;
  v79 = xmmword_21BE411F0;
  *(_QWORD *)&v9 = 136315138;
  v76 = v9;
  v75 = MEMORY[0x24BEE4AD8] + 8;
  v80 = *(_QWORD *)v90;
  v83 = v2;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_23:
    v16 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v12);
    v18 = *v16;
    v17 = v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v12);
    swift_bridgeObjectRetain();
    swift_retain();
    v20 = (void *)MEMORY[0x220768C3C](v18, v17);
    AssetForName = REAudioLibraryComponentGetAssetForName();

    if (!AssetForName)
      goto LABEL_6;
    v84 = v8;
    v22 = (id)REAssetGetSwiftObject();
    type metadata accessor for AudioResource();
    v23 = swift_dynamicCastClass();
    if (v23)
    {
      v24 = v23;
      v8 = v84;
LABEL_26:
      if (*(_QWORD *)(v19 + 16) == *(_QWORD *)(v24 + 16))
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        type metadata accessor for AudioFileResource();
        v25 = swift_dynamicCastClass();
        if (!v25 || (v26 = v25, (v27 = swift_dynamicCastClass()) == 0))
        {
          type metadata accessor for AudioFileGroupResource();
          v57 = swift_dynamicCastClass();
          if (!v57)
            goto LABEL_5;
          v58 = v57;
          v59 = swift_dynamicCastClass();
          if (!v59)
            goto LABEL_5;
          v60 = *(_QWORD *)(v58 + 24);
          v61 = *(_QWORD *)(v59 + 24);
          swift_retain();
          LOBYTE(v60) = specialized static Array<A>.== infix(_:_:)(v60, v61);
          swift_release();
          swift_release();
          v8 = v84;
          if ((v60 & 1) != 0)
          {
LABEL_43:
            swift_bridgeObjectRelease();
            goto LABEL_53;
          }
          goto LABEL_6;
        }
        if (*(_QWORD *)(v26 + 16) == *(_QWORD *)(v27 + 16))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          v8 = v84;
        }
        else
        {
          swift_retain();
          AudioFileResource.CreateOptions.init(from:)((uint64_t)v90);
          v28 = v90[0];
          v29 = v90[1];
          LODWORD(v78) = v90[2];
          LODWORD(v77) = v90[3];
          v30 = *(_QWORD *)&v90[16];
          *(_QWORD *)&v74 = *(_QWORD *)&v90[8];
          v73 = *(_QWORD *)&v90[24];
          v72 = v90[32];
          v71 = v91;
          v70 = v92;
          AudioFileResource.CreateOptions.init(from:)((uint64_t)v90);
          v31 = v90[0];
          v32 = v90[1];
          v33 = v90[2];
          v34 = v90[3];
          v35 = *(_QWORD *)&v90[8];
          v36 = v90[32];
          v37 = v91;
          v38 = v92;
          v69 = *(_OWORD *)&v90[16];
          v90[0] = v28;
          v90[1] = v29;
          v90[2] = (_BYTE)v78;
          v90[3] = (_BYTE)v77;
          *(_QWORD *)&v90[8] = v74;
          *(_QWORD *)&v90[16] = v30;
          *(_QWORD *)&v90[24] = v73;
          v90[32] = v72;
          v91 = v71;
          v92 = v70;
          LOBYTE(v85[0]) = v31;
          BYTE1(v85[0]) = v32;
          BYTE2(v85[0]) = v33;
          BYTE3(v85[0]) = v34;
          v85[1] = v35;
          v86 = v69;
          v87 = v36;
          v88 = v37;
          v89 = v38;
          v39 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(v90, (unsigned __int8 *)v85);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v39 & 1) == 0)
          {
            swift_release();
            v3 = v80;
LABEL_5:
            swift_release();
            v8 = v84;
            goto LABEL_6;
          }
          IsEqual = REAudioFileAssetIsEqual();
          swift_release();
          swift_release();
          v3 = v80;
          v8 = v84;
          if (IsEqual)
            goto LABEL_43;
LABEL_6:
          v10 = (void *)MEMORY[0x220768C3C](v18, v17);
          swift_bridgeObjectRelease();
          REAudioLibraryComponentRegisterAsset();
          swift_release();

        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
      v41 = REAssetHandleAssetType();
      if (one-time initialization token for resourceClasses != -1)
        swift_once();
      rawValue = resourceClasses._rawValue;
      if (*((_QWORD *)resourceClasses._rawValue + 2)
        && (v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41), (v44 & 1) != 0))
      {
        v45 = *(_OWORD *)(rawValue[7] + 16 * v43);
        v46 = *(_QWORD *)(rawValue[7] + 16 * v43 + 8);
        v78 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 16);
        v74 = v45;
        v47 = v45;
        v48 = type metadata accessor for Optional();
        v77 = &v69;
        v73 = v48;
        v49 = *(_QWORD *)(v48 - 8);
        v50 = MEMORY[0x24BDAC7A8](v48);
        v52 = (char *)&v69 - v51;
        v78(AssetForName, v47, v46, v50);
        v53 = *(_QWORD *)(v47 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v52, 1, v47) == 1)
        {
          (*(void (**)(char *, uint64_t))(v49 + 8))(v52, v73);
          memset(v90, 0, sizeof(v90));
        }
        else
        {
          *(_OWORD *)&v90[24] = v74;
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)v90);
          (*(void (**)(uint64_t *, char *, uint64_t))(v53 + 32))(boxed_opaque_existential_1, v52, v47);
        }
        v3 = v80;
        v8 = v84;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadableResource?);
        if (swift_dynamicCast())
        {
          v24 = v85[0];
          if (v85[0])
            goto LABEL_26;
        }
      }
      else
      {
        static os_log_type_t.error.getter();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = v79;
        v55 = (id)REAssetGetType();
        *(_QWORD *)(v54 + 56) = type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
        *(_QWORD *)(v54 + 64) = lazy protocol witness table accessor for type NSString and conformance NSObject();
        *(_QWORD *)(v54 + 32) = v55;
        type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
        v56 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
        v3 = v80;
        swift_bridgeObjectRelease();

        v8 = v84;
      }
      if (one-time initialization token for audio != -1)
        swift_once();
      v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)static Logger.audio);
      swift_bridgeObjectRetain();
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc();
        v67 = swift_slowAlloc();
        *(_QWORD *)v90 = v67;
        *(_DWORD *)v66 = v76;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v66 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, (uint64_t *)v90);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_21B9AA000, v64, v65, "[API/RealityKit] [AudioLibraryComponent] Failed to get AudioResource from coreAssetType for asset %s.", (uint8_t *)v66, 0xCu);
        swift_arrayDestroy();
        v68 = v67;
        v8 = v84;
        MEMORY[0x220772F44](v68, -1, -1);
        MEMORY[0x220772F44](v66, -1, -1);

LABEL_53:
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
    }
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v13 >= v82)
    goto LABEL_55;
  v14 = *(_QWORD *)(v81 + 8 * v13);
  ++v8;
  if (v14)
    goto LABEL_22;
  v8 = v13 + 1;
  if (v13 + 1 >= v82)
    goto LABEL_55;
  v14 = *(_QWORD *)(v81 + 8 * v8);
  if (v14)
    goto LABEL_22;
  v8 = v13 + 2;
  if (v13 + 2 >= v82)
    goto LABEL_55;
  v14 = *(_QWORD *)(v81 + 8 * v8);
  if (v14)
  {
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_23;
  }
  v15 = v13 + 3;
  if (v15 >= v82)
  {
LABEL_55:
    swift_release();
    return;
  }
  v14 = *(_QWORD *)(v81 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v82)
      goto LABEL_55;
    v14 = *(_QWORD *)(v81 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_57:
  __break(1u);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AudioLibraryComponent(_DWORD *a1@<X8>)
{
  *a1 = 5006;
}

void static AudioLibraryComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5006;
}

uint64_t protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance AudioLibraryComponent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
    v3 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v3 = MEMORY[0x24BEE4B00];
  }
  v6 = v3;
  v4 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v4, 1, &v6);
  result = swift_bridgeObjectRelease();
  *a2 = v6;
  return result;
}

void AudioLibraryComponent.removeDeletedResources(component:)()
{
  void *v0;

  v0 = (void *)REAudioLibraryComponentCopyAssetNames();
  static Array._conditionallyBridgeFromObjectiveC(_:result:)();

}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS10RealityKit13AudioResourceCG_SSs5NeverOTg504_s17d12Foundation21f126LibraryComponentV22removeDeletedResources33_702952AAC0242E04445618A79588EAB8LL9componentys13OpaquePointerV_tFS2S3key_0A3Kit0C8G69C5valuet_tcfu_32a168a102879cc1a6a91172b0770f0c91SSAI_AlMtSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v30 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  v2 = v30;
  result = specialized Dictionary.startIndex.getter(a1);
  v6 = result;
  v7 = 0;
  v9 = v8 & 1;
  v10 = a1 + 64;
  v26 = v1;
  v27 = v5;
  v28 = a1 + 64;
  while ((v9 & 1) == 0)
  {
    if (v6 < 0 || v6 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      break;
    }
    v14 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v10 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_26;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_27;
    v29 = v7;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v6);
    v17 = *v15;
    v16 = v15[1];
    v19 = *(_QWORD *)(v30 + 16);
    v18 = *(_QWORD *)(v30 + 24);
    result = swift_bridgeObjectRetain();
    if (v19 >= v18 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
    *(_QWORD *)(v30 + 16) = v19 + 1;
    v20 = v30 + 16 * v19;
    *(_QWORD *)(v20 + 32) = v17;
    *(_QWORD *)(v20 + 40) = v16;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v11)
      goto LABEL_28;
    v10 = a1 + 64;
    v21 = *(_QWORD *)(v28 + 8 * v14);
    if ((v21 & (1 << v6)) == 0)
      goto LABEL_29;
    v5 = v27;
    if (*(_DWORD *)(a1 + 36) != v27)
      goto LABEL_30;
    v22 = v21 & (-2 << (v6 & 0x3F));
    if (v22)
    {
      v11 = __clz(__rbit64(v22)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v12 = v26;
      v13 = v29;
    }
    else
    {
      v23 = v14 + 1;
      v24 = (unint64_t)(v11 + 63) >> 6;
      v12 = v26;
      v13 = v29;
      if (v14 + 1 < v24)
      {
        v25 = *(_QWORD *)(v28 + 8 * v23);
        if (!v25)
        {
          v23 = v14 + 2;
          if (v14 + 2 >= v24)
            goto LABEL_4;
          v25 = *(_QWORD *)(v28 + 8 * v23);
          if (!v25)
          {
            while (v24 - 3 != v14)
            {
              v25 = *(_QWORD *)(a1 + 88 + 8 * v14++);
              if (v25)
              {
                v23 = v14 + 2;
                goto LABEL_18;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_18:
        v11 = __clz(__rbit64(v25)) + (v23 << 6);
      }
    }
LABEL_4:
    v9 = 0;
    v7 = v13 + 1;
    v6 = v11;
    if (v7 == v12)
      return v2;
  }
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  _CFObject.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;

  type metadata accessor for CodingUserInfoKey();
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  CustomMaterial.CustomShaderParameters.hash(into:)();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(a1 + 16));
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt64 v2;
  Swift::UInt32 v3;
  Swift::UInt64 v4;
  Swift::UInt16 v5;
  Swift::Int v6;

  Hasher.init(_seed:)();
  v2 = *(_QWORD *)(a1 + 16);
  String.hash(into:)();
  v3 = *(_DWORD *)(a1 + 44);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  v5 = *(_WORD *)(a1 + 40);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((double *)a1, v6);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(Swift::UInt, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t (*)(Swift::UInt, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x220769EF0](*(_QWORD *)(v1 + 40), a1, 4);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  int v2;
  Swift::Int v3;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a1 & 0xFF0000) == 0x20000)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1) & 1);
  }
  if (HIBYTE(a1) == 2)
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v2 = HIBYTE(a1) & 1;
  }
  Hasher._combine(_:)(v2);
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t (*a2)(Swift::UInt, Swift::Int))
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  return a2(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t *a1)
{
  Swift::UInt v2;
  Swift::UInt64 v3;
  Swift::UInt v4;
  Swift::Int v5;

  v3 = *a1;
  v2 = a1[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    v4 = a1[2];
    if (v4)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (a1[4])
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  v4 = a1[2];
  if (!v4)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4);
  if (!a1[4])
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
LABEL_8:
  v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v5);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3)
{
  int v6;
  Swift::Int v7;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  if ((a3 & 0xFF00) == 0x200)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a3 >> 8) & 1);
  }
  if ((a3 & 0xFF0000) == 0x20000)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v6 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0xFFFF01, v7);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(a1);
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  Swift::Int v6;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v6 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3 & 0x101, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  id v2;
  Swift::Int v3;

  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v2 = a1;
    _CFObject.hash(into:)();

  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t)a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *a1;
    v9 = *(_QWORD *)(v2 + 48);
    do
    {
      v10 = (_QWORD *)(v9 + 40 * v5);
      if (*v10 != v8)
        goto LABEL_4;
      v12 = v10[1];
      v11 = v10[2];
      v13 = v10[3];
      v14 = v10[4];
      v15 = a1[1];
      if (v12)
      {
        if (!v15 || v12 != v15)
          goto LABEL_4;
      }
      else if (v15)
      {
        goto LABEL_4;
      }
      v16 = a1[2];
      if (v11)
      {
        if (!v16 || v11 != v16)
          goto LABEL_4;
      }
      else if (v16)
      {
        goto LABEL_4;
      }
      v17 = a1[4];
      if (v14)
      {
        if (v17)
        {
          v18 = v13 == a1[3] && v14 == v17;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return v5;
        }
      }
      else if (!v17)
      {
        return v5;
      }
LABEL_4:
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x22076968C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFStringRef(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    v7 = v6;
    v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static _CFObject.== infix(_:_:)();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for CodingUserInfoKey();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unsigned __int16 v19;
  uint64_t v20;
  char v21;
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[7];
  uint64_t v30;

  v3 = *(_OWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 96);
  v29[5] = *(_OWORD *)(a1 + 80);
  v29[6] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v6 = *(_OWORD *)(a1 + 32);
  v7 = *(_OWORD *)(a1 + 48);
  v29[1] = v5;
  v29[2] = v6;
  v30 = *(_QWORD *)(a1 + 112);
  v29[3] = v7;
  v29[4] = v3;
  v8 = -1 << *(_BYTE *)(v2 + 32);
  v9 = a2 & ~v8;
  if (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    do
    {
      v11 = *(_QWORD *)(v2 + 48) + 120 * v9;
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_BYTE *)(v11 + 16);
      v14 = *(_WORD *)(v11 + 17);
      v19 = *(_WORD *)v11;
      v20 = v12;
      v21 = v13;
      v22 = v14;
      v15 = *(_OWORD *)(v11 + 40);
      v23 = *(_OWORD *)(v11 + 24);
      v24 = v15;
      v16 = *(_OWORD *)(v11 + 72);
      v25 = *(_OWORD *)(v11 + 56);
      v26 = v16;
      v17 = *(_OWORD *)(v11 + 104);
      v27 = *(_OWORD *)(v11 + 88);
      v28 = v17;
      if (specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(&v19, (unsigned __int16 *)v29))
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * result) + 16) != v8)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if (*(_QWORD *)(*(_QWORD *)(v7 + 8 * result) + 16) == v8)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = v2;
    v8 = ~v4;
    do
    {
      v9 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFStringRef(0);
          lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
          v10 = v9;
          v11 = static _CFObject.== infix(_:_:)();

          if ((v11 & 1) != 0)
            return v5;
        }
      }
      else if (!a1)
      {
        return v5;
      }
      v5 = (v5 + 1) & v8;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  _BOOL4 v11;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    v7 = HIBYTE(a1);
    do
    {
      v8 = (unsigned __int16 *)(*(_QWORD *)(v2 + 48) + 4 * result);
      if (*v8 == (unsigned __int16)a1)
      {
        v9 = *((unsigned __int8 *)v8 + 2);
        v10 = *((unsigned __int8 *)v8 + 3);
        if (v9 == 2)
        {
          if (BYTE2(a1) != 2)
            goto LABEL_4;
        }
        else if (BYTE2(a1) == 2 || (HIWORD(a1) & 1) != (v9 & 1))
        {
          goto LABEL_4;
        }
        if (v10 == 2)
        {
          if (v7 == 2)
            return result;
        }
        else
        {
          v11 = (v10 & 1) == 0;
          if (v7 != 2 && ((v11 ^ ((a1 & 0x1000000) >> 24)) & 1) != 0)
            return result;
        }
      }
LABEL_4:
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int16 a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  _BOOL4 v12;

  v6 = -1 << *(_BYTE *)(v4 + 32);
  result = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v8 = ~v6;
    do
    {
      v9 = (unsigned __int16 *)(*(_QWORD *)(v4 + 48) + 24 * result);
      if (*v9 == a1)
      {
        v10 = *((unsigned __int8 *)v9 + 17);
        v11 = *((unsigned __int8 *)v9 + 18);
        if ((v9[8] & 1) != 0)
        {
          if ((a3 & 1) == 0)
            goto LABEL_4;
        }
        else if ((a3 & 1) != 0 || *((_QWORD *)v9 + 1) != a2)
        {
          goto LABEL_4;
        }
        if (v10 == 2)
        {
          if (BYTE1(a3) != 2)
            goto LABEL_4;
        }
        else if (BYTE1(a3) == 2 || ((a3 >> 8) & 1) != (v10 & 1))
        {
          goto LABEL_4;
        }
        if (v11 == 2)
        {
          if (BYTE2(a3) == 2)
            return result;
        }
        else
        {
          v12 = (v11 & 1) == 0;
          if (BYTE2(a3) != 2 && ((v12 ^ ((a3 & 0x10000) >> 16)) & 1) != 0)
            return result;
        }
      }
LABEL_4:
      result = (result + 1) & v8;
    }
    while (((*(_QWORD *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v11 = ~v6;
    v12 = *(_QWORD *)(v4 + 48);
    do
    {
      v13 = (_QWORD *)(v12 + 24 * v7);
      if (*v13 == a1)
      {
        v14 = v13[1] == a2 && v13[2] == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
      v7 = (v7 + 1) & v11;
    }
    while (((*(_QWORD *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  _QWORD *v14;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a4 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v10 = *(_QWORD *)(v4 + 48);
    v11 = (_QWORD *)(v10 + 24 * i);
    if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v13 = ~v6;
      for (i = (i + 1) & v13; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
      {
        v14 = (_QWORD *)(v10 + 24 * i);
        if (*v14 == a1 && v14[1] == a2)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(double *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v20;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v20 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = *a1;
    v9 = *((_QWORD *)a1 + 1);
    do
    {
      v10 = v7 + 48 * v4;
      v11 = *(double *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      v12 = *(_QWORD *)(v10 + 32);
      v14 = *(unsigned __int16 *)(v10 + 40);
      v15 = *(_DWORD *)(v10 + 44);
      v16 = *(_QWORD *)v10 == *(_QWORD *)&v8 && *(_QWORD *)(v10 + 8) == v9;
      if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 || v11 != a1[2])
        goto LABEL_4;
      v17 = *((_QWORD *)a1 + 4);
      if (v12)
      {
        if (!v17)
          goto LABEL_4;
        v18 = v13 == *((_QWORD *)a1 + 3) && v12 == v17;
        if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          goto LABEL_4;
      }
      else if (v17)
      {
        goto LABEL_4;
      }
      if (v14 == *((unsigned __int16 *)a1 + 20) && v15 == *((_DWORD *)a1 + 11))
        return v4;
LABEL_4:
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v20 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  __int128 v34;
  __int128 v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v32;
            goto LABEL_36;
          }
          v31 = 1 << *(_BYTE *)(v5 + 32);
          if (v31 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v31;
          v3 = v32;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      v34 = *v23;
      v35 = v23[1];
      result = static Hasher._hash(seed:_:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15);
      *v16 = v34;
      v16[1] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_38;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v23 = v9[v8];
        if (!v23)
        {
          v24 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v23 = v9[v24];
          if (!v23)
          {
            while (1)
            {
              v8 = v24 + 1;
              if (__OFADD__(v24, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v23 = v9[v8];
              ++v24;
              if (v23)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v25 = 8 * v21;
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v25);
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v25);
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v17 == v29;
          if (v17 == v29)
            v17 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v31 == -1);
        v18 = __clz(__rbit64(~v31)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v26;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v27;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        result = v5 + 64;
        if (v8 >= v12)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v34 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v34[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v12)
            goto LABEL_29;
          v19 = v34[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v12)
                goto LABEL_29;
              v19 = v34[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      v23 = *v22;
      v24 = v22[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v14);
      *v15 = v23;
      v15[1] = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        if (v8 >= v13)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            result = swift_release();
            v3 = v30;
            goto LABEL_38;
          }
          v29 = 1 << *(_BYTE *)(v5 + 32);
          if (v29 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v29;
          v3 = v30;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v22 = v9[v8];
        if (!v22)
        {
          v23 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_31;
          v22 = v9[v23];
          if (!v22)
          {
            while (1)
            {
              v8 = v23 + 1;
              if (__OFADD__(v23, 1))
                break;
              if (v8 >= v13)
                goto LABEL_31;
              v22 = v9[v8];
              ++v23;
              if (v22)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v7 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v24;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v2;
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v14);
    if (!v25)
    {
      v26 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v37;
        if ((v39 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (!v25)
      {
        while (1)
        {
          v14 = v26 + 1;
          if (__OFADD__(v26, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v25 = *(_QWORD *)(v38 + 8 * v14);
          ++v26;
          if (v25)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_21:
    v27 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v5 + 56) + 56 * v22;
    v42 = *(_OWORD *)(v30 + 16);
    v40 = *(_OWORD *)v30;
    v41 = *(_OWORD *)(v30 + 32);
    v31 = *(_QWORD *)(v30 + 48);
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v34 = v17 == v33;
        if (v17 == v33)
          v17 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v35 == -1);
      v18 = __clz(__rbit64(~v35)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v29;
    v19[1] = v28;
    v20 = *(_QWORD *)(v7 + 56) + 56 * v18;
    *(_OWORD *)v20 = v40;
    *(_OWORD *)(v20 + 16) = v42;
    *(_OWORD *)(v20 + 32) = v41;
    *(_QWORD *)(v20 + 48) = v31;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1))
          goto LABEL_38;
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          v3 = v2;
          if ((v36 & 1) != 0)
          {
            v35 = 1 << *(_BYTE *)(v5 + 32);
            if (v35 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v9 = -1 << v35;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v25 = v9[v15];
        if (!v25)
        {
          v26 = v15 + 1;
          if (v15 + 1 >= v12)
            goto LABEL_31;
          v25 = v9[v26];
          if (!v25)
          {
            while (1)
            {
              v15 = v26 + 1;
              if (__OFADD__(v26, 1))
                break;
              if (v15 >= v12)
                goto LABEL_31;
              v25 = v9[v15];
              ++v26;
              if (v25)
                goto LABEL_20;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v27 = 16 * v23;
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v27);
      v30 = *v28;
      v29 = v28[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v7 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v33 = v18 == v32;
          if (v18 == v32)
            v18 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v34 == -1);
        v19 = __clz(__rbit64(~v34)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v20);
      *v21 = v30;
      v21[1] = v29;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + v20) = v37;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  __int128 v33[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
  v32 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_41;
        if (v8 >= v13)
        {
LABEL_32:
          if ((v32 & 1) == 0)
          {
            result = swift_release();
            v3 = v31;
            goto LABEL_39;
          }
          v30 = 1 << *(_BYTE *)(v5 + 32);
          if (v30 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v30;
          v3 = v31;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_32;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_32;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
      if ((v32 & 1) != 0)
        outlined init with take of BindableDataInternal(v22, (uint64_t)v33);
      else
        outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)v33);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = outlined init with take of BindableDataInternal(v33, *(_QWORD *)(v7 + 56) + 40 * v15);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_39:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v30 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v29 = 1 << *(_BYTE *)(v5 + 32);
          if (v29 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v29;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v3 = v33;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v33;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  __int128 v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
  v37 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v36 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        result = (uint64_t)v35;
        if (v8 >= v34)
        {
LABEL_31:
          if ((v37 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_38;
          }
          v33 = 1 << *(_BYTE *)(v5 + 32);
          if (v33 >= 64)
            bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v35 = -1 << v33;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v21 = v35[v8];
        if (!v21)
        {
          v22 = v8 + 1;
          if (v8 + 1 >= v34)
            goto LABEL_31;
          v21 = v35[v22];
          if (!v21)
          {
            while (1)
            {
              v8 = v22 + 1;
              if (__OFADD__(v22, 1))
                break;
              if (v8 >= v34)
                goto LABEL_31;
              v21 = v35[v8];
              ++v22;
              if (v21)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v5 + 56) + 80 * v19;
      v25 = *(_QWORD *)v24;
      v26 = *(_QWORD *)(v24 + 24);
      v27 = *(_DWORD *)(v24 + 32);
      v40 = *(_BYTE *)(v24 + 36);
      v39 = *(_QWORD *)(v24 + 40);
      v38 = *(_BYTE *)(v24 + 48);
      v28 = *(_QWORD *)(v24 + 56);
      v41 = *(_OWORD *)(v24 + 64);
      v42 = *(_OWORD *)(v24 + 8);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v15 == v30;
          if (v15 == v30)
            v15 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
      v17 = *(_QWORD *)(v7 + 56) + 80 * v16;
      *(_QWORD *)v17 = v25;
      *(_OWORD *)(v17 + 8) = v42;
      *(_QWORD *)(v17 + 24) = v26;
      *(_DWORD *)(v17 + 32) = v27;
      *(_BYTE *)(v17 + 36) = v40;
      *(_QWORD *)(v17 + 40) = v39;
      *(_BYTE *)(v17 + 48) = v38;
      *(_QWORD *)(v17 + 56) = v28;
      *(_OWORD *)(v17 + 64) = v41;
      ++*(_QWORD *)(v7 + 16);
      v5 = v36;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  char v35;
  uint64_t v36;
  char v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v8 = 0;
    v34 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_40;
        result = v5 + 64;
        if (v8 >= v33)
        {
LABEL_31:
          if ((a2 & 1) == 0)
          {
            result = swift_release();
            v3 = v32;
            goto LABEL_38;
          }
          v31 = 1 << *(_BYTE *)(v5 + 32);
          if (v31 >= 64)
            bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v34 = -1 << v31;
          v3 = v32;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v21 = v34[v8];
        if (!v21)
        {
          v22 = v8 + 1;
          if (v8 + 1 >= v33)
            goto LABEL_31;
          v21 = v34[v22];
          if (!v21)
          {
            while (1)
            {
              v8 = v22 + 1;
              if (__OFADD__(v22, 1))
                break;
              if (v8 >= v33)
                goto LABEL_31;
              v21 = v34[v8];
              ++v22;
              if (v21)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_20:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = *(_QWORD *)(v5 + 56) + 80 * v19;
      v39 = *(_QWORD *)v24;
      v25 = *(_QWORD *)(v24 + 24);
      v37 = *(_BYTE *)(v24 + 36);
      v38 = *(_DWORD *)(v24 + 32);
      v36 = *(_QWORD *)(v24 + 40);
      v35 = *(_BYTE *)(v24 + 48);
      v26 = *(_QWORD *)(v24 + 56);
      v40 = *(_OWORD *)(v24 + 64);
      v41 = *(_OWORD *)(v24 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v15 == v28;
          if (v15 == v28)
            v15 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
      v17 = *(_QWORD *)(v7 + 56) + 80 * v16;
      *(_QWORD *)v17 = v39;
      *(_OWORD *)(v17 + 8) = v41;
      *(_QWORD *)(v17 + 24) = v25;
      *(_DWORD *)(v17 + 32) = v38;
      *(_BYTE *)(v17 + 36) = v37;
      *(_QWORD *)(v17 + 40) = v36;
      *(_BYTE *)(v17 + 48) = v35;
      *(_QWORD *)(v17 + 56) = v26;
      *(_OWORD *)(v17 + 64) = v40;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34[8];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
  v33 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_41;
        if (v8 >= v13)
        {
LABEL_32:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_39;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_32;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_32;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(v5 + 56) + v22;
      if ((v33 & 1) != 0)
        outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v24, (uint64_t)v34);
      else
        outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(v24, (uint64_t)v34);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      result = outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v34, *(_QWORD *)(v7 + 56) + v16);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_39:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v33 & 1) == 0)
          {
            result = swift_release();
            v3 = v2;
            goto LABEL_36;
          }
          v32 = 1 << *(_BYTE *)(v5 + 32);
          if (v32 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v32;
          v3 = v2;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v20 = v9[v8];
        if (!v20)
        {
          v21 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v20 = v9[v21];
          if (!v20)
          {
            while (1)
            {
              v8 = v21 + 1;
              if (__OFADD__(v21, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v20 = v9[v8];
              ++v21;
              if (v20)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  __int128 v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        if (__OFADD__(v8++, 1))
          goto LABEL_38;
        if (v8 >= v13)
        {
LABEL_29:
          if ((v31 & 1) == 0)
          {
            result = swift_release();
            v3 = v30;
            goto LABEL_36;
          }
          v29 = 1 << *(_BYTE *)(v5 + 32);
          if (v29 >= 64)
            bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v9 = -1 << v29;
          v3 = v30;
          *(_QWORD *)(v5 + 16) = 0;
          break;
        }
        v19 = v9[v8];
        if (!v19)
        {
          v20 = v8 + 1;
          if (v8 + 1 >= v13)
            goto LABEL_29;
          v19 = v9[v20];
          if (!v19)
          {
            while (1)
            {
              v8 = v20 + 1;
              if (__OFADD__(v20, 1))
                break;
              if (v8 >= v13)
                goto LABEL_29;
              v19 = v9[v8];
              ++v20;
              if (v19)
                goto LABEL_19;
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v8;
        }
LABEL_19:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      result = static Hasher._hash(seed:_:)();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v7;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  _OWORD v26[2];
  uint64_t v27;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REEventBus.DispatcherHandle, Any>);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        if (__OFADD__(v13++, 1))
          goto LABEL_28;
        if (v13 >= v11)
        {
LABEL_21:
          swift_release();
          if ((a2 & 1) != 0)
          {
            v22 = 1 << *(_BYTE *)(v5 + 32);
            if (v22 >= 64)
              bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            else
              *v8 = -1 << v22;
            *(_QWORD *)(v5 + 16) = 0;
          }
          break;
        }
        v17 = v8[v13];
        if (!v17)
        {
          v18 = v13 + 1;
          if (v13 + 1 >= v11)
            goto LABEL_21;
          v17 = v8[v18];
          if (!v17)
          {
            while (1)
            {
              v13 = v18 + 1;
              if (__OFADD__(v18, 1))
                break;
              if (v13 >= v11)
                goto LABEL_21;
              v17 = v8[v13];
              ++v18;
              if (v17)
                goto LABEL_18;
            }
            __break(1u);
LABEL_28:
            __break(1u);
            return result;
          }
          ++v13;
        }
LABEL_18:
        v10 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_QWORD *)(v5 + 48) + 40 * v15;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v15);
      v23 = *(_OWORD *)v19;
      v24 = *(_OWORD *)(v19 + 16);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v21, v25);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v25);
        swift_bridgeObjectRetain();
      }
      v26[0] = v23;
      v26[1] = v24;
      v27 = v20;
      result = (uint64_t)specialized _NativeDictionary._unsafeInsertNew(key:value:)((Swift::UInt64 *)v26, v25, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  __int128 v48;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v13++, 1))
      goto LABEL_40;
    if (v13 >= v39)
      break;
    v23 = v40;
    v24 = v40[v13];
    if (!v24)
    {
      v25 = v13 + 1;
      if (v13 + 1 >= v39)
      {
LABEL_31:
        swift_release();
        v3 = v38;
        if ((v42 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = v40[v25];
      if (!v24)
      {
        while (1)
        {
          v13 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v13 >= v39)
            goto LABEL_31;
          v24 = v40[v13];
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v13;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(v5 + 56) + 80 * v21;
    v43 = *(_OWORD *)v29;
    v30 = *(_BYTE *)(v29 + 16);
    v31 = *(_QWORD *)(v29 + 24);
    v46 = *(_BYTE *)(v29 + 33);
    v47 = *(_BYTE *)(v29 + 32);
    v32 = *(_QWORD *)(v29 + 48);
    v45 = *(_QWORD *)(v29 + 40);
    v48 = *(_OWORD *)(v29 + 56);
    v44 = *(_BYTE *)(v29 + 72);
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v35 = v16 == v34;
        if (v16 == v34)
          v16 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v36 == -1);
      v17 = __clz(__rbit64(~v36)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v28;
    v18[1] = v27;
    v19 = *(_QWORD *)(v7 + 56) + 80 * v17;
    *(_OWORD *)v19 = v43;
    *(_BYTE *)(v19 + 16) = v30;
    *(_QWORD *)(v19 + 24) = v31;
    *(_BYTE *)(v19 + 32) = v47;
    *(_BYTE *)(v19 + 33) = v46;
    *(_QWORD *)(v19 + 40) = v45;
    *(_QWORD *)(v19 + 48) = v32;
    *(_OWORD *)(v19 + 56) = v48;
    *(_BYTE *)(v19 + 72) = v44;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero(v34, 8 * v33);
                else
                  *v34 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _BYTE v32[16];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, __RKEntityAction.ActionStateObservation>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v8 >= v13)
                  goto LABEL_34;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = *(_QWORD *)(v5 + 56) + 16 * v17;
      if ((a2 & 1) != 0)
        outlined init with take of __RKEntityAction.ActionStateObservation(v22, (uint64_t)v32);
      else
        outlined init with copy of __RKEntityAction.ActionStateObservation(v22, (uint64_t)v32);
      result = static Hasher._hash(seed:_:)();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      result = outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v32, *(_QWORD *)(v7 + 56) + 16 * v15);
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(_QWORD *)(v28 + 16));
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v22);
      result = static Hasher._hash(seed:_:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16) = v24;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::UInt16 v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt8 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  Swift::UInt32 *v41;
  Swift::UInt32 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Swift::UInt32 *v48;
  Swift::UInt32 v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int64_t v68;
  char v69;
  char v70;
  Swift::UInt16 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::UInt v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  v66 = a2;
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
    v59 = v61;
LABEL_59:
    *v59 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v63 = (_QWORD *)(v4 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v62 = (unint64_t)(v7 + 63) >> 6;
  v65 = v5 + 64;
  result = swift_retain();
  v11 = 0;
  v74 = v6;
  v64 = v4;
  while (1)
  {
    if (v9)
    {
      v67 = (v9 - 1) & v9;
      v68 = v11;
      v16 = __clz(__rbit64(v9)) | (v11 << 6);
      goto LABEL_22;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v17 >= v62)
    {
      swift_release();
      v59 = v61;
      if ((v66 & 1) != 0)
      {
LABEL_54:
        v60 = 1 << *(_BYTE *)(v4 + 32);
        if (v60 >= 64)
          bzero(v63, ((unint64_t)(v60 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v63 = -1 << v60;
        *(_QWORD *)(v4 + 16) = 0;
      }
LABEL_58:
      result = swift_release();
      goto LABEL_59;
    }
    v18 = v63[v17];
    v19 = v11 + 1;
    if (!v18)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v62)
        goto LABEL_51;
      v18 = v63[v19];
      if (!v18)
        break;
    }
LABEL_21:
    v67 = (v18 - 1) & v18;
    v68 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_22:
    v21 = *(_QWORD *)(v4 + 56);
    v22 = *(_QWORD *)(v4 + 48) + 120 * v16;
    v23 = *(_WORD *)v22;
    v75 = *(_QWORD *)(v22 + 8);
    v24 = *(unsigned __int8 *)(v22 + 16);
    v70 = *(_BYTE *)(v22 + 17);
    v76 = *(unsigned __int8 *)(v22 + 18);
    v77 = *(_QWORD *)(v22 + 24);
    v25 = *(_QWORD *)(v22 + 40);
    v78 = *(_QWORD *)(v22 + 32);
    v26 = *(_QWORD *)(v22 + 56);
    v79 = *(_QWORD *)(v22 + 48);
    v80 = *(void **)(v22 + 64);
    v27 = *(_QWORD *)(v22 + 80);
    v81 = *(_QWORD *)(v22 + 72);
    v29 = *(_QWORD *)(v22 + 88);
    v28 = *(_QWORD *)(v22 + 96);
    v31 = *(_QWORD *)(v22 + 104);
    v30 = *(void **)(v22 + 112);
    v32 = *(_QWORD *)(v21 + 8 * v16);
    if ((v66 & 1) == 0)
    {
      outlined copy of __MaterialResource.CoreMaterialFunction?(v77, v78, v25, v79, v26, v80);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v81, v27, v29, v28, v31, v30);
      swift_retain();
    }
    v73 = v32;
    Hasher.init(_seed:)();
    v71 = v23;
    Hasher._combine(_:)(v23);
    v69 = v24;
    if (v24)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v75);
    }
    v33 = v29;
    v34 = v25;
    v35 = v28;
    v36 = v27;
    v72 = v30;
    if (v76 == 2)
    {
      v37 = 0;
    }
    else
    {
      v37 = v76 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v37);
    if (v25)
    {
      v38 = v35;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v77);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v39 = (void *)REAssetHandleCopyAssetIdentifierString();
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
      _CFObject.hash(into:)();

      Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
      v40 = *(_QWORD *)(v26 + 16);
      if (v40)
      {
        v41 = (Swift::UInt32 *)(v26 + 32);
        do
        {
          v42 = *v41++;
          Hasher._combine(_:)(v42);
          --v40;
        }
        while (v40);
      }
      v43 = v80;
      NSObject.hash(into:)();

      v35 = v38;
      v36 = v27;
      if (!v33)
      {
LABEL_40:
        Hasher._combine(_:)(0);
        v50 = v72;
        goto LABEL_41;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v33)
        goto LABEL_40;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v81);
    swift_bridgeObjectRetain();
    v44 = v36;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v45 = v35;
    v46 = (void *)REAssetHandleCopyAssetIdentifierString();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    _CFObject.hash(into:)();

    Hasher._combine(_:)(*(_QWORD *)(v31 + 16));
    v47 = *(_QWORD *)(v31 + 16);
    if (v47)
    {
      v48 = (Swift::UInt32 *)(v31 + 32);
      do
      {
        v49 = *v48++;
        Hasher._combine(_:)(v49);
        --v47;
      }
      while (v47);
    }
    v50 = v72;
    v51 = v72;
    NSObject.hash(into:)();

    v35 = v45;
    v36 = v44;
LABEL_41:
    v6 = v74;
    result = Hasher._finalize()();
    v52 = -1 << *(_BYTE *)(v74 + 32);
    v53 = result & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~*(_QWORD *)(v65 + 8 * (v53 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v53) & ~*(_QWORD *)(v65 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
      v13 = v73;
      v14 = v71;
    }
    else
    {
      v55 = 0;
      v56 = (unint64_t)(63 - v52) >> 6;
      v13 = v73;
      v14 = v71;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_60;
        }
        v57 = v54 == v56;
        if (v54 == v56)
          v54 = 0;
        v55 |= v57;
        v58 = *(_QWORD *)(v65 + 8 * v54);
      }
      while (v58 == -1);
      v12 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(_QWORD *)(v65 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v15 = *(_QWORD *)(v74 + 48) + 120 * v12;
    *(_WORD *)v15 = v14;
    *(_QWORD *)(v15 + 8) = v75;
    *(_BYTE *)(v15 + 16) = v69;
    *(_BYTE *)(v15 + 17) = v70;
    *(_BYTE *)(v15 + 18) = v76;
    *(_QWORD *)(v15 + 24) = v77;
    *(_QWORD *)(v15 + 32) = v78;
    *(_QWORD *)(v15 + 40) = v34;
    *(_QWORD *)(v15 + 48) = v79;
    *(_QWORD *)(v15 + 56) = v26;
    *(_QWORD *)(v15 + 64) = v80;
    *(_QWORD *)(v15 + 72) = v81;
    *(_QWORD *)(v15 + 80) = v36;
    *(_QWORD *)(v15 + 88) = v33;
    *(_QWORD *)(v15 + 96) = v35;
    *(_QWORD *)(v15 + 104) = v31;
    *(_QWORD *)(v15 + 112) = v50;
    *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v12) = v13;
    ++*(_QWORD *)(v74 + 16);
    v4 = v64;
    v9 = v67;
    v11 = v68;
  }
  v20 = v11 + 3;
  if (v11 + 3 >= v62)
  {
LABEL_51:
    swift_release();
    v59 = v61;
    v6 = v74;
    if ((v66 & 1) != 0)
      goto LABEL_54;
    goto LABEL_58;
  }
  v18 = v63[v20];
  if (v18)
  {
    v19 = v11 + 3;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v62)
      goto LABEL_51;
    v18 = v63[v19];
    ++v20;
    if (v18)
      goto LABEL_21;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::UInt16 v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt8 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  Swift::UInt32 *v41;
  Swift::UInt32 v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  Swift::UInt32 *v48;
  Swift::UInt32 v49;
  void *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  int64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  int64_t v68;
  char v69;
  char v70;
  Swift::UInt16 v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  Swift::UInt v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;

  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  v66 = a2;
  v5 = static _DictionaryStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
    v59 = v61;
LABEL_59:
    *v59 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v63 = (_QWORD *)(v4 + 64);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v4 + 64);
  v62 = (unint64_t)(v7 + 63) >> 6;
  v65 = v5 + 64;
  result = swift_retain();
  v11 = 0;
  v74 = v6;
  v64 = v4;
  while (1)
  {
    if (v9)
    {
      v67 = (v9 - 1) & v9;
      v68 = v11;
      v16 = __clz(__rbit64(v9)) | (v11 << 6);
      goto LABEL_22;
    }
    v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if (v17 >= v62)
    {
      swift_release();
      v59 = v61;
      if ((v66 & 1) != 0)
      {
LABEL_54:
        v60 = 1 << *(_BYTE *)(v4 + 32);
        if (v60 >= 64)
          bzero(v63, ((unint64_t)(v60 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v63 = -1 << v60;
        *(_QWORD *)(v4 + 16) = 0;
      }
LABEL_58:
      result = swift_release();
      goto LABEL_59;
    }
    v18 = v63[v17];
    v19 = v11 + 1;
    if (!v18)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v62)
        goto LABEL_51;
      v18 = v63[v19];
      if (!v18)
        break;
    }
LABEL_21:
    v67 = (v18 - 1) & v18;
    v68 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_22:
    v21 = *(_QWORD *)(v4 + 56);
    v22 = *(_QWORD *)(v4 + 48) + 120 * v16;
    v23 = *(_WORD *)v22;
    v75 = *(_QWORD *)(v22 + 8);
    v24 = *(unsigned __int8 *)(v22 + 16);
    v70 = *(_BYTE *)(v22 + 17);
    v76 = *(unsigned __int8 *)(v22 + 18);
    v77 = *(_QWORD *)(v22 + 24);
    v25 = *(_QWORD *)(v22 + 40);
    v78 = *(_QWORD *)(v22 + 32);
    v26 = *(_QWORD *)(v22 + 56);
    v79 = *(_QWORD *)(v22 + 48);
    v80 = *(void **)(v22 + 64);
    v27 = *(_QWORD *)(v22 + 80);
    v81 = *(_QWORD *)(v22 + 72);
    v29 = *(_QWORD *)(v22 + 88);
    v28 = *(_QWORD *)(v22 + 96);
    v31 = *(_QWORD *)(v22 + 104);
    v30 = *(void **)(v22 + 112);
    v32 = *(_QWORD *)(v21 + 8 * v16);
    if ((v66 & 1) == 0)
    {
      outlined copy of __MaterialResource.CoreMaterialFunction?(v77, v78, v25, v79, v26, v80);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v81, v27, v29, v28, v31, v30);
      swift_retain();
    }
    v73 = v32;
    Hasher.init(_seed:)();
    v71 = v23;
    Hasher._combine(_:)(v23);
    v69 = v24;
    if (v24)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v75);
    }
    v33 = v29;
    v34 = v25;
    v35 = v28;
    v36 = v27;
    v72 = v30;
    if (v76 == 2)
    {
      v37 = 0;
    }
    else
    {
      v37 = v76 & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v37);
    if (v25)
    {
      v38 = v35;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v77);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v39 = (void *)REAssetHandleCopyAssetIdentifierString();
      type metadata accessor for CFStringRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
      _CFObject.hash(into:)();

      Hasher._combine(_:)(*(_QWORD *)(v26 + 16));
      v40 = *(_QWORD *)(v26 + 16);
      if (v40)
      {
        v41 = (Swift::UInt32 *)(v26 + 32);
        do
        {
          v42 = *v41++;
          Hasher._combine(_:)(v42);
          --v40;
        }
        while (v40);
      }
      v43 = v80;
      NSObject.hash(into:)();

      v35 = v38;
      v36 = v27;
      if (!v33)
      {
LABEL_40:
        Hasher._combine(_:)(0);
        v50 = v72;
        goto LABEL_41;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      if (!v33)
        goto LABEL_40;
    }
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v81);
    swift_bridgeObjectRetain();
    v44 = v36;
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v45 = v35;
    v46 = (void *)REAssetHandleCopyAssetIdentifierString();
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    _CFObject.hash(into:)();

    Hasher._combine(_:)(*(_QWORD *)(v31 + 16));
    v47 = *(_QWORD *)(v31 + 16);
    if (v47)
    {
      v48 = (Swift::UInt32 *)(v31 + 32);
      do
      {
        v49 = *v48++;
        Hasher._combine(_:)(v49);
        --v47;
      }
      while (v47);
    }
    v50 = v72;
    v51 = v72;
    NSObject.hash(into:)();

    v35 = v45;
    v36 = v44;
LABEL_41:
    v6 = v74;
    result = Hasher._finalize()();
    v52 = -1 << *(_BYTE *)(v74 + 32);
    v53 = result & ~v52;
    v54 = v53 >> 6;
    if (((-1 << v53) & ~*(_QWORD *)(v65 + 8 * (v53 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v53) & ~*(_QWORD *)(v65 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
      v13 = v73;
      v14 = v71;
    }
    else
    {
      v55 = 0;
      v56 = (unint64_t)(63 - v52) >> 6;
      v13 = v73;
      v14 = v71;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_60;
        }
        v57 = v54 == v56;
        if (v54 == v56)
          v54 = 0;
        v55 |= v57;
        v58 = *(_QWORD *)(v65 + 8 * v54);
      }
      while (v58 == -1);
      v12 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(_QWORD *)(v65 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v15 = *(_QWORD *)(v74 + 48) + 120 * v12;
    *(_WORD *)v15 = v14;
    *(_QWORD *)(v15 + 8) = v75;
    *(_BYTE *)(v15 + 16) = v69;
    *(_BYTE *)(v15 + 17) = v70;
    *(_BYTE *)(v15 + 18) = v76;
    *(_QWORD *)(v15 + 24) = v77;
    *(_QWORD *)(v15 + 32) = v78;
    *(_QWORD *)(v15 + 40) = v34;
    *(_QWORD *)(v15 + 48) = v79;
    *(_QWORD *)(v15 + 56) = v26;
    *(_QWORD *)(v15 + 64) = v80;
    *(_QWORD *)(v15 + 72) = v81;
    *(_QWORD *)(v15 + 80) = v36;
    *(_QWORD *)(v15 + 88) = v33;
    *(_QWORD *)(v15 + 96) = v35;
    *(_QWORD *)(v15 + 104) = v31;
    *(_QWORD *)(v15 + 112) = v50;
    *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v12) = v13;
    ++*(_QWORD *)(v74 + 16);
    v4 = v64;
    v9 = v67;
    v11 = v68;
  }
  v20 = v11 + 3;
  if (v11 + 3 >= v62)
  {
LABEL_51:
    swift_release();
    v59 = v61;
    v6 = v74;
    if ((v66 & 1) != 0)
      goto LABEL_54;
    goto LABEL_58;
  }
  v18 = v63[v20];
  if (v18)
  {
    v19 = v11 + 3;
    goto LABEL_21;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v62)
      goto LABEL_51;
    v18 = v63[v19];
    ++v20;
    if (v18)
      goto LABEL_21;
  }
LABEL_61:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt64, AudioPlaybackController.Internal>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v31 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v31)
          goto LABEL_33;
        v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v31)
            goto LABEL_33;
          v21 = v32[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v31)
                  goto LABEL_33;
                v21 = v32[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = 8 * v19;
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v27);
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v27);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(*(_QWORD *)(v28 + 16));
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + v17) = v29;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v31 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      *(_OWORD *)(*(_QWORD *)(v7 + 56) + 16 * v15) = v31;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::UInt *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v13 << 6);
      }
      else
      {
        v21 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v21 >= v34)
          goto LABEL_33;
        v22 = v35[v21];
        ++v13;
        if (!v22)
        {
          v13 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_33;
          v22 = v35[v13];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v13 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v22 = v35[v13];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v13 = v23;
          }
        }
LABEL_30:
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }
      v28 = (Swift::UInt *)(*(_QWORD *)(v5 + 48) + 24 * v20);
      v30 = *v28;
      v29 = v28[1];
      v31 = v28[2];
      v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v30);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (Swift::UInt *)(*(_QWORD *)(v7 + 48) + 24 * v17);
      *v18 = v30;
      v18[1] = v29;
      v18[2] = v31;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentType, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(_QWORD *)(v7 + 48) + 4 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  __int128 v38[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v35)
        goto LABEL_34;
      v20 = *(_QWORD *)(v36 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v35)
              goto LABEL_34;
            v20 = *(_QWORD *)(v36 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v37 & 1) != 0)
    {
      outlined init with take of BindableDataInternal(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of __REAssetService((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    result = outlined init with take of BindableDataInternal(v38, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v19 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t Trace;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  uint64_t v37;

  v3 = v2;
  Trace = type metadata accessor for LoadTrace(0);
  v37 = *(_QWORD *)(Trace - 8);
  MEMORY[0x24BDAC7A8](Trace);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v10 = result;
  if (*(_QWORD *)(v8 + 16))
  {
    v34 = v3;
    v11 = 0;
    v12 = *(_QWORD *)(v8 + 64);
    v36 = (_QWORD *)(v8 + 64);
    v13 = 1 << *(_BYTE *)(v8 + 32);
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v15 = v14 & v12;
    v35 = (unint64_t)(v13 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v15)
      {
        v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v19 = v18 | (v11 << 6);
      }
      else
      {
        v20 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = (uint64_t)v36;
        if (v20 >= v35)
          goto LABEL_34;
        v21 = v36[v20];
        ++v11;
        if (!v21)
        {
          v11 = v20 + 1;
          if (v20 + 1 >= v35)
            goto LABEL_34;
          v21 = v36[v11];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v35)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              v33 = 1 << *(_BYTE *)(v8 + 32);
              if (v33 >= 64)
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v36 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v8 + 16) = 0;
              break;
            }
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v11 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v11 >= v35)
                  goto LABEL_34;
                v21 = v36[v11];
                ++v22;
                if (v21)
                  goto LABEL_21;
              }
            }
            v11 = v22;
          }
        }
LABEL_21:
        v15 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v11 << 6);
      }
      v23 = *(unsigned int *)(*(_QWORD *)(v8 + 48) + 4 * v19);
      v24 = *(_QWORD *)(v37 + 72);
      v25 = *(_QWORD *)(v8 + 56) + v24 * v19;
      if ((a2 & 1) != 0)
        outlined init with take of LoadTrace(v25, (uint64_t)v7);
      else
        outlined init with copy of __RKEntityActionSpecification(v25, (uint64_t)v7, type metadata accessor for LoadTrace);
      result = MEMORY[0x220769EF0](*(_QWORD *)(v10 + 40), v23, 4);
      v26 = -1 << *(_BYTE *)(v10 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v16 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(_QWORD *)(v10 + 48) + 4 * v17) = v23;
      result = outlined init with take of LoadTrace((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24 * v17);
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v6 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = 16 * v22;
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v30);
      v33 = *v31;
      v32 = v31[1];
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of Data._Representation(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v19) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationCollectionCache>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.Configuration>);
  v42 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  __int128 v35;
  __int128 v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v8 = 0;
    v9 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v10;
    v32 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v8 << 6);
      }
      else
      {
        v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          v8 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v9[v8];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_38;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v13);
              else
                *v9 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                v8 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v20 = v9[v8];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v8 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v18);
      v35 = *v23;
      v36 = v23[1];
      result = static Hasher._hash(seed:_:)();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v22;
      v16 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v15);
      *v16 = v35;
      v16[1] = v36;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = a2;
    v8 = 0;
    v39 = (uint64_t *)(v5 + 64);
    v40 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v38 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v17 >= v38)
          goto LABEL_31;
        v18 = v39[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v38)
            goto LABEL_31;
          v18 = v39[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_38;
              }
              if (v35 >= 64)
                bzero(v39, 8 * v38);
              else
                *v39 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v39[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v38)
                  goto LABEL_31;
                v18 = v39[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(v5 + 56) + 80 * v16;
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v44 = *(_BYTE *)(v20 + 64);
      v42 = *(_QWORD *)(v20 + 48);
      v43 = *(_QWORD *)(v20 + 56);
      v22 = *(_QWORD *)(v20 + 32);
      v41 = *(_QWORD *)(v20 + 40);
      v23 = *(_QWORD *)(v20 + 16);
      v24 = *(_QWORD *)(v20 + 24);
      v25 = *(_QWORD *)v20;
      v26 = *(_QWORD *)(v20 + 8);
      result = static Hasher._hash(seed:_:)();
      v27 = -1 << *(_BYTE *)(v7 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v12 + 8 * v29);
        }
        while (v33 == -1);
        v13 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v13) = v21;
      v14 = *(_QWORD *)(v7 + 56) + 80 * v13;
      *(_QWORD *)v14 = v25;
      *(_QWORD *)(v14 + 8) = v26;
      *(_QWORD *)(v14 + 16) = v23;
      *(_QWORD *)(v14 + 24) = v24;
      *(_QWORD *)(v14 + 32) = v22;
      *(_QWORD *)(v14 + 40) = v41;
      *(_QWORD *)(v14 + 48) = v42;
      *(_QWORD *)(v14 + 56) = v43;
      *(_BYTE *)(v14 + 64) = v44;
      ++*(_QWORD *)(v7 + 16);
      v5 = v40;
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  __int128 *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  v39 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v36 = v2;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v37)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v38 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v37)
        goto LABEL_34;
      v20 = *(_QWORD *)(v38 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v37)
        {
LABEL_34:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v20 = *(_QWORD *)(v38 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_43;
            if (v13 >= v37)
              goto LABEL_34;
            v20 = *(_QWORD *)(v38 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_21;
          }
        }
        v13 = v21;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    v22 = *(_QWORD *)(v5 + 48) + 24 * v17;
    v24 = *(_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 8);
    v25 = *(_BYTE *)(v22 + 16);
    v26 = *(_BYTE *)(v22 + 17);
    v27 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v39 & 1) != 0)
    {
      outlined init with take of BindableDataInternal(v27, (uint64_t)v40);
    }
    else
    {
      outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)v40);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v7 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
    *(_QWORD *)v15 = v24;
    *(_QWORD *)(v15 + 8) = v23;
    *(_BYTE *)(v15 + 16) = v25;
    *(_BYTE *)(v15 + 17) = v26;
    result = outlined init with take of BindableDataInternal(v40, *(_QWORD *)(v7 + 56) + 40 * v14);
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v19 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (uint64_t *)(v5 + 64);
    v39 = v5;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v20 >= v37)
          goto LABEL_33;
        v21 = v38[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v37)
            goto LABEL_33;
          v21 = v38[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64)
                bzero(v38, 8 * v37);
              else
                *v38 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v38[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v21 = v38[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 24 * v19;
      v29 = *(_QWORD *)v28;
      v30 = *(_QWORD *)(v28 + 8);
      v31 = *(_BYTE *)(v28 + 16);
      v32 = *(_BYTE *)(v28 + 17);
      v33 = *(_BYTE *)(v28 + 18);
      v41 = *(_BYTE *)(v28 + 20);
      v42 = *(_BYTE *)(v28 + 19);
      if ((v40 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 24 * v16;
      *(_QWORD *)v17 = v29;
      *(_QWORD *)(v17 + 8) = v30;
      *(_BYTE *)(v17 + 16) = v31;
      *(_BYTE *)(v17 + 17) = v32;
      *(_BYTE *)(v17 + 18) = v33;
      *(_BYTE *)(v17 + 19) = v42;
      *(_BYTE *)(v17 + 20) = v41;
      ++*(_QWORD *)(v7 + 16);
      v5 = v39;
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v34 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v9;
    v32 = v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v33)
          goto LABEL_33;
        v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v33)
            goto LABEL_33;
          v21 = v34[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v32 >= 64)
                  bzero(v34, 8 * v33);
                else
                  *v34 = v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v8 >= v33)
                  goto LABEL_33;
                v21 = v34[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain();
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_33;
        v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_33;
          v21 = v33[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v32)
                  goto LABEL_33;
                v21 = v33[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v19);
      v29 = *v28;
      v30 = v28[1];
      if ((v34 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v16);
      *v17 = v29;
      v17[1] = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD *v31;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v30 = a2;
    v8 = 0;
    v31 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v8 << 6);
      }
      else
      {
        v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v17 >= v12)
          goto LABEL_31;
        v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          v8 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_31;
          v18 = v31[v8];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                v8 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_40;
                if (v8 >= v12)
                  goto LABEL_31;
                v18 = v31[v8];
                ++v19;
                if (v18)
                  goto LABEL_21;
              }
            }
            v8 = v19;
          }
        }
LABEL_21:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      v21 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      *(_DWORD *)(*(_QWORD *)(v7 + 56) + 4 * v14) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, UInt64>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSetCache>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t i;
  char v40;
  __int128 v41;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSet>);
  v40 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v40 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v37)
                  goto LABEL_33;
                v23 = v38[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = *(_QWORD *)(v5 + 56) + 40 * v21;
      v33 = *(_QWORD *)v32;
      v34 = *(_QWORD *)(v32 + 8);
      v35 = *(_QWORD *)(v32 + 16);
      v41 = *(_OWORD *)(v32 + 24);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = *(_QWORD *)(v7 + 56) + 40 * v17;
      *(_QWORD *)v19 = v33;
      *(_QWORD *)(v19 + 8) = v34;
      *(_QWORD *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v41;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::UInt64 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt16 v38;
  Swift::UInt32 v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  char v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  __int16 v54;
  __int128 v55;
  __int128 v56;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  v49 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v47 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v45 = v2;
  v46 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v10)
    {
      v22 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v50 = v13;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v46)
      break;
    v25 = v47;
    v26 = v47[v24];
    v27 = v13 + 1;
    if (!v26)
    {
      v27 = v13 + 2;
      if (v13 + 2 >= v46)
        goto LABEL_36;
      v26 = v47[v27];
      if (!v26)
      {
        v28 = v13 + 3;
        if (v13 + 3 >= v46)
        {
LABEL_36:
          swift_release();
          v3 = v45;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v47[v28];
        if (!v26)
        {
          while (1)
          {
            v27 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v27 >= v46)
              goto LABEL_36;
            v26 = v47[v27];
            ++v28;
            if (v26)
              goto LABEL_33;
          }
        }
        v27 = v13 + 3;
      }
    }
LABEL_33:
    v10 = (v26 - 1) & v26;
    v50 = v27;
    v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_34:
    v33 = *(_QWORD *)(v5 + 56);
    v34 = *(_QWORD *)(v5 + 48) + 48 * v23;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v37 = *(_QWORD *)(v34 + 32);
    v38 = *(_WORD *)(v34 + 40);
    v39 = *(_DWORD *)(v34 + 44);
    v40 = (uint64_t *)(v33 + (v23 << 6));
    v41 = v40[1];
    v51 = *v40;
    v42 = v40[2];
    v43 = v40[4];
    v52 = v40[3];
    v53 = *((_DWORD *)v40 + 11);
    v54 = *((_WORD *)v40 + 20);
    v55 = *((_OWORD *)v40 + 3);
    v56 = *(_OWORD *)(v34 + 16);
    if ((v49 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    if ((v56 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v56;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v38);
    Hasher._combine(_:)(v39);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v56;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v15) >> 6;
      v19 = v56;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v17 == v30;
        if (v17 == v30)
          v17 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v20 = *(_QWORD *)(v7 + 48) + 48 * v18;
    *(_QWORD *)v20 = v35;
    *(_QWORD *)(v20 + 8) = v36;
    *(_OWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 32) = v37;
    *(_WORD *)(v20 + 40) = v38;
    *(_DWORD *)(v20 + 44) = v39;
    v21 = *(_QWORD *)(v7 + 56) + (v18 << 6);
    v13 = v50;
    *(_QWORD *)v21 = v51;
    *(_QWORD *)(v21 + 8) = v41;
    *(_QWORD *)(v21 + 16) = v42;
    *(_QWORD *)(v21 + 24) = v52;
    *(_QWORD *)(v21 + 32) = v43;
    *(_WORD *)(v21 + 40) = v54;
    *(_DWORD *)(v21 + 44) = v53;
    *(_OWORD *)(v21 + 48) = v55;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v45;
  v25 = v47;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v44 = 1 << *(_BYTE *)(v5 + 32);
  if (v44 >= 64)
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v44;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v35[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v23 = v35[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v21);
      v39 = v32[1];
      v37 = *v32;
      v38 = v32[2];
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v17);
      *v19 = v37;
      v19[1] = v39;
      v19[2] = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v34 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (_QWORD *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v21 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v22 = v21 | (v9 << 6);
      }
      else
      {
        if (__OFADD__(v9++, 1))
          goto LABEL_40;
        if (v9 >= v14)
        {
LABEL_31:
          if ((v34 & 1) == 0)
          {
            result = swift_release();
            v4 = v3;
            goto LABEL_38;
          }
          v33 = 1 << *(_BYTE *)(v6 + 32);
          if (v33 >= 64)
            bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
          else
            *v10 = -1 << v33;
          v4 = v3;
          *(_QWORD *)(v6 + 16) = 0;
          break;
        }
        v24 = v10[v9];
        if (!v24)
        {
          v25 = v9 + 1;
          if (v9 + 1 >= v14)
            goto LABEL_31;
          v24 = v10[v25];
          if (!v24)
          {
            while (1)
            {
              v9 = v25 + 1;
              if (__OFADD__(v25, 1))
                break;
              if (v9 >= v14)
                goto LABEL_31;
              v24 = v10[v9];
              ++v25;
              if (v24)
                goto LABEL_20;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          ++v9;
        }
LABEL_20:
        v13 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v9 << 6);
      }
      v26 = 8 * v22;
      v27 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v26);
      v28 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v26);
      if ((v34 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v31 = v18 == v30;
          if (v18 == v30)
            v18 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v32 == -1);
        v19 = __clz(__rbit64(~v32)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v27;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v28;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v33 = a2;
    v9 = 0;
    v34 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v19 >= v13)
          goto LABEL_31;
        v20 = v34[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v13)
            goto LABEL_31;
          v20 = v34[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_38;
              }
              v32 = 1 << *(_BYTE *)(v6 + 32);
              if (v32 >= 64)
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v34 = -1 << v32;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v20 = v34[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_40;
                if (v9 >= v13)
                  goto LABEL_31;
                v20 = v34[v9];
                ++v21;
                if (v20)
                  goto LABEL_21;
              }
            }
            v9 = v21;
          }
        }
LABEL_21:
        v12 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = 8 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v22);
      v24 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v22);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = 8 * v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v16) = v23;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v6 + 64);
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v34 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero((void *)(v6 + 64), 8 * v34);
                else
                  *v10 = v32;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_41;
                if (v9 >= v34)
                  goto LABEL_33;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v9 = v24;
          }
        }
LABEL_30:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v29);
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v29);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          v4 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v36)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v35;
  v23 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v6 + 64);
    v10 = 1 << *(_BYTE *)(v6 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v6 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v6 + 64;
        if (v21 >= v32)
          goto LABEL_33;
        v22 = v33[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v32)
            goto LABEL_33;
          v22 = v33[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v4 = v3;
                goto LABEL_40;
              }
              v31 = 1 << *(_BYTE *)(v6 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v4 = v3;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v22 = v33[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_42;
                if (v9 >= v32)
                  goto LABEL_33;
                v22 = v33[v9];
                ++v23;
                if (v22)
                  goto LABEL_30;
              }
            }
            v9 = v23;
          }
        }
LABEL_30:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v28);
      v30 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v28);
      if ((a2 & 1) == 0)
        swift_retain();
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v36 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v6 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_33;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v35)
              goto LABEL_33;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v6 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v6 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void (*v25)(unint64_t, _BYTE *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(_BYTE *, unint64_t, uint64_t);
  unint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v55 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v47[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v47[-v9];
  v11 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_41;
  v13 = 1 << *(_BYTE *)(v11 + 32);
  v14 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v49 = v2;
  v50 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11;
  v18 = v12 + 64;
  v54 = v17;
  result = swift_retain();
  v20 = 0;
  v48 = a2;
  v21 = 16;
  if ((a2 & 1) != 0)
    v21 = 32;
  v52 = v21;
  v53 = v7;
  while (1)
  {
    if (v16)
    {
      v26 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v27 = v26 | (v20 << 6);
      goto LABEL_24;
    }
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v50)
      break;
    v29 = v51;
    v30 = v51[v28];
    ++v20;
    if (!v30)
    {
      v20 = v28 + 1;
      if (v28 + 1 >= v50)
        goto LABEL_34;
      v30 = v51[v20];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v50)
        {
LABEL_34:
          v45 = v54;
          swift_release();
          v3 = v49;
          if ((v48 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v30 = v51[v31];
        if (!v30)
        {
          while (1)
          {
            v20 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_43;
            if (v20 >= v50)
              goto LABEL_34;
            v30 = v51[v20];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v20 = v31;
      }
    }
LABEL_23:
    v16 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v20 << 6);
LABEL_24:
    v32 = v54;
    v33 = *(_QWORD *)(v55 + 72);
    v34 = v33 * v27;
    v35 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v52);
    v35(v10, *(_QWORD *)(v54 + 48) + v33 * v27, v5);
    v36 = *(_QWORD *)(v32 + 56) + v34;
    v37 = v53;
    v35(v53, v36, v5);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v38 = -1 << *(_BYTE *)(v12 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v18 + 8 * v40);
      }
      while (v44 == -1);
      v22 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = v33 * v22;
    v24 = *(_QWORD *)(v12 + 48) + v33 * v22;
    v25 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32);
    v25(v24, v10, v5);
    result = ((uint64_t (*)(unint64_t, _BYTE *, uint64_t))v25)(*(_QWORD *)(v12 + 56) + v23, v37, v5);
    ++*(_QWORD *)(v12 + 16);
  }
  v45 = v54;
  swift_release();
  v3 = v49;
  v29 = v51;
  if ((v48 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v46 = 1 << *(_BYTE *)(v45 + 32);
  if (v46 >= 64)
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v46;
  *(_QWORD *)(v45 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v3 = v2;
  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
  result = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v39 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v38 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    v37 = a2;
    v18 = 16;
    if ((a2 & 1) != 0)
      v18 = 32;
    v40 = v18;
    while (1)
    {
      if (v16)
      {
        v20 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v21 = v20 | (v12 << 6);
      }
      else
      {
        v22 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v22 >= v38)
          goto LABEL_33;
        v23 = v39[v22];
        ++v12;
        if (!v23)
        {
          v12 = v22 + 1;
          if (v22 + 1 >= v38)
            goto LABEL_33;
          v23 = v39[v12];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_33:
              if ((v37 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_40;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v39, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v39 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                v12 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v12 >= v38)
                  goto LABEL_33;
                v23 = v39[v12];
                ++v24;
                if (v23)
                  goto LABEL_23;
              }
            }
            v12 = v24;
          }
        }
LABEL_23:
        v16 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v12 << 6);
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21);
      v26 = *(_QWORD *)(v6 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + v40))(v8, *(_QWORD *)(v9 + 56) + v26 * v21, v5);
      result = static Hasher._hash(seed:_:)();
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v19) = v25;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 56) + v26 * v19, v8, v5);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  int v42;

  v3 = v2;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
  v42 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_41;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v40 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v38 = v2;
  v39 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = v40;
    v24 = v40[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_34;
      v24 = v40[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          v3 = v38;
          if ((v42 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v24 = v40[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_43;
            if (v18 >= v39)
              goto LABEL_34;
            v24 = v40[v18];
            ++v25;
            if (v24)
              goto LABEL_21;
          }
        }
        v18 = v25;
      }
    }
LABEL_21:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    v26 = *(_QWORD *)(v6 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v26 * v19, v8, v5);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v11;
  return result;
}

unint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v24 = v3;
    v25 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v10 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_22;
        v16 = v25[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_22;
          v16 = v25[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_22:
              swift_release();
              v3 = v24;
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 > 63)
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v25 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v25[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_29;
                if (v12 >= v10)
                  goto LABEL_22;
                v16 = v25[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      v18 = (unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 4 * v14);
      v19 = *v18;
      v20 = *((unsigned __int8 *)v18 + 2);
      v21 = *((unsigned __int8 *)v18 + 3);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
        swift_retain();
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((v20 << 16) | (v21 << 24) | v19, v22, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  Swift::UInt v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
  v6 = a2;
  v28 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v27 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v25 = v2;
    v26 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v26)
          goto LABEL_22;
        v15 = v27[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v26)
            goto LABEL_22;
          v15 = v27[v11];
          if (!v15)
          {
            v16 = v14 + 2;
            if (v16 >= v26)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((v6 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v15 = v27[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_29;
                if (v11 >= v26)
                  goto LABEL_22;
                v15 = v27[v11];
                ++v16;
                if (v15)
                  goto LABEL_19;
              }
            }
            v11 = v16;
          }
        }
LABEL_19:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      v17 = *(_QWORD *)(v5 + 48) + 24 * v13;
      v18 = *(_WORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(unsigned __int8 *)(v17 + 16);
      v21 = *(unsigned __int8 *)(v17 + 17);
      v22 = *(unsigned __int8 *)(v17 + 18);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0)
        swift_retain();
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (v21 << 8) | (v22 << 16) | v20, v23, v28);
    }
  }
  result = swift_release();
  *v3 = v28;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  Swift::UInt16 v18;
  Swift::UInt v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
  v6 = a2;
  v28 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v27 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v25 = v2;
    v26 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v11 << 6);
      }
      else
      {
        v14 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v14 >= v26)
          goto LABEL_22;
        v15 = v27[v14];
        ++v11;
        if (!v15)
        {
          v11 = v14 + 1;
          if (v14 + 1 >= v26)
            goto LABEL_22;
          v15 = v27[v11];
          if (!v15)
          {
            v16 = v14 + 2;
            if (v16 >= v26)
            {
LABEL_22:
              swift_release();
              v3 = v25;
              if ((v6 & 1) != 0)
              {
                v24 = 1 << *(_BYTE *)(v5 + 32);
                if (v24 > 63)
                  bzero(v27, ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v27 = -1 << v24;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v15 = v27[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_29;
                if (v11 >= v26)
                  goto LABEL_22;
                v15 = v27[v11];
                ++v16;
                if (v15)
                  goto LABEL_19;
              }
            }
            v11 = v16;
          }
        }
LABEL_19:
        v9 = (v15 - 1) & v15;
        v13 = __clz(__rbit64(v15)) + (v11 << 6);
      }
      v17 = *(_QWORD *)(v5 + 48) + 24 * v13;
      v18 = *(_WORD *)v17;
      v19 = *(_QWORD *)(v17 + 8);
      v20 = *(unsigned __int8 *)(v17 + 16);
      v21 = *(unsigned __int8 *)(v17 + 17);
      v22 = *(unsigned __int8 *)(v17 + 18);
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
      if ((v6 & 1) == 0)
        swift_retain();
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)(v18, v19, (v21 << 8) | (v22 << 16) | v20, v23, v28);
    }
  }
  result = swift_release();
  *v3 = v28;
  return result;
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned __int16 *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  v6 = (_QWORD *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v24 = v3;
    v25 = (_QWORD *)(v5 + 64);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(v5 + 64);
    v10 = (unint64_t)(v7 + 63) >> 6;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_22;
        v16 = v25[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_22;
          v16 = v25[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_22:
              swift_release();
              v3 = v24;
              if ((a2 & 1) != 0)
              {
                v23 = 1 << *(_BYTE *)(v5 + 32);
                if (v23 > 63)
                  bzero(v25, ((unint64_t)(v23 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v25 = -1 << v23;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v25[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_29;
                if (v12 >= v10)
                  goto LABEL_22;
                v16 = v25[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      v18 = (unsigned __int16 *)(*(_QWORD *)(v5 + 48) + 4 * v14);
      v19 = *v18;
      v20 = *((unsigned __int8 *)v18 + 2);
      v21 = *((unsigned __int8 *)v18 + 3);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v14);
      if ((a2 & 1) == 0)
        swift_retain();
      result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((v20 << 16) | (v21 << 24) | v19, v22, v6);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = v4;
  v7 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v51 = a2;
  v55 = static _DictionaryStorage.resize(original:capacity:move:)();
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v7 + 32);
  v48 = (_QWORD *)(v7 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v7 + 64);
  v46 = v4;
  v47 = (unint64_t)(v8 + 63) >> 6;
  v11 = v55 + 64;
  result = swift_retain();
  v13 = 0;
  v50 = v7;
  while (1)
  {
    if (v10)
    {
      v52 = (v10 - 1) & v10;
      v53 = v13;
      v23 = __clz(__rbit64(v10)) | (v13 << 6);
      goto LABEL_31;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v24 >= v47)
      break;
    v25 = v48;
    v26 = v48[v24];
    v27 = v13 + 1;
    if (!v26)
    {
      v27 = v13 + 2;
      if (v13 + 2 >= v47)
        goto LABEL_33;
      v26 = v48[v27];
      if (!v26)
      {
        v28 = v13 + 3;
        if (v13 + 3 >= v47)
        {
LABEL_33:
          swift_release();
          v5 = v46;
          if ((v51 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v26 = v48[v28];
        if (!v26)
        {
          while (1)
          {
            v27 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_42;
            if (v27 >= v47)
              goto LABEL_33;
            v26 = v48[v27];
            ++v28;
            if (v26)
              goto LABEL_30;
          }
        }
        v27 = v13 + 3;
      }
    }
LABEL_30:
    v52 = (v26 - 1) & v26;
    v53 = v27;
    v23 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_31:
    v33 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * v23);
    v34 = v33[1];
    v54 = *v33;
    v35 = *(_QWORD *)(v7 + 56) + 80 * v23;
    v36 = *(_QWORD *)(v35 + 8);
    v56 = *(_QWORD *)v35;
    v37 = *(_QWORD *)(v35 + 16);
    v38 = *(_QWORD *)(v35 + 24);
    v40 = *(_QWORD *)(v35 + 32);
    v39 = *(_QWORD *)(v35 + 40);
    v42 = *(_QWORD *)(v35 + 48);
    v41 = *(_QWORD *)(v35 + 56);
    v43 = *(_BYTE *)(v35 + 64);
    if ((v51 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      LOBYTE(v45) = v43;
      a4(v56, v36, v37, v38, v40, v39, v42, v41, v45);
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v55 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      result = v41;
      v19 = v42;
      v20 = v43;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v15) >> 6;
      result = v41;
      v19 = v42;
      v20 = v43;
      do
      {
        if (++v17 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v31 = v17 == v30;
        if (v17 == v30)
          v17 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v17);
      }
      while (v32 == -1);
      v18 = __clz(__rbit64(~v32)) + (v17 << 6);
    }
    *(_QWORD *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v21 = (_QWORD *)(*(_QWORD *)(v55 + 48) + 16 * v18);
    *v21 = v54;
    v21[1] = v34;
    v22 = *(_QWORD *)(v55 + 56) + 80 * v18;
    *(_QWORD *)v22 = v56;
    *(_QWORD *)(v22 + 8) = v36;
    *(_QWORD *)(v22 + 16) = v37;
    *(_QWORD *)(v22 + 24) = v38;
    *(_QWORD *)(v22 + 32) = v40;
    *(_QWORD *)(v22 + 40) = v39;
    *(_QWORD *)(v22 + 48) = v19;
    *(_QWORD *)(v22 + 56) = result;
    *(_BYTE *)(v22 + 64) = v20;
    ++*(_QWORD *)(v55 + 16);
    v7 = v50;
    v10 = v52;
    v13 = v53;
  }
  swift_release();
  v5 = v46;
  v25 = v48;
  if ((v51 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v44 = 1 << *(_BYTE *)(v7 + 32);
  if (v44 >= 64)
    bzero(v25, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v44;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v5 = v55;
  return result;
}

_OWORD *specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt64 *a1, _OWORD *a2, _QWORD *a3)
{
  Swift::UInt v6;
  Swift::UInt64 v7;
  Swift::UInt v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt64 v11;
  __int128 v12;
  _OWORD *result;

  v7 = *a1;
  v6 = a1[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v7);
  if (v6)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    v8 = a1[2];
    if (v8)
      goto LABEL_3;
LABEL_6:
    Hasher._combine(_:)(0);
    if (a1[4])
      goto LABEL_4;
LABEL_7:
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  v8 = a1[2];
  if (!v8)
    goto LABEL_6;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!a1[4])
    goto LABEL_7;
LABEL_4:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  outlined release of REEventBus.DispatcherHandle((uint64_t)a1);
LABEL_8:
  Hasher._finalize()();
  v9 = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v9;
  v10 = a3[6] + 40 * v9;
  v11 = a1[4];
  v12 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v10 = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 16) = v12;
  *(_QWORD *)(v10 + 32) = v11;
  result = outlined init with take of Any(a2, (_OWORD *)(a3[7] + 32 * v9));
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  int v7;
  unint64_t result;

  v6 = BYTE2(a1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if (v6 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1) & 1);
  }
  if (HIBYTE(a1) == 2)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v7 = HIBYTE(a1) & 1;
  }
  Hasher._combine(_:)(v7);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  *(_DWORD *)(a3[6] + 4 * result) = a1;
  *(_QWORD *)(a3[7] + 8 * result) = a2;
  ++a3[2];
  return result;
}

unint64_t specialized _NativeDictionary._unsafeInsertNew(key:value:)(Swift::UInt16 a1, Swift::UInt a2, unsigned int a3, uint64_t a4, _QWORD *a5)
{
  int v10;
  unint64_t result;
  uint64_t v12;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  if (BYTE1(a3) == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((a3 >> 8) & 1);
  }
  if (BYTE2(a3) == 2)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    v10 = HIWORD(a3) & 1;
  }
  Hasher._combine(_:)(v10);
  Hasher._finalize()();
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
  v12 = a5[6] + 24 * result;
  *(_WORD *)v12 = a1;
  *(_QWORD *)(v12 + 8) = a2;
  *(_BYTE *)(v12 + 16) = a3 & 1;
  *(_BYTE *)(v12 + 17) = BYTE1(a3);
  *(_BYTE *)(v12 + 18) = BYTE2(a3);
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  ++a5[2];
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UInt64>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol & Decodable & Encodable.Type>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, [ActionEventType : RESubscriptionHandle]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ActionEventType, RESubscriptionHandle>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, (_:_:_:_:_:_:_:_:)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (action: EntityAction & Decodable & Encodable.Type, parameter: Decodable & Encodable.Type)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 56 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)(v21 + 48);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v24 = *(_OWORD *)v21;
    v25 = *(_OWORD *)(v21 + 16);
    v26 = *(_OWORD *)(v21 + 32);
    *v23 = v19;
    v23[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v27 = v24;
    *(_OWORD *)(v27 + 16) = v25;
    *(_OWORD *)(v27 + 32) = v26;
    *(_QWORD *)(v27 + 48) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, EntityAction.Type>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnsafeRawPointer, ActionHandlerProtocol>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    outlined init with copy of __REAssetService(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of BindableDataInternal(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, Component.Type>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, REComponentClassPtr>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentClassPtr, ComponentInfo>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_DWORD *)(v19 + 32);
    v23 = *(_BYTE *)(v19 + 36);
    v24 = *(_QWORD *)(v19 + 40);
    v25 = *(_BYTE *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 56);
    v27 = *(_OWORD *)(v19 + 8);
    v28 = *(_OWORD *)(v19 + 64);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v29 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v29 = v20;
    *(_OWORD *)(v29 + 8) = v27;
    *(_QWORD *)(v29 + 24) = v21;
    *(_DWORD *)(v29 + 32) = v22;
    *(_BYTE *)(v29 + 36) = v23;
    *(_QWORD *)(v29 + 40) = v24;
    *(_BYTE *)(v29 + 48) = v25;
    *(_QWORD *)(v29 + 56) = v26;
    *(_OWORD *)(v29 + 64) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, ComponentInfo>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      v9 = v30 + 1;
      if (v30 + 1 >= v13)
        goto LABEL_26;
      v31 = *(_QWORD *)(v6 + 8 * v9);
      if (!v31)
        break;
    }
LABEL_25:
    v12 = (v31 - 1) & v31;
    v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v19 + 24);
    v22 = *(_DWORD *)(v19 + 32);
    v23 = *(_BYTE *)(v19 + 36);
    v24 = *(_QWORD *)(v19 + 40);
    v25 = *(_BYTE *)(v19 + 48);
    v26 = *(_QWORD *)(v19 + 56);
    v27 = *(_OWORD *)(v19 + 8);
    v28 = *(_OWORD *)(v19 + 64);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v29 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v29 = v20;
    *(_OWORD *)(v29 + 8) = v27;
    *(_QWORD *)(v29 + 24) = v21;
    *(_DWORD *)(v29 + 32) = v22;
    *(_BYTE *)(v29 + 36) = v23;
    *(_QWORD *)(v29 + 40) = v24;
    *(_BYTE *)(v29 + 48) = v25;
    *(_QWORD *)(v29 + 56) = v26;
    *(_OWORD *)(v29 + 64) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v32 = v30 + 2;
  if (v32 >= v13)
    goto LABEL_26;
  v31 = *(_QWORD *)(v6 + 8 * v32);
  if (v31)
  {
    v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v31 = *(_QWORD *)(v6 + 8 * v9);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __USDARReferenceProvidingPlugin>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileARReferenceProvidingPlugin>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21[8];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __RealityFileURLResolver.Weak<__RealityFileURLResolver>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(*(_QWORD *)(v2 + 56) + 8 * v15, (uint64_t)v21);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of __RealityFileURLResolver.Weak<__RealityFileURLResolver>((uint64_t)v21, *(_QWORD *)(v4 + 56) + v16);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKComponent.Solver.ID, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, ForceEffectProtocol.Type>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REEventBus.DispatcherHandle, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  v26 = v2 + 64;
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      v8 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v8);
      if (!v23)
        break;
    }
LABEL_25:
    v11 = (v23 - 1) & v23;
    v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    v15 = 40 * v14;
    v16 = *(_QWORD *)(v2 + 48) + 40 * v14;
    v18 = *(_QWORD *)(v16 + 16);
    v17 = *(_QWORD *)(v16 + 24);
    v19 = *(_QWORD *)(v16 + 32);
    v27 = *(_OWORD *)v16;
    v20 = 32 * v14;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v14, (uint64_t)v28);
    v21 = *(_QWORD *)(v4 + 48) + v15;
    *(_OWORD *)v21 = v27;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v17;
    *(_QWORD *)(v21 + 32) = v19;
    outlined init with take of Any(v28, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v8);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioMixGroup>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      v9 = v33 + 1;
      if (v33 + 1 >= v13)
        goto LABEL_26;
      v34 = *(_QWORD *)(v6 + 8 * v9);
      if (!v34)
        break;
    }
LABEL_25:
    v12 = (v34 - 1) & v34;
    v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 80 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_BYTE *)(v21 + 16);
    v23 = *(_QWORD *)(v21 + 24);
    v24 = *(_BYTE *)(v21 + 32);
    v25 = *(_BYTE *)(v21 + 33);
    v26 = *(_QWORD *)(v21 + 40);
    v27 = *(_QWORD *)(v21 + 48);
    v28 = *(_BYTE *)(v21 + 72);
    v29 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v30 = *(_OWORD *)(v21 + 56);
    v31 = *(_OWORD *)v21;
    *v29 = v19;
    v29[1] = v18;
    v32 = *(_QWORD *)(v4 + 56) + v20;
    *(_OWORD *)v32 = v31;
    *(_BYTE *)(v32 + 16) = v22;
    *(_QWORD *)(v32 + 24) = v23;
    *(_BYTE *)(v32 + 32) = v24;
    *(_BYTE *)(v32 + 33) = v25;
    *(_QWORD *)(v32 + 40) = v26;
    *(_QWORD *)(v32 + 48) = v27;
    *(_OWORD *)(v32 + 56) = v30;
    *(_BYTE *)(v32 + 72) = v28;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v35 = v33 + 2;
  if (v35 >= v13)
    goto LABEL_26;
  v34 = *(_QWORD *)(v6 + 8 * v35);
  if (v34)
  {
    v9 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v34 = *(_QWORD *)(v6 + 8 * v9);
    ++v35;
    if (v34)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, String>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, OpaquePointer>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, MaterialParameters.Value>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of MaterialParameters.Value);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[16];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, __RKEntityAction.ActionStateObservation>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    outlined init with copy of __RKEntityAction.ActionStateObservation(*(_QWORD *)(v2 + 56) + 16 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)outlined init with take of __RKEntityAction.ActionStateObservation((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(unint64_t, char *, uint64_t);
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD **)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v25 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, UUID>);
  v26 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)();
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_23:
    result = (void *)swift_release();
    *v26 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v27 = v8 + 64;
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_23;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    v19 = v2[9] * v18;
    v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(_QWORD *)(v8 + 48) + v19, v1);
    v20(v4, *(_QWORD *)(v8 + 56) + v19, v1);
    v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(_QWORD *)(v10 + 48) + v19, v7, v1);
    result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v21)(*(_QWORD *)(v10 + 56) + v19, v4, v1);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_23;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Entity>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Entity, [__RKEntityInteractionSpecification]>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    outlined init with copy of Any(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Int64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, Int64>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, Task<__MaterialResource, Error>>);
  v38 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v37 = v3;
    result = (void *)swift_release();
    *v38 = v37;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v41 = v3;
  if (v6)
  {
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    v3 = v41;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v40 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      v3 = v41;
      goto LABEL_12;
    }
    v34 = v7 + 1;
    v3 = v41;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      v7 = v34 + 1;
      if (v34 + 1 >= v39)
        goto LABEL_26;
      v35 = *(_QWORD *)(v40 + 8 * v7);
      if (!v35)
        break;
    }
LABEL_25:
    v10 = (v35 - 1) & v35;
    v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    v13 = v12 << 7;
    v14 = 8 * v12;
    v15 = v13 - v14;
    v16 = *(_QWORD *)(v1 + 48) + v15;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 16);
    v19 = *(_WORD *)(v16 + 17);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_QWORD *)(v16 + 48);
    v24 = *(_QWORD *)(v16 + 56);
    v25 = *(void **)(v16 + 64);
    v26 = *(_QWORD *)(v16 + 72);
    v27 = *(_QWORD *)(v16 + 80);
    v28 = *(_QWORD *)(v16 + 88);
    v29 = *(_QWORD *)(v16 + 96);
    v30 = *(_QWORD *)(v16 + 104);
    v31 = *(void **)(v16 + 112);
    v32 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v14);
    v33 = *(_QWORD *)(v3 + 48) + v15;
    *(_WORD *)v33 = *(_WORD *)v16;
    *(_QWORD *)(v33 + 8) = v17;
    *(_BYTE *)(v33 + 16) = v18;
    *(_WORD *)(v33 + 17) = v19;
    *(_QWORD *)(v33 + 24) = v20;
    *(_QWORD *)(v33 + 32) = v21;
    *(_QWORD *)(v33 + 40) = v22;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    *(_QWORD *)(v33 + 64) = v25;
    *(_QWORD *)(v33 + 72) = v26;
    *(_QWORD *)(v33 + 80) = v27;
    *(_QWORD *)(v33 + 88) = v28;
    *(_QWORD *)(v33 + 96) = v29;
    *(_QWORD *)(v33 + 104) = v30;
    *(_QWORD *)(v33 + 112) = v31;
    *(_QWORD *)(*(_QWORD *)(v3 + 56) + v14) = v32;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v21, v22, v23, v24, v25);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v27, v28, v29, v30, v31);
    result = (void *)swift_retain();
  }
  v36 = v34 + 2;
  if (v36 >= v39)
    goto LABEL_26;
  v35 = *(_QWORD *)(v40 + 8 * v36);
  if (v35)
  {
    v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v7 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v7);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  BOOL v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CustomMaterial.CustomShaderParameters, __MaterialResource>);
  v38 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    v37 = v3;
    result = (void *)swift_release();
    *v38 = v37;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  v6 = v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5;
  v41 = v3;
  if (v6)
  {
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
    v3 = v41;
  }
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v39 = (unint64_t)(v8 + 63) >> 6;
  v40 = v1 + 64;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      v3 = v41;
      goto LABEL_12;
    }
    v34 = v7 + 1;
    v3 = v41;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v34);
    ++v7;
    if (!v35)
    {
      v7 = v34 + 1;
      if (v34 + 1 >= v39)
        goto LABEL_26;
      v35 = *(_QWORD *)(v40 + 8 * v7);
      if (!v35)
        break;
    }
LABEL_25:
    v10 = (v35 - 1) & v35;
    v12 = __clz(__rbit64(v35)) + (v7 << 6);
LABEL_12:
    v13 = v12 << 7;
    v14 = 8 * v12;
    v15 = v13 - v14;
    v16 = *(_QWORD *)(v1 + 48) + v15;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_BYTE *)(v16 + 16);
    v19 = *(_WORD *)(v16 + 17);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_QWORD *)(v16 + 40);
    v23 = *(_QWORD *)(v16 + 48);
    v24 = *(_QWORD *)(v16 + 56);
    v25 = *(void **)(v16 + 64);
    v26 = *(_QWORD *)(v16 + 72);
    v27 = *(_QWORD *)(v16 + 80);
    v28 = *(_QWORD *)(v16 + 88);
    v29 = *(_QWORD *)(v16 + 96);
    v30 = *(_QWORD *)(v16 + 104);
    v31 = *(void **)(v16 + 112);
    v32 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v14);
    v33 = *(_QWORD *)(v3 + 48) + v15;
    *(_WORD *)v33 = *(_WORD *)v16;
    *(_QWORD *)(v33 + 8) = v17;
    *(_BYTE *)(v33 + 16) = v18;
    *(_WORD *)(v33 + 17) = v19;
    *(_QWORD *)(v33 + 24) = v20;
    *(_QWORD *)(v33 + 32) = v21;
    *(_QWORD *)(v33 + 40) = v22;
    *(_QWORD *)(v33 + 48) = v23;
    *(_QWORD *)(v33 + 56) = v24;
    *(_QWORD *)(v33 + 64) = v25;
    *(_QWORD *)(v33 + 72) = v26;
    *(_QWORD *)(v33 + 80) = v27;
    *(_QWORD *)(v33 + 88) = v28;
    *(_QWORD *)(v33 + 96) = v29;
    *(_QWORD *)(v33 + 104) = v30;
    *(_QWORD *)(v33 + 112) = v31;
    *(_QWORD *)(*(_QWORD *)(v3 + 56) + v14) = v32;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v21, v22, v23, v24, v25);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v27, v28, v29, v30, v31);
    result = (void *)swift_retain();
  }
  v36 = v34 + 2;
  if (v36 >= v39)
    goto LABEL_26;
  v35 = *(_QWORD *)(v40 + 8 * v36);
  if (v35)
  {
    v7 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v7 >= v39)
      goto LABEL_26;
    v35 = *(_QWORD *)(v40 + 8 * v7);
    ++v36;
    if (v35)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<CustomMaterial.CustomShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt64, AudioPlaybackController.Internal>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<__REAsset, RESceneDescriptor>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_retain();
    result = (void *)swift_retain();
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Component.Type>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, OpaquePointer>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<EmitterAssetKey, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = *(_QWORD *)(v4 + 48) + v16;
    *(_OWORD *)v21 = *(_OWORD *)v17;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, SimpleMaterial.SimpleMaterialMapping>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, __MaterialResource>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, __MaterialResource>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_WORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    LOWORD(v17) = *(_WORD *)(v17 + 17);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_WORD *)v23 = v18;
    *(_QWORD *)(v23 + 8) = v19;
    *(_BYTE *)(v23 + 16) = v20;
    *(_WORD *)(v23 + 17) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<REComponentType, String>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Joint.ID, Int>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<IKRig.Constraint.ID, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, StateMachineParameterProtocol>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    outlined init with copy of __REAssetService(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    outlined init with take of BindableDataInternal(v26, *(_QWORD *)(v4 + 56) + v20);
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, __RKMaterialParameterBlock.Parameter>, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))outlined copy of __RKMaterialParameterBlock.Parameter);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PhysicallyBasedMaterial.PBRShaderParameters, Task<__MaterialResource, Error>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v18 = *(_WORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_BYTE *)(v17 + 16);
    LOWORD(v17) = *(_WORD *)(v17 + 17);
    v21 = 8 * v15;
    v22 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v21);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    *(_WORD *)v23 = v18;
    *(_QWORD *)(v23 + 8) = v19;
    *(_BYTE *)(v23 + 16) = v20;
    *(_WORD *)(v23 + 17) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v21) = v22;
    result = (void *)swift_retain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t Trace;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v1 = v0;
  Trace = type metadata accessor for LoadTrace(0);
  v26 = *(_QWORD *)(Trace - 8);
  MEMORY[0x24BDAC7A8](Trace);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, LoadTrace>);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      v12 = v22 + 1;
      if (v22 + 1 >= v16)
        goto LABEL_26;
      v23 = *(_QWORD *)(v9 + 8 * v12);
      if (!v23)
        break;
    }
LABEL_25:
    v15 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    v19 = 4 * v18;
    v20 = *(_DWORD *)(*(_QWORD *)(v5 + 48) + 4 * v18);
    v21 = *(_QWORD *)(v26 + 72) * v18;
    outlined init with copy of __RKEntityActionSpecification(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for LoadTrace);
    *(_DWORD *)(*(_QWORD *)(v7 + 48) + v19) = v20;
    result = (void *)outlined init with take of LoadTrace((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21);
  }
  v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v9 + 8 * v24);
  if (v23)
  {
    v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v23 = *(_QWORD *)(v9 + 8 * v12);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    result = (void *)outlined copy of Data._Representation(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationCollectionCache>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.Configuration>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, Entity>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, URL>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v19 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v19, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v19, v4, v1);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, PhotogrammetrySession.Pose>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    v19 = (__int128 *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, simd_float4x4?>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v29 = __clz(__rbit64(v27));
    v12 = (v27 - 1) & v27;
    v15 = v29 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 64);
    v21 = *(_OWORD *)v19;
    v22 = *(_OWORD *)(v19 + 16);
    v23 = *(_OWORD *)(v19 + 32);
    v24 = *(_OWORD *)(v19 + 48);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v21;
    *(_OWORD *)(v25 + 16) = v22;
    *(_OWORD *)(v25 + 32) = v23;
    *(_OWORD *)(v25 + 48) = v24;
    *(_BYTE *)(v25 + 64) = v20;
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, Task<(), Never>>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  __int128 v27[2];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<MeshBuffers.Identifier, MeshBufferErased>);
  v24 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
    result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v25 = v1 + 64;
  v26 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    v21 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v26)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v7;
    if (!v22)
    {
      v7 = v21 + 1;
      if (v21 + 1 >= v26)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v7);
      if (!v22)
        break;
    }
LABEL_25:
    v10 = (v22 - 1) & v22;
    v12 = __clz(__rbit64(v22)) + (v7 << 6);
LABEL_12:
    v13 = 24 * v12;
    v14 = *(_QWORD *)(v1 + 48) + 24 * v12;
    v16 = *(_QWORD *)v14;
    v15 = *(_QWORD *)(v14 + 8);
    v17 = *(_BYTE *)(v14 + 16);
    v18 = *(_BYTE *)(v14 + 17);
    v19 = 40 * v12;
    outlined init with copy of __REAssetService(*(_QWORD *)(v1 + 56) + 40 * v12, (uint64_t)v27);
    v20 = *(_QWORD *)(v3 + 48) + v13;
    *(_QWORD *)v20 = v16;
    *(_QWORD *)(v20 + 8) = v15;
    *(_BYTE *)(v20 + 16) = v17;
    *(_BYTE *)(v20 + 17) = v18;
    outlined init with take of BindableDataInternal(v27, *(_QWORD *)(v3 + 56) + v19);
    result = (void *)swift_bridgeObjectRetain();
  }
  v23 = v21 + 2;
  if (v23 >= v26)
    goto LABEL_26;
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v7 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v7 >= v26)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v7);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, BufferDescriptor>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v21 = *(_QWORD *)v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = *(_BYTE *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 17);
    v24 = *(_WORD *)(v19 + 18);
    LOBYTE(v19) = *(_BYTE *)(v19 + 20);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v25 = v21;
    *(_QWORD *)(v25 + 8) = v20;
    *(_BYTE *)(v25 + 16) = v22;
    *(_BYTE *)(v25 + 17) = v23;
    *(_WORD *)(v25 + 18) = v24;
    *(_BYTE *)(v25 + 20) = v19;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, String>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, Int32>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 4 * v15;
    v19 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, UInt64>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSetCache>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Entity.ConfigurationCatalog.ConfigurationSet>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 16);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v26 = *(_OWORD *)(v21 + 24);
    *v25 = v19;
    v25[1] = v18;
    v27 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v27 = v22;
    *(_QWORD *)(v27 + 8) = v23;
    *(_QWORD *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<OpaquePointer, __ARReferenceProvider>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ExtrudedGlyphDescriptor.Info, ExtrudedGlyphDescriptor>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v36 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v36);
    ++v9;
    if (!v37)
    {
      v9 = v36 + 1;
      if (v36 + 1 >= v13)
        goto LABEL_26;
      v37 = *(_QWORD *)(v6 + 8 * v9);
      if (!v37)
        break;
    }
LABEL_25:
    v12 = (v37 - 1) & v37;
    v15 = __clz(__rbit64(v37)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 48 * v15;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = *(_WORD *)(v17 + 40);
    LODWORD(v17) = *(_DWORD *)(v17 + 44);
    v24 = v15 << 6;
    v25 = *(_QWORD *)(v2 + 56) + v24;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v30 = *(_QWORD *)(v25 + 24);
    v29 = *(_QWORD *)(v25 + 32);
    v31 = *(_WORD *)(v25 + 40);
    v32 = *(_DWORD *)(v25 + 44);
    v33 = *(_QWORD *)(v4 + 48) + v16;
    v34 = *(_OWORD *)(v25 + 48);
    *(_QWORD *)v33 = v18;
    *(_QWORD *)(v33 + 8) = v19;
    *(_QWORD *)(v33 + 16) = v20;
    *(_QWORD *)(v33 + 24) = v21;
    *(_QWORD *)(v33 + 32) = v22;
    *(_WORD *)(v33 + 40) = v23;
    *(_DWORD *)(v33 + 44) = v17;
    v35 = *(_QWORD *)(v4 + 56) + v24;
    *(_QWORD *)v35 = v26;
    *(_QWORD *)(v35 + 8) = v27;
    *(_QWORD *)(v35 + 16) = v28;
    *(_QWORD *)(v35 + 24) = v30;
    *(_QWORD *)(v35 + 32) = v29;
    *(_WORD *)(v35 + 40) = v31;
    *(_DWORD *)(v35 + 44) = v32;
    *(_OWORD *)(v35 + 48) = v34;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v38 = v36 + 2;
  if (v38 >= v13)
    goto LABEL_26;
  v37 = *(_QWORD *)(v6 + 8 * v38);
  if (v37)
  {
    v9 = v38;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v37 = *(_QWORD *)(v6 + 8 * v9);
    ++v38;
    if (v37)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [StateMachineTransition]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Swift.AnyObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_unknownObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD *v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, RESRT>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = v18[1];
    v20 = 48 * v15;
    v21 = *(_OWORD *)(v17 + v20);
    v22 = *(_OWORD *)(v17 + v20 + 16);
    v23 = *(_OWORD *)(v17 + v20 + 32);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v24 = *v18;
    v24[1] = v19;
    v25 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v25 = v21;
    v25[1] = v22;
    v25[2] = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UnlitMaterial.UnlitShaderParameters, Task<__MaterialResource, Error>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 4 * v15;
    v17 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
    v18 = 8 * v15;
    v19 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v22 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v24 = __clz(__rbit64(v22));
    v13 = (v22 - 1) & v22;
    v16 = v24 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v19);
    v22 = *v20;
    v21 = v20[1];
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 56) + v19);
    *v23 = v22;
    v23[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 8 * v16;
    v22 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v21);
    v23 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v23 = v20;
    v23[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v21) = v22;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  BOOL v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  __swift_instantiateConcreteTypeFromMangledName(a1);
  v38 = v2;
  v3 = *v2;
  v4 = static _DictionaryStorage.copy(original:)();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    v36 = v5;
    result = (void *)swift_release();
    *v38 = v36;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  v8 = v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v7;
  v43 = v5;
  if (v8)
  {
    result = memmove(result, (const void *)(v3 + 64), 8 * v7);
    v5 = v43;
  }
  v9 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v10 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v3 + 64);
  v39 = (unint64_t)(v10 + 63) >> 6;
  v40 = v3 + 64;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v44 = v9;
      v14 = v13 | (v9 << 6);
      v15 = v42;
      v5 = v43;
      goto LABEL_12;
    }
    v32 = v9 + 1;
    v15 = v42;
    v5 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v32 >= v39)
      goto LABEL_26;
    v33 = *(_QWORD *)(v40 + 8 * v32);
    v34 = v9 + 1;
    if (!v33)
    {
      v34 = v32 + 1;
      if (v32 + 1 >= v39)
        goto LABEL_26;
      v33 = *(_QWORD *)(v40 + 8 * v34);
      if (!v33)
        break;
    }
LABEL_25:
    v12 = (v33 - 1) & v33;
    v44 = v34;
    v14 = __clz(__rbit64(v33)) + (v34 << 6);
LABEL_12:
    v16 = 16 * v14;
    v17 = *(_QWORD *)(v15 + 56);
    v18 = (_QWORD *)(*(_QWORD *)(v15 + 48) + 16 * v14);
    v19 = v18[1];
    v20 = 80 * v14;
    v21 = *(_QWORD *)(v17 + v20);
    v22 = *(_QWORD *)(v17 + v20 + 8);
    v23 = *(_QWORD *)(v17 + v20 + 16);
    v24 = *(_QWORD *)(v17 + v20 + 24);
    v26 = *(_QWORD *)(v17 + v20 + 32);
    v25 = *(_QWORD *)(v17 + v20 + 40);
    v28 = *(_QWORD *)(v17 + v20 + 48);
    v27 = *(_QWORD *)(v17 + v20 + 56);
    v29 = *(_BYTE *)(v17 + v20 + 64);
    v30 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v16);
    *v30 = *v18;
    v30[1] = v19;
    v31 = *(_QWORD *)(v5 + 56) + v20;
    *(_QWORD *)v31 = v21;
    *(_QWORD *)(v31 + 8) = v22;
    *(_QWORD *)(v31 + 16) = v23;
    *(_QWORD *)(v31 + 24) = v24;
    *(_QWORD *)(v31 + 32) = v26;
    *(_QWORD *)(v31 + 40) = v25;
    *(_QWORD *)(v31 + 48) = v28;
    *(_QWORD *)(v31 + 56) = v27;
    *(_BYTE *)(v31 + 64) = v29;
    swift_bridgeObjectRetain();
    LOBYTE(v37) = v29;
    result = (void *)a2(v21, v22, v23, v24, v26, v25, v28, v27, v37);
    v9 = v44;
  }
  v35 = v32 + 2;
  if (v35 >= v39)
    goto LABEL_26;
  v33 = *(_QWORD *)(v40 + 8 * v35);
  if (v33)
  {
    v34 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    v34 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v34 >= v39)
      goto LABEL_26;
    v33 = *(_QWORD *)(v40 + 8 * v34);
    ++v35;
    if (v33)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, NSObject>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UUID, USKObjectPath>);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v24 = v7;
    return result;
  }
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v25 = v5 + 64;
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(void **)(*(_QWORD *)(v5 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v44 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v7;
    v21[1] = v6;
    *(_QWORD *)(v20[7] + 8 * v11) = v8;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v44 - 1;
    if (v44 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      swift_retain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v38[2] = v41;
      v26 += 3;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1, &demangling cache variable for type metadata for _DictionaryStorage<String, AudioResource>);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x800000021BE82E90;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_22;
  v8 = a1[4];
  v7 = a1[5];
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0)
        goto LABEL_12;
    }
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._object = (void *)0x800000021BE82E90;
    v41._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._countAndFlagsBits = 39;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v11 = v16;
  if ((v15 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v20 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v21 = 8 * v11;
  *(_QWORD *)(v20[6] + v21) = v8;
  *(_QWORD *)(v20[7] + v21) = v7;
  v22 = v20[2];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20[2] = v24;
  if (v6 != 1)
  {
    v25 = a1 + 7;
    v26 = 1;
    while (v26 < a1[2])
    {
      v28 = *(v25 - 1);
      v27 = *v25;
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        goto LABEL_24;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_27;
      }
      if ((v35 & 1) != 0)
        goto LABEL_9;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = 8 * v30;
      *(_QWORD *)(v37[6] + v38) = v28;
      *(_QWORD *)(v37[7] + v38) = v27;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_25;
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v6 == v26)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  v4 = a1[2];
  if (!v4)
    goto LABEL_22;
  v8 = a1[4];
  v7 = a1[5];
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0)
        goto LABEL_12;
    }
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._object = (void *)0x800000021BE82E90;
    v41._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._countAndFlagsBits = 39;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v11 = v16;
  if ((v15 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v20 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v21 = 8 * v11;
  *(_QWORD *)(v20[6] + v21) = v8;
  *(_QWORD *)(v20[7] + v21) = v7;
  v22 = v20[2];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20[2] = v24;
  if (v4 != 1)
  {
    v25 = a1 + 7;
    v26 = 1;
    while (v26 < a1[2])
    {
      v27 = *(v25 - 1);
      v28 = *v25;
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        goto LABEL_24;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_27;
      }
      if ((v35 & 1) != 0)
        goto LABEL_9;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = 8 * v30;
      *(_QWORD *)(v37[6] + v38) = v27;
      *(_QWORD *)(v37[7] + v38) = v28;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_25;
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v4 == v26)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;

  v6 = a1[2];
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_22;
  v8 = a1[4];
  v7 = a1[5];
  v9 = (_QWORD *)*a3;
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) == 0)
        goto LABEL_12;
    }
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_28;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_27:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
LABEL_28:
    _StringGuts.grow(_:)(30);
    v41._object = (void *)0x800000021BE82E90;
    v41._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v41);
    _print_unlocked<A, B>(_:_:)();
    v42._countAndFlagsBits = 39;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v11 = v16;
  if ((v15 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v20 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
  v21 = 8 * v11;
  *(_QWORD *)(v20[6] + v21) = v8;
  *(_QWORD *)(v20[7] + v21) = v7;
  v22 = v20[2];
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20[2] = v24;
  if (v6 != 1)
  {
    v25 = a1 + 7;
    v26 = 1;
    while (v26 < a1[2])
    {
      v28 = *(v25 - 1);
      v27 = *v25;
      v29 = (_QWORD *)*a3;
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      v32 = v29[2];
      v33 = (v31 & 1) == 0;
      v23 = __OFADD__(v32, v33);
      v34 = v32 + v33;
      if (v23)
        goto LABEL_24;
      v35 = v31;
      if (v29[3] < v34)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, 1);
        v30 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
        if ((v35 & 1) != (v36 & 1))
          goto LABEL_27;
      }
      if ((v35 & 1) != 0)
        goto LABEL_9;
      v37 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      v38 = 8 * v30;
      *(_QWORD *)(v37[6] + v38) = v28;
      *(_QWORD *)(v37[7] + v38) = v27;
      v39 = v37[2];
      v23 = __OFADD__(v39, 1);
      v40 = v39 + 1;
      if (v23)
        goto LABEL_25;
      ++v26;
      v37[2] = v40;
      v25 += 2;
      if (v6 == v26)
        goto LABEL_22;
    }
    goto LABEL_26;
  }
LABEL_22:
  swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v8 = a1[4];
  v7 = a1[5];
  v44 = a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v11 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v21 = (uint64_t *)(v20[6] + 16 * v11);
    *v21 = v8;
    v21[1] = v7;
    *(_QWORD *)(v20[7] + 8 * v11) = v44;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    v25 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v26 = a1 + 9;
    while (1)
    {
      v28 = *(v26 - 2);
      v27 = *(v26 - 1);
      v29 = *v26;
      v30 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v23 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v23)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, 1);
        v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v27);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v27;
      *(_QWORD *)(v38[7] + 8 * v31) = v29;
      v40 = v38[2];
      v23 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v23)
        goto LABEL_24;
      v26 += 3;
      v38[2] = v41;
      if (!--v25)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a2 & 1);
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x800000021BE82E90;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type NSString and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type NSString and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSString and conformance NSObject)
  {
    v1 = type metadata accessor for OS_os_log(255, (unint64_t *)&lazy cache variable for type metadata for NSString);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE5BE8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSString and conformance NSObject);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioLibraryComponent()
{
  return &type metadata for AudioLibraryComponent;
}

uint64_t outlined release of REEventBus.DispatcherHandle(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t outlined init with copy of __RealityFileURLResolver.Weak<__RealityFileURLResolver>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RealityFileURLResolver.Weak<__RealityFileURLResolver>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for __RKRuntimeSceneCoordinator.WeakObserver(a2, a1);
  return a2;
}

uint64_t outlined init with take of __RKEntityAction.ActionStateObservation(uint64_t a1, uint64_t a2)
{
  initializeWithTake for __RKRuntimeSceneCoordinator.WeakObserver(a2, a1);
  return a2;
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceObject(group:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t __RKEntityActionVisibilityTypeUSD.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA0A5E8 + 4 * a9[a1]))(1701736302, 0xE400000000000000);
}

uint64_t sub_21BA0A5E8()
{
  return 0x7466654C65766F6DLL;
}

uint64_t sub_21BA0A600()
{
  return 0x6867695265766F6DLL;
}

uint64_t sub_21BA0A630()
{
  return 0x6B63614265766F6DLL;
}

uint64_t sub_21BA0A648()
{
  return 0x766F624165766F6DLL;
}

uint64_t sub_21BA0A668()
{
  return 0x6F6C654265766F6DLL;
}

uint64_t sub_21BA0A688()
{
  return 7368560;
}

uint64_t sub_21BA0A698()
{
  return 0x7055656C616373;
}

uint64_t sub_21BA0A6B0()
{
  return 0x776F44656C616373;
}

unint64_t specialized __RKEntityMoveEaseTypeUSD.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityMoveEaseTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t specialized __RKEntityActionVisibilityTypeUSD.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityActionVisibilityTypeUSD.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

void __swiftcall __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:)(RealityKit::__RKEntityActionGroupArguments *__return_ptr retstr, RealityKit::__RKEntityGroupActionOrder order, Swift::OpaquePointer actions, Swift::Bool exclusive, Swift::Int loopCount)
{
  retstr->order = *(_BYTE *)order;
  retstr->actions = actions;
  retstr->exclusive.value = exclusive;
  retstr->loopCount.value = loopCount;
  *(_WORD *)&retstr->loopCount.is_nil = 0;
}

__n128 __RKEntitySpinActionArguments.init(target:duration:iterations:direction:axis:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, __n128 a6@<Q2>)
{
  char v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 result;

  v10 = *a2;
  v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a3, a1, v11);
  if (a4 < 0.0)
    a4 = 1.0;
  v12 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  v13 = a3 + v12[5];
  *(float *)v13 = a4;
  *(_BYTE *)(v13 + 4) = 0;
  if (a5 < 0.0)
    v14 = 1.0;
  else
    v14 = a5;
  v15 = v12[7];
  v16 = a3 + v12[6];
  v17 = (__n128 *)(a3 + v12[8]);
  *(float *)v16 = v14;
  *(_BYTE *)(v16 + 4) = 0;
  *(_BYTE *)(a3 + v15) = v10;
  result = a6;
  *v17 = a6;
  v17[1].n128_u8[0] = 0;
  return result;
}

__n128 __RKEntityOrbitEntityActionArguments.init(target:pivotTarget:duration:rotations:orbitalAxis:orientToPath:spinDirection:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>, float a7@<S0>, float a8@<S1>, __n128 a9@<Q2>, float a10@<S3>, float a11@<S4>)
{
  char v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 result;

  v20 = *a4;
  v21 = type metadata accessor for UUID();
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
  v22(a6, a1, v21);
  v23 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  v22(a6 + v23[5], a2, v21);
  v24 = 1.0;
  if (a7 >= 0.0)
    v24 = a7;
  v25 = a6 + v23[6];
  v26 = a6 + v23[7];
  v27 = v23[9];
  v28 = (__n128 *)(a6 + v23[8]);
  v29 = v23[10];
  v30 = v23[11];
  v31 = a6 + v23[12];
  v32 = a6 + v23[13];
  *(float *)v25 = v24;
  *(_BYTE *)(v25 + 4) = 0;
  *(float *)v26 = a8;
  *(_BYTE *)(v26 + 4) = 0;
  result = a9;
  *v28 = a9;
  v28[1].n128_u8[0] = 0;
  *(_BYTE *)(a6 + v27) = a3;
  *(_BYTE *)(a6 + v29) = v20;
  *(_BYTE *)(a6 + v30) = a5;
  *(float *)v31 = a10;
  *(_BYTE *)(v31 + 4) = 0;
  *(float *)v32 = a11;
  *(_BYTE *)(v32 + 4) = 0;
  return result;
}

uint64_t __RKEntityAudioActionArguments.init(target:path:type:spatialMode:volume:loops:multiplePerformBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, char a6@<W5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  char v13;
  char v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  _QWORD *v22;
  char v24;

  v13 = *a4;
  v14 = *a5;
  v24 = *a7;
  v15 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  v16 = v15[6];
  v17 = a8 + v15[7];
  v19 = v15[8];
  v18 = v15[9];
  v20 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a8, a1, v20);
  v22 = (_QWORD *)(a8 + v15[5]);
  *v22 = a2;
  v22[1] = a3;
  *(_BYTE *)(a8 + v16) = v13;
  *(_BYTE *)(a8 + v18) = v14;
  *(double *)v17 = a9;
  *(_BYTE *)(v17 + 8) = 0;
  *(_BYTE *)(a8 + v19) = a6;
  *(_BYTE *)(a8 + v15[10]) = v24;
  return result;
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, float a9@<S2>)
{
  char v17;
  int *started;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);

  v17 = *a3;
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  v19 = a6 + started[14];
  v20 = type metadata accessor for UUID();
  v21 = *(_QWORD *)(v20 - 8);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v24(v19, 1, 1, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(a6, a1, v20);
  *(_QWORD *)(a6 + started[5]) = a2;
  *(_BYTE *)(a6 + started[6]) = v17;
  *(_BYTE *)(a6 + started[10]) = a4;
  *(double *)(a6 + started[8]) = a8;
  *(double *)(a6 + started[7]) = a7;
  *(float *)(a6 + started[11]) = a9;
  *(_BYTE *)(a6 + started[9]) = a5;
  *(_BYTE *)(a6 + started[12]) = 0;
  v22 = a6 + started[13];
  *(_QWORD *)v22 = 0x3FF0000000000000;
  *(_BYTE *)(v22 + 8) = 0;
  outlined destroy of BodyTrackingComponent?(v19, &demangling cache variable for type metadata for UUID?);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v24)(v19, 1, 1, v20);
}

uint64_t __RKChangeSceneActionArguments.init(sceneRoot:targetSceneIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void (*v9)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v9(a3, a1, v6);
  v7 = a3 + *(int *)(type metadata accessor for __RKChangeSceneActionArguments(0) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v7, a2, v6);
}

int *__RKEntityEmphasisActionArguments.init(target:duration:iterations:animationStyle:emphasisAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  char v10;
  char v11;
  uint64_t v12;
  int *result;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v10 = *a2;
  v11 = *a3;
  v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a4, a1, v12);
  if (a5 < 0.0)
    a5 = 1.0;
  result = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
  v14 = a4 + result[5];
  *(float *)v14 = a5;
  *(_BYTE *)(v14 + 4) = 0;
  if (a6 < 0.0)
    v15 = 1.0;
  else
    v15 = a6;
  v16 = result[7];
  v17 = a4 + result[6];
  v18 = result[8];
  *(float *)v17 = v15;
  *(_BYTE *)(v17 + 4) = 0;
  *(_BYTE *)(a4 + v16) = v10;
  *(_BYTE *)(a4 + v18) = v11;
  return result;
}

uint64_t __RKEntityForceActionArguments.init(target:force:velocity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v16 = type metadata accessor for __RKEntityForceActionArguments(0);
  v17 = a8 + *(int *)(v16 + 20);
  v18 = a8 + *(int *)(v16 + 24);
  v19 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a8, a1, v19);
  *(_QWORD *)v17 = a2;
  *(_QWORD *)(v17 + 8) = a3;
  *(_BYTE *)(v17 + 16) = a4 & 1;
  *(_QWORD *)v18 = a5;
  *(_QWORD *)(v18 + 8) = a6;
  *(_BYTE *)(v18 + 16) = a7 & 1;
  return result;
}

__n128 __RKEntityLookAtCameraActionArguments.init(target:duration:animationDuration:direction:rotation:upVector:loops:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>, __n128 a6@<Q2>, float a7@<S3>, __n128 a8@<Q4>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  __n128 result;

  v14 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  v15 = a3 + v14[5];
  v16 = a3 + v14[6];
  v17 = (__n128 *)(a3 + v14[7]);
  v18 = a3 + v14[8];
  v19 = v14[10];
  v20 = (__n128 *)(a3 + v14[9]);
  v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a3, a1, v21);
  *(float *)v15 = a4;
  *(_BYTE *)(v15 + 4) = 0;
  *(float *)v16 = a5;
  *(_BYTE *)(v16 + 4) = 0;
  *v17 = a6;
  v17[1].n128_u8[0] = 0;
  *(float *)v18 = a7;
  *(_BYTE *)(v18 + 4) = 0;
  result = a8;
  *v20 = a8;
  v20[1].n128_u8[0] = 0;
  *(_BYTE *)(a3 + v19) = a2;
  return result;
}

uint64_t __RKEntityCustomActionArguments.init(target:actionIdentifier:customArguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v25 - v13;
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v14);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v19(v14, 1, v15) == 1)
  {
    UUID.init(uuidString:)();
    result = v19(v11, 1, v15);
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    v21 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v21(v18, v11, v15);
    outlined destroy of BodyTrackingComponent?((uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    v21(v18, v14, v15);
  }
  v22 = v26;
  v21(a5, v18, v15);
  v23 = type metadata accessor for __RKEntityCustomActionArguments(0);
  v24 = &a5[*(int *)(v23 + 20)];
  *(_QWORD *)v24 = v22;
  *((_QWORD *)v24 + 1) = a3;
  if (!a4)
    a4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  result = outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
  *(_QWORD *)&a5[*(int *)(v23 + 24)] = a4;
  return result;
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:relativeToEntity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, char *a13, char *a14, char *a15, char a16, uint64_t a17)
{
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v46;
  char v47;
  char v48;

  v47 = *a14;
  v48 = *a13;
  v46 = *a15;
  v26 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  v27 = a9 + v26[15];
  v28 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(a9, a1, v28);
  v30 = 1.0;
  if (a10 >= 0.0)
    v30 = a10;
  v31 = a9 + v26[5];
  v32 = a9 + v26[6];
  v33 = a9 + v26[8];
  *(float *)v33 = v30;
  *(_BYTE *)(v33 + 4) = 0;
  *(_QWORD *)v31 = a2;
  *(_QWORD *)(v31 + 8) = a3;
  *(_BYTE *)(v31 + 16) = a4 & 1;
  *(_QWORD *)v32 = 0;
  *(_QWORD *)(v32 + 8) = 0;
  *(_BYTE *)(v32 + 16) = 1;
  if ((a7 & 1) == 0)
  {
    *(_QWORD *)v32 = a5;
    *(_QWORD *)(v32 + 8) = a6;
    *(_BYTE *)(v32 + 16) = 0;
  }
  v34 = a9 + v26[7];
  v35 = v26[9];
  v36 = v26[10];
  v37 = v26[11];
  v38 = v26[12];
  v39 = v26[14];
  v40 = a9 + v26[13];
  *(_DWORD *)v34 = a8;
  *(_BYTE *)(v34 + 4) = BYTE4(a8) & 1;
  *(_BYTE *)(a9 + v35) = v48;
  *(_BYTE *)(a9 + v36) = v47;
  v41 = a9 + v39;
  *(_BYTE *)(a9 + v37) = v46;
  *(_BYTE *)(a9 + v38) = a16 & 1;
  *(float *)v40 = a11;
  *(_BYTE *)(v40 + 4) = 0;
  *(float *)v41 = a12;
  *(_BYTE *)(v41 + 4) = 0;
  return outlined assign with take of UUID?(a17, v27);
}

uint64_t __RKEntityStartAnimateActionArguments.init(target:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, float a11@<S2>, double a12@<D3>)
{
  char v21;
  int *started;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21 = *a3;
  started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  v23 = a8 + started[14];
  v24 = type metadata accessor for UUID();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(a8, a1, v24);
  *(_QWORD *)(a8 + started[5]) = a2;
  *(_BYTE *)(a8 + started[6]) = v21;
  *(_BYTE *)(a8 + started[10]) = a4;
  *(double *)(a8 + started[8]) = a10;
  *(double *)(a8 + started[7]) = a9;
  *(float *)(a8 + started[11]) = a11;
  *(_BYTE *)(a8 + started[9]) = a5;
  *(_BYTE *)(a8 + started[12]) = a6;
  v26 = a8 + started[13];
  *(double *)v26 = a12;
  *(_BYTE *)(v26 + 8) = 0;
  return outlined assign with take of UUID?(a7, v23);
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>)
{
  return __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for __RKEntityShowActionArguments, a8, a9, a10, a11, a12, a13);
}

uint64_t __RKEntityHideActionArguments.init(target:duration:distance:ease:easeType:fadeOut:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildOutAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, float a9@<S0>, float a10@<S1>, float a11@<S2>, float a12@<S3>, float a13@<S4>)
{
  return __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)(a1, a2, a3, a4, a5, a6, a7, type metadata accessor for __RKEntityHideActionArguments, a8, a9, a10, a11, a12, a13);
}

uint64_t __RKEntityShowActionArguments.init(target:duration:distance:ease:easeType:fadeIn:finalOpacity:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:animationStyle:buildInAnimationType:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, char a4@<W3>, char a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t (*a8)(_QWORD)@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>, float a14@<S4>)
{
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  v24 = *a2;
  v25 = *a3;
  v26 = *a6;
  v27 = *a7;
  v28 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(a9, a1, v28);
  if (a10 < 0.0)
    a10 = 1.0;
  v29 = (int *)a8(0);
  v30 = a9 + v29[5];
  v31 = a9 + v29[6];
  v32 = v29[7];
  v33 = v29[8];
  v34 = v29[9];
  v35 = a9 + v29[10];
  v36 = v29[11];
  v37 = a9 + v29[12];
  v38 = v29[14];
  v39 = a9 + v29[13];
  result = v29[15];
  *(float *)v30 = a10;
  *(_BYTE *)(v30 + 4) = 0;
  *(float *)v31 = a11;
  *(_BYTE *)(v31 + 4) = 0;
  *(_BYTE *)(a9 + v32) = v24;
  *(_BYTE *)(a9 + v33) = v25;
  *(_BYTE *)(a9 + v34) = a4;
  *(float *)v35 = a12;
  *(_BYTE *)(v35 + 4) = 0;
  *(_BYTE *)(a9 + v36) = a5;
  *(float *)v37 = a13;
  *(_BYTE *)(v37 + 4) = 0;
  *(float *)v39 = a14;
  *(_BYTE *)(v39 + 4) = 0;
  *(_BYTE *)(a9 + v38) = v26;
  *(_BYTE *)(a9 + result) = v27;
  return result;
}

RealityKit::__RKWaitActionArguments __swiftcall __RKWaitActionArguments.init(duration:)(RealityKit::__RKWaitActionArguments duration)
{
  float *v1;

  if (duration.duration < 0.0)
    duration.duration = 1.0;
  *v1 = duration.duration;
  return duration;
}

RealityKit::__RKEntityTriggerSpecification::Name_optional __swiftcall __RKEntityTriggerSpecification.Name.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityTriggerSpecification::Name_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityTriggerSpecification.Name.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 14;
  if (v5 < 0xE)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t __RKEntityTriggerSpecification.Name.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA0B4BC + 4 * byte_21BE52950[*v0]))(1734439524, 0xE400000000000000);
}

uint64_t sub_21BA0B4BC()
{
  return 0x746867696CLL;
}

uint64_t sub_21BA0B4D0()
{
  return 0x74416B6F6F6CLL;
}

uint64_t sub_21BA0B4E4()
{
  return 0x6E656D6563616C70;
}

uint64_t sub_21BA0B574()
{
  return 0x72656D6974;
}

uint64_t sub_21BA0B588()
{
  return 0x6F6973696C6C6F63;
}

uint64_t sub_21BA0B5A8()
{
  return 0x6D6F74737563;
}

unint64_t sub_21BA0B5BC()
{
  return 0xD000000000000013;
}

uint64_t sub_21BA0B5D8()
{
  return 0x70756F7267;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(a1, a2, (void (*)(uint64_t))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(void))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(uint64_t))__RKEntityTriggerSpecification.Name.rawValue.getter);
}

RealityKit::__RKEntityTriggerSpecification::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.Name(Swift::String *a1)
{
  return __RKEntityTriggerSpecification.Name.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.Name@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKEntityTriggerSpecification.Name.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x7372656767697274;
  a1[1] = 0xE800000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return 0x7372656767697274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x746567726174;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x65636E6174736964;
  if (v2 != 1)
  {
    v5 = 1701869940;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746567726174;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65636E6174736964;
  if (*v0 != 1)
    v1 = 1701869940;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityTriggerSpecification.ProximityCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CollisionCodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE400000000000000;
  v5 = 1936154996;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x800000021BE81090;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746567726174;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 1936154996;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CollisionCodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CollisionCodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  *a3 = v4 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys(_QWORD *a1@<X8>)
{
  *a1 = 0x696669746E656469;
  a1[1] = 0xEA00000000007265;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.GroupCodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, BOOL *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x696669746E656469;
  if (*v1)
    v2 = 0x72416D6F74737563;
  v3 = 0xEA00000000007265;
  if (*v1)
    v3 = 0xEF73746E656D7567;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x72416D6F74737563;
  else
    return 0x696669746E656469;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(a1, v2, a2);
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityTriggerSpecification.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(*a1, v3);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE900000000000073;
  v5 = 0x746E656D75677261;
  if (v2 != 1)
  {
    v5 = 0x6F697469646E6F63;
    v4 = 0xEA0000000000736ELL;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701667182;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E656D75677261;
  if (*v0 != 1)
    v1 = 0x6F697469646E6F63;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &outlined read-only object #0 of __RKEntityTriggerSpecification.CodingKeys.init(rawValue:);
  result = specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(a1, v3);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTriggerSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void __RKEntityTriggerSpecification.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_21BA0C690 + 4 * byte_21BE5295E[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BA0C690()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;

  *v0 = 4;
  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t __RKEntityTriggerSpecification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unsigned __int8 v60;

  v55 = a2;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.GroupCodingKeys>);
  v39 = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v51 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.TapTargetCodingKeys>);
  v38 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v50 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys>);
  v36 = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v52 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CustomCodingKeys>);
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v49 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CollisionCodingKeys>);
  v46 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v53 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for UUID();
  v45 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v56 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v47 = (char *)&v31 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v44 = (char *)&v31 - v12;
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.ProximityCodingKeys>);
  v35 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTriggerSpecification.CodingKeys>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v59 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  v23 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v23)
  {
    v33 = v14;
    v58 = v16;
    v34 = v21;
    v60 = 0;
    v24 = KeyedDecodingContainer.decode(_:forKey:)();
    v26 = v25;
    v32 = v15;
    swift_bridgeObjectRetain();
    v27._countAndFlagsBits = v24;
    v27._object = v26;
    __RKEntityTriggerSpecification.Name.init(rawValue:)(v27);
    v28 = v60;
    if (v60 != 14)
    {
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
    lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError();
    swift_allocError();
    *v29 = v24;
    v29[1] = (uint64_t)v26;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v18, v32);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
}

void sub_21BA0CBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 120) + 8))(v0, *(_QWORD *)(v1 - 328));
  v2 = *(_QWORD *)(v1 - 144);
  v3 = *(_QWORD *)(v1 - 312);
  swift_storeEnumTagMultiPayload();
  outlined init with take of __RKEntityActionSpecification(v3, v2, type metadata accessor for __RKEntityTriggerSpecification);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v1 - 112));
  JUMPOUT(0x21BA0CB78);
}

void sub_21BA0CE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)(v3 - 96) = 1;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
  v4 = *(_QWORD *)(v3 - 160);
  v5 = *(_QWORD *)(v3 - 328);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v2)
  {
    *(_BYTE *)(v3 - 96) = 0;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v6 = v4;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v7 = *(_QWORD *)(v3 - 120);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    *(_BYTE *)(v3 - 97) = 2;
    lazy protocol witness table accessor for type [UUID] and conformance <A> [A]();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (*(_QWORD *)(v3 - 96))
      v8 = *(_QWORD *)(v3 - 96);
    else
      v8 = MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(_BYTE *)(v3 - 97) = 1;
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8))(v6, v0);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
    v9 = *(_QWORD *)(v3 - 96);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
    v11 = *(int *)(v10 + 48);
    v12 = *(int *)(v10 + 64);
    v13 = *(_QWORD *)(v3 - 312);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v3 - 224) + 32))(v13, *(_QWORD *)(v3 - 208), *(_QWORD *)(v3 - 152));
    *(_QWORD *)(v13 + v11) = v8;
    *(_QWORD *)(v13 + v12) = v9;
    JUMPOUT(0x21BA0CE1CLL);
  }
  JUMPOUT(0x21BA0CB6CLL);
}

void sub_21BA0CEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  *(_BYTE *)(v2 - 96) = 1;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
  v3 = *(_QWORD *)(v2 - 192);
  v4 = *(_QWORD *)(v2 - 328);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (!v1)
  {
    v5 = *(_QWORD *)(v2 - 264);
    v6 = KeyedDecodingContainer.decode(_:forKey:)();
    v8 = v7;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 288) + 8))(v3, v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v4);
    v9 = *(uint64_t **)(v2 - 312);
    *v9 = v6;
    v9[1] = v8;
    JUMPOUT(0x21BA0CE1CLL);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v4);
  JUMPOUT(0x21BA0CB70);
}

void sub_21BA0CF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  *(_BYTE *)(v2 - 96) = 1;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
  v3 = *(_QWORD *)(v2 - 168);
  v4 = *(_QWORD *)(v2 - 328);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
    JUMPOUT(0x21BA0CFD4);
  *(_BYTE *)(v2 - 96) = 0;
  v5 = *(_QWORD *)(v2 - 240);
  v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(_BYTE *)(v2 - 97) = 1;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 296) + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v4);
  v9 = *(_QWORD *)(v2 - 96);
  v10 = *(uint64_t **)(v2 - 312);
  *v10 = v6;
  v10[1] = v8;
  v10[2] = v9;
  JUMPOUT(0x21BA0CE1CLL);
}

void sub_21BA0CFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 96) = 1;
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
  v3 = *(_QWORD *)(v2 - 176);
  v4 = *(_QWORD *)(v2 - 328);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v1)
    JUMPOUT(0x21BA0D038);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
  lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]();
  v5 = *(_QWORD *)(v2 - 248);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = *(_QWORD *)(v2 - 120);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 272) + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  **(_QWORD **)(v2 - 312) = *(_QWORD *)(v2 - 96);
  JUMPOUT(0x21BA0CE1CLL);
}

uint64_t __RKEntityTriggerSpecification.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;

  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.GroupCodingKeys>);
  v77 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v80 = (char *)&v71 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys>);
  v78 = *(_QWORD *)(v90 - 8);
  MEMORY[0x24BDAC7A8](v90);
  v84 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CustomCodingKeys>);
  v75 = *(_QWORD *)(v85 - 8);
  MEMORY[0x24BDAC7A8](v85);
  v83 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CollisionCodingKeys>);
  v79 = *(_QWORD *)(v91 - 8);
  MEMORY[0x24BDAC7A8](v91);
  v89 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.ProximityCodingKeys>);
  v76 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v86 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.TapTargetCodingKeys>);
  v74 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v81 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for UUID();
  v95 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v92 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v71 - v10;
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v71 - v13;
  v94 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v94);
  v16 = (uint64_t *)((char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTriggerSpecification.CodingKeys>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v96;
  __RKEntityTriggerSpecification.name.getter();
  __RKEntityTriggerSpecification.Name.rawValue.getter();
  LOBYTE(v99) = 0;
  v22 = v97;
  KeyedEncodingContainer.encode(_:forKey:)();
  v97 = v22;
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v24 = v95;
    v72 = v18;
    v73 = v20;
    swift_bridgeObjectRelease();
    outlined init with copy of __RKEntityActionSpecification(v21, (uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
    v25 = v16;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v26 = *((_BYTE *)v16
              + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType))
                       + 64));
        v27 = v11;
        v28 = v93;
        (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(v11, v16, v93);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys();
        v29 = v86;
        v30 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
        v31 = v88;
        v32 = v97;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v97 = v32;
        if (v32)
        {
          (*(void (**)(char *, uint64_t))(v76 + 8))(v29, v31);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v28);
LABEL_13:
          v68 = *(uint64_t (**)(char *, uint64_t))(v72 + 8);
        }
        else
        {
          LOBYTE(v99) = 1;
          KeyedEncodingContainer.encode(_:forKey:)();
          v97 = 0;
          LOBYTE(v99) = v26;
          v98 = 2;
          lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType();
          v65 = v97;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v66 = v29;
          v67 = v72;
          v97 = v65;
          (*(void (**)(char *, uint64_t))(v76 + 8))(v66, v31);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v28);
          v68 = *(uint64_t (**)(char *, uint64_t))(v67 + 8);
        }
        v50 = v30;
        goto LABEL_17;
      case 1u:
        v33 = v93;
        (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(v14, v16, v93);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys();
        v34 = v81;
        v35 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
        v36 = v82;
        v37 = v97;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v97 = v37;
        (*(void (**)(char *, uint64_t))(v74 + 8))(v34, v36);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v14, v33);
        return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v35, v17);
      case 2u:
        v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        v96 = *(_QWORD *)((char *)v16 + *(int *)(v38 + 48));
        v39 = *(_QWORD *)((char *)v16 + *(int *)(v38 + 64));
        v40 = v92;
        v41 = v25;
        v42 = v93;
        (*(void (**)(char *, _QWORD *, uint64_t))(v24 + 32))(v92, v41, v93);
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys();
        v43 = v89;
        v44 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
        v45 = v91;
        v46 = v97;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v97 = v46;
        if (v46)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v45);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v40, v42);
          return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v44, v17);
        }
        else
        {
          v62 = v44;
          v99 = v96;
          v98 = 2;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
          lazy protocol witness table accessor for type [UUID] and conformance <A> [A]();
          v63 = v97;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v97 = v63;
          swift_bridgeObjectRelease();
          if (v63)
          {
            (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v45);
            (*(void (**)(char *, uint64_t))(v24 + 8))(v92, v42);
          }
          else
          {
            v99 = v39;
            v98 = 1;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
            v69 = v97;
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            v70 = v92;
            v97 = v69;
            (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v45);
            (*(void (**)(char *, uint64_t))(v24 + 8))(v70, v42);
          }
          (*(void (**)(char *, uint64_t))(v72 + 8))(v62, v17);
          return swift_bridgeObjectRelease();
        }
      case 3u:
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys();
        v47 = v83;
        v30 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v48 = v85;
        v49 = v97;
        KeyedEncodingContainer.encode(_:forKey:)();
        v97 = v49;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v48);
        goto LABEL_13;
      case 4u:
        v51 = v16[2];
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys();
        v52 = v84;
        v53 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v99) = 0;
        v54 = v90;
        v55 = v97;
        KeyedEncodingContainer.encode(_:forKey:)();
        v97 = v55;
        if (v55)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v54);
          v68 = *(uint64_t (**)(char *, uint64_t))(v72 + 8);
          v50 = v53;
LABEL_17:
          result = v68(v50, v17);
        }
        else
        {
          swift_bridgeObjectRelease();
          v99 = v51;
          v98 = 1;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
          lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
          v64 = v97;
          KeyedEncodingContainer.encode<A>(_:forKey:)();
          v97 = v64;
          (*(void (**)(char *, uint64_t))(v78 + 8))(v52, v54);
          (*(void (**)(char *, uint64_t))(v72 + 8))(v53, v17);
          result = swift_bridgeObjectRelease();
        }
        break;
      case 5u:
        v56 = *v16;
        LOBYTE(v99) = 1;
        lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys();
        v57 = v80;
        v58 = v17;
        v59 = v73;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        v99 = v56;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
        lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]();
        v60 = v87;
        v61 = v97;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        v97 = v61;
        (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v60);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v58);
        return swift_bridgeObjectRelease();
      default:
        (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v17);
        return outlined destroy of __RKEntityActionSpecification((uint64_t)v16, type metadata accessor for __RKEntityTriggerSpecification);
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityTriggerSpecification@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityTriggerSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityTriggerSpecification(_QWORD *a1)
{
  return __RKEntityTriggerSpecification.encode(to:)(a1);
}

RealityKit::__RKEntityActionSpecification::Name_optional __swiftcall __RKEntityActionSpecification.Name.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  RealityKit::__RKEntityActionSpecification::Name_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 4;
  switch(v3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      v5 = 1;
      goto LABEL_6;
    case 2:
      v5 = 2;
      goto LABEL_6;
    case 3:
      v5 = 3;
LABEL_6:
      v6 = v5;
      break;
    case 4:
      break;
    case 5:
      v6 = 5;
      break;
    case 6:
      v6 = 6;
      break;
    case 7:
      v6 = 7;
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    default:
      v6 = 22;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t __RKEntityActionSpecification.Name.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA0E2BC + 4 * byte_21BE529AA[*v0]))(0x6F69647561, 0xE500000000000000);
}

uint64_t sub_21BA0E2BC()
{
  return 0x635365676E616863;
}

uint64_t sub_21BA0E2DC()
{
  return 0x6D6F74737563;
}

uint64_t sub_21BA0E2F0()
{
  return 0x7369736168706D65;
}

uint64_t sub_21BA0E308()
{
  return 0x69746E4565646166;
}

uint64_t sub_21BA0E454()
{
  return 0x6E41656C67676F74;
}

unint64_t sub_21BA0E478()
{
  return 0xD000000000000010;
}

uint64_t sub_21BA0E494()
{
  return 0x726F66736E617274;
}

uint64_t sub_21BA0E4B4()
{
  return 1953063287;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionSpecification.Name(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(a1, a2, (void (*)(uint64_t))__RKEntityActionSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = Hasher.init(_seed:)();
  a3(v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(void))__RKEntityActionSpecification.Name.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(a1, a2, a3, (void (*)(uint64_t))__RKEntityActionSpecification.Name.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityTriggerSpecification.Name(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = Hasher.init(_seed:)();
  a4(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityActionSpecification::Name_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionSpecification.Name(Swift::String *a1)
{
  return __RKEntityActionSpecification.Name.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionSpecification.Name@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = __RKEntityActionSpecification.Name.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void __RKEntityActionSpecification.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v1);
  outlined init with copy of __RKEntityActionSpecification(v0, (uint64_t)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v4 = (char *)sub_21BA0E6CC + 4 * byte_21BE529C0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BA0E6CC()
{
  uint64_t v0;
  _BYTE *v1;

  *v1 = 0;
  return outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for __RKEntityActionSpecification);
}

void __RKEntityActionSpecification.target.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t started;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD);
  char *v34;
  _QWORD v35[14];

  v35[12] = a1;
  v1 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v1);
  v35[11] = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v3);
  v35[10] = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v5);
  v35[9] = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v7);
  v35[8] = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v9);
  v35[7] = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v11);
  v35[6] = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v13);
  v35[5] = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v15);
  v35[4] = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v17);
  v35[3] = (char *)v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v19);
  v35[2] = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v21);
  v35[1] = (char *)v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v23);
  v24 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v24);
  v25 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v25);
  v26 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v26);
  v27 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v27);
  v28 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v28);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v30 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v30);
  v31 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v31);
  outlined init with copy of __RKEntityActionSpecification(v35[13], (uint64_t)v35 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0), v33);
  v34 = (char *)sub_21BA0EC5C + 4 * byte_21BE529D6[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BA0EC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  outlined init with take of __RKEntityActionSpecification(v1, v0, type metadata accessor for __RKEntityAudioActionArguments);
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v2 - 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v0, v3);
  outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for __RKEntityAudioActionArguments);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v5, 0, 1, v3);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityActionSpecification.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityActionSpecification.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityActionSpecification.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityActionSpecification.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityActionSpecification.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  if (v4 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v4)
    v6 = 0;
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityActionSpecification.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701667182;
  if (*v1)
    v2 = 0x746E656D75677261;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE900000000000073;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E656D75677261;
  else
    return 1701667182;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityActionSpecification.CodingKeys@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityActionSpecification.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys(a1, v2, a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  Swift::Int v6;
  uint64_t result;
  char v8;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityActionSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityActionSpecification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD v40[4];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t started;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unsigned __int8 v81;

  v78 = a2;
  v75 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v75);
  v76 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v74);
  v73 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v71);
  v72 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v69);
  v70 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v67);
  v68 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v65);
  v66 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v63);
  v64 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v59);
  v60 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v58);
  v77 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v56);
  v57 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v54);
  v55 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v52);
  v53 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v50);
  v51 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v46);
  v47 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v45 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v42);
  v43 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v41);
  v22 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityActionSpecification.CodingKeys>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)v40 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = a1[3];
  v79 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v30);
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  v31 = v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v31)
  {
    v40[2] = v22;
    v32 = v24;
    v40[3] = v29;
    v80 = v27;
    v81 = 0;
    v33 = KeyedDecodingContainer.decode(_:forKey:)();
    v35 = v34;
    v40[1] = 0;
    swift_bridgeObjectRetain();
    v36._countAndFlagsBits = v33;
    v36._object = v35;
    __RKEntityActionSpecification.Name.init(rawValue:)(v36);
    v37 = v81;
    if (v81 != 22)
    {
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
    lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError();
    swift_allocError();
    *v38 = v33;
    v38[1] = (uint64_t)v35;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v26, v23);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
}

void sub_21BA0F97C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 - 128) = 1;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments and conformance __RKEntityAudioActionArguments, type metadata accessor for __RKEntityAudioActionArguments, (uint64_t)&protocol conformance descriptor for __RKEntityAudioActionArguments);
  v5 = *(_QWORD *)(v4 - 336);
  v6 = *(_QWORD *)(v4 - 472);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v6)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v1);
    v7 = *(_QWORD *)(v4 - 456);
    outlined init with take of __RKEntityActionSpecification(v5, v7, type metadata accessor for __RKEntityAudioActionArguments);
    swift_storeEnumTagMultiPayload();
    outlined init with take of __RKEntityActionSpecification(v7, v0, type metadata accessor for __RKEntityActionSpecification);
    JUMPOUT(0x21BA0F924);
  }
  JUMPOUT(0x21BA0F914);
}

uint64_t __RKEntityActionSpecification.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v32;
  _QWORD v33[3];
  uint64_t started;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;

  v67 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v67);
  v62 = (char *)v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v69);
  v61 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v70);
  v60 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v68);
  v59 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v57);
  v58 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v55);
  v56 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v53);
  v54 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v51);
  v52 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v50);
  v66 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v48);
  v49 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v47);
  v64 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v44);
  v65 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v42);
  v43 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v40);
  v41 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v39);
  v38 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v36);
  v37 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v35 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v63);
  v24 = (char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityActionSpecification.CodingKeys>);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v28 = (char *)v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v29 = v71;
  __RKEntityActionSpecification.name.getter();
  __RKEntityActionSpecification.Name.rawValue.getter();
  LOBYTE(v73) = 0;
  v30 = v72;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v30)
  {
    v33[0] = v20;
    v33[1] = v22;
    v33[2] = 0;
    v72 = v28;
    swift_bridgeObjectRelease();
    outlined init with copy of __RKEntityActionSpecification(v29, (uint64_t)v24, type metadata accessor for __RKEntityActionSpecification);
    v32 = (char *)&loc_21BA10CA4 + 4 * word_21BE52A18[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  return swift_bridgeObjectRelease();
}

uint64_t static __RKChangeSceneActionArguments.== infix(_:_:)()
{
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  type metadata accessor for __RKChangeSceneActionArguments(0);
  return static UUID.== infix(_:_:)();
}

uint64_t static __RKEntityCustomActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && ((v4 = type metadata accessor for __RKEntityCustomActionArguments(0),
         v5 = *(int *)(v4 + 20),
         v6 = *(_QWORD *)(a1 + v5),
         v7 = *(_QWORD *)(a1 + v5 + 8),
         v8 = (_QWORD *)(a2 + v5),
         v6 == *v8)
      ? (v9 = v7 == v8[1])
      : (v9 = 0),
        v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    return specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(v4 + 24)), *(_QWORD *)(a2 + *(int *)(v4 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t static __RKFadeSceneActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(float *)a1 != *(float *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return 0;
  }
  else
  {
    if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return 1;
}

uint64_t static __RKEntityHideActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t static __RKEntityShowActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

BOOL static __RKWaitActionArguments.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static __RKEntitySwapEntityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (v4 = type metadata accessor for __RKEntitySwapEntityActionArguments(0), (static UUID.== infix(_:_:)() & 1) != 0)
    && (specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(v4 + 24), a2 + *(int *)(v4 + 24), type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0)
  {
    v5 = specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(v4 + 28), a2 + *(int *)(v4 + 28), type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

BOOL static __RKEntitySetOpacityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (v4 = type metadata accessor for __RKEntitySetOpacityActionArguments(0),
        *(float *)(a1 + *(int *)(v4 + 20)) == *(float *)(a2 + *(int *)(v4 + 20))))
  {
    return *(float *)(a1 + *(int *)(v4 + 24)) == *(float *)(a2 + *(int *)(v4 + 24));
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionSpecification@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityActionSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionSpecification(_QWORD *a1)
{
  return __RKEntityActionSpecification.encode(to:)(a1);
}

RealityKit::__RKEntityGroupActionOrder_optional __swiftcall __RKEntityGroupActionOrder.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  RealityKit::__RKEntityGroupActionOrder_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityGroupActionOrder.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t __RKEntityGroupActionOrder.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x65636E6575716573;
  else
    return 0x65727275636E6F63;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityGroupActionOrder()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityGroupActionOrder()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityGroupActionOrder()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityGroupActionOrder_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityGroupActionOrder(Swift::String *a1)
{
  return __RKEntityGroupActionOrder.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityGroupActionOrder(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x65727275636E6F63;
  if (*v1)
    v2 = 0x65636E6575716573;
  v3 = 0xEA0000000000746ELL;
  if (*v1)
    v3 = 0xE900000000000064;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityGroupActionOrder()
{
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityGroupActionOrder()
{
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityGroupActionOrder(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void __RKEntityActionGroupArguments.order.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *__RKEntityActionGroupArguments.order.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.order.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityActionGroupArguments.actions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.actions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.exclusive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKEntityActionGroupArguments.exclusive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.exclusive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.loopCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RKEntityActionGroupArguments.loopCount.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.loopCount.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityActionGroupArguments.exclusiveBlocks.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t __RKEntityActionGroupArguments.exclusiveBlocks.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

uint64_t (*__RKEntityActionGroupArguments.exclusiveBlocks.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall __RKEntityActionGroupArguments.init(order:actions:exclusive:loopCount:exclusiveBlocks:)(RealityKit::__RKEntityActionGroupArguments *__return_ptr retstr, RealityKit::__RKEntityGroupActionOrder order, Swift::OpaquePointer actions, Swift::Bool exclusive, Swift::Int loopCount, Swift::Bool exclusiveBlocks)
{
  retstr->order = *(_BYTE *)order;
  retstr->actions = actions;
  retstr->exclusive.value = exclusive;
  retstr->loopCount.value = loopCount;
  retstr->loopCount.is_nil = 0;
  retstr->exclusiveBlocks.value = exclusiveBlocks;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityActionGroupArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA11D84 + 4 * byte_21BE52A44[*v0]))(0x726564726FLL, 0xE500000000000000);
}

uint64_t sub_21BA11D84()
{
  return 0x736E6F69746361;
}

uint64_t sub_21BA11D9C()
{
  return 0x766973756C637865;
}

uint64_t sub_21BA11DB8()
{
  return 0x6E756F43706F6F6CLL;
}

uint64_t sub_21BA11DD8()
{
  return 0x766973756C637865;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityActionGroupArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityActionGroupArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityActionGroupArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityActionGroupArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityActionGroupArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityActionGroupArguments.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  _DWORD v11[4];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityActionGroupArguments.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = *((_QWORD *)v1 + 1);
  v13 = v1[16];
  v12 = *((_QWORD *)v1 + 3);
  v9 = v1[32];
  v11[2] = v1[33];
  v11[3] = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v8;
  v20 = 0;
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v15 = v14;
    v19 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v18 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v17 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v16 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __RKEntityActionGroupArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityActionGroupArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v23 = 0;
  lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
  v22 = 1;
  lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v10 = v18;
  v21 = 2;
  swift_bridgeObjectRetain();
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v20 = 3;
  v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  HIDWORD(v15) = v13;
  v16 = v11;
  v19 = 4;
  v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_BYTE *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = BYTE4(v15) & 1;
  *(_BYTE *)(a2 + 33) = v14;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityActionGroupArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityActionGroupArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityActionGroupArguments(_QWORD *a1)
{
  return __RKEntityActionGroupArguments.encode(to:)(a1);
}

float __RKWaitActionArguments.duration.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void __RKWaitActionArguments.duration.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*__RKWaitActionArguments.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKWaitActionArguments.CodingKeys()
{
  return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKWaitActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKWaitActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKWaitActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKWaitActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKWaitActionArguments.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t __RKWaitActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKWaitActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKWaitActionArguments@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return __RKWaitActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKWaitActionArguments(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKWaitActionArguments.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKWaitActionArguments(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t (*__RKEntityCustomActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter()
{
  return __RKEntityCustomActionArguments.actionIdentifier.getter(type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  return __RKEntityCustomActionArguments.actionIdentifier.setter(a1, a2, type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t (*__RKEntityCustomActionArguments.actionIdentifier.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityCustomActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.customArguments.getter()
{
  type metadata accessor for __RKEntityCustomActionArguments(0);
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityCustomActionArguments.customArguments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for __RKEntityCustomActionArguments(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*__RKEntityCustomActionArguments.customArguments.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityCustomActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityCustomActionArguments.optionalTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t, __n128);
  uint64_t result;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v20 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v15((char *)&v20 - v13, v2, v7, v12);
  UUID.init(uuidString:)();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
    v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    v18 = *(void (**)(char *, uint64_t))(v8 + 8);
    v18(v10, v7);
    v18(v14, v7);
    if ((v17 & 1) != 0)
    {
      v19 = 1;
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v15)(a1, v2, v7);
      v19 = 0;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v19, 1, v7);
  }
  return result;
}

uint64_t key path setter for __RKEntityCustomActionArguments.optionalTarget : __RKEntityCustomActionArguments(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v4);
}

uint64_t __RKEntityCustomActionArguments.optionalTarget.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v13(v8, 1, v9) != 1)
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v1, v12, v9);
  }
  UUID.init(uuidString:)();
  result = ((uint64_t (*)(char *, uint64_t, uint64_t))v13)(v5, 1, v9);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v5, v9);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(v1, v12, v9);
  }
  __break(1u);
  return result;
}

void (*__RKEntityCustomActionArguments.optionalTarget.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  __RKEntityCustomActionArguments.optionalTarget.getter((uint64_t)v4);
  return __RKEntityCustomActionArguments.optionalTarget.modify;
}

void __RKEntityCustomActionArguments.optionalTarget.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of UUID?((uint64_t)v3, (uint64_t)v2);
    __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    __RKEntityCustomActionArguments.optionalTarget.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t specialized static Dictionary<>.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  int v23;
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  double v28;
  double v29;
  int v30;
  char v32;
  uint64_t v34;
  int64_t v35;
  int64_t v36;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v34 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v35 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v36 = v4;
      v9 = v8 | (v4 << 6);
      goto LABEL_22;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v10 >= v35)
      return 1;
    v11 = *(_QWORD *)(v34 + 8 * v10);
    v12 = v4 + 1;
    if (!v11)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v35)
        return 1;
      v11 = *(_QWORD *)(v34 + 8 * v12);
      if (!v11)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v35)
          return 1;
        v11 = *(_QWORD *)(v34 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v7 = (v11 - 1) & v11;
    v36 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_22:
    v14 = v3;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v9);
    v16 = *v15;
    v17 = v15[1];
    v18 = *(_QWORD *)(v3 + 56) + 80 * v9;
    v20 = *(_QWORD *)(v18 + 40);
    v19 = *(_QWORD *)(v18 + 48);
    v22 = *(double *)(v18 + 56);
    v21 = *(double *)(v18 + 64);
    v23 = *(unsigned __int8 *)(v18 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v27 = *(_QWORD *)(a2 + 56) + 80 * v24;
    v29 = *(double *)(v27 + 56);
    v28 = *(double *)(v27 + 64);
    v30 = *(unsigned __int8 *)(v27 + 72);
    if (*(_QWORD *)(v27 + 40) == v20 && *(_QWORD *)(v27 + 48) == v19)
    {
      swift_bridgeObjectRelease();
      result = 0;
    }
    else
    {
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v32 & 1) == 0)
        return result;
    }
    if (v29 == v22 && v28 == v21)
    {
      v3 = v14;
      v4 = v36;
      if (((v23 ^ v30) & 1) == 0)
        continue;
    }
    return result;
  }
  v13 = v4 + 4;
  if (v4 + 4 >= v35)
    return 1;
  v11 = *(_QWORD *)(v34 + 8 * v13);
  if (v11)
  {
    v12 = v4 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v35)
      return 1;
    v11 = *(_QWORD *)(v34 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
          break;
      }
    }
LABEL_22:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 3;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityCustomActionArguments.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x72416D6F74737563;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityCustomActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityCustomActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityCustomActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityCustomActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityCustomActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[16];
  uint64_t v12;
  char v13;
  char v14;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityCustomActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v14 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for __RKEntityCustomActionArguments(0);
    v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = *(_QWORD *)(v3 + *(int *)(v9 + 24));
    v11[15] = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityCustomActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;

  v22 = a2;
  v23 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityCustomActionArguments.CodingKeys>);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys();
  v26 = v7;
  v11 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v5;
  v27 = a1;
  v13 = (uint64_t)v10;
  v31 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v15 = v23;
  v14 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v3;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v14, v15);
  v30 = 1;
  v16 = KeyedDecodingContainer.decode(_:forKey:)();
  v17 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v17 = v16;
  v17[1] = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  v29 = 2;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v19 = (uint64_t)v27;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v25);
  *(_QWORD *)(v13 + *(int *)(v8 + 24)) = v28;
  outlined init with copy of __RKEntityActionSpecification(v13, v22, type metadata accessor for __RKEntityCustomActionArguments);
  __swift_destroy_boxed_opaque_existential_1(v19);
  return outlined destroy of __RKEntityActionSpecification(v13, type metadata accessor for __RKEntityCustomActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityCustomActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityCustomActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityCustomActionArguments(_QWORD *a1)
{
  return __RKEntityCustomActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && ((v6 = *(int *)(a3 + 20),
         v7 = *(_QWORD *)(a1 + v6),
         v8 = *(_QWORD *)(a1 + v6 + 8),
         v9 = (_QWORD *)(a2 + v6),
         v7 == *v9)
      ? (v10 = v8 == v9[1])
      : (v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    return specialized static Dictionary<>.== infix(_:_:)(*(_QWORD *)(a1 + *(int *)(a3 + 24)), *(_QWORD *)(a2 + *(int *)(a3 + 24)));
  }
  else
  {
    return 0;
  }
}

uint64_t (*protocol witness for __RKSpecificationHasTarget.target.modify in conformance __RKEntityCustomActionArguments())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path setter for __RKChangeSceneActionArguments.target : __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v8, a1, v4, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a2, v8, v4);
}

uint64_t (*__RKChangeSceneActionArguments.target.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void (*v8)(void);

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for UUID();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v8 = *(void (**)(void))(v5 + 16);
  v3[4] = v7;
  v3[5] = v8;
  v8();
  return __RKChangeSceneActionArguments.target.modify;
}

uint64_t (*__RKChangeSceneActionArguments.sceneRoot.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKChangeSceneActionArguments, a1);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKChangeSceneActionArguments);
}

uint64_t (*__RKChangeSceneActionArguments.targetSceneIdentifier.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKChangeSceneActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKChangeSceneActionArguments.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x6F6F52656E656373;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKChangeSceneActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKChangeSceneActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKChangeSceneActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKChangeSceneActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKChangeSceneActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKChangeSceneActionArguments.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKChangeSceneActionArguments(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKChangeSceneActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  void (*v18)(uint64_t, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;

  v22 = a2;
  v26 = type metadata accessor for UUID();
  v24 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v23 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)&v20 - v6;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKChangeSceneActionArguments.CodingKeys>);
  v7 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v10;
  v21 = a1;
  v13 = (uint64_t)v12;
  v15 = v23;
  v14 = v24;
  v29 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v16;
  v18 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v18(v13, v17, v26);
  v28 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v27);
  v18(v13 + *(int *)(v20 + 20), v15, v26);
  outlined init with copy of __RKEntityActionSpecification(v13, v22, type metadata accessor for __RKChangeSceneActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return outlined destroy of __RKEntityActionSpecification(v13, type metadata accessor for __RKChangeSceneActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKChangeSceneActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKChangeSceneActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKChangeSceneActionArguments(_QWORD *a1)
{
  return __RKChangeSceneActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKChangeSceneActionArguments()
{
  if ((static UUID.== infix(_:_:)() & 1) != 0)
    return static UUID.== infix(_:_:)();
  else
    return 0;
}

uint64_t (*protocol witness for __RKSpecificationHasTarget.target.modify in conformance __RKChangeSceneActionArguments(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void (*v8)(void);

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for UUID();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v8 = *(void (**)(void))(v5 + 16);
  v3[4] = v7;
  v3[5] = v8;
  v8();
  return __RKChangeSceneActionArguments.target.modify;
}

void __RKChangeSceneActionArguments.target.modify(void **a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = (void *)v2[4];
    v5 = v2[2];
    v4 = (void *)v2[3];
    v7 = *v2;
    v6 = v2[1];
    ((void (*)(void *, void *, uint64_t))v2[5])(v4, v3, v6);
    (*(void (**)(uint64_t, void *, uint64_t))(v5 + 40))(v7, v4, v6);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v3, v6);
  }
  else
  {
    v4 = (void *)v2[3];
    v3 = (void *)v2[4];
    (*(void (**)(_QWORD, void *, _QWORD))(v2[2] + 40))(*v2, v3, v2[1]);
  }
  free(v3);
  free(v4);
  free(v2);
}

float __RKFadeSceneActionArguments.targetOpacity.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void __RKFadeSceneActionArguments.targetOpacity.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*__RKFadeSceneActionArguments.targetOpacity.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKFadeSceneActionArguments.duration.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t __RKFadeSceneActionArguments.duration.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t (*__RKFadeSceneActionArguments.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityKit::__RKFadeSceneActionArguments __swiftcall __RKFadeSceneActionArguments.init(targetOpacity:duration:)(Swift::Float targetOpacity, Swift::Float duration)
{
  uint64_t v2;
  RealityKit::__RKFadeSceneActionArguments result;

  if (duration < 0.0)
    duration = 0.0;
  *(Swift::Float *)v2 = targetOpacity;
  *(Swift::Float *)(v2 + 4) = duration;
  *(_BYTE *)(v2 + 8) = 0;
  result.duration.value = duration;
  result.targetOpacity = targetOpacity;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKFadeSceneActionArguments.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E6F697461727564;
  else
    return 0x704F746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKFadeSceneActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKFadeSceneActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKFadeSceneActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKFadeSceneActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKFadeSceneActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKFadeSceneActionArguments.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(unsigned int *)(v1 + 4);
  v8 = *(_BYTE *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12 = 1;
    v11 = v8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __RKFadeSceneActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  int v10;
  uint64_t v12;
  _BYTE v13[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKFadeSceneActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13[15] = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v13[14] = 1;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *(_DWORD *)a2 = v10;
    *(_DWORD *)(a2 + 4) = v12;
    *(_BYTE *)(a2 + 8) = BYTE4(v12) & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKFadeSceneActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKFadeSceneActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKFadeSceneActionArguments(_QWORD *a1)
{
  return __RKFadeSceneActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKFadeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  char v2;

  if (*(float *)a1 == *(float *)a2)
  {
    v2 = *(_BYTE *)(a2 + 8);
    if ((*(_BYTE *)(a1 + 8) & 1) != 0)
    {
      if (*(_BYTE *)(a2 + 8))
        return 1;
    }
    else
    {
      if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t (*__RKEntityFadeActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntityFadeActionArguments.targetOpacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntityFadeActionArguments(0) + 20));
}

uint64_t __RKEntityFadeActionArguments.targetOpacity.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityFadeActionArguments(0);
  *(float *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*__RKEntityFadeActionArguments.targetOpacity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityFadeActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityFadeActionArguments.duration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t __RKEntityFadeActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t (*__RKEntityFadeActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityFadeActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityFadeActionArguments.init(target:targetOpacity:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v8;
  uint64_t result;
  float v10;
  uint64_t v11;

  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  result = type metadata accessor for __RKEntityFadeActionArguments(0);
  *(float *)(a2 + *(int *)(result + 20)) = a3;
  v10 = 1.0;
  if (a4 >= 0.0)
    v10 = a4;
  v11 = a2 + *(int *)(result + 24);
  *(float *)v11 = v10;
  *(_BYTE *)(v11 + 4) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityFadeActionArguments.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x704F746567726174;
  if (*v0 != 1)
    v1 = 0x6E6F697461727564;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityFadeActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityFadeActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityFadeActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityFadeActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityFadeActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  char v10;
  _BYTE v12[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityFadeActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for __RKEntityFadeActionArguments(0);
    v12[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = *(_BYTE *)(v3 + *(int *)(v9 + 24) + 4);
    v12[13] = 2;
    v12[12] = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityFadeActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char v28;
  char v29;
  char v30;

  v21 = a2;
  v3 = type metadata accessor for UUID();
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityFadeActionArguments.CodingKeys>);
  v5 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v10[*(int *)(v11 + 24)];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys();
  v24 = v7;
  v13 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = v12;
  v14 = v22;
  v30 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v15 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v10, v25, v15);
  v29 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)&v10[*(int *)(v8 + 20)] = v16;
  v28 = 2;
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v26);
  v18 = v27;
  *(_DWORD *)v27 = v17;
  v18[4] = BYTE4(v17) & 1;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v10, v21, type metadata accessor for __RKEntityFadeActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for __RKEntityFadeActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityFadeActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityFadeActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityFadeActionArguments(_QWORD *a1)
{
  return __RKEntityFadeActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityToggleAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityToggleAnimateActionArguments.encode(to:)(_QWORD *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
}

uint64_t __RKEntityToggleAnimateActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleAnimateActionArguments.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>, type metadata accessor for __RKEntityToggleAnimateActionArguments, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityToggleAnimateActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
}

uint64_t (*__RKEntityStartAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityStartAnimateActionArguments.loopCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 20));
}

uint64_t __RKEntityStartAnimateActionArguments.multiplePerformBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

double __RKEntityStartAnimateActionArguments.clipStart.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 28));
}

double __RKEntityStartAnimateActionArguments.clipDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 32));
}

uint64_t __RKEntityStartAnimateActionArguments.clipReverses.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 36));
}

uint64_t __RKEntityStartAnimateActionArguments.clipReversed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 40));
}

float __RKEntityStartAnimateActionArguments.animationSpeed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 44));
}

uint64_t __RKEntityStartAnimateActionArguments.muteAudio.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 48));
}

uint64_t __RKEntityStartAnimateActionArguments.audioGain.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 52));
}

uint64_t __RKEntityStartAnimateActionArguments.targetAnimation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityStartAnimateActionArguments.targetAnimation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityStartAnimateActionArguments.targetAnimation.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityStartAnimateActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA14D64 + 4 * byte_21BE52A49[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA14D64()
{
  return 0x6E756F43706F6F6CLL;
}

uint64_t sub_21BA14DB0()
{
  return 0x6172754470696C63;
}

uint64_t sub_21BA14DD0()
{
  return 0x6576655270696C63;
}

uint64_t sub_21BA14DFC()
{
  return 0x6F6974616D696E61;
}

uint64_t sub_21BA14E20()
{
  return 0x6961476F69647561;
}

uint64_t sub_21BA14E40()
{
  return 0x6E41746567726174;
}

uint64_t sub_21BA14E64()
{
  return 0x696475416574756DLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityStartAnimateActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityStartAnimateActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityStartAnimateActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityStartAnimateActionArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityStartAnimateActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t started;
  _BYTE v11[32];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStartAnimateActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[31] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
    v11[30] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[29] = *(_BYTE *)(v3 + *(int *)(started + 24));
    v11[28] = 2;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[27] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[26] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[25] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[24] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[15] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[14] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[13] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[12] = 10;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityStartAnimateActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t started;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(__n128);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  _QWORD v31[2];
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v33 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (uint64_t)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v37 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityStartAnimateActionArguments.CodingKeys>);
  v9 = *(_QWORD *)(v8 - 8);
  v35 = v8;
  v36 = v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  v13 = MEMORY[0x24BDAC7A8](started);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(__n128))(v6 + 56);
  v39 = &v15[*(int *)(v16 + 56)];
  v17(v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys();
  v38 = v11;
  v18 = (uint64_t)v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v39, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v32 = (int *)started;
    v19 = v36;
    v40 = v15;
    v20 = (uint64_t)a1;
    v52 = 0;
    v21 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31[1] = v21;
    v22 = (uint64_t)v40;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v40, v37, v5);
    v51 = 1;
    *(_QWORD *)(v22 + v32[5]) = KeyedDecodingContainer.decode(_:forKey:)();
    v49 = 2;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_BYTE *)(v22 + v32[6]) = v50;
    v48 = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)(v22 + v32[7]) = v23;
    v47 = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_QWORD *)(v22 + v32[8]) = v24;
    v46 = 5;
    *(_BYTE *)(v22 + v32[9]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v45 = 6;
    *(_BYTE *)(v22 + v32[10]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    v44 = 7;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(_DWORD *)(v22 + v32[11]) = v25;
    v43 = 8;
    *(_BYTE *)(v22 + v32[12]) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v42 = 9;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v27 = &v40[v32[13]];
    *(_QWORD *)v27 = v26;
    v27[8] = v28 & 1;
    v41 = 10;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v38, v35);
    outlined assign with take of UUID?(v34, (uint64_t)v39);
    v29 = (uint64_t)v40;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v40, v33, type metadata accessor for __RKEntityStartAnimateActionArguments);
    __swift_destroy_boxed_opaque_existential_1(v20);
    return outlined destroy of __RKEntityActionSpecification(v29, type metadata accessor for __RKEntityStartAnimateActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityStartAnimateActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityStartAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityStartAnimateActionArguments(_QWORD *a1)
{
  return __RKEntityStartAnimateActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityStopAnimateActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityStopAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityStopAnimateActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityStopAnimateActionArguments.encode(to:)(_QWORD *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
}

uint64_t __RKEntityStopAnimateActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleAnimateActionArguments.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>, type metadata accessor for __RKEntityStopAnimateActionArguments, (void (*)(void))lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityStopAnimateActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityStopAnimateActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityStopAnimateActionArguments(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityStopAnimateActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
}

uint64_t (*__RKEntityToggleVisibilityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityToggleAnimateActionArguments.init(target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityToggleAnimateActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746567726174 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityToggleVisibilityActionArguments.encode(to:)(_QWORD *a1)
{
  return __RKEntityToggleAnimateActionArguments.encode(to:)(a1, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
}

uint64_t __RKEntityToggleAnimateActionArguments.encode(to:)(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityToggleVisibilityActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleAnimateActionArguments.init(from:)(a1, &demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>, type metadata accessor for __RKEntityToggleVisibilityActionArguments, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys, a2);
}

uint64_t __RKEntityToggleAnimateActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v20 = a5;
  v24 = type metadata accessor for UUID();
  v19 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v22 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a3;
  v14 = ((uint64_t (*)(_QWORD, __n128))a3)(0, v11);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v19 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a4();
  v17 = v25;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v23, v24);
    outlined init with take of __RKEntityActionSpecification((uint64_t)v16, v20, v21);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityToggleVisibilityActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityToggleVisibilityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleVisibilityActionArguments(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(a1, a2, a3, &demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityToggleVisibilityActionArguments.CodingKeys>, (void (*)(void))lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityToggleAnimateActionArguments(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t (*__RKEntityShowActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.distance.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityShowActionArguments);
}

unint64_t __RKEntityFadeActionArguments.duration.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 24));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityShowActionArguments.distance.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityFadeActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 24);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.distance.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.ease.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntityShowActionArguments.ease.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.ease.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.easeType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityShowActionArguments.easeType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.easeType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.fadeIn.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityShowActionArguments(0) + 36));
}

uint64_t __RKEntityShowActionArguments.fadeIn.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.fadeIn.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.finalOpacity.getter()
{
  return __RKEntityShowActionArguments.finalOpacity.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.finalOpacity.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.finalOpacity.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.finalOpacity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.respectPhysics.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityShowActionArguments(0) + 44));
}

uint64_t __RKEntityShowActionArguments.respectPhysics.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityShowActionArguments.respectPhysics.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.physicsLinearCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.physicsAngularCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.animationStyle.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t __RKEntityShowActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.animationStyle.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.animationStyle.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityShowActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 60));
  return result;
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.buildInAnimationType.setter(a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntityShowActionArguments.buildInAnimationType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityShowActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityShowActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA162BC + 4 * byte_21BE52A54[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA162BC()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21BA162D4()
{
  return 0x65636E6174736964;
}

uint64_t sub_21BA162EC()
{
  return 1702060389;
}

uint64_t sub_21BA162FC()
{
  return 0x6570795465736165;
}

uint64_t sub_21BA16314()
{
  return 0x6E4965646166;
}

uint64_t sub_21BA16324()
{
  return 0x61704F6C616E6966;
}

uint64_t sub_21BA16344()
{
  return 0x5074636570736572;
}

unint64_t sub_21BA16368()
{
  return 0xD000000000000018;
}

uint64_t sub_21BA163A0()
{
  return 0x6F6974616D696E61;
}

unint64_t sub_21BA163C4()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityShowActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityShowActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityShowActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityShowActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityShowActionArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityShowActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityShowActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityShowActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityShowActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
    v10 = *(_BYTE *)(v3 + v9[5] + 4);
    v18 = 1;
    v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[6] + 4);
    v18 = 2;
    v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[7]);
    v17 = 3;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[8]);
    v17 = 4;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12 = *(_BYTE *)(v3 + v9[10] + 4);
    v18 = 6;
    v17 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13 = *(_BYTE *)(v3 + v9[12] + 4);
    v18 = 8;
    v17 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = *(_BYTE *)(v3 + v9[13] + 4);
    v18 = 9;
    v17 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[14]);
    v17 = 10;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[15]);
    v17 = 11;
    lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityShowActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char v50;
  char v51;

  v35 = a2;
  v45 = type metadata accessor for UUID();
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityShowActionArguments.CodingKeys>);
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v8[v9[5]];
  *(_DWORD *)v10 = 0;
  v43 = v10;
  v10[4] = 1;
  v11 = &v8[v9[6]];
  *(_DWORD *)v11 = 0;
  v42 = v11;
  v11[4] = 1;
  v40 = v9[7];
  v8[v40] = 10;
  v39 = v9[8];
  v8[v39] = 3;
  v38 = v9[9];
  v8[v38] = 2;
  v12 = &v8[v9[10]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = v9[11];
  v8[v13] = 2;
  v14 = &v8[v9[12]];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = &v8[v9[13]];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v36 = v9[14];
  v37 = v13;
  v8[v36] = 3;
  v34 = v9[15];
  v8[v34] = 10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys();
  v47 = v5;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = v42;
  v18 = v43;
  v49 = v8;
  v32 = v15;
  v33 = v14;
  v19 = v44;
  v51 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v20 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v49;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v49, v46, v20);
  v51 = 1;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v18 = v22;
  v18[4] = BYTE4(v22) & 1;
  v51 = 2;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v17 = v23;
  v17[4] = BYTE4(v23) & 1;
  v50 = 3;
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v40] = v51;
  v50 = 4;
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v39] = v51;
  v51 = 5;
  v21[v38] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v51 = 6;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v12 = v24;
  v12[4] = BYTE4(v24) & 1;
  v51 = 7;
  v21[v37] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v51 = 8;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v26 = v33;
  *(_DWORD *)v33 = v25;
  v26[4] = BYTE4(v25) & 1;
  v51 = 9;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v28 = v32;
  *(_DWORD *)v32 = v27;
  v28[4] = BYTE4(v27) & 1;
  v50 = 10;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v49[v36] = v51;
  v50 = 11;
  lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v47, v48);
  v29 = v35;
  v30 = (uint64_t)v49;
  v49[v34] = v51;
  outlined init with copy of __RKEntityActionSpecification(v30, v29, type metadata accessor for __RKEntityShowActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification(v30, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityShowActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityShowActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityShowActionArguments(_QWORD *a1)
{
  return __RKEntityShowActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityShowActionArguments(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t (*__RKEntityHideActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.duration.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 20));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 20);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.distance.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityHideActionArguments.distance.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t (*__RKEntityHideActionArguments.distance.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.ease.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntityHideActionArguments.ease.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.ease.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.ease.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.easeType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityHideActionArguments.easeType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.easeType.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 32)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.easeType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.fadeOut.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityHideActionArguments(0) + 36));
}

uint64_t __RKEntityHideActionArguments.fadeOut.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.fadeOut.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.finalOpacity.getter()
{
  return __RKEntityShowActionArguments.finalOpacity.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.finalOpacity.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 40));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.finalOpacity.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.finalOpacity.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.finalOpacity.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 40);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.finalOpacity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.respectPhysics.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityHideActionArguments(0) + 44));
}

uint64_t __RKEntityHideActionArguments.respectPhysics.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.respectPhysics.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 48));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsLinearCoefficient.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 48);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.physicsLinearCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityHideActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityHideActionArguments);
}

unint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 52));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityHideActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.physicsAngularCoefficient.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 52);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.physicsAngularCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.animationStyle.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 56));
  return result;
}

uint64_t __RKEntityHideActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.animationStyle.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.animationStyle.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 56)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.animationStyle.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityHideActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 60));
  return result;
}

uint64_t __RKEntityHideActionArguments.buildOutAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.buildInAnimationType.setter(a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntityShowActionArguments.buildInAnimationType.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 60)) = v3;
  return result;
}

uint64_t (*__RKEntityHideActionArguments.buildOutAnimationType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityHideActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityHideActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA17470 + 4 * byte_21BE52A60[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA17470()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21BA17488()
{
  return 0x65636E6174736964;
}

uint64_t sub_21BA174A0()
{
  return 1702060389;
}

uint64_t sub_21BA174B0()
{
  return 0x6570795465736165;
}

uint64_t sub_21BA174C8()
{
  return 0x74754F65646166;
}

uint64_t sub_21BA174E0()
{
  return 0x61704F6C616E6966;
}

uint64_t sub_21BA17500()
{
  return 0x5074636570736572;
}

unint64_t sub_21BA17524()
{
  return 0xD000000000000018;
}

uint64_t sub_21BA1755C()
{
  return 0x6F6974616D696E61;
}

unint64_t sub_21BA17580()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityHideActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityHideActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityHideActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityHideActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityHideActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityHideActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityHideActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityHideActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
    v10 = *(_BYTE *)(v3 + v9[5] + 4);
    v18 = 1;
    v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[6] + 4);
    v18 = 2;
    v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[7]);
    v17 = 3;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[8]);
    v17 = 4;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12 = *(_BYTE *)(v3 + v9[10] + 4);
    v18 = 6;
    v17 = v12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13 = *(_BYTE *)(v3 + v9[12] + 4);
    v18 = 8;
    v17 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = *(_BYTE *)(v3 + v9[13] + 4);
    v18 = 9;
    v17 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[14]);
    v17 = 10;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v18 = *(_BYTE *)(v3 + v9[15]);
    v17 = 11;
    lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityHideActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char v50;
  char v51;

  v35 = a2;
  v45 = type metadata accessor for UUID();
  v41 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v46 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityHideActionArguments.CodingKeys>);
  v44 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &v8[v9[5]];
  *(_DWORD *)v10 = 0;
  v43 = v10;
  v10[4] = 1;
  v11 = &v8[v9[6]];
  *(_DWORD *)v11 = 0;
  v42 = v11;
  v11[4] = 1;
  v40 = v9[7];
  v8[v40] = 10;
  v39 = v9[8];
  v8[v39] = 3;
  v38 = v9[9];
  v8[v38] = 2;
  v12 = &v8[v9[10]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = v9[11];
  v8[v13] = 2;
  v14 = &v8[v9[12]];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = &v8[v9[13]];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  v36 = v9[14];
  v37 = v13;
  v8[v36] = 3;
  v34 = v9[15];
  v8[v34] = 10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys();
  v47 = v5;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = v42;
  v18 = v43;
  v49 = v8;
  v32 = v15;
  v33 = v14;
  v19 = v44;
  v51 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v20 = v45;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21 = v49;
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v49, v46, v20);
  v51 = 1;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v18 = v22;
  v18[4] = BYTE4(v22) & 1;
  v51 = 2;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v17 = v23;
  v17[4] = BYTE4(v23) & 1;
  v50 = 3;
  lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v40] = v51;
  v50 = 4;
  lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v21[v39] = v51;
  v51 = 5;
  v21[v38] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v51 = 6;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v12 = v24;
  v12[4] = BYTE4(v24) & 1;
  v51 = 7;
  v21[v37] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v51 = 8;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v26 = v33;
  *(_DWORD *)v33 = v25;
  v26[4] = BYTE4(v25) & 1;
  v51 = 9;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v28 = v32;
  *(_DWORD *)v32 = v27;
  v28[4] = BYTE4(v27) & 1;
  v50 = 10;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v49[v36] = v51;
  v50 = 11;
  lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v47, v48);
  v29 = v35;
  v30 = (uint64_t)v49;
  v49[v34] = v51;
  outlined init with copy of __RKEntityActionSpecification(v30, v29, type metadata accessor for __RKEntityHideActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification(v30, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityHideActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityHideActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityHideActionArguments(_QWORD *a1)
{
  return __RKEntityHideActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityHideActionArguments(uint64_t a1, uint64_t a2)
{
  return specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1, a2, type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1;
}

uint64_t (*__RKEntityEmphasisActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityEmphasisActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t __RKEntityEmphasisActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityEmphasisActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityEmphasisActionArguments.iterations.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t __RKEntityEmphasisActionArguments.iterations.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.iterations.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityEmphasisActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntityEmphasisActionArguments.animationStyle.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.animationStyle.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityEmphasisActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t __RKEntityEmphasisActionArguments.emphasisAnimationType.setter(char *a1)
{
  return __RKEntityShowActionArguments.easeType.setter(a1, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t (*__RKEntityEmphasisActionArguments.emphasisAnimationType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityEmphasisActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1811C + 4 * byte_21BE52A6C[*v0]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA1811C()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21BA18134()
{
  return 0x6F69746172657469;
}

unint64_t sub_21BA1816C()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityEmphasisActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityEmphasisActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityEmphasisActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  char v10;
  char v11;
  _BYTE v13[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityEmphasisActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
    v10 = *(_BYTE *)(v3 + v9[5] + 4);
    v13[14] = 1;
    v13[12] = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[6] + 4);
    v13[11] = 2;
    v13[8] = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[7] = *(_BYTE *)(v3 + v9[7]);
    v13[6] = 3;
    lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13[5] = *(_BYTE *)(v3 + v9[8]);
    v13[4] = 4;
    lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityEmphasisActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v25 = a2;
  v3 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v3 - 8);
  v29 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v30 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityEmphasisActionArguments.CodingKeys>);
  v27 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v9[v10[5]];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = &v9[v10[6]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v26 = v10[7];
  v9[v26] = 3;
  v13 = v10[8];
  v9[v13] = 8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys();
  v31 = v6;
  v14 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v11;
  v33 = v12;
  v24 = v13;
  v16 = v27;
  v17 = v28;
  v40 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v18 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v30, v18);
  v39 = 1;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v15 = v19;
  v15[4] = BYTE4(v19) & 1;
  v38 = 2;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v21 = v33;
  *(_DWORD *)v33 = v20;
  v21[4] = BYTE4(v20) & 1;
  v36 = 3;
  lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v9[v26] = v37;
  v34 = 4;
  lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  v22 = v25;
  v9[v24] = v35;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v9, v22, type metadata accessor for __RKEntityEmphasisActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v9, type metadata accessor for __RKEntityEmphasisActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityEmphasisActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityEmphasisActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityEmphasisActionArguments(_QWORD *a1)
{
  return __RKEntityEmphasisActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityAudioActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.path.getter()
{
  return __RKEntityCustomActionArguments.actionIdentifier.getter(type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t __RKEntityAudioActionArguments.path.setter(uint64_t a1, uint64_t a2)
{
  return __RKEntityCustomActionArguments.actionIdentifier.setter(a1, a2, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t __RKEntityCustomActionArguments.actionIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)(v3 + *(int *)(a3(0) + 20));
  result = swift_bridgeObjectRelease();
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.path.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityAudioActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.type.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 24));
  return result;
}

uint64_t __RKEntityAudioActionArguments.type.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 24)) = v2;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.type.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityAudioActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.volume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 28));
}

uint64_t __RKEntityAudioActionArguments.volume.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;

  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  v6 = v2 + *(int *)(result + 28);
  *(_QWORD *)v6 = a1;
  *(_BYTE *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.volume.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityAudioActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.loops.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityAudioActionArguments(0) + 32));
}

uint64_t __RKEntityAudioActionArguments.loops.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*__RKEntityAudioActionArguments.loops.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityAudioActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.spatialMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t __RKEntityAudioActionArguments.spatialMode.setter(char *a1)
{
  return __RKEntityAudioActionArguments.spatialMode.setter(a1, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t (*__RKEntityAudioActionArguments.spatialMode.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityAudioActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityAudioActionArguments.multiplePerformBehavior.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityAudioActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t __RKEntityAudioActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA18AD0 + 4 * byte_21BE52A71[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA18AD0()
{
  return 1752457584;
}

uint64_t sub_21BA18AE0()
{
  return 1701869940;
}

uint64_t sub_21BA18AF0()
{
  return 0x656D756C6F76;
}

uint64_t sub_21BA18B00()
{
  return 0x73706F6F6CLL;
}

uint64_t sub_21BA18B14()
{
  return 0x4D6C616974617073;
}

unint64_t sub_21BA18B34()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityAudioActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityAudioActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityAudioActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityAudioActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityAudioActionArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityAudioActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityAudioActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityAudioActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  int *v9;
  _BYTE v11[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityAudioActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
    v11[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[13] = *(_BYTE *)(v3 + v9[6]);
    v11[12] = 2;
    lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[11] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[10] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[9] = *(_BYTE *)(v3 + v9[9]);
    v11[8] = 5;
    lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[7] = *(_BYTE *)(v3 + v9[10]);
    v11[6] = 6;
    lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityAudioActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  uint64_t v27;
  _BYTE *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v30 = a2;
  v3 = type metadata accessor for UUID();
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityAudioActionArguments.CodingKeys>);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v11[6];
  v10[v32] = 3;
  v12 = &v10[v11[7]];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v31 = v11[8];
  v10[v31] = 2;
  v13 = (_BYTE *)v11[9];
  v13[(_QWORD)v10] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys();
  v38 = v7;
  v14 = (uint64_t)v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v32;
  v16 = v33;
  v28 = v13;
  v29 = (uint64_t *)v12;
  v17 = v35;
  v39 = a1;
  v49 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v18 = v36;
  v19 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v10, v37, v18);
  v48 = 1;
  v20 = KeyedDecodingContainer.decode(_:forKey:)();
  v21 = (uint64_t *)&v10[*(int *)(v8 + 20)];
  *v21 = v20;
  v21[1] = v22;
  v46 = 2;
  lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v10[v15] = v47;
  v45 = 3;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v24 = v29;
  *v29 = v23;
  *((_BYTE *)v24 + 8) = v25 & 1;
  v44 = 4;
  v10[v31] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v42 = 5;
  lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *v28 = v43;
  v40 = 6;
  lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v38, v19);
  *(_BYTE *)*(int *)(v8 + 40) = v41;
  outlined init with copy of __RKEntityActionSpecification(0, v30, type metadata accessor for __RKEntityAudioActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  return outlined destroy of __RKEntityActionSpecification(0, type metadata accessor for __RKEntityAudioActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityAudioActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityAudioActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityAudioActionArguments(_QWORD *a1)
{
  return __RKEntityAudioActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityTransformActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.location.getter()
{
  return __RKEntityTransformActionArguments.location.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntityTransformActionArguments.location.setter(a1, a2, a3, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.location.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.orientation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _BYTE *v3;

  v1 = type metadata accessor for __RKEntityTransformActionArguments(0);
  result = 0;
  v3 = (_BYTE *)(v0 + *(int *)(v1 + 24));
  if ((v3[16] & 1) == 0)
    return *(_QWORD *)v3;
  return result;
}

uint64_t __RKEntityTransformActionArguments.orientation.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v8 = v3 + *(int *)(result + 24);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 1;
  if ((a3 & 1) == 0)
  {
    *(_QWORD *)v8 = a1;
    *(_QWORD *)(v8 + 8) = a2;
    *(_BYTE *)(v8 + 16) = 0;
  }
  return result;
}

void (*__RKEntityTransformActionArguments.orientation.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 *v5;
  char v6;
  __int128 v7;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 24);
  *((_DWORD *)v3 + 5) = v4;
  v5 = (__int128 *)(v1 + v4);
  v6 = *(_BYTE *)(v1 + v4 + 16);
  v7 = 0uLL;
  if ((v6 & 1) == 0)
    v7 = *v5;
  *(_OWORD *)v3 = v7;
  *((_BYTE *)v3 + 16) = v6;
  return __RKEntityTransformActionArguments.orientation.modify;
}

void __RKEntityTransformActionArguments.orientation.modify(void **a1)
{
  int *v1;
  uint64_t v2;
  __int128 v3;
  char v4;
  uint64_t v5;

  v1 = (int *)*a1;
  v2 = *((_QWORD *)v1 + 3) + v1[5];
  v3 = *(_OWORD *)v1;
  v4 = *((_BYTE *)v1 + 16);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_BYTE *)(v2 + 16) = 1;
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)v1 + 3) + v1[5];
    *(_OWORD *)v5 = v3;
    *(_BYTE *)(v5 + 16) = 0;
  }
  free(v1);
}

unint64_t __RKEntityTransformActionArguments.scale.getter()
{
  return __RKEntityTransformActionArguments.scale.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.scale.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.scale.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.scale.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.duration.getter()
{
  return __RKEntityTransformActionArguments.duration.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.duration.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.moveType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t __RKEntityTransformActionArguments.moveType.setter(char *a1)
{
  return __RKEntityAudioActionArguments.spatialMode.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityAudioActionArguments.spatialMode.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 36)) = v3;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.moveType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.ease.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t __RKEntityTransformActionArguments.ease.setter(char *a1)
{
  return __RKEntityTransformActionArguments.ease.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.ease.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.easeType.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 44));
  return result;
}

uint64_t __RKEntityTransformActionArguments.easeType.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = v2;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.easeType.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.respectPhysics.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 48));
}

uint64_t __RKEntityTransformActionArguments.respectPhysics.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.respectPhysics.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t __RKEntityTransformActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityTransformActionArguments);
}

uint64_t (*__RKEntityTransformActionArguments.physicsLinearCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityTransformActionArguments.physicsAngularCoefficient.getter()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 56));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t __RKEntityTransformActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v4 = v1 + *(int *)(result + 56);
  *(_DWORD *)v4 = a1;
  *(_BYTE *)(v4 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityTransformActionArguments.physicsAngularCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityTransformActionArguments.relativeToEntity.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityTransformActionArguments.relativeToEntity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityTransformActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityTransformActionArguments.init(target:location:orientation:scale:duration:moveType:ease:easeType:respectPhysics:physicsLinearCoefficient:physicsAngularCoefficient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, char *a13, char *a14, char *a15, char a16)
{
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v45;
  char v46;
  char v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);

  v46 = *a14;
  v47 = *a13;
  v45 = *a15;
  v25 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  v26 = a9 + v25[15];
  v27 = type metadata accessor for UUID();
  v28 = *(_QWORD *)(v27 - 8);
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  v48(v26, 1, 1, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(a9, a1, v27);
  v29 = 1.0;
  if (a10 >= 0.0)
    v29 = a10;
  v30 = a9 + v25[5];
  v31 = a9 + v25[6];
  v32 = a9 + v25[8];
  *(float *)v32 = v29;
  *(_BYTE *)(v32 + 4) = 0;
  *(_QWORD *)v30 = a2;
  *(_QWORD *)(v30 + 8) = a3;
  *(_BYTE *)(v30 + 16) = a4 & 1;
  *(_QWORD *)v31 = 0;
  *(_QWORD *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 16) = 1;
  if ((a7 & 1) == 0)
  {
    *(_QWORD *)v31 = a5;
    *(_QWORD *)(v31 + 8) = a6;
    *(_BYTE *)(v31 + 16) = 0;
  }
  v33 = a9 + v25[7];
  v34 = v25[9];
  v35 = v25[10];
  v36 = v25[11];
  v37 = v25[12];
  v38 = v25[14];
  v39 = a9 + v25[13];
  *(_DWORD *)v33 = a8;
  *(_BYTE *)(v33 + 4) = BYTE4(a8) & 1;
  *(_BYTE *)(a9 + v34) = v47;
  v40 = a9 + v38;
  *(_BYTE *)(a9 + v35) = v46;
  *(_BYTE *)(a9 + v36) = v45;
  *(_BYTE *)(a9 + v37) = a16 & 1;
  *(float *)v39 = a11;
  *(_BYTE *)(v39 + 4) = 0;
  *(float *)v40 = a12;
  *(_BYTE *)(v40 + 4) = 0;
  outlined destroy of BodyTrackingComponent?(v26, &demangling cache variable for type metadata for UUID?);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v48)(v26, 1, 1, v27);
}

uint64_t __RKEntityTransformActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA19A2C + 4 * byte_21BE52A78[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA19A2C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_21BA19A88()
{
  return 0x6570795465766F6DLL;
}

uint64_t sub_21BA19AC0()
{
  return 0x5074636570736572;
}

unint64_t sub_21BA19AE4()
{
  return 0xD000000000000018;
}

unint64_t sub_21BA19B20()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityTransformActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityTransformActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityTransformActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityTransformActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityTransformActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityTransformActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityTransformActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 *v9;
  char v10;
  __int128 *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v18;
  int *v19;
  __int128 v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityTransformActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v20) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v19 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
    v9 = (__int128 *)(v3 + v19[5]);
    v10 = *((_BYTE *)v9 + 16);
    v20 = *v9;
    v21 = v10;
    v22 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11 = (__int128 *)(v3 + v19[6]);
    v12 = *((_BYTE *)v11 + 16);
    v20 = *v11;
    v21 = v12;
    v22 = 2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4168]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v13 = *(_BYTE *)(v3 + v19[7] + 4);
    LOBYTE(v20) = 3;
    v22 = v13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = *(_BYTE *)(v3 + v19[8] + 4);
    LOBYTE(v20) = 4;
    v22 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v20) = *(_BYTE *)(v3 + v19[9]);
    v22 = 5;
    lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = *(_BYTE *)(v3 + v19[10]);
    v22 = 6;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = *(_BYTE *)(v3 + v19[11]);
    v22 = 7;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v20) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v15 = *(_BYTE *)(v3 + v19[13] + 4);
    LOBYTE(v20) = 9;
    v22 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v16 = *(_BYTE *)(v3 + v19[14] + 4);
    LOBYTE(v20) = 10;
    v22 = v16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v20) = 11;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityTransformActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(__n128);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char *v29;
  char v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  __int128 v61;
  char v62;
  char v63;

  v45 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v56 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityTransformActionArguments.CodingKeys>);
  v54 = *(_QWORD *)(v57 - 8);
  MEMORY[0x24BDAC7A8](v57);
  v60 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityTransformActionArguments(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v12[v13[5]];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  v15 = &v12[v13[6]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v16 = &v12[v13[7]];
  *(_DWORD *)v16 = 0;
  v51 = v16;
  v16[4] = 1;
  v17 = &v12[v13[8]];
  *(_DWORD *)v17 = 0;
  v53 = v17;
  v17[4] = 1;
  v50 = v13[9];
  v12[v50] = 2;
  v49 = v13[10];
  v12[v49] = 10;
  v18 = v13[11];
  v12[v18] = 3;
  v47 = v13[12];
  v48 = v18;
  v12[v47] = 2;
  v19 = &v12[v13[13]];
  *(_DWORD *)v19 = 0;
  v19[4] = 1;
  v20 = &v12[v13[14]];
  *(_DWORD *)v20 = 0;
  v20[4] = 1;
  v21 = (uint64_t)&v12[v13[15]];
  v52 = v6;
  v22 = *(void (**)(__n128))(v6 + 56);
  v58 = v21;
  v55 = v5;
  v22(v10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys();
  v23 = (uint64_t)v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of BodyTrackingComponent?(v58, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    v43 = v14;
    v44 = v12;
    v24 = v53;
    v42 = v19;
    v41 = v20;
    v25 = v54;
    v59 = a1;
    LOBYTE(v61) = 0;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v27 = v55;
    v26 = v56;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v44, v26, v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    v63 = 1;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v28 = v62;
    v29 = v43;
    *(_OWORD *)v43 = v61;
    v29[16] = v28;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
    v63 = 2;
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v30 = v62;
    *(_OWORD *)v15 = v61;
    v15[16] = v30;
    LOBYTE(v61) = 3;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v32 = v51;
    *(_DWORD *)v51 = v31;
    v32[4] = BYTE4(v31) & 1;
    LOBYTE(v61) = 4;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(_DWORD *)v24 = v33;
    v24[4] = BYTE4(v33) & 1;
    v63 = 5;
    lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v34 = (uint64_t)v44;
    v44[v50] = v61;
    v63 = 6;
    lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_BYTE *)(v34 + v49) = v61;
    v63 = 7;
    lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_BYTE *)(v34 + v48) = v61;
    LOBYTE(v61) = 8;
    *(_BYTE *)(v34 + v47) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v61) = 9;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v36 = v42;
    *(_DWORD *)v42 = v35;
    v36[4] = BYTE4(v35) & 1;
    LOBYTE(v61) = 10;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v38 = v41;
    *(_DWORD *)v41 = v37;
    v38[4] = BYTE4(v37) & 1;
    LOBYTE(v61) = 11;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v60, v57);
    outlined assign with take of UUID?(v46, v58);
    v39 = (uint64_t)v44;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v44, v45, type metadata accessor for __RKEntityTransformActionArguments);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
    return outlined destroy of __RKEntityActionSpecification(v39, type metadata accessor for __RKEntityTransformActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityTransformActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityTransformActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityTransformActionArguments(_QWORD *a1)
{
  return __RKEntityTransformActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityForceActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityForceActionArguments.force.getter()
{
  return __RKEntityTransformActionArguments.location.getter(type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 20));
}

uint64_t __RKEntityForceActionArguments.force.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntityTransformActionArguments.location.setter(a1, a2, a3, type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t __RKEntityTransformActionArguments.location.setter(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  result = a4(0);
  v9 = v4 + *(int *)(result + 20);
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceActionArguments.force.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityForceActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityForceActionArguments.velocity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityForceActionArguments(0) + 24));
}

uint64_t __RKEntityForceActionArguments.velocity.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for __RKEntityForceActionArguments(0);
  v8 = v3 + *(int *)(result + 24);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityForceActionArguments.velocity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityForceActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityForceActionArguments.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6563726F66;
  if (*v0 != 1)
    v1 = 0x797469636F6C6576;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityForceActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityForceActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityForceActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityForceActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityForceActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  __int128 *v12;
  char v13;
  __int128 v15;
  char v16;
  char v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityForceActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = type metadata accessor for __RKEntityForceActionArguments(0);
    v10 = (__int128 *)(v3 + *(int *)(v9 + 20));
    v11 = *((_BYTE *)v10 + 16);
    v15 = *v10;
    v16 = v11;
    v17 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v13 = *((_BYTE *)v12 + 16);
    v15 = *v12;
    v16 = v13;
    v17 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityForceActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  char *v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  char v30;
  char v31;

  v22 = a2;
  v3 = type metadata accessor for UUID();
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v25 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityForceActionArguments.CodingKeys>);
  v5 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &v10[*(int *)(v11 + 20)];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v12[16] = 1;
  v13 = &v10[*(int *)(v11 + 24)];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys();
  v26 = v7;
  v14 = (uint64_t)v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = v5;
  v15 = v23;
  v28 = a1;
  LOBYTE(v29) = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *))(v15 + 32))(v10, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v31 = 1;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v17 = v30;
  *(_OWORD *)v12 = v29;
  v12[16] = v17;
  v31 = 2;
  v18 = v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v27);
  v19 = v30;
  *(_OWORD *)v13 = v29;
  v13[16] = v19;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v10, v22, type metadata accessor for __RKEntityForceActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v10, type metadata accessor for __RKEntityForceActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityForceActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityForceActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityForceActionArguments(_QWORD *a1)
{
  return __RKEntityForceActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntitySwapEntityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.newTarget.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntitySwapEntityActionArguments, a1);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t __RKEntitySwapEntityActionArguments.newTarget.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntitySwapEntityActionArguments);
}

uint64_t __RKChangeSceneActionArguments.targetSceneIdentifier.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 20);
  v5 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*__RKEntitySwapEntityActionArguments.newTarget.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.buildOutAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined init with copy of __RKEntityActionSpecification(v1 + *(int *)(v3 + 24), a1, type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t __RKEntitySwapEntityActionArguments.buildOutAction.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 24), type metadata accessor for __RKEntityHideActionArguments);
}

uint64_t (*__RKEntitySwapEntityActionArguments.buildOutAction.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.buildInAction.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined init with copy of __RKEntityActionSpecification(v1 + *(int *)(v3 + 28), a1, type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t __RKEntitySwapEntityActionArguments.buildInAction.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 28), type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t (*__RKEntitySwapEntityActionArguments.buildInAction.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySwapEntityActionArguments.init(target:newTarget:buildOutAction:buildInAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;

  v10 = type metadata accessor for UUID();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(a5, a1, v10);
  v12 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  v11(a5 + v12[5], a2, v10);
  outlined init with take of __RKEntityActionSpecification(a3, a5 + v12[6], type metadata accessor for __RKEntityHideActionArguments);
  return outlined init with take of __RKEntityActionSpecification(a4, a5 + v12[7], type metadata accessor for __RKEntityShowActionArguments);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1B1AC + 4 * byte_21BE52A84[*v0]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA1B1AC()
{
  return 0x656772615477656ELL;
}

uint64_t sub_21BA1B1C8()
{
  return 0x74754F646C697562;
}

uint64_t sub_21BA1B1EC()
{
  return 0x416E49646C697562;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySwapEntityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntitySwapEntityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntitySwapEntityActionArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntitySwapEntityActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySwapEntityActionArguments.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntitySwapEntityActionArguments(0);
    v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10 = 2;
    type metadata accessor for __RKEntityHideActionArguments(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, type metadata accessor for __RKEntityHideActionArguments, (uint64_t)&protocol conformance descriptor for __RKEntityHideActionArguments);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9 = 3;
    type metadata accessor for __RKEntityShowActionArguments(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, type metadata accessor for __RKEntityShowActionArguments, (uint64_t)&protocol conformance descriptor for __RKEntityShowActionArguments);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntitySwapEntityActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v24 = a2;
  v25 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v25);
  v26 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v27);
  v28 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for UUID();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v30 = (char *)&v23 - v8;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySwapEntityActionArguments.CodingKeys>);
  v9 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys();
  v32 = v11;
  v15 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v6;
  v34 = a1;
  v17 = v29;
  v38 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v18 = v30;
  v19 = v31;
  v30 = *(char **)(v17 + 32);
  ((void (*)(char *, char *, uint64_t))v30)(v14, v18, v31);
  v37 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  ((void (*)(char *, char *, uint64_t))v30)(&v14[v12[5]], v16, v19);
  v36 = 2;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityHideActionArguments and conformance __RKEntityHideActionArguments, type metadata accessor for __RKEntityHideActionArguments, (uint64_t)&protocol conformance descriptor for __RKEntityHideActionArguments);
  v20 = (uint64_t)v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of __RKEntityActionSpecification(v20, (uint64_t)&v14[v12[6]], type metadata accessor for __RKEntityHideActionArguments);
  v35 = 3;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityShowActionArguments and conformance __RKEntityShowActionArguments, type metadata accessor for __RKEntityShowActionArguments, (uint64_t)&protocol conformance descriptor for __RKEntityShowActionArguments);
  v21 = (uint64_t)v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v33);
  outlined init with take of __RKEntityActionSpecification(v21, (uint64_t)&v14[v12[7]], type metadata accessor for __RKEntityShowActionArguments);
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v14, v24, type metadata accessor for __RKEntitySwapEntityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v14, type metadata accessor for __RKEntitySwapEntityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySwapEntityActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySwapEntityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySwapEntityActionArguments(_QWORD *a1)
{
  return __RKEntitySwapEntityActionArguments.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;

  if ((static UUID.== infix(_:_:)() & 1) != 0
    && (static UUID.== infix(_:_:)() & 1) != 0
    && (specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24), type metadata accessor for __RKEntityHideActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:)) & 1) != 0)
  {
    v6 = specialized static __RKEntityHideActionArguments.== infix(_:_:)(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), type metadata accessor for __RKEntityShowActionArguments, (uint64_t (*)(void))specialized == infix<A>(_:_:));
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t (*__RKEntitySpinActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntitySpinActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySpinActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntitySpinActionArguments.iterations.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.iterations.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.iterations.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySpinActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySpinActionArguments.direction.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntitySpinActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t __RKEntitySpinActionArguments.direction.setter(char *a1)
{
  return __RKEntityShowActionArguments.ease.setter(a1, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.direction.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySpinActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySpinActionArguments.axis.getter()
{
  return __RKEntitySpinActionArguments.axis.getter(type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntitySpinActionArguments.axis.setter(a1, a2, a3, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t (*__RKEntitySpinActionArguments.axis.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySpinActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySpinActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1BB30 + 4 * byte_21BE52A88[*v0]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA1BB30()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21BA1BB48()
{
  return 0x6F69746172657469;
}

uint64_t sub_21BA1BB64()
{
  return 0x6F69746365726964;
}

uint64_t sub_21BA1BB80()
{
  return 1936291937;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySpinActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntitySpinActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySpinActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySpinActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntitySpinActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char v10;
  char v11;
  __int128 *v12;
  char v13;
  __int128 v15;
  char v16;
  char v17;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySpinActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
    v10 = *(_BYTE *)(v3 + v9[5] + 4);
    LOBYTE(v15) = 1;
    v17 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[6] + 4);
    LOBYTE(v15) = 2;
    v17 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v15) = *(_BYTE *)(v3 + v9[7]);
    v17 = 3;
    lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = (__int128 *)(v3 + v9[8]);
    v13 = *((_BYTE *)v12 + 16);
    v15 = *v12;
    v16 = v13;
    v17 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntitySpinActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  char v38;
  char v39;

  v28 = a2;
  v3 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v33 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySpinActionArguments.CodingKeys>);
  v30 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v9[v10[5]];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = &v9[v10[6]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v29 = v10[7];
  v9[v29] = 2;
  v13 = &v9[v10[8]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys();
  v34 = v6;
  v14 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v11;
  v36 = v12;
  v27 = v13;
  v16 = v30;
  v17 = v31;
  v18 = (uint64_t)a1;
  LOBYTE(v37) = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v19 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v9, v33, v19);
  LOBYTE(v37) = 1;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v15 = v20;
  v15[4] = BYTE4(v20) & 1;
  LOBYTE(v37) = 2;
  v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v22 = v36;
  *(_DWORD *)v36 = v21;
  v22[4] = BYTE4(v21) & 1;
  v39 = 3;
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v9[v29] = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v39 = 4;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v34, v35);
  v23 = v38;
  v25 = v27;
  v24 = v28;
  *(_OWORD *)v27 = v37;
  v25[16] = v23;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v9, v24, type metadata accessor for __RKEntitySpinActionArguments);
  __swift_destroy_boxed_opaque_existential_1(v18);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v9, type metadata accessor for __RKEntitySpinActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySpinActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySpinActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySpinActionArguments(_QWORD *a1)
{
  return __RKEntitySpinActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments, a1);
}

uint64_t __RKEntityOrbitEntityActionArguments.pivotTarget.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.pivotTarget.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.duration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.rotations.getter()
{
  return __RKEntityTransformActionArguments.scale.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

unint64_t __RKEntityTransformActionArguments.scale.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 28));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityOrbitEntityActionArguments.rotations.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.scale.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityTransformActionArguments.scale.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 28);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.rotations.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.getter()
{
  return __RKEntitySpinActionArguments.axis.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1(0) + 32));
}

uint64_t __RKEntityOrbitEntityActionArguments.orbitalAxis.setter(uint64_t a1, uint64_t a2, char a3)
{
  return __RKEntitySpinActionArguments.axis.setter(a1, a2, a3, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntitySpinActionArguments.axis.setter(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v9;

  result = a4(0);
  v9 = v4 + *(int *)(result + 32);
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.orbitalAxis.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityOrbitEntityActionArguments(0) + 36));
}

uint64_t __RKEntityOrbitEntityActionArguments.orientToPath.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.orientToPath.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 40));
  return result;
}

uint64_t __RKEntityOrbitEntityActionArguments.spinDirection.setter(char *a1)
{
  return __RKEntityTransformActionArguments.ease.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityTransformActionArguments.ease.setter(char *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  char v3;
  uint64_t result;

  v3 = *a1;
  result = a2(0);
  *(_BYTE *)(v2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.spinDirection.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.respectPhysics.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityOrbitEntityActionArguments(0) + 44));
}

uint64_t __RKEntityOrbitEntityActionArguments.respectPhysics.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*__RKEntityOrbitEntityActionArguments.respectPhysics.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsLinearCoefficient.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.physicsLinearCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.getter()
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.getter(type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t __RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.physicsAngularCoefficient.setter(a1, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t (*__RKEntityOrbitEntityActionArguments.physicsAngularCoefficient.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityOrbitEntityActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1C644 + 4 * byte_21BE52A8D[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA1C644()
{
  return 0x726154746F766970;
}

uint64_t sub_21BA1C664()
{
  return 0x6E6F697461727564;
}

uint64_t sub_21BA1C690()
{
  return 0x416C61746962726FLL;
}

uint64_t sub_21BA1C6B0()
{
  return 0x6F54746E6569726FLL;
}

uint64_t sub_21BA1C6D0()
{
  return 0x657269446E697073;
}

uint64_t sub_21BA1C6F4()
{
  return 0x5074636570736572;
}

unint64_t sub_21BA1C718()
{
  return 0xD000000000000018;
}

unint64_t sub_21BA1C734()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityOrbitEntityActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityOrbitEntityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityOrbitEntityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance __RKEntityOrbitEntityActionArguments.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityOrbitEntityActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char v10;
  char v11;
  __int128 *v12;
  char v13;
  char v14;
  char v15;
  __int128 v17;
  char v18;
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityOrbitEntityActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v17) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
    LOBYTE(v17) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10 = *(_BYTE *)(v3 + v9[6] + 4);
    LOBYTE(v17) = 2;
    v19 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[7] + 4);
    LOBYTE(v17) = 3;
    v19 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12 = (__int128 *)(v3 + v9[8]);
    v13 = *((_BYTE *)v12 + 16);
    v17 = *v12;
    v18 = v13;
    v19 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v17) = *(_BYTE *)(v3 + v9[10]);
    v19 = 6;
    lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v14 = *(_BYTE *)(v3 + v9[12] + 4);
    LOBYTE(v17) = 8;
    v19 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v15 = *(_BYTE *)(v3 + v9[13] + 4);
    LOBYTE(v17) = 9;
    v19 = v15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityOrbitEntityActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  __int128 v57;
  char v58;
  char v59;

  v42 = a2;
  v53 = type metadata accessor for UUID();
  v48 = *(_QWORD *)(v53 - 8);
  MEMORY[0x24BDAC7A8](v53);
  v49 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v37 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityOrbitEntityActionArguments.CodingKeys>);
  v51 = *(_QWORD *)(v6 - 8);
  v52 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &v11[v12[6]];
  *(_DWORD *)v13 = 0;
  v47 = v13;
  v13[4] = 1;
  v14 = &v11[v12[7]];
  *(_DWORD *)v14 = 0;
  v46 = v14;
  v14[4] = 1;
  v15 = &v11[v12[8]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v45 = v12[9];
  v11[v45] = 2;
  v44 = v12[10];
  v11[v44] = 2;
  v43 = v12[11];
  v11[v43] = 2;
  v16 = &v11[v12[12]];
  *(_DWORD *)v16 = 0;
  v16[4] = 1;
  v17 = &v11[v12[13]];
  *(_DWORD *)v17 = 0;
  v17[4] = 1;
  v18 = a1[3];
  v55 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v18);
  lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys();
  v54 = v8;
  v19 = (uint64_t)v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = v49;
  v40 = v15;
  v41 = v11;
  v55 = v9;
  v39 = v16;
  v38 = v17;
  v56 = a1;
  LOBYTE(v57) = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v21 = v50;
  v22 = v53;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v23 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
  v24 = (uint64_t)v41;
  v23(v41, v21, v22);
  LOBYTE(v57) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v23((char *)(v24 + *(int *)(v55 + 20)), v20, v22);
  LOBYTE(v57) = 2;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v26 = v47;
  *(_DWORD *)v47 = v25;
  v26[4] = BYTE4(v25) & 1;
  LOBYTE(v57) = 3;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v28 = v46;
  *(_DWORD *)v46 = v27;
  v28[4] = BYTE4(v27) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v59 = 4;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v29 = v58;
  v30 = v40;
  *(_OWORD *)v40 = v57;
  v30[16] = v29;
  LOBYTE(v57) = 5;
  *(_BYTE *)(v24 + v45) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v59 = 6;
  lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_BYTE *)(v24 + v44) = v57;
  LOBYTE(v57) = 7;
  *(_BYTE *)(v24 + v43) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v57) = 8;
  v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v32 = v39;
  *(_DWORD *)v39 = v31;
  v32[4] = BYTE4(v31) & 1;
  LOBYTE(v57) = 9;
  v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v54, v52);
  v34 = v38;
  *(_DWORD *)v38 = v33;
  v34[4] = BYTE4(v33) & 1;
  v35 = (uint64_t)v41;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v41, v42, type metadata accessor for __RKEntityOrbitEntityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  return outlined destroy of __RKEntityActionSpecification(v35, type metadata accessor for __RKEntityOrbitEntityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityOrbitEntityActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityOrbitEntityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityOrbitEntityActionArguments(_QWORD *a1)
{
  return __RKEntityOrbitEntityActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.duration.getter()
{
  return __RKEntityShowActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityLookAtCameraActionArguments.duration.setter(uint64_t a1)
{
  return __RKEntityShowActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.animationDuration.getter()
{
  return __RKEntityFadeActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityLookAtCameraActionArguments.animationDuration.setter(uint64_t a1)
{
  return __RKEntityFadeActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t (*__RKEntityLookAtCameraActionArguments.animationDuration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 28));
}

uint64_t __RKEntityLookAtCameraActionArguments.direction.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  v8 = v3 + *(int *)(result + 28);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.direction.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t __RKEntityLookAtCameraActionArguments.rotation.getter()
{
  return __RKEntityTransformActionArguments.duration.getter(type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

unint64_t __RKEntityTransformActionArguments.duration.getter(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  unsigned int *v2;

  v2 = (unsigned int *)(v1 + *(int *)(a1(0) + 32));
  return *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
}

uint64_t __RKEntityLookAtCameraActionArguments.rotation.setter(uint64_t a1)
{
  return __RKEntityTransformActionArguments.duration.setter(a1, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t __RKEntityTransformActionArguments.duration.setter(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a2(0);
  v5 = v2 + *(int *)(result + 32);
  *(_DWORD *)v5 = a1;
  *(_BYTE *)(v5 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.rotation.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 36));
}

uint64_t __RKEntityLookAtCameraActionArguments.upVector.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;

  result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  v8 = v3 + *(int *)(result + 36);
  *(_QWORD *)v8 = a1;
  *(_QWORD *)(v8 + 8) = a2;
  *(_BYTE *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.upVector.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.loops.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for __RKEntityLookAtCameraActionArguments(0) + 40));
}

uint64_t __RKEntityLookAtCameraActionArguments.loops.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*__RKEntityLookAtCameraActionArguments.loops.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityLookAtCameraActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1D4B4 + 4 * byte_21BE52A97[a1]))(0x746567726174, 0xE600000000000000);
}

uint64_t sub_21BA1D4B4()
{
  return 0x6E6F697461727564;
}

