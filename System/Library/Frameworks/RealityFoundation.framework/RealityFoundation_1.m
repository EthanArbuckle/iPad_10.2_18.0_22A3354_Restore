uint64_t sub_21BA1D514()
{
  return 0x726F746365567075;
}

uint64_t sub_21BA1D52C()
{
  return 0x73706F6F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityLookAtCameraActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityLookAtCameraActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityLookAtCameraActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityLookAtCameraActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  char v10;
  char v11;
  __int128 *v12;
  char v13;
  char v14;
  __int128 *v15;
  char v16;
  __int128 v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityLookAtCameraActionArguments.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v9 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
    v10 = *(_BYTE *)(v3 + v9[5] + 4);
    LOBYTE(v18) = 1;
    v20 = v10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11 = *(_BYTE *)(v3 + v9[6] + 4);
    LOBYTE(v18) = 2;
    v20 = v11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12 = (__int128 *)(v3 + v9[7]);
    v13 = *((_BYTE *)v12 + 16);
    v18 = *v12;
    v19 = v13;
    v20 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v14 = *(_BYTE *)(v3 + v9[8] + 4);
    LOBYTE(v18) = 4;
    v20 = v14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v15 = (__int128 *)(v3 + v9[9]);
    v16 = *((_BYTE *)v15 + 16);
    v18 = *v15;
    v19 = v16;
    v20 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v18) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t __RKEntityLookAtCameraActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char v50;
  char v51;

  v39 = a2;
  v3 = type metadata accessor for UUID();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v44 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityLookAtCameraActionArguments.CodingKeys>);
  v41 = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v9[v10[5]];
  *(_DWORD *)v11 = 0;
  v40 = v11;
  v11[4] = 1;
  v12 = &v9[v10[6]];
  *(_DWORD *)v12 = 0;
  v12[4] = 1;
  v13 = &v9[v10[7]];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v14 = &v9[v10[8]];
  *(_DWORD *)v14 = 0;
  v14[4] = 1;
  v15 = &v9[v10[9]];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v38 = v10[10];
  v9[v38] = 2;
  v16 = a1[3];
  v47 = (char *)a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys();
  v45 = v6;
  v17 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v47 = v13;
  v48 = v12;
  v36 = v15;
  v37 = v14;
  v19 = v40;
  v18 = v41;
  v20 = v42;
  LOBYTE(v49) = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v22 = v43;
  v21 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v9, v21, v22);
  LOBYTE(v49) = 1;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(_DWORD *)v19 = v23;
  v19[4] = BYTE4(v23) & 1;
  LOBYTE(v49) = 2;
  v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v25 = v48;
  *(_DWORD *)v48 = v24;
  v25[4] = BYTE4(v24) & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v51 = 3;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v26 = v50;
  v27 = v47;
  *(_OWORD *)v47 = v49;
  v27[16] = v26;
  LOBYTE(v49) = 4;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v29 = v37;
  *(_DWORD *)v37 = v28;
  v29[4] = BYTE4(v28) & 1;
  v51 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v30 = v50;
  v31 = v36;
  *(_OWORD *)v36 = v49;
  v31[16] = v30;
  LOBYTE(v49) = 6;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v45, v46);
  v33 = v39;
  v9[v38] = v32;
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v9, v33, type metadata accessor for __RKEntityLookAtCameraActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification((uint64_t)v9, type metadata accessor for __RKEntityLookAtCameraActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityLookAtCameraActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityLookAtCameraActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityLookAtCameraActionArguments(_QWORD *a1)
{
  return __RKEntityLookAtCameraActionArguments.encode(to:)(a1);
}

uint64_t (*__RKEntitySetOpacityActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntitySetOpacityActionArguments.duration.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntitySetOpacityActionArguments(0) + 20));
}

uint64_t __RKEntitySetOpacityActionArguments.duration.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*__RKEntitySetOpacityActionArguments.duration.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __RKEntitySetOpacityActionArguments.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + *(int *)(type metadata accessor for __RKEntitySetOpacityActionArguments(0) + 24));
}

uint64_t __RKEntitySetOpacityActionArguments.opacity.setter(float a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*__RKEntitySetOpacityActionArguments.opacity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntitySetOpacityActionArguments.init(target:duration:opacity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  uint64_t v8;
  uint64_t result;

  v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  result = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  *(float *)(a2 + *(int *)(result + 20)) = a3;
  *(float *)(a2 + *(int *)(result + 24)) = a4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F697461727564;
  if (*v0 != 1)
    v1 = 0x7974696361706FLL;
  if (*v0)
    return v1;
  else
    return 0x746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntitySetOpacityActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntitySetOpacityActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntitySetOpacityActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntitySetOpacityActionArguments.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntitySetOpacityActionArguments(0);
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntitySetOpacityActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v22 = a2;
  v23 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v24 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntitySetOpacityActionArguments.CodingKeys>);
  v5 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys();
  v26 = v7;
  v11 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = v8;
  v12 = v5;
  v13 = (uint64_t)v10;
  v30 = 0;
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
  v15 = v23;
  v14 = v24;
  v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v13, v14, v15);
  v29 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)(v13 + *(int *)(v27 + 20)) = v17;
  v28 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v16);
  *(_DWORD *)(v13 + *(int *)(v27 + 24)) = v19;
  outlined init with copy of __RKEntityActionSpecification(v13, v22, type metadata accessor for __RKEntitySetOpacityActionArguments);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of __RKEntityActionSpecification(v13, type metadata accessor for __RKEntitySetOpacityActionArguments);
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntitySetOpacityActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntitySetOpacityActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntitySetOpacityActionArguments(_QWORD *a1)
{
  return __RKEntitySetOpacityActionArguments.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static UUID.== infix(_:_:)() & 1) != 0
      && *(float *)(a1 + *(int *)(a3 + 20)) == *(float *)(a2 + *(int *)(a3 + 20))
      && *(float *)(a1 + *(int *)(a3 + 24)) == *(float *)(a2 + *(int *)(a3 + 24));
}

uint64_t __RKChangeSceneActionArguments.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t __RKEntityCustomActionArguments.target.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.target.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.getter@<X0>(uint64_t a1@<X8>)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.getter(type metadata accessor for __RKEntityPlayTimelineActionArguments, a1);
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.setter(uint64_t a1)
{
  return __RKChangeSceneActionArguments.targetSceneIdentifier.setter(a1, type metadata accessor for __RKEntityPlayTimelineActionArguments);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryComponentEntity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKey.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 28);
  return outlined init with copy of UUID?(v3, a1);
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 28);
  return outlined assign with take of UUID?(a1, v3);
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideEntity.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for __RKEntityPlayTimelineActionArguments(0) + 32));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityPlayTimelineActionArguments.animationLibraryKeyOverrideKey.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityPlayTimelineActionArguments.init(target:animationLibraryComponentEntity:animationLibraryKey:animationLibraryKeyOverrideEntity:animationLibraryKeyOverrideKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t result;

  v13 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  v14 = a8 + v13[7];
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  v17 = (_QWORD *)(a8 + v13[8]);
  *v17 = 0;
  v17[1] = 0;
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v18(a8, a1, v15);
  v18(a8 + v13[5], a2, v15);
  v19 = (_QWORD *)(a8 + v13[6]);
  *v19 = a3;
  v19[1] = a4;
  outlined assign with take of UUID?(a5, v14);
  result = swift_bridgeObjectRelease();
  *v17 = a6;
  v17[1] = a7;
  return result;
}

uint64_t __RKEntityPlayTimelineActionArguments.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA1E784 + 4 * byte_21BE52A9E[a1]))(0x746567726174, 0xE600000000000000);
}

unint64_t sub_21BA1E784()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  unsigned __int8 *v0;

  return __RKEntityPlayTimelineActionArguments.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityPlayTimelineActionArguments.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityPlayTimelineActionArguments.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityPlayTimelineActionArguments.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityPlayTimelineActionArguments.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
    v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntityPlayTimelineActionArguments.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(__n128);
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  _QWORD *v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;

  v38 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v39 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v42 = (char *)&v36 - v9;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityPlayTimelineActionArguments.CodingKeys>);
  v40 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(__n128))(v6 + 56);
  v45 = &v15[*(int *)(v16 + 28)];
  v17(v13);
  v18 = &v15[v12[8]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v46 = v18;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys();
  v43 = v11;
  v19 = (uint64_t)v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined destroy of BodyTrackingComponent?((uint64_t)v45, &demangling cache variable for type metadata for UUID?);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v40;
    v20 = v41;
    v37 = v6;
    v47 = a1;
    v52 = 0;
    v22 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23 = v5;
    v24 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v36 = v15;
    v24(v15, v42, v23);
    v51 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v42 = (char *)v22;
    v25 = (uint64_t)v36;
    v24(&v36[v12[5]], v20, v23);
    v50 = 2;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = (uint64_t *)(v25 + v12[6]);
    *v27 = v26;
    v27[1] = v28;
    v49 = 3;
    v29 = (uint64_t)v39;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of UUID?(v29, (uint64_t)v45);
    v48 = 4;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v43, v44);
    v33 = (uint64_t *)v46;
    swift_bridgeObjectRelease();
    *v33 = v30;
    v33[1] = v32;
    v34 = (uint64_t)v36;
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v36, v38, type metadata accessor for __RKEntityPlayTimelineActionArguments);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    return outlined destroy of __RKEntityActionSpecification(v34, type metadata accessor for __RKEntityPlayTimelineActionArguments);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityPlayTimelineActionArguments@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityPlayTimelineActionArguments.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityPlayTimelineActionArguments(_QWORD *a1)
{
  return __RKEntityPlayTimelineActionArguments.encode(to:)(a1);
}

uint64_t __RKEntityInteractionSpecification.trigger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of __RKEntityActionSpecification(v1, a1, type metadata accessor for __RKEntityTriggerSpecification);
}

uint64_t __RKEntityInteractionSpecification.trigger.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of __RKEntityHideActionArguments(a1, v1, type metadata accessor for __RKEntityTriggerSpecification);
}

uint64_t (*__RKEntityInteractionSpecification.trigger.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.action.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntityInteractionSpecification(0);
  return outlined init with copy of __RKEntityActionSpecification(v1 + *(int *)(v3 + 20), a1, type metadata accessor for __RKEntityActionSpecification);
}

uint64_t __RKEntityInteractionSpecification.action.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for __RKEntityInteractionSpecification(0);
  return outlined assign with take of __RKEntityHideActionArguments(a1, v1 + *(int *)(v3 + 20), type metadata accessor for __RKEntityActionSpecification);
}

uint64_t (*__RKEntityInteractionSpecification.action.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityInteractionSpecification(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityInteractionSpecification.accessibilityDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for __RKEntityInteractionSpecification(0) + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*__RKEntityInteractionSpecification.accessibilityDescription.modify())(_QWORD, _QWORD)
{
  type metadata accessor for __RKEntityInteractionSpecification(0);
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v6 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v7 = (_QWORD *)(a3 + *(int *)(v6 + 24));
  outlined init with take of __RKEntityActionSpecification(a1, a3, type metadata accessor for __RKEntityTriggerSpecification);
  result = outlined init with take of __RKEntityActionSpecification(a2, a3 + *(int *)(v6 + 20), type metadata accessor for __RKEntityActionSpecification);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v6 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v7 = (_QWORD *)(a3 + *(int *)(v6 + 24));
  outlined init with take of __RKEntityActionSpecification(a1, a3, type metadata accessor for __RKEntityTriggerSpecification);
  result = outlined init with take of __RKEntityActionSpecification(a2, a3 + *(int *)(v6 + 20), type metadata accessor for __RKEntityActionSpecification);
  *v7 = 0;
  v7[1] = 0;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(trigger:action:accessibilityDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v11 = (_QWORD *)(a5 + *(int *)(v10 + 24));
  outlined init with take of __RKEntityActionSpecification(a1, a5, type metadata accessor for __RKEntityTriggerSpecification);
  result = outlined init with take of __RKEntityActionSpecification(a2, a5 + *(int *)(v10 + 20), type metadata accessor for __RKEntityActionSpecification);
  *v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t __RKEntityInteractionSpecification.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;

  v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  v11 = (_QWORD *)(a5 + *(int *)(v10 + 24));
  outlined init with take of __RKEntityActionSpecification(a1, a5, type metadata accessor for __RKEntityTriggerSpecification);
  result = outlined init with take of __RKEntityActionSpecification(a2, a5 + *(int *)(v10 + 20), type metadata accessor for __RKEntityActionSpecification);
  *v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t __RKEntityInteractionSpecification.description.getter()
{
  Swift::String v0;

  type metadata accessor for __RKEntityTriggerSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  type metadata accessor for __RKEntityInteractionSpecification(0);
  type metadata accessor for __RKEntityActionSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance __RKEntityInteractionSpecification.CodingKeys()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6E6F69746361;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0x72656767697274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance __RKEntityInteractionSpecification.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized __RKEntityInteractionSpecification.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityInteractionSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance __RKEntityInteractionSpecification.CodingKeys()
{
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t __RKEntityInteractionSpecification.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v8[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<__RKEntityInteractionSpecification.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for __RKEntityTriggerSpecification(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityTriggerSpecification);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for __RKEntityInteractionSpecification(0);
    v8[14] = 1;
    type metadata accessor for __RKEntityActionSpecification(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityActionSpecification);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t __RKEntityInteractionSpecification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;

  v24 = a2;
  v25 = type metadata accessor for __RKEntityActionSpecification(0);
  MEMORY[0x24BDAC7A8](v25);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __RKEntityTriggerSpecification(0);
  MEMORY[0x24BDAC7A8](v5);
  v26 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<__RKEntityInteractionSpecification.CodingKeys>);
  v7 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKEntityInteractionSpecification(0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v12[*(int *)(v13 + 24)];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v29 = a1;
  v30 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys();
  v28 = v9;
  v15 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v31 = v7;
    v16 = (uint64_t)v12;
    v34 = 0;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityTriggerSpecification);
    v18 = (uint64_t)v26;
    v17 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of __RKEntityActionSpecification(v18, v16, type metadata accessor for __RKEntityTriggerSpecification);
    v33 = 1;
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityActionSpecification);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    outlined init with take of __RKEntityActionSpecification((uint64_t)v4, v16 + *(int *)(v10 + 20), type metadata accessor for __RKEntityActionSpecification);
    v32 = 2;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v28, v17);
    v22 = (uint64_t *)v30;
    swift_bridgeObjectRelease();
    *v22 = v19;
    v22[1] = v21;
    outlined init with copy of __RKEntityActionSpecification(v16, v24, type metadata accessor for __RKEntityInteractionSpecification);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    return outlined destroy of __RKEntityActionSpecification(v16, type metadata accessor for __RKEntityInteractionSpecification);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityInteractionSpecification@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return __RKEntityInteractionSpecification.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityInteractionSpecification(_QWORD *a1)
{
  return __RKEntityInteractionSpecification.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance __RKEntityInteractionSpecification()
{
  Swift::String v0;

  type metadata accessor for __RKEntityTriggerSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 540945696;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  type metadata accessor for __RKEntityActionSpecification(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

BOOL specialized static __RKEntityAudioActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v10;
  _BOOL8 result;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  double *v21;
  char v22;
  double *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v28;
  uint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  if (v6 != *v8 || v7 != v8[1])
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = 0;
    if ((v10 & 1) == 0)
      return result;
  }
  v12 = v4[6];
  v13 = *(unsigned __int8 *)(a1 + v12);
  v14 = *(unsigned __int8 *)(a2 + v12);
  if (v13 == 3)
  {
    if (v14 != 3)
      return 0;
    goto LABEL_25;
  }
  if (v14 == 3)
    return 0;
  v15 = 2036427888;
  if (!v13)
  {
    v16 = 0xE400000000000000;
    v17 = 2036427888;
    if (v14)
      goto LABEL_16;
    goto LABEL_19;
  }
  if (v13 != 1)
  {
    v16 = 0xE400000000000000;
    v17 = 1886352499;
    if (v14)
      goto LABEL_16;
LABEL_19:
    v18 = 0xE400000000000000;
    goto LABEL_21;
  }
  v16 = 0xE500000000000000;
  v17 = 0x6573756170;
  if (!v14)
    goto LABEL_19;
LABEL_16:
  if (v14 == 1)
  {
    v18 = 0xE500000000000000;
    v15 = 0x6573756170;
  }
  else
  {
    v18 = 0xE400000000000000;
    v15 = 1886352499;
  }
LABEL_21:
  if (v17 == v15 && v16 == v18)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v19 & 1) == 0)
      return result;
  }
LABEL_25:
  v20 = v4[7];
  v21 = (double *)(a1 + v20);
  v22 = *(_BYTE *)(a1 + v20 + 8);
  v23 = (double *)(a2 + v20);
  v24 = *(unsigned __int8 *)(a2 + v20 + 8);
  if ((v22 & 1) != 0)
  {
    if (!v24)
      return 0;
  }
  else
  {
    if (*v21 != *v23)
      LOBYTE(v24) = 1;
    if ((v24 & 1) != 0)
      return 0;
  }
  v25 = v4[8];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 == 2)
  {
    if (v27 != 2)
      return 0;
    goto LABEL_36;
  }
  result = 0;
  v28 = (v26 & 1) == 0;
  if (v27 != 2 && ((v28 ^ v27) & 1) != 0)
  {
LABEL_36:
    v29 = v4[9];
    v30 = *(unsigned __int8 *)(a1 + v29);
    v31 = *(unsigned __int8 *)(a2 + v29);
    if (v30 == 3)
    {
      if (v31 != 3)
        return 0;
    }
    else
    {
      if (v31 == 3)
        return 0;
      v32 = 0xEC00000065637275;
      v33 = 0x6F7320746E696F70;
      if (v30)
      {
        if (v30 == 1)
        {
          v34 = 0xE700000000000000;
          v35 = 0x746E6569626D61;
        }
        else
        {
          v34 = 0xE500000000000000;
          v35 = 0x636973756DLL;
        }
      }
      else
      {
        v35 = 0x6F7320746E696F70;
        v34 = 0xEC00000065637275;
      }
      if (v31)
      {
        if (v31 == 1)
        {
          v32 = 0xE700000000000000;
          v33 = 0x746E6569626D61;
        }
        else
        {
          v32 = 0xE500000000000000;
          v33 = 0x636973756DLL;
        }
      }
      if (v35 == v33 && v34 == v32)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v36 & 1) == 0)
          return result;
      }
    }
    v37 = v4[10];
    v38 = *(unsigned __int8 *)(a1 + v37);
    v39 = *(unsigned __int8 *)(a2 + v37);
    if (v38 == 3)
      return v39 == 3;
    if (v39 != 3)
    {
      v40 = 0xED00007473657571;
      v41 = 0x657220776F6C6C61;
      if (v38)
      {
        if (v38 == 1)
        {
          v42 = 0x722065726F6E6769;
          v43 = 0xEE00747365757165;
        }
        else
        {
          v43 = 0x800000021BE81880;
          v42 = 0xD000000000000014;
        }
      }
      else
      {
        v42 = 0x657220776F6C6C61;
        v43 = 0xED00007473657571;
      }
      if (v39)
      {
        if (v39 == 1)
        {
          v41 = 0x722065726F6E6769;
          v40 = 0xEE00747365757165;
        }
        else
        {
          v40 = 0x800000021BE81880;
          v41 = 0xD000000000000014;
        }
      }
      if (v42 == v41 && v43 == v40)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) != 0)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static __RKEntityEmphasisActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  float *v7;
  char v8;
  float *v9;
  int v10;
  uint64_t v11;
  float *v12;
  char v13;
  float *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  int v26;
  int v27;
  char v28;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
  v5 = v4;
  v6 = v4[5];
  v7 = (float *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 4);
  v9 = (float *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 4);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (*v7 != *v9)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = v4[6];
  v12 = (float *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 4);
  v14 = (float *)(a2 + v11);
  v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) != 0)
  {
    if (!v15)
      return 0;
  }
  else
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  v16 = v4[7];
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 3)
  {
    if (v18 != 3)
      return 0;
LABEL_32:
    v25 = v5[8];
    v26 = *(unsigned __int8 *)(a1 + v25);
    v27 = *(unsigned __int8 *)(a2 + v25);
    if (v26 == 8)
    {
      if (v27 != 8)
        return 0;
    }
    else
    {
      if (v27 == 8)
        return 0;
      specialized == infix<A>(_:_:)(v26);
      if ((v28 & 1) == 0)
        return 0;
    }
    return 1;
  }
  if (v18 != 3)
  {
    v19 = 0x6369736162;
    if (v17)
    {
      if (v17 == 1)
      {
        v20 = 0xE700000000000000;
        v21 = 0x6C756679616C70;
      }
      else
      {
        v20 = 0xE400000000000000;
        v21 = 1684826487;
      }
    }
    else
    {
      v20 = 0xE500000000000000;
      v21 = 0x6369736162;
    }
    if (v18)
    {
      if (v18 == 1)
      {
        v22 = 0xE700000000000000;
        v19 = 0x6C756679616C70;
      }
      else
      {
        v22 = 0xE400000000000000;
        v19 = 1684826487;
      }
    }
    else
    {
      v22 = 0xE500000000000000;
    }
    if (v21 == v19 && v20 == v22)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v23 & 1) == 0)
        return result;
    }
    goto LABEL_32;
  }
  return 0;
}

uint64_t specialized static __RKEntityForceActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  char v7;
  __int128 *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  __int128 *v18;
  char v19;
  __int128 *v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  BOOL v25;
  float v26;
  float v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for __RKEntityForceActionArguments(0);
  v5 = *(int *)(v4 + 20);
  v6 = (__int128 *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 16);
  v8 = (__int128 *)(a2 + v5);
  v9 = *(_BYTE *)(a2 + v5 + 16);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v9 & 1) != 0)
      return 0;
    v10 = 0;
    v11 = *v6;
    v12 = *v8;
    while (1)
    {
      v31 = v11;
      v15 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v32 = v12;
      v16 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v10 & 3)));
      v13 = v15 == v16;
      if (v10 == 2)
        break;
      while (1)
      {
        ++v10;
        if (v13)
          break;
        v13 = 0;
        v14 = 0;
        if (v10 == 2)
          return v14;
      }
    }
    if (v15 != v16)
      return 0;
  }
  v17 = *(int *)(v4 + 24);
  v18 = (__int128 *)(a1 + v17);
  v19 = *(_BYTE *)(a1 + v17 + 16);
  v20 = (__int128 *)(a2 + v17);
  v21 = *(_BYTE *)(a2 + v17 + 16);
  if ((v19 & 1) != 0)
  {
    if ((v21 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v21 & 1) != 0)
      return 0;
    v22 = 0;
    v23 = *v18;
    v24 = *v20;
    while (1)
    {
      v29 = v23;
      v26 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
      v30 = v24;
      v27 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
      v25 = v26 == v27;
      if (v22 == 2)
        break;
      while (1)
      {
        ++v22;
        if (v25)
          break;
        if (v22 == 2)
          return 0;
        v25 = 0;
      }
    }
    if (v26 != v27)
      return 0;
  }
  return 1;
}

uint64_t specialized static __RKEntityHideActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(void))
{
  int *v8;
  int *v9;
  uint64_t v10;
  float *v11;
  char v12;
  float *v13;
  int v14;
  uint64_t v15;
  float *v16;
  char v17;
  float *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  uint64_t v33;
  int v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  float *v38;
  char v39;
  float *v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  float *v47;
  char v48;
  float *v49;
  int v50;
  uint64_t v51;
  float *v52;
  char v53;
  float *v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  int v65;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v8 = (int *)a3(0);
  v9 = v8;
  v10 = v8[5];
  v11 = (float *)(a1 + v10);
  v12 = *(_BYTE *)(a1 + v10 + 4);
  v13 = (float *)(a2 + v10);
  v14 = *(unsigned __int8 *)(a2 + v10 + 4);
  if ((v12 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (*v11 != *v13)
      LOBYTE(v14) = 1;
    if ((v14 & 1) != 0)
      return 0;
  }
  v15 = v8[6];
  v16 = (float *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 4);
  v18 = (float *)(a2 + v15);
  v19 = *(unsigned __int8 *)(a2 + v15 + 4);
  if ((v17 & 1) != 0)
  {
    if (!v19)
      return 0;
  }
  else
  {
    if (*v16 != *v18)
      LOBYTE(v19) = 1;
    if ((v19 & 1) != 0)
      return 0;
  }
  v20 = v8[7];
  v21 = *(unsigned __int8 *)(a1 + v20);
  v22 = *(unsigned __int8 *)(a2 + v20);
  if (v21 == 10)
  {
    if (v22 != 10)
      return 0;
  }
  else
  {
    if (v22 == 10)
      return 0;
    specialized == infix<A>(_:_:)(v21);
    if ((v23 & 1) == 0)
      return 0;
  }
  v24 = v9[8];
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25 == 3)
  {
    if (v26 != 3)
      return 0;
  }
  else
  {
    if (v26 == 3)
      return 0;
    v27 = 0x6E692065736165;
    if (v25)
    {
      if (v25 == 1)
      {
        v28 = 0xE800000000000000;
        v29 = 0x74756F2065736165;
      }
      else
      {
        v28 = 0x800000021BE815E0;
        v29 = 0xD000000000000010;
      }
    }
    else
    {
      v28 = 0xE700000000000000;
      v29 = 0x6E692065736165;
    }
    if (v26)
    {
      if (v26 == 1)
      {
        v30 = 0xE800000000000000;
        v27 = 0x74756F2065736165;
      }
      else
      {
        v30 = 0x800000021BE815E0;
        v27 = 0xD000000000000010;
      }
    }
    else
    {
      v30 = 0xE700000000000000;
    }
    if (v29 == v27 && v28 == v30)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v31 & 1) == 0)
        return result;
    }
  }
  v33 = v9[9];
  v34 = *(unsigned __int8 *)(a1 + v33);
  v35 = *(unsigned __int8 *)(a2 + v33);
  if (v34 == 2)
  {
    if (v35 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v36 = (v34 & 1) == 0;
    if (v35 == 2 || ((v36 ^ v35) & 1) == 0)
      return result;
  }
  v37 = v9[10];
  v38 = (float *)(a1 + v37);
  v39 = *(_BYTE *)(a1 + v37 + 4);
  v40 = (float *)(a2 + v37);
  v41 = *(unsigned __int8 *)(a2 + v37 + 4);
  if ((v39 & 1) != 0)
  {
    if (!v41)
      return 0;
  }
  else
  {
    if (*v38 != *v40)
      LOBYTE(v41) = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  v42 = v9[11];
  v43 = *(unsigned __int8 *)(a1 + v42);
  v44 = *(unsigned __int8 *)(a2 + v42);
  if (v43 == 2)
  {
    if (v44 != 2)
      return 0;
    goto LABEL_53;
  }
  result = 0;
  v45 = (v43 & 1) == 0;
  if (v44 != 2 && ((v45 ^ v44) & 1) != 0)
  {
LABEL_53:
    v46 = v9[12];
    v47 = (float *)(a1 + v46);
    v48 = *(_BYTE *)(a1 + v46 + 4);
    v49 = (float *)(a2 + v46);
    v50 = *(unsigned __int8 *)(a2 + v46 + 4);
    if ((v48 & 1) != 0)
    {
      if (!v50)
        return 0;
    }
    else
    {
      if (*v47 != *v49)
        LOBYTE(v50) = 1;
      if ((v50 & 1) != 0)
        return 0;
    }
    v51 = v9[13];
    v52 = (float *)(a1 + v51);
    v53 = *(_BYTE *)(a1 + v51 + 4);
    v54 = (float *)(a2 + v51);
    v55 = *(unsigned __int8 *)(a2 + v51 + 4);
    if ((v53 & 1) != 0)
    {
      if (!v55)
        return 0;
    }
    else
    {
      if (*v52 != *v54)
        LOBYTE(v55) = 1;
      if ((v55 & 1) != 0)
        return 0;
    }
    v56 = v9[14];
    v57 = *(unsigned __int8 *)(a1 + v56);
    v58 = *(unsigned __int8 *)(a2 + v56);
    if (v57 == 3)
    {
      if (v58 != 3)
        return 0;
LABEL_83:
      v64 = v9[15];
      v65 = *(unsigned __int8 *)(a2 + v64);
      if (*(_BYTE *)(a1 + v64) == 10)
      {
        if (v65 != 10)
          return 0;
      }
      else if (v65 == 10 || (a4() & 1) == 0)
      {
        return 0;
      }
      return 1;
    }
    if (v58 != 3)
    {
      v59 = 0x6369736162;
      if (v57)
      {
        if (v57 == 1)
        {
          v60 = 0xE700000000000000;
          v61 = 0x6C756679616C70;
        }
        else
        {
          v60 = 0xE400000000000000;
          v61 = 1684826487;
        }
      }
      else
      {
        v60 = 0xE500000000000000;
        v61 = 0x6369736162;
      }
      if (v58)
      {
        if (v58 == 1)
        {
          v62 = 0xE700000000000000;
          v59 = 0x6C756679616C70;
        }
        else
        {
          v62 = 0xE400000000000000;
          v59 = 1684826487;
        }
      }
      else
      {
        v62 = 0xE500000000000000;
      }
      if (v61 == v59 && v60 == v62)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v63 & 1) == 0)
          return result;
      }
      goto LABEL_83;
    }
    return 0;
  }
  return result;
}

uint64_t specialized static __RKEntityFadeActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  char v7;
  float *v8;
  char v9;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = type metadata accessor for __RKEntityFadeActionArguments(0);
  if (*(float *)(a1 + *(int *)(v4 + 20)) != *(float *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = *(int *)(v4 + 24);
  v6 = (float *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 4);
  v8 = (float *)(a2 + v5);
  v9 = *(_BYTE *)(a2 + v5 + 4);
  if ((v7 & 1) != 0)
  {
    if ((v9 & 1) == 0)
      return 0;
  }
  else
  {
    if (*v6 != *v8)
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  return 1;
}

BOOL specialized static __RKEntitySpinActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  float *v7;
  char v8;
  float *v9;
  int v10;
  uint64_t v11;
  float *v12;
  char v13;
  float *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v24;
  _BOOL8 result;
  uint64_t v26;
  __int128 *v27;
  char v28;
  __int128 *v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  BOOL v34;
  float v35;
  float v36;
  __int128 v37;
  __int128 v38;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
  v5 = v4;
  v6 = v4[5];
  v7 = (float *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 4);
  v9 = (float *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 4);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (*v7 != *v9)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  v11 = v4[6];
  v12 = (float *)(a1 + v11);
  v13 = *(_BYTE *)(a1 + v11 + 4);
  v14 = (float *)(a2 + v11);
  v15 = *(unsigned __int8 *)(a2 + v11 + 4);
  if ((v13 & 1) != 0)
  {
    if (!v15)
      return 0;
  }
  else
  {
    if (*v12 != *v14)
      LOBYTE(v15) = 1;
    if ((v15 & 1) != 0)
      return 0;
  }
  v16 = v4[7];
  v17 = *(unsigned __int8 *)(a1 + v16);
  v18 = *(unsigned __int8 *)(a2 + v16);
  if (v17 == 2)
  {
    if (v18 != 2)
      return 0;
    goto LABEL_37;
  }
  if (v18 == 2)
    return 0;
  if ((v17 & 1) != 0)
    v19 = 0xD000000000000010;
  else
    v19 = 0x7369776B636F6C63;
  if ((v17 & 1) != 0)
    v20 = 0x800000021BE81A20;
  else
    v20 = 0xE900000000000065;
  if ((v18 & 1) != 0)
    v21 = 0xD000000000000010;
  else
    v21 = 0x7369776B636F6C63;
  if ((v18 & 1) != 0)
    v22 = 0x800000021BE81A20;
  else
    v22 = 0xE900000000000065;
  if (v19 == v21 && v20 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v24 & 1) != 0)
  {
LABEL_37:
    v26 = v5[8];
    v27 = (__int128 *)(a1 + v26);
    v28 = *(_BYTE *)(a1 + v26 + 16);
    v29 = (__int128 *)(a2 + v26);
    v30 = *(_BYTE *)(a2 + v26 + 16);
    if ((v28 & 1) == 0)
    {
      if ((v30 & 1) != 0)
        return 0;
      v31 = 0;
      v32 = *v27;
      v33 = *v29;
      while (1)
      {
        v37 = v32;
        v35 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        v38 = v33;
        v36 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v31 & 3)));
        v34 = v35 == v36;
        if (v31 == 2)
          break;
        while (1)
        {
          ++v31;
          if (v34)
            break;
          if (v31 == 2)
            return 0;
          v34 = 0;
        }
      }
      return v35 == v36;
    }
    return (v30 & 1) != 0;
  }
  return result;
}

BOOL specialized static __RKEntityOrbitEntityActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  float *v6;
  char v7;
  float *v8;
  int v9;
  uint64_t v10;
  float *v11;
  char v12;
  float *v13;
  int v14;
  uint64_t v15;
  __int128 *v16;
  char v17;
  __int128 *v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  BOOL v23;
  _BOOL8 result;
  float v25;
  float v26;
  uint64_t v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  float *v44;
  char v45;
  float *v46;
  int v47;
  uint64_t v48;
  float *v49;
  char v50;
  float *v51;
  char v52;
  __int128 v53;
  __int128 v54;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v5 = v4[6];
  v6 = (float *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 4);
  v8 = (float *)(a2 + v5);
  v9 = *(unsigned __int8 *)(a2 + v5 + 4);
  if ((v7 & 1) != 0)
  {
    if (!v9)
      return 0;
  }
  else
  {
    if (*v6 != *v8)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  v10 = v4[7];
  v11 = (float *)(a1 + v10);
  v12 = *(_BYTE *)(a1 + v10 + 4);
  v13 = (float *)(a2 + v10);
  v14 = *(unsigned __int8 *)(a2 + v10 + 4);
  if ((v12 & 1) != 0)
  {
    if (!v14)
      return 0;
  }
  else
  {
    if (*v11 != *v13)
      LOBYTE(v14) = 1;
    if ((v14 & 1) != 0)
      return 0;
  }
  v15 = v4[8];
  v16 = (__int128 *)(a1 + v15);
  v17 = *(_BYTE *)(a1 + v15 + 16);
  v18 = (__int128 *)(a2 + v15);
  v19 = *(_BYTE *)(a2 + v15 + 16);
  if ((v17 & 1) != 0)
  {
    if ((v19 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v19 & 1) != 0)
      return 0;
    v20 = 0;
    v21 = *v16;
    v22 = *v18;
    while (1)
    {
      v53 = v21;
      v25 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      v54 = v22;
      v26 = *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (v20 & 3)));
      v23 = v25 == v26;
      if (v20 == 2)
        break;
      while (1)
      {
        ++v20;
        if (v23)
          break;
        v23 = 0;
        result = 0;
        if (v20 == 2)
          return result;
      }
    }
    if (v25 != v26)
      return 0;
  }
  v27 = v4[9];
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = *(unsigned __int8 *)(a2 + v27);
  if (v28 == 2)
  {
    if (v29 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v30 = (v28 & 1) == 0;
    if (v29 == 2 || ((v30 ^ v29) & 1) == 0)
      return result;
  }
  v31 = v4[10];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 2)
  {
    if (v33 != 2)
      return 0;
  }
  else
  {
    if (v33 == 2)
      return 0;
    if ((v32 & 1) != 0)
      v34 = 0xD000000000000010;
    else
      v34 = 0x7369776B636F6C63;
    if ((v32 & 1) != 0)
      v35 = 0x800000021BE81A20;
    else
      v35 = 0xE900000000000065;
    if ((v33 & 1) != 0)
      v36 = 0xD000000000000010;
    else
      v36 = 0x7369776B636F6C63;
    if ((v33 & 1) != 0)
      v37 = 0x800000021BE81A20;
    else
      v37 = 0xE900000000000065;
    if (v34 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v38 & 1) == 0)
        return result;
    }
  }
  v39 = v4[11];
  v40 = *(unsigned __int8 *)(a1 + v39);
  v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 != 2)
      return 0;
    goto LABEL_57;
  }
  result = 0;
  v42 = (v40 & 1) == 0;
  if (v41 != 2 && ((v42 ^ v41) & 1) != 0)
  {
LABEL_57:
    v43 = v4[12];
    v44 = (float *)(a1 + v43);
    v45 = *(_BYTE *)(a1 + v43 + 4);
    v46 = (float *)(a2 + v43);
    v47 = *(unsigned __int8 *)(a2 + v43 + 4);
    if ((v45 & 1) != 0)
    {
      if (!v47)
        return 0;
    }
    else
    {
      if (*v44 != *v46)
        LOBYTE(v47) = 1;
      if ((v47 & 1) != 0)
        return 0;
    }
    v48 = v4[13];
    v49 = (float *)(a1 + v48);
    v50 = *(_BYTE *)(a1 + v48 + 4);
    v51 = (float *)(a2 + v48);
    v52 = *(_BYTE *)(a2 + v48 + 4);
    if ((v50 & 1) == 0)
    {
      if (*v49 != *v51)
        v52 = 1;
      return (v52 & 1) == 0;
    }
    return (v52 & 1) != 0;
  }
  return result;
}

uint64_t specialized static __RKEntityLookAtCameraActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  float *v6;
  char v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  char v12;
  float *v13;
  uint64_t v14;
  __int128 *v15;
  char v16;
  __int128 *v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  BOOL v22;
  float v24;
  float v25;
  uint64_t v26;
  float *v27;
  char v28;
  float *v29;
  uint64_t v30;
  __int128 *v31;
  char v32;
  __int128 *v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  BOOL v38;
  float v39;
  float v40;
  uint64_t v41;
  int v42;
  int v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  v5 = v4[5];
  v6 = (float *)(a1 + v5);
  v7 = *(_BYTE *)(a1 + v5 + 4);
  v8 = (float *)(a2 + v5);
  v9 = *(unsigned __int8 *)(a2 + v5 + 4);
  if ((v7 & 1) != 0)
  {
    if (!(_DWORD)v9)
      return v9;
  }
  else
  {
    if (*v6 != *v8)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  v10 = v4[6];
  v11 = (float *)(a1 + v10);
  v12 = *(_BYTE *)(a1 + v10 + 4);
  v13 = (float *)(a2 + v10);
  v9 = *(unsigned __int8 *)(a2 + v10 + 4);
  if ((v12 & 1) != 0)
  {
    if (!(_DWORD)v9)
      return v9;
  }
  else
  {
    if (*v11 != *v13)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  v14 = v4[7];
  v15 = (__int128 *)(a1 + v14);
  v16 = *(_BYTE *)(a1 + v14 + 16);
  v17 = (__int128 *)(a2 + v14);
  v18 = *(_BYTE *)(a2 + v14 + 16);
  if ((v16 & 1) != 0)
  {
    if ((v18 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v18 & 1) != 0)
      return 0;
    v19 = 0;
    v20 = *v15;
    v21 = *v17;
    while (1)
    {
      v47 = v20;
      v24 = *(float *)((unint64_t)&v47 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      v48 = v21;
      v25 = *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
      v22 = v24 == v25;
      if (v19 == 2)
        break;
      while (1)
      {
        ++v19;
        if (v22)
          break;
        v22 = 0;
        v9 = 0;
        if (v19 == 2)
          return v9;
      }
    }
    if (v24 != v25)
      return 0;
  }
  v26 = v4[8];
  v27 = (float *)(a1 + v26);
  v28 = *(_BYTE *)(a1 + v26 + 4);
  v29 = (float *)(a2 + v26);
  v9 = *(unsigned __int8 *)(a2 + v26 + 4);
  if ((v28 & 1) != 0)
  {
    if (!(_DWORD)v9)
      return v9;
  }
  else
  {
    if (*v27 != *v29)
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
  }
  v30 = v4[9];
  v31 = (__int128 *)(a1 + v30);
  v32 = *(_BYTE *)(a1 + v30 + 16);
  v33 = (__int128 *)(a2 + v30);
  v34 = *(_BYTE *)(a2 + v30 + 16);
  if ((v32 & 1) != 0)
  {
    if ((v34 & 1) != 0)
      goto LABEL_41;
  }
  else if ((v34 & 1) == 0)
  {
    v35 = 0;
    v36 = *v31;
    v37 = *v33;
    while (1)
    {
      v45 = v36;
      v39 = *(float *)((unint64_t)&v45 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
      v46 = v37;
      v40 = *(float *)((unint64_t)&v46 & 0xFFFFFFFFFFFFFFF3 | (4 * (v35 & 3)));
      v38 = v39 == v40;
      if (v35 == 2)
        break;
      while (1)
      {
        ++v35;
        if (v38)
          break;
        v38 = 0;
        v9 = 0;
        if (v35 == 2)
          return v9;
      }
    }
    if (v39 == v40)
    {
LABEL_41:
      v41 = v4[10];
      v42 = *(unsigned __int8 *)(a1 + v41);
      v43 = *(unsigned __int8 *)(a2 + v41);
      if (v42 == 2)
      {
        if (v43 == 2)
          return 1;
      }
      else
      {
        v44 = (v42 & 1) == 0;
        if (v43 != 2 && ((v44 ^ v43) & 1) != 0)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized static __RKEntityPlayTimelineActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v37 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v37 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v40 = v4;
  v20 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v21 = *(int *)(v20 + 24);
  v22 = *(_QWORD *)(a1 + v21);
  v23 = *(_QWORD *)(a1 + v21 + 8);
  v24 = (_QWORD *)(a2 + v21);
  if (v22 == *v24 && v23 == v24[1]
    || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v25 & 1) != 0))
  {
    outlined init with copy of UUID?(a1 + *(int *)(v20 + 28), (uint64_t)v19);
    v38 = v20;
    outlined init with copy of UUID?(a2 + *(int *)(v20 + 28), (uint64_t)v17);
    v27 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
    v39 = v27;
    outlined init with copy of UUID?((uint64_t)v17, v27);
    v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    v29 = v40;
    if (v28((uint64_t)v10, 1, v40) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v28(v39, 1, v29) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        goto LABEL_13;
      }
    }
    else
    {
      outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v14);
      if (v28(v39, 1, v29) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v39, v29);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        v31 = *(void (**)(char *, uint64_t))(v5 + 8);
        v31(v7, v29);
        outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        v31(v14, v29);
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        if ((v30 & 1) != 0)
        {
LABEL_13:
          v32 = *(int *)(v38 + 32);
          v33 = (_QWORD *)(a1 + v32);
          v34 = *(_QWORD *)(a1 + v32 + 8);
          v35 = (_QWORD *)(a2 + v32);
          v36 = v35[1];
          if (v34)
          {
            if (v36 && (*v33 == *v35 && v34 == v36 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
              return 1;
          }
          else if (!v36)
          {
            return 1;
          }
        }
        return 0;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v29);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
    return 0;
  }
  return result;
}

BOOL specialized static __RKEntityTransformActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  __int128 *v22;
  char v23;
  __int128 *v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  BOOL v29;
  _BOOL8 result;
  float v31;
  float v32;
  uint64_t v33;
  __int128 *v34;
  char v35;
  __int128 *v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  float v42;
  float v43;
  uint64_t v44;
  float *v45;
  char v46;
  float *v47;
  int v48;
  uint64_t v49;
  float *v50;
  char v51;
  float *v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  uint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  _BOOL4 v73;
  uint64_t v74;
  float *v75;
  char v76;
  float *v77;
  int v78;
  uint64_t v79;
  float *v80;
  char v81;
  float *v82;
  int v83;
  uint64_t v84;
  int *v85;
  uint64_t v86;
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  char v88;
  void (*v89)(char *, uint64_t);
  unint64_t v90;
  unint64_t v91;
  int v92;
  int *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v90 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v90 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v20 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
  v21 = v20[5];
  v22 = (__int128 *)(a1 + v21);
  v23 = *(_BYTE *)(a1 + v21 + 16);
  v24 = (__int128 *)(a2 + v21);
  v25 = *(_BYTE *)(a2 + v21 + 16);
  if ((v23 & 1) != 0)
  {
    if ((v25 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v25 & 1) != 0)
      return 0;
    v26 = 0;
    v27 = *v22;
    v28 = *v24;
    while (1)
    {
      v96 = v27;
      v31 = *(float *)((unint64_t)&v96 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
      v97 = v28;
      v32 = *(float *)((unint64_t)&v97 & 0xFFFFFFFFFFFFFFF3 | (4 * (v26 & 3)));
      v29 = v31 == v32;
      if (v26 == 2)
        break;
      while (1)
      {
        ++v26;
        if (v29)
          break;
        v29 = 0;
        result = 0;
        if (v26 == 2)
          return result;
      }
    }
    if (v31 != v32)
      return 0;
  }
  v33 = v20[6];
  v34 = (__int128 *)(a1 + v33);
  v35 = *(_BYTE *)(a1 + v33 + 16);
  v36 = (__int128 *)(a2 + v33);
  v37 = *(_BYTE *)(a2 + v33 + 16);
  if ((v35 & 1) != 0)
  {
    if ((v37 & 1) == 0)
      return 0;
  }
  else
  {
    if ((v37 & 1) != 0)
      return 0;
    v38 = 0;
    v39 = *v34;
    v40 = *v36;
    while (1)
    {
      v94 = v39;
      v42 = *(float *)((unint64_t)&v94 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
      v95 = v40;
      v43 = *(float *)((unint64_t)&v95 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
      v41 = v42 == v43;
      if (v38 == 3)
        break;
      while (1)
      {
        ++v38;
        if (v41)
          break;
        v41 = 0;
        result = 0;
        if (v38 == 3)
          return result;
      }
    }
    if (v42 != v43)
      return 0;
  }
  v44 = v20[7];
  v45 = (float *)(a1 + v44);
  v46 = *(_BYTE *)(a1 + v44 + 4);
  v47 = (float *)(a2 + v44);
  v48 = *(unsigned __int8 *)(a2 + v44 + 4);
  if ((v46 & 1) != 0)
  {
    if (!v48)
      return 0;
  }
  else
  {
    if (*v45 != *v47)
      LOBYTE(v48) = 1;
    if ((v48 & 1) != 0)
      return 0;
  }
  v49 = v20[8];
  v50 = (float *)(a1 + v49);
  v51 = *(_BYTE *)(a1 + v49 + 4);
  v52 = (float *)(a2 + v49);
  v53 = *(unsigned __int8 *)(a2 + v49 + 4);
  if ((v51 & 1) != 0)
  {
    if (!v53)
      return 0;
  }
  else
  {
    if (*v50 != *v52)
      LOBYTE(v53) = 1;
    if ((v53 & 1) != 0)
      return 0;
  }
  v54 = v20[9];
  v55 = *(unsigned __int8 *)(a1 + v54);
  v56 = *(unsigned __int8 *)(a2 + v54);
  if (v55 == 2)
  {
    if (v56 != 2)
      return 0;
  }
  else
  {
    if (v56 == 2)
      return 0;
    v93 = v20;
    if ((v55 & 1) != 0)
      v57 = 0x800000021BE81580;
    else
      v57 = 0x800000021BE81560;
    if ((v56 & 1) != 0)
      v58 = 0x800000021BE81580;
    else
      v58 = 0x800000021BE81560;
    if (v57 == v58)
    {
      swift_bridgeObjectRelease_n();
      v20 = v93;
    }
    else
    {
      v90 = v57;
      v91 = v58;
      v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      v20 = v93;
      if ((v92 & 1) == 0)
        return result;
    }
  }
  v59 = v20[10];
  v60 = *(unsigned __int8 *)(a1 + v59);
  v61 = *(unsigned __int8 *)(a2 + v59);
  if (v60 == 10)
  {
    if (v61 != 10)
      return 0;
  }
  else
  {
    if (v61 == 10)
      return 0;
    v93 = v20;
    specialized == infix<A>(_:_:)(v60);
    v20 = v93;
    if ((v62 & 1) == 0)
      return 0;
  }
  v63 = v20[11];
  v64 = *(unsigned __int8 *)(a1 + v63);
  v65 = *(unsigned __int8 *)(a2 + v63);
  if (v64 == 3)
  {
    if (v65 != 3)
      return 0;
  }
  else
  {
    if (v65 == 3)
      return 0;
    v66 = 0x6E692065736165;
    if (v64)
    {
      if (v64 == 1)
      {
        v67 = 0xE800000000000000;
        v68 = 0x74756F2065736165;
      }
      else
      {
        v67 = 0x800000021BE815E0;
        v68 = 0xD000000000000010;
      }
    }
    else
    {
      v67 = 0xE700000000000000;
      v68 = 0x6E692065736165;
    }
    if (v65)
    {
      if (v65 == 1)
      {
        v69 = 0xE800000000000000;
        v66 = 0x74756F2065736165;
      }
      else
      {
        v69 = 0x800000021BE815E0;
        v66 = 0xD000000000000010;
      }
    }
    else
    {
      v69 = 0xE700000000000000;
    }
    v93 = v20;
    if (v68 == v66 && v67 == v69)
    {
      swift_bridgeObjectRelease_n();
      v20 = v93;
    }
    else
    {
      v90 = v67;
      v91 = v69;
      v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      v20 = v93;
      if ((v92 & 1) == 0)
        return result;
    }
  }
  v70 = v20[12];
  v71 = *(unsigned __int8 *)(a1 + v70);
  v72 = *(unsigned __int8 *)(a2 + v70);
  if (v71 == 2)
  {
    if (v72 != 2)
      return 0;
    goto LABEL_74;
  }
  result = 0;
  v73 = (v71 & 1) == 0;
  if (v72 != 2 && ((v73 ^ v72) & 1) != 0)
  {
LABEL_74:
    v74 = v20[13];
    v75 = (float *)(a1 + v74);
    v76 = *(_BYTE *)(a1 + v74 + 4);
    v77 = (float *)(a2 + v74);
    v78 = *(unsigned __int8 *)(a2 + v74 + 4);
    if ((v76 & 1) != 0)
    {
      if (!v78)
        return 0;
    }
    else
    {
      if (*v75 != *v77)
        LOBYTE(v78) = 1;
      if ((v78 & 1) != 0)
        return 0;
    }
    v79 = v20[14];
    v80 = (float *)(a1 + v79);
    v81 = *(_BYTE *)(a1 + v79 + 4);
    v82 = (float *)(a2 + v79);
    v83 = *(unsigned __int8 *)(a2 + v79 + 4);
    if ((v81 & 1) != 0)
    {
      if (!v83)
        return 0;
    }
    else
    {
      if (*v80 != *v82)
        LOBYTE(v83) = 1;
      if ((v83 & 1) != 0)
        return 0;
    }
    v84 = a1 + v20[15];
    v85 = v20;
    outlined init with copy of UUID?(v84, (uint64_t)v19);
    outlined init with copy of UUID?(a2 + v85[15], (uint64_t)v17);
    v86 = (uint64_t)&v10[*(int *)(v8 + 48)];
    outlined init with copy of UUID?((uint64_t)v19, (uint64_t)v10);
    outlined init with copy of UUID?((uint64_t)v17, v86);
    v87 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v87((uint64_t)v10, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v87(v86, 1, v4) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
        return 1;
      }
      goto LABEL_91;
    }
    outlined init with copy of UUID?((uint64_t)v10, (uint64_t)v14);
    if (v87(v86, 1, v4) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_91:
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
      return 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v86, v4);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
    v88 = dispatch thunk of static Equatable.== infix(_:_:)();
    v89 = *(void (**)(char *, uint64_t))(v5 + 8);
    v89(v7, v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    v89(v14, v4);
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for UUID?);
    return (v88 & 1) != 0;
  }
  return result;
}

uint64_t specialized static __RKEntityInteractionSpecification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;

  specialized static __RKEntityTriggerSpecification.== infix(_:_:)(a1, a2);
  if ((v4 & 1) != 0)
  {
    v5 = type metadata accessor for __RKEntityInteractionSpecification(0);
    specialized static __RKEntityActionSpecification.== infix(_:_:)(a1 + *(int *)(v5 + 20), a2 + *(int *)(v5 + 20));
    if ((v6 & 1) != 0)
    {
      v7 = *(int *)(v5 + 24);
      v8 = (_QWORD *)(a1 + v7);
      v9 = *(_QWORD *)(a1 + v7 + 8);
      v10 = (_QWORD *)(a2 + v7);
      v11 = v10[1];
      if (v9)
      {
        if (v11)
        {
          v12 = *v8 == *v10 && v9 == v11;
          if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            return 1;
        }
      }
      else if (!v11)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySpinActionArguments);
}

uint64_t type metadata accessor for __RKEntityOrbitEntityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityOrbitEntityActionArguments);
}

uint64_t type metadata accessor for __RKEntityAudioActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityAudioActionArguments);
}

uint64_t type metadata accessor for __RKEntityStartAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityStartAnimateActionArguments);
}

uint64_t type metadata accessor for __RKChangeSceneActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKChangeSceneActionArguments);
}

uint64_t type metadata accessor for __RKEntityEmphasisActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityEmphasisActionArguments);
}

uint64_t type metadata accessor for __RKEntityForceActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityForceActionArguments);
}

uint64_t type metadata accessor for __RKEntityLookAtCameraActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityLookAtCameraActionArguments);
}

uint64_t type metadata accessor for __RKEntityCustomActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityCustomActionArguments);
}

uint64_t type metadata accessor for __RKEntityTransformActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityTransformActionArguments);
}

uint64_t type metadata accessor for __RKEntityShowActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityShowActionArguments);
}

uint64_t type metadata accessor for __RKEntityHideActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityHideActionArguments);
}

uint64_t type metadata accessor for __RKEntityTriggerSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityTriggerSpecification);
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CodingKeys, &unk_24DFA03D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CodingKeys, &unk_24DFA03D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CodingKeys, &unk_24DFA03D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CodingKeys, &unk_24DFA03D8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CodingKeys and conformance __RKEntityTriggerSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TriggerError, &unk_24DFA0348);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TriggerError and conformance __RKEntityTriggerSpecification.TriggerError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.GroupCodingKeys, &unk_24DFA0738);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.GroupCodingKeys, &unk_24DFA0738);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.GroupCodingKeys, &unk_24DFA0738);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.GroupCodingKeys, &unk_24DFA0738);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.GroupCodingKeys and conformance __RKEntityTriggerSpecification.GroupCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityTriggerSpecification] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityTriggerSpecification);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityTriggerSpecification]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification and conformance __RKEntityTriggerSpecification, type metadata accessor for __RKEntityTriggerSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityTriggerSpecification);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityTriggerSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TapTargetCodingKeys, &unk_24DFA06A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TapTargetCodingKeys, &unk_24DFA06A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TapTargetCodingKeys, &unk_24DFA06A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.TapTargetCodingKeys, &unk_24DFA06A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.TapTargetCodingKeys and conformance __RKEntityTriggerSpecification.TapTargetCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys, &unk_24DFA0618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys, &unk_24DFA0618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys, &unk_24DFA0618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys, &unk_24DFA0618);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys and conformance __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomCodingKeys, &unk_24DFA0588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomCodingKeys, &unk_24DFA0588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomCodingKeys, &unk_24DFA0588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CustomCodingKeys, &unk_24DFA0588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CustomCodingKeys and conformance __RKEntityTriggerSpecification.CustomCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CollisionCodingKeys, &unk_24DFA04F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CollisionCodingKeys, &unk_24DFA04F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CollisionCodingKeys, &unk_24DFA04F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.CollisionCodingKeys, &unk_24DFA04F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.CollisionCodingKeys and conformance __RKEntityTriggerSpecification.CollisionCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [UUID] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [UUID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [UUID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [UUID] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UUID]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [UUID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.ProximityCodingKeys, &unk_24DFA0468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.ProximityCodingKeys, &unk_24DFA0468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.ProximityCodingKeys, &unk_24DFA0468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.ProximityCodingKeys, &unk_24DFA0468);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.ProximityCodingKeys and conformance __RKEntityTriggerSpecification.ProximityCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityProximityTrigger.ExitType, &type metadata for __RKEntityProximityTrigger.ExitType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityProximityTrigger.ExitType, &type metadata for __RKEntityProximityTrigger.ExitType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityProximityTrigger.ExitType, &type metadata for __RKEntityProximityTrigger.ExitType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType;
  if (!lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityProximityTrigger.ExitType, &type metadata for __RKEntityProximityTrigger.ExitType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityProximityTrigger.ExitType and conformance __RKEntityProximityTrigger.ExitType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v8 = a2;
    result = MEMORY[0x220772E3C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void specialized static __RKEntityTriggerSpecification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD v20[5];
  uint64_t v21;

  v21 = a2;
  v3 = type metadata accessor for UUID();
  v20[3] = *(_QWORD *)(v3 - 8);
  v20[4] = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v20[2] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v20[1] = (char *)v20 - v7;
  MEMORY[0x24BDAC7A8](v6);
  v20[0] = (char *)v20 - v8;
  v9 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKEntityTriggerSpecification, __RKEntityTriggerSpecification));
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v20 + *(int *)(v16 + 48) - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for __RKEntityTriggerSpecification);
  outlined init with copy of __RKEntityActionSpecification(v21, (uint64_t)v18, type metadata accessor for __RKEntityTriggerSpecification);
  v19 = (char *)sub_21BA22284 + 4 * byte_21BE52AA3[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_21BA22284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);

  outlined init with copy of __RKEntityActionSpecification(v2, v0, type metadata accessor for __RKEntityTriggerSpecification);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
  v5 = *(int *)(v4 + 48);
  v6 = *(float *)(v0 + v5);
  v7 = *(int *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v0 + v7);
  if (swift_getEnumCaseMultiPayload())
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 120) + 8))(v0, *(_QWORD *)(v3 - 112));
    outlined destroy of BodyTrackingComponent?(v2, &demangling cache variable for type metadata for (__RKEntityTriggerSpecification, __RKEntityTriggerSpecification));
  }
  else
  {
    v10 = *(float *)(v1 + v5);
    v11 = *(unsigned __int8 *)(v1 + v7);
    v13 = *(_QWORD *)(v3 - 120);
    v12 = *(_QWORD *)(v3 - 112);
    v14 = *(_QWORD *)(v3 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v14, v1, v12);
    v15 = static UUID.== infix(_:_:)();
    v16 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v16(v0, v12);
    if ((v15 & 1) != 0 && v6 == v10)
    {
      v9 = v8 == v11;
      v16(v14, v12);
      outlined destroy of __RKEntityActionSpecification(v2, type metadata accessor for __RKEntityTriggerSpecification);
      return v9;
    }
    v16(v14, v12);
    outlined destroy of __RKEntityActionSpecification(v2, type metadata accessor for __RKEntityTriggerSpecification);
  }
  return 0;
}

uint64_t type metadata accessor for __RKEntityActionSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityActionSpecification);
}

uint64_t type metadata accessor for __RKEntityPlayTimelineActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityPlayTimelineActionArguments);
}

uint64_t type metadata accessor for __RKEntitySetOpacityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySetOpacityActionArguments);
}

uint64_t type metadata accessor for __RKEntitySwapEntityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntitySwapEntityActionArguments);
}

uint64_t type metadata accessor for __RKEntityFadeActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityFadeActionArguments);
}

uint64_t type metadata accessor for __RKEntityToggleVisibilityActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityToggleVisibilityActionArguments);
}

uint64_t type metadata accessor for __RKEntityStopAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityStopAnimateActionArguments);
}

uint64_t type metadata accessor for __RKEntityToggleAnimateActionArguments(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityToggleAnimateActionArguments);
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.CodingKeys, &unk_24DFA02B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.CodingKeys, &unk_24DFA02B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.CodingKeys, &unk_24DFA02B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.CodingKeys, &unk_24DFA02B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.CodingKeys and conformance __RKEntityActionSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.ActionError, &unk_24DFA0228);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.ActionError and conformance __RKEntityActionSpecification.ActionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments, &type metadata for __RKFadeSceneActionArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments, &type metadata for __RKFadeSceneActionArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments and conformance __RKFadeSceneActionArguments);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKWaitActionArguments and conformance __RKWaitActionArguments()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments, &type metadata for __RKWaitActionArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments, &type metadata for __RKWaitActionArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments and conformance __RKWaitActionArguments);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments, &type metadata for __RKEntityActionGroupArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments, &type metadata for __RKEntityActionGroupArguments);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments and conformance __RKEntityActionGroupArguments);
  }
  return result;
}

BOOL specialized static __RKEntityStartAnimateActionArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t started;
  int *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  _BOOL8 result;
  uint64_t v31;
  int v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  double *v36;
  char v37;
  double *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = (char *)&v49 - v16;
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v49 - v18;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
    return 0;
  v52 = v7;
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  if (*(_QWORD *)(a1 + *(int *)(started + 20)) != *(_QWORD *)(a2 + *(int *)(started + 20)))
    return 0;
  v21 = (int *)started;
  v49 = v5;
  v50 = v4;
  v22 = 0xED00007473657571;
  v23 = 0x657220776F6C6C61;
  v24 = *(int *)(started + 24);
  v25 = *(unsigned __int8 *)(a1 + v24);
  v26 = *(unsigned __int8 *)(a2 + v24);
  if (v25)
  {
    if (v25 == 1)
    {
      v27 = 0x722065726F6E6769;
      v28 = 0xEE00747365757165;
      if (!v26)
        goto LABEL_13;
    }
    else
    {
      v28 = 0x800000021BE81880;
      v27 = 0xD000000000000014;
      if (!v26)
        goto LABEL_13;
    }
  }
  else
  {
    v27 = 0x657220776F6C6C61;
    v28 = 0xED00007473657571;
    if (!v26)
      goto LABEL_13;
  }
  if (v26 == 1)
  {
    v23 = 0x722065726F6E6769;
    v22 = 0xEE00747365757165;
  }
  else
  {
    v22 = 0x800000021BE81880;
    v23 = 0xD000000000000014;
  }
LABEL_13:
  v51 = v10;
  if (v27 == v23 && v28 == v22)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v29 & 1) == 0)
      return result;
  }
  if (*(double *)(a1 + v21[7]) != *(double *)(a2 + v21[7])
    || *(double *)(a1 + v21[8]) != *(double *)(a2 + v21[8])
    || *(unsigned __int8 *)(a1 + v21[9]) != *(unsigned __int8 *)(a2 + v21[9])
    || *(unsigned __int8 *)(a1 + v21[10]) != *(unsigned __int8 *)(a2 + v21[10])
    || *(float *)(a1 + v21[11]) != *(float *)(a2 + v21[11]))
  {
    return 0;
  }
  v31 = v21[12];
  v32 = *(unsigned __int8 *)(a1 + v31);
  v33 = *(unsigned __int8 *)(a2 + v31);
  if (v32 == 2)
  {
    if (v33 != 2)
      return 0;
LABEL_27:
    v35 = v21[13];
    v36 = (double *)(a1 + v35);
    v37 = *(_BYTE *)(a1 + v35 + 8);
    v38 = (double *)(a2 + v35);
    v39 = *(unsigned __int8 *)(a2 + v35 + 8);
    if ((v37 & 1) != 0)
    {
      v40 = (uint64_t)v51;
      if (!v39)
        return 0;
    }
    else
    {
      if (*v36 != *v38)
        LOBYTE(v39) = 1;
      v40 = (uint64_t)v51;
      if ((v39 & 1) != 0)
        return 0;
    }
    outlined init with copy of UUID?(a1 + v21[14], (uint64_t)v19);
    outlined init with copy of UUID?(a2 + v21[14], (uint64_t)v17);
    v41 = v40 + *(int *)(v8 + 48);
    outlined init with copy of UUID?((uint64_t)v19, v40);
    outlined init with copy of UUID?((uint64_t)v17, v41);
    v42 = v40;
    v43 = v49;
    v44 = v50;
    v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
    if (v45(v42, 1, v50) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      if (v45(v41, 1, v44) == 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v51, &demangling cache variable for type metadata for UUID?);
        return 1;
      }
    }
    else
    {
      outlined init with copy of UUID?(v42, (uint64_t)v14);
      if (v45(v41, 1, v44) != 1)
      {
        v46 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))(v52, v41, v44);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
        v47 = dispatch thunk of static Equatable.== infix(_:_:)();
        v48 = *(void (**)(char *, uint64_t))(v43 + 8);
        v48(v46, v44);
        outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
        outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
        v48(v14, v44);
        outlined destroy of BodyTrackingComponent?(v42, &demangling cache variable for type metadata for UUID?);
        return (v47 & 1) != 0;
      }
      outlined destroy of BodyTrackingComponent?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v14, v44);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v51, &demangling cache variable for type metadata for (UUID?, UUID?));
    return 0;
  }
  result = 0;
  v34 = (v32 & 1) == 0;
  if (v33 != 2 && ((v34 ^ v33) & 1) != 0)
    goto LABEL_27;
  return result;
}

uint64_t specialized static __RKEntityActionGroupArguments.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  uint64_t result;
  char v18;
  int v19;
  int v20;
  char v21;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  v19 = *(unsigned __int8 *)(a1 + 33);
  v20 = *(unsigned __int8 *)(a2 + 33);
  v10 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v11 = 0x65636E6575716573;
  else
    v11 = 0x65727275636E6F63;
  if (v10)
    v12 = 0xEA0000000000746ELL;
  else
    v12 = 0xE900000000000064;
  if (*(_BYTE *)a2)
    v13 = 0x65636E6575716573;
  else
    v13 = 0x65727275636E6F63;
  if (*(_BYTE *)a2)
    v14 = 0xE900000000000064;
  else
    v14 = 0xEA0000000000746ELL;
  v15 = v11 == v13 && v12 == v14;
  v21 = v5;
  if (v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v16 & 1) == 0)
      return result;
  }
  if ((specialized static Array<A>.== infix(_:_:)(v2, v6) & 1) == 0)
    return 0;
  if (v3 == 2)
  {
    if (v7 != 2)
      return 0;
LABEL_26:
    if ((v21 & 1) != 0)
    {
      if (!v9)
        return 0;
    }
    else
    {
      if (v4 == v8)
        v18 = v9;
      else
        v18 = 1;
      if ((v18 & 1) != 0)
        return 0;
    }
    if (v19 == 2)
    {
      if (v20 != 2)
        return 0;
    }
    else if (v20 == 2 || ((((v19 & 1) == 0) ^ v20) & 1) == 0)
    {
      return 0;
    }
    return 1;
  }
  result = 0;
  if (v7 != 2 && ((((v3 & 1) == 0) ^ v7) & 1) != 0)
    goto LABEL_26;
  return result;
}

void specialized static __RKEntityActionSpecification.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t started;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;

  v119 = a2;
  v120 = (char *)a1;
  v2 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
  MEMORY[0x24BDAC7A8](v2);
  v101 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
  MEMORY[0x24BDAC7A8](v82);
  v102 = (char *)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for __RKEntitySpinActionArguments(0);
  MEMORY[0x24BDAC7A8](v5);
  v87 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v83);
  v88 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
  MEMORY[0x24BDAC7A8](v8);
  v100 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
  MEMORY[0x24BDAC7A8](v10);
  v99 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for __RKEntityTransformActionArguments(0);
  MEMORY[0x24BDAC7A8](v12);
  v98 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for __RKEntityToggleVisibilityActionArguments(0);
  MEMORY[0x24BDAC7A8](v14);
  v97 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for __RKEntityToggleAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v16);
  v96 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for __RKEntityStopAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](v18);
  v95 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  started = type metadata accessor for __RKEntityStartAnimateActionArguments(0);
  MEMORY[0x24BDAC7A8](started);
  v86 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for __RKEntityShowActionArguments(0);
  MEMORY[0x24BDAC7A8](v22);
  v94 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for __RKEntityForceActionArguments(0);
  MEMORY[0x24BDAC7A8](v24);
  v85 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for __RKEntityHideActionArguments(0);
  MEMORY[0x24BDAC7A8](v26);
  v92 = (char *)&v78 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for __RKEntityFadeActionArguments(0);
  MEMORY[0x24BDAC7A8](v81);
  v93 = (char *)&v78 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for __RKEntityEmphasisActionArguments(0);
  MEMORY[0x24BDAC7A8](v29);
  v90 = (char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for __RKEntityCustomActionArguments(0);
  MEMORY[0x24BDAC7A8](v84);
  v91 = (char *)&v78 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for __RKChangeSceneActionArguments(0);
  MEMORY[0x24BDAC7A8](v79);
  v89 = (char *)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for __RKEntityAudioActionArguments(0);
  MEMORY[0x24BDAC7A8](v33);
  v80 = (char *)&v78 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for __RKEntityActionSpecification(0);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v117 = (char *)&v78 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v118 = (char *)&v78 - v39;
  v40 = MEMORY[0x24BDAC7A8](v38);
  v105 = (char *)&v78 - v41;
  v42 = MEMORY[0x24BDAC7A8](v40);
  v106 = (char *)&v78 - v43;
  v44 = MEMORY[0x24BDAC7A8](v42);
  v116 = (char *)&v78 - v45;
  v46 = MEMORY[0x24BDAC7A8](v44);
  v115 = (char *)&v78 - v47;
  v48 = MEMORY[0x24BDAC7A8](v46);
  v112 = (char *)&v78 - v49;
  v50 = MEMORY[0x24BDAC7A8](v48);
  v114 = (char *)&v78 - v51;
  v52 = MEMORY[0x24BDAC7A8](v50);
  v113 = (char *)&v78 - v53;
  v54 = MEMORY[0x24BDAC7A8](v52);
  v111 = (char *)&v78 - v55;
  v56 = MEMORY[0x24BDAC7A8](v54);
  v110 = (char *)&v78 - v57;
  v58 = MEMORY[0x24BDAC7A8](v56);
  v104 = (char *)&v78 - v59;
  v60 = MEMORY[0x24BDAC7A8](v58);
  v109 = (char *)&v78 - v61;
  v62 = MEMORY[0x24BDAC7A8](v60);
  v103 = (char *)&v78 - v63;
  v64 = MEMORY[0x24BDAC7A8](v62);
  v65 = MEMORY[0x24BDAC7A8](v64);
  v66 = MEMORY[0x24BDAC7A8](v65);
  v67 = MEMORY[0x24BDAC7A8](v66);
  v108 = (char *)&v78 - v68;
  v69 = MEMORY[0x24BDAC7A8](v67);
  v70 = MEMORY[0x24BDAC7A8](v69);
  v107 = (char *)&v78 - v71;
  v72 = MEMORY[0x24BDAC7A8](v70);
  MEMORY[0x24BDAC7A8](v72);
  v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKEntityActionSpecification, __RKEntityActionSpecification));
  v74 = MEMORY[0x24BDAC7A8](v73);
  v76 = (char *)&v78 + *(int *)(v74 + 48) - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v120, (uint64_t)&v78 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for __RKEntityActionSpecification);
  v120 = v76;
  outlined init with copy of __RKEntityActionSpecification(v119, (uint64_t)v76, type metadata accessor for __RKEntityActionSpecification);
  v77 = (char *)sub_21BA239F4 + 4 * word_21BE52AB2[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

BOOL sub_21BA239F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;

  outlined init with copy of __RKEntityActionSpecification(v0, v1, type metadata accessor for __RKEntityActionSpecification);
  v3 = *(_QWORD *)(v2 - 192);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of __RKEntityActionSpecification(v1, type metadata accessor for __RKEntityAudioActionArguments);
    outlined destroy of BodyTrackingComponent?(v0, &demangling cache variable for type metadata for (__RKEntityActionSpecification, __RKEntityActionSpecification));
    return 0;
  }
  else
  {
    v6 = v3;
    v7 = *(_QWORD *)(v2 - 512);
    outlined init with take of __RKEntityActionSpecification(v6, v7, type metadata accessor for __RKEntityAudioActionArguments);
    v4 = specialized static __RKEntityAudioActionArguments.== infix(_:_:)(v1, v7);
    outlined destroy of __RKEntityActionSpecification(v7, type metadata accessor for __RKEntityAudioActionArguments);
    outlined destroy of __RKEntityActionSpecification(v1, type metadata accessor for __RKEntityAudioActionArguments);
    outlined destroy of __RKEntityActionSpecification(v0, type metadata accessor for __RKEntityActionSpecification);
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments.CodingKeys, &unk_24DFA0198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments.CodingKeys, &unk_24DFA0198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments.CodingKeys, &unk_24DFA0198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroupArguments.CodingKeys, &unk_24DFA0198);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroupArguments.CodingKeys and conformance __RKEntityActionGroupArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder, &type metadata for __RKEntityGroupActionOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder, &type metadata for __RKEntityGroupActionOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder, &type metadata for __RKEntityGroupActionOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder;
  if (!lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityGroupActionOrder, &type metadata for __RKEntityGroupActionOrder);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityGroupActionOrder and conformance __RKEntityGroupActionOrder);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [__RKEntityActionSpecification] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityActionSpecification);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [__RKEntityActionSpecification]);
    v2 = lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type __RKEntityActionSpecification and conformance __RKEntityActionSpecification, type metadata accessor for __RKEntityActionSpecification, (uint64_t)&protocol conformance descriptor for __RKEntityActionSpecification);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [__RKEntityActionSpecification] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments.CodingKeys, &unk_24DFA0108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments.CodingKeys, &unk_24DFA0108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments.CodingKeys, &unk_24DFA0108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKWaitActionArguments.CodingKeys, &unk_24DFA0108);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKWaitActionArguments.CodingKeys and conformance __RKWaitActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityCustomActionArguments.CodingKeys, &unk_24DFA0078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityCustomActionArguments.CodingKeys, &unk_24DFA0078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityCustomActionArguments.CodingKeys, &unk_24DFA0078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityCustomActionArguments.CodingKeys, &unk_24DFA0078);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityCustomActionArguments.CodingKeys and conformance __RKEntityCustomActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKChangeSceneActionArguments.CodingKeys, &unk_24DF9FFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKChangeSceneActionArguments.CodingKeys, &unk_24DF9FFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKChangeSceneActionArguments.CodingKeys, &unk_24DF9FFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKChangeSceneActionArguments.CodingKeys, &unk_24DF9FFE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKChangeSceneActionArguments.CodingKeys and conformance __RKChangeSceneActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments.CodingKeys, &unk_24DF9FF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments.CodingKeys, &unk_24DF9FF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments.CodingKeys, &unk_24DF9FF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKFadeSceneActionArguments.CodingKeys, &unk_24DF9FF58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKFadeSceneActionArguments.CodingKeys and conformance __RKFadeSceneActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityFadeActionArguments.CodingKeys, &unk_24DF9FEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityFadeActionArguments.CodingKeys, &unk_24DF9FEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityFadeActionArguments.CodingKeys, &unk_24DF9FEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityFadeActionArguments.CodingKeys, &unk_24DF9FEC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityFadeActionArguments.CodingKeys and conformance __RKEntityFadeActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleAnimateActionArguments.CodingKeys, &unk_24DF9FE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleAnimateActionArguments.CodingKeys, &unk_24DF9FE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleAnimateActionArguments.CodingKeys, &unk_24DF9FE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleAnimateActionArguments.CodingKeys, &unk_24DF9FE38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleAnimateActionArguments.CodingKeys and conformance __RKEntityToggleAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStartAnimateActionArguments.CodingKeys, &unk_24DF9FDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStartAnimateActionArguments.CodingKeys, &unk_24DF9FDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStartAnimateActionArguments.CodingKeys, &unk_24DF9FDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStartAnimateActionArguments.CodingKeys, &unk_24DF9FDA8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStartAnimateActionArguments.CodingKeys and conformance __RKEntityStartAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior, &type metadata for __RKEntityActionMultiplePerformBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior, &type metadata for __RKEntityActionMultiplePerformBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior, &type metadata for __RKEntityActionMultiplePerformBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior;
  if (!lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionMultiplePerformBehavior, &type metadata for __RKEntityActionMultiplePerformBehavior);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionMultiplePerformBehavior and conformance __RKEntityActionMultiplePerformBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStopAnimateActionArguments.CodingKeys, &unk_24DF9FD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStopAnimateActionArguments.CodingKeys, &unk_24DF9FD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStopAnimateActionArguments.CodingKeys, &unk_24DF9FD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityStopAnimateActionArguments.CodingKeys, &unk_24DF9FD18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityStopAnimateActionArguments.CodingKeys and conformance __RKEntityStopAnimateActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleVisibilityActionArguments.CodingKeys, &unk_24DF9FC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleVisibilityActionArguments.CodingKeys, &unk_24DF9FC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleVisibilityActionArguments.CodingKeys, &unk_24DF9FC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityToggleVisibilityActionArguments.CodingKeys, &unk_24DF9FC88);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityToggleVisibilityActionArguments.CodingKeys and conformance __RKEntityToggleVisibilityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionArguments.CodingKeys, &unk_24DF9FBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionArguments.CodingKeys, &unk_24DF9FBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionArguments.CodingKeys, &unk_24DF9FBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionArguments.CodingKeys, &unk_24DF9FBF8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionArguments.CodingKeys and conformance __RKEntityShowActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEase and conformance __RKEntityMoveEase()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase, &type metadata for __RKEntityMoveEase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase, &type metadata for __RKEntityMoveEase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase, &type metadata for __RKEntityMoveEase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEase, &type metadata for __RKEntityMoveEase);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEase and conformance __RKEntityMoveEase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType, &type metadata for __RKEntityMoveEaseType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType, &type metadata for __RKEntityMoveEaseType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType, &type metadata for __RKEntityMoveEaseType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveEaseType, &type metadata for __RKEntityMoveEaseType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveEaseType and conformance __RKEntityMoveEaseType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle, &type metadata for __RKEntityActionAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle, &type metadata for __RKEntityActionAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle, &type metadata for __RKEntityActionAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle;
  if (!lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionAnimationStyle, &type metadata for __RKEntityActionAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionAnimationStyle and conformance __RKEntityActionAnimationStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType, &type metadata for __RKEntityShowActionBuildInAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType, &type metadata for __RKEntityShowActionBuildInAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType, &type metadata for __RKEntityShowActionBuildInAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityShowActionBuildInAnimationType, &type metadata for __RKEntityShowActionBuildInAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityShowActionBuildInAnimationType and conformance __RKEntityShowActionBuildInAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionArguments.CodingKeys, &unk_24DF9FB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionArguments.CodingKeys, &unk_24DF9FB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionArguments.CodingKeys, &unk_24DF9FB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionArguments.CodingKeys, &unk_24DF9FB68);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionArguments.CodingKeys and conformance __RKEntityHideActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType, &type metadata for __RKEntityHideActionBuildOutAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType, &type metadata for __RKEntityHideActionBuildOutAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType, &type metadata for __RKEntityHideActionBuildOutAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityHideActionBuildOutAnimationType, &type metadata for __RKEntityHideActionBuildOutAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityHideActionBuildOutAnimationType and conformance __RKEntityHideActionBuildOutAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisActionArguments.CodingKeys, &unk_24DF9FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisActionArguments.CodingKeys, &unk_24DF9FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisActionArguments.CodingKeys, &unk_24DF9FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisActionArguments.CodingKeys, &unk_24DF9FAD8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisActionArguments.CodingKeys and conformance __RKEntityEmphasisActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType, &type metadata for __RKEntityEmphasisAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType, &type metadata for __RKEntityEmphasisAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType, &type metadata for __RKEntityEmphasisAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType;
  if (!lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityEmphasisAnimationType, &type metadata for __RKEntityEmphasisAnimationType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionArguments.CodingKeys, &unk_24DF9FA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionArguments.CodingKeys, &unk_24DF9FA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionArguments.CodingKeys, &unk_24DF9FA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionArguments.CodingKeys, &unk_24DF9FA48);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionArguments.CodingKeys and conformance __RKEntityAudioActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType, &type metadata for __RKEntityAudioActionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType, &type metadata for __RKEntityAudioActionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType, &type metadata for __RKEntityAudioActionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType;
  if (!lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityAudioActionType, &type metadata for __RKEntityAudioActionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection, &type metadata for __RKAudioSpatialModeSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection, &type metadata for __RKAudioSpatialModeSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection, &type metadata for __RKAudioSpatialModeSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection;
  if (!lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKAudioSpatialModeSelection, &type metadata for __RKAudioSpatialModeSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTransformActionArguments.CodingKeys, &unk_24DF9F9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTransformActionArguments.CodingKeys, &unk_24DF9F9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTransformActionArguments.CodingKeys, &unk_24DF9F9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTransformActionArguments.CodingKeys, &unk_24DF9F9B8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTransformActionArguments.CodingKeys and conformance __RKEntityTransformActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection, &type metadata for __RKEntityMoveSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection, &type metadata for __RKEntityMoveSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection, &type metadata for __RKEntityMoveSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection;
  if (!lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityMoveSelection, &type metadata for __RKEntityMoveSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityMoveSelection and conformance __RKEntityMoveSelection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityForceActionArguments.CodingKeys, &unk_24DF9F928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityForceActionArguments.CodingKeys, &unk_24DF9F928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityForceActionArguments.CodingKeys, &unk_24DF9F928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityForceActionArguments.CodingKeys, &unk_24DF9F928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityForceActionArguments.CodingKeys and conformance __RKEntityForceActionArguments.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of __RKEntityHideActionArguments(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySwapEntityActionArguments.CodingKeys, &unk_24DF9F898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySwapEntityActionArguments.CodingKeys, &unk_24DF9F898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySwapEntityActionArguments.CodingKeys, &unk_24DF9F898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySwapEntityActionArguments.CodingKeys, &unk_24DF9F898);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySwapEntityActionArguments.CodingKeys and conformance __RKEntitySwapEntityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinActionArguments.CodingKeys, &unk_24DF9F808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinActionArguments.CodingKeys, &unk_24DF9F808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinActionArguments.CodingKeys, &unk_24DF9F808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinActionArguments.CodingKeys, &unk_24DF9F808);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinActionArguments.CodingKeys and conformance __RKEntitySpinActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinDirectionType, &type metadata for __RKEntitySpinDirectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinDirectionType, &type metadata for __RKEntitySpinDirectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinDirectionType, &type metadata for __RKEntitySpinDirectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType;
  if (!lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySpinDirectionType, &type metadata for __RKEntitySpinDirectionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySpinDirectionType and conformance __RKEntitySpinDirectionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityOrbitEntityActionArguments.CodingKeys, &unk_24DF9F778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityOrbitEntityActionArguments.CodingKeys, &unk_24DF9F778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityOrbitEntityActionArguments.CodingKeys, &unk_24DF9F778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityOrbitEntityActionArguments.CodingKeys, &unk_24DF9F778);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityOrbitEntityActionArguments.CodingKeys and conformance __RKEntityOrbitEntityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityLookAtCameraActionArguments.CodingKeys, &unk_24DF9F6E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityLookAtCameraActionArguments.CodingKeys, &unk_24DF9F6E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityLookAtCameraActionArguments.CodingKeys, &unk_24DF9F6E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityLookAtCameraActionArguments.CodingKeys, &unk_24DF9F6E8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityLookAtCameraActionArguments.CodingKeys and conformance __RKEntityLookAtCameraActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySetOpacityActionArguments.CodingKeys, &unk_24DF9F658);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySetOpacityActionArguments.CodingKeys, &unk_24DF9F658);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySetOpacityActionArguments.CodingKeys, &unk_24DF9F658);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntitySetOpacityActionArguments.CodingKeys, &unk_24DF9F658);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntitySetOpacityActionArguments.CodingKeys and conformance __RKEntitySetOpacityActionArguments.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityPlayTimelineActionArguments.CodingKeys, &unk_24DF9F5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityPlayTimelineActionArguments.CodingKeys, &unk_24DF9F5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityPlayTimelineActionArguments.CodingKeys, &unk_24DF9F5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityPlayTimelineActionArguments.CodingKeys, &unk_24DF9F5C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityPlayTimelineActionArguments.CodingKeys and conformance __RKEntityPlayTimelineActionArguments.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for __RKEntityInteractionSpecification(uint64_t a1)
{
  return type metadata accessor for __RKEntitySpinActionArguments(a1, (uint64_t *)&type metadata singleton initialization cache for __RKEntityInteractionSpecification);
}

uint64_t type metadata accessor for __RKEntitySpinActionArguments(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.CodingKeys, &unk_24DF9F538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.CodingKeys, &unk_24DF9F538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.CodingKeys, &unk_24DF9F538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.CodingKeys, &unk_24DF9F538);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.CodingKeys and conformance __RKEntityInteractionSpecification.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name;
  if (!lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTriggerSpecification.Name, &type metadata for __RKEntityTriggerSpecification.Name);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTriggerSpecification.Name and conformance __RKEntityTriggerSpecification.Name);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name;
  if (!lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionSpecification.Name, &type metadata for __RKEntityActionSpecification.Name);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionSpecification.Name and conformance __RKEntityActionSpecification.Name);
  }
  return result;
}

uint64_t sub_21BA2557C@<X0>(uint64_t a1@<X8>)
{
  return __RKEntityCustomActionArguments.optionalTarget.getter(a1);
}

uint64_t sub_21BA255A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_21BA255E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 *v5;
  char v6;
  __int128 v7;

  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v5 = (__int128 *)(a1 + *(int *)(result + 24));
  v6 = *((_BYTE *)v5 + 16);
  v7 = 0uLL;
  if ((v6 & 1) == 0)
    v7 = *v5;
  *(_OWORD *)a2 = v7;
  *(_BYTE *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_21BA25628(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  result = type metadata accessor for __RKEntityTransformActionArguments(0);
  v7 = a2 + *(int *)(result + 24);
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 16) = 1;
  if ((v5 & 1) == 0)
  {
    *(_QWORD *)v7 = v3;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = 0;
  }
  return result;
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of __RKSpecificationHasTarget.target.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityTriggerSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
        *((_BYTE *)a1 + *(int *)(v8 + 64)) = *((_BYTE *)a2 + *(int *)(v8 + 64));
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v11 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v12 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(_QWORD *)((char *)a1 + *(int *)(v13 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v13 + 48));
        *(_QWORD *)((char *)a1 + *(int *)(v13 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v13 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityTriggerSpecification(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      v3 = type metadata accessor for UUID();
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    case 2:
      v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3:
    case 5:
      goto LABEL_5;
    case 4:
      swift_bridgeObjectRelease();
LABEL_5:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for __RKEntityTriggerSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
      *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
      goto LABEL_9;
    case 1u:
      v8 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      goto LABEL_9;
    case 2u:
      v9 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(_QWORD *)((char *)a1 + *(int *)(v10 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v10 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v10 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v10 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for __RKEntityTriggerSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v7 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v7 + 48));
        *((_BYTE *)a1 + *(int *)(v7 + 64)) = *((_BYTE *)a2 + *(int *)(v7 + 64));
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v8 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v9 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(_QWORD *)((char *)a1 + *(int *)(v10 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v10 + 48));
        *(_QWORD *)((char *)a1 + *(int *)(v10 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v10 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for __RKEntityTriggerSpecification(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v9 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
    *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
    *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
    a1[*(int *)(v8 + 64)] = a2[*(int *)(v8 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for __RKEntityTriggerSpecification(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(_QWORD *)&a1[*(int *)(v10 + 48)] = *(_QWORD *)&a2[*(int *)(v10 + 48)];
      *(_QWORD *)&a1[*(int *)(v10 + 64)] = *(_QWORD *)&a2[*(int *)(v10 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v11 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)&a1[*(int *)(v8 + 48)] = *(_DWORD *)&a2[*(int *)(v8 + 48)];
      a1[*(int *)(v8 + 64)] = a2[*(int *)(v8 + 64)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for __RKEntityTriggerSpecification()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for __RKEntityTriggerSpecification()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    v2 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout3();
    v6 = &v5;
    v7 = v2;
    v3 = MEMORY[0x24BEE0158] + 64;
    swift_getTupleTypeLayout3();
    v8 = &v4;
    v9 = &unk_21BE54088;
    v10 = &unk_21BE540A0;
    v11 = v3;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityTriggerSpecification.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityTriggerSpecification.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_21BA26190 + 4 * byte_21BE52AFB[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_21BA261C4 + 4 * byte_21BE52AF6[v4]))();
}

uint64_t sub_21BA261C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA261CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA261D4);
  return result;
}

uint64_t sub_21BA261E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA261E8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_21BA261EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA261F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTriggerSpecification.Name()
{
  return &type metadata for __RKEntityTriggerSpecification.Name;
}

char *initializeBufferWithCopyOfBuffer for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, char *, uint64_t);
  int *started;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  int *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  int *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  int *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  unsigned int (*v216)(char *, uint64_t, uint64_t);
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v17 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        v9 = v8[5];
        v10 = &a1[v9];
        v11 = &a2[v9];
        v13 = *(_QWORD *)v11;
        v12 = *((_QWORD *)v11 + 1);
        *(_QWORD *)v10 = v13;
        *((_QWORD *)v10 + 1) = v12;
        a1[v8[6]] = a2[v8[6]];
        v14 = v8[7];
        v15 = &a1[v14];
        v16 = &a2[v14];
        v15[8] = v16[8];
        *(_QWORD *)v15 = *(_QWORD *)v16;
        a1[v8[8]] = a2[v8[8]];
        a1[v8[9]] = a2[v8[9]];
        a1[v8[10]] = a2[v8[10]];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v19 = type metadata accessor for UUID();
        v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
        v20(a1, a2, v19);
        v21 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v20(&a1[*(int *)(v21 + 20)], &a2[*(int *)(v21 + 20)], v19);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        v22 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a1, a2, v22);
        v23 = type metadata accessor for __RKEntityCustomActionArguments(0);
        v24 = *(int *)(v23 + 20);
        v25 = &a1[v24];
        v26 = &a2[v24];
        v28 = *(_QWORD *)v26;
        v27 = *((_QWORD *)v26 + 1);
        *(_QWORD *)v25 = v28;
        *((_QWORD *)v25 + 1) = v27;
        *(_QWORD *)&a1[*(int *)(v23 + 24)] = *(_QWORD *)&a2[*(int *)(v23 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        v29 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a1, a2, v29);
        v30 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v31 = v30[5];
        v32 = &a1[v31];
        v33 = &a2[v31];
        *(_DWORD *)v32 = *(_DWORD *)v33;
        v32[4] = v33[4];
        v34 = v30[6];
        v35 = &a1[v34];
        v36 = &a2[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        a1[v30[7]] = a2[v30[7]];
        a1[v30[8]] = a2[v30[8]];
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v37 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(a1, a2, v37);
        v38 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v38 + 20)] = *(_DWORD *)&a2[*(int *)(v38 + 20)];
        v39 = *(int *)(v38 + 24);
        v40 = &a1[v39];
        v41 = &a2[v39];
        v40[4] = v41[4];
        *(_DWORD *)v40 = *(_DWORD *)v41;
        swift_storeEnumTagMultiPayload();
        break;
      case 6u:
        *a1 = *a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
        *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 7u:
        v42 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(a1, a2, v42);
        v43 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v44 = v43[5];
        v45 = &a1[v44];
        v46 = &a2[v44];
        *(_DWORD *)v45 = *(_DWORD *)v46;
        v45[4] = v46[4];
        v47 = v43[6];
        v48 = &a1[v47];
        v49 = &a2[v47];
        *(_DWORD *)v48 = *(_DWORD *)v49;
        v48[4] = v49[4];
        a1[v43[7]] = a2[v43[7]];
        a1[v43[8]] = a2[v43[8]];
        a1[v43[9]] = a2[v43[9]];
        v50 = v43[10];
        v51 = &a1[v50];
        v52 = &a2[v50];
        *(_DWORD *)v51 = *(_DWORD *)v52;
        v51[4] = v52[4];
        a1[v43[11]] = a2[v43[11]];
        v53 = v43[12];
        v54 = &a1[v53];
        v55 = &a2[v53];
        v54[4] = v55[4];
        *(_DWORD *)v54 = *(_DWORD *)v55;
        v56 = v43[13];
        v57 = &a1[v56];
        v58 = &a2[v56];
        *(_DWORD *)v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        a1[v43[14]] = a2[v43[14]];
        a1[v43[15]] = a2[v43[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 8u:
        v59 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(a1, a2, v59);
        v60 = type metadata accessor for __RKEntityForceActionArguments(0);
        v61 = *(int *)(v60 + 20);
        v62 = &a1[v61];
        v63 = &a2[v61];
        *(_OWORD *)v62 = *(_OWORD *)v63;
        v62[16] = v63[16];
        v64 = *(int *)(v60 + 24);
        v65 = &a1[v64];
        v66 = &a2[v64];
        v65[16] = v66[16];
        *(_OWORD *)v65 = *(_OWORD *)v66;
        swift_storeEnumTagMultiPayload();
        break;
      case 9u:
        v67 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16))(a1, a2, v67);
        v68 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v69 = v68[5];
        v70 = &a1[v69];
        v71 = &a2[v69];
        *(_DWORD *)v70 = *(_DWORD *)v71;
        v70[4] = v71[4];
        v72 = v68[6];
        v73 = &a1[v72];
        v74 = &a2[v72];
        *(_DWORD *)v73 = *(_DWORD *)v74;
        v73[4] = v74[4];
        a1[v68[7]] = a2[v68[7]];
        a1[v68[8]] = a2[v68[8]];
        a1[v68[9]] = a2[v68[9]];
        v75 = v68[10];
        v76 = &a1[v75];
        v77 = &a2[v75];
        *(_DWORD *)v76 = *(_DWORD *)v77;
        v76[4] = v77[4];
        a1[v68[11]] = a2[v68[11]];
        v78 = v68[12];
        v79 = &a1[v78];
        v80 = &a2[v78];
        v79[4] = v80[4];
        *(_DWORD *)v79 = *(_DWORD *)v80;
        v81 = v68[13];
        v82 = &a1[v81];
        v83 = &a2[v81];
        *(_DWORD *)v82 = *(_DWORD *)v83;
        v82[4] = v83[4];
        a1[v68[14]] = a2[v68[14]];
        a1[v68[15]] = a2[v68[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0xAu:
        v84 = type metadata accessor for UUID();
        v85 = *(_QWORD *)(v84 - 8);
        v86 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
        v86(a1, a2, v84);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&a1[started[5]] = *(_QWORD *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(_QWORD *)&a1[started[7]] = *(_QWORD *)&a2[started[7]];
        *(_QWORD *)&a1[started[8]] = *(_QWORD *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        v88 = started[13];
        v89 = &a1[v88];
        v90 = &a2[v88];
        *(_QWORD *)v89 = *(_QWORD *)v90;
        v89[8] = v90[8];
        v91 = started[14];
        v92 = &a1[v91];
        v93 = &a2[v91];
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v93, 1, v84))
          goto LABEL_27;
        goto LABEL_19;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v94 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(a1, a2, v94);
        swift_storeEnumTagMultiPayload();
        break;
      case 0xEu:
        v84 = type metadata accessor for UUID();
        v85 = *(_QWORD *)(v84 - 8);
        v86 = *(void (**)(char *, char *, uint64_t))(v85 + 16);
        v86(a1, a2, v84);
        v95 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v96 = v95[5];
        v97 = &a1[v96];
        v98 = &a2[v96];
        *(_OWORD *)v97 = *(_OWORD *)v98;
        v97[16] = v98[16];
        v99 = v95[6];
        v100 = &a1[v99];
        v101 = &a2[v99];
        *(_OWORD *)v100 = *(_OWORD *)v101;
        v100[16] = v101[16];
        v102 = v95[7];
        v103 = &a1[v102];
        v104 = &a2[v102];
        v103[4] = v104[4];
        *(_DWORD *)v103 = *(_DWORD *)v104;
        v105 = v95[8];
        v106 = &a1[v105];
        v107 = &a2[v105];
        v106[4] = v107[4];
        *(_DWORD *)v106 = *(_DWORD *)v107;
        a1[v95[9]] = a2[v95[9]];
        a1[v95[10]] = a2[v95[10]];
        a1[v95[11]] = a2[v95[11]];
        a1[v95[12]] = a2[v95[12]];
        v108 = v95[13];
        v109 = &a1[v108];
        v110 = &a2[v108];
        *(_DWORD *)v109 = *(_DWORD *)v110;
        v109[4] = v110[4];
        v111 = v95[14];
        v112 = &a1[v111];
        v113 = &a2[v111];
        *(_DWORD *)v112 = *(_DWORD *)v113;
        v112[4] = v113[4];
        v114 = v95[15];
        v92 = &a1[v114];
        v93 = &a2[v114];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v93, 1, v84))
        {
LABEL_19:
          v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        }
        else
        {
LABEL_27:
          v86(v92, v93, v84);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v92, 0, 1, v84);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 0x10u:
        v116 = type metadata accessor for UUID();
        v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
        v117(a1, a2, v116);
        v118 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v117(&a1[v118[5]], &a2[v118[5]], v116);
        v119 = v118[6];
        v120 = &a1[v119];
        v121 = &a2[v119];
        *(_DWORD *)v120 = *(_DWORD *)v121;
        v120[4] = v121[4];
        v122 = v118[7];
        v123 = &a1[v122];
        v124 = &a2[v122];
        *(_DWORD *)v123 = *(_DWORD *)v124;
        v123[4] = v124[4];
        v125 = v118[8];
        v126 = &a1[v125];
        v127 = &a2[v125];
        *(_OWORD *)v126 = *(_OWORD *)v127;
        v126[16] = v127[16];
        a1[v118[9]] = a2[v118[9]];
        a1[v118[10]] = a2[v118[10]];
        a1[v118[11]] = a2[v118[11]];
        v128 = v118[12];
        v129 = &a1[v128];
        v130 = &a2[v128];
        v129[4] = v130[4];
        *(_DWORD *)v129 = *(_DWORD *)v130;
        v131 = v118[13];
        v132 = &a1[v131];
        v133 = &a2[v131];
        *(_DWORD *)v132 = *(_DWORD *)v133;
        v132[4] = v133[4];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x11u:
        v134 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 16))(a1, a2, v134);
        v135 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v136 = v135[5];
        v137 = &a1[v136];
        v138 = &a2[v136];
        *(_DWORD *)v137 = *(_DWORD *)v138;
        v137[4] = v138[4];
        v139 = v135[6];
        v140 = &a1[v139];
        v141 = &a2[v139];
        *(_DWORD *)v140 = *(_DWORD *)v141;
        v140[4] = v141[4];
        v142 = v135[7];
        v143 = &a1[v142];
        v144 = &a2[v142];
        v143[16] = v144[16];
        *(_OWORD *)v143 = *(_OWORD *)v144;
        v145 = v135[8];
        v146 = &a1[v145];
        v147 = &a2[v145];
        v146[4] = v147[4];
        *(_DWORD *)v146 = *(_DWORD *)v147;
        v148 = v135[9];
        v149 = &a1[v148];
        v150 = &a2[v148];
        v149[16] = v150[16];
        *(_OWORD *)v149 = *(_OWORD *)v150;
        a1[v135[10]] = a2[v135[10]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x12u:
        v151 = type metadata accessor for UUID();
        v152 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 16);
        v152(a1, a2, v151);
        v153 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v152(&a1[v153[5]], &a2[v153[5]], v151);
        v154 = v153[6];
        v155 = &a1[v154];
        v156 = &a2[v154];
        v152(&a1[v154], &a2[v154], v151);
        v157 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v158 = v157[5];
        v159 = &v155[v158];
        v160 = &v156[v158];
        *(_DWORD *)v159 = *(_DWORD *)v160;
        v159[4] = v160[4];
        v161 = v157[6];
        v162 = &v155[v161];
        v163 = &v156[v161];
        *(_DWORD *)v162 = *(_DWORD *)v163;
        v162[4] = v163[4];
        v155[v157[7]] = v156[v157[7]];
        v155[v157[8]] = v156[v157[8]];
        v155[v157[9]] = v156[v157[9]];
        v164 = v157[10];
        v165 = &v155[v164];
        v166 = &v156[v164];
        *(_DWORD *)v165 = *(_DWORD *)v166;
        v165[4] = v166[4];
        v155[v157[11]] = v156[v157[11]];
        v167 = v157[12];
        v168 = &v155[v167];
        v169 = &v156[v167];
        v168[4] = v169[4];
        *(_DWORD *)v168 = *(_DWORD *)v169;
        v170 = v157[13];
        v171 = &v155[v170];
        v172 = &v156[v170];
        *(_DWORD *)v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v155[v157[14]] = v156[v157[14]];
        v155[v157[15]] = v156[v157[15]];
        v173 = v153[7];
        v174 = &a1[v173];
        v175 = &a2[v173];
        v152(&a1[v173], v175, v151);
        v176 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v177 = v176[5];
        v178 = &v174[v177];
        v179 = &v175[v177];
        *(_DWORD *)v178 = *(_DWORD *)v179;
        v178[4] = v179[4];
        v180 = v176[6];
        v181 = &v174[v180];
        v182 = &v175[v180];
        *(_DWORD *)v181 = *(_DWORD *)v182;
        v181[4] = v182[4];
        v174[v176[7]] = v175[v176[7]];
        v174[v176[8]] = v175[v176[8]];
        v174[v176[9]] = v175[v176[9]];
        v183 = v176[10];
        v184 = &v174[v183];
        v185 = &v175[v183];
        *(_DWORD *)v184 = *(_DWORD *)v185;
        v184[4] = v185[4];
        v174[v176[11]] = v175[v176[11]];
        v186 = v176[12];
        v187 = &v174[v186];
        v188 = &v175[v186];
        v187[4] = v188[4];
        *(_DWORD *)v187 = *(_DWORD *)v188;
        v189 = v176[13];
        v190 = &v174[v189];
        v191 = &v175[v189];
        *(_DWORD *)v190 = *(_DWORD *)v191;
        v190[4] = v191[4];
        v174[v176[14]] = v175[v176[14]];
        v174[v176[15]] = v175[v176[15]];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x13u:
        v192 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 16))(a1, a2, v192);
        v193 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v194 = v193[5];
        v195 = &a1[v194];
        v196 = &a2[v194];
        *(_DWORD *)v195 = *(_DWORD *)v196;
        v195[4] = v196[4];
        v197 = v193[6];
        v198 = &a1[v197];
        v199 = &a2[v197];
        *(_DWORD *)v198 = *(_DWORD *)v199;
        v198[4] = v199[4];
        a1[v193[7]] = a2[v193[7]];
        v200 = v193[8];
        v201 = &a1[v200];
        v202 = &a2[v200];
        v201[16] = v202[16];
        *(_OWORD *)v201 = *(_OWORD *)v202;
        swift_storeEnumTagMultiPayload();
        break;
      case 0x14u:
        v203 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 16))(a1, a2, v203);
        v204 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v204 + 20)] = *(_DWORD *)&a2[*(int *)(v204 + 20)];
        *(_DWORD *)&a1[*(int *)(v204 + 24)] = *(_DWORD *)&a2[*(int *)(v204 + 24)];
        swift_storeEnumTagMultiPayload();
        break;
      case 0x15u:
        v205 = type metadata accessor for UUID();
        v206 = *(_QWORD *)(v205 - 8);
        v207 = *(void (**)(char *, char *, uint64_t))(v206 + 16);
        v207(a1, a2, v205);
        v208 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v207(&a1[v208[5]], &a2[v208[5]], v205);
        v209 = v208[6];
        v210 = &a1[v209];
        v211 = &a2[v209];
        v212 = *((_QWORD *)v211 + 1);
        *(_QWORD *)v210 = *(_QWORD *)v211;
        *((_QWORD *)v210 + 1) = v212;
        v213 = v208[7];
        v214 = &a1[v213];
        v215 = &a2[v213];
        v216 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48);
        swift_bridgeObjectRetain();
        if (v216(v215, 1, v205))
        {
          v217 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
        }
        else
        {
          v207(v214, v215, v205);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(v214, 0, 1, v205);
        }
        v218 = v208[8];
        v219 = &a1[v218];
        v220 = &a2[v218];
        v221 = *((_QWORD *)v220 + 1);
        *(_QWORD *)v219 = *(_QWORD *)v220;
        *((_QWORD *)v219 + 1) = v221;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityActionSpecification(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      v6 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
      type metadata accessor for __RKEntityAudioActionArguments(0);
      goto LABEL_18;
    case 1:
      v7 = type metadata accessor for UUID();
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v20(a1, v7);
      v8 = type metadata accessor for __RKChangeSceneActionArguments(0);
      goto LABEL_11;
    case 2:
      v9 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for __RKEntityCustomActionArguments(0);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 3:
    case 4:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 17:
    case 19:
    case 20:
      v3 = type metadata accessor for UUID();
      v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
      v5 = a1;
      goto LABEL_15;
    case 6:
      goto LABEL_18;
    case 10:
      v7 = type metadata accessor for UUID();
      v10 = *(_QWORD *)(v7 - 8);
      v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v20(a1, v7);
      v11 = *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
      goto LABEL_8;
    case 14:
      v7 = type metadata accessor for UUID();
      v10 = *(_QWORD *)(v7 - 8);
      v20 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v20(a1, v7);
      v11 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
LABEL_8:
      v12 = a1 + v11;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v7);
      if ((_DWORD)result)
        return result;
      v5 = v12;
      goto LABEL_14;
    case 16:
      v7 = type metadata accessor for UUID();
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v20(a1, v7);
      v8 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
LABEL_11:
      v13 = *(int *)(v8 + 20);
      goto LABEL_13;
    case 18:
      v7 = type metadata accessor for UUID();
      v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
      v20(a1, v7);
      v14 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v20(a1 + v14[5], v7);
      v20(a1 + v14[6], v7);
      v13 = v14[7];
LABEL_13:
      v5 = a1 + v13;
LABEL_14:
      v3 = v7;
      v4 = (uint64_t (*)(uint64_t, uint64_t))v20;
LABEL_15:
      result = v4(v5, v3);
      break;
    case 21:
      v15 = type metadata accessor for UUID();
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
      v17(a1, v15);
      v18 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v17(a1 + *(int *)(v18 + 20), v15);
      swift_bridgeObjectRelease();
      v19 = a1 + *(int *)(v18 + 28);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v19, 1, v15))
        v17(v19, v15);
LABEL_18:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

_BYTE *initializeWithCopy for __RKEntityActionSpecification(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  int *started;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(_BYTE *, _BYTE *, uint64_t);
  int *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  int *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  void (*v149)(_BYTE *, char *, uint64_t);
  int *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  int *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  int *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t);
  int *v205;
  uint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  char *v212;
  unsigned int (*v213)(char *, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  uint64_t v218;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      v8 = v7[5];
      v9 = &a1[v8];
      v10 = (uint64_t *)&a2[v8];
      v12 = *v10;
      v11 = v10[1];
      *v9 = v12;
      v9[1] = v11;
      a1[v7[6]] = a2[v7[6]];
      v13 = v7[7];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v14[8] = v15[8];
      *(_QWORD *)v14 = *(_QWORD *)v15;
      a1[v7[8]] = a2[v7[8]];
      a1[v7[9]] = a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 1u:
      v16 = type metadata accessor for UUID();
      v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(a1, a2, v16);
      v18 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v17(&a1[*(int *)(v18 + 20)], &a2[*(int *)(v18 + 20)], v16);
      goto LABEL_28;
    case 2u:
      v19 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
      v20 = type metadata accessor for __RKEntityCustomActionArguments(0);
      v21 = *(int *)(v20 + 20);
      v22 = &a1[v21];
      v23 = (uint64_t *)&a2[v21];
      v25 = *v23;
      v24 = v23[1];
      *v22 = v25;
      v22[1] = v24;
      *(_QWORD *)&a1[*(int *)(v20 + 24)] = *(_QWORD *)&a2[*(int *)(v20 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 3u:
      v26 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(a1, a2, v26);
      v27 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      v28 = v27[5];
      v29 = &a1[v28];
      v30 = &a2[v28];
      *(_DWORD *)v29 = *(_DWORD *)v30;
      v29[4] = v30[4];
      v31 = v27[6];
      v32 = &a1[v31];
      v33 = &a2[v31];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      a1[v27[7]] = a2[v27[7]];
      a1[v27[8]] = a2[v27[8]];
      goto LABEL_28;
    case 4u:
      v34 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(a1, a2, v34);
      v35 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v35 + 20)] = *(_DWORD *)&a2[*(int *)(v35 + 20)];
      v36 = *(int *)(v35 + 24);
      v37 = &a1[v36];
      v38 = &a2[v36];
      v37[4] = v38[4];
      *(_DWORD *)v37 = *(_DWORD *)v38;
      goto LABEL_28;
    case 6u:
      *a1 = *a2;
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      a1[16] = a2[16];
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_WORD *)a1 + 16) = *((_WORD *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 7u:
      v39 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(a1, a2, v39);
      v40 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v41 = v40[5];
      v42 = &a1[v41];
      v43 = &a2[v41];
      *(_DWORD *)v42 = *(_DWORD *)v43;
      v42[4] = v43[4];
      v44 = v40[6];
      v45 = &a1[v44];
      v46 = &a2[v44];
      *(_DWORD *)v45 = *(_DWORD *)v46;
      v45[4] = v46[4];
      a1[v40[7]] = a2[v40[7]];
      a1[v40[8]] = a2[v40[8]];
      a1[v40[9]] = a2[v40[9]];
      v47 = v40[10];
      v48 = &a1[v47];
      v49 = &a2[v47];
      *(_DWORD *)v48 = *(_DWORD *)v49;
      v48[4] = v49[4];
      a1[v40[11]] = a2[v40[11]];
      v50 = v40[12];
      v51 = &a1[v50];
      v52 = &a2[v50];
      v51[4] = v52[4];
      *(_DWORD *)v51 = *(_DWORD *)v52;
      v53 = v40[13];
      v54 = &a1[v53];
      v55 = &a2[v53];
      *(_DWORD *)v54 = *(_DWORD *)v55;
      v54[4] = v55[4];
      a1[v40[14]] = a2[v40[14]];
      a1[v40[15]] = a2[v40[15]];
      goto LABEL_28;
    case 8u:
      v56 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(a1, a2, v56);
      v57 = type metadata accessor for __RKEntityForceActionArguments(0);
      v58 = *(int *)(v57 + 20);
      v59 = &a1[v58];
      v60 = &a2[v58];
      *(_OWORD *)v59 = *(_OWORD *)v60;
      v59[16] = v60[16];
      v61 = *(int *)(v57 + 24);
      v62 = &a1[v61];
      v63 = &a2[v61];
      v62[16] = v63[16];
      *(_OWORD *)v62 = *(_OWORD *)v63;
      goto LABEL_28;
    case 9u:
      v64 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(a1, a2, v64);
      v65 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v66 = v65[5];
      v67 = &a1[v66];
      v68 = &a2[v66];
      *(_DWORD *)v67 = *(_DWORD *)v68;
      v67[4] = v68[4];
      v69 = v65[6];
      v70 = &a1[v69];
      v71 = &a2[v69];
      *(_DWORD *)v70 = *(_DWORD *)v71;
      v70[4] = v71[4];
      a1[v65[7]] = a2[v65[7]];
      a1[v65[8]] = a2[v65[8]];
      a1[v65[9]] = a2[v65[9]];
      v72 = v65[10];
      v73 = &a1[v72];
      v74 = &a2[v72];
      *(_DWORD *)v73 = *(_DWORD *)v74;
      v73[4] = v74[4];
      a1[v65[11]] = a2[v65[11]];
      v75 = v65[12];
      v76 = &a1[v75];
      v77 = &a2[v75];
      v76[4] = v77[4];
      *(_DWORD *)v76 = *(_DWORD *)v77;
      v78 = v65[13];
      v79 = &a1[v78];
      v80 = &a2[v78];
      *(_DWORD *)v79 = *(_DWORD *)v80;
      v79[4] = v80[4];
      a1[v65[14]] = a2[v65[14]];
      a1[v65[15]] = a2[v65[15]];
      goto LABEL_28;
    case 0xAu:
      v81 = type metadata accessor for UUID();
      v82 = *(_QWORD *)(v81 - 8);
      v83 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v83(a1, a2, v81);
      started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(_QWORD *)&a1[started[5]] = *(_QWORD *)&a2[started[5]];
      a1[started[6]] = a2[started[6]];
      *(_QWORD *)&a1[started[7]] = *(_QWORD *)&a2[started[7]];
      *(_QWORD *)&a1[started[8]] = *(_QWORD *)&a2[started[8]];
      a1[started[9]] = a2[started[9]];
      a1[started[10]] = a2[started[10]];
      *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
      a1[started[12]] = a2[started[12]];
      v85 = started[13];
      v86 = &a1[v85];
      v87 = &a2[v85];
      *(_QWORD *)v86 = *(_QWORD *)v87;
      v86[8] = v87[8];
      v88 = started[14];
      v89 = &a1[v88];
      v90 = &a2[v88];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v90, 1, v81))
        goto LABEL_13;
      goto LABEL_27;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      v92 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v92 - 8) + 16))(a1, a2, v92);
      goto LABEL_28;
    case 0xEu:
      v81 = type metadata accessor for UUID();
      v82 = *(_QWORD *)(v81 - 8);
      v83 = *(void (**)(char *, char *, uint64_t))(v82 + 16);
      v83(a1, a2, v81);
      v93 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      v94 = v93[5];
      v95 = &a1[v94];
      v96 = &a2[v94];
      *(_OWORD *)v95 = *(_OWORD *)v96;
      v95[16] = v96[16];
      v97 = v93[6];
      v98 = &a1[v97];
      v99 = &a2[v97];
      *(_OWORD *)v98 = *(_OWORD *)v99;
      v98[16] = v99[16];
      v100 = v93[7];
      v101 = &a1[v100];
      v102 = &a2[v100];
      v101[4] = v102[4];
      *(_DWORD *)v101 = *(_DWORD *)v102;
      v103 = v93[8];
      v104 = &a1[v103];
      v105 = &a2[v103];
      v104[4] = v105[4];
      *(_DWORD *)v104 = *(_DWORD *)v105;
      a1[v93[9]] = a2[v93[9]];
      a1[v93[10]] = a2[v93[10]];
      a1[v93[11]] = a2[v93[11]];
      a1[v93[12]] = a2[v93[12]];
      v106 = v93[13];
      v107 = &a1[v106];
      v108 = &a2[v106];
      *(_DWORD *)v107 = *(_DWORD *)v108;
      v107[4] = v108[4];
      v109 = v93[14];
      v110 = &a1[v109];
      v111 = &a2[v109];
      *(_DWORD *)v110 = *(_DWORD *)v111;
      v110[4] = v111[4];
      v112 = v93[15];
      v89 = &a1[v112];
      v90 = &a2[v112];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v90, 1, v81))
      {
LABEL_13:
        v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
      }
      else
      {
LABEL_27:
        v83(v89, v90, v81);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v89, 0, 1, v81);
      }
      goto LABEL_28;
    case 0x10u:
      v113 = type metadata accessor for UUID();
      v114 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v113 - 8) + 16);
      v114(a1, a2, v113);
      v115 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v114(&a1[v115[5]], &a2[v115[5]], v113);
      v116 = v115[6];
      v117 = &a1[v116];
      v118 = &a2[v116];
      *(_DWORD *)v117 = *(_DWORD *)v118;
      v117[4] = v118[4];
      v119 = v115[7];
      v120 = &a1[v119];
      v121 = &a2[v119];
      *(_DWORD *)v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      v122 = v115[8];
      v123 = &a1[v122];
      v124 = &a2[v122];
      *(_OWORD *)v123 = *(_OWORD *)v124;
      v123[16] = v124[16];
      a1[v115[9]] = a2[v115[9]];
      a1[v115[10]] = a2[v115[10]];
      a1[v115[11]] = a2[v115[11]];
      v125 = v115[12];
      v126 = &a1[v125];
      v127 = &a2[v125];
      v126[4] = v127[4];
      *(_DWORD *)v126 = *(_DWORD *)v127;
      v128 = v115[13];
      v129 = &a1[v128];
      v130 = &a2[v128];
      *(_DWORD *)v129 = *(_DWORD *)v130;
      v129[4] = v130[4];
      goto LABEL_28;
    case 0x11u:
      v131 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v131 - 8) + 16))(a1, a2, v131);
      v132 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      v133 = v132[5];
      v134 = &a1[v133];
      v135 = &a2[v133];
      *(_DWORD *)v134 = *(_DWORD *)v135;
      v134[4] = v135[4];
      v136 = v132[6];
      v137 = &a1[v136];
      v138 = &a2[v136];
      *(_DWORD *)v137 = *(_DWORD *)v138;
      v137[4] = v138[4];
      v139 = v132[7];
      v140 = &a1[v139];
      v141 = &a2[v139];
      v140[16] = v141[16];
      *(_OWORD *)v140 = *(_OWORD *)v141;
      v142 = v132[8];
      v143 = &a1[v142];
      v144 = &a2[v142];
      v143[4] = v144[4];
      *(_DWORD *)v143 = *(_DWORD *)v144;
      v145 = v132[9];
      v146 = &a1[v145];
      v147 = &a2[v145];
      v146[16] = v147[16];
      *(_OWORD *)v146 = *(_OWORD *)v147;
      a1[v132[10]] = a2[v132[10]];
      goto LABEL_28;
    case 0x12u:
      v148 = type metadata accessor for UUID();
      v149 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v148 - 8) + 16);
      v149(a1, a2, v148);
      v150 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v149(&a1[v150[5]], &a2[v150[5]], v148);
      v151 = v150[6];
      v152 = &a1[v151];
      v153 = &a2[v151];
      v149(&a1[v151], &a2[v151], v148);
      v154 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v155 = v154[5];
      v156 = &v152[v155];
      v157 = &v153[v155];
      *(_DWORD *)v156 = *(_DWORD *)v157;
      v156[4] = v157[4];
      v158 = v154[6];
      v159 = &v152[v158];
      v160 = &v153[v158];
      *(_DWORD *)v159 = *(_DWORD *)v160;
      v159[4] = v160[4];
      v152[v154[7]] = v153[v154[7]];
      v152[v154[8]] = v153[v154[8]];
      v152[v154[9]] = v153[v154[9]];
      v161 = v154[10];
      v162 = &v152[v161];
      v163 = &v153[v161];
      *(_DWORD *)v162 = *(_DWORD *)v163;
      v162[4] = v163[4];
      v152[v154[11]] = v153[v154[11]];
      v164 = v154[12];
      v165 = &v152[v164];
      v166 = &v153[v164];
      v165[4] = v166[4];
      *(_DWORD *)v165 = *(_DWORD *)v166;
      v167 = v154[13];
      v168 = &v152[v167];
      v169 = &v153[v167];
      *(_DWORD *)v168 = *(_DWORD *)v169;
      v168[4] = v169[4];
      v152[v154[14]] = v153[v154[14]];
      v152[v154[15]] = v153[v154[15]];
      v170 = v150[7];
      v171 = &a1[v170];
      v172 = &a2[v170];
      v149(&a1[v170], v172, v148);
      v173 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v174 = v173[5];
      v175 = &v171[v174];
      v176 = &v172[v174];
      *(_DWORD *)v175 = *(_DWORD *)v176;
      v175[4] = v176[4];
      v177 = v173[6];
      v178 = &v171[v177];
      v179 = &v172[v177];
      *(_DWORD *)v178 = *(_DWORD *)v179;
      v178[4] = v179[4];
      v171[v173[7]] = v172[v173[7]];
      v171[v173[8]] = v172[v173[8]];
      v171[v173[9]] = v172[v173[9]];
      v180 = v173[10];
      v181 = &v171[v180];
      v182 = &v172[v180];
      *(_DWORD *)v181 = *(_DWORD *)v182;
      v181[4] = v182[4];
      v171[v173[11]] = v172[v173[11]];
      v183 = v173[12];
      v184 = &v171[v183];
      v185 = &v172[v183];
      v184[4] = v185[4];
      *(_DWORD *)v184 = *(_DWORD *)v185;
      v186 = v173[13];
      v187 = &v171[v186];
      v188 = &v172[v186];
      *(_DWORD *)v187 = *(_DWORD *)v188;
      v187[4] = v188[4];
      v171[v173[14]] = v172[v173[14]];
      v171[v173[15]] = v172[v173[15]];
      goto LABEL_28;
    case 0x13u:
      v189 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v189 - 8) + 16))(a1, a2, v189);
      v190 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      v191 = v190[5];
      v192 = &a1[v191];
      v193 = &a2[v191];
      *(_DWORD *)v192 = *(_DWORD *)v193;
      v192[4] = v193[4];
      v194 = v190[6];
      v195 = &a1[v194];
      v196 = &a2[v194];
      *(_DWORD *)v195 = *(_DWORD *)v196;
      v195[4] = v196[4];
      a1[v190[7]] = a2[v190[7]];
      v197 = v190[8];
      v198 = &a1[v197];
      v199 = &a2[v197];
      v198[16] = v199[16];
      *(_OWORD *)v198 = *(_OWORD *)v199;
      goto LABEL_28;
    case 0x14u:
      v200 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v200 - 8) + 16))(a1, a2, v200);
      v201 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v201 + 20)] = *(_DWORD *)&a2[*(int *)(v201 + 20)];
      *(_DWORD *)&a1[*(int *)(v201 + 24)] = *(_DWORD *)&a2[*(int *)(v201 + 24)];
      goto LABEL_28;
    case 0x15u:
      v202 = type metadata accessor for UUID();
      v203 = *(_QWORD *)(v202 - 8);
      v204 = *(void (**)(char *, char *, uint64_t))(v203 + 16);
      v204(a1, a2, v202);
      v205 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v204(&a1[v205[5]], &a2[v205[5]], v202);
      v206 = v205[6];
      v207 = &a1[v206];
      v208 = &a2[v206];
      v209 = v208[1];
      *v207 = *v208;
      v207[1] = v209;
      v210 = v205[7];
      v211 = &a1[v210];
      v212 = &a2[v210];
      v213 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48);
      swift_bridgeObjectRetain();
      if (v213(v212, 1, v202))
      {
        v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v211, v212, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
      }
      else
      {
        v204(v211, v212, v202);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v203 + 56))(v211, 0, 1, v202);
      }
      v215 = v205[8];
      v216 = &a1[v215];
      v217 = &a2[v215];
      v218 = v217[1];
      *v216 = *v217;
      v216[1] = v218;
      swift_bridgeObjectRetain();
LABEL_28:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithCopy for __RKEntityActionSpecification(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  int *started;
  uint64_t v98;
  char *v99;
  char *v100;
  char v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char v111;
  uint64_t v112;
  char *v113;
  char *v114;
  char v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(_BYTE *, _BYTE *, uint64_t);
  int *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  int v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  int v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  char v158;
  uint64_t v159;
  char *v160;
  char *v161;
  char v162;
  uint64_t v163;
  char *v164;
  char *v165;
  char v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char v174;
  uint64_t v175;
  void (*v176)(_BYTE *, char *, uint64_t);
  int *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  int *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char v189;
  uint64_t v190;
  char *v191;
  char *v192;
  char v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char v201;
  uint64_t v202;
  char *v203;
  char *v204;
  int *v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char v213;
  uint64_t v214;
  char *v215;
  char *v216;
  char v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char v225;
  uint64_t v226;
  int *v227;
  uint64_t v228;
  char *v229;
  char *v230;
  char v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char v235;
  uint64_t v236;
  char *v237;
  char *v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  void (*v244)(char *, char *, uint64_t);
  int *v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  uint64_t v249;
  char *v250;
  char *v251;
  unsigned int (*v252)(char *, uint64_t, uint64_t);
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  _QWORD *v256;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityActionSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        v8 = v7[5];
        v9 = &a1[v8];
        v10 = &a2[v8];
        *v9 = *v10;
        v9[1] = v10[1];
        a1[v7[6]] = a2[v7[6]];
        v11 = v7[7];
        v12 = &a1[v11];
        v13 = &a2[v11];
        v14 = v13[8];
        *(_QWORD *)v12 = *(_QWORD *)v13;
        v12[8] = v14;
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        a1[v7[10]] = a2[v7[10]];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 1u:
        v15 = type metadata accessor for UUID();
        v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
        v16(a1, a2, v15);
        v17 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v16(&a1[*(int *)(v17 + 20)], &a2[*(int *)(v17 + 20)], v15);
        goto LABEL_29;
      case 2u:
        v18 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a1, a2, v18);
        v19 = type metadata accessor for __RKEntityCustomActionArguments(0);
        v20 = *(int *)(v19 + 20);
        v21 = &a1[v20];
        v22 = &a2[v20];
        *v21 = *v22;
        v21[1] = v22[1];
        *(_QWORD *)&a1[*(int *)(v19 + 24)] = *(_QWORD *)&a2[*(int *)(v19 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 3u:
        v23 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(a1, a2, v23);
        v24 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v25 = v24[5];
        v26 = &a1[v25];
        v27 = &a2[v25];
        v28 = v27[4];
        *(_DWORD *)v26 = *(_DWORD *)v27;
        v26[4] = v28;
        v29 = v24[6];
        v30 = &a1[v29];
        v31 = &a2[v29];
        v32 = v31[4];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v32;
        a1[v24[7]] = a2[v24[7]];
        a1[v24[8]] = a2[v24[8]];
        goto LABEL_29;
      case 4u:
        v33 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(a1, a2, v33);
        v34 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v34 + 20)] = *(_DWORD *)&a2[*(int *)(v34 + 20)];
        v35 = *(int *)(v34 + 24);
        v36 = &a1[v35];
        v37 = &a2[v35];
        v38 = v37[4];
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v36[4] = v38;
        goto LABEL_29;
      case 6u:
        *a1 = *a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        v39 = *((_QWORD *)a2 + 3);
        a1[32] = a2[32];
        *((_QWORD *)a1 + 3) = v39;
        a1[33] = a2[33];
        swift_bridgeObjectRetain();
        goto LABEL_29;
      case 7u:
        v40 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(a1, a2, v40);
        v41 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v42 = v41[5];
        v43 = &a1[v42];
        v44 = &a2[v42];
        v45 = v44[4];
        *(_DWORD *)v43 = *(_DWORD *)v44;
        v43[4] = v45;
        v46 = v41[6];
        v47 = &a1[v46];
        v48 = &a2[v46];
        v49 = v48[4];
        *(_DWORD *)v47 = *(_DWORD *)v48;
        v47[4] = v49;
        a1[v41[7]] = a2[v41[7]];
        a1[v41[8]] = a2[v41[8]];
        a1[v41[9]] = a2[v41[9]];
        v50 = v41[10];
        v51 = &a1[v50];
        v52 = &a2[v50];
        v53 = v52[4];
        *(_DWORD *)v51 = *(_DWORD *)v52;
        v51[4] = v53;
        a1[v41[11]] = a2[v41[11]];
        v54 = v41[12];
        v55 = &a1[v54];
        v56 = &a2[v54];
        v57 = v56[4];
        *(_DWORD *)v55 = *(_DWORD *)v56;
        v55[4] = v57;
        v58 = v41[13];
        v59 = &a1[v58];
        v60 = &a2[v58];
        v61 = v60[4];
        *(_DWORD *)v59 = *(_DWORD *)v60;
        v59[4] = v61;
        a1[v41[14]] = a2[v41[14]];
        a1[v41[15]] = a2[v41[15]];
        goto LABEL_29;
      case 8u:
        v62 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 16))(a1, a2, v62);
        v63 = type metadata accessor for __RKEntityForceActionArguments(0);
        v64 = *(int *)(v63 + 20);
        v65 = &a1[v64];
        v66 = &a2[v64];
        v67 = v66[16];
        *(_OWORD *)v65 = *(_OWORD *)v66;
        v65[16] = v67;
        v68 = *(int *)(v63 + 24);
        v69 = &a1[v68];
        v70 = &a2[v68];
        v71 = v70[16];
        *(_OWORD *)v69 = *(_OWORD *)v70;
        v69[16] = v71;
        goto LABEL_29;
      case 9u:
        v72 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(a1, a2, v72);
        v73 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v74 = v73[5];
        v75 = &a1[v74];
        v76 = &a2[v74];
        v77 = v76[4];
        *(_DWORD *)v75 = *(_DWORD *)v76;
        v75[4] = v77;
        v78 = v73[6];
        v79 = &a1[v78];
        v80 = &a2[v78];
        v81 = v80[4];
        *(_DWORD *)v79 = *(_DWORD *)v80;
        v79[4] = v81;
        a1[v73[7]] = a2[v73[7]];
        a1[v73[8]] = a2[v73[8]];
        a1[v73[9]] = a2[v73[9]];
        v82 = v73[10];
        v83 = &a1[v82];
        v84 = &a2[v82];
        v85 = v84[4];
        *(_DWORD *)v83 = *(_DWORD *)v84;
        v83[4] = v85;
        a1[v73[11]] = a2[v73[11]];
        v86 = v73[12];
        v87 = &a1[v86];
        v88 = &a2[v86];
        v89 = v88[4];
        *(_DWORD *)v87 = *(_DWORD *)v88;
        v87[4] = v89;
        v90 = v73[13];
        v91 = &a1[v90];
        v92 = &a2[v90];
        v93 = v92[4];
        *(_DWORD *)v91 = *(_DWORD *)v92;
        v91[4] = v93;
        a1[v73[14]] = a2[v73[14]];
        a1[v73[15]] = a2[v73[15]];
        goto LABEL_29;
      case 0xAu:
        v94 = type metadata accessor for UUID();
        v95 = *(_QWORD *)(v94 - 8);
        v96 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v96(a1, a2, v94);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&a1[started[5]] = *(_QWORD *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(_QWORD *)&a1[started[7]] = *(_QWORD *)&a2[started[7]];
        *(_QWORD *)&a1[started[8]] = *(_QWORD *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        v98 = started[13];
        v99 = &a1[v98];
        v100 = &a2[v98];
        v101 = v100[8];
        *(_QWORD *)v99 = *(_QWORD *)v100;
        v99[8] = v101;
        v102 = started[14];
        v103 = &a1[v102];
        v104 = &a2[v102];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v104, 1, v94))
          goto LABEL_14;
        goto LABEL_25;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v106 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(a1, a2, v106);
        goto LABEL_29;
      case 0xEu:
        v94 = type metadata accessor for UUID();
        v95 = *(_QWORD *)(v94 - 8);
        v96 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
        v96(a1, a2, v94);
        v107 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v108 = v107[5];
        v109 = &a1[v108];
        v110 = &a2[v108];
        v111 = v110[16];
        *(_OWORD *)v109 = *(_OWORD *)v110;
        v109[16] = v111;
        v112 = v107[6];
        v113 = &a1[v112];
        v114 = &a2[v112];
        v115 = v114[16];
        *(_OWORD *)v113 = *(_OWORD *)v114;
        v113[16] = v115;
        v116 = v107[7];
        v117 = &a1[v116];
        v118 = &a2[v116];
        v119 = v118[4];
        *(_DWORD *)v117 = *(_DWORD *)v118;
        v117[4] = v119;
        v120 = v107[8];
        v121 = &a1[v120];
        v122 = &a2[v120];
        v123 = v122[4];
        *(_DWORD *)v121 = *(_DWORD *)v122;
        v121[4] = v123;
        a1[v107[9]] = a2[v107[9]];
        a1[v107[10]] = a2[v107[10]];
        a1[v107[11]] = a2[v107[11]];
        a1[v107[12]] = a2[v107[12]];
        v124 = v107[13];
        v125 = &a1[v124];
        v126 = &a2[v124];
        v127 = v126[4];
        *(_DWORD *)v125 = *(_DWORD *)v126;
        v125[4] = v127;
        v128 = v107[14];
        v129 = &a1[v128];
        v130 = &a2[v128];
        v131 = v130[4];
        *(_DWORD *)v129 = *(_DWORD *)v130;
        v129[4] = v131;
        v132 = v107[15];
        v103 = &a1[v132];
        v104 = &a2[v132];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v104, 1, v94))
        {
LABEL_14:
          v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        }
        else
        {
LABEL_25:
          v96(v103, v104, v94);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v103, 0, 1, v94);
        }
        goto LABEL_29;
      case 0x10u:
        v133 = type metadata accessor for UUID();
        v134 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v133 - 8) + 16);
        v134(a1, a2, v133);
        v135 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v134(&a1[v135[5]], &a2[v135[5]], v133);
        v136 = v135[6];
        v137 = &a1[v136];
        v138 = &a2[v136];
        v139 = *(_DWORD *)v138;
        v137[4] = v138[4];
        *(_DWORD *)v137 = v139;
        v140 = v135[7];
        v141 = &a1[v140];
        v142 = &a2[v140];
        LOBYTE(v139) = v142[4];
        *(_DWORD *)v141 = *(_DWORD *)v142;
        v141[4] = v139;
        v143 = v135[8];
        v144 = &a1[v143];
        v145 = &a2[v143];
        LOBYTE(v139) = v145[16];
        *(_OWORD *)v144 = *(_OWORD *)v145;
        v144[16] = v139;
        a1[v135[9]] = a2[v135[9]];
        a1[v135[10]] = a2[v135[10]];
        a1[v135[11]] = a2[v135[11]];
        v146 = v135[12];
        v147 = &a1[v146];
        v148 = &a2[v146];
        v149 = *(_DWORD *)v148;
        v147[4] = v148[4];
        *(_DWORD *)v147 = v149;
        v150 = v135[13];
        v151 = &a1[v150];
        v152 = &a2[v150];
        LOBYTE(v149) = v152[4];
        *(_DWORD *)v151 = *(_DWORD *)v152;
        v151[4] = v149;
        goto LABEL_29;
      case 0x11u:
        v153 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v153 - 8) + 16))(a1, a2, v153);
        v154 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v155 = v154[5];
        v156 = &a1[v155];
        v157 = &a2[v155];
        v158 = v157[4];
        *(_DWORD *)v156 = *(_DWORD *)v157;
        v156[4] = v158;
        v159 = v154[6];
        v160 = &a1[v159];
        v161 = &a2[v159];
        v162 = v161[4];
        *(_DWORD *)v160 = *(_DWORD *)v161;
        v160[4] = v162;
        v163 = v154[7];
        v164 = &a1[v163];
        v165 = &a2[v163];
        v166 = v165[16];
        *(_OWORD *)v164 = *(_OWORD *)v165;
        v164[16] = v166;
        v167 = v154[8];
        v168 = &a1[v167];
        v169 = &a2[v167];
        v170 = v169[4];
        *(_DWORD *)v168 = *(_DWORD *)v169;
        v168[4] = v170;
        v171 = v154[9];
        v172 = &a1[v171];
        v173 = &a2[v171];
        v174 = v173[16];
        *(_OWORD *)v172 = *(_OWORD *)v173;
        v172[16] = v174;
        a1[v154[10]] = a2[v154[10]];
        goto LABEL_29;
      case 0x12u:
        v175 = type metadata accessor for UUID();
        v176 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v175 - 8) + 16);
        v176(a1, a2, v175);
        v177 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v176(&a1[v177[5]], &a2[v177[5]], v175);
        v178 = v177[6];
        v179 = &a1[v178];
        v180 = &a2[v178];
        v176(&a1[v178], &a2[v178], v175);
        v181 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v182 = v181[5];
        v183 = &v179[v182];
        v184 = &v180[v182];
        v185 = v184[4];
        *(_DWORD *)v183 = *(_DWORD *)v184;
        v183[4] = v185;
        v186 = v181[6];
        v187 = &v179[v186];
        v188 = &v180[v186];
        v189 = v188[4];
        *(_DWORD *)v187 = *(_DWORD *)v188;
        v187[4] = v189;
        v179[v181[7]] = v180[v181[7]];
        v179[v181[8]] = v180[v181[8]];
        v179[v181[9]] = v180[v181[9]];
        v190 = v181[10];
        v191 = &v179[v190];
        v192 = &v180[v190];
        v193 = v192[4];
        *(_DWORD *)v191 = *(_DWORD *)v192;
        v191[4] = v193;
        v179[v181[11]] = v180[v181[11]];
        v194 = v181[12];
        v195 = &v179[v194];
        v196 = &v180[v194];
        v197 = v196[4];
        *(_DWORD *)v195 = *(_DWORD *)v196;
        v195[4] = v197;
        v198 = v181[13];
        v199 = &v179[v198];
        v200 = &v180[v198];
        v201 = v200[4];
        *(_DWORD *)v199 = *(_DWORD *)v200;
        v199[4] = v201;
        v179[v181[14]] = v180[v181[14]];
        v179[v181[15]] = v180[v181[15]];
        v202 = v177[7];
        v203 = &a1[v202];
        v204 = &a2[v202];
        v176(&a1[v202], v204, v175);
        v205 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v206 = v205[5];
        v207 = &v203[v206];
        v208 = &v204[v206];
        v209 = v208[4];
        *(_DWORD *)v207 = *(_DWORD *)v208;
        v207[4] = v209;
        v210 = v205[6];
        v211 = &v203[v210];
        v212 = &v204[v210];
        v213 = v212[4];
        *(_DWORD *)v211 = *(_DWORD *)v212;
        v211[4] = v213;
        v203[v205[7]] = v204[v205[7]];
        v203[v205[8]] = v204[v205[8]];
        v203[v205[9]] = v204[v205[9]];
        v214 = v205[10];
        v215 = &v203[v214];
        v216 = &v204[v214];
        v217 = v216[4];
        *(_DWORD *)v215 = *(_DWORD *)v216;
        v215[4] = v217;
        v203[v205[11]] = v204[v205[11]];
        v218 = v205[12];
        v219 = &v203[v218];
        v220 = &v204[v218];
        v221 = v220[4];
        *(_DWORD *)v219 = *(_DWORD *)v220;
        v219[4] = v221;
        v222 = v205[13];
        v223 = &v203[v222];
        v224 = &v204[v222];
        v225 = v224[4];
        *(_DWORD *)v223 = *(_DWORD *)v224;
        v223[4] = v225;
        v203[v205[14]] = v204[v205[14]];
        v203[v205[15]] = v204[v205[15]];
        goto LABEL_29;
      case 0x13u:
        v226 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v226 - 8) + 16))(a1, a2, v226);
        v227 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v228 = v227[5];
        v229 = &a1[v228];
        v230 = &a2[v228];
        v231 = v230[4];
        *(_DWORD *)v229 = *(_DWORD *)v230;
        v229[4] = v231;
        v232 = v227[6];
        v233 = &a1[v232];
        v234 = &a2[v232];
        v235 = v234[4];
        *(_DWORD *)v233 = *(_DWORD *)v234;
        v233[4] = v235;
        a1[v227[7]] = a2[v227[7]];
        v236 = v227[8];
        v237 = &a1[v236];
        v238 = &a2[v236];
        v239 = v238[16];
        *(_OWORD *)v237 = *(_OWORD *)v238;
        v237[16] = v239;
        goto LABEL_29;
      case 0x14u:
        v240 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v240 - 8) + 16))(a1, a2, v240);
        v241 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v241 + 20)] = *(_DWORD *)&a2[*(int *)(v241 + 20)];
        *(_DWORD *)&a1[*(int *)(v241 + 24)] = *(_DWORD *)&a2[*(int *)(v241 + 24)];
        goto LABEL_29;
      case 0x15u:
        v242 = type metadata accessor for UUID();
        v243 = *(_QWORD *)(v242 - 8);
        v244 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
        v244(a1, a2, v242);
        v245 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v244(&a1[v245[5]], &a2[v245[5]], v242);
        v246 = v245[6];
        v247 = &a1[v246];
        v248 = &a2[v246];
        *v247 = *v248;
        v247[1] = v248[1];
        v249 = v245[7];
        v250 = &a1[v249];
        v251 = &a2[v249];
        v252 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48);
        swift_bridgeObjectRetain();
        if (v252(v251, 1, v242))
        {
          v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v250, v251, *(_QWORD *)(*(_QWORD *)(v253 - 8) + 64));
        }
        else
        {
          v244(v250, v251, v242);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v250, 0, 1, v242);
        }
        v254 = v245[8];
        v255 = &a1[v254];
        v256 = &a2[v254];
        *v255 = *v256;
        v255[1] = v256[1];
        swift_bridgeObjectRetain();
LABEL_29:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  int *started;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  int *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  int *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  int *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v6 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
      a1[v7[6]] = a2[v7[6]];
      v8 = v7[7];
      v9 = &a1[v8];
      v10 = &a2[v8];
      v9[8] = v10[8];
      *(_QWORD *)v9 = *(_QWORD *)v10;
      a1[v7[8]] = a2[v7[8]];
      a1[v7[9]] = a2[v7[9]];
      a1[v7[10]] = a2[v7[10]];
      goto LABEL_27;
    case 1u:
      v11 = type metadata accessor for UUID();
      v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(a1, a2, v11);
      v13 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v12(&a1[*(int *)(v13 + 20)], &a2[*(int *)(v13 + 20)], v11);
      goto LABEL_27;
    case 2u:
      v14 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v15 = type metadata accessor for __RKEntityCustomActionArguments(0);
      *(_OWORD *)&a1[*(int *)(v15 + 20)] = *(_OWORD *)&a2[*(int *)(v15 + 20)];
      *(_QWORD *)&a1[*(int *)(v15 + 24)] = *(_QWORD *)&a2[*(int *)(v15 + 24)];
      goto LABEL_27;
    case 3u:
      v16 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
      v17 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      v18 = v17[5];
      v19 = &a1[v18];
      v20 = &a2[v18];
      *(_DWORD *)v19 = *(_DWORD *)v20;
      v19[4] = v20[4];
      v21 = v17[6];
      v22 = &a1[v21];
      v23 = &a2[v21];
      *(_DWORD *)v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      a1[v17[7]] = a2[v17[7]];
      a1[v17[8]] = a2[v17[8]];
      goto LABEL_27;
    case 4u:
      v24 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
      v25 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v25 + 20)] = *(_DWORD *)&a2[*(int *)(v25 + 20)];
      v26 = *(int *)(v25 + 24);
      v27 = &a1[v26];
      v28 = &a2[v26];
      v27[4] = v28[4];
      *(_DWORD *)v27 = *(_DWORD *)v28;
      goto LABEL_27;
    case 7u:
      v29 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
      v30 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v31 = v30[5];
      v32 = &a1[v31];
      v33 = &a2[v31];
      *(_DWORD *)v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      v34 = v30[6];
      v35 = &a1[v34];
      v36 = &a2[v34];
      *(_DWORD *)v35 = *(_DWORD *)v36;
      v35[4] = v36[4];
      a1[v30[7]] = a2[v30[7]];
      a1[v30[8]] = a2[v30[8]];
      a1[v30[9]] = a2[v30[9]];
      v37 = v30[10];
      v38 = &a1[v37];
      v39 = &a2[v37];
      *(_DWORD *)v38 = *(_DWORD *)v39;
      v38[4] = v39[4];
      a1[v30[11]] = a2[v30[11]];
      v40 = v30[12];
      v41 = &a1[v40];
      v42 = &a2[v40];
      v41[4] = v42[4];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v43 = v30[13];
      v44 = &a1[v43];
      v45 = &a2[v43];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      a1[v30[14]] = a2[v30[14]];
      a1[v30[15]] = a2[v30[15]];
      goto LABEL_27;
    case 8u:
      v46 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(a1, a2, v46);
      v47 = type metadata accessor for __RKEntityForceActionArguments(0);
      v48 = *(int *)(v47 + 20);
      v49 = &a1[v48];
      v50 = &a2[v48];
      *(_OWORD *)v49 = *(_OWORD *)v50;
      v49[16] = v50[16];
      v51 = *(int *)(v47 + 24);
      v52 = &a1[v51];
      v53 = &a2[v51];
      v52[16] = v53[16];
      *(_OWORD *)v52 = *(_OWORD *)v53;
      goto LABEL_27;
    case 9u:
      v54 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
      v55 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v56 = v55[5];
      v57 = &a1[v56];
      v58 = &a2[v56];
      *(_DWORD *)v57 = *(_DWORD *)v58;
      v57[4] = v58[4];
      v59 = v55[6];
      v60 = &a1[v59];
      v61 = &a2[v59];
      *(_DWORD *)v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      a1[v55[7]] = a2[v55[7]];
      a1[v55[8]] = a2[v55[8]];
      a1[v55[9]] = a2[v55[9]];
      v62 = v55[10];
      v63 = &a1[v62];
      v64 = &a2[v62];
      *(_DWORD *)v63 = *(_DWORD *)v64;
      v63[4] = v64[4];
      a1[v55[11]] = a2[v55[11]];
      v65 = v55[12];
      v66 = &a1[v65];
      v67 = &a2[v65];
      v66[4] = v67[4];
      *(_DWORD *)v66 = *(_DWORD *)v67;
      v68 = v55[13];
      v69 = &a1[v68];
      v70 = &a2[v68];
      *(_DWORD *)v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      a1[v55[14]] = a2[v55[14]];
      a1[v55[15]] = a2[v55[15]];
      goto LABEL_27;
    case 0xAu:
      v71 = type metadata accessor for UUID();
      v72 = *(_QWORD *)(v71 - 8);
      v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v73(a1, a2, v71);
      started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(_QWORD *)&a1[started[5]] = *(_QWORD *)&a2[started[5]];
      a1[started[6]] = a2[started[6]];
      *(_QWORD *)&a1[started[7]] = *(_QWORD *)&a2[started[7]];
      *(_QWORD *)&a1[started[8]] = *(_QWORD *)&a2[started[8]];
      a1[started[9]] = a2[started[9]];
      a1[started[10]] = a2[started[10]];
      *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
      a1[started[12]] = a2[started[12]];
      v75 = started[13];
      v76 = &a1[v75];
      v77 = &a2[v75];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      v76[8] = v77[8];
      v78 = started[14];
      v79 = &a1[v78];
      v80 = &a2[v78];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
        goto LABEL_12;
      goto LABEL_23;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      v82 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(a1, a2, v82);
      goto LABEL_27;
    case 0xEu:
      v71 = type metadata accessor for UUID();
      v72 = *(_QWORD *)(v71 - 8);
      v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
      v73(a1, a2, v71);
      v83 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      v84 = v83[5];
      v85 = &a1[v84];
      v86 = &a2[v84];
      *(_OWORD *)v85 = *(_OWORD *)v86;
      v85[16] = v86[16];
      v87 = v83[6];
      v88 = &a1[v87];
      v89 = &a2[v87];
      *(_OWORD *)v88 = *(_OWORD *)v89;
      v88[16] = v89[16];
      v90 = v83[7];
      v91 = &a1[v90];
      v92 = &a2[v90];
      v91[4] = v92[4];
      *(_DWORD *)v91 = *(_DWORD *)v92;
      v93 = v83[8];
      v94 = &a1[v93];
      v95 = &a2[v93];
      v94[4] = v95[4];
      *(_DWORD *)v94 = *(_DWORD *)v95;
      a1[v83[9]] = a2[v83[9]];
      a1[v83[10]] = a2[v83[10]];
      a1[v83[11]] = a2[v83[11]];
      a1[v83[12]] = a2[v83[12]];
      v96 = v83[13];
      v97 = &a1[v96];
      v98 = &a2[v96];
      *(_DWORD *)v97 = *(_DWORD *)v98;
      v97[4] = v98[4];
      v99 = v83[14];
      v100 = &a1[v99];
      v101 = &a2[v99];
      *(_DWORD *)v100 = *(_DWORD *)v101;
      v100[4] = v101[4];
      v102 = v83[15];
      v79 = &a1[v102];
      v80 = &a2[v102];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
      {
LABEL_12:
        v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
LABEL_23:
        v73(v79, v80, v71);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v79, 0, 1, v71);
      }
      goto LABEL_27;
    case 0x10u:
      v103 = type metadata accessor for UUID();
      v104 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32);
      v104(a1, a2, v103);
      v105 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v104(&a1[v105[5]], &a2[v105[5]], v103);
      v106 = v105[6];
      v107 = &a1[v106];
      v108 = &a2[v106];
      *(_DWORD *)v107 = *(_DWORD *)v108;
      v107[4] = v108[4];
      v109 = v105[7];
      v110 = &a1[v109];
      v111 = &a2[v109];
      *(_DWORD *)v110 = *(_DWORD *)v111;
      v110[4] = v111[4];
      v112 = v105[8];
      v113 = &a1[v112];
      v114 = &a2[v112];
      *(_OWORD *)v113 = *(_OWORD *)v114;
      v113[16] = v114[16];
      a1[v105[9]] = a2[v105[9]];
      a1[v105[10]] = a2[v105[10]];
      a1[v105[11]] = a2[v105[11]];
      v115 = v105[12];
      v116 = &a1[v115];
      v117 = &a2[v115];
      v116[4] = v117[4];
      *(_DWORD *)v116 = *(_DWORD *)v117;
      v118 = v105[13];
      v119 = &a1[v118];
      v120 = &a2[v118];
      *(_DWORD *)v119 = *(_DWORD *)v120;
      v119[4] = v120[4];
      goto LABEL_27;
    case 0x11u:
      v121 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(a1, a2, v121);
      v122 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      v123 = v122[5];
      v124 = &a1[v123];
      v125 = &a2[v123];
      *(_DWORD *)v124 = *(_DWORD *)v125;
      v124[4] = v125[4];
      v126 = v122[6];
      v127 = &a1[v126];
      v128 = &a2[v126];
      *(_DWORD *)v127 = *(_DWORD *)v128;
      v127[4] = v128[4];
      v129 = v122[7];
      v130 = &a1[v129];
      v131 = &a2[v129];
      v130[16] = v131[16];
      *(_OWORD *)v130 = *(_OWORD *)v131;
      v132 = v122[8];
      v133 = &a1[v132];
      v134 = &a2[v132];
      v133[4] = v134[4];
      *(_DWORD *)v133 = *(_DWORD *)v134;
      v135 = v122[9];
      v136 = &a1[v135];
      v137 = &a2[v135];
      v136[16] = v137[16];
      *(_OWORD *)v136 = *(_OWORD *)v137;
      a1[v122[10]] = a2[v122[10]];
      goto LABEL_27;
    case 0x12u:
      v138 = type metadata accessor for UUID();
      v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32);
      v139(a1, a2, v138);
      v140 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v139(&a1[v140[5]], &a2[v140[5]], v138);
      v141 = v140[6];
      v142 = &a1[v141];
      v143 = &a2[v141];
      v139(&a1[v141], &a2[v141], v138);
      v144 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v145 = v144[5];
      v146 = &v142[v145];
      v147 = &v143[v145];
      *(_DWORD *)v146 = *(_DWORD *)v147;
      v146[4] = v147[4];
      v148 = v144[6];
      v149 = &v142[v148];
      v150 = &v143[v148];
      *(_DWORD *)v149 = *(_DWORD *)v150;
      v149[4] = v150[4];
      v142[v144[7]] = v143[v144[7]];
      v142[v144[8]] = v143[v144[8]];
      v142[v144[9]] = v143[v144[9]];
      v151 = v144[10];
      v152 = &v142[v151];
      v153 = &v143[v151];
      *(_DWORD *)v152 = *(_DWORD *)v153;
      v152[4] = v153[4];
      v142[v144[11]] = v143[v144[11]];
      v154 = v144[12];
      v155 = &v142[v154];
      v156 = &v143[v154];
      v155[4] = v156[4];
      *(_DWORD *)v155 = *(_DWORD *)v156;
      v157 = v144[13];
      v158 = &v142[v157];
      v159 = &v143[v157];
      *(_DWORD *)v158 = *(_DWORD *)v159;
      v158[4] = v159[4];
      v142[v144[14]] = v143[v144[14]];
      v142[v144[15]] = v143[v144[15]];
      v160 = v140[7];
      v161 = &a1[v160];
      v162 = &a2[v160];
      v139(&a1[v160], v162, v138);
      v163 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v164 = v163[5];
      v165 = &v161[v164];
      v166 = &v162[v164];
      *(_DWORD *)v165 = *(_DWORD *)v166;
      v165[4] = v166[4];
      v167 = v163[6];
      v168 = &v161[v167];
      v169 = &v162[v167];
      *(_DWORD *)v168 = *(_DWORD *)v169;
      v168[4] = v169[4];
      v161[v163[7]] = v162[v163[7]];
      v161[v163[8]] = v162[v163[8]];
      v161[v163[9]] = v162[v163[9]];
      v170 = v163[10];
      v171 = &v161[v170];
      v172 = &v162[v170];
      *(_DWORD *)v171 = *(_DWORD *)v172;
      v171[4] = v172[4];
      v161[v163[11]] = v162[v163[11]];
      v173 = v163[12];
      v174 = &v161[v173];
      v175 = &v162[v173];
      v174[4] = v175[4];
      *(_DWORD *)v174 = *(_DWORD *)v175;
      v176 = v163[13];
      v177 = &v161[v176];
      v178 = &v162[v176];
      *(_DWORD *)v177 = *(_DWORD *)v178;
      v177[4] = v178[4];
      v161[v163[14]] = v162[v163[14]];
      v161[v163[15]] = v162[v163[15]];
      goto LABEL_27;
    case 0x13u:
      v179 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(a1, a2, v179);
      v180 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      v181 = v180[5];
      v182 = &a1[v181];
      v183 = &a2[v181];
      *(_DWORD *)v182 = *(_DWORD *)v183;
      v182[4] = v183[4];
      v184 = v180[6];
      v185 = &a1[v184];
      v186 = &a2[v184];
      *(_DWORD *)v185 = *(_DWORD *)v186;
      v185[4] = v186[4];
      a1[v180[7]] = a2[v180[7]];
      v187 = v180[8];
      v188 = &a1[v187];
      v189 = &a2[v187];
      v188[16] = v189[16];
      *(_OWORD *)v188 = *(_OWORD *)v189;
      goto LABEL_27;
    case 0x14u:
      v190 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 32))(a1, a2, v190);
      v191 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&a1[*(int *)(v191 + 20)] = *(_DWORD *)&a2[*(int *)(v191 + 20)];
      *(_DWORD *)&a1[*(int *)(v191 + 24)] = *(_DWORD *)&a2[*(int *)(v191 + 24)];
      goto LABEL_27;
    case 0x15u:
      v192 = type metadata accessor for UUID();
      v193 = *(_QWORD *)(v192 - 8);
      v194 = *(void (**)(char *, char *, uint64_t))(v193 + 32);
      v194(a1, a2, v192);
      v195 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v194(&a1[v195[5]], &a2[v195[5]], v192);
      *(_OWORD *)&a1[v195[6]] = *(_OWORD *)&a2[v195[6]];
      v196 = v195[7];
      v197 = &a1[v196];
      v198 = &a2[v196];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(&a2[v196], 1, v192))
      {
        v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
      }
      else
      {
        v194(v197, v198, v192);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v197, 0, 1, v192);
      }
      *(_OWORD *)&a1[v195[8]] = *(_OWORD *)&a2[v195[8]];
LABEL_27:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithTake for __RKEntityActionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  int *started;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, char *, uint64_t);
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  void (*v139)(char *, char *, uint64_t);
  int *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  int *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  int *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  int *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void (*v194)(char *, char *, uint64_t);
  int *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityActionSpecification);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v6 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        *(_OWORD *)&a1[v7[5]] = *(_OWORD *)&a2[v7[5]];
        a1[v7[6]] = a2[v7[6]];
        v8 = v7[7];
        v9 = &a1[v8];
        v10 = &a2[v8];
        v9[8] = v10[8];
        *(_QWORD *)v9 = *(_QWORD *)v10;
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        a1[v7[10]] = a2[v7[10]];
        goto LABEL_28;
      case 1u:
        v11 = type metadata accessor for UUID();
        v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
        v12(a1, a2, v11);
        v13 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v12(&a1[*(int *)(v13 + 20)], &a2[*(int *)(v13 + 20)], v11);
        goto LABEL_28;
      case 2u:
        v14 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = type metadata accessor for __RKEntityCustomActionArguments(0);
        *(_OWORD *)&a1[*(int *)(v15 + 20)] = *(_OWORD *)&a2[*(int *)(v15 + 20)];
        *(_QWORD *)&a1[*(int *)(v15 + 24)] = *(_QWORD *)&a2[*(int *)(v15 + 24)];
        goto LABEL_28;
      case 3u:
        v16 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
        v17 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v18 = v17[5];
        v19 = &a1[v18];
        v20 = &a2[v18];
        *(_DWORD *)v19 = *(_DWORD *)v20;
        v19[4] = v20[4];
        v21 = v17[6];
        v22 = &a1[v21];
        v23 = &a2[v21];
        *(_DWORD *)v22 = *(_DWORD *)v23;
        v22[4] = v23[4];
        a1[v17[7]] = a2[v17[7]];
        a1[v17[8]] = a2[v17[8]];
        goto LABEL_28;
      case 4u:
        v24 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(a1, a2, v24);
        v25 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v25 + 20)] = *(_DWORD *)&a2[*(int *)(v25 + 20)];
        v26 = *(int *)(v25 + 24);
        v27 = &a1[v26];
        v28 = &a2[v26];
        v27[4] = v28[4];
        *(_DWORD *)v27 = *(_DWORD *)v28;
        goto LABEL_28;
      case 7u:
        v29 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(a1, a2, v29);
        v30 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v31 = v30[5];
        v32 = &a1[v31];
        v33 = &a2[v31];
        *(_DWORD *)v32 = *(_DWORD *)v33;
        v32[4] = v33[4];
        v34 = v30[6];
        v35 = &a1[v34];
        v36 = &a2[v34];
        *(_DWORD *)v35 = *(_DWORD *)v36;
        v35[4] = v36[4];
        a1[v30[7]] = a2[v30[7]];
        a1[v30[8]] = a2[v30[8]];
        a1[v30[9]] = a2[v30[9]];
        v37 = v30[10];
        v38 = &a1[v37];
        v39 = &a2[v37];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        v38[4] = v39[4];
        a1[v30[11]] = a2[v30[11]];
        v40 = v30[12];
        v41 = &a1[v40];
        v42 = &a2[v40];
        v41[4] = v42[4];
        *(_DWORD *)v41 = *(_DWORD *)v42;
        v43 = v30[13];
        v44 = &a1[v43];
        v45 = &a2[v43];
        *(_DWORD *)v44 = *(_DWORD *)v45;
        v44[4] = v45[4];
        a1[v30[14]] = a2[v30[14]];
        a1[v30[15]] = a2[v30[15]];
        goto LABEL_28;
      case 8u:
        v46 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32))(a1, a2, v46);
        v47 = type metadata accessor for __RKEntityForceActionArguments(0);
        v48 = *(int *)(v47 + 20);
        v49 = &a1[v48];
        v50 = &a2[v48];
        *(_OWORD *)v49 = *(_OWORD *)v50;
        v49[16] = v50[16];
        v51 = *(int *)(v47 + 24);
        v52 = &a1[v51];
        v53 = &a2[v51];
        v52[16] = v53[16];
        *(_OWORD *)v52 = *(_OWORD *)v53;
        goto LABEL_28;
      case 9u:
        v54 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(a1, a2, v54);
        v55 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v56 = v55[5];
        v57 = &a1[v56];
        v58 = &a2[v56];
        *(_DWORD *)v57 = *(_DWORD *)v58;
        v57[4] = v58[4];
        v59 = v55[6];
        v60 = &a1[v59];
        v61 = &a2[v59];
        *(_DWORD *)v60 = *(_DWORD *)v61;
        v60[4] = v61[4];
        a1[v55[7]] = a2[v55[7]];
        a1[v55[8]] = a2[v55[8]];
        a1[v55[9]] = a2[v55[9]];
        v62 = v55[10];
        v63 = &a1[v62];
        v64 = &a2[v62];
        *(_DWORD *)v63 = *(_DWORD *)v64;
        v63[4] = v64[4];
        a1[v55[11]] = a2[v55[11]];
        v65 = v55[12];
        v66 = &a1[v65];
        v67 = &a2[v65];
        v66[4] = v67[4];
        *(_DWORD *)v66 = *(_DWORD *)v67;
        v68 = v55[13];
        v69 = &a1[v68];
        v70 = &a2[v68];
        *(_DWORD *)v69 = *(_DWORD *)v70;
        v69[4] = v70[4];
        a1[v55[14]] = a2[v55[14]];
        a1[v55[15]] = a2[v55[15]];
        goto LABEL_28;
      case 0xAu:
        v71 = type metadata accessor for UUID();
        v72 = *(_QWORD *)(v71 - 8);
        v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        v73(a1, a2, v71);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&a1[started[5]] = *(_QWORD *)&a2[started[5]];
        a1[started[6]] = a2[started[6]];
        *(_QWORD *)&a1[started[7]] = *(_QWORD *)&a2[started[7]];
        *(_QWORD *)&a1[started[8]] = *(_QWORD *)&a2[started[8]];
        a1[started[9]] = a2[started[9]];
        a1[started[10]] = a2[started[10]];
        *(_DWORD *)&a1[started[11]] = *(_DWORD *)&a2[started[11]];
        a1[started[12]] = a2[started[12]];
        v75 = started[13];
        v76 = &a1[v75];
        v77 = &a2[v75];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v76[8] = v77[8];
        v78 = started[14];
        v79 = &a1[v78];
        v80 = &a2[v78];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
          goto LABEL_13;
        goto LABEL_24;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v82 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(a1, a2, v82);
        goto LABEL_28;
      case 0xEu:
        v71 = type metadata accessor for UUID();
        v72 = *(_QWORD *)(v71 - 8);
        v73 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
        v73(a1, a2, v71);
        v83 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v84 = v83[5];
        v85 = &a1[v84];
        v86 = &a2[v84];
        *(_OWORD *)v85 = *(_OWORD *)v86;
        v85[16] = v86[16];
        v87 = v83[6];
        v88 = &a1[v87];
        v89 = &a2[v87];
        *(_OWORD *)v88 = *(_OWORD *)v89;
        v88[16] = v89[16];
        v90 = v83[7];
        v91 = &a1[v90];
        v92 = &a2[v90];
        v91[4] = v92[4];
        *(_DWORD *)v91 = *(_DWORD *)v92;
        v93 = v83[8];
        v94 = &a1[v93];
        v95 = &a2[v93];
        v94[4] = v95[4];
        *(_DWORD *)v94 = *(_DWORD *)v95;
        a1[v83[9]] = a2[v83[9]];
        a1[v83[10]] = a2[v83[10]];
        a1[v83[11]] = a2[v83[11]];
        a1[v83[12]] = a2[v83[12]];
        v96 = v83[13];
        v97 = &a1[v96];
        v98 = &a2[v96];
        *(_DWORD *)v97 = *(_DWORD *)v98;
        v97[4] = v98[4];
        v99 = v83[14];
        v100 = &a1[v99];
        v101 = &a2[v99];
        *(_DWORD *)v100 = *(_DWORD *)v101;
        v100[4] = v101[4];
        v102 = v83[15];
        v79 = &a1[v102];
        v80 = &a2[v102];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v80, 1, v71))
        {
LABEL_13:
          v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
        }
        else
        {
LABEL_24:
          v73(v79, v80, v71);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v79, 0, 1, v71);
        }
        goto LABEL_28;
      case 0x10u:
        v103 = type metadata accessor for UUID();
        v104 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v103 - 8) + 32);
        v104(a1, a2, v103);
        v105 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v104(&a1[v105[5]], &a2[v105[5]], v103);
        v106 = v105[6];
        v107 = &a1[v106];
        v108 = &a2[v106];
        *(_DWORD *)v107 = *(_DWORD *)v108;
        v107[4] = v108[4];
        v109 = v105[7];
        v110 = &a1[v109];
        v111 = &a2[v109];
        *(_DWORD *)v110 = *(_DWORD *)v111;
        v110[4] = v111[4];
        v112 = v105[8];
        v113 = &a1[v112];
        v114 = &a2[v112];
        *(_OWORD *)v113 = *(_OWORD *)v114;
        v113[16] = v114[16];
        a1[v105[9]] = a2[v105[9]];
        a1[v105[10]] = a2[v105[10]];
        a1[v105[11]] = a2[v105[11]];
        v115 = v105[12];
        v116 = &a1[v115];
        v117 = &a2[v115];
        v116[4] = v117[4];
        *(_DWORD *)v116 = *(_DWORD *)v117;
        v118 = v105[13];
        v119 = &a1[v118];
        v120 = &a2[v118];
        *(_DWORD *)v119 = *(_DWORD *)v120;
        v119[4] = v120[4];
        goto LABEL_28;
      case 0x11u:
        v121 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 32))(a1, a2, v121);
        v122 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v123 = v122[5];
        v124 = &a1[v123];
        v125 = &a2[v123];
        *(_DWORD *)v124 = *(_DWORD *)v125;
        v124[4] = v125[4];
        v126 = v122[6];
        v127 = &a1[v126];
        v128 = &a2[v126];
        *(_DWORD *)v127 = *(_DWORD *)v128;
        v127[4] = v128[4];
        v129 = v122[7];
        v130 = &a1[v129];
        v131 = &a2[v129];
        v130[16] = v131[16];
        *(_OWORD *)v130 = *(_OWORD *)v131;
        v132 = v122[8];
        v133 = &a1[v132];
        v134 = &a2[v132];
        v133[4] = v134[4];
        *(_DWORD *)v133 = *(_DWORD *)v134;
        v135 = v122[9];
        v136 = &a1[v135];
        v137 = &a2[v135];
        v136[16] = v137[16];
        *(_OWORD *)v136 = *(_OWORD *)v137;
        a1[v122[10]] = a2[v122[10]];
        goto LABEL_28;
      case 0x12u:
        v138 = type metadata accessor for UUID();
        v139 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32);
        v139(a1, a2, v138);
        v140 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v139(&a1[v140[5]], &a2[v140[5]], v138);
        v141 = v140[6];
        v142 = &a1[v141];
        v143 = &a2[v141];
        v139(&a1[v141], &a2[v141], v138);
        v144 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v145 = v144[5];
        v146 = &v142[v145];
        v147 = &v143[v145];
        *(_DWORD *)v146 = *(_DWORD *)v147;
        v146[4] = v147[4];
        v148 = v144[6];
        v149 = &v142[v148];
        v150 = &v143[v148];
        *(_DWORD *)v149 = *(_DWORD *)v150;
        v149[4] = v150[4];
        v142[v144[7]] = v143[v144[7]];
        v142[v144[8]] = v143[v144[8]];
        v142[v144[9]] = v143[v144[9]];
        v151 = v144[10];
        v152 = &v142[v151];
        v153 = &v143[v151];
        *(_DWORD *)v152 = *(_DWORD *)v153;
        v152[4] = v153[4];
        v142[v144[11]] = v143[v144[11]];
        v154 = v144[12];
        v155 = &v142[v154];
        v156 = &v143[v154];
        v155[4] = v156[4];
        *(_DWORD *)v155 = *(_DWORD *)v156;
        v157 = v144[13];
        v158 = &v142[v157];
        v159 = &v143[v157];
        *(_DWORD *)v158 = *(_DWORD *)v159;
        v158[4] = v159[4];
        v142[v144[14]] = v143[v144[14]];
        v142[v144[15]] = v143[v144[15]];
        v160 = v140[7];
        v161 = &a1[v160];
        v162 = &a2[v160];
        v139(&a1[v160], v162, v138);
        v163 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v164 = v163[5];
        v165 = &v161[v164];
        v166 = &v162[v164];
        *(_DWORD *)v165 = *(_DWORD *)v166;
        v165[4] = v166[4];
        v167 = v163[6];
        v168 = &v161[v167];
        v169 = &v162[v167];
        *(_DWORD *)v168 = *(_DWORD *)v169;
        v168[4] = v169[4];
        v161[v163[7]] = v162[v163[7]];
        v161[v163[8]] = v162[v163[8]];
        v161[v163[9]] = v162[v163[9]];
        v170 = v163[10];
        v171 = &v161[v170];
        v172 = &v162[v170];
        *(_DWORD *)v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v161[v163[11]] = v162[v163[11]];
        v173 = v163[12];
        v174 = &v161[v173];
        v175 = &v162[v173];
        v174[4] = v175[4];
        *(_DWORD *)v174 = *(_DWORD *)v175;
        v176 = v163[13];
        v177 = &v161[v176];
        v178 = &v162[v176];
        *(_DWORD *)v177 = *(_DWORD *)v178;
        v177[4] = v178[4];
        v161[v163[14]] = v162[v163[14]];
        v161[v163[15]] = v162[v163[15]];
        goto LABEL_28;
      case 0x13u:
        v179 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v179 - 8) + 32))(a1, a2, v179);
        v180 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v181 = v180[5];
        v182 = &a1[v181];
        v183 = &a2[v181];
        *(_DWORD *)v182 = *(_DWORD *)v183;
        v182[4] = v183[4];
        v184 = v180[6];
        v185 = &a1[v184];
        v186 = &a2[v184];
        *(_DWORD *)v185 = *(_DWORD *)v186;
        v185[4] = v186[4];
        a1[v180[7]] = a2[v180[7]];
        v187 = v180[8];
        v188 = &a1[v187];
        v189 = &a2[v187];
        v188[16] = v189[16];
        *(_OWORD *)v188 = *(_OWORD *)v189;
        goto LABEL_28;
      case 0x14u:
        v190 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v190 - 8) + 32))(a1, a2, v190);
        v191 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&a1[*(int *)(v191 + 20)] = *(_DWORD *)&a2[*(int *)(v191 + 20)];
        *(_DWORD *)&a1[*(int *)(v191 + 24)] = *(_DWORD *)&a2[*(int *)(v191 + 24)];
        goto LABEL_28;
      case 0x15u:
        v192 = type metadata accessor for UUID();
        v193 = *(_QWORD *)(v192 - 8);
        v194 = *(void (**)(char *, char *, uint64_t))(v193 + 32);
        v194(a1, a2, v192);
        v195 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v194(&a1[v195[5]], &a2[v195[5]], v192);
        *(_OWORD *)&a1[v195[6]] = *(_OWORD *)&a2[v195[6]];
        v196 = v195[7];
        v197 = &a1[v196];
        v198 = &a2[v196];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(&a2[v196], 1, v192))
        {
          v199 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v197, v198, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
        }
        else
        {
          v194(v197, v198, v192);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v193 + 56))(v197, 0, 1, v192);
        }
        *(_OWORD *)&a1[v195[8]] = *(_OWORD *)&a2[v195[8]];
LABEL_28:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionSpecification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t type metadata completion function for __RKEntityActionSpecification()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  result = type metadata accessor for __RKEntityAudioActionArguments(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for __RKChangeSceneActionArguments(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for __RKEntityCustomActionArguments(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for __RKEntityEmphasisActionArguments(319);
        if (v4 <= 0x3F)
        {
          result = type metadata accessor for __RKEntityFadeActionArguments(319);
          if (v5 <= 0x3F)
          {
            result = type metadata accessor for __RKEntityHideActionArguments(319);
            if (v6 <= 0x3F)
            {
              result = type metadata accessor for __RKEntityForceActionArguments(319);
              if (v7 <= 0x3F)
              {
                result = type metadata accessor for __RKEntityShowActionArguments(319);
                if (v8 <= 0x3F)
                {
                  result = type metadata accessor for __RKEntityStartAnimateActionArguments(319);
                  if (v9 <= 0x3F)
                  {
                    result = type metadata accessor for UUID();
                    if (v10 <= 0x3F)
                    {
                      result = type metadata accessor for __RKEntityTransformActionArguments(319);
                      if (v11 <= 0x3F)
                      {
                        result = type metadata accessor for __RKEntityOrbitEntityActionArguments(319);
                        if (v12 <= 0x3F)
                        {
                          result = type metadata accessor for __RKEntityLookAtCameraActionArguments(319);
                          if (v13 <= 0x3F)
                          {
                            result = type metadata accessor for __RKEntitySwapEntityActionArguments(319);
                            if (v14 <= 0x3F)
                            {
                              result = type metadata accessor for __RKEntitySpinActionArguments(319);
                              if (v15 <= 0x3F)
                              {
                                result = type metadata accessor for __RKEntitySetOpacityActionArguments(319);
                                if (v16 <= 0x3F)
                                {
                                  result = type metadata accessor for __RKEntityPlayTimelineActionArguments(319);
                                  if (v17 <= 0x3F)
                                  {
                                    swift_initEnumMetadataMultiPayload();
                                    return 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionSpecification.Name(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionSpecification.Name(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_21BA2B1F8 + 4 * byte_21BE52BF7[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_21BA2B22C + 4 * byte_21BE52BF2[v4]))();
}

uint64_t sub_21BA2B22C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA2B234(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA2B23CLL);
  return result;
}

uint64_t sub_21BA2B248(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA2B250);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_21BA2B254(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA2B25C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionSpecification.Name()
{
  return &type metadata for __RKEntityActionSpecification.Name;
}

ValueMetadata *type metadata accessor for __RKEntityGroupActionOrder()
{
  return &type metadata for __RKEntityGroupActionOrder;
}

uint64_t initializeWithCopy for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for __RKEntityActionGroupArguments(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityActionGroupArguments(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 34))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionGroupArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 34) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionGroupArguments()
{
  return &type metadata for __RKEntityActionGroupArguments;
}

ValueMetadata *type metadata accessor for __RKWaitActionArguments()
{
  return &type metadata for __RKWaitActionArguments;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityCustomActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityCustomActionArguments(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for __RKEntityCustomActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityCustomActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityCustomActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __RKEntityCustomActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKChangeSceneActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithCopy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t initializeWithTake for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t assignWithTake for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKChangeSceneActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2B9EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for __RKChangeSceneActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2BA34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for __RKChangeSceneActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for __RKFadeSceneActionArguments(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __RKFadeSceneActionArguments(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for __RKFadeSceneActionArguments()
{
  return &type metadata for __RKFadeSceneActionArguments;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityFadeActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_DWORD *)v9 = *(_DWORD *)v10;
    v9[4] = v10[4];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 4);
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = v10;
  return a1;
}

uint64_t initializeWithTake for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t assignWithTake for __RKEntityFadeActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_DWORD *)v8 = *(_DWORD *)v9;
  *(_BYTE *)(v8 + 4) = *(_BYTE *)(v9 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityFadeActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityFadeActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __RKEntityFadeActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t getEnumTagSinglePayload for __RKEntityToggleAnimateActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityToggleAnimateActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *initializeBufferWithCopyOfBuffer for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[6];
    *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
    a1[v10] = a2[v10];
    v11 = a3[8];
    *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
    *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
    v12 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v12] = a2[v12];
    v13 = a3[12];
    *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
    a1[v13] = a2[v13];
    v14 = a3[13];
    v15 = a3[14];
    v16 = &a1[v14];
    v17 = &a2[v14];
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v16[8] = v17[8];
    v18 = &a1[v15];
    v19 = &a2[v15];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      v9(v18, v19, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v18, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityStartAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v6 = a1 + *(int *)(a2 + 56);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  v13 = a3[13];
  v14 = a3[14];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[a3[6]] = a2[a3[6]];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  v9 = a3[13];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = v11[8];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v12;
  v13 = a3[14];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v17 = v16(&a1[v13], 1, v6);
  v18 = v16(v15, 1, v6);
  if (!v17)
  {
    if (!v18)
    {
      v8(v14, v15, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  return a1;
}

char *initializeWithTake for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  v13 = a3[13];
  v14 = a3[14];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for __RKEntityStartAnimateActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t (*v19)(const void *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  a1[v9] = a2[v9];
  v10 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v11] = a2[v11];
  v12 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v12] = a2[v12];
  v13 = a3[13];
  v14 = a3[14];
  v15 = &a1[v13];
  v16 = &a2[v13];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = &a1[v14];
  v18 = &a2[v14];
  v19 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v20 = v19(&a1[v14], 1, v6);
  v21 = v19(v18, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      v8(v17, v18, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityStartAnimateActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2C5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unsigned int v11;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 254)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v10 = a1 + *(int *)(a3 + 56);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v11 >= 2)
    return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __RKEntityStartAnimateActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2C674(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v12 = a1 + *(int *)(a4 + 56);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for __RKEntityStartAnimateActionArguments()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t getEnumTagSinglePayload for __RKEntityStopAnimateActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityStopAnimateActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t initializeBufferWithCopyOfBuffer for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t initializeWithCopy for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for __RKEntityToggleAnimateActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __RKEntityToggleAnimateActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for __RKEntityShowActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityShowActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityShowActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    *(_DWORD *)v16 = *(_DWORD *)v17;
    v16[4] = v17[4];
    v18 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    *(_DWORD *)v19 = *(_DWORD *)v20;
    v19[4] = v20[4];
    v21 = a3[13];
    v22 = a3[14];
    v23 = (char *)a1 + v21;
    v24 = (char *)a2 + v21;
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v23[4] = v24[4];
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a3[13];
  v21 = a3[14];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithCopy for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v14 = a3[10];
  v15 = a1 + v14;
  v16 = (int *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 4) = *((_BYTE *)v16 + 4);
  *(_DWORD *)v15 = v17;
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = (int *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 4) = *((_BYTE *)v20 + 4);
  *(_DWORD *)v19 = v21;
  v22 = a3[13];
  v23 = a1 + v22;
  v24 = a2 + v22;
  LOBYTE(v21) = *(_BYTE *)(v24 + 4);
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = v21;
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a3[13];
  v21 = a3[14];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for __RKEntityShowActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v14 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v15 = a1 + v14;
  v16 = a2 + v14;
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_BYTE *)(v15 + 4) = *(_BYTE *)(v16 + 4);
  v17 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = *(_BYTE *)(v19 + 4);
  v20 = a3[13];
  v21 = a3[14];
  v22 = a1 + v20;
  v23 = a2 + v20;
  *(_DWORD *)v22 = *(_DWORD *)v23;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityHideActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityHideActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __RKEntityShowActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityEmphasisActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t assignWithCopy for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t assignWithTake for __RKEntityEmphasisActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityEmphasisActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2D3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 3u)
    v9 = 3;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 3;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 3u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __RKEntityEmphasisActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2D470(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 3;
  return result;
}

uint64_t type metadata completion function for __RKEntityEmphasisActionArguments()
{
  return type metadata completion function for __RKEntityEmphasisActionArguments();
}

{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityAudioActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *((_BYTE *)a1 + v9) = *((_BYTE *)a2 + v9);
    v13 = a3[7];
    v14 = a3[8];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    v15[8] = v16[8];
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v17 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityAudioActionArguments(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v12 = a3[7];
  v13 = a3[8];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_BYTE *)(v11 + 8) = v13;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for __RKEntityAudioActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *(_BYTE *)(v13 + 8) = *(_BYTE *)(v14 + 8);
  v15 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityAudioActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityAudioActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for __RKEntityAudioActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v34 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v34 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v10 = a3[5];
    v11 = a3[6];
    v12 = &a1[v10];
    v13 = &a2[v10];
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
    v14 = &a1[v11];
    v15 = &a2[v11];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v16 = a3[7];
    v17 = a3[8];
    v18 = &a1[v16];
    v19 = &a2[v16];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v18[4] = v19[4];
    v20 = &a1[v17];
    v21 = &a2[v17];
    v20[4] = v21[4];
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v22 = a3[10];
    a1[a3[9]] = a2[a3[9]];
    a1[v22] = a2[v22];
    v23 = a3[12];
    a1[a3[11]] = a2[a3[11]];
    a1[v23] = a2[v23];
    v24 = a3[13];
    v25 = a3[14];
    v26 = &a1[v24];
    v27 = &a2[v24];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    v28 = &a1[v25];
    v29 = &a2[v25];
    *(_DWORD *)v28 = *(_DWORD *)v29;
    v28[4] = v29[4];
    v30 = a3[15];
    v31 = &a1[v30];
    v32 = &a2[v30];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v7))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v9(v31, v32, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v31, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for __RKEntityTransformActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  void (*v8)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(a1, v4);
  v6 = a1 + *(int *)(a2 + 60);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v6, v4);
  return result;
}

char *initializeWithCopy for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = &a1[v16];
  v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  v23 = a3[13];
  v24 = a3[14];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  v27 = &a1[v24];
  v28 = &a2[v24];
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v29 = a3[15];
  v30 = &a1[v29];
  v31 = &a2[v29];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v31, 1, v6))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v8(v30, v31, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t (*v35)(const void *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *(_OWORD *)v11;
  v10[16] = v11[16];
  *(_OWORD *)v10 = v12;
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = v15[16];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  v14[16] = v16;
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = v19[4];
  *(_DWORD *)v18 = *(_DWORD *)v19;
  v18[4] = v20;
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = v23[4];
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v22[4] = v24;
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  a1[a3[11]] = a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  v25 = a3[13];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_DWORD *)v27;
  v26[4] = v27[4];
  *(_DWORD *)v26 = v28;
  v29 = a3[14];
  v30 = &a1[v29];
  v31 = &a2[v29];
  LOBYTE(v28) = v31[4];
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v30[4] = v28;
  v32 = a3[15];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v36 = v35(&a1[v32], 1, v6);
  v37 = v35(v34, 1, v6);
  if (!v36)
  {
    if (!v37)
    {
      v8(v33, v34, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v33, v6);
    goto LABEL_6;
  }
  if (v37)
  {
LABEL_6:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v33, v34, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v33, 0, 1, v6);
  return a1;
}

char *initializeWithTake for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = &a1[v16];
  v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  v23 = a3[13];
  v24 = a3[14];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  v27 = &a1[v24];
  v28 = &a2[v24];
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v29 = a3[15];
  v30 = &a1[v29];
  v31 = &a2[v29];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v31, 1, v6))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v8(v30, v31, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for __RKEntityTransformActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t (*v32)(const void *, uint64_t, uint64_t);
  int v33;
  int v34;
  uint64_t v35;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  *(_OWORD *)v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  v13 = &a1[v10];
  v14 = &a2[v10];
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v17[4] = v18[4];
  v19 = &a1[v16];
  v20 = &a2[v16];
  v19[4] = v20[4];
  *(_DWORD *)v19 = *(_DWORD *)v20;
  v21 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v21] = a2[v21];
  v22 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  a1[v22] = a2[v22];
  v23 = a3[13];
  v24 = a3[14];
  v25 = &a1[v23];
  v26 = &a2[v23];
  *(_DWORD *)v25 = *(_DWORD *)v26;
  v25[4] = v26[4];
  v27 = &a1[v24];
  v28 = &a2[v24];
  *(_DWORD *)v27 = *(_DWORD *)v28;
  v27[4] = v28[4];
  v29 = a3[15];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v33 = v32(&a1[v29], 1, v6);
  v34 = v32(v31, 1, v6);
  if (!v33)
  {
    if (!v34)
    {
      v8(v30, v31, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
    goto LABEL_6;
  }
  if (v34)
  {
LABEL_6:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v30, v31, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v30, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityTransformActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2E3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 253)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) <= 2u)
      v9 = 2;
    else
      v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    v10 = v9 - 2;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36)) >= 2u)
      return v10;
    else
      return 0;
  }
  else
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 60), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for __RKEntityTransformActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2E488(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 253)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v12 = a1 + *(int *)(a4 + 60);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for __RKEntityTransformActionArguments()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityForceActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[16] = v13[16];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  return a1;
}

uint64_t assignWithCopy for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = v10;
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = v14;
  return a1;
}

uint64_t initializeWithTake for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  return a1;
}

uint64_t assignWithTake for __RKEntityForceActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_OWORD *)v11 = *(_OWORD *)v12;
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityForceActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for __RKEntityForceActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata completion function for __RKEntityForceActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntitySwapEntityActionArguments(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v47 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v47 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v8((uint64_t *)((char *)a1 + v9), (uint64_t *)((char *)a2 + v9), v7);
    v12 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
    v13 = v12[5];
    v14 = &v10[v13];
    v15 = &v11[v13];
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v14[4] = v15[4];
    v16 = v12[6];
    v17 = &v10[v16];
    v18 = &v11[v16];
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    v10[v12[7]] = v11[v12[7]];
    v10[v12[8]] = v11[v12[8]];
    v10[v12[9]] = v11[v12[9]];
    v19 = v12[10];
    v20 = &v10[v19];
    v21 = &v11[v19];
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    v10[v12[11]] = v11[v12[11]];
    v22 = v12[12];
    v23 = &v10[v22];
    v24 = &v11[v22];
    v23[4] = v24[4];
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v25 = v12[13];
    v26 = &v10[v25];
    v27 = &v11[v25];
    *(_DWORD *)v26 = *(_DWORD *)v27;
    v26[4] = v27[4];
    v10[v12[14]] = v11[v12[14]];
    v10[v12[15]] = v11[v12[15]];
    v28 = a3[7];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v8((uint64_t *)((char *)a1 + v28), (uint64_t *)v30, v7);
    v31 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
    v32 = v31[5];
    v33 = &v29[v32];
    v34 = &v30[v32];
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    v35 = v31[6];
    v36 = &v29[v35];
    v37 = &v30[v35];
    *(_DWORD *)v36 = *(_DWORD *)v37;
    v36[4] = v37[4];
    v29[v31[7]] = v30[v31[7]];
    v29[v31[8]] = v30[v31[8]];
    v29[v31[9]] = v30[v31[9]];
    v38 = v31[10];
    v39 = &v29[v38];
    v40 = &v30[v38];
    *(_DWORD *)v39 = *(_DWORD *)v40;
    v39[4] = v40[4];
    v29[v31[11]] = v30[v31[11]];
    v41 = v31[12];
    v42 = &v29[v41];
    v43 = &v30[v41];
    v42[4] = v43[4];
    *(_DWORD *)v42 = *(_DWORD *)v43;
    v44 = v31[13];
    v45 = &v29[v44];
    v46 = &v30[v44];
    *(_DWORD *)v45 = *(_DWORD *)v46;
    v45[4] = v46[4];
    v29[v31[14]] = v30[v31[14]];
    v29[v31[15]] = v30[v31[15]];
  }
  return a1;
}

uint64_t destroy for __RKEntitySwapEntityActionArguments(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + a2[7], v4);
}

uint64_t initializeWithCopy for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = v11[6];
  v16 = v9 + v15;
  v17 = v10 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(v9 + v11[7]) = *(_BYTE *)(v10 + v11[7]);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v18 = v11[10];
  v19 = v9 + v18;
  v20 = v10 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v21 = v11[12];
  v22 = v9 + v21;
  v23 = v10 + v21;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v24 = v11[13];
  v25 = v9 + v24;
  v26 = v10 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  v31 = v30[5];
  v32 = v28 + v31;
  v33 = v29 + v31;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = v30[6];
  v35 = v28 + v34;
  v36 = v29 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  *(_BYTE *)(v28 + v30[7]) = *(_BYTE *)(v29 + v30[7]);
  *(_BYTE *)(v28 + v30[8]) = *(_BYTE *)(v29 + v30[8]);
  *(_BYTE *)(v28 + v30[9]) = *(_BYTE *)(v29 + v30[9]);
  v37 = v30[10];
  v38 = v28 + v37;
  v39 = v29 + v37;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(v28 + v30[11]) = *(_BYTE *)(v29 + v30[11]);
  v40 = v30[12];
  v41 = v28 + v40;
  v42 = v29 + v40;
  *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v43 = v30[13];
  v44 = v28 + v43;
  v45 = v29 + v43;
  *(_DWORD *)v44 = *(_DWORD *)v45;
  *(_BYTE *)(v44 + 4) = *(_BYTE *)(v45 + 4);
  *(_BYTE *)(v28 + v30[14]) = *(_BYTE *)(v29 + v30[14]);
  *(_BYTE *)(v28 + v30[15]) = *(_BYTE *)(v29 + v30[15]);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  v15 = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = v15;
  v16 = v11[6];
  v17 = v9 + v16;
  v18 = v10 + v16;
  v19 = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_BYTE *)(v17 + 4) = v19;
  *(_BYTE *)(v9 + v11[7]) = *(_BYTE *)(v10 + v11[7]);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v20 = v11[10];
  v21 = v9 + v20;
  v22 = v10 + v20;
  v23 = *(_BYTE *)(v22 + 4);
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = v23;
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v24 = v11[12];
  v25 = v9 + v24;
  v26 = v10 + v24;
  v27 = *(_BYTE *)(v26 + 4);
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = v27;
  v28 = v11[13];
  v29 = v9 + v28;
  v30 = v10 + v28;
  v31 = *(_BYTE *)(v30 + 4);
  *(_DWORD *)v29 = *(_DWORD *)v30;
  *(_BYTE *)(v29 + 4) = v31;
  *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  v7(a1 + v32, v34, v6);
  v35 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  v36 = v35[5];
  v37 = v33 + v36;
  v38 = v34 + v36;
  v39 = *(_BYTE *)(v38 + 4);
  *(_DWORD *)v37 = *(_DWORD *)v38;
  *(_BYTE *)(v37 + 4) = v39;
  v40 = v35[6];
  v41 = v33 + v40;
  v42 = v34 + v40;
  v43 = *(_BYTE *)(v42 + 4);
  *(_DWORD *)v41 = *(_DWORD *)v42;
  *(_BYTE *)(v41 + 4) = v43;
  *(_BYTE *)(v33 + v35[7]) = *(_BYTE *)(v34 + v35[7]);
  *(_BYTE *)(v33 + v35[8]) = *(_BYTE *)(v34 + v35[8]);
  *(_BYTE *)(v33 + v35[9]) = *(_BYTE *)(v34 + v35[9]);
  v44 = v35[10];
  v45 = v33 + v44;
  v46 = v34 + v44;
  v47 = *(_BYTE *)(v46 + 4);
  *(_DWORD *)v45 = *(_DWORD *)v46;
  *(_BYTE *)(v45 + 4) = v47;
  *(_BYTE *)(v33 + v35[11]) = *(_BYTE *)(v34 + v35[11]);
  v48 = v35[12];
  v49 = v33 + v48;
  v50 = v34 + v48;
  v51 = *(_BYTE *)(v50 + 4);
  *(_DWORD *)v49 = *(_DWORD *)v50;
  *(_BYTE *)(v49 + 4) = v51;
  v52 = v35[13];
  v53 = v33 + v52;
  v54 = v34 + v52;
  v55 = *(_BYTE *)(v54 + 4);
  *(_DWORD *)v53 = *(_DWORD *)v54;
  *(_BYTE *)(v53 + 4) = v55;
  *(_BYTE *)(v33 + v35[14]) = *(_BYTE *)(v34 + v35[14]);
  *(_BYTE *)(v33 + v35[15]) = *(_BYTE *)(v34 + v35[15]);
  return a1;
}

uint64_t initializeWithTake for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = v11[6];
  v16 = v9 + v15;
  v17 = v10 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(v9 + v11[7]) = *(_BYTE *)(v10 + v11[7]);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v18 = v11[10];
  v19 = v9 + v18;
  v20 = v10 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v21 = v11[12];
  v22 = v9 + v21;
  v23 = v10 + v21;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v24 = v11[13];
  v25 = v9 + v24;
  v26 = v10 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  v31 = v30[5];
  v32 = v28 + v31;
  v33 = v29 + v31;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = v30[6];
  v35 = v28 + v34;
  v36 = v29 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  *(_BYTE *)(v28 + v30[7]) = *(_BYTE *)(v29 + v30[7]);
  *(_BYTE *)(v28 + v30[8]) = *(_BYTE *)(v29 + v30[8]);
  *(_BYTE *)(v28 + v30[9]) = *(_BYTE *)(v29 + v30[9]);
  v37 = v30[10];
  v38 = v28 + v37;
  v39 = v29 + v37;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(v28 + v30[11]) = *(_BYTE *)(v29 + v30[11]);
  v40 = v30[12];
  v41 = v28 + v40;
  v42 = v29 + v40;
  *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v43 = v30[13];
  v44 = v28 + v43;
  v45 = v29 + v43;
  *(_DWORD *)v44 = *(_DWORD *)v45;
  *(_BYTE *)(v44 + 4) = *(_BYTE *)(v45 + 4);
  *(_BYTE *)(v28 + v30[14]) = *(_BYTE *)(v29 + v30[14]);
  *(_BYTE *)(v28 + v30[15]) = *(_BYTE *)(v29 + v30[15]);
  return a1;
}

uint64_t assignWithTake for __RKEntitySwapEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v7(a1 + v8, a2 + v8, v6);
  v11 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
  v12 = v11[5];
  v13 = v9 + v12;
  v14 = v10 + v12;
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = *(_BYTE *)(v14 + 4);
  v15 = v11[6];
  v16 = v9 + v15;
  v17 = v10 + v15;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  *(_BYTE *)(v16 + 4) = *(_BYTE *)(v17 + 4);
  *(_BYTE *)(v9 + v11[7]) = *(_BYTE *)(v10 + v11[7]);
  *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
  *(_BYTE *)(v9 + v11[9]) = *(_BYTE *)(v10 + v11[9]);
  v18 = v11[10];
  v19 = v9 + v18;
  v20 = v10 + v18;
  *(_DWORD *)v19 = *(_DWORD *)v20;
  *(_BYTE *)(v19 + 4) = *(_BYTE *)(v20 + 4);
  *(_BYTE *)(v9 + v11[11]) = *(_BYTE *)(v10 + v11[11]);
  v21 = v11[12];
  v22 = v9 + v21;
  v23 = v10 + v21;
  *(_BYTE *)(v22 + 4) = *(_BYTE *)(v23 + 4);
  *(_DWORD *)v22 = *(_DWORD *)v23;
  v24 = v11[13];
  v25 = v9 + v24;
  v26 = v10 + v24;
  *(_DWORD *)v25 = *(_DWORD *)v26;
  *(_BYTE *)(v25 + 4) = *(_BYTE *)(v26 + 4);
  *(_BYTE *)(v9 + v11[14]) = *(_BYTE *)(v10 + v11[14]);
  *(_BYTE *)(v9 + v11[15]) = *(_BYTE *)(v10 + v11[15]);
  v27 = a3[7];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v7(a1 + v27, v29, v6);
  v30 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
  v31 = v30[5];
  v32 = v28 + v31;
  v33 = v29 + v31;
  *(_DWORD *)v32 = *(_DWORD *)v33;
  *(_BYTE *)(v32 + 4) = *(_BYTE *)(v33 + 4);
  v34 = v30[6];
  v35 = v28 + v34;
  v36 = v29 + v34;
  *(_DWORD *)v35 = *(_DWORD *)v36;
  *(_BYTE *)(v35 + 4) = *(_BYTE *)(v36 + 4);
  *(_BYTE *)(v28 + v30[7]) = *(_BYTE *)(v29 + v30[7]);
  *(_BYTE *)(v28 + v30[8]) = *(_BYTE *)(v29 + v30[8]);
  *(_BYTE *)(v28 + v30[9]) = *(_BYTE *)(v29 + v30[9]);
  v37 = v30[10];
  v38 = v28 + v37;
  v39 = v29 + v37;
  *(_DWORD *)v38 = *(_DWORD *)v39;
  *(_BYTE *)(v38 + 4) = *(_BYTE *)(v39 + 4);
  *(_BYTE *)(v28 + v30[11]) = *(_BYTE *)(v29 + v30[11]);
  v40 = v30[12];
  v41 = v28 + v40;
  v42 = v29 + v40;
  *(_BYTE *)(v41 + 4) = *(_BYTE *)(v42 + 4);
  *(_DWORD *)v41 = *(_DWORD *)v42;
  v43 = v30[13];
  v44 = v28 + v43;
  v45 = v29 + v43;
  *(_DWORD *)v44 = *(_DWORD *)v45;
  *(_BYTE *)(v44 + 4) = *(_BYTE *)(v45 + 4);
  *(_BYTE *)(v28 + v30[14]) = *(_BYTE *)(v29 + v30[14]);
  *(_BYTE *)(v28 + v30[15]) = *(_BYTE *)(v29 + v30[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySwapEntityActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2F5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v11 = type metadata accessor for __RKEntityHideActionArguments(0);
    v12 = *(_QWORD *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v11;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v8 = type metadata accessor for __RKEntityShowActionArguments(0);
      v12 = *(_QWORD *)(v8 - 8);
      v13 = *(int *)(a3 + 28);
    }
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySwapEntityActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2F654(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = type metadata accessor for __RKEntityHideActionArguments(0);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = type metadata accessor for __RKEntityShowActionArguments(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = *(int *)(a4 + 28);
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for __RKEntitySwapEntityActionArguments()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for __RKEntityHideActionArguments(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for __RKEntityShowActionArguments(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntitySpinActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v15[16] = v16[16];
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a3[8];
  v15 = a1 + v14;
  v16 = (__int128 *)(a2 + v14);
  v17 = *v16;
  *(_BYTE *)(v15 + 16) = *((_BYTE *)v16 + 16);
  *(_OWORD *)v15 = v17;
  return a1;
}

uint64_t initializeWithTake for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  return a1;
}

uint64_t assignWithTake for __RKEntitySpinActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySpinActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2FB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 2u)
    v9 = 2;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 2;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 2u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for __RKEntitySpinActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA2FBAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for __RKEntitySpinActionArguments()
{
  return type metadata completion function for __RKEntityEmphasisActionArguments();
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityOrbitEntityActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (char *)a1 + v9;
    v12 = (char *)a2 + v9;
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v11[4] = v12[4];
    v13 = (char *)a1 + v10;
    v14 = (char *)a2 + v10;
    *(_DWORD *)v13 = *(_DWORD *)v14;
    v13[4] = v14[4];
    v15 = a3[8];
    v16 = a3[9];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[16] = v18[16];
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v19 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    *((_BYTE *)a1 + v19) = *((_BYTE *)a2 + v19);
    v20 = a3[12];
    v21 = a3[13];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_DWORD *)v22 = *(_DWORD *)v23;
    v22[4] = v23[4];
    v24 = (char *)a1 + v21;
    v25 = (char *)a2 + v21;
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
  }
  return a1;
}

uint64_t destroy for __RKChangeSceneActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t initializeWithCopy for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[12];
  v20 = a3[13];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t assignWithCopy for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = (int *)(a2 + v8);
  v11 = *v10;
  *(_BYTE *)(v9 + 4) = *((_BYTE *)v10 + 4);
  *(_DWORD *)v9 = v11;
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  LOBYTE(v11) = *(_BYTE *)(v14 + 4);
  *(_DWORD *)v13 = *(_DWORD *)v14;
  *(_BYTE *)(v13 + 4) = v11;
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  LOBYTE(v11) = *(_BYTE *)(v17 + 16);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = v11;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v18 = a3[12];
  v19 = a1 + v18;
  v20 = (int *)(a2 + v18);
  v21 = *v20;
  *(_BYTE *)(v19 + 4) = *((_BYTE *)v20 + 4);
  *(_DWORD *)v19 = v21;
  v22 = a3[13];
  v23 = a1 + v22;
  v24 = a2 + v22;
  LOBYTE(v21) = *(_BYTE *)(v24 + 4);
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = v21;
  return a1;
}

uint64_t initializeWithTake for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[12];
  v20 = a3[13];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t assignWithTake for __RKEntityOrbitEntityActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  v12 = a1 + v9;
  v13 = a2 + v9;
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = *(_BYTE *)(v13 + 4);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *(_BYTE *)(v16 + 16) = *(_BYTE *)(v17 + 16);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v18 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[12];
  v20 = a3[13];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_DWORD *)v21 = *(_DWORD *)v22;
  *(_BYTE *)(v21 + 4) = *(_BYTE *)(v22 + 4);
  v23 = a1 + v20;
  v24 = a2 + v20;
  *(_DWORD *)v23 = *(_DWORD *)v24;
  *(_BYTE *)(v23 + 4) = *(_BYTE *)(v24 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_17Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_18Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for __RKEntityOrbitEntityActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityLookAtCameraActionArguments(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    *(_DWORD *)v10 = *(_DWORD *)v11;
    v10[4] = v11[4];
    v12 = (char *)a1 + v9;
    v13 = (char *)a2 + v9;
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v12[4] = v13[4];
    v14 = a3[7];
    v15 = a3[8];
    v16 = (char *)a1 + v14;
    v17 = (char *)a2 + v14;
    *(_OWORD *)v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    v18 = (char *)a1 + v15;
    v19 = (char *)a2 + v15;
    v18[4] = v19[4];
    *(_DWORD *)v18 = *(_DWORD *)v19;
    v20 = a3[9];
    v21 = a3[10];
    v22 = (char *)a1 + v20;
    v23 = (char *)a2 + v20;
    *(_OWORD *)v22 = *(_OWORD *)v23;
    v22[16] = v23[16];
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
  }
  return a1;
}

uint64_t initializeWithCopy for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  return a1;
}

uint64_t assignWithCopy for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (int *)(a2 + v7);
  v10 = *v9;
  *(_BYTE *)(v8 + 4) = *((_BYTE *)v9 + 4);
  *(_DWORD *)v8 = v10;
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  LOBYTE(v10) = *(_BYTE *)(v13 + 4);
  *(_DWORD *)v12 = *(_DWORD *)v13;
  *(_BYTE *)(v12 + 4) = v10;
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  LOBYTE(v10) = *(_BYTE *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = v10;
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  LOBYTE(v10) = *(_BYTE *)(v19 + 4);
  *(_DWORD *)v18 = *(_DWORD *)v19;
  *(_BYTE *)(v18 + 4) = v10;
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  LOBYTE(v10) = *(_BYTE *)(v22 + 16);
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = v10;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  return a1;
}

uint64_t assignWithTake for __RKEntityLookAtCameraActionArguments(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_DWORD *)v9 = *(_DWORD *)v10;
  *(_BYTE *)(v9 + 4) = *(_BYTE *)(v10 + 4);
  v11 = a1 + v8;
  v12 = a2 + v8;
  *(_DWORD *)v11 = *(_DWORD *)v12;
  *(_BYTE *)(v11 + 4) = *(_BYTE *)(v12 + 4);
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = a1 + v14;
  v18 = a2 + v14;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v19 = a3[9];
  v20 = a3[10];
  v21 = a1 + v19;
  v22 = a2 + v19;
  *(_OWORD *)v21 = *(_OWORD *)v22;
  *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
  *(_BYTE *)(a1 + v20) = *(_BYTE *)(a2 + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA30904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 40));
  if (v9 >= 2)
    v10 = ((v9 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v10 = -2;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA309A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 40)) = a2 + 2;
  return result;
}

uint64_t type metadata completion function for __RKEntityLookAtCameraActionArguments()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntitySetOpacityActionArguments(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_DWORD *)((char *)a1 + v8) = *(_DWORD *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for __RKEntityFadeActionArguments(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + *(int *)(a3 + 24)) = *(_DWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for __RKEntitySetOpacityActionArguments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_DWORD *)(a1 + *(int *)(a3 + 20)) = *(_DWORD *)(a2 + *(int *)(a3 + 20));
  *(_DWORD *)(a1 + v7) = *(_DWORD *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntitySetOpacityActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_7Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySetOpacityActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_8Tm(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for __RKEntitySetOpacityActionArguments()
{
  return type metadata completion function for __RKEntityCustomActionArguments();
}

uint64_t *initializeBufferWithCopyOfBuffer for __RKEntityPlayTimelineActionArguments(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v10 = a3[6];
    v11 = a3[7];
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (char *)a1 + v11;
    v16 = (char *)a2 + v11;
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    if (v17(v16, 1, v7))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v15, (uint64_t *)v16, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v15, 0, 1, v7);
    }
    v20 = a3[8];
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityPlayTimelineActionArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  v7 = a1 + *(int *)(a2 + 28);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = a3[7];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v6))
  {
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  v18 = a3[8];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = *((_QWORD *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v16 = v15(&a1[v12], 1, v6);
  v17 = v15(v14, 1, v6);
  if (!v16)
  {
    if (!v17)
    {
      v8(v13, v14, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_7:
  v19 = a3[8];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = *((_QWORD *)v21 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  return a1;
}

char *assignWithTake for __RKEntityPlayTimelineActionArguments(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t (*v17)(const void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  v14 = a3[7];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v18 = v17(&a1[v14], 1, v6);
  v19 = v17(v16, 1, v6);
  if (!v18)
  {
    if (!v19)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
LABEL_7:
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v25 = *v23;
  v24 = v23[1];
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA3153C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA315F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for __RKEntityPlayTimelineActionArguments()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for __RKEntityInteractionSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  int *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  int *started;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(_BYTE *, _BYTE *, uint64_t);
  int *v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  void (*v163)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v164;
  void (*v165)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  int *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  int *v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  int *v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  unsigned int (*v228)(char *, uint64_t, uint64_t);
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  uint64_t v237;
  void (*v239)(char *, char *, uint64_t);
  uint64_t v240;
  void (*__dsta)(_BYTE *, char *, uint64_t);
  char *__dst;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for __RKEntityTriggerSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v8 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v9 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v9 + 48));
        *((_BYTE *)a1 + *(int *)(v9 + 64)) = *((_BYTE *)a2 + *(int *)(v9 + 64));
        goto LABEL_11;
      case 1u:
        v11 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
        goto LABEL_11;
      case 2u:
        v12 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(_QWORD *)((char *)a1 + *(int *)(v13 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v13 + 48));
        *(_QWORD *)((char *)a1 + *(int *)(v13 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v13 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 3u:
        v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 4u:
        v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_11;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
        break;
    }
    v16 = *(int *)(a3 + 20);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v20 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
        v21 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        v22 = v21[5];
        v23 = &v17[v22];
        v24 = (uint64_t *)&v18[v22];
        v26 = *v24;
        v25 = v24[1];
        *v23 = v26;
        v23[1] = v25;
        v17[v21[6]] = v18[v21[6]];
        v27 = v21[7];
        v28 = &v17[v27];
        v29 = &v18[v27];
        v28[8] = v29[8];
        *(_QWORD *)v28 = *(_QWORD *)v29;
        v17[v21[8]] = v18[v21[8]];
        v17[v21[9]] = v18[v21[9]];
        v17[v21[10]] = v18[v21[10]];
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 1u:
        v30 = type metadata accessor for UUID();
        v31 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
        v31(v17, v18, v30);
        v32 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v31(&v17[*(int *)(v32 + 20)], &v18[*(int *)(v32 + 20)], v30);
        goto LABEL_39;
      case 2u:
        v33 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v17, v18, v33);
        v34 = type metadata accessor for __RKEntityCustomActionArguments(0);
        v35 = *(int *)(v34 + 20);
        v36 = &v17[v35];
        v37 = (uint64_t *)&v18[v35];
        v39 = *v37;
        v38 = v37[1];
        *v36 = v39;
        v36[1] = v38;
        *(_QWORD *)&v17[*(int *)(v34 + 24)] = *(_QWORD *)&v18[*(int *)(v34 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 3u:
        v40 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v17, v18, v40);
        v41 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v42 = v41[5];
        v43 = &v17[v42];
        v44 = &v18[v42];
        *(_DWORD *)v43 = *(_DWORD *)v44;
        v43[4] = v44[4];
        v45 = v41[6];
        v46 = &v17[v45];
        v47 = &v18[v45];
        *(_DWORD *)v46 = *(_DWORD *)v47;
        v46[4] = v47[4];
        v17[v41[7]] = v18[v41[7]];
        v17[v41[8]] = v18[v41[8]];
        goto LABEL_39;
      case 4u:
        v48 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v17, v18, v48);
        v49 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v17[*(int *)(v49 + 20)] = *(_DWORD *)&v18[*(int *)(v49 + 20)];
        v50 = *(int *)(v49 + 24);
        v51 = &v17[v50];
        v52 = &v18[v50];
        v51[4] = v52[4];
        *(_DWORD *)v51 = *(_DWORD *)v52;
        goto LABEL_39;
      case 6u:
        *v17 = *v18;
        *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
        v17[16] = v18[16];
        *((_QWORD *)v17 + 3) = *((_QWORD *)v18 + 3);
        *((_WORD *)v17 + 16) = *((_WORD *)v18 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_39;
      case 7u:
        v53 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v17, v18, v53);
        v54 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v55 = v54[5];
        v56 = &v17[v55];
        v57 = &v18[v55];
        *(_DWORD *)v56 = *(_DWORD *)v57;
        v56[4] = v57[4];
        v58 = v54[6];
        v59 = &v17[v58];
        v60 = &v18[v58];
        *(_DWORD *)v59 = *(_DWORD *)v60;
        v59[4] = v60[4];
        v17[v54[7]] = v18[v54[7]];
        v17[v54[8]] = v18[v54[8]];
        v17[v54[9]] = v18[v54[9]];
        v61 = v54[10];
        v62 = &v17[v61];
        v63 = &v18[v61];
        *(_DWORD *)v62 = *(_DWORD *)v63;
        v62[4] = v63[4];
        v17[v54[11]] = v18[v54[11]];
        v64 = v54[12];
        v65 = &v17[v64];
        v66 = &v18[v64];
        v65[4] = v66[4];
        *(_DWORD *)v65 = *(_DWORD *)v66;
        v67 = v54[13];
        v68 = &v17[v67];
        v69 = &v18[v67];
        *(_DWORD *)v68 = *(_DWORD *)v69;
        v68[4] = v69[4];
        v17[v54[14]] = v18[v54[14]];
        v17[v54[15]] = v18[v54[15]];
        goto LABEL_39;
      case 8u:
        v70 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v70 - 8) + 16))(v17, v18, v70);
        v71 = type metadata accessor for __RKEntityForceActionArguments(0);
        v72 = *(int *)(v71 + 20);
        v73 = &v17[v72];
        v74 = &v18[v72];
        *(_OWORD *)v73 = *(_OWORD *)v74;
        v73[16] = v74[16];
        v75 = *(int *)(v71 + 24);
        v76 = &v17[v75];
        v77 = &v18[v75];
        v76[16] = v77[16];
        *(_OWORD *)v76 = *(_OWORD *)v77;
        goto LABEL_39;
      case 9u:
        v78 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v17, v18, v78);
        v79 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v80 = v79[5];
        v81 = &v17[v80];
        v82 = &v18[v80];
        *(_DWORD *)v81 = *(_DWORD *)v82;
        v81[4] = v82[4];
        v83 = v79[6];
        v84 = &v17[v83];
        v85 = &v18[v83];
        *(_DWORD *)v84 = *(_DWORD *)v85;
        v84[4] = v85[4];
        v17[v79[7]] = v18[v79[7]];
        v17[v79[8]] = v18[v79[8]];
        v17[v79[9]] = v18[v79[9]];
        v86 = v79[10];
        v87 = &v17[v86];
        v88 = &v18[v86];
        *(_DWORD *)v87 = *(_DWORD *)v88;
        v87[4] = v88[4];
        v17[v79[11]] = v18[v79[11]];
        v89 = v79[12];
        v90 = &v17[v89];
        v91 = &v18[v89];
        v90[4] = v91[4];
        *(_DWORD *)v90 = *(_DWORD *)v91;
        v92 = v79[13];
        v93 = &v17[v92];
        v94 = &v18[v92];
        *(_DWORD *)v93 = *(_DWORD *)v94;
        v93[4] = v94[4];
        v17[v79[14]] = v18[v79[14]];
        v17[v79[15]] = v18[v79[15]];
        goto LABEL_39;
      case 0xAu:
        v95 = type metadata accessor for UUID();
        v96 = *(_QWORD *)(v95 - 8);
        v97 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
        v97(v17, v18, v95);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&v17[started[5]] = *(_QWORD *)&v18[started[5]];
        v17[started[6]] = v18[started[6]];
        *(_QWORD *)&v17[started[7]] = *(_QWORD *)&v18[started[7]];
        *(_QWORD *)&v17[started[8]] = *(_QWORD *)&v18[started[8]];
        v17[started[9]] = v18[started[9]];
        v17[started[10]] = v18[started[10]];
        *(_DWORD *)&v17[started[11]] = *(_DWORD *)&v18[started[11]];
        v17[started[12]] = v18[started[12]];
        v99 = started[13];
        v100 = &v17[v99];
        v101 = &v18[v99];
        *(_QWORD *)v100 = *(_QWORD *)v101;
        v100[8] = v101[8];
        v102 = started[14];
        v103 = &v17[v102];
        v104 = &v18[v102];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v104, 1, v95))
          goto LABEL_24;
        goto LABEL_38;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v106 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v106 - 8) + 16))(v17, v18, v106);
        goto LABEL_39;
      case 0xEu:
        v95 = type metadata accessor for UUID();
        v96 = *(_QWORD *)(v95 - 8);
        v97 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
        v97(v17, v18, v95);
        v107 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v108 = v107[5];
        v109 = &v17[v108];
        v110 = &v18[v108];
        *(_OWORD *)v109 = *(_OWORD *)v110;
        v109[16] = v110[16];
        v111 = v107[6];
        v112 = &v17[v111];
        v113 = &v18[v111];
        *(_OWORD *)v112 = *(_OWORD *)v113;
        v112[16] = v113[16];
        v114 = v107[7];
        v115 = &v17[v114];
        v116 = &v18[v114];
        v115[4] = v116[4];
        *(_DWORD *)v115 = *(_DWORD *)v116;
        v117 = v107[8];
        v118 = &v17[v117];
        v119 = &v18[v117];
        v118[4] = v119[4];
        *(_DWORD *)v118 = *(_DWORD *)v119;
        v17[v107[9]] = v18[v107[9]];
        v17[v107[10]] = v18[v107[10]];
        v17[v107[11]] = v18[v107[11]];
        v17[v107[12]] = v18[v107[12]];
        v120 = v107[13];
        v121 = &v17[v120];
        v122 = &v18[v120];
        *(_DWORD *)v121 = *(_DWORD *)v122;
        v121[4] = v122[4];
        v123 = v107[14];
        v124 = &v17[v123];
        v125 = &v18[v123];
        *(_DWORD *)v124 = *(_DWORD *)v125;
        v124[4] = v125[4];
        v126 = v107[15];
        v103 = &v17[v126];
        v104 = &v18[v126];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v104, 1, v95))
        {
LABEL_24:
          v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
        }
        else
        {
LABEL_38:
          v97(v103, v104, v95);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v103, 0, 1, v95);
        }
        goto LABEL_39;
      case 0x10u:
        v127 = type metadata accessor for UUID();
        v128 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v127 - 8) + 16);
        v128(v17, v18, v127);
        v129 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v128(&v17[v129[5]], &v18[v129[5]], v127);
        v130 = v129[6];
        v131 = &v17[v130];
        v132 = &v18[v130];
        *(_DWORD *)v131 = *(_DWORD *)v132;
        v131[4] = v132[4];
        v133 = v129[7];
        v134 = &v17[v133];
        v135 = &v18[v133];
        *(_DWORD *)v134 = *(_DWORD *)v135;
        v134[4] = v135[4];
        v136 = v129[8];
        v137 = &v17[v136];
        v138 = &v18[v136];
        *(_OWORD *)v137 = *(_OWORD *)v138;
        v137[16] = v138[16];
        v17[v129[9]] = v18[v129[9]];
        v17[v129[10]] = v18[v129[10]];
        v17[v129[11]] = v18[v129[11]];
        v139 = v129[12];
        v140 = &v17[v139];
        v141 = &v18[v139];
        v140[4] = v141[4];
        *(_DWORD *)v140 = *(_DWORD *)v141;
        v142 = v129[13];
        v143 = &v17[v142];
        v144 = &v18[v142];
        *(_DWORD *)v143 = *(_DWORD *)v144;
        v143[4] = v144[4];
        goto LABEL_39;
      case 0x11u:
        v145 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v145 - 8) + 16))(v17, v18, v145);
        v146 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v147 = v146[5];
        v148 = &v17[v147];
        v149 = &v18[v147];
        *(_DWORD *)v148 = *(_DWORD *)v149;
        v148[4] = v149[4];
        v150 = v146[6];
        v151 = &v17[v150];
        v152 = &v18[v150];
        *(_DWORD *)v151 = *(_DWORD *)v152;
        v151[4] = v152[4];
        v153 = v146[7];
        v154 = &v17[v153];
        v155 = &v18[v153];
        v154[16] = v155[16];
        *(_OWORD *)v154 = *(_OWORD *)v155;
        v156 = v146[8];
        v157 = &v17[v156];
        v158 = &v18[v156];
        v157[4] = v158[4];
        *(_DWORD *)v157 = *(_DWORD *)v158;
        v159 = v146[9];
        v160 = &v17[v159];
        v161 = &v18[v159];
        v160[16] = v161[16];
        *(_OWORD *)v160 = *(_OWORD *)v161;
        v17[v146[10]] = v18[v146[10]];
        goto LABEL_39;
      case 0x12u:
        v162 = type metadata accessor for UUID();
        v163 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v162 - 8) + 16);
        v163(v17, v18, v162);
        v164 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v163(&v17[*(int *)(v164 + 20)], &v18[*(int *)(v164 + 20)], v162);
        v165 = v163;
        __dsta = v163;
        v166 = *(int *)(v164 + 24);
        v167 = v164;
        v168 = &v17[v166];
        v169 = &v18[v166];
        v165(&v17[v166], &v18[v166], v162);
        v170 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v171 = v170[5];
        v172 = &v168[v171];
        v173 = &v169[v171];
        *(_DWORD *)v172 = *(_DWORD *)v173;
        v172[4] = v173[4];
        v174 = v170[6];
        v175 = &v168[v174];
        v176 = &v169[v174];
        *(_DWORD *)v175 = *(_DWORD *)v176;
        v175[4] = v176[4];
        v168[v170[7]] = v169[v170[7]];
        v168[v170[8]] = v169[v170[8]];
        v168[v170[9]] = v169[v170[9]];
        v177 = v170[10];
        v178 = &v168[v177];
        v179 = &v169[v177];
        *(_DWORD *)v178 = *(_DWORD *)v179;
        v178[4] = v179[4];
        v168[v170[11]] = v169[v170[11]];
        v180 = v170[12];
        v181 = &v168[v180];
        v182 = &v169[v180];
        v181[4] = v182[4];
        *(_DWORD *)v181 = *(_DWORD *)v182;
        v183 = v170[13];
        v184 = &v168[v183];
        v185 = &v169[v183];
        *(_DWORD *)v184 = *(_DWORD *)v185;
        v184[4] = v185[4];
        v168[v170[14]] = v169[v170[14]];
        v168[v170[15]] = v169[v170[15]];
        v186 = *(int *)(v167 + 28);
        v187 = &v17[v186];
        v188 = &v18[v186];
        __dsta(&v17[v186], v188, v162);
        v189 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v190 = v189[5];
        v191 = &v187[v190];
        v192 = &v188[v190];
        *(_DWORD *)v191 = *(_DWORD *)v192;
        v191[4] = v192[4];
        v193 = v189[6];
        v194 = &v187[v193];
        v195 = &v188[v193];
        *(_DWORD *)v194 = *(_DWORD *)v195;
        v194[4] = v195[4];
        v187[v189[7]] = v188[v189[7]];
        v187[v189[8]] = v188[v189[8]];
        v187[v189[9]] = v188[v189[9]];
        v196 = v189[10];
        v197 = &v187[v196];
        v198 = &v188[v196];
        *(_DWORD *)v197 = *(_DWORD *)v198;
        v197[4] = v198[4];
        v187[v189[11]] = v188[v189[11]];
        v199 = v189[12];
        v200 = &v187[v199];
        v201 = &v188[v199];
        v200[4] = v201[4];
        *(_DWORD *)v200 = *(_DWORD *)v201;
        v202 = v189[13];
        v203 = &v187[v202];
        v204 = &v188[v202];
        *(_DWORD *)v203 = *(_DWORD *)v204;
        v203[4] = v204[4];
        v187[v189[14]] = v188[v189[14]];
        v187[v189[15]] = v188[v189[15]];
        goto LABEL_39;
      case 0x13u:
        v205 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v205 - 8) + 16))(v17, v18, v205);
        v206 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v207 = v206[5];
        v208 = &v17[v207];
        v209 = &v18[v207];
        *(_DWORD *)v208 = *(_DWORD *)v209;
        v208[4] = v209[4];
        v210 = v206[6];
        v211 = &v17[v210];
        v212 = &v18[v210];
        *(_DWORD *)v211 = *(_DWORD *)v212;
        v211[4] = v212[4];
        v17[v206[7]] = v18[v206[7]];
        v213 = v206[8];
        v214 = &v17[v213];
        v215 = &v18[v213];
        v214[16] = v215[16];
        *(_OWORD *)v214 = *(_OWORD *)v215;
        goto LABEL_39;
      case 0x14u:
        v216 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v216 - 8) + 16))(v17, v18, v216);
        v217 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v17[*(int *)(v217 + 20)] = *(_DWORD *)&v18[*(int *)(v217 + 20)];
        *(_DWORD *)&v17[*(int *)(v217 + 24)] = *(_DWORD *)&v18[*(int *)(v217 + 24)];
        goto LABEL_39;
      case 0x15u:
        v218 = type metadata accessor for UUID();
        v219 = *(_QWORD *)(v218 - 8);
        v220 = *(void (**)(char *, char *, uint64_t))(v219 + 16);
        v220(v17, v18, v218);
        v221 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v239 = v220;
        v220(&v17[v221[5]], &v18[v221[5]], v218);
        v222 = v221[6];
        v223 = &v17[v222];
        v224 = &v18[v222];
        v225 = v224[1];
        *v223 = *v224;
        v223[1] = v225;
        v226 = v221[7];
        v240 = v219;
        __dst = &v17[v226];
        v227 = &v18[v226];
        v228 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v219 + 48);
        swift_bridgeObjectRetain();
        if (v228(v227, 1, v218))
        {
          v229 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(__dst, v227, *(_QWORD *)(*(_QWORD *)(v229 - 8) + 64));
        }
        else
        {
          v239(__dst, v227, v218);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v240 + 56))(__dst, 0, 1, v218);
        }
        v230 = v221[8];
        v231 = &v17[v230];
        v232 = &v18[v230];
        v233 = v232[1];
        *v231 = *v232;
        v231[1] = v233;
        swift_bridgeObjectRetain();
LABEL_39:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
        break;
    }
    v234 = *(int *)(a3 + 24);
    v235 = (_QWORD *)((char *)a1 + v234);
    v236 = (_QWORD *)((char *)a2 + v234);
    v237 = v236[1];
    *v235 = *v236;
    v235[1] = v237;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for __RKEntityInteractionSpecification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;

  type metadata accessor for __RKEntityTriggerSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 1u:
      v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2u:
      v5 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
    case 5u:
      goto LABEL_5;
    case 4u:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v6 = a1 + *(int *)(a2 + 20);
  type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
      type metadata accessor for __RKEntityAudioActionArguments(0);
      goto LABEL_21;
    case 1u:
      v9 = type metadata accessor for UUID();
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v6, v9);
      v11 = type metadata accessor for __RKChangeSceneActionArguments(0);
      goto LABEL_16;
    case 2u:
      v12 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v6, v12);
      type metadata accessor for __RKEntityCustomActionArguments(0);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    case 3u:
    case 4u:
    case 7u:
    case 8u:
    case 9u:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0x11u:
    case 0x13u:
    case 0x14u:
      v7 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
      return swift_bridgeObjectRelease();
    case 6u:
      goto LABEL_21;
    case 0xAu:
      v9 = type metadata accessor for UUID();
      v13 = *(_QWORD *)(v9 - 8);
      v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v10(v6, v9);
      v14 = *(int *)(type metadata accessor for __RKEntityStartAnimateActionArguments(0) + 56);
      goto LABEL_13;
    case 0xEu:
      v9 = type metadata accessor for UUID();
      v13 = *(_QWORD *)(v9 - 8);
      v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v10(v6, v9);
      v14 = *(int *)(type metadata accessor for __RKEntityTransformActionArguments(0) + 60);
LABEL_13:
      v15 = v6 + v14;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v9))
        return swift_bridgeObjectRelease();
      v16 = v15;
LABEL_17:
      v10(v16, v9);
      return swift_bridgeObjectRelease();
    case 0x10u:
      v9 = type metadata accessor for UUID();
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v6, v9);
      v11 = type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
LABEL_16:
      v16 = v6 + *(int *)(v11 + 20);
      goto LABEL_17;
    case 0x12u:
      v17 = type metadata accessor for UUID();
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v6, v17);
      v19 = (int *)type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v18(v6 + v19[5], v17);
      v18(v6 + v19[6], v17);
      v18(v6 + v19[7], v17);
      return swift_bridgeObjectRelease();
    case 0x15u:
      v20 = type metadata accessor for UUID();
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v22(v6, v20);
      v23 = type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v22(v6 + *(int *)(v23 + 20), v20);
      swift_bridgeObjectRelease();
      v24 = v6 + *(int *)(v23 + 28);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v24, 1, v20))
        v22(v24, v20);
LABEL_21:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      return swift_bridgeObjectRelease();
  }
}

_QWORD *initializeWithCopy for __RKEntityInteractionSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  int *started;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(_BYTE *, _BYTE *, uint64_t);
  int *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  void (*v161)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v162;
  void (*v163)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  int *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  int *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(char *, char *, uint64_t);
  int *v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  unsigned int (*v226)(char *, uint64_t, uint64_t);
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  void (*v237)(char *, char *, uint64_t);
  uint64_t v238;
  void (*__dsta)(_BYTE *, char *, uint64_t);
  char *__dst;

  v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v7 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
      *((_BYTE *)a1 + *(int *)(v8 + 64)) = *((_BYTE *)a2 + *(int *)(v8 + 64));
      goto LABEL_9;
    case 1u:
      v9 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
      goto LABEL_9;
    case 2u:
      v10 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(_QWORD *)((char *)a1 + *(int *)(v11 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 48));
      *(_QWORD *)((char *)a1 + *(int *)(v11 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 64));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 3u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 4u:
      v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_9;
    case 5u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_9:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v14 = *(int *)(a3 + 20);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v18 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v15, v16, v18);
      v19 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      v20 = v19[5];
      v21 = &v15[v20];
      v22 = (uint64_t *)&v16[v20];
      v24 = *v22;
      v23 = v22[1];
      *v21 = v24;
      v21[1] = v23;
      v15[v19[6]] = v16[v19[6]];
      v25 = v19[7];
      v26 = &v15[v25];
      v27 = &v16[v25];
      v26[8] = v27[8];
      *(_QWORD *)v26 = *(_QWORD *)v27;
      v15[v19[8]] = v16[v19[8]];
      v15[v19[9]] = v16[v19[9]];
      v15[v19[10]] = v16[v19[10]];
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 1u:
      v28 = type metadata accessor for UUID();
      v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
      v29(v15, v16, v28);
      v30 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v29(&v15[*(int *)(v30 + 20)], &v16[*(int *)(v30 + 20)], v28);
      goto LABEL_37;
    case 2u:
      v31 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v15, v16, v31);
      v32 = type metadata accessor for __RKEntityCustomActionArguments(0);
      v33 = *(int *)(v32 + 20);
      v34 = &v15[v33];
      v35 = (uint64_t *)&v16[v33];
      v37 = *v35;
      v36 = v35[1];
      *v34 = v37;
      v34[1] = v36;
      *(_QWORD *)&v15[*(int *)(v32 + 24)] = *(_QWORD *)&v16[*(int *)(v32 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 3u:
      v38 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(v15, v16, v38);
      v39 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      v40 = v39[5];
      v41 = &v15[v40];
      v42 = &v16[v40];
      *(_DWORD *)v41 = *(_DWORD *)v42;
      v41[4] = v42[4];
      v43 = v39[6];
      v44 = &v15[v43];
      v45 = &v16[v43];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      v15[v39[7]] = v16[v39[7]];
      v15[v39[8]] = v16[v39[8]];
      goto LABEL_37;
    case 4u:
      v46 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v15, v16, v46);
      v47 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&v15[*(int *)(v47 + 20)] = *(_DWORD *)&v16[*(int *)(v47 + 20)];
      v48 = *(int *)(v47 + 24);
      v49 = &v15[v48];
      v50 = &v16[v48];
      v49[4] = v50[4];
      *(_DWORD *)v49 = *(_DWORD *)v50;
      goto LABEL_37;
    case 6u:
      *v15 = *v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      v15[16] = v16[16];
      *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
      *((_WORD *)v15 + 16) = *((_WORD *)v16 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_37;
    case 7u:
      v51 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v15, v16, v51);
      v52 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v53 = v52[5];
      v54 = &v15[v53];
      v55 = &v16[v53];
      *(_DWORD *)v54 = *(_DWORD *)v55;
      v54[4] = v55[4];
      v56 = v52[6];
      v57 = &v15[v56];
      v58 = &v16[v56];
      *(_DWORD *)v57 = *(_DWORD *)v58;
      v57[4] = v58[4];
      v15[v52[7]] = v16[v52[7]];
      v15[v52[8]] = v16[v52[8]];
      v15[v52[9]] = v16[v52[9]];
      v59 = v52[10];
      v60 = &v15[v59];
      v61 = &v16[v59];
      *(_DWORD *)v60 = *(_DWORD *)v61;
      v60[4] = v61[4];
      v15[v52[11]] = v16[v52[11]];
      v62 = v52[12];
      v63 = &v15[v62];
      v64 = &v16[v62];
      v63[4] = v64[4];
      *(_DWORD *)v63 = *(_DWORD *)v64;
      v65 = v52[13];
      v66 = &v15[v65];
      v67 = &v16[v65];
      *(_DWORD *)v66 = *(_DWORD *)v67;
      v66[4] = v67[4];
      v15[v52[14]] = v16[v52[14]];
      v15[v52[15]] = v16[v52[15]];
      goto LABEL_37;
    case 8u:
      v68 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 16))(v15, v16, v68);
      v69 = type metadata accessor for __RKEntityForceActionArguments(0);
      v70 = *(int *)(v69 + 20);
      v71 = &v15[v70];
      v72 = &v16[v70];
      *(_OWORD *)v71 = *(_OWORD *)v72;
      v71[16] = v72[16];
      v73 = *(int *)(v69 + 24);
      v74 = &v15[v73];
      v75 = &v16[v73];
      v74[16] = v75[16];
      *(_OWORD *)v74 = *(_OWORD *)v75;
      goto LABEL_37;
    case 9u:
      v76 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v76 - 8) + 16))(v15, v16, v76);
      v77 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v78 = v77[5];
      v79 = &v15[v78];
      v80 = &v16[v78];
      *(_DWORD *)v79 = *(_DWORD *)v80;
      v79[4] = v80[4];
      v81 = v77[6];
      v82 = &v15[v81];
      v83 = &v16[v81];
      *(_DWORD *)v82 = *(_DWORD *)v83;
      v82[4] = v83[4];
      v15[v77[7]] = v16[v77[7]];
      v15[v77[8]] = v16[v77[8]];
      v15[v77[9]] = v16[v77[9]];
      v84 = v77[10];
      v85 = &v15[v84];
      v86 = &v16[v84];
      *(_DWORD *)v85 = *(_DWORD *)v86;
      v85[4] = v86[4];
      v15[v77[11]] = v16[v77[11]];
      v87 = v77[12];
      v88 = &v15[v87];
      v89 = &v16[v87];
      v88[4] = v89[4];
      *(_DWORD *)v88 = *(_DWORD *)v89;
      v90 = v77[13];
      v91 = &v15[v90];
      v92 = &v16[v90];
      *(_DWORD *)v91 = *(_DWORD *)v92;
      v91[4] = v92[4];
      v15[v77[14]] = v16[v77[14]];
      v15[v77[15]] = v16[v77[15]];
      goto LABEL_37;
    case 0xAu:
      v93 = type metadata accessor for UUID();
      v94 = *(_QWORD *)(v93 - 8);
      v95 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
      v95(v15, v16, v93);
      started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(_QWORD *)&v15[started[5]] = *(_QWORD *)&v16[started[5]];
      v15[started[6]] = v16[started[6]];
      *(_QWORD *)&v15[started[7]] = *(_QWORD *)&v16[started[7]];
      *(_QWORD *)&v15[started[8]] = *(_QWORD *)&v16[started[8]];
      v15[started[9]] = v16[started[9]];
      v15[started[10]] = v16[started[10]];
      *(_DWORD *)&v15[started[11]] = *(_DWORD *)&v16[started[11]];
      v15[started[12]] = v16[started[12]];
      v97 = started[13];
      v98 = &v15[v97];
      v99 = &v16[v97];
      *(_QWORD *)v98 = *(_QWORD *)v99;
      v98[8] = v99[8];
      v100 = started[14];
      v101 = &v15[v100];
      v102 = &v16[v100];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v102, 1, v93))
        goto LABEL_22;
      goto LABEL_36;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      v104 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v104 - 8) + 16))(v15, v16, v104);
      goto LABEL_37;
    case 0xEu:
      v93 = type metadata accessor for UUID();
      v94 = *(_QWORD *)(v93 - 8);
      v95 = *(void (**)(char *, char *, uint64_t))(v94 + 16);
      v95(v15, v16, v93);
      v105 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      v106 = v105[5];
      v107 = &v15[v106];
      v108 = &v16[v106];
      *(_OWORD *)v107 = *(_OWORD *)v108;
      v107[16] = v108[16];
      v109 = v105[6];
      v110 = &v15[v109];
      v111 = &v16[v109];
      *(_OWORD *)v110 = *(_OWORD *)v111;
      v110[16] = v111[16];
      v112 = v105[7];
      v113 = &v15[v112];
      v114 = &v16[v112];
      v113[4] = v114[4];
      *(_DWORD *)v113 = *(_DWORD *)v114;
      v115 = v105[8];
      v116 = &v15[v115];
      v117 = &v16[v115];
      v116[4] = v117[4];
      *(_DWORD *)v116 = *(_DWORD *)v117;
      v15[v105[9]] = v16[v105[9]];
      v15[v105[10]] = v16[v105[10]];
      v15[v105[11]] = v16[v105[11]];
      v15[v105[12]] = v16[v105[12]];
      v118 = v105[13];
      v119 = &v15[v118];
      v120 = &v16[v118];
      *(_DWORD *)v119 = *(_DWORD *)v120;
      v119[4] = v120[4];
      v121 = v105[14];
      v122 = &v15[v121];
      v123 = &v16[v121];
      *(_DWORD *)v122 = *(_DWORD *)v123;
      v122[4] = v123[4];
      v124 = v105[15];
      v101 = &v15[v124];
      v102 = &v16[v124];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v102, 1, v93))
      {
LABEL_22:
        v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
      }
      else
      {
LABEL_36:
        v95(v101, v102, v93);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v101, 0, 1, v93);
      }
      goto LABEL_37;
    case 0x10u:
      v125 = type metadata accessor for UUID();
      v126 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v125 - 8) + 16);
      v126(v15, v16, v125);
      v127 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v126(&v15[v127[5]], &v16[v127[5]], v125);
      v128 = v127[6];
      v129 = &v15[v128];
      v130 = &v16[v128];
      *(_DWORD *)v129 = *(_DWORD *)v130;
      v129[4] = v130[4];
      v131 = v127[7];
      v132 = &v15[v131];
      v133 = &v16[v131];
      *(_DWORD *)v132 = *(_DWORD *)v133;
      v132[4] = v133[4];
      v134 = v127[8];
      v135 = &v15[v134];
      v136 = &v16[v134];
      *(_OWORD *)v135 = *(_OWORD *)v136;
      v135[16] = v136[16];
      v15[v127[9]] = v16[v127[9]];
      v15[v127[10]] = v16[v127[10]];
      v15[v127[11]] = v16[v127[11]];
      v137 = v127[12];
      v138 = &v15[v137];
      v139 = &v16[v137];
      v138[4] = v139[4];
      *(_DWORD *)v138 = *(_DWORD *)v139;
      v140 = v127[13];
      v141 = &v15[v140];
      v142 = &v16[v140];
      *(_DWORD *)v141 = *(_DWORD *)v142;
      v141[4] = v142[4];
      goto LABEL_37;
    case 0x11u:
      v143 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v143 - 8) + 16))(v15, v16, v143);
      v144 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      v145 = v144[5];
      v146 = &v15[v145];
      v147 = &v16[v145];
      *(_DWORD *)v146 = *(_DWORD *)v147;
      v146[4] = v147[4];
      v148 = v144[6];
      v149 = &v15[v148];
      v150 = &v16[v148];
      *(_DWORD *)v149 = *(_DWORD *)v150;
      v149[4] = v150[4];
      v151 = v144[7];
      v152 = &v15[v151];
      v153 = &v16[v151];
      v152[16] = v153[16];
      *(_OWORD *)v152 = *(_OWORD *)v153;
      v154 = v144[8];
      v155 = &v15[v154];
      v156 = &v16[v154];
      v155[4] = v156[4];
      *(_DWORD *)v155 = *(_DWORD *)v156;
      v157 = v144[9];
      v158 = &v15[v157];
      v159 = &v16[v157];
      v158[16] = v159[16];
      *(_OWORD *)v158 = *(_OWORD *)v159;
      v15[v144[10]] = v16[v144[10]];
      goto LABEL_37;
    case 0x12u:
      v160 = type metadata accessor for UUID();
      v161 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v160 - 8) + 16);
      v161(v15, v16, v160);
      v162 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v161(&v15[*(int *)(v162 + 20)], &v16[*(int *)(v162 + 20)], v160);
      v163 = v161;
      __dsta = v161;
      v164 = *(int *)(v162 + 24);
      v165 = v162;
      v166 = &v15[v164];
      v167 = &v16[v164];
      v163(&v15[v164], &v16[v164], v160);
      v168 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v169 = v168[5];
      v170 = &v166[v169];
      v171 = &v167[v169];
      *(_DWORD *)v170 = *(_DWORD *)v171;
      v170[4] = v171[4];
      v172 = v168[6];
      v173 = &v166[v172];
      v174 = &v167[v172];
      *(_DWORD *)v173 = *(_DWORD *)v174;
      v173[4] = v174[4];
      v166[v168[7]] = v167[v168[7]];
      v166[v168[8]] = v167[v168[8]];
      v166[v168[9]] = v167[v168[9]];
      v175 = v168[10];
      v176 = &v166[v175];
      v177 = &v167[v175];
      *(_DWORD *)v176 = *(_DWORD *)v177;
      v176[4] = v177[4];
      v166[v168[11]] = v167[v168[11]];
      v178 = v168[12];
      v179 = &v166[v178];
      v180 = &v167[v178];
      v179[4] = v180[4];
      *(_DWORD *)v179 = *(_DWORD *)v180;
      v181 = v168[13];
      v182 = &v166[v181];
      v183 = &v167[v181];
      *(_DWORD *)v182 = *(_DWORD *)v183;
      v182[4] = v183[4];
      v166[v168[14]] = v167[v168[14]];
      v166[v168[15]] = v167[v168[15]];
      v184 = *(int *)(v165 + 28);
      v185 = &v15[v184];
      v186 = &v16[v184];
      __dsta(&v15[v184], v186, v160);
      v187 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v188 = v187[5];
      v189 = &v185[v188];
      v190 = &v186[v188];
      *(_DWORD *)v189 = *(_DWORD *)v190;
      v189[4] = v190[4];
      v191 = v187[6];
      v192 = &v185[v191];
      v193 = &v186[v191];
      *(_DWORD *)v192 = *(_DWORD *)v193;
      v192[4] = v193[4];
      v185[v187[7]] = v186[v187[7]];
      v185[v187[8]] = v186[v187[8]];
      v185[v187[9]] = v186[v187[9]];
      v194 = v187[10];
      v195 = &v185[v194];
      v196 = &v186[v194];
      *(_DWORD *)v195 = *(_DWORD *)v196;
      v195[4] = v196[4];
      v185[v187[11]] = v186[v187[11]];
      v197 = v187[12];
      v198 = &v185[v197];
      v199 = &v186[v197];
      v198[4] = v199[4];
      *(_DWORD *)v198 = *(_DWORD *)v199;
      v200 = v187[13];
      v201 = &v185[v200];
      v202 = &v186[v200];
      *(_DWORD *)v201 = *(_DWORD *)v202;
      v201[4] = v202[4];
      v185[v187[14]] = v186[v187[14]];
      v185[v187[15]] = v186[v187[15]];
      goto LABEL_37;
    case 0x13u:
      v203 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v203 - 8) + 16))(v15, v16, v203);
      v204 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      v205 = v204[5];
      v206 = &v15[v205];
      v207 = &v16[v205];
      *(_DWORD *)v206 = *(_DWORD *)v207;
      v206[4] = v207[4];
      v208 = v204[6];
      v209 = &v15[v208];
      v210 = &v16[v208];
      *(_DWORD *)v209 = *(_DWORD *)v210;
      v209[4] = v210[4];
      v15[v204[7]] = v16[v204[7]];
      v211 = v204[8];
      v212 = &v15[v211];
      v213 = &v16[v211];
      v212[16] = v213[16];
      *(_OWORD *)v212 = *(_OWORD *)v213;
      goto LABEL_37;
    case 0x14u:
      v214 = type metadata accessor for UUID();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v214 - 8) + 16))(v15, v16, v214);
      v215 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&v15[*(int *)(v215 + 20)] = *(_DWORD *)&v16[*(int *)(v215 + 20)];
      *(_DWORD *)&v15[*(int *)(v215 + 24)] = *(_DWORD *)&v16[*(int *)(v215 + 24)];
      goto LABEL_37;
    case 0x15u:
      v216 = type metadata accessor for UUID();
      v217 = *(_QWORD *)(v216 - 8);
      v218 = *(void (**)(char *, char *, uint64_t))(v217 + 16);
      v218(v15, v16, v216);
      v219 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v237 = v218;
      v218(&v15[v219[5]], &v16[v219[5]], v216);
      v220 = v219[6];
      v221 = &v15[v220];
      v222 = &v16[v220];
      v223 = v222[1];
      *v221 = *v222;
      v221[1] = v223;
      v224 = v219[7];
      v238 = v217;
      __dst = &v15[v224];
      v225 = &v16[v224];
      v226 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48);
      swift_bridgeObjectRetain();
      if (v226(v225, 1, v216))
      {
        v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(__dst, v225, *(_QWORD *)(*(_QWORD *)(v227 - 8) + 64));
      }
      else
      {
        v237(__dst, v225, v216);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v238 + 56))(__dst, 0, 1, v216);
      }
      v228 = v219[8];
      v229 = &v15[v228];
      v230 = &v16[v228];
      v231 = v230[1];
      *v229 = *v230;
      v229[1] = v231;
      swift_bridgeObjectRetain();
LABEL_37:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      break;
  }
  v232 = *(int *)(a3 + 24);
  v233 = (_QWORD *)((char *)a1 + v232);
  v234 = (_QWORD *)((char *)a2 + v232);
  v235 = v234[1];
  *v233 = *v234;
  v233[1] = v235;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for __RKEntityInteractionSpecification(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  uint64_t v25;
  void (*v26)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  uint64_t v82;
  int *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char *v90;
  char v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  int *started;
  uint64_t v108;
  char *v109;
  char *v110;
  char v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char v133;
  uint64_t v134;
  char *v135;
  char *v136;
  char v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(_BYTE *, _BYTE *, uint64_t);
  int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  int v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  int v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  int *v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char v168;
  uint64_t v169;
  char *v170;
  char *v171;
  char v172;
  uint64_t v173;
  char *v174;
  char *v175;
  char v176;
  uint64_t v177;
  char *v178;
  char *v179;
  char v180;
  uint64_t v181;
  char *v182;
  char *v183;
  char v184;
  uint64_t v185;
  void (*v186)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v187;
  void (*v188)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char v197;
  uint64_t v198;
  char *v199;
  char *v200;
  char v201;
  uint64_t v202;
  char *v203;
  char *v204;
  char v205;
  uint64_t v206;
  char *v207;
  char *v208;
  char v209;
  uint64_t v210;
  char *v211;
  char *v212;
  char v213;
  uint64_t v214;
  char *v215;
  char *v216;
  int *v217;
  uint64_t v218;
  char *v219;
  char *v220;
  char v221;
  uint64_t v222;
  char *v223;
  char *v224;
  char v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char v229;
  uint64_t v230;
  char *v231;
  char *v232;
  char v233;
  uint64_t v234;
  char *v235;
  char *v236;
  char v237;
  uint64_t v238;
  int *v239;
  uint64_t v240;
  char *v241;
  char *v242;
  char v243;
  uint64_t v244;
  char *v245;
  char *v246;
  char v247;
  uint64_t v248;
  char *v249;
  char *v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  void (*v256)(char *, char *, uint64_t);
  int *v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  char *v262;
  unsigned int (*v263)(char *, uint64_t, uint64_t);
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267;
  uint64_t v268;
  _QWORD *v269;
  _QWORD *v270;
  void (*v272)(char *, char *, uint64_t);
  uint64_t v273;
  void (*__dsta)(_BYTE *, char *, uint64_t);
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v7 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
        *(_DWORD *)((char *)a1 + *(int *)(v8 + 48)) = *(_DWORD *)((char *)a2 + *(int *)(v8 + 48));
        *((_BYTE *)a1 + *(int *)(v8 + 64)) = *((_BYTE *)a2 + *(int *)(v8 + 64));
        goto LABEL_10;
      case 1u:
        v9 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        goto LABEL_10;
      case 2u:
        v10 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
        *(_QWORD *)((char *)a1 + *(int *)(v11 + 48)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 48));
        *(_QWORD *)((char *)a1 + *(int *)(v11 + 64)) = *(_QWORD *)((char *)a2 + *(int *)(v11 + 64));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 5u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1 + v12, type metadata accessor for __RKEntityActionSpecification);
    v15 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v16 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v13, v14, v16);
        v17 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        v18 = v17[5];
        v19 = &v13[v18];
        v20 = &v14[v18];
        *v19 = *v20;
        v19[1] = v20[1];
        v13[v17[6]] = v14[v17[6]];
        v21 = v17[7];
        v22 = &v13[v21];
        v23 = &v14[v21];
        v24 = v23[8];
        *(_QWORD *)v22 = *(_QWORD *)v23;
        v22[8] = v24;
        v13[v17[8]] = v14[v17[8]];
        v13[v17[9]] = v14[v17[9]];
        v13[v17[10]] = v14[v17[10]];
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 1u:
        v25 = type metadata accessor for UUID();
        v26 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        v26(v13, v14, v25);
        v27 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v26(&v13[*(int *)(v27 + 20)], &v14[*(int *)(v27 + 20)], v25);
        goto LABEL_38;
      case 2u:
        v28 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v13, v14, v28);
        v29 = type metadata accessor for __RKEntityCustomActionArguments(0);
        v30 = *(int *)(v29 + 20);
        v31 = &v13[v30];
        v32 = &v14[v30];
        *v31 = *v32;
        v31[1] = v32[1];
        *(_QWORD *)&v13[*(int *)(v29 + 24)] = *(_QWORD *)&v14[*(int *)(v29 + 24)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 3u:
        v33 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v13, v14, v33);
        v34 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v35 = v34[5];
        v36 = &v13[v35];
        v37 = &v14[v35];
        v38 = v37[4];
        *(_DWORD *)v36 = *(_DWORD *)v37;
        v36[4] = v38;
        v39 = v34[6];
        v40 = &v13[v39];
        v41 = &v14[v39];
        v42 = v41[4];
        *(_DWORD *)v40 = *(_DWORD *)v41;
        v40[4] = v42;
        v13[v34[7]] = v14[v34[7]];
        v13[v34[8]] = v14[v34[8]];
        goto LABEL_38;
      case 4u:
        v43 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v13, v14, v43);
        v44 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v13[*(int *)(v44 + 20)] = *(_DWORD *)&v14[*(int *)(v44 + 20)];
        v45 = *(int *)(v44 + 24);
        v46 = &v13[v45];
        v47 = &v14[v45];
        v48 = v47[4];
        *(_DWORD *)v46 = *(_DWORD *)v47;
        v46[4] = v48;
        goto LABEL_38;
      case 6u:
        *v13 = *v14;
        *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
        v13[16] = v14[16];
        v49 = *((_QWORD *)v14 + 3);
        v13[32] = v14[32];
        *((_QWORD *)v13 + 3) = v49;
        v13[33] = v14[33];
        swift_bridgeObjectRetain();
        goto LABEL_38;
      case 7u:
        v50 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v13, v14, v50);
        v51 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v52 = v51[5];
        v53 = &v13[v52];
        v54 = &v14[v52];
        v55 = v54[4];
        *(_DWORD *)v53 = *(_DWORD *)v54;
        v53[4] = v55;
        v56 = v51[6];
        v57 = &v13[v56];
        v58 = &v14[v56];
        v59 = v58[4];
        *(_DWORD *)v57 = *(_DWORD *)v58;
        v57[4] = v59;
        v13[v51[7]] = v14[v51[7]];
        v13[v51[8]] = v14[v51[8]];
        v13[v51[9]] = v14[v51[9]];
        v60 = v51[10];
        v61 = &v13[v60];
        v62 = &v14[v60];
        v63 = v62[4];
        *(_DWORD *)v61 = *(_DWORD *)v62;
        v61[4] = v63;
        v13[v51[11]] = v14[v51[11]];
        v64 = v51[12];
        v65 = &v13[v64];
        v66 = &v14[v64];
        v67 = v66[4];
        *(_DWORD *)v65 = *(_DWORD *)v66;
        v65[4] = v67;
        v68 = v51[13];
        v69 = &v13[v68];
        v70 = &v14[v68];
        v71 = v70[4];
        *(_DWORD *)v69 = *(_DWORD *)v70;
        v69[4] = v71;
        v13[v51[14]] = v14[v51[14]];
        v13[v51[15]] = v14[v51[15]];
        goto LABEL_38;
      case 8u:
        v72 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v13, v14, v72);
        v73 = type metadata accessor for __RKEntityForceActionArguments(0);
        v74 = *(int *)(v73 + 20);
        v75 = &v13[v74];
        v76 = &v14[v74];
        v77 = v76[16];
        *(_OWORD *)v75 = *(_OWORD *)v76;
        v75[16] = v77;
        v78 = *(int *)(v73 + 24);
        v79 = &v13[v78];
        v80 = &v14[v78];
        v81 = v80[16];
        *(_OWORD *)v79 = *(_OWORD *)v80;
        v79[16] = v81;
        goto LABEL_38;
      case 9u:
        v82 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v13, v14, v82);
        v83 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v84 = v83[5];
        v85 = &v13[v84];
        v86 = &v14[v84];
        v87 = v86[4];
        *(_DWORD *)v85 = *(_DWORD *)v86;
        v85[4] = v87;
        v88 = v83[6];
        v89 = &v13[v88];
        v90 = &v14[v88];
        v91 = v90[4];
        *(_DWORD *)v89 = *(_DWORD *)v90;
        v89[4] = v91;
        v13[v83[7]] = v14[v83[7]];
        v13[v83[8]] = v14[v83[8]];
        v13[v83[9]] = v14[v83[9]];
        v92 = v83[10];
        v93 = &v13[v92];
        v94 = &v14[v92];
        v95 = v94[4];
        *(_DWORD *)v93 = *(_DWORD *)v94;
        v93[4] = v95;
        v13[v83[11]] = v14[v83[11]];
        v96 = v83[12];
        v97 = &v13[v96];
        v98 = &v14[v96];
        v99 = v98[4];
        *(_DWORD *)v97 = *(_DWORD *)v98;
        v97[4] = v99;
        v100 = v83[13];
        v101 = &v13[v100];
        v102 = &v14[v100];
        v103 = v102[4];
        *(_DWORD *)v101 = *(_DWORD *)v102;
        v101[4] = v103;
        v13[v83[14]] = v14[v83[14]];
        v13[v83[15]] = v14[v83[15]];
        goto LABEL_38;
      case 0xAu:
        v104 = type metadata accessor for UUID();
        v105 = *(_QWORD *)(v104 - 8);
        v106 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
        v106(v13, v14, v104);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&v13[started[5]] = *(_QWORD *)&v14[started[5]];
        v13[started[6]] = v14[started[6]];
        *(_QWORD *)&v13[started[7]] = *(_QWORD *)&v14[started[7]];
        *(_QWORD *)&v13[started[8]] = *(_QWORD *)&v14[started[8]];
        v13[started[9]] = v14[started[9]];
        v13[started[10]] = v14[started[10]];
        *(_DWORD *)&v13[started[11]] = *(_DWORD *)&v14[started[11]];
        v13[started[12]] = v14[started[12]];
        v108 = started[13];
        v109 = &v13[v108];
        v110 = &v14[v108];
        v111 = v110[8];
        *(_QWORD *)v109 = *(_QWORD *)v110;
        v109[8] = v111;
        v112 = started[14];
        v113 = &v13[v112];
        v114 = &v14[v112];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v114, 1, v104))
          goto LABEL_23;
        goto LABEL_34;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v116 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(v13, v14, v116);
        goto LABEL_38;
      case 0xEu:
        v104 = type metadata accessor for UUID();
        v105 = *(_QWORD *)(v104 - 8);
        v106 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
        v106(v13, v14, v104);
        v117 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v118 = v117[5];
        v119 = &v13[v118];
        v120 = &v14[v118];
        v121 = v120[16];
        *(_OWORD *)v119 = *(_OWORD *)v120;
        v119[16] = v121;
        v122 = v117[6];
        v123 = &v13[v122];
        v124 = &v14[v122];
        v125 = v124[16];
        *(_OWORD *)v123 = *(_OWORD *)v124;
        v123[16] = v125;
        v126 = v117[7];
        v127 = &v13[v126];
        v128 = &v14[v126];
        v129 = v128[4];
        *(_DWORD *)v127 = *(_DWORD *)v128;
        v127[4] = v129;
        v130 = v117[8];
        v131 = &v13[v130];
        v132 = &v14[v130];
        v133 = v132[4];
        *(_DWORD *)v131 = *(_DWORD *)v132;
        v131[4] = v133;
        v13[v117[9]] = v14[v117[9]];
        v13[v117[10]] = v14[v117[10]];
        v13[v117[11]] = v14[v117[11]];
        v13[v117[12]] = v14[v117[12]];
        v134 = v117[13];
        v135 = &v13[v134];
        v136 = &v14[v134];
        v137 = v136[4];
        *(_DWORD *)v135 = *(_DWORD *)v136;
        v135[4] = v137;
        v138 = v117[14];
        v139 = &v13[v138];
        v140 = &v14[v138];
        v141 = v140[4];
        *(_DWORD *)v139 = *(_DWORD *)v140;
        v139[4] = v141;
        v142 = v117[15];
        v113 = &v13[v142];
        v114 = &v14[v142];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v114, 1, v104))
        {
LABEL_23:
          v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v113, v114, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
        }
        else
        {
LABEL_34:
          v106(v113, v114, v104);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v113, 0, 1, v104);
        }
        goto LABEL_38;
      case 0x10u:
        v143 = type metadata accessor for UUID();
        v144 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v143 - 8) + 16);
        v144(v13, v14, v143);
        v145 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v144(&v13[v145[5]], &v14[v145[5]], v143);
        v146 = v145[6];
        v147 = &v13[v146];
        v148 = &v14[v146];
        v149 = *(_DWORD *)v148;
        v147[4] = v148[4];
        *(_DWORD *)v147 = v149;
        v150 = v145[7];
        v151 = &v13[v150];
        v152 = &v14[v150];
        LOBYTE(v149) = v152[4];
        *(_DWORD *)v151 = *(_DWORD *)v152;
        v151[4] = v149;
        v153 = v145[8];
        v154 = &v13[v153];
        v155 = &v14[v153];
        LOBYTE(v149) = v155[16];
        *(_OWORD *)v154 = *(_OWORD *)v155;
        v154[16] = v149;
        v13[v145[9]] = v14[v145[9]];
        v13[v145[10]] = v14[v145[10]];
        v13[v145[11]] = v14[v145[11]];
        v156 = v145[12];
        v157 = &v13[v156];
        v158 = &v14[v156];
        v159 = *(_DWORD *)v158;
        v157[4] = v158[4];
        *(_DWORD *)v157 = v159;
        v160 = v145[13];
        v161 = &v13[v160];
        v162 = &v14[v160];
        LOBYTE(v159) = v162[4];
        *(_DWORD *)v161 = *(_DWORD *)v162;
        v161[4] = v159;
        goto LABEL_38;
      case 0x11u:
        v163 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v163 - 8) + 16))(v13, v14, v163);
        v164 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v165 = v164[5];
        v166 = &v13[v165];
        v167 = &v14[v165];
        v168 = v167[4];
        *(_DWORD *)v166 = *(_DWORD *)v167;
        v166[4] = v168;
        v169 = v164[6];
        v170 = &v13[v169];
        v171 = &v14[v169];
        v172 = v171[4];
        *(_DWORD *)v170 = *(_DWORD *)v171;
        v170[4] = v172;
        v173 = v164[7];
        v174 = &v13[v173];
        v175 = &v14[v173];
        v176 = v175[16];
        *(_OWORD *)v174 = *(_OWORD *)v175;
        v174[16] = v176;
        v177 = v164[8];
        v178 = &v13[v177];
        v179 = &v14[v177];
        v180 = v179[4];
        *(_DWORD *)v178 = *(_DWORD *)v179;
        v178[4] = v180;
        v181 = v164[9];
        v182 = &v13[v181];
        v183 = &v14[v181];
        v184 = v183[16];
        *(_OWORD *)v182 = *(_OWORD *)v183;
        v182[16] = v184;
        v13[v164[10]] = v14[v164[10]];
        goto LABEL_38;
      case 0x12u:
        v185 = type metadata accessor for UUID();
        v186 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v185 - 8) + 16);
        v186(v13, v14, v185);
        v187 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v186(&v13[*(int *)(v187 + 20)], &v14[*(int *)(v187 + 20)], v185);
        v188 = v186;
        __dsta = v186;
        v189 = *(int *)(v187 + 24);
        v190 = v187;
        v191 = &v13[v189];
        v192 = &v14[v189];
        v188(&v13[v189], &v14[v189], v185);
        v193 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v194 = v193[5];
        v195 = &v191[v194];
        v196 = &v192[v194];
        v197 = v196[4];
        *(_DWORD *)v195 = *(_DWORD *)v196;
        v195[4] = v197;
        v198 = v193[6];
        v199 = &v191[v198];
        v200 = &v192[v198];
        v201 = v200[4];
        *(_DWORD *)v199 = *(_DWORD *)v200;
        v199[4] = v201;
        v191[v193[7]] = v192[v193[7]];
        v191[v193[8]] = v192[v193[8]];
        v191[v193[9]] = v192[v193[9]];
        v202 = v193[10];
        v203 = &v191[v202];
        v204 = &v192[v202];
        v205 = v204[4];
        *(_DWORD *)v203 = *(_DWORD *)v204;
        v203[4] = v205;
        v191[v193[11]] = v192[v193[11]];
        v206 = v193[12];
        v207 = &v191[v206];
        v208 = &v192[v206];
        v209 = v208[4];
        *(_DWORD *)v207 = *(_DWORD *)v208;
        v207[4] = v209;
        v210 = v193[13];
        v211 = &v191[v210];
        v212 = &v192[v210];
        v213 = v212[4];
        *(_DWORD *)v211 = *(_DWORD *)v212;
        v211[4] = v213;
        v191[v193[14]] = v192[v193[14]];
        v191[v193[15]] = v192[v193[15]];
        v214 = *(int *)(v190 + 28);
        v215 = &v13[v214];
        v216 = &v14[v214];
        __dsta(&v13[v214], v216, v185);
        v217 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v218 = v217[5];
        v219 = &v215[v218];
        v220 = &v216[v218];
        v221 = v220[4];
        *(_DWORD *)v219 = *(_DWORD *)v220;
        v219[4] = v221;
        v222 = v217[6];
        v223 = &v215[v222];
        v224 = &v216[v222];
        v225 = v224[4];
        *(_DWORD *)v223 = *(_DWORD *)v224;
        v223[4] = v225;
        v215[v217[7]] = v216[v217[7]];
        v215[v217[8]] = v216[v217[8]];
        v215[v217[9]] = v216[v217[9]];
        v226 = v217[10];
        v227 = &v215[v226];
        v228 = &v216[v226];
        v229 = v228[4];
        *(_DWORD *)v227 = *(_DWORD *)v228;
        v227[4] = v229;
        v215[v217[11]] = v216[v217[11]];
        v230 = v217[12];
        v231 = &v215[v230];
        v232 = &v216[v230];
        v233 = v232[4];
        *(_DWORD *)v231 = *(_DWORD *)v232;
        v231[4] = v233;
        v234 = v217[13];
        v235 = &v215[v234];
        v236 = &v216[v234];
        v237 = v236[4];
        *(_DWORD *)v235 = *(_DWORD *)v236;
        v235[4] = v237;
        v215[v217[14]] = v216[v217[14]];
        v215[v217[15]] = v216[v217[15]];
        goto LABEL_38;
      case 0x13u:
        v238 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v238 - 8) + 16))(v13, v14, v238);
        v239 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v240 = v239[5];
        v241 = &v13[v240];
        v242 = &v14[v240];
        v243 = v242[4];
        *(_DWORD *)v241 = *(_DWORD *)v242;
        v241[4] = v243;
        v244 = v239[6];
        v245 = &v13[v244];
        v246 = &v14[v244];
        v247 = v246[4];
        *(_DWORD *)v245 = *(_DWORD *)v246;
        v245[4] = v247;
        v13[v239[7]] = v14[v239[7]];
        v248 = v239[8];
        v249 = &v13[v248];
        v250 = &v14[v248];
        v251 = v250[16];
        *(_OWORD *)v249 = *(_OWORD *)v250;
        v249[16] = v251;
        goto LABEL_38;
      case 0x14u:
        v252 = type metadata accessor for UUID();
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v252 - 8) + 16))(v13, v14, v252);
        v253 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v13[*(int *)(v253 + 20)] = *(_DWORD *)&v14[*(int *)(v253 + 20)];
        *(_DWORD *)&v13[*(int *)(v253 + 24)] = *(_DWORD *)&v14[*(int *)(v253 + 24)];
        goto LABEL_38;
      case 0x15u:
        v254 = type metadata accessor for UUID();
        v255 = *(_QWORD *)(v254 - 8);
        v256 = *(void (**)(char *, char *, uint64_t))(v255 + 16);
        v256(v13, v14, v254);
        v257 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v272 = v256;
        v256(&v13[v257[5]], &v14[v257[5]], v254);
        v258 = v257[6];
        v259 = &v13[v258];
        v260 = &v14[v258];
        *v259 = *v260;
        v259[1] = v260[1];
        v261 = v257[7];
        v273 = v255;
        __dst = &v13[v261];
        v262 = &v14[v261];
        v263 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v255 + 48);
        swift_bridgeObjectRetain();
        if (v263(v262, 1, v254))
        {
          v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(__dst, v262, *(_QWORD *)(*(_QWORD *)(v264 - 8) + 64));
        }
        else
        {
          v272(__dst, v262, v254);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v273 + 56))(__dst, 0, 1, v254);
        }
        v265 = v257[8];
        v266 = &v13[v265];
        v267 = &v14[v265];
        *v266 = *v267;
        v266[1] = v267[1];
        swift_bridgeObjectRetain();
LABEL_38:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
        break;
    }
  }
  v268 = *(int *)(a3 + 24);
  v269 = (_QWORD *)((char *)a1 + v268);
  v270 = (_QWORD *)((char *)a2 + v268);
  *v269 = *v270;
  v269[1] = v270[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for __RKEntityInteractionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  int *started;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  int *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  int *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  int *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  int *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  int *v195;
  uint64_t v196;
  char *v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void (*v209)(char *, char *, uint64_t);
  int *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v215;
  void (*__dsta)(char *, char *, uint64_t);
  char *__dst;

  v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
    *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
    *(_QWORD *)&a1[*(int *)(v11 + 64)] = *(_QWORD *)&a2[*(int *)(v11 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
    *(_DWORD *)&a1[*(int *)(v9 + 48)] = *(_DWORD *)&a2[*(int *)(v9 + 48)];
    a1[*(int *)(v9 + 64)] = a2[*(int *)(v9 + 64)];
    swift_storeEnumTagMultiPayload();
  }
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = type metadata accessor for __RKEntityActionSpecification(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      v17 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
      v18 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
      *(_OWORD *)&v14[v18[5]] = *(_OWORD *)&v15[v18[5]];
      v14[v18[6]] = v15[v18[6]];
      v19 = v18[7];
      v20 = &v14[v19];
      v21 = &v15[v19];
      v20[8] = v21[8];
      *(_QWORD *)v20 = *(_QWORD *)v21;
      v14[v18[8]] = v15[v18[8]];
      v14[v18[9]] = v15[v18[9]];
      v14[v18[10]] = v15[v18[10]];
      swift_storeEnumTagMultiPayload();
      break;
    case 1u:
      v22 = type metadata accessor for UUID();
      v23 = a3;
      v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
      v24(v14, v15, v22);
      v25 = type metadata accessor for __RKChangeSceneActionArguments(0);
      v24(&v14[*(int *)(v25 + 20)], &v15[*(int *)(v25 + 20)], v22);
      a3 = v23;
      swift_storeEnumTagMultiPayload();
      break;
    case 2u:
      v26 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v14, v15, v26);
      v27 = type metadata accessor for __RKEntityCustomActionArguments(0);
      *(_OWORD *)&v14[*(int *)(v27 + 20)] = *(_OWORD *)&v15[*(int *)(v27 + 20)];
      *(_QWORD *)&v14[*(int *)(v27 + 24)] = *(_QWORD *)&v15[*(int *)(v27 + 24)];
      swift_storeEnumTagMultiPayload();
      break;
    case 3u:
      v28 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v14, v15, v28);
      v29 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
      v30 = v29[5];
      v31 = &v14[v30];
      v32 = &v15[v30];
      *(_DWORD *)v31 = *(_DWORD *)v32;
      v31[4] = v32[4];
      v33 = v29[6];
      v34 = &v14[v33];
      v35 = &v15[v33];
      *(_DWORD *)v34 = *(_DWORD *)v35;
      v34[4] = v35[4];
      v14[v29[7]] = v15[v29[7]];
      v14[v29[8]] = v15[v29[8]];
      swift_storeEnumTagMultiPayload();
      break;
    case 4u:
      v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v14, v15, v36);
      v37 = type metadata accessor for __RKEntityFadeActionArguments(0);
      *(_DWORD *)&v14[*(int *)(v37 + 20)] = *(_DWORD *)&v15[*(int *)(v37 + 20)];
      v38 = *(int *)(v37 + 24);
      v39 = &v14[v38];
      v40 = &v15[v38];
      v39[4] = v40[4];
      *(_DWORD *)v39 = *(_DWORD *)v40;
      swift_storeEnumTagMultiPayload();
      break;
    case 7u:
      v41 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 32))(v14, v15, v41);
      v42 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v43 = v42[5];
      v44 = &v14[v43];
      v45 = &v15[v43];
      *(_DWORD *)v44 = *(_DWORD *)v45;
      v44[4] = v45[4];
      v46 = v42[6];
      v47 = &v14[v46];
      v48 = &v15[v46];
      *(_DWORD *)v47 = *(_DWORD *)v48;
      v47[4] = v48[4];
      v14[v42[7]] = v15[v42[7]];
      v14[v42[8]] = v15[v42[8]];
      v14[v42[9]] = v15[v42[9]];
      v49 = v42[10];
      v50 = &v14[v49];
      v51 = &v15[v49];
      *(_DWORD *)v50 = *(_DWORD *)v51;
      v50[4] = v51[4];
      v14[v42[11]] = v15[v42[11]];
      v52 = v42[12];
      v53 = &v14[v52];
      v54 = &v15[v52];
      v53[4] = v54[4];
      *(_DWORD *)v53 = *(_DWORD *)v54;
      v55 = v42[13];
      v56 = &v14[v55];
      v57 = &v15[v55];
      *(_DWORD *)v56 = *(_DWORD *)v57;
      v56[4] = v57[4];
      v14[v42[14]] = v15[v42[14]];
      v14[v42[15]] = v15[v42[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 8u:
      v58 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v14, v15, v58);
      v59 = type metadata accessor for __RKEntityForceActionArguments(0);
      v60 = *(int *)(v59 + 20);
      v61 = &v14[v60];
      v62 = &v15[v60];
      *(_OWORD *)v61 = *(_OWORD *)v62;
      v61[16] = v62[16];
      v63 = *(int *)(v59 + 24);
      v64 = &v14[v63];
      v65 = &v15[v63];
      v64[16] = v65[16];
      *(_OWORD *)v64 = *(_OWORD *)v65;
      swift_storeEnumTagMultiPayload();
      break;
    case 9u:
      v66 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(v14, v15, v66);
      v67 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v68 = v67[5];
      v69 = &v14[v68];
      v70 = &v15[v68];
      *(_DWORD *)v69 = *(_DWORD *)v70;
      v69[4] = v70[4];
      v71 = v67[6];
      v72 = &v14[v71];
      v73 = &v15[v71];
      *(_DWORD *)v72 = *(_DWORD *)v73;
      v72[4] = v73[4];
      v14[v67[7]] = v15[v67[7]];
      v14[v67[8]] = v15[v67[8]];
      v14[v67[9]] = v15[v67[9]];
      v74 = v67[10];
      v75 = &v14[v74];
      v76 = &v15[v74];
      *(_DWORD *)v75 = *(_DWORD *)v76;
      v75[4] = v76[4];
      v14[v67[11]] = v15[v67[11]];
      v77 = v67[12];
      v78 = &v14[v77];
      v79 = &v15[v77];
      v78[4] = v79[4];
      *(_DWORD *)v78 = *(_DWORD *)v79;
      v80 = v67[13];
      v81 = &v14[v80];
      v82 = &v15[v80];
      *(_DWORD *)v81 = *(_DWORD *)v82;
      v81[4] = v82[4];
      v14[v67[14]] = v15[v67[14]];
      v14[v67[15]] = v15[v67[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0xAu:
      v83 = type metadata accessor for UUID();
      v84 = *(_QWORD *)(v83 - 8);
      v85 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      v85(v14, v15, v83);
      started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
      *(_QWORD *)&v14[started[5]] = *(_QWORD *)&v15[started[5]];
      v14[started[6]] = v15[started[6]];
      *(_QWORD *)&v14[started[7]] = *(_QWORD *)&v15[started[7]];
      *(_QWORD *)&v14[started[8]] = *(_QWORD *)&v15[started[8]];
      v14[started[9]] = v15[started[9]];
      v14[started[10]] = v15[started[10]];
      *(_DWORD *)&v14[started[11]] = *(_DWORD *)&v15[started[11]];
      v14[started[12]] = v15[started[12]];
      v87 = started[13];
      v88 = &v14[v87];
      v89 = &v15[v87];
      *(_QWORD *)v88 = *(_QWORD *)v89;
      v88[8] = v89[8];
      v90 = started[14];
      v91 = &v14[v90];
      v92 = &v15[v90];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v92, 1, v83))
        goto LABEL_30;
      goto LABEL_19;
    case 0xBu:
    case 0xCu:
    case 0xDu:
      v94 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v94 - 8) + 32))(v14, v15, v94);
      swift_storeEnumTagMultiPayload();
      break;
    case 0xEu:
      v83 = type metadata accessor for UUID();
      v84 = *(_QWORD *)(v83 - 8);
      v85 = *(void (**)(char *, char *, uint64_t))(v84 + 32);
      v85(v14, v15, v83);
      v95 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
      v96 = v95[5];
      v97 = &v14[v96];
      v98 = &v15[v96];
      *(_OWORD *)v97 = *(_OWORD *)v98;
      v97[16] = v98[16];
      v99 = v95[6];
      v100 = &v14[v99];
      v101 = &v15[v99];
      *(_OWORD *)v100 = *(_OWORD *)v101;
      v100[16] = v101[16];
      v102 = v95[7];
      v103 = &v14[v102];
      v104 = &v15[v102];
      v103[4] = v104[4];
      *(_DWORD *)v103 = *(_DWORD *)v104;
      v105 = v95[8];
      v106 = &v14[v105];
      v107 = &v15[v105];
      v106[4] = v107[4];
      *(_DWORD *)v106 = *(_DWORD *)v107;
      v14[v95[9]] = v15[v95[9]];
      v14[v95[10]] = v15[v95[10]];
      v14[v95[11]] = v15[v95[11]];
      v14[v95[12]] = v15[v95[12]];
      v108 = v95[13];
      v109 = &v14[v108];
      v110 = &v15[v108];
      *(_DWORD *)v109 = *(_DWORD *)v110;
      v109[4] = v110[4];
      v111 = v95[14];
      v112 = &v14[v111];
      v113 = &v15[v111];
      *(_DWORD *)v112 = *(_DWORD *)v113;
      v112[4] = v113[4];
      v114 = v95[15];
      v91 = &v14[v114];
      v92 = &v15[v114];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v92, 1, v83))
      {
LABEL_19:
        v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
LABEL_30:
        v85(v91, v92, v83);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v91, 0, 1, v83);
      }
      swift_storeEnumTagMultiPayload();
      break;
    case 0x10u:
      v115 = type metadata accessor for UUID();
      v116 = a3;
      v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 32);
      v117(v14, v15, v115);
      v118 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
      v117(&v14[v118[5]], &v15[v118[5]], v115);
      a3 = v116;
      v119 = v118[6];
      v120 = &v14[v119];
      v121 = &v15[v119];
      *(_DWORD *)v120 = *(_DWORD *)v121;
      v120[4] = v121[4];
      v122 = v118[7];
      v123 = &v14[v122];
      v124 = &v15[v122];
      *(_DWORD *)v123 = *(_DWORD *)v124;
      v123[4] = v124[4];
      v125 = v118[8];
      v126 = &v14[v125];
      v127 = &v15[v125];
      *(_OWORD *)v126 = *(_OWORD *)v127;
      v126[16] = v127[16];
      v14[v118[9]] = v15[v118[9]];
      v14[v118[10]] = v15[v118[10]];
      v14[v118[11]] = v15[v118[11]];
      v128 = v118[12];
      v129 = &v14[v128];
      v130 = &v15[v128];
      v129[4] = v130[4];
      *(_DWORD *)v129 = *(_DWORD *)v130;
      v131 = v118[13];
      v132 = &v14[v131];
      v133 = &v15[v131];
      *(_DWORD *)v132 = *(_DWORD *)v133;
      v132[4] = v133[4];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x11u:
      v134 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v134 - 8) + 32))(v14, v15, v134);
      v135 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
      v136 = v135[5];
      v137 = &v14[v136];
      v138 = &v15[v136];
      *(_DWORD *)v137 = *(_DWORD *)v138;
      v137[4] = v138[4];
      v139 = v135[6];
      v140 = &v14[v139];
      v141 = &v15[v139];
      *(_DWORD *)v140 = *(_DWORD *)v141;
      v140[4] = v141[4];
      v142 = v135[7];
      v143 = &v14[v142];
      v144 = &v15[v142];
      v143[16] = v144[16];
      *(_OWORD *)v143 = *(_OWORD *)v144;
      v145 = v135[8];
      v146 = &v14[v145];
      v147 = &v15[v145];
      v146[4] = v147[4];
      *(_DWORD *)v146 = *(_DWORD *)v147;
      v148 = v135[9];
      v149 = &v14[v148];
      v150 = &v15[v148];
      v149[16] = v150[16];
      *(_OWORD *)v149 = *(_OWORD *)v150;
      v14[v135[10]] = v15[v135[10]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x12u:
      v151 = type metadata accessor for UUID();
      v152 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v151 - 8) + 32);
      v152(v14, v15, v151);
      v153 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
      v152(&v14[*(int *)(v153 + 20)], &v15[*(int *)(v153 + 20)], v151);
      v154 = v152;
      __dsta = v152;
      v155 = *(int *)(v153 + 24);
      v156 = v153;
      v157 = &v14[v155];
      v158 = &v15[v155];
      v154(&v14[v155], &v15[v155], v151);
      v159 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
      v160 = v159[5];
      v161 = &v157[v160];
      v162 = &v158[v160];
      *(_DWORD *)v161 = *(_DWORD *)v162;
      v161[4] = v162[4];
      v163 = v159[6];
      v164 = &v157[v163];
      v165 = &v158[v163];
      *(_DWORD *)v164 = *(_DWORD *)v165;
      v164[4] = v165[4];
      v157[v159[7]] = v158[v159[7]];
      v157[v159[8]] = v158[v159[8]];
      v157[v159[9]] = v158[v159[9]];
      v166 = v159[10];
      v167 = &v157[v166];
      v168 = &v158[v166];
      *(_DWORD *)v167 = *(_DWORD *)v168;
      v167[4] = v168[4];
      v157[v159[11]] = v158[v159[11]];
      v169 = v159[12];
      v170 = &v157[v169];
      v171 = &v158[v169];
      v170[4] = v171[4];
      *(_DWORD *)v170 = *(_DWORD *)v171;
      v172 = v159[13];
      v173 = &v157[v172];
      v174 = &v158[v172];
      *(_DWORD *)v173 = *(_DWORD *)v174;
      v173[4] = v174[4];
      v157[v159[14]] = v158[v159[14]];
      v157[v159[15]] = v158[v159[15]];
      v175 = *(int *)(v156 + 28);
      v176 = &v14[v175];
      v177 = &v15[v175];
      __dsta(&v14[v175], v177, v151);
      v178 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
      v179 = v178[5];
      v180 = &v176[v179];
      v181 = &v177[v179];
      *(_DWORD *)v180 = *(_DWORD *)v181;
      v180[4] = v181[4];
      v182 = v178[6];
      v183 = &v176[v182];
      v184 = &v177[v182];
      *(_DWORD *)v183 = *(_DWORD *)v184;
      v183[4] = v184[4];
      v176[v178[7]] = v177[v178[7]];
      v176[v178[8]] = v177[v178[8]];
      v176[v178[9]] = v177[v178[9]];
      v185 = v178[10];
      v186 = &v176[v185];
      v187 = &v177[v185];
      *(_DWORD *)v186 = *(_DWORD *)v187;
      v186[4] = v187[4];
      v176[v178[11]] = v177[v178[11]];
      v188 = v178[12];
      v189 = &v176[v188];
      v190 = &v177[v188];
      v189[4] = v190[4];
      *(_DWORD *)v189 = *(_DWORD *)v190;
      v191 = v178[13];
      v192 = &v176[v191];
      v193 = &v177[v191];
      *(_DWORD *)v192 = *(_DWORD *)v193;
      v192[4] = v193[4];
      v176[v178[14]] = v177[v178[14]];
      v176[v178[15]] = v177[v178[15]];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x13u:
      v194 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v194 - 8) + 32))(v14, v15, v194);
      v195 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
      v196 = v195[5];
      v197 = &v14[v196];
      v198 = &v15[v196];
      *(_DWORD *)v197 = *(_DWORD *)v198;
      v197[4] = v198[4];
      v199 = v195[6];
      v200 = &v14[v199];
      v201 = &v15[v199];
      *(_DWORD *)v200 = *(_DWORD *)v201;
      v200[4] = v201[4];
      v14[v195[7]] = v15[v195[7]];
      v202 = v195[8];
      v203 = &v14[v202];
      v204 = &v15[v202];
      v203[16] = v204[16];
      *(_OWORD *)v203 = *(_OWORD *)v204;
      swift_storeEnumTagMultiPayload();
      break;
    case 0x14u:
      v205 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v205 - 8) + 32))(v14, v15, v205);
      v206 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
      *(_DWORD *)&v14[*(int *)(v206 + 20)] = *(_DWORD *)&v15[*(int *)(v206 + 20)];
      *(_DWORD *)&v14[*(int *)(v206 + 24)] = *(_DWORD *)&v15[*(int *)(v206 + 24)];
      swift_storeEnumTagMultiPayload();
      break;
    case 0x15u:
      v215 = a3;
      v207 = type metadata accessor for UUID();
      v208 = *(_QWORD *)(v207 - 8);
      v209 = *(void (**)(char *, char *, uint64_t))(v208 + 32);
      v209(v14, v15, v207);
      v210 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
      v209(&v14[v210[5]], &v15[v210[5]], v207);
      *(_OWORD *)&v14[v210[6]] = *(_OWORD *)&v15[v210[6]];
      v211 = v210[7];
      __dst = &v14[v211];
      v212 = &v15[v211];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48))(&v15[v211], 1, v207))
      {
        v213 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
        memcpy(__dst, v212, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
      }
      else
      {
        v209(__dst, v212, v207);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(__dst, 0, 1, v207);
      }
      *(_OWORD *)&v14[v210[8]] = *(_OWORD *)&v15[v210[8]];
      swift_storeEnumTagMultiPayload();
      a3 = v215;
      break;
    default:
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      break;
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for __RKEntityInteractionSpecification(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  int *started;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  int *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  int *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  int *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void (*v207)(char *, char *, uint64_t);
  int *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  void (*v218)(char *, char *, uint64_t);
  void (*__dsta)(char *, char *, uint64_t);
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)a1, type metadata accessor for __RKEntityTriggerSpecification);
    v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, collidingEntities: [UUID], tags: [String]));
      *(_QWORD *)&a1[*(int *)(v11 + 48)] = *(_QWORD *)&a2[*(int *)(v11 + 48)];
      *(_QWORD *)&a1[*(int *)(v11 + 64)] = *(_QWORD *)&a2[*(int *)(v11 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v12 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (target: UUID, distance: Float, type: __RKEntityProximityTrigger.ExitType));
      *(_DWORD *)&a1[*(int *)(v9 + 48)] = *(_DWORD *)&a2[*(int *)(v9 + 48)];
      a1[*(int *)(v9 + 64)] = a2[*(int *)(v9 + 64)];
      swift_storeEnumTagMultiPayload();
    }
    v13 = *(int *)(a3 + 20);
    v14 = &a1[v13];
    v15 = &a2[v13];
    outlined destroy of __RKEntityActionSpecification((uint64_t)&a1[v13], type metadata accessor for __RKEntityActionSpecification);
    v16 = type metadata accessor for __RKEntityActionSpecification(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        v17 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v14, v15, v17);
        v18 = (int *)type metadata accessor for __RKEntityAudioActionArguments(0);
        *(_OWORD *)&v14[v18[5]] = *(_OWORD *)&v15[v18[5]];
        v14[v18[6]] = v15[v18[6]];
        v19 = v18[7];
        v20 = &v14[v19];
        v21 = &v15[v19];
        v20[8] = v21[8];
        *(_QWORD *)v20 = *(_QWORD *)v21;
        v14[v18[8]] = v15[v18[8]];
        v14[v18[9]] = v15[v18[9]];
        v14[v18[10]] = v15[v18[10]];
        goto LABEL_35;
      case 1u:
        v22 = type metadata accessor for UUID();
        v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
        v23(v14, v15, v22);
        v24 = type metadata accessor for __RKChangeSceneActionArguments(0);
        v23(&v14[*(int *)(v24 + 20)], &v15[*(int *)(v24 + 20)], v22);
        goto LABEL_35;
      case 2u:
        v25 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v14, v15, v25);
        v26 = type metadata accessor for __RKEntityCustomActionArguments(0);
        *(_OWORD *)&v14[*(int *)(v26 + 20)] = *(_OWORD *)&v15[*(int *)(v26 + 20)];
        *(_QWORD *)&v14[*(int *)(v26 + 24)] = *(_QWORD *)&v15[*(int *)(v26 + 24)];
        goto LABEL_35;
      case 3u:
        v27 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v14, v15, v27);
        v28 = (int *)type metadata accessor for __RKEntityEmphasisActionArguments(0);
        v29 = v28[5];
        v30 = &v14[v29];
        v31 = &v15[v29];
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        v32 = v28[6];
        v33 = &v14[v32];
        v34 = &v15[v32];
        *(_DWORD *)v33 = *(_DWORD *)v34;
        v33[4] = v34[4];
        v14[v28[7]] = v15[v28[7]];
        v14[v28[8]] = v15[v28[8]];
        goto LABEL_35;
      case 4u:
        v35 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 32))(v14, v15, v35);
        v36 = type metadata accessor for __RKEntityFadeActionArguments(0);
        *(_DWORD *)&v14[*(int *)(v36 + 20)] = *(_DWORD *)&v15[*(int *)(v36 + 20)];
        v37 = *(int *)(v36 + 24);
        v38 = &v14[v37];
        v39 = &v15[v37];
        v38[4] = v39[4];
        *(_DWORD *)v38 = *(_DWORD *)v39;
        goto LABEL_35;
      case 7u:
        v40 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v14, v15, v40);
        v41 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v42 = v41[5];
        v43 = &v14[v42];
        v44 = &v15[v42];
        *(_DWORD *)v43 = *(_DWORD *)v44;
        v43[4] = v44[4];
        v45 = v41[6];
        v46 = &v14[v45];
        v47 = &v15[v45];
        *(_DWORD *)v46 = *(_DWORD *)v47;
        v46[4] = v47[4];
        v14[v41[7]] = v15[v41[7]];
        v14[v41[8]] = v15[v41[8]];
        v14[v41[9]] = v15[v41[9]];
        v48 = v41[10];
        v49 = &v14[v48];
        v50 = &v15[v48];
        *(_DWORD *)v49 = *(_DWORD *)v50;
        v49[4] = v50[4];
        v14[v41[11]] = v15[v41[11]];
        v51 = v41[12];
        v52 = &v14[v51];
        v53 = &v15[v51];
        v52[4] = v53[4];
        *(_DWORD *)v52 = *(_DWORD *)v53;
        v54 = v41[13];
        v55 = &v14[v54];
        v56 = &v15[v54];
        *(_DWORD *)v55 = *(_DWORD *)v56;
        v55[4] = v56[4];
        v14[v41[14]] = v15[v41[14]];
        v14[v41[15]] = v15[v41[15]];
        goto LABEL_35;
      case 8u:
        v57 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 32))(v14, v15, v57);
        v58 = type metadata accessor for __RKEntityForceActionArguments(0);
        v59 = *(int *)(v58 + 20);
        v60 = &v14[v59];
        v61 = &v15[v59];
        *(_OWORD *)v60 = *(_OWORD *)v61;
        v60[16] = v61[16];
        v62 = *(int *)(v58 + 24);
        v63 = &v14[v62];
        v64 = &v15[v62];
        v63[16] = v64[16];
        *(_OWORD *)v63 = *(_OWORD *)v64;
        goto LABEL_35;
      case 9u:
        v65 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v65 - 8) + 32))(v14, v15, v65);
        v66 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v67 = v66[5];
        v68 = &v14[v67];
        v69 = &v15[v67];
        *(_DWORD *)v68 = *(_DWORD *)v69;
        v68[4] = v69[4];
        v70 = v66[6];
        v71 = &v14[v70];
        v72 = &v15[v70];
        *(_DWORD *)v71 = *(_DWORD *)v72;
        v71[4] = v72[4];
        v14[v66[7]] = v15[v66[7]];
        v14[v66[8]] = v15[v66[8]];
        v14[v66[9]] = v15[v66[9]];
        v73 = v66[10];
        v74 = &v14[v73];
        v75 = &v15[v73];
        *(_DWORD *)v74 = *(_DWORD *)v75;
        v74[4] = v75[4];
        v14[v66[11]] = v15[v66[11]];
        v76 = v66[12];
        v77 = &v14[v76];
        v78 = &v15[v76];
        v77[4] = v78[4];
        *(_DWORD *)v77 = *(_DWORD *)v78;
        v79 = v66[13];
        v80 = &v14[v79];
        v81 = &v15[v79];
        *(_DWORD *)v80 = *(_DWORD *)v81;
        v80[4] = v81[4];
        v14[v66[14]] = v15[v66[14]];
        v14[v66[15]] = v15[v66[15]];
        goto LABEL_35;
      case 0xAu:
        v82 = type metadata accessor for UUID();
        v83 = *(_QWORD *)(v82 - 8);
        v84 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        v84(v14, v15, v82);
        started = (int *)type metadata accessor for __RKEntityStartAnimateActionArguments(0);
        *(_QWORD *)&v14[started[5]] = *(_QWORD *)&v15[started[5]];
        v14[started[6]] = v15[started[6]];
        *(_QWORD *)&v14[started[7]] = *(_QWORD *)&v15[started[7]];
        *(_QWORD *)&v14[started[8]] = *(_QWORD *)&v15[started[8]];
        v14[started[9]] = v15[started[9]];
        v14[started[10]] = v15[started[10]];
        *(_DWORD *)&v14[started[11]] = *(_DWORD *)&v15[started[11]];
        v14[started[12]] = v15[started[12]];
        v86 = started[13];
        v87 = &v14[v86];
        v88 = &v15[v86];
        *(_QWORD *)v87 = *(_QWORD *)v88;
        v87[8] = v88[8];
        v89 = started[14];
        v90 = &v14[v89];
        v91 = &v15[v89];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v91, 1, v82))
          goto LABEL_20;
        goto LABEL_31;
      case 0xBu:
      case 0xCu:
      case 0xDu:
        v93 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v93 - 8) + 32))(v14, v15, v93);
        goto LABEL_35;
      case 0xEu:
        v82 = type metadata accessor for UUID();
        v83 = *(_QWORD *)(v82 - 8);
        v84 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
        v84(v14, v15, v82);
        v94 = (int *)type metadata accessor for __RKEntityTransformActionArguments(0);
        v95 = v94[5];
        v96 = &v14[v95];
        v97 = &v15[v95];
        *(_OWORD *)v96 = *(_OWORD *)v97;
        v96[16] = v97[16];
        v98 = v94[6];
        v99 = &v14[v98];
        v100 = &v15[v98];
        *(_OWORD *)v99 = *(_OWORD *)v100;
        v99[16] = v100[16];
        v101 = v94[7];
        v102 = &v14[v101];
        v103 = &v15[v101];
        v102[4] = v103[4];
        *(_DWORD *)v102 = *(_DWORD *)v103;
        v104 = v94[8];
        v105 = &v14[v104];
        v106 = &v15[v104];
        v105[4] = v106[4];
        *(_DWORD *)v105 = *(_DWORD *)v106;
        v14[v94[9]] = v15[v94[9]];
        v14[v94[10]] = v15[v94[10]];
        v14[v94[11]] = v15[v94[11]];
        v14[v94[12]] = v15[v94[12]];
        v107 = v94[13];
        v108 = &v14[v107];
        v109 = &v15[v107];
        *(_DWORD *)v108 = *(_DWORD *)v109;
        v108[4] = v109[4];
        v110 = v94[14];
        v111 = &v14[v110];
        v112 = &v15[v110];
        *(_DWORD *)v111 = *(_DWORD *)v112;
        v111[4] = v112[4];
        v113 = v94[15];
        v90 = &v14[v113];
        v91 = &v15[v113];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v91, 1, v82))
        {
LABEL_20:
          v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
LABEL_31:
          v84(v90, v91, v82);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v90, 0, 1, v82);
        }
        goto LABEL_35;
      case 0x10u:
        v114 = type metadata accessor for UUID();
        v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32);
        v115(v14, v15, v114);
        v116 = (int *)type metadata accessor for __RKEntityOrbitEntityActionArguments(0);
        v115(&v14[v116[5]], &v15[v116[5]], v114);
        v117 = v116[6];
        v118 = &v14[v117];
        v119 = &v15[v117];
        *(_DWORD *)v118 = *(_DWORD *)v119;
        v118[4] = v119[4];
        v120 = v116[7];
        v121 = &v14[v120];
        v122 = &v15[v120];
        *(_DWORD *)v121 = *(_DWORD *)v122;
        v121[4] = v122[4];
        v123 = v116[8];
        v124 = &v14[v123];
        v125 = &v15[v123];
        *(_OWORD *)v124 = *(_OWORD *)v125;
        v124[16] = v125[16];
        v14[v116[9]] = v15[v116[9]];
        v14[v116[10]] = v15[v116[10]];
        v14[v116[11]] = v15[v116[11]];
        v126 = v116[12];
        v127 = &v14[v126];
        v128 = &v15[v126];
        v127[4] = v128[4];
        *(_DWORD *)v127 = *(_DWORD *)v128;
        v129 = v116[13];
        v130 = &v14[v129];
        v131 = &v15[v129];
        *(_DWORD *)v130 = *(_DWORD *)v131;
        v130[4] = v131[4];
        goto LABEL_35;
      case 0x11u:
        v132 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v132 - 8) + 32))(v14, v15, v132);
        v133 = (int *)type metadata accessor for __RKEntityLookAtCameraActionArguments(0);
        v134 = v133[5];
        v135 = &v14[v134];
        v136 = &v15[v134];
        *(_DWORD *)v135 = *(_DWORD *)v136;
        v135[4] = v136[4];
        v137 = v133[6];
        v138 = &v14[v137];
        v139 = &v15[v137];
        *(_DWORD *)v138 = *(_DWORD *)v139;
        v138[4] = v139[4];
        v140 = v133[7];
        v141 = &v14[v140];
        v142 = &v15[v140];
        v141[16] = v142[16];
        *(_OWORD *)v141 = *(_OWORD *)v142;
        v143 = v133[8];
        v144 = &v14[v143];
        v145 = &v15[v143];
        v144[4] = v145[4];
        *(_DWORD *)v144 = *(_DWORD *)v145;
        v146 = v133[9];
        v147 = &v14[v146];
        v148 = &v15[v146];
        v147[16] = v148[16];
        *(_OWORD *)v147 = *(_OWORD *)v148;
        v14[v133[10]] = v15[v133[10]];
        goto LABEL_35;
      case 0x12u:
        v149 = type metadata accessor for UUID();
        v150 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 32);
        v150(v14, v15, v149);
        v151 = type metadata accessor for __RKEntitySwapEntityActionArguments(0);
        v150(&v14[*(int *)(v151 + 20)], &v15[*(int *)(v151 + 20)], v149);
        v152 = v150;
        __dsta = v150;
        v153 = *(int *)(v151 + 24);
        v154 = v151;
        v155 = &v14[v153];
        v156 = &v15[v153];
        v152(&v14[v153], &v15[v153], v149);
        v157 = (int *)type metadata accessor for __RKEntityHideActionArguments(0);
        v158 = v157[5];
        v159 = &v155[v158];
        v160 = &v156[v158];
        *(_DWORD *)v159 = *(_DWORD *)v160;
        v159[4] = v160[4];
        v161 = v157[6];
        v162 = &v155[v161];
        v163 = &v156[v161];
        *(_DWORD *)v162 = *(_DWORD *)v163;
        v162[4] = v163[4];
        v155[v157[7]] = v156[v157[7]];
        v155[v157[8]] = v156[v157[8]];
        v155[v157[9]] = v156[v157[9]];
        v164 = v157[10];
        v165 = &v155[v164];
        v166 = &v156[v164];
        *(_DWORD *)v165 = *(_DWORD *)v166;
        v165[4] = v166[4];
        v155[v157[11]] = v156[v157[11]];
        v167 = v157[12];
        v168 = &v155[v167];
        v169 = &v156[v167];
        v168[4] = v169[4];
        *(_DWORD *)v168 = *(_DWORD *)v169;
        v170 = v157[13];
        v171 = &v155[v170];
        v172 = &v156[v170];
        *(_DWORD *)v171 = *(_DWORD *)v172;
        v171[4] = v172[4];
        v155[v157[14]] = v156[v157[14]];
        v155[v157[15]] = v156[v157[15]];
        v173 = *(int *)(v154 + 28);
        v174 = &v14[v173];
        v175 = &v15[v173];
        __dsta(&v14[v173], v175, v149);
        v176 = (int *)type metadata accessor for __RKEntityShowActionArguments(0);
        v177 = v176[5];
        v178 = &v174[v177];
        v179 = &v175[v177];
        *(_DWORD *)v178 = *(_DWORD *)v179;
        v178[4] = v179[4];
        v180 = v176[6];
        v181 = &v174[v180];
        v182 = &v175[v180];
        *(_DWORD *)v181 = *(_DWORD *)v182;
        v181[4] = v182[4];
        v174[v176[7]] = v175[v176[7]];
        v174[v176[8]] = v175[v176[8]];
        v174[v176[9]] = v175[v176[9]];
        v183 = v176[10];
        v184 = &v174[v183];
        v185 = &v175[v183];
        *(_DWORD *)v184 = *(_DWORD *)v185;
        v184[4] = v185[4];
        v174[v176[11]] = v175[v176[11]];
        v186 = v176[12];
        v187 = &v174[v186];
        v188 = &v175[v186];
        v187[4] = v188[4];
        *(_DWORD *)v187 = *(_DWORD *)v188;
        v189 = v176[13];
        v190 = &v174[v189];
        v191 = &v175[v189];
        *(_DWORD *)v190 = *(_DWORD *)v191;
        v190[4] = v191[4];
        v174[v176[14]] = v175[v176[14]];
        v174[v176[15]] = v175[v176[15]];
        goto LABEL_35;
      case 0x13u:
        v192 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32))(v14, v15, v192);
        v193 = (int *)type metadata accessor for __RKEntitySpinActionArguments(0);
        v194 = v193[5];
        v195 = &v14[v194];
        v196 = &v15[v194];
        *(_DWORD *)v195 = *(_DWORD *)v196;
        v195[4] = v196[4];
        v197 = v193[6];
        v198 = &v14[v197];
        v199 = &v15[v197];
        *(_DWORD *)v198 = *(_DWORD *)v199;
        v198[4] = v199[4];
        v14[v193[7]] = v15[v193[7]];
        v200 = v193[8];
        v201 = &v14[v200];
        v202 = &v15[v200];
        v201[16] = v202[16];
        *(_OWORD *)v201 = *(_OWORD *)v202;
        goto LABEL_35;
      case 0x14u:
        v203 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v203 - 8) + 32))(v14, v15, v203);
        v204 = type metadata accessor for __RKEntitySetOpacityActionArguments(0);
        *(_DWORD *)&v14[*(int *)(v204 + 20)] = *(_DWORD *)&v15[*(int *)(v204 + 20)];
        *(_DWORD *)&v14[*(int *)(v204 + 24)] = *(_DWORD *)&v15[*(int *)(v204 + 24)];
        goto LABEL_35;
      case 0x15u:
        v205 = type metadata accessor for UUID();
        v206 = *(_QWORD *)(v205 - 8);
        v207 = *(void (**)(char *, char *, uint64_t))(v206 + 32);
        v207(v14, v15, v205);
        v208 = (int *)type metadata accessor for __RKEntityPlayTimelineActionArguments(0);
        v218 = v207;
        v207(&v14[v208[5]], &v15[v208[5]], v205);
        *(_OWORD *)&v14[v208[6]] = *(_OWORD *)&v15[v208[6]];
        v209 = v208[7];
        __dst = &v14[v209];
        v210 = &v15[v209];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v206 + 48))(&v15[v209], 1, v205))
        {
          v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
          memcpy(__dst, v210, *(_QWORD *)(*(_QWORD *)(v211 - 8) + 64));
        }
        else
        {
          v218(__dst, v210, v205);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v206 + 56))(__dst, 0, 1, v205);
        }
        *(_OWORD *)&v14[v208[8]] = *(_OWORD *)&v15[v208[8]];
LABEL_35:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
        break;
    }
  }
  v212 = *(int *)(a3 + 24);
  v213 = &a1[v212];
  v214 = &a2[v212];
  v216 = *(_QWORD *)v214;
  v215 = *((_QWORD *)v214 + 1);
  *(_QWORD *)v213 = v216;
  *((_QWORD *)v213 + 1) = v215;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityInteractionSpecification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA36DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  int v15;

  v6 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for __RKEntityActionSpecification(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  v15 = v14 - 1;
  if (v15 < 0)
    v15 = -1;
  return (v15 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionSpecification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA36EA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for __RKEntityActionSpecification(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t type metadata completion function for __RKEntityInteractionSpecification()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for __RKEntityTriggerSpecification(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for __RKEntityActionSpecification(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *type metadata accessor for __RKEntityInteractionSpecification.CodingKeys()
{
  return &unk_24DF9F538;
}

void *type metadata accessor for __RKEntityPlayTimelineActionArguments.CodingKeys()
{
  return &unk_24DF9F5C8;
}

void *type metadata accessor for __RKEntitySetOpacityActionArguments.CodingKeys()
{
  return &unk_24DF9F658;
}

void *type metadata accessor for __RKEntityLookAtCameraActionArguments.CodingKeys()
{
  return &unk_24DF9F6E8;
}

uint64_t getEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityOrbitEntityActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21BA37110 + 4 * byte_21BE52D0B[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21BA37144 + 4 * byte_21BE52D06[v4]))();
}

uint64_t sub_21BA37144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA3714C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA37154);
  return result;
}

uint64_t sub_21BA37160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37168);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21BA3716C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityOrbitEntityActionArguments.CodingKeys()
{
  return &unk_24DF9F778;
}

void *type metadata accessor for __RKEntitySpinActionArguments.CodingKeys()
{
  return &unk_24DF9F808;
}

uint64_t getEnumTagSinglePayload for __RKEntitySwapEntityActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntitySwapEntityActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BA3727C + 4 * byte_21BE52D15[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BA372B0 + 4 * byte_21BE52D10[v4]))();
}

uint64_t sub_21BA372B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA372B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA372C0);
  return result;
}

uint64_t sub_21BA372CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA372D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BA372D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA372E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntitySwapEntityActionArguments.CodingKeys()
{
  return &unk_24DF9F898;
}

void *type metadata accessor for __RKEntityForceActionArguments.CodingKeys()
{
  return &unk_24DF9F928;
}

void *type metadata accessor for __RKEntityTransformActionArguments.CodingKeys()
{
  return &unk_24DF9F9B8;
}

uint64_t getEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityLookAtCameraActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21BA37400 + 4 * byte_21BE52D1F[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21BA37434 + 4 * byte_21BE52D1A[v4]))();
}

uint64_t sub_21BA37434(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA3743C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA37444);
  return result;
}

uint64_t sub_21BA37450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37458);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21BA3745C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37464(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityAudioActionArguments.CodingKeys()
{
  return &unk_24DF9FA48;
}

void *type metadata accessor for __RKEntityEmphasisActionArguments.CodingKeys()
{
  return &unk_24DF9FAD8;
}

void *type metadata accessor for __RKEntityHideActionArguments.CodingKeys()
{
  return &unk_24DF9FB68;
}

uint64_t getEnumTagSinglePayload for __RKEntityTransformActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityTransformActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21BA3757C + 4 * byte_21BE52D29[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21BA375B0 + 4 * byte_21BE52D24[v4]))();
}

uint64_t sub_21BA375B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA375B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA375C0);
  return result;
}

uint64_t sub_21BA375CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA375D4);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21BA375D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA375E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityShowActionArguments.CodingKeys()
{
  return &unk_24DF9FBF8;
}

void *type metadata accessor for __RKEntityToggleVisibilityActionArguments.CodingKeys()
{
  return &unk_24DF9FC88;
}

void *type metadata accessor for __RKEntityStopAnimateActionArguments.CodingKeys()
{
  return &unk_24DF9FD18;
}

uint64_t getEnumTagSinglePayload for __RKEntityStartAnimateActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityStartAnimateActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_21BA376FC + 4 * byte_21BE52D33[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_21BA37730 + 4 * byte_21BE52D2E[v4]))();
}

uint64_t sub_21BA37730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA37740);
  return result;
}

uint64_t sub_21BA3774C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37754);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_21BA37758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityStartAnimateActionArguments.CodingKeys()
{
  return &unk_24DF9FDA8;
}

void *type metadata accessor for __RKEntityToggleAnimateActionArguments.CodingKeys()
{
  return &unk_24DF9FE38;
}

void *type metadata accessor for __RKEntityFadeActionArguments.CodingKeys()
{
  return &unk_24DF9FEC8;
}

void *type metadata accessor for __RKFadeSceneActionArguments.CodingKeys()
{
  return &unk_24DF9FF58;
}

void *type metadata accessor for __RKChangeSceneActionArguments.CodingKeys()
{
  return &unk_24DF9FFE8;
}

void *type metadata accessor for __RKEntityCustomActionArguments.CodingKeys()
{
  return &unk_24DFA0078;
}

void *type metadata accessor for __RKWaitActionArguments.CodingKeys()
{
  return &unk_24DFA0108;
}

uint64_t getEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityPlayTimelineActionArguments.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BA378B8 + 4 * byte_21BE52D3D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BA378EC + 4 * byte_21BE52D38[v4]))();
}

uint64_t sub_21BA378EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA378F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA378FCLL);
  return result;
}

uint64_t sub_21BA37908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37910);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BA37914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA3791C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityActionGroupArguments.CodingKeys()
{
  return &unk_24DFA0198;
}

void *type metadata accessor for __RKEntityActionSpecification.ActionError()
{
  return &unk_24DFA0228;
}

void *type metadata accessor for __RKEntityActionSpecification.CodingKeys()
{
  return &unk_24DFA02B8;
}

void *type metadata accessor for __RKEntityTriggerSpecification.TriggerError()
{
  return &unk_24DFA0348;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CodingKeys()
{
  return &unk_24DFA03D8;
}

void *type metadata accessor for __RKEntityTriggerSpecification.ProximityCodingKeys()
{
  return &unk_24DFA0468;
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionSpecification.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BA379E0 + 4 * byte_21BE52D47[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BA37A14 + 4 * byte_21BE52D42[v4]))();
}

uint64_t sub_21BA37A14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37A1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA37A24);
  return result;
}

uint64_t sub_21BA37A30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37A38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BA37A3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37A44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CollisionCodingKeys()
{
  return &unk_24DFA04F8;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CustomCodingKeys()
{
  return &unk_24DFA0588;
}

uint64_t storeEnumTagSinglePayload for __RKEntityGroupActionOrder(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA37ABC + 4 * byte_21BE52D51[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA37AF0 + 4 * byte_21BE52D4C[v4]))();
}

uint64_t sub_21BA37AF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37AF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA37B00);
  return result;
}

uint64_t sub_21BA37B0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA37B14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA37B18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA37B20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.CustomWithArgumentsCodingKeys()
{
  return &unk_24DFA0618;
}

void *type metadata accessor for __RKEntityTriggerSpecification.TapTargetCodingKeys()
{
  return &unk_24DFA06A8;
}

uint64_t storeEnumTagSinglePayload for __RKEntityToggleVisibilityActionArguments.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA37B8C + 4 * byte_21BE52D56[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA37BAC + 4 * byte_21BE52D5B[v4]))();
}

_BYTE *sub_21BA37B8C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA37BAC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA37BB4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA37BBC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA37BC4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA37BCC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for __RKEntityTriggerSpecification.GroupCodingKeys()
{
  return &unk_24DFA0738;
}

unint64_t specialized __RKEntityTriggerSpecification.ProximityCodingKeys.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t specialized __RKEntityActionGroupArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726564726FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x766973756C637865 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E756F43706F6F6CLL && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x766973756C637865 && a2 == 0xEF736B636F6C4265)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized __RKEntityCustomActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE82EB0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72416D6F74737563 && a2 == 0xEF73746E656D7567)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __RKChangeSceneActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F6F52656E656373 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE82ED0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized __RKFadeSceneActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x704F746567726174 && a2 == 0xED00007974696361;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized __RKEntityFadeActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x704F746567726174 && a2 == 0xED00007974696361
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __RKEntityStartAnimateActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E756F43706F6F6CLL && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000021BE82EF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7261745370696C63 && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6172754470696C63 && a2 == 0xEC0000006E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6576655270696C63 && a2 == 0xEC00000073657372
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6576655270696C63 && a2 == 0xEC00000064657372
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE0064656570536ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696475416574756DLL && a2 == 0xE90000000000006FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6961476F69647561 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6E41746567726174 && a2 == 0xEF6E6F6974616D69)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t specialized __RKEntityShowActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E4965646166 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x61704F6C616E6966 && a2 == 0xEC00000079746963
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE82F10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE82F30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000021BE82F50)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t specialized __RKEntityHideActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65636E6174736964 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74754F65646166 && a2 == 0xE700000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x61704F6C616E6966 && a2 == 0xEC00000079746963
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE82F10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE82F30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE82F70)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t specialized __RKEntityEmphasisActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEA0000000000736ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6974616D696E61 && a2 == 0xEE00656C7974536ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000021BE82F90)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized __RKEntityAudioActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1752457584 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656D756C6F76 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73706F6F6CLL && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x4D6C616974617073 && a2 == 0xEB0000000065646FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000021BE82EF0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized __RKEntityTransformActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61746E6569726F5FLL && a2 == 0xEC0000006E6F6974
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6570795465766F6DLL && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1702060389 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6570795465736165 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE82F10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE82F30
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000021BE82FB0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t specialized __RKEntityForceActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6563726F66 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469636F6C6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __RKEntitySwapEntityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656772615477656ELL && a2 == 0xE900000000000074
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74754F646C697562 && a2 == 0xEE006E6F69746341
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x416E49646C697562 && a2 == 0xED00006E6F697463)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized __RKEntitySpinActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746172657469 && a2 == 0xEA0000000000736ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized __RKEntityOrbitEntityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726154746F766970 && a2 == 0xEB00000000746567
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE900000000000073
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x416C61746962726FLL && a2 == 0xEB00000000736978
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F54746E6569726FLL && a2 == 0xEC00000068746150
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x657269446E697073 && a2 == 0xED00006E6F697463
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x5074636570736572 && a2 == 0xEE00736369737968
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE82F10
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000021BE82F30)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t specialized __RKEntityLookAtCameraActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000021BE828F0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461746F72 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726F746365567075 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73706F6F6CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t specialized __RKEntitySetOpacityActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7974696361706FLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t specialized __RKEntityPlayTimelineActionArguments.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746567726174 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001FLL && a2 == 0x800000021BE82FD0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000021BE82FF0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x800000021BE83010
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x800000021BE83040)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t specialized __RKEntityInteractionSpecification.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x72656767697274 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F69746361 && a2 == 0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x800000021BE83060)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t ImageBasedLightComponent.source.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  return outlined copy of ImageBasedLightComponent.Source(v2, v3);
}

uint64_t outlined copy of ImageBasedLightComponent.Source(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t ImageBasedLightComponent.source.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  result = outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 16) = v4;
  return result;
}

uint64_t outlined consume of ImageBasedLightComponent.Source(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t (*ImageBasedLightComponent.source.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightComponent.environment.getter()
{
  uint64_t v0;

  if ((*(_QWORD *)(v0 + 8) & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_retain();
}

uint64_t key path getter for ImageBasedLightComponent.environment : ImageBasedLightComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      outlined copy of ImageBasedLightComponent.Source(*a1, v3);
      result = swift_release();
    }
    else
    {
      result = outlined consume of ImageBasedLightComponent.Source(*a1, v3);
      v4 = 0;
    }
  }
  else
  {
    result = outlined copy of ImageBasedLightComponent.Source(*a1, v3);
  }
  *a2 = v4;
  return result;
}

uint64_t key path setter for ImageBasedLightComponent.environment : ImageBasedLightComponent(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v3 = *a1;
  v4 = (unint64_t)(*a1 == 0) << 63;
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  swift_retain();
  result = outlined consume of ImageBasedLightComponent.Source(v5, v6);
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t ImageBasedLightComponent.environment.setter(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v3 = (unint64_t)(a1 == 0) << 63;
  result = outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = a1;
  *(_QWORD *)(v1 + 8) = v3;
  *(_DWORD *)(v1 + 16) = 0;
  return result;
}

uint64_t (*ImageBasedLightComponent.environment.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  if ((*(_QWORD *)(v1 + 8) & 0x8000000000000000) != 0)
    v3 = 0;
  else
    v3 = swift_retain();
  *a1 = v3;
  return ImageBasedLightComponent.environment.modify;
}

uint64_t ImageBasedLightComponent.environment.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a1 == 0;
  if ((a2 & 1) != 0)
  {
    v5 = v4 << 63;
    v6 = *(_QWORD *)v3;
    v7 = *(_QWORD *)(v3 + 8);
    swift_retain();
    outlined consume of ImageBasedLightComponent.Source(v6, v7);
    *(_QWORD *)v3 = v2;
    *(_QWORD *)(v3 + 8) = v5;
    *(_DWORD *)(v3 + 16) = 0;
    return swift_release();
  }
  else
  {
    v9 = v4 << 63;
    result = outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    *(_QWORD *)v3 = v2;
    *(_QWORD *)(v3 + 8) = v9;
    *(_DWORD *)(v3 + 16) = 0;
  }
  return result;
}

uint64_t ImageBasedLightComponent.inheritsRotation.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t ImageBasedLightComponent.inheritsRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = result;
  return result;
}

uint64_t (*ImageBasedLightComponent.inheritsRotation.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float ImageBasedLightComponent.intensityExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

void ImageBasedLightComponent.intensityExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 24) = a1;
}

uint64_t (*ImageBasedLightComponent.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightComponent.init(environment:intensityExponent:global:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(_BYTE *)(a3 + 20) = 0;
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = (unint64_t)(result == 0) << 63;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 24) = a4;
  *(_BYTE *)(a3 + 28) = a2;
  return result;
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:global:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  int v4;

  v4 = *(_DWORD *)(result + 16);
  *(_OWORD *)a3 = *(_OWORD *)result;
  *(_DWORD *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 20) = 0;
  *(float *)(a3 + 24) = a4;
  *(_BYTE *)(a3 + 28) = a2;
  return result;
}

uint64_t ImageBasedLightComponent.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_BYTE *)(a2 + 20) = 0;
  *(_BYTE *)(a2 + 28) = 0;
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = (unint64_t)(result == 0) << 63;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 24) = a3;
  return result;
}

uint64_t ImageBasedLightComponent.init(source:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  int v3;

  v3 = *(_DWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_DWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 20) = 0;
  *(float *)(a2 + 24) = a3;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

uint64_t static ImageBasedLightComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t IBL;
  int v3;
  uint64_t v4;
  uint64_t SkyboxTexture;
  uint64_t v6;
  uint64_t IBLBlend;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  char IsGlobalIBL;
  uint64_t result;

  IBL = REImageBasedLightComponentGetIBL();
  v3 = 0;
  if (IBL)
  {
    v4 = IBL;
    SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = v4;
    swift_beginAccess();
    *(_QWORD *)(v6 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
    if (REImageBasedLightComponentGetEnableBlend()
      && (IBLBlend = REImageBasedLightComponentGetIBLBlend()) != 0)
    {
      v8 = IBLBlend;
      v9 = REIBLAssetGetSkyboxTexture();
      if (v9)
      {
        v10 = swift_allocObject();
        *(_QWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 16) = v8;
        swift_beginAccess();
        *(_QWORD *)(v10 + 24) = v9;
        RERetain();
        REAssetSetSwiftObject();
        RERetain();
        REAssetSetSwiftObject();
        REImageBasedLightComponentGetBlendIBLsFactor();
        v3 = v11;
        v9 = v10 | 0x4000000000000000;
      }
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v6 = 0;
    v9 = 0x8000000000000000;
  }
  REImageBasedLightComponentGetIntensityExponent();
  v13 = v12;
  IsGlobalIBL = REImageBasedLightComponentIsGlobalIBL();
  result = REImageBasedLightComponentGetRotationEnabled();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 24) = v13;
  *(_BYTE *)(a1 + 28) = IsGlobalIBL;
  return result;
}

uint64_t ImageBasedLightComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      REImageBasedLightComponentSetIBLNullable();
      REImageBasedLightComponentSetIBLBlendNullable();
      REImageBasedLightComponentSetEnableBlend();
      REImageBasedLightComponentSetBlendIBLsFactor();
      swift_release();
      swift_release();
    }
    else
    {
      REImageBasedLightComponentSetIBLNullable();
      REImageBasedLightComponentSetEnableBlend();
    }
  }
  else
  {
    swift_retain();
    REImageBasedLightComponentSetIBLNullable();
    REImageBasedLightComponentSetEnableBlend();
    outlined consume of ImageBasedLightComponent.Source(v1, v2);
  }
  REImageBasedLightComponentSetRotationEnabled();
  REImageBasedLightComponentSetGlobalIBL();
  REImageBasedLightComponentSetIntensityExponent();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ImageBasedLightComponent(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

void static ImageBasedLightComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5;
}

uint64_t ImageBasedLightReceiverComponent.imageBasedLight.getter()
{
  return swift_retain();
}

uint64_t ImageBasedLightReceiverComponent.imageBasedLight.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*ImageBasedLightReceiverComponent.imageBasedLight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t ImageBasedLightReceiverComponent.init(imageBasedLight:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static ImageBasedLightReceiverComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t static ImageBasedLightReceiverComponent.__fromCore(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t IBLEntityNullable;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  IBLEntityNullable = REImageBasedLightReceiverComponentGetIBLEntityNullable();
  if (!IBLEntityNullable)
  {
    type metadata accessor for Entity();
    swift_allocObject();
    result = Entity.init()();
    goto LABEL_5;
  }
  v3 = IBLEntityNullable;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    result = swift_dynamicCastClassUnconditional();
    goto LABEL_5;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      v5 = (*(uint64_t (**)(void))(v6 + 232))();
      v7 = *(_QWORD *)(v5 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v5 + 16) = v3;
      MEMORY[0x22076D160](v3, v5);
      result = swift_release();
      goto LABEL_6;
    }
    result = makeEntity(for:)(v3);
LABEL_5:
    v5 = result;
LABEL_6:
    *a1 = v5;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ImageBasedLightReceiverComponent()
{
  REImageBasedLightReceiverComponentSetIBLEntity();
  return RENetworkMarkComponentDirty();
}

uint64_t ImageBasedLightReceiverComponent.__toCore(_:)()
{
  REImageBasedLightReceiverComponentSetIBLEntity();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ImageBasedLightReceiverComponent(_DWORD *a1@<X8>)
{
  *a1 = 2028;
}

void static ImageBasedLightReceiverComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2028;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ImageBasedLightReceiverComponent(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) == *(_QWORD *)(*(_QWORD *)a2 + 16);
}

uint64_t __ImageBasedLightComponent.environment.getter()
{
  return swift_retain();
}

uint64_t __ImageBasedLightComponent.environment.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*__ImageBasedLightComponent.environment.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float __ImageBasedLightComponent.intensityExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void __ImageBasedLightComponent.intensityExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*__ImageBasedLightComponent.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __ImageBasedLightComponent.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_QWORD *)a2 = result;
  *(float *)(a2 + 8) = a3;
  return result;
}

BOOL static __ImageBasedLightComponent.== infix(_:_:)(float *a1, float *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  if (a1[2] != a2[2])
    return 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a2;
  if (!*(_QWORD *)a1)
    return v3 == 0;
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    if (!v5)
      goto LABEL_10;
    return 0;
  }
  if (v5)
    v6 = v4 == v5;
  else
    v6 = 0;
  if (!v6)
    return 0;
LABEL_10:
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 24);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 24);
  result = (v7 | v8) == 0;
  if (v7)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
    return v7 == v8;
  return result;
}

uint64_t static __ImageBasedLightComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t IBL;
  uint64_t v3;
  uint64_t SkyboxTexture;
  uint64_t v5;
  uint64_t result;
  int v7;

  IBL = REImageBasedLightComponentGetIBL();
  if (IBL)
  {
    v3 = IBL;
    SkyboxTexture = REIBLAssetGetSkyboxTexture();
    type metadata accessor for EnvironmentResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 16) = v3;
    swift_beginAccess();
    *(_QWORD *)(v5 + 24) = SkyboxTexture;
    RERetain();
    REAssetSetSwiftObject();
    if (SkyboxTexture)
    {
      RERetain();
      REAssetSetSwiftObject();
    }
  }
  else
  {
    v5 = 0;
  }
  result = REImageBasedLightComponentGetIntensityExponent();
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v7;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance __ImageBasedLightComponent()
{
  uint64_t v0;

  if (*(_QWORD *)v0 && *(_QWORD *)(*(_QWORD *)v0 + 16))
    REImageBasedLightComponentSetIBLNullable();
  REImageBasedLightComponentSetIntensityExponent();
  return RENetworkMarkComponentDirty();
}

uint64_t __ImageBasedLightComponent.__toCore(_:)()
{
  uint64_t v0;

  if (*(_QWORD *)v0 && *(_QWORD *)(*(_QWORD *)v0 + 16))
    REImageBasedLightComponentSetIBLNullable();
  REImageBasedLightComponentSetIntensityExponent();
  return RENetworkMarkComponentDirty();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  BOOL v5;

  if (*(float *)(a1 + 8) != *(float *)(a2 + 8))
    return 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a2;
  result = (*(_QWORD *)a1 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
    return specialized static EnvironmentResource.areEqual(_:_:)(v2, v3);
  return result;
}

uint64_t ImageBasedLightComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  int v23;
  char v24;

  v18[1] = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + 8);
  v11 = *(_DWORD *)(v1 + 16);
  v12 = *(_BYTE *)(v1 + 20);
  v13 = *(_DWORD *)(v1 + 24);
  LOBYTE(v7) = *(_BYTE *)(v1 + 28);
  v19 = *(_QWORD *)v1;
  v9 = v19;
  v20 = v10;
  v21 = v11;
  v22 = v12;
  v23 = v13;
  v24 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v14 + 32) = 0x656372756F73;
  *(_QWORD *)(v14 + 40) = 0xE600000000000000;
  *(_QWORD *)(v14 + 48) = v9;
  *(_QWORD *)(v14 + 56) = v10;
  *(_DWORD *)(v14 + 64) = v11;
  *(_QWORD *)(v14 + 72) = &type metadata for ImageBasedLightComponent.Source;
  *(_QWORD *)(v14 + 80) = 0xD000000000000010;
  *(_QWORD *)(v14 + 88) = 0x800000021BE83080;
  v15 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v14 + 96) = v12;
  *(_QWORD *)(v14 + 120) = v15;
  *(_QWORD *)(v14 + 128) = 0xD000000000000011;
  *(_QWORD *)(v14 + 136) = 0x800000021BE830A0;
  *(_QWORD *)(v14 + 168) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v14 + 144) = v13;
  v16 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v8, 1, 1, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE43C0], v2);
  outlined copy of ImageBasedLightComponent.Source(v9, v10);
  outlined copy of ImageBasedLightComponent.Source(v9, v10);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t ImageBasedLightReceiverComponent.customMirror.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v0;
  v8 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v9 + 32) = 0x7361426567616D69;
  *(_QWORD *)(v9 + 40) = 0xEF746867694C6465;
  *(_QWORD *)(v9 + 72) = type metadata accessor for Entity();
  *(_QWORD *)(v9 + 48) = v8;
  v10 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static ImageBasedLightComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;

  if (*(float *)(a1 + 24) != *(float *)(a2 + 24))
    return 0;
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = v3 >> 62;
  if (!(v3 >> 62))
  {
    outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a1, v3);
    v7 = v5 >> 62;
    if (v5 >> 62)
      goto LABEL_5;
    goto LABEL_8;
  }
  if ((_DWORD)v6 == 1)
  {
    outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a1, v3);
    swift_release();
    v7 = v5 >> 62;
    if (v5 >> 62)
    {
LABEL_5:
      if ((_DWORD)v7 == 1)
      {
        outlined copy of ImageBasedLightComponent.Source(v4, v5);
        swift_release();
LABEL_9:
        v8 = specialized static EnvironmentResource.areEqual(_:_:)(v2, v4);
        swift_release();
        swift_release();
        return v8;
      }
      outlined consume of ImageBasedLightComponent.Source(v4, v5);
      swift_release();
      if (!(_DWORD)v6)
        return 0;
      outlined copy of ImageBasedLightComponent.Source(v2, v3);
      swift_release();
      goto LABEL_15;
    }
LABEL_8:
    outlined copy of ImageBasedLightComponent.Source(v4, v5);
    goto LABEL_9;
  }
  outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)a1, v3);
  outlined consume of ImageBasedLightComponent.Source(v2, v3);
  if (!(v5 >> 62))
    return 0;
  if (v5 >> 62 == 1)
  {
    outlined copy of ImageBasedLightComponent.Source(v4, v5);
    swift_release();
LABEL_15:
    swift_release();
    return 0;
  }
  outlined consume of ImageBasedLightComponent.Source(v4, v5);
  return 1;
}

uint64_t initializeWithCopy for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a2, v5);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 16) = v6;
  outlined consume of ImageBasedLightComponent.Source(v7, v8);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_DWORD *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v4;
  outlined consume of ImageBasedLightComponent.Source(v5, v6);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageBasedLightComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 29))
    return (*(_DWORD *)a1 + 16382);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0xC00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ImageBasedLightComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 16382;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 29) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 29) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageBasedLightComponent()
{
  return &type metadata for ImageBasedLightComponent;
}

uint64_t destroy for ImageBasedLightComponent.Source(uint64_t a1)
{
  return outlined consume of ImageBasedLightComponent.Source(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeBufferWithCopyOfBuffer for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(a2 + 16);
  outlined copy of ImageBasedLightComponent.Source(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  outlined consume of ImageBasedLightComponent.Source(v6, v7);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ImageBasedLightComponent.Source(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = v3;
  outlined consume of ImageBasedLightComponent.Source(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageBasedLightComponent.Source(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 16382);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0xC00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ImageBasedLightComponent.Source(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFD)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 16382;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
      *(_DWORD *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ImageBasedLightComponent.Source(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[1] >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

uint64_t destructiveProjectEnumData for ImageBasedLightComponent.Source(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for ImageBasedLightComponent.Source(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
  {
    v2 = *(_QWORD *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *(_QWORD *)result &= 0xFFFFFFFFFFFFFF8uLL;
    *(_QWORD *)(result + 8) = v2;
  }
  else
  {
    *(_QWORD *)result = 8 * (a2 - 2);
    *(_QWORD *)(result + 8) = 0x8000000000000000;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageBasedLightComponent.Source()
{
  return &type metadata for ImageBasedLightComponent.Source;
}

ValueMetadata *type metadata accessor for ImageBasedLightReceiverComponent()
{
  return &type metadata for ImageBasedLightReceiverComponent;
}

uint64_t initializeBufferWithCopyOfBuffer for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t destroy for __ImageBasedLightComponent()
{
  return swift_release();
}

uint64_t assignWithCopy for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for __ImageBasedLightComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for __ImageBasedLightComponent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 12))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __ImageBasedLightComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 12) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __ImageBasedLightComponent()
{
  return &type metadata for __ImageBasedLightComponent;
}

uint64_t HasModel.model.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t Component;
  uint64_t result;
  __int128 v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v10);
  Component = REEntityGetComponent();
  if (Component)
  {
    v7 = Component;
    static ModelComponent.__fromCore(_:borrowStrongReference:)(&v7, 0, (uint64_t *)&v8);
    result = swift_release();
    v5 = v8;
    v6 = v9;
  }
  else
  {
    result = swift_release();
    v6 = 0;
    v5 = 0uLL;
  }
  *(_OWORD *)a1 = v5;
  *(_DWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t key path setter for HasModel.model : <A>A(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4[2];
  int v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  v4[0] = *(_QWORD *)a1;
  v4[1] = v1;
  v5 = v2;
  outlined copy of ModelComponent?(v4[0]);
  return HasModel.model.setter((uint64_t)v4);
}

uint64_t HasModel.model.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  _BYTE v7[32];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v7);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4, 0);
  outlined consume of ModelComponent?(v2);
  swift_release();
  return v5(v7, 0);
}

void (*HasModel.model.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void (*v4)(uint64_t *__return_ptr);
  uint64_t Component;
  int v6;
  __int128 v7;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96);
  v3[4] = v4;
  v4(&v13);
  Component = REEntityGetComponent();
  if (Component)
  {
    v10 = Component;
    static ModelComponent.__fromCore(_:borrowStrongReference:)(&v10, 1, (uint64_t *)&v11);
    v9 = v11;
    v6 = v12;
    swift_release();
    v7 = v9;
  }
  else
  {
    swift_release();
    v6 = 0;
    v7 = 0uLL;
  }
  *(_OWORD *)v3 = v7;
  *((_DWORD *)v3 + 4) = v6;
  return HasModel.model.modify;
}

void HasModel.model.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(v2 + 32))(&v6);
    v3 = *(_QWORD *)v2;
    v4 = *(_QWORD *)(v2 + 8);
    v5 = *(_DWORD *)(v2 + 16);
    outlined copy of ModelComponent?(*(_QWORD *)v2);
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v3, v4, v5, 1);
    outlined consume of ModelComponent?(v3);
    swift_release();
  }
  outlined consume of ModelComponent?(*(_QWORD *)v2);
  free((void *)v2);
}

uint64_t specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for AnchoringComponent(0);
  if (REEntityGetComponent())
  {
    AnchoringComponent.init(from:)(a1);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v3, 1, v2);
}

{
  uint64_t result;
  char IsAuthoritative;
  char ShouldAlwaysMigrate;
  uint64_t v5;

  result = REEntityGetComponent();
  if (result)
  {
    IsAuthoritative = RENetworkComponentIsAuthoritative();
    ShouldAlwaysMigrate = RENetworkComponentShouldAlwaysMigrate();
    v5 = RENetworkComponentGuid();
    result = RENetworkComponentIsOwnershipLocked();
    *(_QWORD *)a1 = v5;
    *(_BYTE *)(a1 + 8) = IsAuthoritative;
    *(_BYTE *)(a1 + 9) = ShouldAlwaysMigrate;
    *(_BYTE *)(a1 + 10) = result;
    *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 2;
  }
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

{
  uint64_t result;
  int v3;
  int v4;
  __int128 v5;
  int UseUpDirection;
  __int128 v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  result = REEntityGetComponent();
  if (result)
  {
    REBillboardComponentGetBlendFactor();
    v4 = v3;
    REBillboardComponentGetForwardDirection();
    v12 = v5;
    UseUpDirection = REBillboardComponentGetUseUpDirection();
    v7 = 0uLL;
    if (UseUpDirection)
      REBillboardComponentGetUpDirection();
    v11 = v7;
    v8 = UseUpDirection ^ 1;
    result = REBillboardComponentGetUseRotationAxis();
    v9 = result;
    v10 = 0uLL;
    if ((_DWORD)result)
      result = REBillboardComponentGetRotationAxis();
    *(_OWORD *)a1 = v10;
    *(_BYTE *)(a1 + 16) = v9 ^ 1;
    *(_OWORD *)(a1 + 32) = v11;
    *(_BYTE *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 64) = v12;
    *(_DWORD *)(a1 + 80) = v4;
    *(_BYTE *)(a1 + 84) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_BYTE *)(a1 + 84) = 1;
  }
  return result;
}

{
  uint64_t v2;
  _OWORD v4[11];

  if (REEntityGetComponent())
  {
    PhysicsBodyComponent.init(_:)(a1);
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(a1, v2);
  }
  else
  {
    _s10RealityKit20PhysicsBodyComponentVSgWOi0_(v4);
    return outlined init with take of Transform?((uint64_t)v4, a1, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  }
}

{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  __int128 v13;
  int CollisionGroup;
  int v15;
  __int128 v16;

  result = REEntityGetComponent();
  if (result)
  {
    RECharacterControllerComponentGetRadius();
    v4 = v3;
    RECharacterControllerComponentGetHeight();
    v6 = v5;
    RECharacterControllerComponentGetSkinWidth();
    v8 = v7;
    RECharacterControllerComponentGetSlopeLimit();
    v10 = v9;
    RECharacterControllerComponentGetStepLimit();
    v12 = v11;
    RECharacterControllerComponentGetUpVector();
    v16 = v13;
    CollisionGroup = RECharacterControllerComponentGetCollisionGroup();
    result = RECharacterControllerComponentGetCollisionMask();
    v15 = result;
    if (one-time initialization token for defaultUpVector != -1)
      result = swift_once();
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 12) = v10;
    *(_DWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v16;
    *(_DWORD *)(a1 + 48) = CollisionGroup;
    *(_DWORD *)(a1 + 52) = v15;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  float v4;
  double v5;

  result = REEntityGetComponent();
  v3 = result;
  if (result)
  {
    result = REChannelAudioComponentGetDecibelGain();
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }
  *(double *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v3 == 0;
  return result;
}

{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  result = REEntityGetComponent();
  if (result)
  {
    REPerspectiveCameraComponentGetNear();
    v4 = v3;
    REPerspectiveCameraComponentGetFar();
    v6 = v5;
    REPerspectiveCameraComponentGetFieldOfView();
    v8 = v7;
    result = REPerspectiveCameraComponentGetFieldOfViewDirection();
    *(_DWORD *)a1 = v4;
    *(_DWORD *)(a1 + 4) = v6;
    *(_DWORD *)(a1 + 8) = v8;
    *(_BYTE *)(a1 + 12) = (_DWORD)result == 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 12) = 2;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  float v4;
  double v5;

  result = REEntityGetComponent();
  v3 = result;
  if (result)
  {
    result = REAmbientAudioComponentGetDecibelGain();
    v5 = v4;
  }
  else
  {
    v5 = 0.0;
  }
  *(double *)a1 = v5;
  *(_BYTE *)(a1 + 8) = v3 == 0;
  return result;
}

{
  uint64_t result;
  uint64_t StateMachineAsset;
  uint64_t v4;

  result = REEntityGetComponent();
  if (!result)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_8;
  }
  StateMachineAsset = REStateMachineComponentGetStateMachineAsset();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_5;
  type metadata accessor for StateMachineResource();
  v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_5:
    type metadata accessor for StateMachineResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 48) = StateMachineAsset;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    outlined consume of StateMachineGraph?(0, 0);
    RERetain();
    REAssetSetSwiftObject();
  }
  result = (uint64_t)specialized static StateMachineParametersCreator.createBoundParameters(from:)();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = result;
LABEL_8:
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  result = REEntityGetComponent();
  v3 = result;
  if (result)
  {
    REMotionStateComponentGetLinearVelocity();
    v6 = v4;
    result = REMotionStateComponentGetAngularVelocity();
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(_BYTE *)(a1 + 32) = v3 == 0;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for BodyTrackingComponent(0);
  if (REEntityGetComponent())
  {
    BodyTrackingComponent.init(from:)(a1);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, v3, 1, v2);
}

{
  uint64_t result;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  result = REEntityGetComponent();
  v3 = result;
  if (result)
  {
    result = RETransformComponentGetLocalSRT();
    if (one-time initialization token for identity != -1)
    {
      v8 = v5;
      v9 = v4;
      v7 = v6;
      result = swift_once();
      v6 = v7;
      v5 = v8;
      v4 = v9;
    }
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
    v6 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = v3 == 0;
  return result;
}

uint64_t specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetComponent();
  if (result)
    return CollisionComponent.init(_:)((uint64_t)a1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

char specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<W0>(char *a1@<X8>)
{
  uint64_t Component;
  Swift::String v3;
  char v4;
  char v6;

  Component = REEntityGetComponent();
  if (Component)
  {
    REDebugMeshComponentGetShaderDebugMode();
    v3._countAndFlagsBits = String.init(cString:)();
    LOBYTE(Component) = ModelDebugOptionsComponent.VisualizationMode.init(rawValue:)(v3);
    v4 = v6;
    if (v6 == 21)
      v4 = 0;
  }
  else
  {
    v4 = 21;
  }
  *a1 = v4;
  return Component;
}

double specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (REEntityGetComponent())
  {
    static VFXComponent.__fromCore(_:)((uint64_t)a1);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)((char *)a1 + 42) = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  if (REEntityGetComponent())
  {
    specialized __AccessibilityComponent.init(from:)((uint64_t)v5);
    v2 = v5[1];
    *a1 = v5[0];
    a1[1] = v2;
    result = *(double *)&v6;
    v4 = v7;
    a1[2] = v6;
    a1[3] = v4;
  }
  else
  {
    result = 0.0;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

void specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(unint64_t *a1@<X8>)
{
  if (REEntityGetComponent())
    static AudioLibraryComponent.__fromCore(_:)(a1);
  else
    *a1 = 0;
}

double specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  if (REEntityGetComponent())
  {
    static SpatialAudioComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_QWORD *)&result = 255;
    *(_OWORD *)(a1 + 40) = xmmword_21BE56B80;
  }
  return result;
}

{
  double result;

  if (REEntityGetComponent())
  {
    static VideoPlayerComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)(a1 + 109) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

void specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(uint64_t a1@<X8>)
{
  if (REEntityGetComponent())
  {
    static DirectionalLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 12) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

{
  __int128 v2;
  char v3;
  void *v4;
  __int128 v5;

  if (REEntityGetComponent())
  {
    REComponentGetEntity();
    RECharacterControllerComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      RECharacterControllerComponentGetVelocity();
      v5 = v2;
      v3 = RECharacterControllerComponentOnGround();
      *(_OWORD *)a1 = v5;
      *(_BYTE *)(a1 + 16) = v3;
    }
    else
    {
      static os_log_type_t.error.getter();
      type metadata accessor for OS_os_log();
      v4 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();

      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 0;
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 2;
  }
}

{
  if (REEntityGetComponent())
  {
    static __AmbientLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
}

{
  if (REEntityGetComponent())
  {
    static SpotLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

{
  if (REEntityGetComponent())
  {
    static PointLightComponent.__fromCore(_:)(a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v10;
  uint64_t v11[3];
  int v12;

  result = REComponentClassFromType();
  if (result)
  {
    if (a1)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      ComponentByClass = REEntityGetComponentByClass();
      v10 = ComponentByClass;
      if (ComponentByClass || (ComponentByClass = REEntityAddComponentNoEvents()) != 0)
      {
        v11[1] = a1;
        v11[2] = a2;
        v12 = a3;
        v11[0] = ComponentByClass;
        ModelComponent.__toCore(_:returnStrongReference:)(v11, a4 & 1);
        if (!v10)
          REEntitySendAddAndActivateComponentEvents();
      }
      return outlined consume of ModelComponent?(a1);
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t (*HasModel.modelDebugOptions.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v4 = (char *)(a1 + 3);
  a1[1] = a3;
  a1[2] = v3;
  *a1 = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v6);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v4);
  swift_release();
  return HasModel.modelDebugOptions.modify;
}

uint64_t HasModel.modelDebugOptions.modify(uint64_t a1, char a2)
{
  return HasModel.modelDebugOptions.modify(a1, a2, (uint64_t (*)(char *))HasModel.modelDebugOptions.setter);
}

uint64_t HasModel.modelDebugOptions.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

uint64_t HasModel.modelDebugOptions.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  return v3(v5, 0);
}

uint64_t (*HasModel.debugModel.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v4 = (char *)(a1 + 3);
  a1[1] = a3;
  a1[2] = v3;
  *a1 = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v6);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v4);
  swift_release();
  return HasModel.debugModel.modify;
}

uint64_t HasModel.debugModel.modify(uint64_t a1, char a2)
{
  return HasModel.modelDebugOptions.modify(a1, a2, (uint64_t (*)(char *))HasModel.debugModel.setter);
}

uint64_t HasModel.modelDebugOptions.modify(uint64_t a1, char a2, uint64_t (*a3)(char *))
{
  char *v3;
  char v5;
  char v6;

  if ((a2 & 1) != 0)
  {
    v5 = *(_BYTE *)(a1 + 24);
    v3 = &v5;
  }
  else
  {
    v6 = *(_BYTE *)(a1 + 24);
    v3 = &v6;
  }
  return a3(v3);
}

uint64_t outlined consume of ModelComponent?(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of ModelComponent?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t Object;
  _OWORD *v7;
  __int128 v8;
  _BYTE v9[40];
  _QWORD v10[5];

  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  result = REEntityGetComponentByClass();
  v5 = result;
  if (a2 == 1)
  {
    if (result)
      return REEntityRemoveComponentByClass();
  }
  else
  {
    swift_retain();
    if ((v5 || REEntityAddComponentNoEvents()) && (Object = RECustomComponentGetObject()) != 0)
    {
      v7 = (_OWORD *)Object;
      v10[3] = &type metadata for __EntityInfoComponent;
      v10[4] = &protocol witness table for __EntityInfoComponent;
      v10[0] = a1;
      v10[1] = a2;
      swift_retain();
      if (v5)
        swift_arrayDestroy();
      outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
      swift_dynamicCast();
      *v7 = v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      if (!v5)
        REEntitySendAddAndActivateComponentEvents();
      RENetworkMarkComponentDirty();
      return outlined consume of __EntityInfoComponent?(a1, a2);
    }
    else
    {
      return outlined consume of __EntityInfoComponent?(a1, a2);
    }
  }
  return result;
}

{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if ((a2 & 0xFF00000000) == 0x200000000)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REPerspectiveCameraComponentSetNear();
      REPerspectiveCameraComponentSetFar();
      REPerspectiveCameraComponentSetFieldOfView();
      REPerspectiveCameraComponentSetFieldOfViewDirection();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        REPerspectiveCameraComponentSetNear();
        REPerspectiveCameraComponentSetFar();
        REPerspectiveCameraComponentSetFieldOfView();
        REPerspectiveCameraComponentSetFieldOfViewDirection();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if (a2)
    {
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        PhysicsJointsComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        PhysicsJointsComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1)
{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if ((a1 & 0x100000000) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REHierarchicalFadeComponentSetOpacity();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        REHierarchicalFadeComponentSetOpacity();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[64];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for Transform?);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Transform?);
    if ((v4[48] & 1) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      RETransformComponentSetLocalSRT();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        RETransformComponentSetLocalSRT();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if (a1)
    {
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        CollisionComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        CollisionComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return swift_bridgeObjectRelease();
    }
    else
    {
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t ComponentByClass;
  __int128 v4;
  _OWORD v5[3];
  uint64_t v6;
  _OWORD v7[2];
  __int128 v8;
  uint64_t v9;

  result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v5, &demangling cache variable for type metadata for VideoComponent?);
    if (*(_QWORD *)&v5[0])
    {
      v7[0] = v5[0];
      v7[1] = v5[1];
      v8 = v5[2];
      v9 = v6;
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        REVideoComponentSetVideoAsset();
        v4 = v8;
        __swift_project_boxed_opaque_existential_1((_QWORD *)v7 + 1, v8);
        (*(void (**)(_QWORD, _QWORD))(*((_QWORD *)&v4 + 1) + 8))(v4, *((_QWORD *)&v4 + 1));
        swift_beginAccess();
        swift_release();
        REVideoComponentSetMaterialAsset();
        REVideoComponentSetFadeThreshold();
        REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();
      }
      return outlined destroy of VideoComponent((uint64_t)v7);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for VideoComponent?);
      return REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AnchoringComponent(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v4, &demangling cache variable for type metadata for AnchoringComponent?);
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of __RKEntityActionSpecification((uint64_t)v4, (uint64_t)v8, type metadata accessor for AnchoringComponent);
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v13 = ComponentByClass;
        AnchoringComponent.__toCore(_:)(&v13);
      }
      else
      {
        v11 = REEntityAddComponentNoEvents();
        if (v11)
        {
          v13 = v11;
          AnchoringComponent.__toCore(_:)(&v13);
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined destroy of __RKEntityActionSpecification((uint64_t)v8, type metadata accessor for AnchoringComponent);
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  _QWORD v27[2];
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v27[0] = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v27[0] - 8);
  MEMORY[0x24BDAC7A8](v27[0]);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BodyTrackingComponent.Target(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BodyTrackingComponent?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BodyTrackingComponent(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with copy of (Int, URL)(a1, (uint64_t)v10, &demangling cache variable for type metadata for BodyTrackingComponent?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for BodyTrackingComponent?);
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of __RKEntityActionSpecification((uint64_t)v10, (uint64_t)v14, type metadata accessor for BodyTrackingComponent);
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        outlined init with copy of BodyTrackingComponent.Target((uint64_t)v14, (uint64_t)v7);
        v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (identifier: UUID));
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v7, 1, v17) == 1)
        {
          REBodyTrackingComponentSetTargetType();
        }
        else
        {
          v18 = v27[0];
          (*(void (**)(char *, char *, _QWORD))(v2 + 32))(v4, v7, v27[0]);
          REBodyTrackingComponentSetTargetType();
          v27[1] = UUID.uuid.getter();
          v28 = v19;
          v29 = v20;
          v30 = v21;
          v31 = v22;
          v32 = v23;
          v33 = v24;
          v34 = v25;
          v35 = v26;
          REBodyTrackingComponentSetTargetBodyIdentifier();
          (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v18);
        }
        REBodyTrackingComponentSetIsPaused();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();
      }
      return outlined destroy of __RKEntityActionSpecification((uint64_t)v14, type metadata accessor for BodyTrackingComponent);
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t ComponentByClass;

  result = REComponentClassFromType();
  if (result)
  {
    if (a1 == 1)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      swift_retain();
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        if (a1 && *(_QWORD *)(a1 + 16))
          REImageBasedLightComponentSetIBLNullable();
        REImageBasedLightComponentSetIntensityExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();
      }
      return outlined consume of __ImageBasedLightComponent?(a1);
    }
  }
  return result;
}

{
  char v2;
  char v3;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[96];

  outlined init with take of Transform?(a1, (uint64_t)&v6, &demangling cache variable for type metadata for BillboardComponent?);
  v2 = v7;
  v3 = v8;
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v9, &demangling cache variable for type metadata for BillboardComponent?);
    if ((v9[84] & 1) != 0)
      return REEntityRemoveComponentByClass();
    ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass || (result = REEntityAddComponentNoEvents()) != 0)
    {
      REBillboardComponentSetBlendFactor();
      REBillboardComponentSetForwardDirection();
      if ((v3 & 1) != 0)
      {
        REBillboardComponentSetUseUpDirection();
        if ((v2 & 1) != 0)
          goto LABEL_8;
      }
      else
      {
        REBillboardComponentSetUseUpDirection();
        REBillboardComponentSetUpDirection();
        if ((v2 & 1) != 0)
        {
LABEL_8:
          REBillboardComponentSetUseRotationAxis();
          goto LABEL_11;
        }
      }
      REBillboardComponentSetUseRotationAxis();
      REBillboardComponentSetRotationAxis();
LABEL_11:
      result = RENetworkMarkComponentDirty();
      if (!ComponentByClass)
        return REEntitySendAddAndActivateComponentEvents();
    }
  }
  return result;
}

{
  uint64_t result;
  _BYTE v3[16];
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21;
  uint64_t v22;
  char v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  _BYTE v43[176];
  _BYTE v44[176];
  _BYTE v45[176];

  outlined init with take of Transform?(a1, (uint64_t)v43, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  outlined init with take of Transform?((uint64_t)v43, (uint64_t)v45, &demangling cache variable for type metadata for PhysicsBodyComponent?);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v44, &demangling cache variable for type metadata for PhysicsBodyComponent?);
    if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v44) == 1)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      outlined init with take of Transform?((uint64_t)v45, (uint64_t)v3, &demangling cache variable for type metadata for PhysicsBodyComponent?);
      v23 = v3[0];
      v24 = v4;
      v25 = v5;
      v26 = v6;
      v27 = v7;
      v28 = v8;
      v29 = v9;
      v30 = v10;
      v31 = v11;
      v32 = v12;
      v33 = v13;
      v34 = v14;
      v35 = v15;
      v36 = v16;
      v37 = v17;
      v38 = v18;
      v39 = v19;
      v40 = v20;
      v41 = v21;
      v42 = v22;
      swift_retain();
      if (REEntityGetComponentByClass())
      {
        PhysicsBodyComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        PhysicsBodyComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return outlined release of PhysicsBodyComponent?(a1);
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[56];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for SpatialAudioComponent?);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for SpatialAudioComponent?);
    if (v4[40] == 0xFF)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return SpatialAudioComponent.__toCore(_:)();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        SpatialAudioComponent.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[64];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for CharacterControllerComponent?);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CharacterControllerComponent?);
    if ((v4[56] & 1) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      RECharacterControllerComponentSetRadius();
      RECharacterControllerComponentSetHeight();
      RECharacterControllerComponentSetSkinWidth();
      RECharacterControllerComponentSetSlopeLimit();
      RECharacterControllerComponentSetStepLimit();
      RECharacterControllerComponentSetUpVector();
      return RECharacterControllerComponentSetCollisionFilter();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        RECharacterControllerComponentSetRadius();
        RECharacterControllerComponentSetHeight();
        RECharacterControllerComponentSetSkinWidth();
        RECharacterControllerComponentSetSlopeLimit();
        RECharacterControllerComponentSetStepLimit();
        RECharacterControllerComponentSetUpVector();
        RECharacterControllerComponentSetCollisionFilter();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if ((a1 & 0xFF00000000) == 0x400000000)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return SpotLightComponent.Shadow.__toCore(_:)();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        SpotLightComponent.Shadow.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  ValueMetadata *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  _BYTE v8[40];
  _DWORD v9[6];
  ValueMetadata *v10;
  _UNKNOWN **v11;

  type metadata accessor for REComponentType(0);
  v10 = v2;
  v9[0] = 4010;
  outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (v6 == 36)
  {
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for InputTargetComponent, (uint64_t)&protocol witness table for InputTargetComponent);
    result = REEntityGetComponentByClass();
    v4 = result;
    if (a1 == 2)
    {
      if (!result)
        return result;
      return REEntityRemoveComponentByClass();
    }
    if (result || (result = REEntityAddComponentNoEvents()) != 0)
    {
      result = RECustomComponentGetObject();
      if (result)
      {
        v5 = result;
        v10 = &type metadata for InputTargetComponent;
        v11 = &protocol witness table for InputTargetComponent;
        LOBYTE(v9[0]) = a1 & 1;
        v9[1] = HIDWORD(a1);
        outlined init with copy of __REAssetService((uint64_t)v9, (uint64_t)v8);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
        swift_dynamicCast();
        *(_BYTE *)v5 = 36;
        *(_DWORD *)(v5 + 4) = v7;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
        if (!v4)
          REEntitySendAddAndActivateComponentEvents();
        return RENetworkMarkComponentDirty();
      }
    }
  }
  else
  {
    result = REComponentClassFromType();
    if (!result)
      return result;
    if (a1 == 2)
      return REEntityRemoveComponentByClass();
    if (REEntityGetComponentByClass())
    {
      REInputTargetComponentSetEnabled();
      REInputTargetComponentSetAllowsDirectInput();
      REInputTargetComponentSetAllowsIndirectInput();
      return RENetworkMarkComponentDirty();
    }
    result = REEntityAddComponentNoEvents();
    if (result)
    {
      REInputTargetComponentSetEnabled();
      REInputTargetComponentSetAllowsDirectInput();
      REInputTargetComponentSetAllowsIndirectInput();
      RENetworkMarkComponentDirty();
      return REEntitySendAddAndActivateComponentEvents();
    }
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  _BYTE v4[48];

  outlined init with take of Transform?(a1, (uint64_t)&v3, &demangling cache variable for type metadata for PhysicsMotionComponent?);
  result = REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v4, &demangling cache variable for type metadata for PhysicsMotionComponent?);
    if ((v4[32] & 1) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REMotionStateComponentSetLinearVelocity();
      REMotionStateComponentSetAngularVelocity();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        REMotionStateComponentSetLinearVelocity();
        REMotionStateComponentSetAngularVelocity();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t ComponentByClass;
  uint64_t Object;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  _BYTE v10[40];
  _QWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[3];

  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for EventSubscriptionComponent, (uint64_t)&protocol witness table for EventSubscriptionComponent);
  ComponentByClass = REEntityGetComponentByClass();
  outlined init with copy of (Int, URL)(a1, (uint64_t)&v12, &demangling cache variable for type metadata for EventSubscriptionComponent?);
  if (*((_QWORD *)&v14 + 1))
  {
    v15[0] = v12;
    v15[1] = v13;
    v15[2] = v14;
    if (ComponentByClass || REEntityAddComponentNoEvents())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v4 = (_OWORD *)Object;
        v11[3] = &type metadata for EventSubscriptionComponent;
        v11[4] = &protocol witness table for EventSubscriptionComponent;
        v11[0] = swift_allocObject();
        outlined init with copy of EventSubscriptionComponent((uint64_t)v15, v11[0] + 16);
        if (ComponentByClass)
        {
          swift_arrayDestroy();
          outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
          swift_dynamicCast();
          v6 = v13;
          v5 = v14;
          *v4 = v12;
          v4[1] = v6;
          v4[2] = v5;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
        }
        else
        {
          outlined init with copy of __REAssetService((uint64_t)v11, (uint64_t)v10);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
          swift_dynamicCast();
          v9 = v13;
          v8 = v14;
          *v4 = v12;
          v4[1] = v9;
          v4[2] = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
          REEntitySendAddAndActivateComponentEvents();
        }
        RENetworkMarkComponentDirty();
      }
    }
    return outlined destroy of EventSubscriptionComponent((uint64_t)v15);
  }
  else
  {
    result = outlined destroy of BodyTrackingComponent?((uint64_t)&v12, &demangling cache variable for type metadata for EventSubscriptionComponent?);
    if (ComponentByClass)
      return REEntityRemoveComponentByClass();
  }
  return result;
}

void specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(void *a1)
{
  uint64_t ComponentByClass;
  id v3;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      v3 = a1;
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REPointLightComponentSetColorGamut3F();
        REPointLightComponentSetIntensity();
        REPointLightComponentSetAttenuationRadius();
        REPointLightComponentSetAttenuationFalloffExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();

      }
      else
      {

      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      v3 = a1;
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REDirectionalLightComponentSetColorGamut3F();
        REDirectionalLightComponentSetIntensity();
        REDirectionalLightComponentSetIsProxy();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();

      }
      else
      {

      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      v3 = a1;
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RESpotLightComponentSetOuterAngle();
        RESpotLightComponentSetInnerAngle();
        RECGColorToColorGamut();
        RESpotLightComponentSetColorGamut3F();
        RESpotLightComponentSetIntensity();
        RESpotLightComponentSetAttenuationRadius();
        RESpotLightComponentSetAttenuationFalloffExponent();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();

      }
      else
      {

      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

{
  uint64_t ComponentByClass;
  id v3;

  if (REComponentClassFromType())
  {
    if (a1)
    {
      v3 = a1;
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || REEntityAddComponentNoEvents())
      {
        RECGColorToColorGamut();
        REAmbientLightComponentSetColorGamut3F();
        REAmbientLightComponentSetIntensity();
        RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          REEntitySendAddAndActivateComponentEvents();

      }
      else
      {

      }
    }
    else
    {
      REEntityRemoveComponentByClass();
    }
  }
}

uint64_t *specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t ComponentByClass;
  uint64_t v9;
  uint64_t v10[2];
  __int16 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t v22;

  outlined init with take of Transform?((uint64_t)a1, (uint64_t)&v16, &demangling cache variable for type metadata for SynchronizationComponent?);
  v3 = v16;
  v2 = v17;
  v4 = v18;
  v5 = v19;
  v6 = v20;
  result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?((uint64_t)a1, (uint64_t)v21, &demangling cache variable for type metadata for SynchronizationComponent?);
    if (v22 == 2)
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
    else
    {
      v10[1] = v3;
      v11 = v2 & 0x101;
      v12 = BYTE2(v2) & 1;
      v13 = v4;
      v14 = v5;
      v15 = v6;
      outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(v4, v5);
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v10[0] = ComponentByClass;
        SynchronizationComponent.__toCore(_:)(v10);
      }
      else
      {
        v9 = REEntityAddComponentNoEvents();
        if (v9)
        {
          v10[0] = v9;
          SynchronizationComponent.__toCore(_:)(v10);
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined release of SynchronizationComponent?(a1);
    }
  }
  return result;
}

{
  uint64_t *result;
  uint64_t v3;
  _BYTE v4[8];
  uint64_t v5;

  outlined init with take of Transform?((uint64_t)a1, (uint64_t)&v3, &demangling cache variable for type metadata for ReferenceComponent?);
  result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?((uint64_t)a1, (uint64_t)v4, &demangling cache variable for type metadata for ReferenceComponent?);
    if (v5)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        ReferenceComponent.__toCore(_:)();
      }
      else if (REEntityAddComponentNoEvents())
      {
        ReferenceComponent.__toCore(_:)();
        REEntitySendAddAndActivateComponentEvents();
      }
      return outlined release of ReferenceComponent?(a1);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(char a1)
{
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v4;
  char v5;

  result = REComponentClassFromType();
  if (result)
  {
    if (a1 == 21)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass || (result = REEntityAddComponentNoEvents()) != 0)
      {
        REDebugMeshComponentReset();
        if (ModelDebugOptionsComponent.VisualizationMode.rawValue.getter() == 1701736270 && v4 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v5 & 1) == 0)
          {
            ModelDebugOptionsComponent.VisualizationMode.rawValue.getter();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REDebugMeshComponentSetShaderDebugMode();
            swift_release();
          }
        }
        result = RENetworkMarkComponentDirty();
        if (!ComponentByClass)
          return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

double sub_21BA40518@<D0>(uint64_t a1@<X8>)
{
  int v2;
  double result;
  __int128 v4;
  int v5;

  HasModel.model.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BA4055C()
{
  return 16;
}

__n128 sub_21BA40568(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_21BA40574@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm((_QWORD *(*)(uint64_t *__return_ptr))HasModel.modelDebugOptions.getter, a1);
}

uint64_t sub_21BA40580(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_0(a1, a2, a3, a4, (uint64_t (*)(char *))HasModel.modelDebugOptions.setter);
}

uint64_t sub_21BA4058C()
{
  return 16;
}

__n128 sub_21BA40598(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

_QWORD *sub_21BA405A4@<X0>(_BYTE *a1@<X8>)
{
  return keypath_get_1Tm((_QWORD *(*)(uint64_t *__return_ptr))HasModel.debugModel.getter, a1);
}

_QWORD *keypath_get_1Tm@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X3>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = a1(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_21BA405E8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_0(a1, a2, a3, a4, (uint64_t (*)(char *))HasModel.debugModel.setter);
}

uint64_t keypath_set_2Tm_0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  char v6;

  v6 = *a1;
  return a5(&v6);
}

uint64_t sub_21BA40628()
{
  return 16;
}

__n128 sub_21BA40634(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t *result;
  uint64_t ComponentByClass;
  uint64_t *v11;
  uint64_t v12;
  char v13;
  uint64_t v14[3];
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  _QWORD v28[9];

  outlined init with take of Transform?(a1, (uint64_t)v21, &demangling cache variable for type metadata for VFXComponent?);
  v3 = v21[0];
  v2 = v21[1];
  v4 = v23;
  v13 = v22;
  v6 = v24;
  v5 = v25;
  v7 = v26;
  v8 = v27;
  result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v28, &demangling cache variable for type metadata for VFXComponent?);
    if (v28[0])
    {
      v14[1] = v3;
      v14[2] = v2;
      v15 = v13;
      v16 = v4;
      v17 = v6;
      v18 = v5;
      v19 = v7;
      v20 = v8 & 0x101;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      ComponentByClass = REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        v14[0] = ComponentByClass;
        VFXComponent.__toCore(_:)(v14);
        v11 = (uint64_t *)a1;
      }
      else
      {
        v12 = REEntityAddComponentNoEvents();
        v11 = (uint64_t *)a1;
        if (v12)
        {
          v14[0] = v12;
          VFXComponent.__toCore(_:)(v14);
          REEntitySendAddAndActivateComponentEvents();
        }
      }
      return outlined release of VFXComponent?(v11);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

{
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *result;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[8];
  _BYTE v13[56];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  outlined init with take of Transform?(a1, (uint64_t)v12, &demangling cache variable for type metadata for __AccessibilityComponent?);
  v2 = v12[0];
  v11 = v12[1];
  v3 = v12[2];
  v4 = v12[3];
  v5 = v12[4];
  v6 = v12[5];
  v8 = v12[6];
  v7 = v12[7];
  result = (uint64_t *)REComponentClassFromType();
  if (result)
  {
    outlined init with take of Transform?(a1, (uint64_t)v13, &demangling cache variable for type metadata for __AccessibilityComponent?);
    if (v14)
    {
      v15 = v2 & 0x101;
      v16 = v11;
      v17 = v3;
      v18 = v4;
      v19 = v5;
      v20 = v6;
      v21 = v8;
      v22 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (REEntityGetComponentByClass())
      {
        __AccessibilityComponent.__toCore(_:)();
        v10 = (uint64_t *)a1;
      }
      else
      {
        if (REEntityAddComponentNoEvents())
        {
          __AccessibilityComponent.__toCore(_:)();
          REEntitySendAddAndActivateComponentEvents();
        }
        v10 = (uint64_t *)a1;
      }
      return outlined release of __AccessibilityComponent?(v10);
    }
    else
    {
      return (uint64_t *)REEntityRemoveComponentByClass();
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if (a4 == 255)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      return DirectionalLightComponent.Shadow.__toCore(_:)();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        DirectionalLightComponent.Shadow.__toCore(_:)();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if (a3 == 2)
    {
      return REEntityRemoveComponentByClass();
    }
    else
    {
      result = REEntityGetComponentByClass();
      if (!result)
      {
        result = REEntityAddComponentNoEvents();
        if (result)
          return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

uint64_t specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, char a2)
{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if ((a2 & 1) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REChannelAudioComponentSetDecibelGain();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        REChannelAudioComponentSetDecibelGain();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

{
  uint64_t result;

  result = REComponentClassFromType();
  if (result)
  {
    if ((a2 & 1) != 0)
    {
      return REEntityRemoveComponentByClass();
    }
    else if (REEntityGetComponentByClass())
    {
      REAmbientAudioComponentSetDecibelGain();
      return RENetworkMarkComponentDirty();
    }
    else
    {
      result = REEntityAddComponentNoEvents();
      if (result)
      {
        REAmbientAudioComponentSetDecibelGain();
        RENetworkMarkComponentDirty();
        return REEntitySendAddAndActivateComponentEvents();
      }
    }
  }
  return result;
}

uint64_t outlined destroy of EventSubscriptionComponent(uint64_t a1)
{
  destroy for EventSubscriptionComponent(a1);
  return a1;
}

uint64_t sub_21BA41D14()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of EventSubscriptionComponent(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for EventSubscriptionComponent(a2, a1);
  return a2;
}

uint64_t outlined consume of StateMachineGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *outlined release of ReferenceComponent?(uint64_t *a1)
{
  outlined consume of ReferenceComponent?(*a1, a1[1]);
  return a1;
}

uint64_t outlined consume of ReferenceComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of BodyTrackingComponent.Target(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BodyTrackingComponent.Target(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *outlined release of __AccessibilityComponent?(uint64_t *a1)
{
  outlined consume of __AccessibilityComponent?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t outlined consume of __AccessibilityComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double _s10RealityKit20PhysicsBodyComponentVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 156) = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined destroy of VideoComponent(uint64_t a1)
{
  destroy for VideoComponent(a1);
  return a1;
}

uint64_t _s10RealityKit20PhysicsBodyComponentVSgWOg(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 80);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t outlined release of PhysicsBodyComponent?(uint64_t a1)
{
  swift_release();
  return a1;
}

uint64_t *outlined release of VFXComponent?(uint64_t *a1)
{
  outlined consume of VFXComponent?(*a1);
  return a1;
}

uint64_t outlined consume of VFXComponent?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void outlined copy of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t outlined consume of __EntityInfoComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_release();
  return result;
}

uint64_t outlined consume of __ImageBasedLightComponent?(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t *outlined release of SynchronizationComponent?(uint64_t *a1)
{
  outlined consume of SynchronizationComponent?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

void outlined consume of SynchronizationComponent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 2)
    outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(a3, a4);
}

uint64_t outlined consume of (Double, (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?)?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(a2);
  return result;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init(entityType:)(RealityKit::SceneUnderstandingComponent entityType)
{
  uint64_t v1;

  *(_BYTE *)v1 = **(_BYTE **)&entityType.entityType.value;
  *(_QWORD *)(v1 + 8) = 1;
  return entityType;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init()()
{
  uint64_t v0;
  RealityKit::SceneUnderstandingComponent result;

  *(_BYTE *)v0 = 2;
  *(_QWORD *)(v0 + 8) = 1;
  return result;
}

void SceneUnderstandingComponent.entityType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *SceneUnderstandingComponent.entityType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*SceneUnderstandingComponent.entityType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance SceneUnderstandingComponent(Swift::OpaquePointer *a1)
{
  return *(_OWORD *)&SceneUnderstandingComponent.init(from:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t static SceneUnderstandingComponent.__fromCore(_:)(Swift::OpaquePointer *a1)
{
  return *(_OWORD *)&SceneUnderstandingComponent.init(from:)((Swift::OpaquePointer)a1->_rawValue);
}

uint64_t SceneUnderstandingComponent.__toCore(_:)()
{
  return RESceneUnderstandingComponentSetEntityType();
}

void protocol witness for static Component.__coreComponentType.getter in conformance SceneUnderstandingComponent(_DWORD *a1@<X8>)
{
  *a1 = 67;
}

void static SceneUnderstandingComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 67;
}

BOOL static SceneUnderstandingComponent.Origin.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SceneUnderstandingComponent.Origin.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void SceneUnderstandingComponent.origin.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8) != 0;
}

RealityKit::SceneUnderstandingComponent __swiftcall SceneUnderstandingComponent.init(from:)(Swift::OpaquePointer from)
{
  uint64_t v1;
  uint64_t v2;
  int SourceType;
  int v4;
  int IsEntityType;
  Swift::Int v6;
  char v7;
  RealityKit::SceneUnderstandingComponent result;

  v2 = v1;
  SourceType = RESceneUnderstandingComponentGetSourceType();
  if (SourceType < 0)
  {
    LOBYTE(IsEntityType) = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    v4 = SourceType;
    LOBYTE(IsEntityType) = RESceneUnderstandingComponentIsEntityType();
    if ((IsEntityType & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      IsEntityType = RESceneUnderstandingComponentIsEntityType();
      if (IsEntityType)
        v7 = 1;
      else
        v7 = 2;
    }
    *(_BYTE *)v2 = v7;
    *(_QWORD *)(v2 + 8) = v4 == 2;
  }
  result.internalOriginType = v6;
  result.entityType = (RealityKit::SceneUnderstandingComponent::EntityType_optional)IsEntityType;
  return result;
}

uint64_t SceneUnderstandingComponent.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[8];
  uint64_t v15;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v14[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(_QWORD *)(v0 + 8);
  v14[0] = *(_BYTE *)v0;
  v8 = v14[0];
  v15 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v10 + 32) = 0x7954797469746E65;
  *(_QWORD *)(v10 + 40) = 0xEA00000000006570;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SceneUnderstandingComponent.EntityType?);
  *(_BYTE *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 72) = v11;
  *(_QWORD *)(v10 + 80) = 0x6E696769726FLL;
  *(_QWORD *)(v10 + 88) = 0xE600000000000000;
  *(_QWORD *)(v10 + 120) = &type metadata for SceneUnderstandingComponent.Origin;
  *(_BYTE *)(v10 + 96) = v9 != 0;
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType;
  if (!lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneUnderstandingComponent.EntityType, &type metadata for SceneUnderstandingComponent.EntityType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneUnderstandingComponent.EntityType and conformance SceneUnderstandingComponent.EntityType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin;
  if (!lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneUnderstandingComponent.Origin, &type metadata for SceneUnderstandingComponent.Origin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneUnderstandingComponent.Origin and conformance SceneUnderstandingComponent.Origin);
  }
  return result;
}

uint64_t sub_21BA424D8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8) != 0;
  return result;
}

unsigned __int8 *sub_21BA424EC(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for SceneUnderstandingComponent(unsigned __int8 *a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[16])
    return (*(_DWORD *)a1 + 254);
  if (*a1 <= 2u)
    v3 = 2;
  else
    v3 = *a1;
  v4 = v3 - 3;
  if (*a1 < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneUnderstandingComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent()
{
  return &type metadata for SceneUnderstandingComponent;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent.EntityType()
{
  return &type metadata for SceneUnderstandingComponent.EntityType;
}

uint64_t storeEnumTagSinglePayload for SceneUnderstandingComponent.EntityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA425FC + 4 * byte_21BE56BA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA42630 + 4 * asc_21BE56BA0[v4]))();
}

uint64_t sub_21BA42630(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA42638(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA42640);
  return result;
}

uint64_t sub_21BA4264C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA42654);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA42658(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA42660(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SceneUnderstandingComponent.Origin()
{
  return &type metadata for SceneUnderstandingComponent.Origin;
}

uint64_t specialized PredicateFactory.enumerate<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;

  v2 = v1;
  v4 = (_QWORD **)(v1 + 16);
  v5 = swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
    v8 = *(_QWORD *)(v6 + 8 * v7 + 24);
  else
    v8 = 0;
  result = (*(uint64_t (**)(uint64_t))(a1 + 16))(v5);
  if (result)
  {
    v10 = result;
    swift_beginAccess();
    v11 = *v4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v4 = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
      *v4 = v11;
    }
    v14 = v11[2];
    v13 = v11[3];
    if (v14 >= v13 >> 1)
    {
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v11);
      *v4 = v11;
    }
    v11[2] = v14 + 1;
    v11[v14 + 4] = v10;
    swift_endAccess();
    (*(void (**)(uint64_t, _UNKNOWN **))(a1 + 32))(v2, &protocol witness table for PredicateFactory);
    if (v8)
      REQueryConnectEntityPredicates();
    else
      *(_QWORD *)(v2 + 24) = v10;
    swift_beginAccess();
    specialized RangeReplaceableCollection<>.popLast()();
    return swift_endAccess();
  }
  return result;
}

uint64_t PredicateFactory.enumerate<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v3 = v2;
  v5 = (_QWORD **)(v2 + 16);
  swift_beginAccess();
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
    v16 = *(_QWORD *)(v8 + 8 * v9 + 24);
  else
    v16 = 0;
  type metadata accessor for QueryPredicate(0, a2, v6, v7);
  result = partial apply for thunk for @callee_guaranteed () -> ()();
  if (result)
  {
    v11 = result;
    swift_beginAccess();
    v12 = *v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v5 = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      *v5 = v12;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      *v5 = v12;
    }
    v12[2] = v15 + 1;
    v12[v15 + 4] = v11;
    swift_endAccess();
    QueryPredicate.enumerate(using:)();
    if (v16)
      specialized PredicateFactory.connect<A>(_:from:to:)();
    else
      *(_QWORD *)(v3 + 24) = v11;
    swift_beginAccess();
    specialized RangeReplaceableCollection<>.popLast()();
    return swift_endAccess();
  }
  return result;
}

uint64_t PredicateFactory.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Query.predicate.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2 + *(int *)(a1 + 36);
  v4 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  *(_QWORD *)(a2 + 40) = v4;
  swift_retain();
  swift_retain();
  return swift_retain();
}

__n128 Query.init(selector:_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __n128 result;

  v9 = type metadata accessor for Query(0, a3, a4, a4);
  *(_QWORD *)(a5 + *(int *)(v9 + 40)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a5, a1, a3);
  v10 = a5 + *(int *)(v9 + 36);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *(_OWORD *)(v10 + 16) = v11;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v10 + 32) = result;
  return result;
}

uint64_t type metadata accessor for Query(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Query);
}

uint64_t Query.init(for:where:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t EntityQuery;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[6];

  v9 = a2[1];
  v26 = *a2;
  v11 = a2[2];
  v10 = a2[3];
  v13 = a2[4];
  v12 = a2[5];
  v14 = type metadata accessor for Query(0, a3, a4, a4);
  v25 = *(int *)(v14 + 40);
  *(_QWORD *)(a5 + v25) = 0;
  v27 = *(_QWORD *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(a5, a1, a3);
  v15 = (_QWORD *)(a5 + *(int *)(v14 + 36));
  *v15 = v26;
  v15[1] = v9;
  v15[2] = v11;
  v15[3] = v10;
  v15[4] = v13;
  v15[5] = v12;
  type metadata accessor for PredicateFactory();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v16 + 24) = 0;
  v28[0] = v26;
  v28[1] = v9;
  v28[2] = v11;
  v28[3] = v10;
  v28[4] = v13;
  v28[5] = v12;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_retain();
  swift_retain();
  swift_retain();
  PredicateFactory.enumerate<A>(_:)((uint64_t)v28, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  if (!*(_QWORD *)(v16 + 24))
  {
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, a3);
    return swift_release();
  }
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
  {
    type metadata accessor for Query.Destructor(0, a3, a4, v18);
    EntityQuery = REQueryCreateEntityQuery();
LABEL_10:
    v23 = EntityQuery;
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a1, a3);
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = v23;
    result = swift_release();
    *(_QWORD *)(a5 + v25) = v24;
    return result;
  }
  if (swift_conformsToProtocol2())
    v22 = AssociatedTypeWitness;
  else
    v22 = 0;
  if (v22)
  {
    type metadata accessor for Query.Destructor(0, a3, a4, v21);
    EntityQuery = REQueryCreateComponentQuery();
    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PredicateFactory()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Query.Destructor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Query.Destructor);
}

uint64_t Query.Destructor.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t Query.internalQuery.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *(int *)(a1 + 40));
  if (v2)
    return *(_QWORD *)(v2 + 16);
  else
    return 0;
}

uint64_t Query.Destructor.deinit()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 16))
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    type metadata accessor for Entity();
    if (swift_dynamicCastMetatype())
    {
      REEntityQueryDestroy();
    }
    else
    {
      if (swift_conformsToProtocol2())
        v2 = AssociatedTypeWitness;
      else
        v2 = 0;
      if (v2)
        REComponentQueryDestroy();
    }
  }
  return v0;
}

uint64_t Query.Destructor.__deallocating_deinit()
{
  Query.Destructor.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance EntityQuery.Selector@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t EntityQuery.predicate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 40) = v2;
  swift_retain();
  swift_retain();
  return swift_retain();
}

uint64_t EntityQuery.init()@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t EntityQuery;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[6];

  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = 1;
  v3 = swift_allocObject();
  *(_BYTE *)(v3 + 16) = 1;
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 16) = 1;
  v9[0] = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  v9[1] = v2;
  v9[2] = partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:);
  v9[3] = v4;
  v9[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  v9[5] = v3;
  type metadata accessor for PredicateFactory();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v5 + 24) = 0;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized PredicateFactory.enumerate<A>(_:)((uint64_t)v9);
  if (*(_QWORD *)(v5 + 24))
  {
    EntityQuery = REQueryCreateEntityQuery();
    swift_release();
    type metadata accessor for EntityQuery.Destructor();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = EntityQuery;
    swift_release();
    swift_release();
    result = swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    result = swift_release();
    v7 = 0;
  }
  *a1 = partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
  a1[1] = (uint64_t (*)())v2;
  a1[2] = partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:);
  a1[3] = (uint64_t (*)())v4;
  a1[4] = (uint64_t (*)())destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  a1[5] = (uint64_t (*)())v3;
  a1[6] = (uint64_t (*)())v7;
  return result;
}

__n128 EntityQuery.init(where:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  uint64_t EntityQuery;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  _OWORD v13[3];

  v3 = a1[1];
  v12 = *a1;
  v13[0] = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v13[1] = v3;
  v13[2] = v4;
  v10 = a1[2];
  v11 = v5;
  type metadata accessor for PredicateFactory();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 24) = 0;
  outlined retain of QueryPredicate<Entity>((uint64_t)v13);
  specialized PredicateFactory.enumerate<A>(_:)((uint64_t)v13);
  if (*(_QWORD *)(v6 + 24))
  {
    EntityQuery = REQueryCreateEntityQuery();
    swift_release();
    type metadata accessor for EntityQuery.Destructor();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = EntityQuery;
    outlined release of QueryPredicate<Entity>((uint64_t)v13);
  }
  else
  {
    swift_release();
    outlined release of QueryPredicate<Entity>((uint64_t)v13);
    v8 = 0;
  }
  *a2 = v12;
  a2[1] = v11;
  result = v10;
  a2[2] = v10;
  a2[3].n128_u64[0] = v8;
  return result;
}

uint64_t EntityQuery.Destructor.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    REEntityQueryDestroy();
  return swift_deallocClassInstance();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  LOBYTE(a2) = v3(a2);
  swift_release();
  return a2 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(uint64_t a1, void (*a2)(unsigned __int8 *__return_ptr, uint64_t *))
{
  unsigned __int8 v3;
  uint64_t v4;

  v4 = a1;
  a2(&v3, &v4);
  return v3;
}

uint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)v0;
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v3 = v1[2];
    if (v3)
    {
LABEL_4:
      v4 = v3 - 1;
      result = v1[v4 + 4];
      v1[2] = v4;
      *(_QWORD *)v0 = v1;
      return result;
    }
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    v1 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 16);
    if (v3)
      goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in makeCustomPredicate<A>(predicate:)(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t CustomEntityPredicate;
  _QWORD v9[6];

  v1 = *a1;
  v2 = swift_allocObject();
  *(_BYTE *)(v2 + 16) = v1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:);
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool);
  *(_QWORD *)(v4 + 24) = v3;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool);
  *(_QWORD *)(v5 + 24) = v4;
  v9[4] = partial apply for thunk #1 (_:) in createEntityPredicate(_:);
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  v9[3] = &block_descriptor_0;
  v6 = _Block_copy(v9);
  swift_retain();
  swift_release();
  CustomEntityPredicate = REQueryCreateCustomEntityPredicate();
  _Block_release(v6);
  swift_release();
  return CustomEntityPredicate;
}

uint64_t sub_21BA43398()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_21BA433B0()
{
  return swift_deallocObject();
}

uint64_t sub_21BA433C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in makeCustomPredicate<A>(predicate:)()
{
  uint64_t v0;

  return specialized closure #1 in makeCustomPredicate<A>(predicate:)((char *)(v0 + 16));
}

uint64_t type metadata accessor for EntityQuery.Destructor()
{
  return objc_opt_self();
}

uint64_t outlined retain of QueryPredicate<Entity>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of QueryPredicate<Entity>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void associated type witness table accessor for QueryProtocol.Predicate : QueryPredicateProtocol in Query<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t associated type witness table accessor for QueryProtocol.Selector : QuerySelector in Query<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

unint64_t lazy protocol witness table accessor for type QueryPredicate<Entity> and conformance QueryPredicate<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>;
  if (!lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for QueryPredicate<Entity>);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicate<A>, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type QueryPredicate<Entity> and conformance QueryPredicate<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for QueryProtocol.Selector : QuerySelector in EntityQuery()
{
  return &protocol witness table for EntityQuery.Selector;
}

uint64_t type metadata instantiation function for Query()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for Query()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Query(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = v11[3];
    v10[2] = v11[2];
    v10[3] = v13;
    v14 = v11[5];
    v10[4] = v11[4];
    v10[5] = v14;
    *(_QWORD *)(((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Query(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  v10 = v8[3];
  v7[2] = v8[2];
  v7[3] = v10;
  v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  *(_QWORD *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = v8[1];
  *v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  v10 = v8[3];
  v7[2] = v8[2];
  v7[3] = v10;
  swift_retain();
  swift_release();
  v11 = v8[5];
  v7[4] = v8[4];
  v7[5] = v11;
  swift_retain();
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (__int128 *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  v10 = v8[2];
  v7[1] = v8[1];
  v7[2] = v10;
  *v7 = v9;
  *(_QWORD *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  swift_release();
  v7[2] = v8[2];
  swift_release();
  *(_QWORD *)(((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Query(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BA439E0 + 4 * byte_21BE56D10[v10]))();
  }
}

void storeEnumTagSinglePayload for Query(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21BA43B60()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21BA43BE4);
}

void sub_21BA43B68(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21BA43B70);
  JUMPOUT(0x21BA43BE4);
}

void sub_21BA43BB0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BA43BE4);
}

void sub_21BA43BB8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BA43BE4);
}

uint64_t sub_21BA43BC0(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_WORD *)(v5 + v6) = 0;
  if (!a2)
    JUMPOUT(0x21BA43BE4);
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0)
      JUMPOUT(0x21BA43BE0);
    JUMPOUT(0x21BA43BCCLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for Query.Destructor()
{
  return swift_initClassMetadata2();
}

uint64_t destroy for EntityQuery()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for EntityQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for EntityQuery(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for EntityQuery(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityQuery()
{
  return &type metadata for EntityQuery;
}

ValueMetadata *type metadata accessor for EntityQuery.Selector()
{
  return &type metadata for EntityQuery.Selector;
}

uint64_t sub_21BA43E98()
{
  return swift_deallocObject();
}

uint64_t sub_21BA43EA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool)@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t (*v4)(uint64_t *);
  uint64_t result;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v6 = *a1;
  result = v4(&v6);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(unsigned __int8 *__return_ptr, uint64_t *);
  unsigned __int8 v4;
  uint64_t v5;

  v2 = *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16);
  v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t partial apply for thunk #1 (_:) in createEntityPredicate(_:)(uint64_t a1)
{
  uint64_t v1;

  return thunk #1 (_:) in createEntityPredicate(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t specialized PredicateFactory.connect<A>(_:from:to:)()
{
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
    return REQueryConnectEntityPredicates();
  else
    return REQueryConnectComponentPredicates();
}

RealityKit::__RKEntityEmphasisAnimationType_optional __swiftcall __RKEntityEmphasisAnimationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityKit::__RKEntityEmphasisAnimationType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of __RKEntityEmphasisAnimationType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static __RKEntityEmphasisAnimationType.allCases.getter()
{
  return &outlined read-only object #0 of static __RKEntityEmphasisAnimationType.allCases.getter;
}

uint64_t __RKEntityEmphasisAnimationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA44060 + 4 * byte_21BE56E80[*v0]))(7368560, 0xE300000000000000);
}

uint64_t sub_21BA44060()
{
  return 0x6B6E696C62;
}

uint64_t sub_21BA44074()
{
  return 0x65636E756F62;
}

uint64_t sub_21BA44088()
{
  return 1885957222;
}

uint64_t sub_21BA44098()
{
  return 0x74616F6C66;
}

uint64_t sub_21BA440AC()
{
  return 0x656C6767696ALL;
}

uint64_t sub_21BA440C0()
{
  return 0x65736C7570;
}

uint64_t sub_21BA440D4()
{
  return 1852403827;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityEmphasisAnimationType(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance __RKEntityEmphasisAnimationType()
{
  char *v0;

  specialized RawRepresentable<>._rawHashValue(seed:)(0, *v0);
}

void protocol witness for Hashable.hash(into:) in conformance __RKEntityEmphasisAnimationType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityEmphasisAnimationType(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

RealityKit::__RKEntityEmphasisAnimationType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityEmphasisAnimationType(Swift::String *a1)
{
  return __RKEntityEmphasisAnimationType.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityEmphasisAnimationType()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21BA44140 + 4 * byte_21BE56E88[*v0]))();
}

void sub_21BA44140(_QWORD *a1@<X8>)
{
  *a1 = 0x6B6E696C62;
  a1[1] = 0xE500000000000000;
}

void sub_21BA44158(_QWORD *a1@<X8>)
{
  *a1 = 0x65636E756F62;
  a1[1] = 0xE600000000000000;
}

void sub_21BA44170(_QWORD *a1@<X8>)
{
  *a1 = 1885957222;
  a1[1] = 0xE400000000000000;
}

void sub_21BA44184(_QWORD *a1@<X8>)
{
  *a1 = 0x74616F6C66;
  a1[1] = 0xE500000000000000;
}

void sub_21BA4419C(_QWORD *a1@<X8>)
{
  *a1 = 0x656C6767696ALL;
  a1[1] = 0xE600000000000000;
}

void sub_21BA441B4(_QWORD *a1@<X8>)
{
  *a1 = 0x65736C7570;
  a1[1] = 0xE500000000000000;
}

void sub_21BA441CC(_QWORD *a1@<X8>)
{
  *a1 = 1852403827;
  a1[1] = 0xE400000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityEmphasisAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityEmphasisAnimationType()
{
  lazy protocol witness table accessor for type __RKEntityEmphasisAnimationType and conformance __RKEntityEmphasisAnimationType();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKEntityEmphasisAnimationType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static __RKEntityEmphasisAnimationType.allCases.getter;
}

uint64_t __RKEntityEmphasisAction.__allocating_init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)(uint64_t a1, char *a2, char *a3, float a4, float a5)
{
  uint64_t v10;
  char v11;
  char v12;

  v10 = swift_allocObject();
  v11 = *a2;
  v12 = *a3;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  *(_OWORD *)(v10 + 184) = 0u;
  *(_QWORD *)(v10 + 200) = 0;
  *(_BYTE *)(v10 + 208) = 1;
  *(float *)(v10 + 108) = a4;
  *(float *)(v10 + 112) = a5;
  *(_BYTE *)(v10 + 116) = v11;
  *(_BYTE *)(v10 + 117) = v12;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityEmphasisAction.init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)(uint64_t a1, char *a2, char *a3, float a4, float a5)
{
  uint64_t v5;
  char v6;
  char v7;

  v6 = *a2;
  v7 = *a3;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)(v5 + 200) = 0;
  *(_BYTE *)(v5 + 208) = 1;
  *(float *)(v5 + 108) = a4;
  *(float *)(v5 + 112) = a5;
  *(_BYTE *)(v5 + 116) = v6;
  *(_BYTE *)(v5 + 117) = v7;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityEmphasisAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ServiceLocator;
  uint64_t v13;
  char v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v16 = 91;
  v17 = 0xE100000000000000;
  if (v2)
  {
    v18 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  if (!*(_QWORD *)(v0 + 16))
  {
    v10 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v16);
    goto LABEL_20;
  }
  v9 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) != 1 || *v9 != 1 || (swift_beginAccess(), *(_BYTE *)(v1 + 105) != 1))
  {
    swift_retain();
    if (!RESceneGetECSManagerNullable())
      goto LABEL_14;
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && RERigidBodyComponentGetMotionType() != 1)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        ServiceLocator = REECSManagerGetServiceLocator();
        MEMORY[0x22076FD58](ServiceLocator);
        RETransformComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          RETransformComponentGetLocalPose();
          RETransformComponentGetLocalPose();
          RETransformComponentGetLocalScale();
          v13 = *(_QWORD *)(v1 + 96);
          v14 = *(_BYTE *)(v1 + 104);
          *(_QWORD *)(v1 + 96) = 1;
          *(_BYTE *)(v1 + 104) = 1;
          v16 = v13;
          LOBYTE(v17) = v14;
          __RKEntityAction.state.didset((uint64_t)&v16);
          __asm { BR              X10 }
        }
      }
    }
    swift_release();
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_retain();
LABEL_14:
  v11 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v11, &v16);
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

void sub_21BA4468C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisBlinkAnimation.createBlinkAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4609;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C3CLL);
}

void sub_21BA446D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisBounceAnimation.createBounceAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4610;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C40);
}

void sub_21BA4471C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisFlipAnimation.createFlipAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4611;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C44);
}

void sub_21BA44764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisFloatAnimation.createFloatAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4612;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C48);
}

void sub_21BA447AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisJiggleAnimation.createJiggleAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4613;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C4CLL);
}

void sub_21BA447F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x2_t v11;
  float v12;
  float32x2_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v39 = va_arg(va1, _QWORD);
  v41 = va_arg(va1, _QWORD);
  v42 = va_arg(va1, _QWORD);
  v43 = va_arg(va1, _QWORD);
  v44 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v10)
  {
    LOBYTE(v39) = *(_BYTE *)(v5 + 116);
    v15 = specialized static __RKEmphasisSpinAnimation.createSpinAnimation(transform:localBoundingBox:_:variant:duration:)(v11, v12, v13, v14, *(float *)(v5 + 108), (uint64_t)va1, v10, (uint64_t *)va);
    v16 = specialized _arrayForceCast<A, B>(_:)(v15);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v16 + 16))
    {
      v17 = *(_QWORD *)(v16 + 32);
      swift_bridgeObjectRelease();
      if (v17)
      {
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        v34 = 5;
        v35 = 4615;
        v36 = "EMPHASIS";
        LOBYTE(v37) = 0;
        *(_QWORD *)(v5 + 200) = REAnimationComponentPlay();
        *(_BYTE *)(v5 + 208) = 0;
        RERelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v7;
    *(_QWORD *)(v19 + 32) = v30;
    *(_DWORD *)(v19 + 40) = v9;
    *(_BYTE *)(v19 + 44) = v8 == 0;
    v20 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v5 + 40) = v19;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = type metadata accessor for Entity();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v31[0] = v6;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 120);
    swift_endAccess();
    v32 = v21;
    v33 = &protocol witness table for Entity;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v31, 0, (char **)&v34);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>, (uint64_t)&protocol conformance descriptor for Scene.Publisher<A>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v37 = v25;
    v38 = MEMORY[0x24BDB9B58];
    swift_release();
    v34 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v31, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v34, v5 + 160);
    swift_endAccess();
    v29 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v34);
    swift_bridgeObjectRelease();
    swift_release();
    JUMPOUT(0x21BA4466CLL);
  }
  __break(1u);
  JUMPOUT(0x21BA44C50);
}

void sub_21BA4483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  float32x2_t v7;
  float v8;
  float32x2_t v9;
  float v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  REEntityComputeMeshBounds();
  if (v6)
  {
    LOBYTE(v11) = *(_BYTE *)(v5 + 116);
    specialized static __RKEmphasisPulseAnimation.createPulseAnimation(transform:localBoundingBox:_:variant:duration:)(v7, v8, v9, v10, *(float *)(v5 + 108), (uint64_t)va1, v6, (uint64_t *)va);
    JUMPOUT(0x21BA44880);
  }
  __break(1u);
  JUMPOUT(0x21BA44C54);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v9 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v4 = a1 + 32;
    v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      *(_QWORD *)(v2 + 16) = v6 + 1;
      *(_QWORD *)(v2 + 8 * v6 + 32) = v8;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray.reserveCapacity(_:)();
    v4 = a1 + 32;
    type metadata accessor for Entity();
    do
    {
      v4 += 16;
      swift_retain_n();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HasAnchoring);
      swift_dynamicCast();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v11 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v11;
    v4 = a1 + 40;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__RKMaterialParameterBlock.TransparentPass, Int));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (pass: __RKMaterialParameterBlock.TransparentPass, techniqueHash: Int));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v11;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v2 = v11;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      v7 = v2 + 16 * v6;
      *(_BYTE *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = a1;
  if (!(a1 >> 62))
  {
    v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CTLineRef(0);
    if (swift_dynamicCastMetatype())
      return v1;
    v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v1;
    v5 = 0;
    while (v5 < v4)
    {
      swift_unknownObjectRetain();
      if (!swift_dynamicCastUnknownClass())
      {
        swift_unknownObjectRelease();
        return v2 | 1;
      }
      ++v5;
      swift_unknownObjectRelease();
      v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v5 == v4)
        return v1;
    }
    __break(1u);
  }
  type metadata accessor for CTLineRef(0);
  swift_bridgeObjectRetain();
  v6 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in __RKEntityEmphasisAction.perform(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  _QWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = result;
    v7 = result + 120;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v7, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v7);
    swift_endAccess();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v6 + 160, (uint64_t)&v11);
    if (*((_QWORD *)&v12 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v11, (uint64_t)v9);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v9, v10);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v11, &demangling cache variable for type metadata for Cancellable?);
    }
    v13 = 0;
    v11 = 0u;
    v12 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v11, v6 + 160);
    swift_endAccess();
    if ((*(_BYTE *)(v6 + 208) & 1) == 0)
    {
      swift_beginAccess();
      if (*(_QWORD *)(v6 + 16))
      {
        swift_retain();
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          REAnimationComponentGetCurrentPlaybackTime();
          if (v8 < *(float *)(v6 + 108))
          {
            RETransformComponentGetLocalSRT();
            RETransformComponentSetLocalSRT();
            RENetworkMarkComponentDirty();
          }
        }
        REAnimationComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          if (REAnimationComponentHasRunningAnimations())
          {
            if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
              || (swift_beginAccess(), *(_BYTE *)(v6 + 104) == 1) && *(_QWORD *)(v6 + 96) == 3)
            {
              REAnimationComponentStopAllAnimations();
              RENetworkMarkComponentDirty();
            }
          }
        }
        swift_release();
        *(_QWORD *)(v6 + 200) = 0;
        *(_BYTE *)(v6 + 208) = 1;
      }
    }
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass() && (a4 & 0x100000000) == 0 && !(_DWORD)a4)
    {
      RERigidBodyComponentSetMotionType();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityEmphasisAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 208) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 200))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityEmphasisAction.reversed()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  v1 = *(_DWORD *)(v0 + 108);
  type metadata accessor for __RKEntityEmphasisAction();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_QWORD *)(v2 + 200) = 0;
  *(_BYTE *)(v2 + 208) = 1;
  *(_DWORD *)(v2 + 108) = v1;
  *(_DWORD *)(v2 + 112) = 1065353216;
  *(_WORD *)(v2 + 116) = 0;
  v3 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v3);
}

uint64_t __RKEntityEmphasisAction.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  __int128 v5;

  BYTE8(v5) = 0;
  v1._countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 2108704;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  *(_QWORD *)&v5 = *(unsigned __int8 *)(v0 + 117);
  _print_unlocked<A, B>(_:_:)();
  return *(_QWORD *)((char *)&v5 + 1);
}

uint64_t __RKEntityEmphasisAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_beginAccess();
  v3 = *(_WORD *)(v1 + 116);
  v4 = type metadata accessor for __RKEntityEmphasisAction();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 120) = 0u;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_OWORD *)(v5 + 152) = 0u;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)(v5 + 200) = 0;
  *(_BYTE *)(v5 + 208) = 1;
  *(_QWORD *)(v5 + 108) = *(_QWORD *)(v1 + 108);
  *(_WORD *)(v5 + 116) = v3;
  v6 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v6);
  a1[3] = v4;
  *a1 = result;
  return result;
}

uint64_t __RKEntityEmphasisAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = *(_WORD *)(v1 + 116);
    type metadata accessor for __RKEntityEmphasisAction();
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_QWORD *)(v6 + 200) = 0;
    *(_BYTE *)(v6 + 208) = 1;
    *(_QWORD *)(v6 + 108) = *(_QWORD *)(v1 + 108);
    *(_WORD *)(v6 + 116) = v5;
    v7 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v7);
  }
  else
  {
    __RKEntityEmphasisAction.copy(with:)(v9);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v8;
    else
      return 0;
  }
}

void __RKEntityEmphasisAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityEmphasisAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityEmphasisAction.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityEmphasisAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityEmphasisAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  outlined destroy of BodyTrackingComponent?(v0 + 120, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 160, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  ValueMetadata *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char **v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v80 = a2;
  v76 = a1;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>);
  v71 = *(_QWORD *)(v72 - 8);
  MEMORY[0x24BDAC7A8](v72);
  v70 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SynchronizationEvents.OwnershipResponse>);
  v73 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v75 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SynchronizationEvents.OwnershipResponse>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SynchronizationEvents.OwnershipResponse>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SynchronizationEvents.OwnershipResponse>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SynchronizationEvents.OwnershipResponse>);
  v78 = *(_QWORD *)(v16 - 8);
  v79 = (char *)v16;
  MEMORY[0x24BDAC7A8](v16);
  v77 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2())
    v18 = &type metadata for SynchronizationEvents.OwnershipResponse;
  else
    v18 = 0;
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v87);
    v19 = v89;
    v20 = v90;
    __swift_project_boxed_opaque_existential_1(&v87, v89);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v83 = 0;
    v81 = 0u;
    v82 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v81, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
    v22 = v84;
    v23 = v85;
    v24 = v86;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
    *(_QWORD *)&v87 = v22;
    *((_QWORD *)&v87 + 1) = v23;
    v88 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v25 = v77;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SynchronizationEvents.OwnershipResponse>>);
    v26 = (char *)swift_allocObject();
    result = (*(uint64_t (**)(char *, char *, char *))(v78 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v25, v79);
  }
  else
  {
    v78 = v9;
    v79 = v15;
    v77 = v11;
    v28 = v4;
    v30 = v75;
    v29 = v76;
    if (swift_conformsToProtocol2())
      v31 = &type metadata for SynchronizationEvents.OwnershipResponse;
    else
      v31 = 0;
    if (v31)
    {
      Scene.eventService.getter((uint64_t)&v87);
      v32 = v89;
      v33 = v90;
      __swift_project_boxed_opaque_existential_1(&v87, v89);
      v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v83 = 0;
      v81 = 0u;
      v82 = 0u;
      EventService.publisher<A>(for:on:)(v34, (uint64_t)&v81, v32, v34, v33);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
      v35 = v84;
      v36 = v85;
      v37 = v86;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
      *(_QWORD *)&v87 = v35;
      *((_QWORD *)&v87 + 1) = v36;
      v88 = v37;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      v38 = v79;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SynchronizationEvents.OwnershipResponse>>);
      v26 = (char *)swift_allocObject();
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v38, v12);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v39 = &type metadata for SynchronizationEvents.OwnershipResponse;
      else
        v39 = 0;
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v87);
        v40 = v89;
        v41 = v90;
        __swift_project_boxed_opaque_existential_1(&v87, v89);
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v83 = 0;
        v81 = 0u;
        v82 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v81, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
        v43 = v84;
        v44 = v85;
        v45 = v86;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
        *(_QWORD *)&v87 = v43;
        *((_QWORD *)&v87 + 1) = v44;
        v88 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
        v46 = v77;
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SynchronizationEvents.OwnershipResponse>>);
        v26 = (char *)swift_allocObject();
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v78 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v46, v8);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v47 = &type metadata for SynchronizationEvents.OwnershipResponse;
        else
          v47 = 0;
        if (v47)
        {
          Scene.eventService.getter((uint64_t)&v87);
          v48 = v89;
          v49 = v90;
          __swift_project_boxed_opaque_existential_1(&v87, v89);
          v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v83 = 0;
          v81 = 0u;
          v82 = 0u;
          EventService.publisher<A>(for:on:)(v50, (uint64_t)&v81, v48, v50, v49);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
          v51 = v84;
          v52 = v85;
          v53 = v86;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          *(_QWORD *)&v87 = v51;
          *((_QWORD *)&v87 + 1) = v52;
          v88 = v53;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SynchronizationEvents.OwnershipResponse>>);
          v26 = (char *)swift_allocObject();
          result = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v7, v28);
        }
        else
        {
          if (swift_conformsToProtocol2())
            v54 = &type metadata for SynchronizationEvents.OwnershipResponse;
          else
            v54 = 0;
          if (v54)
          {
            Scene.eventService.getter((uint64_t)&v87);
            v55 = v89;
            v56 = v90;
            __swift_project_boxed_opaque_existential_1(&v87, v89);
            v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
            v83 = 0;
            v81 = 0u;
            v82 = 0u;
            EventService.publisher<A>(for:on:)(v57, (uint64_t)&v81, v55, v57, v56);
            outlined destroy of BodyTrackingComponent?((uint64_t)&v81, &demangling cache variable for type metadata for EventSource?);
            v58 = v84;
            v59 = v85;
            v60 = v86;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            *(_QWORD *)&v87 = v58;
            *((_QWORD *)&v87 + 1) = v59;
            v88 = v60;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SynchronizationEvents.OwnershipResponse>>);
            v26 = (char *)swift_allocObject();
            result = (*(uint64_t (**)(char *, char *, uint64_t))(v73 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v30, v74);
          }
          else
          {
            Scene.eventService.getter((uint64_t)&v87);
            v61 = v89;
            v62 = v90;
            __swift_project_boxed_opaque_existential_1(&v87, v89);
            type metadata accessor for REOwnershipResponseEvent(0);
            EventService.publisher<A>(for:on:)(v63, v29, v61, v63, v62);
            v64 = v81;
            v65 = v82;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            static os_log_type_t.info.getter();
            type metadata accessor for OS_os_log();
            v66 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            swift_allocObject();
            swift_weakInit();
            v87 = v64;
            v88 = v65;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REOwnershipResponseEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REOwnershipResponseEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            v67 = v70;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REOwnershipResponseEvent>, SynchronizationEvents.OwnershipResponse>>);
            v26 = (char *)swift_allocObject();
            v68 = v71;
            v69 = v72;
            (*(void (**)(char *, char *, uint64_t))(v71 + 16))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v67, v72);
            swift_release();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
            result = swift_release();
          }
        }
      }
    }
  }
  *v80 = v26;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  ValueMetadata *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  ValueMetadata *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t (*v56)(char *, char *, _QWORD);
  char *v57;
  uint64_t *v58;
  ValueMetadata *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char **v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v86 = a2;
  v82 = a1;
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>);
  v81 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v80 = (char *)v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, CollisionEvents.Began>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v79 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, CollisionEvents.Began>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, CollisionEvents.Began>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, CollisionEvents.Began>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, CollisionEvents.Began>);
  v84 = *(_QWORD *)(v16 - 8);
  v85 = (char *)v16;
  MEMORY[0x24BDAC7A8](v16);
  v83 = (char *)v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2())
    v18 = &type metadata for CollisionEvents.Began;
  else
    v18 = 0;
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v93);
    v19 = v96;
    v20 = v97;
    __swift_project_boxed_opaque_existential_1(&v93, v96);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v87, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for EventSource?);
    v22 = v90;
    v23 = v91;
    v24 = v92;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
    v93 = v22;
    v94 = v23;
    v95 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v25 = v83;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, CollisionEvents.Began>>);
    v26 = (char *)swift_allocObject();
    result = (*(uint64_t (**)(char *, char *, char *))(v84 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v25, v85);
  }
  else
  {
    v84 = v9;
    v85 = v15;
    v83 = v11;
    v28 = v82;
    v75[0] = v5;
    v75[1] = v4;
    v29 = v79;
    v30 = v80;
    v31 = v81;
    if (swift_conformsToProtocol2())
      v32 = &type metadata for CollisionEvents.Began;
    else
      v32 = 0;
    if (v32)
    {
      Scene.eventService.getter((uint64_t)&v93);
      v33 = v96;
      v34 = v97;
      __swift_project_boxed_opaque_existential_1(&v93, v96);
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v89 = 0;
      v87 = 0u;
      v88 = 0u;
      EventService.publisher<A>(for:on:)(v35, (uint64_t)&v87, v33, v35, v34);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for EventSource?);
      v36 = v90;
      v37 = v91;
      v38 = v92;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
      v93 = v36;
      v94 = v37;
      v95 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      v39 = v85;
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, CollisionEvents.Began>>);
      v26 = (char *)swift_allocObject();
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v39, v12);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v40 = &type metadata for CollisionEvents.Began;
      else
        v40 = 0;
      if (v40)
      {
        Scene.eventService.getter((uint64_t)&v93);
        v41 = v96;
        v42 = v97;
        __swift_project_boxed_opaque_existential_1(&v93, v96);
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v89 = 0;
        v87 = 0u;
        v88 = 0u;
        EventService.publisher<A>(for:on:)(v43, (uint64_t)&v87, v41, v43, v42);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for EventSource?);
        v44 = v90;
        v45 = v91;
        v46 = v92;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
        v93 = v44;
        v94 = v45;
        v95 = v46;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
        v47 = v83;
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, CollisionEvents.Began>>);
        v26 = (char *)swift_allocObject();
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v84 + 32))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v47, v8);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v48 = &type metadata for CollisionEvents.Began;
        else
          v48 = 0;
        if (v48)
        {
          Scene.eventService.getter((uint64_t)&v93);
          v49 = v96;
          v50 = v97;
          __swift_project_boxed_opaque_existential_1(&v93, v96);
          v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v89 = 0;
          v87 = 0u;
          v88 = 0u;
          EventService.publisher<A>(for:on:)(v51, (uint64_t)&v87, v49, v51, v50);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for EventSource?);
          v52 = v90;
          v53 = v91;
          v54 = v92;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
          v93 = v52;
          v94 = v53;
          v95 = v54;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, CollisionEvents.Began>>);
          v26 = (char *)swift_allocObject();
          v55 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
          v56 = *(uint64_t (**)(char *, char *, _QWORD))(v75[0] + 32);
          v57 = v7;
          v58 = &v98;
        }
        else
        {
          if (swift_conformsToProtocol2())
            v59 = &type metadata for CollisionEvents.Began;
          else
            v59 = 0;
          if (!v59)
          {
            Scene.eventService.getter((uint64_t)&v93);
            v67 = v96;
            v66 = v97;
            __swift_project_boxed_opaque_existential_1(&v93, v96);
            type metadata accessor for RECollisionDidStartEventEx(0);
            EventService.publisher<A>(for:on:)(v68, v28, v67, v68, v66);
            v70 = *((_QWORD *)&v87 + 1);
            v69 = v87;
            v71 = v88;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
            v93 = v69;
            v94 = v70;
            v95 = v71;
            swift_retain();
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<RECollisionDidStartEventEx> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<RECollisionDidStartEventEx>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<RECollisionDidStartEventEx>, CollisionEvents.Began>>);
            v26 = (char *)swift_allocObject();
            v72 = v31;
            v73 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
            v74 = v76;
            v73(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v30, v76);
            swift_release();
            (*(void (**)(char *, uint64_t))(v72 + 8))(v30, v74);
            result = swift_release();
            goto LABEL_27;
          }
          Scene.eventService.getter((uint64_t)&v93);
          v60 = v96;
          v61 = v97;
          __swift_project_boxed_opaque_existential_1(&v93, v96);
          v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          v89 = 0;
          v87 = 0u;
          v88 = 0u;
          EventService.publisher<A>(for:on:)(v62, (uint64_t)&v87, v60, v62, v61);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for EventSource?);
          v63 = v90;
          v64 = v91;
          v65 = v92;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v93);
          v93 = v63;
          v94 = v64;
          v95 = v65;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, CollisionEvents.Began>>);
          v26 = (char *)swift_allocObject();
          v55 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
          v56 = *(uint64_t (**)(char *, char *, _QWORD))(v77 + 32);
          v57 = v29;
          v58 = &v99;
        }
        result = v56(v55, v57, *(v58 - 32));
      }
    }
  }
LABEL_27:
  *v86 = v26;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  ValueMetadata *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  ValueMetadata *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char **v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v87 = a2;
  v83 = a1;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v82 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Update>);
  v81 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v80 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Update>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Update>);
  v9 = *(char **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Update>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Update>);
  v85 = *(char **)(v16 - 8);
  v86 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v84 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2())
    v18 = &type metadata for SceneEvents.Update;
  else
    v18 = 0;
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v19 = v97;
    v20 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v88, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v22 = v91;
    v23 = v92;
    v24 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v22;
    v95 = v23;
    v96 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v25 = v84;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Update>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = (uint64_t (*)(char *, char *, uint64_t))*((_QWORD *)v85 + 4);
    v29 = v25;
LABEL_11:
    v42 = v86;
    goto LABEL_12;
  }
  v85 = v15;
  v86 = v12;
  v76 = v11;
  v84 = v9;
  v30 = v83;
  v75 = v4;
  v31 = v80;
  v33 = v81;
  v32 = v82;
  if (swift_conformsToProtocol2())
    v34 = &type metadata for SceneEvents.Update;
  else
    v34 = 0;
  if (v34)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v35 = v97;
    v36 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v37, (uint64_t)&v88, v35, v37, v36);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v38 = v91;
    v39 = v92;
    v40 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v38;
    v95 = v39;
    v96 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v41 = v85;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Update>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 32);
    v29 = v41;
    goto LABEL_11;
  }
  if (swift_conformsToProtocol2())
    v44 = &type metadata for SceneEvents.Update;
  else
    v44 = 0;
  if (v44)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v45 = v97;
    v46 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v47, (uint64_t)&v88, v45, v47, v46);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v48 = v91;
    v49 = v92;
    v50 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v48;
    v95 = v49;
    v96 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v51 = v76;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Update>>);
    v26 = (char *)swift_allocObject();
    result = (*((uint64_t (**)(char *, char *, uint64_t))v84 + 4))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v51, v8);
    goto LABEL_13;
  }
  if (swift_conformsToProtocol2())
    v52 = &type metadata for SceneEvents.Update;
  else
    v52 = 0;
  if (v52)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v53 = v97;
    v54 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v55, (uint64_t)&v88, v53, v55, v54);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v56 = v91;
    v57 = v92;
    v58 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v56;
    v95 = v57;
    v96 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Update>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
    v29 = v7;
    v59 = &v99;
  }
  else
  {
    if (swift_conformsToProtocol2())
      v60 = &type metadata for SceneEvents.Update;
    else
      v60 = 0;
    if (!v60)
    {
      Scene.engineEventService.getter(&v94);
      v68 = v97;
      v67 = v98;
      __swift_project_boxed_opaque_existential_1(&v94, v97);
      type metadata accessor for REEngineDoUpdateEvent(0);
      EventService.publisher<A>(for:on:)(v69, v30, v68, v69, v67);
      v71 = *((_QWORD *)&v88 + 1);
      v70 = v88;
      v72 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      swift_allocObject();
      swift_weakInit();
      v94 = v70;
      v95 = v71;
      v96 = v72;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoUpdateEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoUpdateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoUpdateEvent>, SceneEvents.Update>>);
      v26 = (char *)swift_allocObject();
      v73 = v77;
      v74 = v78;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v32, v78);
      swift_release();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v32, v74);
      result = swift_release();
      goto LABEL_13;
    }
    Scene.eventService.getter((uint64_t)&v94);
    v61 = v97;
    v62 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v63, (uint64_t)&v88, v61, v63, v62);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v64 = v91;
    v65 = v92;
    v66 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v64;
    v95 = v65;
    v96 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Update>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
    v29 = v31;
    v59 = &v100;
  }
  v42 = *(v59 - 32);
LABEL_12:
  result = v28(v27, v29, v42);
LABEL_13:
  *v87 = v26;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  ValueMetadata *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t (*v28)(char *, char *, uint64_t);
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t result;
  ValueMetadata *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  ValueMetadata *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  ValueMetadata *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char **v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v87 = a2;
  v83 = a1;
  v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x24BDAC7A8](v78);
  v82 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Render>);
  v81 = *(_QWORD *)(v79 - 8);
  MEMORY[0x24BDAC7A8](v79);
  v80 = (char *)&v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Render>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Render>);
  v9 = *(char **)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Render>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Render>);
  v85 = *(char **)(v16 - 8);
  v86 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v84 = (char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_conformsToProtocol2())
    v18 = &type metadata for SceneEvents.Render;
  else
    v18 = 0;
  if (v18)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v19 = v97;
    v20 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v21, (uint64_t)&v88, v19, v21, v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v22 = v91;
    v23 = v92;
    v24 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v22;
    v95 = v23;
    v96 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v25 = v84;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, SceneEvents.Render>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = (uint64_t (*)(char *, char *, uint64_t))*((_QWORD *)v85 + 4);
    v29 = v25;
LABEL_11:
    v42 = v86;
    goto LABEL_12;
  }
  v85 = v15;
  v86 = v12;
  v76 = v11;
  v84 = v9;
  v30 = v83;
  v75 = v4;
  v31 = v80;
  v33 = v81;
  v32 = v82;
  if (swift_conformsToProtocol2())
    v34 = &type metadata for SceneEvents.Render;
  else
    v34 = 0;
  if (v34)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v35 = v97;
    v36 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v37, (uint64_t)&v88, v35, v37, v36);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v38 = v91;
    v39 = v92;
    v40 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v38;
    v95 = v39;
    v96 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v41 = v85;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, SceneEvents.Render>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 32);
    v29 = v41;
    goto LABEL_11;
  }
  if (swift_conformsToProtocol2())
    v44 = &type metadata for SceneEvents.Render;
  else
    v44 = 0;
  if (v44)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v45 = v97;
    v46 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v47, (uint64_t)&v88, v45, v47, v46);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v48 = v91;
    v49 = v92;
    v50 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v48;
    v95 = v49;
    v96 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    v51 = v76;
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, SceneEvents.Render>>);
    v26 = (char *)swift_allocObject();
    result = (*((uint64_t (**)(char *, char *, uint64_t))v84 + 4))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v51, v8);
    goto LABEL_13;
  }
  if (swift_conformsToProtocol2())
    v52 = &type metadata for SceneEvents.Render;
  else
    v52 = 0;
  if (v52)
  {
    Scene.eventService.getter((uint64_t)&v94);
    v53 = v97;
    v54 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v55, (uint64_t)&v88, v53, v55, v54);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v56 = v91;
    v57 = v92;
    v58 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v56;
    v95 = v57;
    v96 = v58;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, SceneEvents.Render>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v5 + 32);
    v29 = v7;
    v59 = &v99;
  }
  else
  {
    if (swift_conformsToProtocol2())
      v60 = &type metadata for SceneEvents.Render;
    else
      v60 = 0;
    if (!v60)
    {
      Scene.engineEventService.getter(&v94);
      v68 = v97;
      v67 = v98;
      __swift_project_boxed_opaque_existential_1(&v94, v97);
      type metadata accessor for REEngineDoRenderEvent(0);
      EventService.publisher<A>(for:on:)(v69, v30, v68, v69, v67);
      v71 = *((_QWORD *)&v88 + 1);
      v70 = v88;
      v72 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
      swift_allocObject();
      swift_weakInit();
      v94 = v70;
      v95 = v71;
      v96 = v72;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REEngineDoRenderEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REEngineDoRenderEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REEngineDoRenderEvent>, SceneEvents.Render>>);
      v26 = (char *)swift_allocObject();
      v73 = v77;
      v74 = v78;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(&v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)], v32, v78);
      swift_release();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v32, v74);
      result = swift_release();
      goto LABEL_13;
    }
    Scene.eventService.getter((uint64_t)&v94);
    v61 = v97;
    v62 = v98;
    __swift_project_boxed_opaque_existential_1(&v94, v97);
    v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
    v90 = 0;
    v88 = 0u;
    v89 = 0u;
    EventService.publisher<A>(for:on:)(v63, (uint64_t)&v88, v61, v63, v62);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v88, &demangling cache variable for type metadata for EventSource?);
    v64 = v91;
    v65 = v92;
    v66 = v93;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v94);
    v94 = v64;
    v95 = v65;
    v96 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, SceneEvents.Render>>);
    v26 = (char *)swift_allocObject();
    v27 = &v26[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v26 + 16)];
    v28 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
    v29 = v31;
    v59 = &v100;
  }
  v42 = *(v59 - 32);
LABEL_12:
  result = v28(v27, v29, v42);
LABEL_13:
  *v87 = v26;
  return result;
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, char **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  ValueMetadata *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v72 = a1;
  v83 = a3;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>);
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackTerminated>);
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackTerminated>);
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackTerminated>);
  v9 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackTerminated>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackTerminated>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    v71 = *(_QWORD *)(a2 + 16);
  else
    v71 = 0;
  if (swift_conformsToProtocol2())
    v20 = &type metadata for AnimationEvents.PlaybackTerminated;
  else
    v20 = 0;
  if (v20)
  {
    Scene.eventService.getter((uint64_t)&v90);
    v21 = v93;
    v22 = v94;
    __swift_project_boxed_opaque_existential_1(&v90, v93);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    EventService.publisher<A>(for:on:)(v23, (uint64_t)&v84, v21, v23, v22);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
    v24 = v87;
    v25 = v88;
    v26 = v89;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    v90 = v24;
    v91 = v25;
    v92 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackTerminated>>);
    v27 = (char *)swift_allocObject();
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v19, v16);
  }
  else
  {
    if (swift_conformsToProtocol2())
      v29 = &type metadata for AnimationEvents.PlaybackTerminated;
    else
      v29 = 0;
    if (v29)
    {
      Scene.eventService.getter((uint64_t)&v90);
      v30 = v93;
      v31 = v94;
      __swift_project_boxed_opaque_existential_1(&v90, v93);
      v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v86 = 0;
      v84 = 0u;
      v85 = 0u;
      EventService.publisher<A>(for:on:)(v32, (uint64_t)&v84, v30, v32, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
      v33 = v87;
      v34 = v88;
      v35 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      v90 = v33;
      v91 = v34;
      v92 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackTerminated>>);
      v27 = (char *)swift_allocObject();
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v15, v12);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v36 = &type metadata for AnimationEvents.PlaybackTerminated;
      else
        v36 = 0;
      if (v36)
      {
        Scene.eventService.getter((uint64_t)&v90);
        v37 = v93;
        v38 = v94;
        __swift_project_boxed_opaque_existential_1(&v90, v93);
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v86 = 0;
        v84 = 0u;
        v85 = 0u;
        EventService.publisher<A>(for:on:)(v39, (uint64_t)&v84, v37, v39, v38);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
        v40 = v87;
        v41 = v88;
        v42 = v89;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
        v90 = v40;
        v91 = v41;
        v92 = v42;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackTerminated>>);
        v27 = (char *)swift_allocObject();
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v11, v82);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v43 = &type metadata for AnimationEvents.PlaybackTerminated;
        else
          v43 = 0;
        if (v43)
        {
          Scene.eventService.getter((uint64_t)&v90);
          v44 = v93;
          v45 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v86 = 0;
          v84 = 0u;
          v85 = 0u;
          EventService.publisher<A>(for:on:)(v46, (uint64_t)&v84, v44, v46, v45);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          v47 = v87;
          v48 = v88;
          v49 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          v90 = v47;
          v91 = v48;
          v92 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v50 = v79;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackTerminated>>);
          v27 = (char *)swift_allocObject();
          v51 = &v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)];
          v53 = v80;
          v52 = v81;
        }
        else
        {
          if (swift_conformsToProtocol2())
            v54 = &type metadata for AnimationEvents.PlaybackTerminated;
          else
            v54 = 0;
          if (!v54)
          {
            Scene.eventService.getter((uint64_t)&v90);
            v61 = v93;
            v62 = v94;
            __swift_project_boxed_opaque_existential_1(&v90, v93);
            type metadata accessor for REAnimationHasTerminatedEvent(0);
            EventService.publisher<A>(for:on:)(v63, v72, v61, v63, v62);
            v65 = *((_QWORD *)&v84 + 1);
            v64 = v84;
            v66 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            *(_QWORD *)(swift_allocObject() + 16) = v71;
            v90 = v64;
            v91 = v65;
            v92 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasTerminatedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasTerminatedEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            v67 = v73;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasTerminatedEvent>, AnimationEvents.PlaybackTerminated>>);
            v27 = (char *)swift_allocObject();
            v68 = v74;
            v69 = v75;
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v67, v75);
            swift_release();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
            result = swift_release();
            goto LABEL_30;
          }
          Scene.eventService.getter((uint64_t)&v90);
          v55 = v93;
          v56 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          v86 = 0;
          v84 = 0u;
          v85 = 0u;
          EventService.publisher<A>(for:on:)(v57, (uint64_t)&v84, v55, v57, v56);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          v58 = v87;
          v59 = v88;
          v60 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          v90 = v58;
          v91 = v59;
          v92 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v50 = v76;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackTerminated>>);
          v27 = (char *)swift_allocObject();
          v51 = &v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)];
          v53 = v77;
          v52 = v78;
        }
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))(v51, v50, v52);
      }
    }
  }
LABEL_30:
  *v83 = v27;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  ValueMetadata *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  ValueMetadata *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  ValueMetadata *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  ValueMetadata *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  ValueMetadata *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char **v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v72 = a1;
  v83 = a3;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>);
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x24BDAC7A8](v75);
  v73 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackCompleted>);
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackCompleted>);
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v79 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackCompleted>);
  v9 = *(_QWORD *)(v82 - 8);
  MEMORY[0x24BDAC7A8](v82);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackCompleted>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackCompleted>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    v71 = *(_QWORD *)(a2 + 16);
  else
    v71 = 0;
  if (swift_conformsToProtocol2())
    v20 = &type metadata for AnimationEvents.PlaybackCompleted;
  else
    v20 = 0;
  if (v20)
  {
    Scene.eventService.getter((uint64_t)&v90);
    v21 = v93;
    v22 = v94;
    __swift_project_boxed_opaque_existential_1(&v90, v93);
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v86 = 0;
    v84 = 0u;
    v85 = 0u;
    EventService.publisher<A>(for:on:)(v23, (uint64_t)&v84, v21, v23, v22);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
    v24 = v87;
    v25 = v88;
    v26 = v89;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
    v90 = v24;
    v91 = v25;
    v92 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, AnimationEvents.PlaybackCompleted>>);
    v27 = (char *)swift_allocObject();
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v19, v16);
  }
  else
  {
    if (swift_conformsToProtocol2())
      v29 = &type metadata for AnimationEvents.PlaybackCompleted;
    else
      v29 = 0;
    if (v29)
    {
      Scene.eventService.getter((uint64_t)&v90);
      v30 = v93;
      v31 = v94;
      __swift_project_boxed_opaque_existential_1(&v90, v93);
      v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v86 = 0;
      v84 = 0u;
      v85 = 0u;
      EventService.publisher<A>(for:on:)(v32, (uint64_t)&v84, v30, v32, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
      v33 = v87;
      v34 = v88;
      v35 = v89;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
      v90 = v33;
      v91 = v34;
      v92 = v35;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, AnimationEvents.PlaybackCompleted>>);
      v27 = (char *)swift_allocObject();
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v15, v12);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v36 = &type metadata for AnimationEvents.PlaybackCompleted;
      else
        v36 = 0;
      if (v36)
      {
        Scene.eventService.getter((uint64_t)&v90);
        v37 = v93;
        v38 = v94;
        __swift_project_boxed_opaque_existential_1(&v90, v93);
        v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v86 = 0;
        v84 = 0u;
        v85 = 0u;
        EventService.publisher<A>(for:on:)(v39, (uint64_t)&v84, v37, v39, v38);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
        v40 = v87;
        v41 = v88;
        v42 = v89;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
        v90 = v40;
        v91 = v41;
        v92 = v42;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, AnimationEvents.PlaybackCompleted>>);
        v27 = (char *)swift_allocObject();
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v11, v82);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v43 = &type metadata for AnimationEvents.PlaybackCompleted;
        else
          v43 = 0;
        if (v43)
        {
          Scene.eventService.getter((uint64_t)&v90);
          v44 = v93;
          v45 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v86 = 0;
          v84 = 0u;
          v85 = 0u;
          EventService.publisher<A>(for:on:)(v46, (uint64_t)&v84, v44, v46, v45);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          v47 = v87;
          v48 = v88;
          v49 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          v90 = v47;
          v91 = v48;
          v92 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v50 = v79;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, AnimationEvents.PlaybackCompleted>>);
          v27 = (char *)swift_allocObject();
          v51 = &v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)];
          v53 = v80;
          v52 = v81;
        }
        else
        {
          if (swift_conformsToProtocol2())
            v54 = &type metadata for AnimationEvents.PlaybackCompleted;
          else
            v54 = 0;
          if (!v54)
          {
            Scene.eventService.getter((uint64_t)&v90);
            v61 = v93;
            v62 = v94;
            __swift_project_boxed_opaque_existential_1(&v90, v93);
            type metadata accessor for REAnimationHasCompletedEvent(0);
            EventService.publisher<A>(for:on:)(v63, v72, v61, v63, v62);
            v65 = *((_QWORD *)&v84 + 1);
            v64 = v84;
            v66 = v85;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
            *(_QWORD *)(swift_allocObject() + 16) = v71;
            v90 = v64;
            v91 = v65;
            v92 = v66;
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<REAnimationHasCompletedEvent> and conformance Scene.CorePublisher<A>, (uint64_t *)&demangling cache variable for type metadata for Scene.CorePublisher<REAnimationHasCompletedEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            v67 = v73;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REAnimationHasCompletedEvent>, AnimationEvents.PlaybackCompleted>>);
            v27 = (char *)swift_allocObject();
            v68 = v74;
            v69 = v75;
            (*(void (**)(char *, char *, uint64_t))(v74 + 16))(&v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)], v67, v75);
            swift_release();
            (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
            result = swift_release();
            goto LABEL_30;
          }
          Scene.eventService.getter((uint64_t)&v90);
          v55 = v93;
          v56 = v94;
          __swift_project_boxed_opaque_existential_1(&v90, v93);
          v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          v86 = 0;
          v84 = 0u;
          v85 = 0u;
          EventService.publisher<A>(for:on:)(v57, (uint64_t)&v84, v55, v57, v56);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v84, &demangling cache variable for type metadata for EventSource?);
          v58 = v87;
          v59 = v88;
          v60 = v89;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v90);
          v90 = v58;
          v91 = v59;
          v92 = v60;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v50 = v76;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, AnimationEvents.PlaybackCompleted>>);
          v27 = (char *)swift_allocObject();
          v51 = &v27[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v27 + 16)];
          v53 = v77;
          v52 = v78;
        }
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v53 + 32))(v51, v50, v52);
      }
    }
  }
LABEL_30:
  *v83 = v27;
  return result;
}

uint64_t specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t result;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  ValueMetadata *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  ValueMetadata *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  ValueMetadata *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char **v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v80 = a3;
  v79 = a2;
  v78 = a1;
  v91 = a5;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>);
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v81 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, ComponentEvents.WillDeactivate>);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v84 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, ComponentEvents.WillDeactivate>);
  v88 = *(_QWORD *)(v9 - 8);
  v89 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v87 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, ComponentEvents.WillDeactivate>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, ComponentEvents.WillDeactivate>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, ComponentEvents.WillDeactivate>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
    v77 = *(_QWORD *)(a4 + 16);
  else
    v77 = 0;
  if (swift_conformsToProtocol2())
    v23 = &type metadata for ComponentEvents.WillDeactivate;
  else
    v23 = 0;
  if (v23)
  {
    Scene.eventService.getter((uint64_t)&v98);
    v24 = v101;
    v25 = v102;
    __swift_project_boxed_opaque_existential_1(&v98, v101);
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityActivateEvent);
    v94 = 0;
    v92 = 0u;
    v93 = 0u;
    EventService.publisher<A>(for:on:)(v26, (uint64_t)&v92, v24, v26, v25);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v92, &demangling cache variable for type metadata for EventSource?);
    v27 = v95;
    v28 = v96;
    v29 = v97;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
    v98 = v27;
    v99 = v28;
    v100 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityActivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityActivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
    Publisher.compactMap<A>(_:)();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityActivateEvent>, ComponentEvents.WillDeactivate>>);
    v30 = (char *)swift_allocObject();
    result = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(&v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)], v22, v19);
  }
  else
  {
    if (swift_conformsToProtocol2())
      v32 = &type metadata for ComponentEvents.WillDeactivate;
    else
      v32 = 0;
    if (v32)
    {
      Scene.eventService.getter((uint64_t)&v98);
      v33 = v101;
      v34 = v102;
      __swift_project_boxed_opaque_existential_1(&v98, v101);
      v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent);
      v94 = 0;
      v92 = 0u;
      v93 = 0u;
      EventService.publisher<A>(for:on:)(v35, (uint64_t)&v92, v33, v35, v34);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v92, &demangling cache variable for type metadata for EventSource?);
      v36 = v95;
      v37 = v96;
      v38 = v97;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
      v98 = v36;
      v99 = v37;
      v100 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>);
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityIncrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityIncrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
      Publisher.compactMap<A>(_:)();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityIncrementEvent>, ComponentEvents.WillDeactivate>>);
      v30 = (char *)swift_allocObject();
      result = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 32))(&v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)], v18, v15);
    }
    else
    {
      if (swift_conformsToProtocol2())
        v39 = &type metadata for ComponentEvents.WillDeactivate;
      else
        v39 = 0;
      if (v39)
      {
        Scene.eventService.getter((uint64_t)&v98);
        v40 = v101;
        v41 = v102;
        __swift_project_boxed_opaque_existential_1(&v98, v101);
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AccessibilityDecrementEvent);
        v94 = 0;
        v92 = 0u;
        v93 = 0u;
        EventService.publisher<A>(for:on:)(v42, (uint64_t)&v92, v40, v42, v41);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v92, &demangling cache variable for type metadata for EventSource?);
        v43 = v95;
        v44 = v96;
        v45 = v97;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
        v98 = v43;
        v99 = v44;
        v100 = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>);
        lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityDecrementEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityDecrementEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
        Publisher.compactMap<A>(_:)();
        swift_release();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityDecrementEvent>, ComponentEvents.WillDeactivate>>);
        v30 = (char *)swift_allocObject();
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(&v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)], v14, v11);
      }
      else
      {
        if (swift_conformsToProtocol2())
          v46 = &type metadata for ComponentEvents.WillDeactivate;
        else
          v46 = 0;
        if (v46)
        {
          Scene.eventService.getter((uint64_t)&v98);
          v47 = v101;
          v48 = v102;
          __swift_project_boxed_opaque_existential_1(&v98, v101);
          v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent);
          v94 = 0;
          v92 = 0u;
          v93 = 0u;
          EventService.publisher<A>(for:on:)(v49, (uint64_t)&v92, v47, v49, v48);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v92, &demangling cache variable for type metadata for EventSource?);
          v50 = v95;
          v51 = v96;
          v52 = v97;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
          v98 = v50;
          v99 = v51;
          v100 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityCustomActionEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityCustomActionEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v53 = v87;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityCustomActionEvent>, ComponentEvents.WillDeactivate>>);
          v30 = (char *)swift_allocObject();
          v54 = &v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)];
          v56 = v88;
          v55 = v89;
        }
        else
        {
          if (swift_conformsToProtocol2())
            v57 = &type metadata for ComponentEvents.WillDeactivate;
          else
            v57 = 0;
          if (!v57)
          {
            v64 = v90;
            Scene.eventService.getter((uint64_t)&v98);
            v65 = v101;
            v66 = v102;
            __swift_project_boxed_opaque_existential_1(&v98, v101);
            type metadata accessor for REComponentWillDeactivateEvent(0);
            (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 8))(&v92, v67, v78, v79, v80, v67, v65, v66);
            v69 = *((_QWORD *)&v92 + 1);
            v68 = v92;
            v70 = v93;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
            v71 = swift_allocObject();
            v72 = v77;
            *(_QWORD *)(v71 + 16) = v64;
            *(_QWORD *)(v71 + 24) = v72;
            v98 = v68;
            v99 = v69;
            v100 = v70;
            swift_retain();
            swift_retain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>);
            lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type Scene.CorePublisher<REComponentWillDeactivateEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<REComponentWillDeactivateEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
            v73 = v81;
            Publisher.compactMap<A>(_:)();
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<REComponentWillDeactivateEvent>, ComponentEvents.WillDeactivate>>);
            v30 = (char *)swift_allocObject();
            v74 = v82;
            v75 = v83;
            (*(void (**)(char *, char *, uint64_t))(v82 + 16))(&v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)], v73, v83);
            swift_release();
            (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
            result = swift_release();
            goto LABEL_30;
          }
          Scene.eventService.getter((uint64_t)&v98);
          v58 = v101;
          v59 = v102;
          __swift_project_boxed_opaque_existential_1(&v98, v101);
          v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent);
          v94 = 0;
          v92 = 0u;
          v93 = 0u;
          EventService.publisher<A>(for:on:)(v60, (uint64_t)&v92, v58, v60, v59);
          outlined destroy of BodyTrackingComponent?((uint64_t)&v92, &demangling cache variable for type metadata for EventSource?);
          v61 = v95;
          v62 = v96;
          v63 = v97;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v98);
          v98 = v61;
          v99 = v62;
          v100 = v63;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>);
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.CorePublisher<AccessibilityRotorNavigationEvent> and conformance Scene.CorePublisher<A>, &demangling cache variable for type metadata for Scene.CorePublisher<AccessibilityRotorNavigationEvent>, (uint64_t)&protocol conformance descriptor for Scene.CorePublisher<A>);
          v53 = v84;
          Publisher.compactMap<A>(_:)();
          swift_release();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PublisherBox<Publishers.CompactMap<Scene.CorePublisher<AccessibilityRotorNavigationEvent>, ComponentEvents.WillDeactivate>>);
          v30 = (char *)swift_allocObject();
          v54 = &v30[*(_QWORD *)(*MEMORY[0x24BDB9B10] + *(_QWORD *)v30 + 16)];
          v56 = v85;
          v55 = v86;
        }
        result = (*(uint64_t (**)(char *, char *, uint64_t))(v56 + 32))(v54, v53, v55);
      }
    }
  }
LABEL_30:
  *v91 = v30;
  return result;
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

uint64_t specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityActivateEvent, a2);
}

uint64_t specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    *a3 = 0;
  return result;
}

{
  uint64_t result;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

{
  uint64_t result;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

double specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(_BYTE *)(a3 + 48) = 0;
    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

double specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  double result;
  _BYTE v6[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  if ((swift_dynamicCast() & 1) == 0)
  {
    result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t specialized closure #2 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityIncrementEvent, a2);
}

double specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

double specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

uint64_t specialized closure #3 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, &demangling cache variable for type metadata for AccessibilityDecrementEvent, a2);
}

double specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

double specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

uint64_t specialized closure #4 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityCustomActionEvent, a2);
}

double specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

double specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t specialized closure #5 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

{
  return specialized closure #1 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, (uint64_t *)&demangling cache variable for type metadata for AccessibilityRotorNavigationEvent, a2);
}

uint64_t specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3;

  v3 = *a1;
  return a2(&v3);
}

uint64_t sub_21BA4A1FC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BA4A220()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in __RKEntityEmphasisAction.perform(with:)()
{
  uint64_t v0;

  return specialized closure #1 in __RKEntityEmphasisAction.perform(with:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

uint64_t partial apply for closure #2 in __RKEntityEmphasisAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityEmphasisAction.perform(with:)(a1);
}

uint64_t sub_21BA4A288()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = *a1;
  return v2(&v4);
}

uint64_t type metadata accessor for __RKEntityEmphasisAction()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKEntityEmphasisAnimationType()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKEntityEmphasisAnimationType] and conformance [A], &demangling cache variable for type metadata for [__RKEntityEmphasisAnimationType], MEMORY[0x24BEE12E0]);
}

uint64_t getEnumTagSinglePayload for __RKEntityEmphasisAnimationType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityEmphasisAnimationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_21BA4A450 + 4 * byte_21BE56E95[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_21BA4A484 + 4 * byte_21BE56E90[v4]))();
}

uint64_t sub_21BA4A484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA4A48C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA4A494);
  return result;
}

uint64_t sub_21BA4A4A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA4A4A8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_21BA4A4AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA4A4B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityEmphasisAnimationType()
{
  return &type metadata for __RKEntityEmphasisAnimationType;
}

uint64_t method lookup function for __RKEntityEmphasisAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityEmphasisAction.__allocating_init(targetEntity:duration:iterations:animationStyle:emphasisAnimationType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 744))();
}

uint64_t sub_21BA4A528()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #32 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  uint64_t v1;

  return closure #32 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  uint64_t v1;

  return closure #20 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, v1);
}

uint64_t partial apply for closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #27 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t partial apply for closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #8 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1);
}

uint64_t sub_21BA4A56C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #18 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(uint64_t a1)
{
  uint64_t v1;

  return closure #16 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_21BA4A584()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)@<X0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #7 in Scene.publisher<A>(for:on:componentType:rootEntity:matching:)(a1, a2);
}

uint64_t Entity.stateMachineController.getter()
{
  uint64_t v0;
  uint64_t Component;

  swift_retain();
  Component = REEntityGetComponent();
  swift_release();
  if (Component)
  {
    type metadata accessor for StateMachineController();
    Component = swift_allocObject();
    *(_QWORD *)(Component + 16) = v0;
    swift_retain();
  }
  return Component;
}

uint64_t Scene.__sceneIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_beginAccess();
  if (static __RKSceneUUIDComponent.registration
    && (RESceneGetComponentsOfCustomType(), v2)
    && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    v5 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
  }
}

uint64_t __RKSceneUUIDComponent.uuid.setter(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuid:)();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v8(a1, v4);
    return ((uint64_t (*)(char *, uint64_t))v8)(v7, v4);
  }
  else
  {
    v10 = UUID.uuid.getter();
    v11 = v10;
    v13 = v12;
    v14 = v10 >> 8;
    v15 = v10 >> 16;
    v16 = v10 >> 24;
    v19 = HIDWORD(v10);
    v20 = v10 >> 40;
    v21 = HIWORD(v10);
    v22 = HIBYTE(v10);
    v23 = v12 >> 8;
    v24 = v12 >> 16;
    v25 = v12 >> 24;
    v26 = HIDWORD(v12);
    v29 = HIWORD(v12);
    v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v27 = v12 >> 40;
    v28 = HIBYTE(v12);
    v17(a1, v4);
    result = ((uint64_t (*)(char *, uint64_t))v17)(v7, v4);
    *v2 = v11;
    v2[1] = v14;
    v2[2] = v15;
    v2[3] = v16;
    v2[4] = v19;
    v2[5] = v20;
    v2[6] = v21;
    v2[7] = v22;
    v2[8] = v13;
    v2[9] = v23;
    v2[10] = v24;
    v2[11] = v25;
    v2[12] = v26;
    v2[13] = v27;
    v2[14] = v29;
    v2[15] = v28;
  }
  return result;
}

uint64_t __RKSceneUUIDComponent.Registration.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RKSceneUUIDComponent.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  int v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberCStyleArrayDataTypeWithTag(), (v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(_QWORD *)(v0 + 16) = v1;
  v4 = xmmword_21BE570D0;
  v5 = 1;
  v6 = &v4;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v11 = v1;
  v12 = 0;
  v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 24) = v2;
  REStructBuilderDestroy();
  return v0;
}

uint64_t __RKSceneUUIDComponent.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKSceneUUIDComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __RKSceneUUIDComponent.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKSceneUUIDComponent.registration.setter(void *a1)
{
  swift_beginAccess();
  static __RKSceneUUIDComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKSceneUUIDComponent.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t key path setter for Scene.__sceneIdentifier : Scene(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UUID?(a1, (uint64_t)v4);
  return Scene.__sceneIdentifier.setter((uint64_t)v4);
}

uint64_t Scene.__sceneIdentifier.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  char *EntitiesArray;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - v11;
  swift_beginAccess();
  if (!static __RKSceneUUIDComponent.registration)
    return outlined destroy of UUID?(a1);
  v13 = *((_QWORD *)static __RKSceneUUIDComponent.registration + 3);
  outlined init with copy of UUID?(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5);
    if (REEntityGetCustomComponent())
      REEntityRemoveComponentByClass();
    return outlined destroy of UUID?(a1);
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
  RESceneGetComponentsOfCustomType();
  if (v15 >= 1)
    goto LABEL_16;
  EntitiesArray = (char *)RESceneGetEntitiesArray();
  v18 = specialized _copyCollectionToContiguousArray<A>(_:)(EntitiesArray, v17);
  if (*(_QWORD *)(v18 + 16))
  {
    v19 = *(_QWORD *)(v18 + 32);
  }
  else
  {
    swift_release();
    specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Scene.__sceneIdentifier.setter);
    v21 = specialized AnchorEntity.__allocating_init(world:)(v20);
    swift_retain();
    specialized Scene.AnchorCollection.append(_:)(v21, v1);
    swift_release();
    v19 = *(_QWORD *)(v21 + 16);
  }
  swift_release();
  if (MEMORY[0x22076CF2C](v19, v13))
  {
LABEL_16:
    if (RECustomComponentGetObject())
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
      __RKSceneUUIDComponent.uuid.setter((uint64_t)v9);
    }
  }
  outlined destroy of UUID?(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
}

void (*Scene.__sceneIdentifier.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __RKSceneUUIDComponent.registration
    && (RESceneGetComponentsOfCustomType(), v6)
    && RECustomComponentGetObject())
  {
    UUID.init(uuid:)();
    v7 = type metadata accessor for UUID();
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 0, 1, v7);
  }
  else
  {
    v8 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
  }
  return Scene.__sceneIdentifier.modify;
}

void Scene.__sceneIdentifier.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 32);
  v4 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of UUID?((uint64_t)v4, (uint64_t)v3);
    Scene.__sceneIdentifier.setter((uint64_t)v3);
    outlined destroy of UUID?((uint64_t)v4);
  }
  else
  {
    Scene.__sceneIdentifier.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v2);
}

void specialized Scene.AnchorCollection.append(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;

  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
    goto LABEL_6;
  v5 = SceneNullable;
  v6 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v6)
  {
    v7 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    v7 = Scene.init(coreScene:)(v5);
  }
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  swift_release();
  if (v8 != v9)
  {
LABEL_6:
    RESceneAddEntity();
    if (swift_conformsToProtocol2())
      v10 = a1;
    else
      v10 = 0;
    if (v10)
    {
      swift_beginAccess();
      v11 = static RealityFusionSession.sharedSession;
      if (static RealityFusionSession.sharedSession)
      {
        swift_beginAccess();
        if (v11[2])
        {
          swift_retain();
          v12 = (id)RFServiceManagerGetAnchorManagementService();
          if (v12)
          {
            v13 = v12;
            RFAnchorManagementUpdateAnchoringInScene();

          }
          swift_release();
        }
      }
    }
    Entity.updateSceneGravityIfNeeded()();
  }
}

uint64_t specialized SIMD.init<A>(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 2;
    if ((unint64_t)(v1 - 1) < 2)
      v3 = v1 - 1;
    v4 = 0;
    do
    {
      if ((unint64_t)(v1 - 1) > 1)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v2 & 1))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKSceneUUIDComponent()
{
  return &protocol witness table for __RKSceneUUIDComponent.Registration;
}

uint64_t sub_21BA4B1F8@<X0>(uint64_t a1@<X8>)
{
  return Scene.__sceneIdentifier.getter(a1);
}

__n128 __swift_memcpy16_1(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for __RKSceneUUIDComponent()
{
  return &type metadata for __RKSceneUUIDComponent;
}

uint64_t type metadata accessor for __RKSceneUUIDComponent.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKSceneUUIDComponent.Registration()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKSceneUUIDComponent.Registration.RegistrationError, &type metadata for __RKSceneUUIDComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKSceneUUIDComponent.Registration.RegistrationError, &type metadata for __RKSceneUUIDComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKSceneUUIDComponent.Registration.RegistrationError and conformance __RKSceneUUIDComponent.Registration.RegistrationError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCEA98], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKSceneUUIDComponent.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA4B3A0 + 4 * byte_21BE570E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA4B3C0 + 4 * byte_21BE570E5[v4]))();
}

_BYTE *sub_21BA4B3A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA4B3C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA4B3C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA4B3D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA4B3D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA4B3E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKSceneUUIDComponent.Registration.RegistrationError()
{
  return &type metadata for __RKSceneUUIDComponent.Registration.RegistrationError;
}

BOOL static NetworkCompatibilityToken.Compatibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NetworkCompatibilityToken.Compatibility.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int NetworkCompatibilityToken.Compatibility.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for local()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for NetworkCompatibilityToken();
  v0 = swift_allocObject();
  result = RENetCompatibilityCreateLocalToken();
  *(_QWORD *)(v0 + 16) = result;
  static NetworkCompatibilityToken.local = v0;
  return result;
}

uint64_t static NetworkCompatibilityToken.local.getter()
{
  if (one-time initialization token for local != -1)
    swift_once();
  return swift_retain();
}

uint64_t NetworkCompatibilityToken.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t NetworkCompatibilityToken.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t NetworkCompatibilityToken.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  NetworkCompatibilityToken.init(from:)(a1);
  return v2;
}

uint64_t NetworkCompatibilityToken.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  Class isa;
  uint64_t TokenFromData;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[4];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    isa = Data._bridgeToObjectiveC()().super.isa;
    TokenFromData = RENetCompatibilityCreateTokenFromData();

    if (TokenFromData)
    {
      outlined consume of Data._Representation(v7, v8);
      *(_QWORD *)(v1 + 16) = TokenFromData;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      goto LABEL_5;
    }
    lazy protocol witness table accessor for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError();
    swift_allocError();
    swift_willThrow();
    outlined consume of Data._Representation(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  swift_deallocPartialClassInstance();
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkCompatibilityToken.DeserializationError, &type metadata for NetworkCompatibilityToken.DeserializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkCompatibilityToken.DeserializationError, &type metadata for NetworkCompatibilityToken.DeserializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.DeserializationError and conformance NetworkCompatibilityToken.DeserializationError);
  }
  return result;
}

uint64_t NetworkCompatibilityToken.encode(to:)(_QWORD *a1)
{
  uint64_t DataFromToken;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE v7[24];
  uint64_t v8;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  DataFromToken = RENetCompatibilityCreateDataFromToken();
  if (DataFromToken)
  {
    v2 = (void *)DataFromToken;
    v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v7, v8);
    lazy protocol witness table accessor for type Data and conformance Data();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
    outlined consume of Data._Representation(v3, v5);

  }
  else
  {
    lazy protocol witness table accessor for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError();
    swift_allocError();
    swift_willThrow();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkCompatibilityToken.SerializationError, &type metadata for NetworkCompatibilityToken.SerializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkCompatibilityToken.SerializationError, &type metadata for NetworkCompatibilityToken.SerializationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.SerializationError and conformance NetworkCompatibilityToken.SerializationError);
  }
  return result;
}

uint64_t NetworkCompatibilityToken.compatibilityWith(_:)@<X0>(char *a1@<X8>)
{
  uint64_t result;
  char v3;

  result = RENetCompatibilityCheckCompatibility();
  if (!(_DWORD)result)
  {
    v3 = 0;
LABEL_5:
    *a1 = v3;
    return result;
  }
  if ((_DWORD)result == 1)
  {
    v3 = 1;
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility;
  if (!lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NetworkCompatibilityToken.Compatibility, &type metadata for NetworkCompatibilityToken.Compatibility);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkCompatibilityToken.Compatibility and conformance NetworkCompatibilityToken.Compatibility);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NetworkCompatibilityToken@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = NetworkCompatibilityToken.init(from:)(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NetworkCompatibilityToken(_QWORD *a1)
{
  return NetworkCompatibilityToken.encode(to:)(a1);
}

uint64_t dispatch thunk of SynchronizationService.entity(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of SynchronizationService.owner(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of SynchronizationService.giveOwnership(of:toPeer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SynchronizationService.__fromCore(peerID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SynchronizationService.__toCore(peerID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of SynchronizationService.startSync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SynchronizationService.stopSync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t type metadata accessor for NetworkCompatibilityToken()
{
  return objc_opt_self();
}

uint64_t method lookup function for NetworkCompatibilityToken()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of NetworkCompatibilityToken.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t storeEnumTagSinglePayload for NetworkCompatibilityToken.Compatibility(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA4BB54 + 4 * byte_21BE57235[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA4BB88 + 4 * byte_21BE57230[v4]))();
}

uint64_t sub_21BA4BB88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA4BB90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA4BB98);
  return result;
}

uint64_t sub_21BA4BBA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA4BBACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA4BBB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA4BBB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.Compatibility()
{
  return &type metadata for NetworkCompatibilityToken.Compatibility;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.SerializationError()
{
  return &type metadata for NetworkCompatibilityToken.SerializationError;
}

uint64_t storeEnumTagSinglePayload for NetworkCompatibilityToken.SerializationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA4BC28 + 4 * byte_21BE5723A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA4BC48 + 4 * byte_21BE5723F[v4]))();
}

_BYTE *sub_21BA4BC28(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA4BC48(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA4BC50(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA4BC58(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA4BC60(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA4BC68(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NetworkCompatibilityToken.DeserializationError()
{
  return &type metadata for NetworkCompatibilityToken.DeserializationError;
}

void TextureResource.__coreAsset.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

void TextureResource.CreateOptions.semantic.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *TextureResource.CreateOptions.semantic.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.semantic.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.CreateOptions.mipmapsMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *TextureResource.CreateOptions.mipmapsMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.mipmapsMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.CreateOptions.compression.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 2);
}

_WORD *TextureResource.CreateOptions.compression.setter(_WORD *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 2) = *result;
  return result;
}

uint64_t (*TextureResource.CreateOptions.compression.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

_BYTE *TextureResource.CreateOptions.init(semantic:mipmapsMode:)@<X0>(_BYTE *result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *a2;
  *(_BYTE *)a3 = *result;
  *(_BYTE *)(a3 + 1) = v3;
  *(_WORD *)(a3 + 2) = 1280;
  return result;
}

void static TextureResource.Compression.default.getter(_WORD *a1@<X8>)
{
  *a1 = 1280;
}

_BYTE *TextureResource.CreateOptions.init(semantic:compression:mipmapsMode:)@<X0>(_BYTE *result@<X0>, __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4;
  char v5;

  v4 = *a2;
  v5 = *a3;
  *(_BYTE *)a4 = *result;
  *(_BYTE *)(a4 + 1) = v5;
  *(_WORD *)(a4 + 2) = v4;
  return result;
}

void one-time initialization function for supportedFileTypes()
{
  static TextureResource.supportedFileTypes = &outlined read-only object #0 of one-time initialization function for supportedFileTypes;
}

void TextureResource.LoadError.errorDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Error;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v1);
  Error = type metadata accessor for TextureResource.LoadError();
  MEMORY[0x24BDAC7A8](Error);
  outlined init with copy of TextureResource.LoadError(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_21BA4BED4 + 4 * byte_21BE57530[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BA4BED4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v3 = *v0;
  v4 = (void *)v0[1];
  *(_QWORD *)(v2 - 80) = 0;
  *(_QWORD *)(v2 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v2 - 80) = v1 + 17;
  *(_QWORD *)(v2 - 72) = 0x800000021BE838B0;
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E7562206E692022;
  v6._object = (void *)0xEB00000000656C64;
  String.append(_:)(v6);
  return *(_QWORD *)(v2 - 80);
}

uint64_t TextureResource.CopyError.errorDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BA4C0C8 + 4 * byte_21BE57535[a1]))(0xD00000000000002DLL, 0x800000021BE83800);
}

uint64_t sub_21BA4C0C8(uint64_t a1)
{
  return a1 + 17;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.CopyError()
{
  unsigned __int8 *v0;

  return TextureResource.CopyError.errorDescription.getter(*v0);
}

uint64_t TextureResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[6];

  v28 = a6;
  v29 = a3;
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v33 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS();
  v31 = *(_QWORD *)(v15 - 8);
  v32 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a2;
  v19 = specialized static __ServiceLocator.shared.getter();
  v20 = *(void **)(*(_QWORD *)(v19 + 168) + 16);
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = a1;
  *(_DWORD *)(v21 + 24) = v18;
  v22 = v28;
  *(_QWORD *)(v21 + 32) = v19;
  *(_QWORD *)(v21 + 40) = v22;
  *(_QWORD *)(v21 + 48) = a7;
  *(_QWORD *)(v21 + 56) = a4;
  v23 = v30;
  *(_QWORD *)(v21 + 64) = a5;
  *(_QWORD *)(v21 + 72) = v23;
  *(_BYTE *)(v21 + 80) = v29;
  aBlock[4] = partial apply for closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:);
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_215;
  v24 = _Block_copy(aBlock);
  swift_retain_n();
  v25 = v20;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v34 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v17, v14, v24);
  _Block_release(v24);
  swift_release();

  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v17, v32);
  return swift_release();
}

uint64_t closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15;

  OpaquePointer.set(options:)();
  RETextureImportOperationRun();
  swift_beginAccess();
  swift_unownedRetainStrong();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a8;
  *(_QWORD *)(v15 + 24) = a1;
  *(_BYTE *)(v15 + 32) = a9 & 1;
  *(_QWORD *)(v15 + 40) = a4;
  *(_QWORD *)(v15 + 48) = a5;
  *(_QWORD *)(v15 + 56) = a6;
  *(_QWORD *)(v15 + 64) = a7;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:), v15);
  swift_release();
  return swift_release();
}

void OpaquePointer.set(options:)()
{
  Class isa;

  RETextureImportOperationSetSemantic();
  RETextureImportOperationSetMipmapMode();
  RETextureImportOperationSetCompressionType();
  if ((unint64_t)TextureResource.Compression.toCoreASTCOptions()())
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    RETextureImportOperationSetASTCCompressionOptions();

  }
}

void closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(void (*a1)(void *, uint64_t), uint64_t a2, void (*a3)(void *, _QWORD, _QWORD), uint64_t a4, uint64_t a5, void *a6)
{
  void *v9;

  type metadata accessor for TextureResource.LoadError();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
  v9 = (void *)swift_allocError();
  a3(a6, 0, 0);

  a1(v9, 1);
}

uint64_t closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(uint64_t a1, uint64_t a2, char a3, void (*a4)(void *, uint64_t), uint64_t a5, void (*a6)(void *, void *, _QWORD))
{
  unint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  __int16 v12;
  __int16 v13;
  void *v14;

  v8 = specialized static TextureResource.tryCreate(from:disableNetworkSync:)(a2, a3);
  v9 = (void *)v8;
  v11 = v10;
  v13 = v12;
  if ((v12 & 0x100) != 0)
  {
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    v14 = (void *)swift_allocError();
    a6(v9, v11, v13 & 1);
    a4(v14, 1);

  }
  else
  {
    a4((void *)v8, 0);
  }
  outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v11, v13, HIBYTE(v13) & 1);
  return RERelease();
}

uint64_t static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, int *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v10 = *a2;
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v5;
  *(_QWORD *)(v11 + 24) = a1;
  *(_DWORD *)(v11 + 32) = v10;
  *(_BYTE *)(v11 + 36) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  v12 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  v13 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = 0;
  *(_BYTE *)(v13 + 32) = -1;
  *(_QWORD *)(v12 + 16) = v13;
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = partial apply for closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:);
  v15[3] = v11;
  v15[4] = v13;
  v15[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v12 + 24) = Future.init(_:)();
  v16 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();
  return v16;
}

uint64_t closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7, uint64_t a8)
{
  char v11;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v20;

  v11 = a5;
  v15 = a5 >> 8;
  v16 = HIWORD(a5);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = a2;
  LOBYTE(v20) = v11;
  BYTE1(v20) = v15;
  HIWORD(v20) = v16;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a7;
  *(_QWORD *)(v18 + 24) = a8;
  swift_retain();
  swift_retain();
  static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(a4, &v20, a6, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError), v18, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v17);
  swift_release();
  return swift_release();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(void *a1, void *a2, char a3, void (*a4)(void *))
{
  void *v8;
  uint64_t v9;

  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  v8 = (void *)swift_allocError();
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_BYTE *)(v9 + 16) = a3 & 1;
  outlined copy of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  a4(v8);

}

uint64_t specialized LoadRequest<A>.thenWaitForResourceSharing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  os_unfair_lock_s *v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t Request;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  v3 = swift_allocObject();
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v5;
  swift_beginAccess();
  v41 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource><A>.Fulfiller);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  v7 = v50;
  v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  v10 = v47;
  v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  AssetRequest = REAssetManagerCreateAssetRequest();
  Request = type metadata accessor for __AssetLoadRequest();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = AssetRequest;
  if ((v9 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  v16 = swift_allocObject();
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 24) = 0;
  *(_BYTE *)(v16 + 32) = -1;
  *(_QWORD *)(v15 + 16) = v16;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  v44 = v15;
  *(_QWORD *)(v15 + 24) = Future.init(_:)();
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource><A>.CancellableHolder);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  v43 = v1;
  v46[0] = v1;
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v13;
  *(_QWORD *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<TextureResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<TextureResource>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  swift_retain_n();
  swift_retain();
  v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  v47 = Request;
  v46[0] = v13;
  v24 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v25 = *(_QWORD **)(v3 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v41 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
    *v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v14;
  v46[0] = v43;
  v29 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v30 = *(_QWORD **)(v3 + 16);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *v41 = v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    *v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v42;
  v46[0] = v19;
  v34 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v35 = *(_QWORD **)(v3 + 16);
  v36 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *v41 = v35;
  }
  v38 = v35[2];
  v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
    *v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  os_unfair_lock_s *v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t Request;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  v3 = swift_allocObject();
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v5;
  swift_beginAccess();
  v41 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource><A>.Fulfiller);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  v7 = v50;
  v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  v10 = v47;
  v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  AssetRequest = REAssetManagerCreateAssetRequest();
  Request = type metadata accessor for __AssetLoadRequest();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = AssetRequest;
  if ((v9 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource>);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<EnvironmentResource, Error>?>);
  v16 = swift_allocObject();
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v16 + 16) = v17;
  *(_QWORD *)(v16 + 24) = 0;
  *(_BYTE *)(v16 + 32) = -1;
  *(_QWORD *)(v15 + 16) = v16;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<EnvironmentResource, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  v44 = v15;
  *(_QWORD *)(v15 + 24) = Future.init(_:)();
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<EnvironmentResource><A>.CancellableHolder);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  v43 = v1;
  v46[0] = v1;
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v13;
  *(_QWORD *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<EnvironmentResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<EnvironmentResource>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  swift_retain_n();
  swift_retain();
  v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  v47 = Request;
  v46[0] = v13;
  v24 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v25 = *(_QWORD **)(v3 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v41 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
    *v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v14;
  v46[0] = v43;
  v29 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v30 = *(_QWORD **)(v3 + 16);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *v41 = v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    *v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v42;
  v46[0] = v19;
  v34 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v35 = *(_QWORD **)(v3 + 16);
  v36 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *v41 = v35;
  }
  v38 = v35[2];
  v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
    *v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetRequest;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  os_unfair_lock_s *v29;
  _QWORD *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  os_unfair_lock_s *v34;
  _QWORD *v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t Request;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v49);
  type metadata accessor for LoadRequestDependencies();
  v3 = swift_allocObject();
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v3 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v3 + 24) = v5;
  swift_beginAccess();
  v41 = (_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v4;
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial><A>.Fulfiller);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  outlined init with copy of __REAssetService((uint64_t)v49, (uint64_t)v46);
  v7 = v50;
  v8 = v51;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v7, v8);
  v10 = v47;
  v11 = v48;
  __swift_project_boxed_opaque_existential_1(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v10, v11);
  AssetRequest = REAssetManagerCreateAssetRequest();
  Request = type metadata accessor for __AssetLoadRequest();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = AssetRequest;
  if ((v9 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>);
  v15 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<ShaderGraphMaterial, Error>?>);
  v16 = swift_allocObject();
  v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v16 + 16) = v17;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_WORD *)(v16 + 88) = -256;
  *(_QWORD *)(v15 + 16) = v16;
  v18 = (_QWORD *)swift_allocObject();
  v18[2] = partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing();
  v18[3] = v6;
  v18[4] = v16;
  v18[5] = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<ShaderGraphMaterial, Error>);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  v44 = v15;
  *(_QWORD *)(v15 + 24) = Future.init(_:)();
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial><A>.CancellableHolder);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  v43 = v1;
  v46[0] = v1;
  v20 = swift_allocObject();
  swift_weakInit();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v6;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = v13;
  *(_QWORD *)(v22 + 24) = v6;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type LoadRequest<ShaderGraphMaterial> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<ShaderGraphMaterial>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  swift_retain_n();
  swift_retain();
  v23 = Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  v47 = type metadata accessor for AnyCancellable();
  v46[0] = v23;
  outlined init with take of Any?((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v45, v19 + 16);
  swift_endAccess();
  v47 = Request;
  v46[0] = v13;
  v24 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v25 = *(_QWORD **)(v3 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *v41 = v25;
  }
  v28 = v25[2];
  v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
    *v41 = v25;
  }
  v25[2] = v28 + 1;
  outlined init with take of Any(v45, &v25[4 * v28 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v14;
  v46[0] = v43;
  v29 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v29);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v30 = *(_QWORD **)(v3 + 16);
  v31 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v30;
  if ((v31 & 1) == 0)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *v41 = v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  if (v33 >= v32 >> 1)
  {
    v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    *v41 = v30;
  }
  v30[2] = v33 + 1;
  outlined init with take of Any(v45, &v30[4 * v33 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v47 = v42;
  v46[0] = v19;
  v34 = (os_unfair_lock_s *)(*(_QWORD *)(v3 + 24) + 16);
  swift_retain();
  os_unfair_lock_lock(v34);
  outlined init with copy of Any((uint64_t)v46, (uint64_t)v45);
  swift_beginAccess();
  v35 = *(_QWORD **)(v3 + 16);
  v36 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 16) = v35;
  if ((v36 & 1) == 0)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
    *v41 = v35;
  }
  v38 = v35[2];
  v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
    *v41 = v35;
  }
  v35[2] = v38 + 1;
  outlined init with take of Any(v45, &v35[4 * v38 + 4]);
  swift_endAccess();
  os_unfair_lock_unlock(v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  return v44;
}

uint64_t TextureResource.replaceWith(importOperation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssetData;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];

  v1 = v0;
  v19[1] = *MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  AssetData = RETextureImportOperationCreateAssetData();
  if (AssetData)
  {
    v3 = AssetData;
    v4 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    result = outlined init with copy of (Int, URL)(v4, (uint64_t)&v14, &demangling cache variable for type metadata for __RenderService?);
    if (v15)
    {
      outlined init with take of BindableDataInternal(&v14, (uint64_t)v16);
      v6 = v17;
      v7 = v18;
      __swift_project_boxed_opaque_existential_1(v16, v17);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
      LOBYTE(v6) = MEMORY[0x22077079C](v8, *(_QWORD *)(v1 + 16), v3, v19);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      if ((v6 & 1) != 0)
      {
        *(_QWORD *)(v1 + 24) = 0;
        swift_release();
        RETextureAssetRemoveDrawableQueue();
      }
      else
      {
        v10 = v19[0] == 0;
        if (v19[0])
          v11 = v19[0];
        else
          v11 = 0x206563616C706552;
        if (v19[0])
          v12 = 0;
        else
          v12 = 0xEE0064656C696166;
        lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
        swift_allocError();
        *(_QWORD *)v13 = v11;
        *(_QWORD *)(v13 + 8) = v12;
        *(_BYTE *)(v13 + 16) = v10;
        swift_willThrow();
      }
      return RERelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
    swift_allocError();
    strcpy(v9, "Replace failed");
    v9[15] = -18;
    v9[16] = 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t TextureResource.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)(v1 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t TextureResource.deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    RETextureAssetRemoveDrawableQueue();
  REAssetSetSwiftObject();
  RERelease();
  swift_release();
  return v0;
}

uint64_t TextureResource.__deallocating_deinit()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    RETextureAssetRemoveDrawableQueue();
  REAssetSetSwiftObject();
  RERelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t TextureResource.semantic.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  unint64_t v3;

  result = RETextureAssetGetSemantic();
  v3 = 0x40302010005uLL >> (8 * result);
  if (result >= 6)
    LOBYTE(v3) = 5;
  *a1 = v3;
  return result;
}

uint64_t TextureResource.width.getter()
{
  int v0;

  RETextureAssetGetSize();
  return v0;
}

uint64_t TextureResource.height.getter()
{
  int v0;

  RETextureAssetGetSize();
  return v0;
}

uint64_t TextureResource.depth.getter()
{
  int v0;

  RETextureAssetGetDimensions();
  return v0;
}

uint64_t TextureResource.mipmapLevelCount.getter()
{
  return RETextureAssetGetMipmapLevelCount();
}

uint64_t TextureResource.pixelFormat.getter()
{
  return RETextureAssetGetPixelFormat();
}

uint64_t TextureResource.textureType.getter()
{
  return RETextureAssetGetTextureType();
}

uint64_t TextureResource.arrayLength.getter()
{
  return RETextureAssetGetArrayLength();
}

uint64_t static TextureResource.load(named:in:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4)
{
  int v5;

  v5 = 83886597;
  return specialized static TextureResource.load(named:in:options:textureLoader:)(a1, a2, a3, (unsigned __int8 *)&v5, a4);
}

uint64_t static TextureResource.load(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, _QWORD *a5)
{
  return specialized static TextureResource.load(named:in:options:textureLoader:)(a1, a2, a3, a4, a5);
}

uint64_t static TextureResource.loadAsync(named:in:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v5;

  v5 = 83886597;
  return static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2, a3, (char *)&v5, a4);
}

uint64_t static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  char v12;
  __int16 v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35[2];

  v34 = a2;
  v31 = a5;
  v32 = a1;
  v7 = type metadata accessor for DispatchPredicate();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a4;
  v12 = a4[1];
  v13 = *((_WORD *)a4 + 1);
  if (a3)
    v14 = a3;
  else
    v14 = objc_msgSend((id)objc_opt_self(), sel_mainBundle, v31);
  v15 = a3;
  v16 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v17 = *(_QWORD *)(v16 + 24);
  swift_unownedRetainStrong();
  v18 = *(void **)(v17 + 32);
  swift_retain();
  v19 = v18;
  swift_release();
  *v10 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x24BEE5610], v7);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v19 & 1) != 0)
  {
    outlined init with copy of __REAssetService(v31, (uint64_t)v35);
    v22 = swift_allocObject();
    v23 = v34;
    v24 = v32;
    *(_QWORD *)(v22 + 16) = v33;
    *(_QWORD *)(v22 + 24) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v14;
    *(_BYTE *)(v22 + 48) = v11;
    *(_BYTE *)(v22 + 49) = v12;
    *(_WORD *)(v22 + 50) = v13;
    outlined init with take of BindableDataInternal(v35, v22 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
    v25 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
    v26 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v27 = swift_allocObject();
    *(_DWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v26 + 16) = v27;
    *(_QWORD *)(v26 + 24) = 0;
    *(_BYTE *)(v26 + 32) = -1;
    *(_QWORD *)(v25 + 16) = v26;
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = partial apply for closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:);
    v28[3] = v22;
    v28[4] = v26;
    v28[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    v29 = v14;
    swift_retain();
    *(_QWORD *)(v25 + 24) = Future.init(_:)();
    v30 = specialized LoadRequest<A>.thenWaitForResourceSharing()();

    swift_release();
    swift_release();
    return v30;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7, _QWORD *a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, void *, int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  int v30;

  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  swift_retain();
  v16 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  v17 = specialized static TextureResource.findBundledFileExtension(named:in:)(a4, a5, a6);
  v19 = v18;
  v20 = (void *)MEMORY[0x220768C3C](a4, a5);
  if (v19)
  {
    v21 = (void *)MEMORY[0x220768C3C](v17, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  swift_beginAccess();
  v22 = RETextureImportOperationCreateWithBundleResource();

  if (v22)
  {
    v30 = a7;
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = a5;
    swift_bridgeObjectRetain();
    static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v22, &v30, 0, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v23, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> (), v15);
    swift_release();
  }
  else
  {
    v24 = a8[4];
    v28 = a8[3];
    __swift_project_boxed_opaque_existential_1(a8, v28);
    v30 = a7;
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v16;
    *(_QWORD *)(v25 + 24) = a3;
    *(_DWORD *)(v25 + 32) = a7;
    *(_QWORD *)(v25 + 40) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *(_QWORD *)(v25 + 48) = v15;
    v26 = *(void (**)(uint64_t, uint64_t, void *, int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t))(v24 + 16);
    swift_retain();
    v26(a4, a5, a6, &v30, partial apply for closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:), v25, v28, v24);
  }
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(void *a1, char a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  char v8;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;

  v8 = a5;
  v13 = a5 >> 8;
  v14 = HIWORD(a5);
  swift_beginAccess();
  swift_unownedRetainStrong();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  *(_BYTE *)(v15 + 24) = a2 & 1;
  *(_QWORD *)(v15 + 32) = a4;
  *(_BYTE *)(v15 + 40) = v8;
  *(_BYTE *)(v15 + 41) = v13;
  *(_WORD *)(v15 + 42) = v14;
  *(_QWORD *)(v15 + 48) = a3;
  *(_QWORD *)(v15 + 56) = a6;
  *(_QWORD *)(v15 + 64) = a7;
  outlined copy of Result<[Entity], Error>(a1, a2 & 1, (uint64_t (*)(id))MEMORY[0x24BEE4F80]);
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:), v15);
  swift_release();
  return swift_release();
}

void closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(id a1, char a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(_QWORD *, uint64_t))
{
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(id);
  id v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t TextureAssetFromData;
  _QWORD *v19;
  unsigned __int8 v20[24];
  uint64_t v21;
  uint64_t v22;

  v8 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    *(_DWORD *)v20 = a4;
    outlined copy of Result<[Entity], Error>(a1, 0, (uint64_t (*)(id))MEMORY[0x24BEE4F80]);
    specialized static TextureResource.createTextureAssetDataFor(texture:options:)((uint64_t)a1, v20);
    swift_beginAccess();
    outlined init with copy of __REAssetService(a5 + 120, (uint64_t)v20);
    v16 = v21;
    v17 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    RERelease();
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for TextureResource();
      v11 = (_QWORD *)swift_dynamicCastClass();
      if (v11)
      {
LABEL_8:
        RERelease();
        v12 = (void (*)(id))MEMORY[0x24BEE4F70];
        v13 = a1;
        v14 = 0;
        goto LABEL_9;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for TextureResource();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = TextureAssetFromData;
    v11[3] = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_8;
  }
  *(_QWORD *)v20 = a1;
  v9 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v10 = _getErrorEmbeddedNSError<A>(_:)();
  if (!v10)
  {
    v11 = (_QWORD *)swift_allocError();
    *v19 = *(_QWORD *)v20;
    goto LABEL_10;
  }
  v11 = (_QWORD *)v10;
  v12 = (void (*)(id))MEMORY[0x24BEE4F70];
  v13 = a1;
  v14 = 1;
LABEL_9:
  outlined consume of Result<[Entity], Error>(v13, v14, v12);
LABEL_10:
  a6(v11, v8);
  outlined consume of Result<[Entity], Error>(v11, v8, (void (*)(id))MEMORY[0x24BEE4EF8]);
}

void *static TextureResource.load(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextureResource.load(contentsOf:withName:options:)(a1, a2, a3);
}

void *static TextureResource.load(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static TextureResource.load(contentsOf:withName:options:)(a1, a2, a3);
}

uint64_t static TextureResource.loadAsync(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  NSURL *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;

  v5 = type metadata accessor for URL();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  swift_beginAccess();
  v12 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  v18 = 83886597;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v13 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v14 + v13, v8, v5);
  v15 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v12, &v18, 1, (uint64_t)partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:), v14);
  swift_release();
  return v15;
}

uint64_t static TextureResource.loadAsync(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  int v12;
  NSURL *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  int v22;
  int v23;
  int v24;

  v21[1] = a2;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a4;
  v12 = a4[1];
  v22 = *((unsigned __int16 *)a4 + 1);
  v23 = v12;
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  swift_beginAccess();
  v16 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  LOBYTE(v24) = v11;
  BYTE1(v24) = v23;
  HIWORD(v24) = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v17 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v18 + v17, v10, v7);
  v19 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v16, &v24, 1, (uint64_t)partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:), v18);
  swift_release();
  return v19;
}

uint64_t closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  type metadata accessor for TextureResource.LoadError();
  return swift_storeEnumTagMultiPayload();
}

void *static TextureResource.generate(from:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  __int16 v8;
  void *Error;
  void *v10;
  char v11;
  uint64_t inited;
  uint64_t v13;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v5 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  v6 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v5, 1);
  Error = v6;
  v10 = v7;
  v11 = v8;
  if ((v8 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v6, v7, v8, 1);
    Error = (void *)type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else if ((RELinkedOnOrAfterFall2024OSVersions() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v13 = type metadata accessor for TextureResource();
    *(_QWORD *)(inited + 32) = Error;
    *(_QWORD *)(inited + 56) = v13;
    *(_QWORD *)(inited + 64) = &protocol witness table for TextureResource;
    outlined copy of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v10, v11, 0);
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    if (v3)
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v10, v11, 0);
  }
  RERelease();
  return Error;
}

uint64_t static TextureResource.generateAsync(from:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  int v10;

  v5 = *a4;
  v6 = a4[1];
  v7 = *((_WORD *)a4 + 1);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v8 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  LOBYTE(v10) = v5;
  BYTE1(v10) = v6;
  HIWORD(v10) = v7;
  return static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v8, &v10, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
}

uint64_t TextureResource.replace(withImage:options:)()
{
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  RETextureImportOperationCreateWithCGImage();
  OpaquePointer.set(options:)();
  TextureResource.replaceWith(importOperation:)();
  return RERelease();
}

uint64_t TextureResource.replaceAsync(withImage:options:)(uint64_t a1, int *a2)
{
  int v3;

  v3 = *a2;
  return TextureResource.replaceAsyncInternal(using:options:)(a1, &v3);
}

uint64_t TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v3 = *a2;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v4 = RETextureImportOperationCreateWithCGImage();
  v5 = specialized static __ServiceLocator.shared.getter();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  *(_DWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  v7 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
  v8 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = -1;
  *(_QWORD *)(v7 + 16) = v8;
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = partial apply for closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  v10[3] = v6;
  v10[4] = v8;
  v10[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_retain();
  *(_QWORD *)(v7 + 24) = Future.init(_:)();
  v11 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
  swift_release();
  swift_release();
  return v11;
}

uint64_t closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  char v7;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  _BYTE v24[4];
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v7 = a5;
  v26 = a4;
  v11 = a5 >> 8;
  v25 = HIWORD(a5);
  v12 = type metadata accessor for DispatchWorkItemFlags();
  v29 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for DispatchQoS();
  v27 = *(_QWORD *)(v15 - 8);
  v28 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v19 = *(void **)(*(_QWORD *)(a3 + 168) + 16);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v26;
  *(_BYTE *)(v20 + 24) = v7;
  *(_BYTE *)(v20 + 25) = v11;
  *(_WORD *)(v20 + 26) = v25;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  *(_QWORD *)(v20 + 48) = v18;
  *(_QWORD *)(v20 + 56) = a6;
  aBlock[4] = partial apply for closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  aBlock[5] = v20;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_261;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = v19;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v30 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v17, v14, v21);
  _Block_release(v21);

  (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v14, v12);
  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v17, v28);
  return swift_release();
}

uint64_t closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  void *v12;

  OpaquePointer.set(options:)();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = 0;
  if ((RETextureImportOperationRun() & 1) != 0)
  {
    swift_beginAccess();
    swift_unownedRetainStrong();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = a6;
    v11[3] = a1;
    v11[4] = a4;
    v11[5] = a5;
    swift_retain();
    swift_retain();
    v12 = partial apply for closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  }
  else
  {
    RERelease();
    swift_beginAccess();
    swift_unownedRetainStrong();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = v10;
    swift_retain();
    swift_retain();
    v12 = partial apply for closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:);
  }
  __Engine.asyncOnEngineQueue(_:)((uint64_t)v12, (uint64_t)v11);
  swift_release();
  swift_release();
  return swift_release();
}

void closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;

  swift_beginAccess();
  v5 = *(_QWORD *)(a3 + 16);
  v6 = v5 == 0;
  if (v5)
    v7 = *(_QWORD *)(a3 + 16);
  else
    v7 = 0x206563616C706552;
  if (v5)
    v8 = 0;
  else
    v8 = 0xEE0064656C696166;
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  v9 = (void *)swift_allocError();
  *(_QWORD *)v10 = v7;
  *(_QWORD *)(v10 + 8) = v8;
  *(_BYTE *)(v10 + 16) = v6;
  a1(v9, 1);

}

uint64_t closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  TextureResource.replaceWith(importOperation:)();
  a3(a1, 0);
  return RERelease();
}

uint64_t TextureResource.copy(to:)(void *a1)
{
  uint64_t v1;
  char *v2;
  char v3;
  id v5;
  int v6;
  id v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)(v1 + 24))
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    v3 = 3;
LABEL_8:
    *v2 = v3;
    return swift_willThrow();
  }
  v5 = objc_msgSend(a1, sel_width);
  RETextureAssetGetSize();
  if (v5 != (id)v6 || (v7 = objc_msgSend(a1, sel_height), RETextureAssetGetSize(), v7 != (id)v8))
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    v3 = 1;
    goto LABEL_8;
  }
  if ((objc_msgSend(a1, sel_usage) & 2) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    v3 = 2;
    goto LABEL_8;
  }
  v10 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of (Int, URL)(v10, (uint64_t)&v14, &demangling cache variable for type metadata for __RenderService?);
  if (!v15)
  {
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v14, (uint64_t)v16);
  v11 = v17;
  v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  v13 = RETextureAssetCopyToDestination();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if ((v13 & 1) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError();
    swift_allocError();
    v3 = 0;
    goto LABEL_8;
  }
  return result;
}

uint64_t TextureResource.copyAsync(to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(v3, a1, a2, a3);
}

uint64_t TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v20 = *(_QWORD *)(v11 - 8);
  v21 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = specialized static __ServiceLocator.shared.getter();
  v15 = *(void **)(*(_QWORD *)(v14 + 168) + 16);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = v14;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = partial apply for closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_238;
  v17 = _Block_copy(aBlock);
  swift_retain_n();
  v18 = v15;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v23 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v13, v10, v17);
  _Block_release(v17);
  swift_release();

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v21);
  return swift_release();
}

uint64_t closure #1 in static TextureResource.builtinTexture(named:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  String.utf8CString.getter();
  v2 = REBuiltinTextureAssetDescriptorCreate();
  swift_release();
  if (v2
    && (v3 = a1[3],
        v4 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v3),
        (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4),
        v5 = REAssetHandleCreateWithAssetDescriptor(),
        REAssetHandleLoadNow(),
        (REAssetHandleIsLoaded() & 1) != 0))
  {
    type metadata accessor for TextureResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    RERelease();
    return v6;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TextureResource.__texture(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v6);
  v1 = v7;
  v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  v3 = REAssetManagerTextureMemoryAssetCreateWithMTLTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v3)
  {
    REAssetHandleLoadNow();
    type metadata accessor for TextureResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    *(_QWORD *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    return v4;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TextureResource.__texture(from:label:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v18);
  v5 = v19;
  v6 = v20;
  __swift_project_boxed_opaque_existential_1(v18, v19);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  v7 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v7, (uint64_t)&v13, &demangling cache variable for type metadata for __RenderService?);
  if (v14)
  {
    outlined init with take of BindableDataInternal(&v13, (uint64_t)v15);
    v8 = v16;
    v9 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v8, v9);
    if (a3)
      String.utf8CString.getter();
    v10 = REAssetManagerTextureMemoryAssetCreateWithCGImage();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if (v10)
    {
      REAssetHandleLoadNow();
      type metadata accessor for TextureResource();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();
      return v11;
    }
  }
  else
  {
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t key path setter for TextureResource.Drawable.drawableQueue : TextureResource.Drawable(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = v2;
  swift_retain();
  return swift_release();
}

uint64_t TextureResource.Drawable.drawableQueue.getter()
{
  swift_beginAccess();
  return swift_retain();
}

id TextureResource.Drawable.texture.getter()
{
  return (id)REDrawableGetTexture();
}

Swift::Void __swiftcall TextureResource.Drawable.present()()
{
  REDrawablePresent();
}

Swift::Void __swiftcall TextureResource.Drawable.presentOnSceneUpdate()()
{
  REDrawablePresentWithNextUpdate();
}

uint64_t TextureResource.Drawable.deinit()
{
  uint64_t v0;

  RERelease();
  swift_release();
  return v0;
}

uint64_t TextureResource.Drawable.__deallocating_deinit()
{
  RERelease();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t TextureResource.DrawableQueue.InitError.errorDescription.getter(char a1)
{
  unint64_t v1;

  v1 = 0xD000000000000019;
  if ((a1 & 1) == 0)
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    return 0xD0000000000000A8;
  }
  return v1;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.DrawableQueue.InitError()
{
  char *v0;

  return TextureResource.DrawableQueue.InitError.errorDescription.getter(*v0);
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.DrawableQueue.NextDrawableError()
{
  return 0xD00000000000002FLL;
}

void one-time initialization function for supportedPixelFormats()
{
  static TextureResource.DrawableQueue.supportedPixelFormats = (uint64_t)&outlined read-only object #0 of one-time initialization function for supportedPixelFormats;
}

uint64_t TextureResource.DrawableQueue.Descriptor.pixelFormat.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TextureResource.DrawableQueue.Descriptor.pixelFormat.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.pixelFormat.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t TextureResource.DrawableQueue.Descriptor.width.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TextureResource.DrawableQueue.Descriptor.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.usage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t TextureResource.DrawableQueue.Descriptor.usage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.usage.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void TextureResource.DrawableQueue.Descriptor.mipmapsMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *TextureResource.DrawableQueue.Descriptor.mipmapsMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.mipmapsMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 56) = result;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.Descriptor.presentsWithNextUpdate.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double TextureResource.DrawableQueue.Descriptor.init(pixelFormat:width:height:usage:mipmapsMode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  char v6;
  double result;

  v6 = *a5;
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = v6;
  result = 7.83295339e-242;
  *(_OWORD *)(a6 + 40) = xmmword_21BE57F20;
  *(_BYTE *)(a6 + 56) = 0;
  return result;
}

uint64_t TextureResource.DrawableQueue.pixelFormat.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t TextureResource.DrawableQueue.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t TextureResource.DrawableQueue.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t TextureResource.DrawableQueue.usage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

void TextureResource.DrawableQueue.mipmapsMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 48);
}

uint64_t TextureResource.DrawableQueue.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  TextureResource.DrawableQueue.init(_:)(a1);
  return v2;
}

uint64_t TextureResource.DrawableQueue.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  double v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t result;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 32) = v6;
  *(_QWORD *)(v2 + 40) = v5;
  *(_BYTE *)(v2 + 48) = v7;
  *(_QWORD *)(v2 + 56) = v8;
  *(_QWORD *)(v2 + 64) = v9;
  *(_BYTE *)(v2 + 72) = v10;
  *(_BYTE *)(v2 + 88) = 1;
  *(_DWORD *)(v2 + 76) = 1065353216;
  v11 = (double)Duration.components.getter();
  Duration.components.getter();
  v13 = (double)v12 * 1.0e-18 + v11;
  *(float *)(v2 + 76) = v13;
  if (one-time initialization token for supportedPixelFormats != -1)
    swift_once();
  if ((specialized Sequence<>.contains(_:)(v3, static TextureResource.DrawableQueue.supportedPixelFormats) & 1) == 0)
  {
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError();
    swift_allocError();
    *v18 = 0;
    swift_willThrow();
LABEL_16:
    type metadata accessor for TextureResource.DrawableQueue();
    swift_deallocPartialClassInstance();
    return v2;
  }
  v14 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  if (!RETextureDrawableQueueDescriptorCreate())
  {
LABEL_15:
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError();
    swift_allocError();
    *v19 = 1;
    swift_willThrow();
    swift_release();
    goto LABEL_16;
  }
  if ((v4 & 0x8000000000000000) == 0 && !HIDWORD(v4))
  {
    RETextureDrawableQueueDescriptorSetWidth();
    if ((v6 & 0x8000000000000000) == 0 && !HIDWORD(v6))
    {
      RETextureDrawableQueueDescriptorSetHeight();
      RETextureDrawableQueueDescriptorSetPixelFormat();
      RETextureDrawableQueueDescriptorSetTextureUsage();
      RETextureDrawableQueueDescriptorSetMipMapMode();
      swift_beginAccess();
      if (MEMORY[0x22076FDE8](*(_QWORD *)(v14 + 16)))
      {
        RETextureDrawableQueueDescriptorSetShareable();
        RETextureDrawableQueueDescriptorSetPresentsWithNextUpdate();
        RETextureDrawableQueueDescriptorSetResourceOptions();
      }
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v14 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
      if (v22)
      {
        outlined init with take of BindableDataInternal(&v21, (uint64_t)v23);
        v15 = v24;
        v16 = v25;
        __swift_project_boxed_opaque_existential_1(v23, v24);
        (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
        v17 = RETextureDrawableQueueCreateWithDescriptor();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
        RERelease();
        if (v17)
        {
          swift_release();
          *(_QWORD *)(v2 + 80) = v17;
          return v2;
        }
        goto LABEL_15;
      }
      __break(1u);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t TextureResource.DrawableQueue.Descriptor.timeout.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 16) == v5)
        goto LABEL_21;
      if (v4 != 1)
      {
        v6 = 5;
        while (1)
        {
          v7 = v6 - 3;
          if (__OFADD__(v6 - 4, 1))
            break;
          if (*(_QWORD *)(*(_QWORD *)(a2 + 8 * v6) + 16) == v5)
            goto LABEL_21;
          ++v6;
          if (v7 == v4)
            goto LABEL_10;
        }
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4)
          continue;
      }
      goto LABEL_10;
    }
    v9 = *(_QWORD *)(MEMORY[0x220769770](0, a2) + 16);
    v10 = *(_QWORD *)(a1 + 16);
    swift_unknownObjectRelease();
    if (v9 == v10)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v4 == 1)
      goto LABEL_10;
    v11 = 1;
    while (1)
    {
      result = MEMORY[0x220769770](v11, a2);
      v12 = v11 + 1;
      if (__OFADD__(v11, 1))
        break;
      v13 = *(_QWORD *)(result + 16);
      v14 = *(_QWORD *)(a1 + 16);
      swift_unknownObjectRelease();
      if (v13 == v14)
        goto LABEL_21;
      ++v11;
      if (v12 == v4)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t TextureResource.DrawableQueue.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t TextureResource.DrawableQueue.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t TextureResource.DrawableQueue.nextDrawable()()
{
  uint64_t v0;
  uint64_t NextDrawable;
  uint64_t v2;

  swift_beginAccess();
  if (*(_BYTE *)(v0 + 88) != 1)
  {
    NextDrawable = RETextureDrawableQueueCreateNextDrawable();
    if (NextDrawable)
      goto LABEL_3;
LABEL_5:
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError();
    v2 = swift_allocError();
    swift_willThrow();
    return v2;
  }
  NextDrawable = RETextureDrawableQueueCreateNextDrawableWithTimeout();
  if (!NextDrawable)
    goto LABEL_5;
LABEL_3:
  type metadata accessor for TextureResource.Drawable();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = NextDrawable;
  *(_QWORD *)(v2 + 24) = v0;
  swift_retain();
  return v2;
}

void __swiftcall TextureResource.DrawableQueue.eyeTransform(_:)(simd_float4x4 *__return_ptr retstr, Swift::Int32 a2)
{
  REDrawableQueueGetEyeTransform();
}

uint64_t TextureResource.DrawableQueue.nextDrawableWithTimeoutAndPollingInterval(timeout:pollingInterval:)()
{
  uint64_t v0;
  uint64_t NextDrawableWithTimeoutAndPollingInterval;
  uint64_t v2;
  uint64_t v3;

  NextDrawableWithTimeoutAndPollingInterval = RETextureDrawableQueueCreateNextDrawableWithTimeoutAndPollingInterval();
  if (NextDrawableWithTimeoutAndPollingInterval)
  {
    v2 = NextDrawableWithTimeoutAndPollingInterval;
    type metadata accessor for TextureResource.Drawable();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v0;
    swift_retain();
  }
  else
  {
    lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError();
    v3 = swift_allocError();
    swift_willThrow();
  }
  return v3;
}

uint64_t TextureResource.DrawableQueue.allowsNextDrawableTimeout.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t TextureResource.DrawableQueue.allowsNextDrawableTimeout.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t (*TextureResource.DrawableQueue.allowsNextDrawableTimeout.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t TextureResource.replace(withDrawables:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v1 + 24) = a1;
  swift_retain();
  swift_release();
  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v6);
  v3 = v7;
  v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  RETextureAssetReplaceDrawableQueue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t TextureResource.drawableQueue.getter()
{
  return swift_retain();
}

Swift::OpaquePointer_optional __swiftcall TextureResource.Compression.toCoreASTCOptions()()
{
  unsigned __int16 *v0;
  unsigned int v1;
  void *v2;
  Swift::Bool v3;
  uint64_t inited;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  Swift::OpaquePointer_optional result;

  v1 = *v0;
  if ((v1 & 0xFE00) == 0x400)
  {
    v2 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE50940;
    v2 = (void *)*MEMORY[0x24BE26388];
    if (*MEMORY[0x24BE26388])
    {
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v5;
      v9 = v1;
      v6 = specialized static TextureResource.Compression.ASTCBlockSize.toCore(_:)(&v9);
      v7 = MEMORY[0x24BEE3F88];
      *(_QWORD *)(inited + 72) = MEMORY[0x24BEE3F88];
      *(_DWORD *)(inited + 48) = v6;
      v2 = (void *)*MEMORY[0x24BE26390];
      if (*MEMORY[0x24BE26390])
      {
        *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(_QWORD *)(inited + 88) = v8;
        *(_QWORD *)(inited + 120) = v7;
        *(_DWORD *)(inited + 96) = (v1 >> 8) + 1;
        v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
LABEL_9:
  result.value._rawValue = v2;
  result.is_nil = v3;
  return result;
}

uint64_t closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  TextureResource.copy(to:)(a2);
  swift_beginAccess();
  swift_unownedRetainStrong();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a4;
  *(_QWORD *)(v7 + 24) = a5;
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:), v7);
  swift_release();
  return swift_release();
}

uint64_t MTLCommandBuffer.present(_:)()
{
  return REDrawablePresentWithCommandBuffer();
}

uint64_t TextureResource.init(contentsOf:withName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for URL();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[9] = static MainActor.shared.getter();
  v4[10] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[11] = v6;
  return swift_task_switch();
}

uint64_t TextureResource.init(contentsOf:withName:)()
{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 16))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 48));
  *(_DWORD *)(v0 + 120) = 83886597;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v1;
  *v1 = v0;
  v1[1] = TextureResource.init(contentsOf:withName:);
  return TextureResource.init(contentsOf:withName:options:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (_DWORD *)(v0 + 120));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.init(contentsOf:withName:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 112) = a1;
  return swift_task_switch();
}

uint64_t TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 40) = a3;
  *(_QWORD *)(v5 + 48) = v4;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  v7 = type metadata accessor for URL();
  *(_QWORD *)(v5 + 56) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 64) = v8;
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(v8 + 64);
  *(_QWORD *)(v5 + 80) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v5 + 88) = swift_task_alloc();
  HIDWORD(v9) = *a4;
  LODWORD(v9) = *a4;
  *(_DWORD *)(v5 + 184) = v9 >> 16;
  *(_QWORD *)(v5 + 96) = type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 104) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 112) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 120) = v10;
  return swift_task_switch();
}

uint64_t TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  HIDWORD(v1) = *(_DWORD *)(v0 + 184);
  LODWORD(v1) = HIDWORD(v1);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 64);
  v19 = *(_QWORD *)(v0 + 40);
  v20 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 24);
  v18 = *(_QWORD *)(v0 + 32);
  v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v7, v5);
  v9 = static MainActor.shared.getter();
  v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v12 + 16) = v9;
  *(_QWORD *)(v12 + 24) = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v3, v5);
  v14 = v12 + v11;
  *(_QWORD *)v14 = v18;
  *(_QWORD *)(v14 + 8) = v19;
  *(_DWORD *)(v14 + 16) = v1 >> 16;
  *(_QWORD *)(v12 + ((v11 + 27) & 0xFFFFFFFFFFFFFFF8)) = v20;
  *(_QWORD *)(v0 + 128) = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(v2, (uint64_t)&async function pointer to partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:), v12, v15, (void (*)(uint64_t))type metadata accessor for TextureResource);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v16;
  *(_QWORD *)(v0 + 144) = type metadata accessor for TextureResource();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v16 = v0;
  v16[1] = TextureResource.init(contentsOf:withName:options:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v0[20] = v0[2];
  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v1 = (_QWORD *)swift_task_alloc();
  v0[21] = v1;
  *v1 = v0;
  v1[1] = TextureResource.init(contentsOf:withName:options:);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 24);
  swift_release();
  v5 = *(_QWORD *)(v1 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 40) = a6;
  *(_QWORD *)(v8 + 48) = a8;
  *(_DWORD *)(v8 + 120) = a7;
  *(_QWORD *)(v8 + 24) = a4;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 56) = type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 64) = static MainActor.shared.getter();
  *(_QWORD *)(v8 + 72) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v8 + 80) = v9;
  return swift_task_switch();
}

uint64_t closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_DWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 40);
  v7 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 88) = static MainActor.shared.getter();
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 32) = v3;
  *(_DWORD *)(v4 + 40) = v2;
  *(_QWORD *)(v4 + 48) = v1;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v5;
  type metadata accessor for TextureResource();
  *v5 = v0;
  v5[1] = closure #1 in TextureResource.init(contentsOf:withName:options:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSURL *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  int v19;

  v18[0] = a1;
  v18[1] = a6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v11);
  v13 = v12;
  swift_beginAccess();
  v14 = RETextureImportOperationCreateWithURL();

  if (a4)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  v19 = a5;
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 16))((char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v18[0], v8);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v14, &v19, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0, (uint64_t)partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v16);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  type metadata accessor for TextureResource.LoadError();
  return swift_storeEnumTagMultiPayload();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(a1, a2, a3, 0, (void (*)(uint64_t))type metadata accessor for __MaterialResource);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit15TextureResourceC_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  a5(a4);
  return swift_task_create();
}

uint64_t specialized RequestLoadable.awaitForResourceSharing()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v2 + 56) = type metadata accessor for TextureResource();
  *(_QWORD *)(v2 + 64) = &protocol witness table for TextureResource;
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v2 + 56) = type metadata accessor for __MaterialResource();
  *(_QWORD *)(v2 + 64) = &protocol witness table for __MaterialResource;
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v2 + 56) = type metadata accessor for MeshResource();
  *(_QWORD *)(v2 + 64) = &protocol witness table for MeshResource;
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v2 = swift_allocObject();
  v0[3] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v2 + 56) = type metadata accessor for ShapeResource();
  *(_QWORD *)(v2 + 64) = &protocol witness table for ShapeResource;
  *(_QWORD *)(v2 + 32) = v1;
  swift_retain();
  v3 = swift_task_alloc();
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  *v4 = v0;
  v4[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v3 = swift_allocObject();
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v3 + 56) = v2;
  *(_QWORD *)(v3 + 64) = &protocol witness table for UnlitMaterialResource;
  *(_QWORD *)(v3 + 32) = v1;
  swift_retain();
  v4 = swift_task_alloc();
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[2];
  v2 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v3 = swift_allocObject();
  v0[4] = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v3 + 56) = v2;
  *(_QWORD *)(v3 + 64) = &protocol witness table for PhysicallyBasedMaterialResource;
  *(_QWORD *)(v3 + 32) = v1;
  swift_retain();
  v4 = swift_task_alloc();
  v0[5] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  v5 = (_QWORD *)swift_task_alloc();
  v0[6] = v5;
  *v5 = v0;
  v5[1] = specialized RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  HIDWORD(v9) = *a4;
  LODWORD(v9) = *a4;
  *(_DWORD *)(v8 + 192) = v9 >> 16;
  *(_QWORD *)(v8 + 80) = type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 88) = static MainActor.shared.getter();
  *(_QWORD *)(v8 + 96) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v8 + 104) = v10;
  return swift_task_switch();
}

uint64_t TextureResource.init<A>(named:in:options:textureLoader:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v1 = 0;
  }
  HIDWORD(v3) = *(_DWORD *)(v0 + 192);
  LODWORD(v3) = HIDWORD(v3);
  *(_QWORD *)(v0 + 112) = v1;
  *(_QWORD *)(v0 + 120) = v2;
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v8 = v1;
  v12 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 128) = static MainActor.shared.getter();
  v9 = swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v9;
  *(_OWORD *)(v9 + 16) = v12;
  *(_QWORD *)(v9 + 32) = v7;
  *(_QWORD *)(v9 + 40) = v6;
  *(_QWORD *)(v9 + 48) = v2;
  *(_DWORD *)(v9 + 56) = v3 >> 16;
  *(_QWORD *)(v9 + 64) = v5;
  *(_QWORD *)(v9 + 72) = v4;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v10;
  *(_QWORD *)(v0 + 152) = type metadata accessor for TextureResource();
  *v10 = v0;
  v10[1] = TextureResource.init<A>(named:in:options:textureLoader:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v2 = (_QWORD *)*v1;
  v2[20] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v2[21] = v2[2];
  v5 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  v4 = (_QWORD *)swift_task_alloc();
  v2[22] = v4;
  *v4 = v2;
  v4[1] = TextureResource.init<A>(named:in:options:textureLoader:);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(void **)(v0 + 112);
  v2 = *(void **)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release();
  v6 = *(_QWORD *)(v1 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v5, v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v3, v2);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, void *, unsigned int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t);
  _BYTE v35[12];
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;

  v38 = a8;
  v39 = a6;
  v44 = a7;
  v40 = a1;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  v13 = *(_QWORD *)(v42 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](v42);
  v15 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  v16 = a4;
  v17 = specialized static TextureResource.findBundledFileExtension(named:in:)(a2, a3, a4);
  v19 = v18;
  v41 = a2;
  v43 = a3;
  v20 = (void *)MEMORY[0x220768C3C](a2, a3);
  if (v19)
  {
    v21 = (void *)MEMORY[0x220768C3C](v17, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  swift_beginAccess();
  v22 = RETextureImportOperationCreateWithBundleResource();

  if (v22)
  {
    v45 = a5;
    v23 = swift_allocObject();
    v24 = v40;
    v26 = v42;
    v25 = v43;
    *(_QWORD *)(v23 + 16) = v41;
    *(_QWORD *)(v23 + 24) = v25;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v24, v26);
    v27 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v28 = swift_allocObject();
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))(v28 + v27, &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v26);
    swift_bridgeObjectRetain();
    static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(v22, (int *)&v45, 0, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v23, (uint64_t)partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v28);
    swift_release();
  }
  else
  {
    v37 = a9;
    v36 = HIWORD(a5);
    v45 = a5;
    v29 = v42;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v40, v42);
    v30 = (*(unsigned __int8 *)(v13 + 80) + 28) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v15;
    *(_WORD *)(v31 + 24) = a5;
    *(_WORD *)(v31 + 26) = v36;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))(v31 + v30, &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)], v29);
    *(_QWORD *)(v31 + ((v14 + v30 + 7) & 0xFFFFFFFFFFFFFFF8)) = v44;
    v32 = v37;
    v33 = *(void (**)(uint64_t, uint64_t, void *, unsigned int *, uint64_t (*)(void *, char), uint64_t, uint64_t, uint64_t))(v37 + 16);
    swift_retain();
    v33(v41, v43, v16, &v45, partial apply for closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v31, v38, v32);
  }
  swift_release();
  return swift_release();
}

uint64_t closure #2 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(void *a1, char a2)
{
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, char a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;

  v20 = a6;
  v7 = a4;
  v18 = HIWORD(a4);
  v19 = a4 >> 8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  swift_beginAccess();
  v17 = *(_QWORD *)(a3 + 24);
  swift_unownedRetainStrong();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v11);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = a1;
  a2 &= 1u;
  *(_BYTE *)(v15 + 24) = a2;
  *(_BYTE *)(v15 + 25) = v7;
  *(_BYTE *)(v15 + 26) = v19;
  *(_WORD *)(v15 + 27) = v18;
  *(_QWORD *)(v15 + 32) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  *(_QWORD *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v20;
  outlined copy of Result<[Entity], Error>(a1, a2, (uint64_t (*)(id))MEMORY[0x24BEE4F80]);
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:), v15);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(id a1, char a2, int a3, uint64_t a4)
{
  id v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;

  if ((a2 & 1) != 0)
  {
    v10 = a1;
    v8 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (_getErrorEmbeddedNSError<A>(_:)())
    {
      outlined consume of Result<[Entity], Error>(a1, 1, (void (*)(id))MEMORY[0x24BEE4F70]);
    }
    else
    {
      swift_allocError();
      *v9 = v10;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v10 = a1;
    swift_unknownObjectRetain();
    closure #1 in closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)((uint64_t *)&v10, a3, a4, &v11);
    outlined consume of Result<[Entity], Error>(a1, 0, (void (*)(id))MEMORY[0x24BEE4F70]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t closure #1 in closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TextureAssetFromData;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  LODWORD(v12[0]) = a2;
  specialized static TextureResource.createTextureAssetDataFor(texture:options:)(v6, (unsigned __int8 *)v12);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3 + 120, (uint64_t)v12);
  v7 = v13;
  v8 = v14;
  __swift_project_boxed_opaque_existential_1(v12, v13);
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v7, v8);
  TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  RERelease();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_4;
  type metadata accessor for TextureResource();
  v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
LABEL_4:
    type metadata accessor for TextureResource();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = TextureAssetFromData;
    *(_QWORD *)(v10 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  *a4 = v10;
  return RERelease();
}

BOOL static TextureResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

void TextureResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t TextureResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t specialized static TextureResource.load<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>);
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator);
  v1[9] = v3;
  v1[10] = *(_QWORD *)(v3 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for MainActor();
  v1[13] = static MainActor.shared.getter();
  v1[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[15] = v4;
  return swift_task_switch();
}

uint64_t specialized static TextureResource.load<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v0[2] = v0[5];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
  v5 = lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type LoadRequest<TextureResource> and conformance LoadRequest<A>, &demangling cache variable for type metadata for LoadRequest<TextureResource>, (uint64_t)&protocol conformance descriptor for LoadRequest<A>);
  MEMORY[0x220768A08](v4, v5);
  AsyncThrowingPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[16] = static MainActor.shared.getter();
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator and conformance AsyncThrowingPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncThrowingPublisher<LoadRequest<TextureResource>>.Iterator, MEMORY[0x24BDB9D48]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = specialized static TextureResource.load<A>(_:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc();
  v3 = *(_QWORD *)(v2 + 128);
  if (v0)
  {
    if (v3)
      goto LABEL_5;
  }
  else if (v3)
  {
LABEL_5:
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v1)
  {
    v5 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }
  else
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    swift_allocError();
    CancellationError.init()();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 144);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_willThrowTypedImpl();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for RequestLoadable.addToLoadRequest(_:) in conformance TextureResource()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t static TextureResource.generate(from:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = v4;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 128) = v6 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 72) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 80) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 88) = v7;
  return swift_task_switch();
}

uint64_t static TextureResource.generate(from:named:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);
  int v8;

  v1 = *(_QWORD *)(v0 + 56);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v2 = RETextureImportOperationCreateWithCGImage();
  if (v1)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  HIDWORD(v3) = *(_DWORD *)(v0 + 128);
  LODWORD(v3) = HIDWORD(v3);
  swift_release();
  v8 = v3 >> 16;
  v4 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v2, &v8, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
  *(_QWORD *)(v0 + 96) = v4;
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v5;
  *v5 = v0;
  v5[1] = static TextureResource.generate(from:named:options:);
  return v7(v4);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static TextureResource.generate(from:named:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 120) = a1;
  }
  return swift_task_switch();
}

uint64_t TextureResource.replace(using:options:)(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  HIDWORD(v4) = *a2;
  LODWORD(v4) = *a2;
  *(_DWORD *)(v3 + 80) = v4 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 32) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 40) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 48) = v5;
  return swift_task_switch();
}

uint64_t TextureResource.replace(using:options:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);
  int v7;

  HIDWORD(v1) = *(_DWORD *)(v0 + 80);
  LODWORD(v1) = HIDWORD(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v7 = v1 >> 16;
  v3 = TextureResource.replaceAsyncInternal(using:options:)(v2, &v7);
  *(_QWORD *)(v0 + 56) = v3;
  v6 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  *v4 = v0;
  v4[1] = TextureResource.replace(using:options:);
  return v6(v3);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_release();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.copy(to:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = type metadata accessor for MainActor();
  v2[5] = static MainActor.shared.getter();
  v2[6] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[7] = v3;
  return swift_task_switch();
}

uint64_t TextureResource.copy(to:)()
{
  int8x16_t *v0;
  int8x16_t *v1;
  _QWORD *v2;
  int8x16_t v4;

  v4 = v0[1];
  v0[4].i64[0] = static MainActor.shared.getter();
  v1 = (int8x16_t *)swift_task_alloc();
  v0[4].i64[1] = (uint64_t)v1;
  v1[1] = vextq_s8(v4, v4, 8uLL);
  v2 = (_QWORD *)swift_task_alloc();
  v0[5].i64[0] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = TextureResource.copy(to:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in TextureResource.copy(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](v6);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6, v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(a2, a3, (uint64_t)partial apply for closure #1 in closure #1 in TextureResource.copy(to:), v11);
  return swift_release();
}

uint64_t closure #1 in closure #1 in TextureResource.copy(to:)(void *a1)
{
  id v1;

  if (a1)
  {
    v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return static TextureResource.texture2DArray(slices:named:options:)(a1, a2, a3, a4, 3);
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 64) = v7;
  return swift_task_switch();
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  __int16 v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  int v9[3];

  v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)v9, 3);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v9[0] = v4 >> 16;
    v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v9, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(_QWORD *)(v0 + 72) = v5;
    v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v6;
    *v6 = v0;
    v6[1] = static TextureResource.texture2DArray(slices:named:options:);
    return v8(v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  type metadata accessor for TextureResource();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t static TextureResource.cube(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return specialized static TextureResource.cube(slices:named:options:)(a1, a2, a3, a4);
}

uint64_t static TextureResource.cube(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 64) = v7;
  return swift_task_switch();
}

uint64_t static TextureResource.cube(slices:named:options:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  __int16 v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  int v9[3];

  v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)v9, 5);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v9[0] = v4 >> 16;
    v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v9, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(_QWORD *)(v0 + 72) = v5;
    v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v6;
    *v6 = v0;
    v6[1] = static TextureResource.cube(slices:named:options:);
    return v8(v5);
  }
}

uint64_t static TextureResource.cube(slices:named:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

uint64_t static TextureResource.texture3D(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  return static TextureResource.texture2DArray(slices:named:options:)(a1, a2, a3, a4, 7);
}

uint64_t static TextureResource.texture2DArray(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v10;

  v10 = *a4;
  v7 = specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(a1, a2, a3, (char *)&v10, a5);
  if (!v5)
  {
    v8 = v7[2];
    type metadata accessor for TextureResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
  }
  return v6;
}

uint64_t static TextureResource.texture3D(slices:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 104) = v6 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 64) = v7;
  return swift_task_switch();
}

uint64_t static TextureResource.texture3D(slices:named:options:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  __int16 v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  int v9[3];

  v1 = (void *)specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (uint64_t)v9, 7);
  if ((v3 & 0x100) != 0)
  {
    outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(v1, v2, v3, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    HIDWORD(v4) = *(_DWORD *)(v0 + 104);
    LODWORD(v4) = HIDWORD(v4);
    v9[0] = v4 >> 16;
    v5 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)((uint64_t)v1, v9, 1, (uint64_t)closure #1 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:), 0);
    *(_QWORD *)(v0 + 72) = v5;
    v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                         + async function pointer to specialized static TextureResource.load<A>(_:));
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v6;
    *v6 = v0;
    v6[1] = static TextureResource.cube(slices:named:options:);
    return v8(v5);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureResource.Compression.Kind()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v2 = 0;
  }
  else if ((_DWORD)v2 == 5)
  {
    v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextureResource.Compression.Kind()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v2 = 0;
  }
  else if ((_DWORD)v2 == 5)
  {
    v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Compression.Kind()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v2 = 0;
  }
  else if ((_DWORD)v2 == 5)
  {
    v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void static TextureResource.Compression.none.getter(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

BOOL static TextureResource.Compression.ASTCQuality.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TextureResource.Compression.ASTCQuality.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

unsigned __int8 *static TextureResource.Compression.astc(blockSize:quality:)@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, _WORD *a3@<X8>)
{
  *a3 = *result | (*a2 << 8);
  return result;
}

void TextureResource.Compression.hash(into:)()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v2 = 0;
  }
  else if ((_DWORD)v2 == 5)
  {
    v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
}

BOOL static TextureResource.Compression.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 8;
  if (v2 >> 8 != 4)
  {
    if (v4 == 5)
    {
      if ((v3 & 0xFF00) == 0x500)
        return 1;
    }
    else if ((v3 & 0xFE00) != 0x400)
    {
      v5 = (v3 ^ v2);
      if (v4 == v3 >> 8 && v5 == 0)
        return 1;
    }
    return 0;
  }
  return (v3 & 0xFF00) == 0x400;
}

Swift::Int TextureResource.Compression.hashValue.getter()
{
  unsigned __int16 *v0;
  unint64_t v1;
  Swift::UInt v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  v2 = v1 >> 8;
  if ((v1 >> 8) == 4)
  {
    v2 = 0;
  }
  else if ((_DWORD)v2 == 5)
  {
    v2 = 1;
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TextureResource.Compression(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 8;
  if (v2 >> 8 == 4)
    return (v3 & 0xFF00) == 0x400;
  if (v4 != 5)
  {
    if ((v3 & 0xFE00) != 0x400)
    {
      v5 = (v3 ^ v2);
      if (v4 == v3 >> 8 && v5 == 0)
        return 1;
    }
    return 0;
  }
  return (v3 & 0xFF00) == 0x500;
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void *a1, uint64_t a2, uint64_t a3, char *a4, Swift::Int_optional a5, int *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  char v17;

  v9 = *a6;
  a5.is_nil &= 1u;
  v17 = *a4;
  v16 = v9;
  v10 = static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)((uint64_t)a1, a2, a3, (int)&v17, a5, (char *)&v16);
  if (v6)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v10;
    v12 = swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(((uint64_t (*)(uint64_t))v11)(v12) + 16);
    type metadata accessor for TextureResource();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v13;
    *(_QWORD *)(v7 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v14)
    {
      swift_release_n();
      swift_release();
      swift_release();

    }
    else
    {
      swift_release();

      swift_release();
      swift_release();
    }
  }
  return v7;
}

uint64_t (*static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, Swift::Int_optional skyboxCubeDimension, char *a6))()
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*result)();
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  Swift::Int_optional v23;

  v8 = v6;
  v12 = *a6;
  v13 = a6[1];
  v14 = *((_WORD *)a6 + 1);
  v23.is_nil = skyboxCubeDimension.is_nil;
  v23.value = skyboxCubeDimension.value;
  v15 = (unint64_t)EnvironmentResource.CreateOptions.toCoreImageBasedLightCompilationOptions(skyboxCubeDimension:)(v23);
  v16 = specialized static EnvironmentResource.generateCube(fromEquirectangular:withName:compilationOptions:semantic:mipmapOptions:compressionNone:)(a1, a2, a3, v15, dword_21BE57EF8[v12], (2 - v13), (v14 & 0xFF00) == 1024);
  result = (uint64_t (*)())swift_bridgeObjectRelease();
  if (!v7)
  {
    v18 = (unint64_t)TextureResource.Compression.toCoreASTCOptions()();
    if (v18)
    {
      v19 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(v16, v18);
      v21 = v20;
      swift_bridgeObjectRelease();
    }
    else
    {
      v19 = 0;
      v21 = 0;
    }
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = v16;
    v22[3] = v19;
    v22[4] = v21;
    v22[5] = v8;
    return partial apply for specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:);
  }
  return result;
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, char a6, _WORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = v7;
  *(_BYTE *)(v8 + 114) = a6;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 115) = *a4;
  *(_WORD *)(v8 + 116) = *a7;
  *(_WORD *)(v8 + 112) = a7[1];
  type metadata accessor for MainActor();
  *(_QWORD *)(v8 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v8 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v8 + 72) = v9;
  return swift_task_switch();
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t);

  v1 = closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 115), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 114) & 1, *(unsigned __int8 *)(v0 + 116) | (*(unsigned __int16 *)(v0 + 112) << 16) | (*(unsigned __int8 *)(v0 + 117) << 8), *(_QWORD *)(v0 + 48));
  *(_QWORD *)(v0 + 80) = v1;
  swift_bridgeObjectRelease();
  v4 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  return v4(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void **)(v0 + 16);
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  type metadata accessor for TextureResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 104) = a1;
  }
  return swift_task_switch();
}

uint64_t closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;

  v36 = a8;
  v37 = a3;
  v35 = a6;
  v33 = a2;
  v34 = a5;
  v11 = type metadata accessor for DispatchPredicate();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (uint64_t *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = specialized static __ServiceLocator.shared.getter();
  v16 = *(void **)(*(_QWORD *)(v15 + 168) + 16);
  swift_beginAccess();
  v17 = *(_QWORD *)(v15 + 24);
  swift_unownedRetainStrong();
  v18 = *(void **)(v17 + 32);
  swift_retain();
  v19 = v16;
  v20 = v18;
  swift_release();
  *v14 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, *MEMORY[0x24BEE5610], v11);
  v21 = v20;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v17 & 1) != 0)
  {
    v23 = a4 & 1;
    v24 = swift_allocObject();
    v25 = v33;
    *(_QWORD *)(v24 + 16) = a1;
    *(_QWORD *)(v24 + 24) = v25;
    *(_QWORD *)(v24 + 32) = v37;
    *(_BYTE *)(v24 + 40) = v23;
    *(_QWORD *)(v24 + 48) = v34;
    *(_BYTE *)(v24 + 56) = v35 & 1;
    *(_DWORD *)(v24 + 57) = a7;
    *(_QWORD *)(v24 + 64) = v15;
    *(_QWORD *)(v24 + 72) = v19;
    *(_QWORD *)(v24 + 80) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<TextureResource>);
    v26 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<TextureResource, Error>?>);
    v27 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v28 = swift_allocObject();
    *(_DWORD *)(v28 + 16) = 0;
    *(_QWORD *)(v27 + 16) = v28;
    *(_QWORD *)(v27 + 24) = 0;
    *(_BYTE *)(v27 + 32) = -1;
    *(_QWORD *)(v26 + 16) = v27;
    v29 = (_QWORD *)swift_allocObject();
    v29[2] = partial apply for closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
    v29[3] = v24;
    v29[4] = v27;
    v29[5] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<TextureResource, Error>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v30 = v19;
    v31 = a1;
    *(_QWORD *)(v26 + 24) = Future.init(_:)();
    v32 = specialized LoadRequest<A>.thenWaitForResourceSharing()();
    swift_release();

    swift_release();
    return v32;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, int a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  _BYTE v29[4];
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[7];

  v36 = a8;
  v33 = a4;
  v34 = a7;
  v35 = a12;
  v40 = a11;
  v32 = a9 >> 8;
  v30 = a6 & 1;
  v31 = HIWORD(a9);
  v16 = type metadata accessor for DispatchWorkItemFlags();
  v39 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v29[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for DispatchQoS();
  v37 = *(_QWORD *)(v19 - 8);
  v38 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v29[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  v23 = swift_allocObject();
  v24 = v33;
  *(_QWORD *)(v23 + 16) = a3;
  *(_QWORD *)(v23 + 24) = v24;
  *(_QWORD *)(v23 + 32) = a5;
  *(_BYTE *)(v23 + 40) = v30;
  *(_QWORD *)(v23 + 48) = v34;
  *(_BYTE *)(v23 + 56) = v36 & 1;
  *(_BYTE *)(v23 + 57) = a9;
  *(_BYTE *)(v23 + 58) = v32;
  *(_WORD *)(v23 + 59) = v31;
  *(_QWORD *)(v23 + 64) = a10;
  *(_QWORD *)(v23 + 72) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v25 = v35;
  *(_QWORD *)(v23 + 80) = v22;
  *(_QWORD *)(v23 + 88) = v25;
  aBlock[4] = partial apply for doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_186;
  v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v27 = a3;
  static DispatchQoS.unspecified.getter();
  v41 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207693A4](0, v21, v18, v26);
  _Block_release(v26);
  (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v18, v16);
  (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v21, v38);
  return swift_release();
}

uint64_t doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, Swift::Int_optional a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v14;
  char v15;

  a5.is_nil &= 1u;
  v15 = a4 & 1;
  v14 = a6;
  v9 = static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(a1, a2, a3, (int)&v15, a5, (char *)&v14);
  v11 = v10;
  swift_beginAccess();
  swift_unownedRetainStrong();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v9;
  v12[3] = v11;
  v12[4] = a8;
  v12[5] = a9;
  swift_retain();
  swift_retain();
  __Engine.asyncOnEngineQueue(_:)((uint64_t)partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:), (uint64_t)v12);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(void (*a1)(void), uint64_t a2, void (*a3)(uint64_t, _QWORD))
{
  uint64_t v4;

  a1();
  v4 = swift_retain();
  a3(v4, 0);
  return swift_release_n();
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(CGImage *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v8;
  char v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16[2];
  __int16 v17;

  v8 = *(_BYTE *)a4;
  v9 = *(_BYTE *)(a4 + 1);
  v10 = *(_WORD *)(a4 + 2);
  v11 = specialized static TextureResource.sliceCube(cgImage:)(a1);
  if (v4)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    v16[0] = v8;
    v16[1] = v9;
    v17 = v10;
    v13 = *((_QWORD *)specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(v11, a2, a3, v16, 5)+ 2);
    type metadata accessor for TextureResource();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v14 + 16);
    a3 = swift_allocObject();
    *(_QWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();

  }
  return a3;
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  *(_WORD *)(v5 + 110) = *a4;
  *(_WORD *)(v5 + 104) = a4[1];
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 64) = v6;
  return swift_task_switch();
}

uint64_t TextureResource.init(cubeFromImage:named:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  _QWORD *v4;

  v1 = specialized static TextureResource.sliceCube(cgImage:)(*(CGImage **)(v0 + 16));
  *(_QWORD *)(v0 + 72) = v1;
  v2 = v1;
  v3 = *(_WORD *)(v0 + 104);
  *(_WORD *)(v0 + 106) = *(_WORD *)(v0 + 110);
  *(_WORD *)(v0 + 108) = v3;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = TextureResource.init(cubeFromImage:named:options:);
  return static TextureResource.cube(slices:named:options:)(v2, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), (_DWORD *)(v0 + 106));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(void **)(v0 + 16);
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  type metadata accessor for TextureResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.init(cubeFromImage:named:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    *(_QWORD *)(v4 + 96) = a1;
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t (*static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(uint64_t a1, uint64_t a2))()
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t (*result)();
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  id v23;
  __int16 v24;
  Class isa;
  uint64_t CompressedTextureAssetData;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v42 = *MEMORY[0x24BDAC8D0];
  v6 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v6, (uint64_t)&v40, &demangling cache variable for type metadata for __RenderService?);
  if (!v41)
  {
    __break(1u);
LABEL_29:
    __break(1u);
  }
  outlined init with take of BindableDataInternal(&v40, (uint64_t)&v36);
  v7 = v38;
  v8 = v39;
  __swift_project_boxed_opaque_existential_1(&v36, v38);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
  if (!*MEMORY[0x24BE26388])
    goto LABEL_29;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = v10;
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
    v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  result = (uint64_t (*)())*MEMORY[0x24BE26390];
  if (!*MEMORY[0x24BE26390])
  {
    __break(1u);
    return result;
  }
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v20 = v17;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
  v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
    return 0;
LABEL_10:
  RETextureAssetGetPixelFormat();
  v23 = (id)RERenderManagerGetRenderDevice();
  MTLPixelFormatGetInfoForDevice();
  v24 = v37;
  swift_unknownObjectRelease();
  if ((v24 & 0x400) != 0)
    return 0;
  *(_QWORD *)&v40 = 0;
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  CompressedTextureAssetData = RETextureAssetCreateCompressedTextureAssetData();

  if (CompressedTextureAssetData)
  {
    v27 = (id)RERenderManagerGetRenderDevice();
    RETextureAssetDataGetPixelFormat();
    MTLPixelFormatGetInfoForDevice();
    if ((v37 & 0x400) == 0 && (objc_msgSend(v27, sel_supportsFamily_, 1002) & 1) == 0)
    {
      specialized static __ServiceLocator.shared.getter();
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_21B9AA000, v28, v29, "Compression not applied because ASTC pixel formats are not supported by device. Keeping track of options so later calls to Entity.write() can apply compression.", v30, 2u);
        MEMORY[0x220772F44](v30, -1, -1);
        swift_unknownObjectRelease();

LABEL_27:
        v35 = (_QWORD *)swift_allocObject();
        v35[2] = v9;
        v35[3] = a1;
        v35[4] = CompressedTextureAssetData;
        v35[5] = v3;
        return partial apply for closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:);
      }

    }
    swift_unknownObjectRelease();
    goto LABEL_27;
  }
  v31 = (_QWORD)v40 == 0;
  if ((_QWORD)v40)
    v32 = v40;
  else
    v32 = 0xD00000000000001ALL;
  if ((_QWORD)v40)
    v33 = 0;
  else
    v33 = 0x800000021BE83900;
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  swift_allocError();
  *(_QWORD *)v34 = v32;
  *(_QWORD *)(v34 + 8) = v33;
  *(_BYTE *)(v34 + 16) = v31;
  return (uint64_t (*)())swift_willThrow();
}

uint64_t closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)()
{
  uint64_t v1;

  if ((MEMORY[0x22077079C]() & 1) != 0)
    return RERelease();
  lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
  swift_allocError();
  *(_QWORD *)v1 = 0xD00000000000001ALL;
  *(_QWORD *)(v1 + 8) = 0x800000021BE83900;
  *(_BYTE *)(v1 + 16) = 1;
  return swift_willThrow();
}

uint64_t specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  if (!a2)
  {
LABEL_5:
    if ((id)REAssetGetSwiftObject())
    {
      type metadata accessor for TextureResource();
      a3 = swift_dynamicCastClass();
      if (a3)
      {
LABEL_9:
        RERelease();
        return a3;
      }
      swift_unknownObjectRelease();
    }
    type metadata accessor for TextureResource();
    a3 = swift_allocObject();
    *(_QWORD *)(a3 + 16) = a1;
    *(_QWORD *)(a3 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_9;
  }
  v7 = swift_retain();
  a2(v7);
  if (!v3)
  {
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    goto LABEL_5;
  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
  RERelease();
  return a3;
}

uint64_t TextureResource.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t MipmapLevelCount;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v8 + 32) = 0x6369746E616D6573;
  *(_QWORD *)(v8 + 40) = 0xE800000000000000;
  *(_QWORD *)(v8 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextureResource.Semantic?);
  swift_retain();
  TextureResource.semantic.getter((_BYTE *)(v8 + 48));
  *(_QWORD *)(v8 + 80) = 0x746867696568;
  *(_QWORD *)(v8 + 88) = 0xE600000000000000;
  RETextureAssetGetSize();
  v10 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v8 + 96) = v9;
  *(_QWORD *)(v8 + 120) = v10;
  *(_QWORD *)(v8 + 128) = 0x6874646977;
  *(_QWORD *)(v8 + 136) = 0xE500000000000000;
  RETextureAssetGetSize();
  *(_QWORD *)(v8 + 144) = v11;
  *(_QWORD *)(v8 + 168) = v10;
  *(_QWORD *)(v8 + 176) = 0xD000000000000010;
  *(_QWORD *)(v8 + 184) = 0x800000021BE83510;
  MipmapLevelCount = RETextureAssetGetMipmapLevelCount();
  *(_QWORD *)(v8 + 216) = v10;
  *(_QWORD *)(v8 + 192) = MipmapLevelCount;
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  type metadata accessor for TextureResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance TextureResource()
{
  return TextureResource.customMirror.getter();
}

uint64_t TextureResource.DrawableQueue.Descriptor.timeout.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

__n128 (*TextureResource.DrawableQueue.Descriptor.timeout.modify(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  return TextureResource.DrawableQueue.Descriptor.timeout.modify;
}

__n128 TextureResource.DrawableQueue.Descriptor.timeout.modify(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 40) = *a1;
  return result;
}

uint64_t TextureResource.DrawableQueue.Descriptor.init(pixelFormat:width:height:usage:mipmapsMode:timeout:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v8;

  v8 = *a5;
  *(_QWORD *)a8 = result;
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = v8;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  *(_BYTE *)(a8 + 56) = 0;
  return result;
}

uint64_t TextureResource.init(image:withName:options:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  return specialized TextureResource.init(image:withName:options:)(a1, a2, a3, a4);
}

uint64_t TextureResource.init(image:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 56) = a3;
  *(_QWORD *)(v5 + 64) = v4;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  HIDWORD(v6) = *a4;
  LODWORD(v6) = *a4;
  *(_DWORD *)(v5 + 128) = v6 >> 16;
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 72) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 80) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 88) = v7;
  return swift_task_switch();
}

uint64_t TextureResource.init(image:withName:options:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);
  int v8;

  v1 = *(_QWORD *)(v0 + 56);
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v2 = RETextureImportOperationCreateWithCGImage();
  if (v1)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  HIDWORD(v3) = *(_DWORD *)(v0 + 128);
  LODWORD(v3) = HIDWORD(v3);
  v8 = v3 >> 16;
  v4 = static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(v2, &v8, 1, (uint64_t)closure #1 in static TextureResource.generateAsyncInternal(from:named:options:), 0);
  *(_QWORD *)(v0 + 96) = v4;
  swift_bridgeObjectRelease();
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static TextureResource.load<A>(_:)
                                       + async function pointer to specialized static TextureResource.load<A>(_:));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v5;
  *v5 = v0;
  v5[1] = TextureResource.init(image:withName:options:);
  return v7(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(void **)(v0 + 40);
  swift_release();
  v3 = *(_QWORD *)(v1 + 16);
  type metadata accessor for TextureResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();

  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.init(image:withName:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 120) = a1;
  }
  return swift_task_switch();
}

void *specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void *result, uint64_t a2, uint64_t a3, void (*a4)(void (*)(_QWORD), uint64_t), void (*a5)(void (*)(_QWORD), uint64_t))
{
  void (*v5)(_OWORD *);
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _OWORD v12[2];

  if (result)
  {
    v5 = *(void (**)(_OWORD *))(a2 + 16);
    if (!v5)
    {
      __break(1u);
      return result;
    }
    v8 = result;
    v9 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)&v12[0] = result;
    BYTE8(v12[0]) = 1;
    v10 = result;
    a4((void (*)(_QWORD))v5, v9);
    v5(v12);
    a5((void (*)(_QWORD))v5, v9);

  }
  swift_beginAccess();
  result = (void *)swift_weakLoadStrong();
  if (result)
  {
    v11 = (uint64_t)result + 16;
    memset(v12, 0, sizeof(v12));
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v12, v11);
    swift_endAccess();
    return (void *)swift_release();
  }
  return result;
}

void *specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void *result, uint64_t a2)
{
  void (*v2)(_BYTE *);
  void *v3;
  id v4;
  uint64_t v5;
  _BYTE v6[65];
  char v7;

  if (result)
  {
    v2 = *(void (**)(_BYTE *))(a2 + 16);
    if (!v2)
    {
      __break(1u);
      return result;
    }
    v3 = result;
    *(_QWORD *)v6 = result;
    memset(&v6[8], 0, 57);
    v7 = 1;
    v4 = result;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v2);
    v2(v6);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v2);

  }
  swift_beginAccess();
  result = (void *)swift_weakLoadStrong();
  if (result)
  {
    v5 = (uint64_t)result + 16;
    memset(v6, 0, 32);
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v6, v5);
    swift_endAccess();
    return (void *)swift_release();
  }
  return result;
}

uint64_t specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[6];
  _QWORD aBlock[6];

  v5 = swift_allocObject();
  swift_weakInit();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a3;
  v6[3] = a1;
  v6[4] = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  v7 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_304;
  v8 = _Block_copy(aBlock);
  v9 = _Block_copy(v8);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v13[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v13[5] = v10;
  v13[0] = v7;
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v13[3] = &block_descriptor_311;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v11);
  _Block_release(v8);
  swift_release();
  swift_release();
  return REAssetLoadRequestAddAsset();
}

{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  _QWORD v13[6];
  _QWORD aBlock[6];

  v5 = swift_allocObject();
  swift_weakInit();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = a3;
  v6[3] = a1;
  v6[4] = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  v7 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_129;
  v8 = _Block_copy(aBlock);
  v9 = _Block_copy(v8);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  v13[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v13[5] = v10;
  v13[0] = v7;
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v13[3] = &block_descriptor_136;
  v11 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v11);
  _Block_release(v8);
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 16))
    REAssetLoadRequestAddAsset();
  result = swift_beginAccess();
  if (*(_QWORD *)(a1 + 24))
    return REAssetLoadRequestAddAsset();
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v15[6];
  _QWORD aBlock[6];

  v5 = swift_allocObject();
  swift_weakInit();
  v6 = swift_allocObject();
  v7 = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a1 + 16);
  v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 72) = v8;
  *(_QWORD *)(v6 + 16) = a3;
  *(_BYTE *)(v6 + 88) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 96) = v5;
  aBlock[4] = partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing();
  aBlock[5] = v6;
  v9 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_1;
  v10 = _Block_copy(aBlock);
  v11 = _Block_copy(v10);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  v15[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v15[5] = v12;
  v15[0] = v9;
  v15[1] = 1107296256;
  v15[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v15[3] = &block_descriptor_82;
  v13 = _Block_copy(v15);
  outlined retain of ShaderGraphMaterial(a1);
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v13);
  _Block_release(v10);
  swift_release();
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1, uint64_t a2, void *a3)
{
  void (*v4)(void **);
  __CFError *RequestCopyError;
  void *v6;
  void (*v7)(void **);
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];
  void *aBlock;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  uint64_t v20;

  if ((a1 & 1) != 0)
  {
    v4 = *(void (**)(void **))(a2 + 16);
    if (v4)
    {
      aBlock = a3;
      LOBYTE(v16) = 0;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      swift_retain();
      v4(&aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      swift_release();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  RequestCopyError = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = (void *)specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(RequestCopyError);

  v7 = *(void (**)(void **))(a2 + 16);
  if (!v7)
  {
LABEL_14:
    __break(1u);
    return;
  }
  aBlock = v6;
  LOBYTE(v16) = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
  v8 = v6;
  v7(&aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);

LABEL_8:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v19 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    v20 = 0;
    v9 = MEMORY[0x24BDAC760];
    aBlock = (void *)MEMORY[0x24BDAC760];
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v18 = &block_descriptor_314;
    v10 = _Block_copy(&aBlock);
    v11 = _Block_copy(v10);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    v14[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v14[5] = v12;
    v14[0] = v9;
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v14[3] = &block_descriptor_321;
    v13 = _Block_copy(v14);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v13);
    swift_release();
    _Block_release(v10);
  }
}

{
  void (*v4)(void **);
  __CFError *RequestCopyError;
  void *v6;
  void (*v7)(void **);
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];
  void *aBlock;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  uint64_t (*v19)(_QWORD, _QWORD);
  uint64_t v20;

  if ((a1 & 1) != 0)
  {
    v4 = *(void (**)(void **))(a2 + 16);
    if (v4)
    {
      aBlock = a3;
      LOBYTE(v16) = 0;
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      swift_retain();
      v4(&aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      swift_release();
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_12;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  RequestCopyError = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v6 = (void *)specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(RequestCopyError);

  v7 = *(void (**)(void **))(a2 + 16);
  if (!v7)
  {
LABEL_14:
    __break(1u);
    return;
  }
  aBlock = v6;
  LOBYTE(v16) = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v7);
  v8 = v6;
  v7(&aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);

LABEL_8:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v19 = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    v20 = 0;
    v9 = MEMORY[0x24BDAC760];
    aBlock = (void *)MEMORY[0x24BDAC760];
    v16 = 1107296256;
    v17 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v18 = &block_descriptor_139;
    v10 = _Block_copy(&aBlock);
    v11 = _Block_copy(v10);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v11;
    v14[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v14[5] = v12;
    v14[0] = v9;
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v14[3] = &block_descriptor_146;
    v13 = _Block_copy(v14);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v13);
    swift_release();
    _Block_release(v10);
  }
}

void specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_BYTE *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  __CFError *RequestCopyError;
  CFIndex Code;
  void *v15;
  void (*v16)(_BYTE *);
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  __CFError **v23;
  _QWORD v24[6];
  _BYTE aBlock[24];
  __int128 v26;
  _BYTE v27[25];
  char v28;

  if ((a1 & 1) != 0)
  {
    v4 = *(void (**)(_BYTE *))(a2 + 16);
    if (v4)
    {
      v6 = *(_QWORD *)(a3 + 24);
      v7 = *(_QWORD *)(a3 + 32);
      v8 = *(_QWORD *)(a3 + 40);
      v9 = *(_QWORD *)(a3 + 56);
      v10 = *(_BYTE *)(a3 + 16) & 1;
      v11 = *(_BYTE *)(a3 + 64) & 1;
      v12 = *(_BYTE *)(a3 + 48) & 1 | ((unint64_t)(*(_BYTE *)(a3 + 49) & 1) << 8);
      *(_OWORD *)aBlock = *(_OWORD *)a3;
      *(_QWORD *)&aBlock[16] = v10;
      *(_QWORD *)&v26 = v6;
      *((_QWORD *)&v26 + 1) = v7;
      *(_QWORD *)v27 = v8;
      *(_QWORD *)&v27[8] = v12;
      *(_QWORD *)&v27[16] = v9;
      v27[24] = v11;
      v28 = 0;
      outlined retain of ShaderGraphMaterial(a3);
      outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v4);
      v4(aBlock);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v4);
      outlined release of ShaderGraphMaterial(a3);
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  RequestCopyError = (__CFError *)REAssetLoadRequestCopyError();
  swift_release();
  if (!RequestCopyError)
  {
LABEL_21:
    __break(1u);
    return;
  }
  Code = CFErrorGetCode(RequestCopyError);
  if (Code == 100)
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v15 = (void *)swift_allocError();
    CancellationError.init()();
  }
  else
  {
    if (Code != 200 && Code != 300)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v15 = (void *)swift_allocError();
      *v23 = RequestCopyError;
      v16 = *(void (**)(_BYTE *))(a2 + 16);
      if (v16)
        goto LABEL_13;
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v15 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
  }

  v16 = *(void (**)(_BYTE *))(a2 + 16);
  if (!v16)
    goto LABEL_18;
LABEL_13:
  *(_QWORD *)aBlock = v15;
  *(_OWORD *)&aBlock[8] = 0u;
  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v28 = 1;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?((uint64_t)v16);
  v17 = v15;
  v16(aBlock);
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v16);

LABEL_14:
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    *((_QWORD *)&v26 + 1) = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    *(_QWORD *)v27 = 0;
    v18 = MEMORY[0x24BDAC760];
    *(_QWORD *)aBlock = MEMORY[0x24BDAC760];
    *(_QWORD *)&aBlock[8] = 1107296256;
    *(_QWORD *)&aBlock[16] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(_QWORD *)&v26 = &block_descriptor_85;
    v19 = _Block_copy(aBlock);
    v20 = _Block_copy(v19);
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v20;
    v24[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v24[5] = v21;
    v24[0] = v18;
    v24[1] = 1107296256;
    v24[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v24[3] = &block_descriptor_92;
    v22 = _Block_copy(v24);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v22);
    swift_release();
    _Block_release(v19);
  }
}

uint64_t specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2538, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2510, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA24E8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA24C0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2240, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA1FC0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2498, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2470, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2290, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA2268, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA21F0, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA21C8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, a3, a4, a5, a6, (uint64_t)&unk_24DFA1F98, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

uint64_t specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v14;

  v14 = (_QWORD *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a1;
  v14[5] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  a3(a8, v14);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  os_unfair_lock_s *v7;
  _BYTE v9[48];

  outlined init with copy of (Int, URL)(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Result<Material, Error>);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  outlined assign with copy of Result<Material, Error>?((uint64_t)v9, a2 + 24);
  swift_endAccess();
  os_unfair_lock_unlock(v7);
  outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for Result<Material, Error>?);
  return a4(a1);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *))
{
  id v6;
  char v7;
  os_unfair_lock_s *v8;
  void *v9;
  unsigned __int8 v10;
  id v12;
  char v13;

  v6 = *(id *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  outlined copy of Result<AUAudioUnit, Error>(*(id *)a1);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v6;
  v10 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = v7;
  outlined consume of Result<AUAudioUnit, Error>?(v9, v10);
  os_unfair_lock_unlock(v8);
  v12 = v6;
  v13 = v7;
  return a4(&v12);
}

{
  id v6;
  char v7;
  os_unfair_lock_s *v8;
  void *v9;
  unsigned __int8 v10;
  id v12;
  char v13;

  v6 = *(id *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  v8 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  outlined copy of Result<[Entity], Error>(*(id *)a1, v7, (uint64_t (*)(id))MEMORY[0x24BEE4BD0]);
  os_unfair_lock_lock(v8);
  swift_beginAccess();
  v9 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v6;
  v10 = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = v7;
  outlined consume of Result<[Entity], Error>?(v9, v10);
  os_unfair_lock_unlock(v8);
  v12 = v6;
  v13 = v7;
  return a4(&v12);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id *), uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  id v9;
  char v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  id v15;
  char v16;

  v9 = *(id *)a1;
  v10 = *(_BYTE *)(a1 + 8);
  v11 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  outlined copy of Result<ModelEntity, Error>(*(id *)a1, v10);
  os_unfair_lock_lock(v11);
  swift_beginAccess();
  v12 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v9;
  v13 = *(unsigned __int8 *)(a2 + 32);
  *(_BYTE *)(a2 + 32) = v10;
  a6(v12, v13);
  os_unfair_lock_unlock(v11);
  v15 = v9;
  v16 = v10;
  return a4(&v15);
}

uint64_t specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *))
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  __int16 v24;
  char v25;
  char v26;
  _QWORD v28[8];
  char v29;
  char v30;

  v5 = *(id *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(void **)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v25 = *(_BYTE *)(a1 + 64);
  v26 = *(_BYTE *)(a1 + 65);
  v13 = (os_unfair_lock_s *)(*(_QWORD *)(a2 + 16) + 16);
  outlined copy of Result<ShaderGraphMaterial, Error>(*(id *)a1, v6, v7, v8, v9, v10, v11, v12, v25, v26);
  os_unfair_lock_lock(v13);
  swift_beginAccess();
  v14 = *(void **)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(void **)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a2 + 80);
  v22 = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v12;
  *(_WORD *)(a2 + 88) = v24;
  outlined consume of Result<ShaderGraphMaterial, Error>?(v14, v15, v16, v17, v18, v19, v20, v21, v22);
  os_unfair_lock_unlock(v13);
  v28[0] = v5;
  v28[1] = v6;
  v28[2] = v7;
  v28[3] = v8;
  v28[4] = v9;
  v28[5] = v10;
  v28[6] = v11;
  v28[7] = v12;
  v29 = v25;
  v30 = v26;
  return a4(v28);
}

BOOL specialized static TextureResource.Compression.Kind.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 8;
  if (v2 >> 8 == 4)
    return (v3 & 0xFF00) == 0x400;
  if (v4 == 5)
    return (v3 & 0xFF00) == 0x500;
  if ((v3 & 0xFE00) == 0x400)
    return 0;
  return v3 == v2 && v4 == v3 >> 8;
}

uint64_t specialized static TextureResource.Compression.ASTCBlockSize.toCore(_:)(unsigned __int8 *a1)
{
  return *a1 + 1;
}

unint64_t specialized static TextureResource.tryCreate(from:disableNetworkSync:)(uint64_t a1, char a2)
{
  uint64_t Asset;
  uint64_t v4;

  Asset = RETextureImportOperationCreateAsset();
  if (!Asset)
    return 0xD000000000000017;
  if ((a2 & 1) != 0)
    REAssetSetNetworkSharingMode();
  if (!(id)REAssetGetSwiftObject())
    goto LABEL_7;
  type metadata accessor for TextureResource();
  v4 = swift_dynamicCastClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_7:
    type metadata accessor for TextureResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = Asset;
    *(_QWORD *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v4;
}

uint64_t specialized TextureResource.init(image:withName:options:)(void *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  __int16 v11;
  _QWORD *v12;
  void *v13;
  char v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;

  v7 = *a4;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_retain();
  v8 = RETextureImportOperationCreateWithCGImage();
  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  v9 = (_QWORD *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v8, 1);
  v12 = v9;
  v13 = v10;
  v14 = v11;
  if ((v11 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v10, v11, 1);
    type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v16 = type metadata accessor for TextureResource();
    *(_QWORD *)(inited + 32) = v12;
    v7 = inited + 32;
    *(_QWORD *)(inited + 56) = v16;
    *(_QWORD *)(inited + 64) = &protocol witness table for TextureResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v4)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      v17 = v12[2];
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = v17;
      *(_QWORD *)(v7 + 24) = 0;
      RERetain();
      REAssetSetSwiftObject();
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 0);
      RERelease();

      return v7;
    }
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 0);
  }
  RERelease();

  return v7;
}

void *specialized static TextureResource.load(contentsOf:withName:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSURL *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int16 v11;
  void *Error;
  void *v13;
  char v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  specialized static __ServiceLocator.shared.getter();
  swift_retain();
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  swift_beginAccess();
  v8 = RETextureImportOperationCreateWithURL();

  if (a3)
  {
    String.utf8CString.getter();
    RETextureImportOperationSetAssetResourceName();
    swift_release();
  }
  swift_release();
  OpaquePointer.set(options:)();
  v9 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v8, 1);
  Error = v9;
  v13 = v10;
  v14 = v11;
  if ((v11 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v9, v10, v11, 1);
    Error = (void *)type metadata accessor for TextureResource.LoadError();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
    swift_allocError();
    v18 = v17;
    v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, a1, v19);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v16 = type metadata accessor for TextureResource();
    *(_QWORD *)(inited + 32) = Error;
    *(_QWORD *)(inited + 56) = v16;
    *(_QWORD *)(inited + 64) = &protocol witness table for TextureResource;
    swift_retain();
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    if (!v21)
    {
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      RERelease();
      return Error;
    }
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v13, v14, 0);
  }
  RERelease();
  return Error;
}

uint64_t specialized static TextureResource.findBundledFileExtension(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;

  v22 = a2;
  v23 = a3;
  v21 = a1;
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for supportedFileTypes != -1)
    swift_once();
  v9 = *((_QWORD *)static TextureResource.supportedFileTypes + 2);
  if (!v9)
    return 0;
  v19 = swift_bridgeObjectRetain();
  v10 = (uint64_t *)(v19 + 40);
  do
  {
    v12 = *(v10 - 1);
    v11 = *v10;
    swift_bridgeObjectRetain();
    v13 = (void *)MEMORY[0x220768C3C](v21, v22);
    if (v11)
    {
      swift_bridgeObjectRetain();
      v14 = (void *)MEMORY[0x220768C3C](v12, v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = 0;
    }
    v15 = objc_msgSend(v23, sel_URLForResource_withExtension_, v13, v14);

    if (v15)
    {
      v16 = v20;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v8, v16, v3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) != 1)
      {
        outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
        goto LABEL_14;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v8, 1, 1, v3);
    }
    v10 += 2;
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for URL?);
    --v9;
  }
  while (v9);
  v12 = 0;
LABEL_14:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized static TextureResource.createTextureAssetDataFor(texture:options:)(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  uint64_t inited;
  uint64_t v4;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  NSDictionary v10;
  uint64_t v11;

  v2 = *a2;
  if (v2 == 3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFStringRef)>);
    inited = swift_initStackObject();
    v4 = inited;
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v5 = (void *)*MEMORY[0x24BE26370];
    v6 = (void **)MEMORY[0x24BE26380];
  }
  else
  {
    if (v2 != 2)
    {
      v10.super.isa = 0;
      goto LABEL_7;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, CFStringRef)>);
    inited = swift_initStackObject();
    v4 = inited;
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v5 = (void *)*MEMORY[0x24BE26370];
    v6 = (void **)MEMORY[0x24BE26378];
  }
  v7 = *v6;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v7;
  v8 = v5;
  v9 = v7;
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_7:
  v11 = RETextureAssetDataCreateWithTexture();

  return v11;
}

uint64_t specialized static TextureResource.load(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, _QWORD *a5)
{
  unsigned __int8 v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, id, _QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TextureAssetFromData;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  id v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  v9 = a4[1];
  v10 = *((unsigned __int16 *)a4 + 1);
  v40 = *a4;
  v41 = v10;
  if (a3)
    v11 = a3;
  else
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v12 = a3;
  v13 = specialized static __ServiceLocator.shared.getter();
  swift_retain();
  v14 = specialized static TextureResource.findBundledFileExtension(named:in:)(a1, a2, v11);
  v16 = v15;
  v17 = (void *)MEMORY[0x220768C3C](a1, a2);
  if (v16)
  {
    v18 = (void *)MEMORY[0x220768C3C](v14, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = 0;
  }
  swift_beginAccess();
  v19 = RETextureImportOperationCreateWithBundleResource();

  if (!v19)
  {
LABEL_11:
    v23 = a5[3];
    v24 = a5[4];
    __swift_project_boxed_opaque_existential_1(a5, v23);
    LOBYTE(v37[0]) = v40;
    BYTE1(v37[0]) = v9;
    WORD1(v37[0]) = v41;
    v25 = *(uint64_t (**)(uint64_t, uint64_t, id, _QWORD *, uint64_t, uint64_t))(v24 + 8);
    v35 = v11;
    v26 = v25(a1, a2, v11, v37, v23, v24);
    if (v36)
    {
      swift_release();

      return v23;
    }
    v27 = v26;

    LOBYTE(v37[0]) = v40;
    BYTE1(v37[0]) = v9;
    WORD1(v37[0]) = v41;
    specialized static TextureResource.createTextureAssetDataFor(texture:options:)(v27, (unsigned __int8 *)v37);
    swift_beginAccess();
    outlined init with copy of __REAssetService(v13 + 120, (uint64_t)v37);
    v28 = v38;
    v29 = v39;
    __swift_project_boxed_opaque_existential_1(v37, v38);
    (*(void (**)(uint64_t, uint64_t))(v29 + 32))(v28, v29);
    TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    RERelease();
    if ((id)REAssetGetSwiftObject())
    {
      v31 = type metadata accessor for TextureResource();
      v32 = swift_dynamicCastClass();
      if (v32)
      {
        v23 = v32;
LABEL_18:
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
        type metadata accessor for TextureResource();
        *(_QWORD *)(inited + 32) = v23;
        *(_QWORD *)(inited + 56) = v31;
        *(_QWORD *)(inited + 64) = &protocol witness table for TextureResource;
        swift_retain();
        specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
        swift_arrayDestroy();
        RERelease();

        swift_release();
        swift_unknownObjectRelease();
        return v23;
      }
      swift_unknownObjectRelease();
    }
    v31 = type metadata accessor for TextureResource();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = TextureAssetFromData;
    *(_QWORD *)(v23 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    goto LABEL_18;
  }
  LOBYTE(v37[0]) = v40;
  BYTE1(v37[0]) = v9;
  WORD1(v37[0]) = v41;
  OpaquePointer.set(options:)();
  v20 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v19, 0);
  v23 = (uint64_t)v20;
  if ((v22 & 0x100) != 0)
  {
    outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v20, v21, v22, 1);
    RERelease();
    goto LABEL_11;
  }
  RERelease();

  swift_release();
  return v23;
}

uint64_t sub_21BA58608()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_DWORD *)(v2 + 48), (_QWORD *)(v2 + 56));
}

uint64_t partial apply for specialized closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), (uint64_t)&unk_24DFA2C68, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), (uint64_t)&unk_24DFA21C8, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), (uint64_t)&unk_24DFA2470, (uint64_t)partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

{
  uint64_t v2;

  return specialized closure #1 in LoadRequest.init(_:dependencies:)(a1, a2, *(void (**)(uint64_t, _QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  return closure #1 in static TextureResource.loadAsync(contentsOf:withName:options:)(v1 + ((v3 + 16) & ~v3), a1);
}

void outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    outlined consume of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  else
    swift_release();
}

void outlined consume of TextureResource.TextureImportOperationError(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_bridgeObjectRelease();
  else

}

uint64_t type metadata accessor for TextureResource.LoadError()
{
  uint64_t result;

  result = type metadata singleton initialization cache for TextureResource.LoadError;
  if (!type metadata singleton initialization cache for TextureResource.LoadError)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for TextureResource()
{
  return objc_opt_self();
}

id outlined copy of Result<TextureResource, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    return outlined copy of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
  else
    return (id)swift_retain();
}

id outlined copy of TextureResource.TextureImportOperationError(void *a1, id a2, char a3)
{
  if ((a3 & 1) != 0)
    return (id)swift_bridgeObjectRetain();
  else
    return a1;
}

unint64_t lazy protocol witness table accessor for type TextureResource.CopyError and conformance TextureResource.CopyError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError;
  if (!lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.CopyError, &unk_24DFA1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError;
  if (!lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.CopyError, &unk_24DFA1F78);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CopyError and conformance TextureResource.CopyError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.DrawableQueue.InitError, &unk_24DFA1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.DrawableQueue.InitError, &unk_24DFA1EE8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.InitError and conformance TextureResource.DrawableQueue.InitError);
  }
  return result;
}

uint64_t type metadata accessor for TextureResource.DrawableQueue()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.DrawableQueue.NextDrawableError, &unk_24DFA1E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError;
  if (!lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.DrawableQueue.NextDrawableError, &unk_24DFA1E58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DrawableQueue.NextDrawableError and conformance TextureResource.DrawableQueue.NextDrawableError);
  }
  return result;
}

uint64_t type metadata accessor for TextureResource.Drawable()
{
  return objc_opt_self();
}

uint64_t sub_21BA588E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 27) & 0xFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = v1 + v6;
  v12 = *(_QWORD *)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v14 = *(_DWORD *)(v11 + 16);
  v15 = *(_QWORD *)(v1 + v7);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, v8, v9, v10, v12, v13, v14, v15);
}

uint64_t partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_DWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in TextureResource.copy(to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in TextureResource.copy(to:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;

  specialized static __ServiceLocator.shared.getter();
  v8 = 0xD00000000000001CLL;
  switch(a5)
  {
    case 2:
      if (a1 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v14 == 1)
        {
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter())
            goto LABEL_6;
          swift_bridgeObjectRelease();
          __break(1u);
        }
      }
      else
      {
        v9 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v9 == 1)
        {
          swift_bridgeObjectRetain();
LABEL_6:
          if ((a1 & 0xC000000000000001) != 0)
          {
            v10 = (id)MEMORY[0x220769770](0, a1);
          }
          else
          {
            if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
              __break(1u);
            v10 = *(id *)(a1 + 32);
          }
          v11 = v10;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          v8 = RETextureImportOperationCreateWithCGImage();

          if (v8)
            goto LABEL_14;
          swift_release();
          return 0xD000000000000015;
        }
      }
      swift_release();
      return 0xD000000000000030;
    case 3:
    case 7:
      swift_retain();
      goto LABEL_13;
    case 5:
      if (!(a1 >> 62))
      {
        v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v12 == 6)
          goto LABEL_13;
LABEL_23:
        swift_release();
        return 0xD00000000000002CLL;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15 != 6)
        goto LABEL_23;
LABEL_13:
      type metadata accessor for CGImageRef(0);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_beginAccess();
      v8 = RETextureImportOperationCreateFromImageArray();

      if (v8)
      {
LABEL_14:
        if (a3)
        {
          String.utf8CString.getter();
          RETextureImportOperationSetAssetResourceName();
          swift_release();
        }
        swift_release();
      }
      else
      {
        swift_release();
        return 0xD000000000000017;
      }
      return v8;
    default:
      return v8;
  }
}

void *specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(unint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  void *v9;
  __int16 v10;
  unint64_t v11;
  void *v12;
  void *v13;
  __int16 v14;
  void *Error;
  void *v16;
  char v17;
  uint64_t inited;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _BYTE v23[2];
  __int16 v24;

  v6 = *a4;
  v7 = a4[1];
  v8 = *((_WORD *)a4 + 1);
  v11 = specialized static TextureResource.createImportOperation(fromSlices:named:options:textureType:)(a1, a2, a3, (uint64_t)v23, a5);
  if ((v10 & 0x100) != 0)
  {
    Error = v9;
    v20 = v10;
    lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError();
    swift_allocError();
    *(_QWORD *)v21 = v11;
    *(_QWORD *)(v21 + 8) = Error;
    *(_BYTE *)(v21 + 16) = v20 & 1;
    swift_willThrow();
  }
  else
  {
    v23[0] = v6;
    v23[1] = v7;
    v24 = v8;
    OpaquePointer.set(options:)();
    v12 = (void *)specialized static TextureResource.tryCreate(from:disableNetworkSync:)(v11, 1);
    Error = v12;
    v16 = v13;
    v17 = v14;
    if ((v14 & 0x100) != 0)
    {
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(v12, v13, v14, 1);
      Error = (void *)type metadata accessor for TextureResource.LoadError();
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      v19 = type metadata accessor for TextureResource();
      *(_QWORD *)(inited + 32) = Error;
      *(_QWORD *)(inited + 56) = v19;
      *(_QWORD *)(inited + 64) = &protocol witness table for TextureResource;
      swift_retain();
      specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
      if (!v5)
      {
        swift_setDeallocating();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
        swift_arrayDestroy();
        RERelease();
        return Error;
      }
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
      swift_arrayDestroy();
      outlined consume of Result<TextureResource, TextureResource.TextureImportOperationError>(Error, v16, v17, 0);
    }
    RERelease();
  }
  return Error;
}

void outlined consume of Result<OpaquePointer, TextureResource.TextureImportOperationError>(void *a1, void *a2, char a3, char a4)
{
  if ((a4 & 1) != 0)
    outlined consume of TextureResource.TextureImportOperationError(a1, a2, a3 & 1);
}

uint64_t specialized static TextureResource.cube(slices:named:options:)(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int v9;

  v9 = *a4;
  v6 = specialized static TextureResource.createTextureResourceSync(fromSlices:named:options:textureType:)(a1, a2, a3, (char *)&v9, 5);
  if (!v4)
  {
    v7 = v6[2];
    type metadata accessor for TextureResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v7;
    *(_QWORD *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    swift_release();
  }
  return v5;
}

int64_t specialized static TextureResource.getCubeLayout(_:)(CGImage *a1)
{
  int64_t Width;
  int64_t Height;
  int64_t result;
  int64_t v5;
  _BYTE *v6;

  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  result = CGImageGetHeight(a1);
  v5 = result;
  if (Height >= Width)
  {
    result = CGImageGetWidth(a1);
    if ((unsigned __int128)(result * (__int128)6) >> 64 == (6 * result) >> 63)
    {
      if (v5 == 6 * result)
        return 1;
LABEL_12:
      lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
      swift_allocError();
      *v6 = 0;
      return swift_willThrow();
    }
    goto LABEL_15;
  }
  if ((unint64_t)(result - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_14;
  }
  result = CGImageGetWidth(a1);
  if ((unsigned __int128)(result * (__int128)3) >> 64 != (3 * result) >> 63)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (4 * v5 == 3 * result)
    return 2;
  result = CGImageGetHeight(a1);
  if ((unsigned __int128)(result * (__int128)6) >> 64 == (6 * result) >> 63)
  {
    if (6 * result == CGImageGetWidth(a1))
      return 0;
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized static TextureResource.sliceCube(cgImage:)(CGImage *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  int64_t Width;
  uint64_t v6;
  double v7;
  int64_t Height;
  uint64_t v9;
  CGImageRef v10;
  CGImageRef v11;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v16 = MEMORY[0x24BEE4AF8];
  v4 = specialized static TextureResource.getCubeLayout(_:)(a1);
  if (v1)
    return swift_bridgeObjectRelease();
  if (!v4)
  {
    Height = CGImageGetHeight(a1);
    v9 = 0;
    v7 = (double)Height;
    while ((unsigned __int128)(v9 * (__int128)Height) >> 64 == (v9 * Height) >> 63)
    {
      v18.origin.x = (double)(v9 * Height);
      v18.origin.y = 0.0;
      v18.size.width = (double)Height;
      v18.size.height = (double)Height;
      if (!CGImageCreateWithImageInRect(a1, v18))
        goto LABEL_38;
      MEMORY[0x220768F0C]();
      v2 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v2 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v9;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v9 == 6)
        return v16;
    }
    goto LABEL_43;
  }
  if (v4 == 1)
  {
    Width = CGImageGetWidth(a1);
    v6 = 0;
    v7 = (double)Width;
    while ((unsigned __int128)(v6 * (__int128)Width) >> 64 == (v6 * Width) >> 63)
    {
      v17.origin.y = (double)(v6 * Width);
      v17.origin.x = 0.0;
      v17.size.width = (double)Width;
      v17.size.height = (double)Width;
      if (!CGImageCreateWithImageInRect(a1, v17))
        goto LABEL_38;
      MEMORY[0x220768F0C]();
      v2 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((unint64_t)v2 >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      ++v6;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v6 == 6)
        return v16;
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_20;
  }
  v2 = (uint64_t)CGImageGetHeight(a1) / 3;
  v7 = (double)v2;
  v19.origin.x = 0.0;
  v19.origin.y = (double)v2;
  v19.size.width = (double)v2;
  v19.size.height = (double)v2;
  if (!CGImageCreateWithImageInRect(a1, v19))
  {
LABEL_38:
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *v13 = 2;
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    goto LABEL_44;
LABEL_20:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v20.origin.x = (double)(2 * v2);
  v20.origin.y = v7;
  v20.size.width = v7;
  v20.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v20))
    goto LABEL_38;
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v21.origin.y = 0.0;
  v21.origin.x = v7;
  v21.size.width = v7;
  v21.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v21))
    goto LABEL_38;
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v22.origin.x = v7;
  v22.origin.y = (double)(2 * v2);
  v22.size.width = v7;
  v22.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v22))
    goto LABEL_38;
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v23.origin.x = (double)(3 * v2);
  v23.origin.y = v7;
  v23.size.width = v7;
  v23.size.height = v7;
  v10 = CGImageCreateWithImageInRect(a1, v23);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *v15 = 2;
    return swift_willThrow();
  }
  v11 = v10;
  v24.origin.x = (double)(3 * v2);
  v24.origin.y = v7;
  v24.size.width = v7;
  v24.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v24))
    goto LABEL_40;
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  v25.origin.x = v7;
  v25.origin.y = v7;
  v25.size.width = v7;
  v25.size.height = v7;
  if (!CGImageCreateWithImageInRect(a1, v25))
  {
LABEL_40:
    lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError();
    swift_allocError();
    *v14 = 2;
    swift_willThrow();

    return swift_bridgeObjectRelease();
  }
  MEMORY[0x220768F0C]();
  if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return v16;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Semantic and conformance TextureResource.Semantic()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic;
  if (!lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Semantic, &type metadata for TextureResource.Semantic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Semantic and conformance TextureResource.Semantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode;
  if (!lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.MipmapsMode, &type metadata for TextureResource.MipmapsMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.MipmapsMode and conformance TextureResource.MipmapsMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Compression.ASTCBlockSize, &type metadata for TextureResource.Compression.ASTCBlockSize);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.ASTCBlockSize and conformance TextureResource.Compression.ASTCBlockSize);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Compression.ASTCQuality, &type metadata for TextureResource.Compression.ASTCQuality);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.ASTCQuality and conformance TextureResource.Compression.ASTCQuality);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression and conformance TextureResource.Compression()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Compression, &type metadata for TextureResource.Compression);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression and conformance TextureResource.Compression);
  }
  return result;
}

uint64_t sub_21BA598E4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t sub_21BA59930@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 88);
  return result;
}

uint64_t sub_21BA59974(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 88) = v2;
  return result;
}

__n128 sub_21BA599B4@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *(__n128 *)(a1 + 40);
  *a2 = result;
  return result;
}

__n128 sub_21BA599C0(__n128 *a1, uint64_t a2)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a2 + 40) = *a1;
  return result;
}

uint64_t dispatch thunk of TextureLoaderProtocol.loadTexture(name:bundle:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of TextureLoaderProtocol.loadTexture(name:bundle:options:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t method lookup function for TextureResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TextureResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TextureResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of TextureResource.semantic.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of TextureResource.width.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of TextureResource.height.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TextureResource.depth.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of TextureResource.mipmapLevelCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of TextureResource.pixelFormat.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of TextureResource.textureType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of TextureResource.arrayLength.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of TextureResource.replace(withImage:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TextureResource.replaceAsync(withImage:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TextureResource.copy(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TextureResource.copyAsync(to:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TextureResource.replace(withDrawables:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of TextureResource.drawableQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t storeEnumTagSinglePayload for TextureResource.Semantic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BA59B20 + 4 * byte_21BE5753E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BA59B54 + 4 * byte_21BE57539[v4]))();
}

uint64_t sub_21BA59B54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA59B5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA59B64);
  return result;
}

uint64_t sub_21BA59B70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA59B78);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BA59B7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA59B84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Semantic()
{
  return &type metadata for TextureResource.Semantic;
}

ValueMetadata *type metadata accessor for TextureResource.MipmapsMode()
{
  return &type metadata for TextureResource.MipmapsMode;
}

uint64_t getEnumTagSinglePayload for TextureResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 4) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.CreateOptions()
{
  return &type metadata for TextureResource.CreateOptions;
}

uint64_t method lookup function for TextureResource.Drawable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TextureResource.Drawable.drawableQueue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of TextureResource.Drawable.texture.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of TextureResource.Drawable.present()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TextureResource.Drawable.presentOnSceneUpdate()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t method lookup function for TextureResource.DrawableQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.usage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.mipmapsMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.nextDrawable()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.eyeTransform(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.nextDrawableWithTimeoutAndPollingInterval(timeout:pollingInterval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of TextureResource.DrawableQueue.allowsNextDrawableTimeout.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureResource.DrawableQueue.Descriptor(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.DrawableQueue.Descriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.DrawableQueue.Descriptor()
{
  return &type metadata for TextureResource.DrawableQueue.Descriptor;
}

uint64_t getEnumTagSinglePayload for TextureResource.Compression(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 65285 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65285 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65285;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65285;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65285;
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 5u)
    v6 = 5;
  else
    v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 - 6;
  if (*((unsigned __int8 *)a1 + 1) < 4u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65285 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65285 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BA59EEC + 4 * byte_21BE57548[v4]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_21BA59F20 + 4 * byte_21BE57543[v4]))();
}

uint64_t sub_21BA59F20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA59F28(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BA59F30);
  return result;
}

uint64_t sub_21BA59F3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BA59F44);
  *(_BYTE *)(result + 1) = a2 + 5;
  return result;
}

uint64_t sub_21BA59F48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA59F50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression()
{
  return &type metadata for TextureResource.Compression;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression.ASTCBlockSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_21BA59FB8 + 4 * byte_21BE57552[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_21BA59FEC + 4 * byte_21BE5754D[v4]))();
}

uint64_t sub_21BA59FEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA59FF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA59FFCLL);
  return result;
}

uint64_t sub_21BA5A008(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA5A010);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_21BA5A014(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5A01C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.ASTCBlockSize()
{
  return &type metadata for TextureResource.Compression.ASTCBlockSize;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.ASTCQuality()
{
  return &type metadata for TextureResource.Compression.ASTCQuality;
}

uint64_t getEnumTagSinglePayload for TextureResource.Compression.Kind(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *(unsigned __int8 *)(a1 + 1);
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 65285;
    if (a2 + 65285 <= 0xFFFEFFFF)
      v3 = 2;
    else
      v3 = 4;
    if (v2 < 0xFF0000)
      v3 = 1;
    if (v2 >= 0x10000)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BA5A0A0 + 4 * byte_21BE57557[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression.Kind(_WORD *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 65285;
  if (a3 + 65285 <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BA5A150 + 4 * byte_21BE57561[v5]))();
  *a1 = a2 - 251;
  return ((uint64_t (*)(void))((char *)sub_21BA5A184 + 4 * byte_21BE5755C[v5]))();
}

uint64_t sub_21BA5A184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA5A18C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BA5A194);
  return result;
}

uint64_t sub_21BA5A1A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BA5A1A8);
  *(_BYTE *)(result + 1) = a2 + 5;
  return result;
}

uint64_t sub_21BA5A1AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA5A1B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t getEnumTag for TextureResource.Compression.Kind(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 1);
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for TextureResource.Compression.Kind(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)result = a2 - 253;
  }
  else if (a2)
  {
    *(_BYTE *)(result + 1) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Compression.Kind()
{
  return &type metadata for TextureResource.Compression.Kind;
}

uint64_t storeEnumTagSinglePayload for TextureResource.DrawableQueue.NextDrawableError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA5A248 + 4 * byte_21BE57566[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA5A268 + 4 * byte_21BE5756B[v4]))();
}

_BYTE *sub_21BA5A248(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA5A268(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA5A270(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA5A278(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA5A280(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA5A288(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for TextureResource.DrawableQueue.NextDrawableError()
{
  return &unk_24DFA1E58;
}

uint64_t storeEnumTagSinglePayload for TextureResource.DrawableQueue.InitError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA5A2F0 + 4 * byte_21BE57575[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA5A324 + 4 * byte_21BE57570[v4]))();
}

uint64_t sub_21BA5A324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5A32C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA5A334);
  return result;
}

uint64_t sub_21BA5A340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA5A348);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA5A34C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5A354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TextureResource.DrawableQueue.InitError()
{
  return &unk_24DFA1EE8;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Compression.ASTCQuality(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BA5A3BC + 4 * byte_21BE5757F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BA5A3F0 + 4 * byte_21BE5757A[v4]))();
}

uint64_t sub_21BA5A3F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5A3F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA5A400);
  return result;
}

uint64_t sub_21BA5A40C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA5A414);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BA5A418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5A420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TextureResource.CopyError()
{
  return &unk_24DFA1F78;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextureResource.LoadError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v10 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        return a1;
      }
    }
    v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for TextureResource.LoadError(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
    return swift_bridgeObjectRelease();
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result)
      return result;
    return swift_bridgeObjectRelease();
  }
  v3 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

_QWORD *initializeWithCopy for TextureResource.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      return a1;
    }
  }
  v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for TextureResource.LoadError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;

  if (a1 != a2)
  {
    outlined destroy of TextureResource.LoadError((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v7 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        return a1;
      }
    }
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of TextureResource.LoadError(uint64_t a1)
{
  uint64_t Error;

  Error = type metadata accessor for TextureResource.LoadError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(Error - 8) + 8))(a1, Error);
  return a1;
}

void *initializeWithTake for TextureResource.LoadError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for TextureResource.LoadError(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of TextureResource.LoadError((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for TextureResource.LoadError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Error in TextureResource.LoadError()
{
  return lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type TextureResource.LoadError and conformance TextureResource.LoadError, (uint64_t (*)(uint64_t))type metadata accessor for TextureResource.LoadError, (uint64_t)&protocol conformance descriptor for TextureResource.LoadError);
}

unint64_t lazy protocol witness table accessor for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind;
  if (!lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Compression.Kind, &type metadata for TextureResource.Compression.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Compression.Kind and conformance TextureResource.Compression.Kind);
  }
  return result;
}

uint64_t outlined init with copy of TextureResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t Error;

  Error = type metadata accessor for TextureResource.LoadError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Error - 8) + 16))(a2, a1, Error);
  return a2;
}

uint64_t partial apply for closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32), *(_QWORD *)(v1 + 40), (void (*)(uint64_t, uint64_t))outlined consume of Result<ModelEntity, Error>?);
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_QWORD *))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32), *(_QWORD *)(v1 + 40), (void (*)(uint64_t, uint64_t))outlined consume of Result<AudioFileResource, Error>?);
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in LoadRequest.init(_:dependencies:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(id *))(v1 + 32));
}

void outlined consume of Result<[Entity], Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<[Entity], Error>(a1, a2 & 1, (void (*)(id))MEMORY[0x24BEE4BC0]);
}

void outlined consume of Result<ModelEntity, Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<[Entity], Error>(a1, a2 & 1, (void (*)(id))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(a1, a2, (uint64_t (*)(uint64_t, uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

void *partial apply for specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(void **a1)
{
  uint64_t v1;

  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(void (*)(_QWORD), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly10RealityKit19EnvironmentResourceCIsegn_SgWOy, (void (*)(void (*)(_QWORD), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

{
  uint64_t v1;

  return specialized closure #2 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (void (*)(void (*)(_QWORD), uint64_t))outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?, (void (*)(void (*)(_QWORD), uint64_t))_ss6ResultOyxs5Error_pGRi_zRi0_zly17RealityFoundation19ShaderGraphMaterialVIsegn_SgWOe);
}

uint64_t partial apply for specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  char v8;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v4;
  v8 = *(_BYTE *)(a1 + 64);
  v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()((uint64_t)v7, v2, v3);
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BA5AC98()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

__n128 partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[4];
  char v7;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 40);
  v4 = *(_OWORD *)(v1 + 72);
  v6[2] = *(_OWORD *)(v1 + 56);
  v6[3] = v4;
  v7 = *(_BYTE *)(v1 + 88);
  v6[0] = *(_OWORD *)(v1 + 24);
  v6[1] = v3;
  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, v2, (uint64_t)v6);
  return result;
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(char a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined retain of ShaderGraphMaterial(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  swift_bridgeObjectRetain();
  v3 = v2;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of ShaderGraphMaterial(uint64_t a1)
{

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

id outlined copy of Result<ShaderGraphMaterial, Error>(id a1, int a2, int a3, int a4, void *a5, int a6, int a7, int a8, char a9, char a10)
{
  id v12;

  if ((a10 & 1) != 0)
    return a1;
  swift_bridgeObjectRetain();
  v12 = a5;
  swift_retain();
  return (id)swift_bridgeObjectRetain();
}

void outlined consume of Result<ShaderGraphMaterial, Error>?(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9)
{
  if (HIBYTE(a9) <= 0xFEu)
    outlined consume of Result<ShaderGraphMaterial, Error>(a1, a2, a3, a4, a5, a6, a7, a8, a9, (unsigned __int16)(a9 & 0x1FF) >> 8);
}

void outlined consume of Result<ShaderGraphMaterial, Error>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0)
  {

  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

unint64_t lazy protocol witness table accessor for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError;
  if (!lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.TextureImportOperationError, &unk_24DFA2E30);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.TextureImportOperationError and conformance TextureResource.TextureImportOperationError);
  }
  return result;
}

uint64_t sub_21BA5AF3C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)()
{
  return closure #1 in static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)();
}

uint64_t sub_21BA5AFA4()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t *a1)
{
  uint64_t v1;

  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(*a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(char a1)
{
  uint64_t v1;

  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

{
  uint64_t v1;

  specialized closure #1 in closure #3 in LoadRequest<A>.thenWaitForResourceSharing()(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_21BA5B018()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t outlined assign with copy of Result<Material, Error>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Material, Error>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

id outlined copy of Result<AUAudioUnit, Error>(id a1)
{
  return a1;
}

void outlined consume of Result<AUAudioUnit, Error>?(id a1, unsigned __int8 a2)
{
  if (a2 != 255)
    outlined consume of Result<AUAudioUnit, Error>(a1);
}

void outlined consume of Result<AUAudioUnit, Error>(id a1)
{

}

unint64_t lazy protocol witness table accessor for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError;
  if (!lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.CubeLayoutError, &unk_24DFA2DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError;
  if (!lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.CubeLayoutError, &unk_24DFA2DA0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CubeLayoutError and conformance TextureResource.CubeLayoutError);
  }
  return result;
}

uint64_t sub_21BA5B128()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(_QWORD *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), *(_DWORD *)(v2 + 57), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80));
}

uint64_t sub_21BA5B1B0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BA5B1D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v0;

  return doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(Swift::Int_optional *)(v0 + 48), *(_DWORD *)(v0 + 57), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_21BA5B25C()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t partial apply for closure #2 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v0 + 16))(*(_QWORD *)(v0 + 32), 1);
}

uint64_t sub_21BA5B294()
{
  return objectdestroy_191Tm();
}

uint64_t partial apply for closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v0;

  return closure #1 in doGenerateAsync #1 @Sendable () in closure #1 in closure #1 in TextureResource.init(cubeFromEquirectangular:named:quality:faceSize:options:)(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, _QWORD))(v0 + 32));
}

uint64_t sub_21BA5B2A8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)()
{
  uint64_t v0;

  return specialized closure #1 in static TextureResource.createCubeWithCompletion(fromEquirectangular:named:quality:faceSize:options:)(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_21BA5B2F0()
{
  return objectdestroy_197Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.copy(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  return closure #1 in closure #1 in TextureResource.copy(to:)(a1);
}

uint64_t sub_21BA5B33C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 28) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 28) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(a1, v4, *(_QWORD *)(v2 + 16), *(_DWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BA5B42C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_21BA5B454()
{
  return objectdestroy_197Tm(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
}

uint64_t sub_21BA5B464()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  uint64_t v0;

  return closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80));
}

uint64_t sub_21BA5B4D0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32), *(void (**)(void *, uint64_t))(v0 + 40), *(_QWORD *)(v0 + 48), *(void (**)(void *, void *, _QWORD))(v0 + 56));
}

uint64_t sub_21BA5B510()
{
  return objectdestroy_191Tm();
}

uint64_t objectdestroy_191Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)()
{
  uint64_t v0;

  closure #1 in closure #1 in static TextureResource.createTextureResourceAsync(for:options:disableNetworkSync:buildError:fulfill:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *, _QWORD, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_21BA5B560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  outlined consume of Result<[Entity], Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24), (void (*)(id))MEMORY[0x24BEE4F70]);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  return closure #1 in closure #3 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_DWORD *)(v0 + 25), *(_QWORD *)(v0 + 32));
}

id outlined copy of Result<[Entity], Error>(id a1, char a2, uint64_t (*a3)(id))
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)a3(a1);
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_DWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_21BA5B66C()
{
  return objectdestroy_197Tm(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
}

uint64_t objectdestroy_197Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<TextureResource, Error>);
  return closure #2 in closure #1 in closure #1 in TextureResource.init(contentsOf:withName:options:)(a1, v3);
}

uint64_t sub_21BA5B728()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  uint64_t v0;

  return closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_21BA5B774()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4CA0]);
}

uint64_t partial apply for closure #2 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource_copyAsync_mainActorIsolationEscape_UNSAFE(resource:to:completionHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in TextureResource.replaceAsyncInternal(using:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in TextureResource.replaceAsyncInternal(using:options:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_21BA5B7E4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_21BA5B82C()
{
  return swift_deallocObject();
}

uint64_t sub_21BA5B83C()
{
  return objectdestroy_188Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t objectdestroy_188Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t objectdestroy_246Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)()
{
  uint64_t v0;

  return closure #2 in closure #1 in closure #1 in TextureResource.replaceAsyncInternal(using:options:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, _QWORD))(v0 + 32));
}

uint64_t sub_21BA5B8C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static TextureResource.createTextureLoadRequest(forRetained:options:disableNetworkSync:buildError:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_DWORD *)(v2 + 32), *(unsigned __int8 *)(v2 + 36), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

void partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(void *a1, void *a2, char a3)
{
  uint64_t v3;

  thunk for @escaping @callee_guaranteed (@guaranteed Error) -> (@out TextureResource.LoadError)(a1, a2, a3 & 1, *(void (**)(void *))(v3 + 16));
}

uint64_t partial apply for specialized closure #1 in LoadRequest<A>.thenWaitForResourceSharing()(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  swift_retain();
  return a3(v4, v5);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_66Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_125Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_54Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

id outlined copy of Result<ModelEntity, Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain();
}

void outlined consume of Result<[Entity], Error>(id a1, char a2, void (*a3)(id))
{
  if ((a2 & 1) != 0)

  else
    a3(a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ()(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_21BA5BAC8()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_DWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t partial apply for closure #1 in closure #1 in TextureResource.init<A>(named:in:options:textureLoader:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  *a1 = v3;
  a1[1] = v4;
  type metadata accessor for TextureResource.LoadError();
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BA5BB48()
{
  uint64_t v0;

  outlined consume of Result<[Entity], Error>(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24), (void (*)(id))MEMORY[0x24BEE4F70]);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)()
{
  uint64_t v0;

  closure #1 in closure #2 in closure #1 in static TextureResource.loadAsync(named:in:options:textureLoader:)(*(id *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_DWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void (**)(_QWORD *, uint64_t))(v0 + 56));
}

uint64_t storeEnumTagSinglePayload for TextureResource.MipmapsMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BA5BBF0 + 4 * byte_21BE57589[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BA5BC24 + 4 * byte_21BE57584[v4]))();
}

uint64_t sub_21BA5BC24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5BC2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA5BC34);
  return result;
}

uint64_t sub_21BA5BC40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA5BC48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BA5BC4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA5BC54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for TextureResource.CubeLayoutError()
{
  return &unk_24DFA2DA0;
}

void destroy for TextureResource.TextureImportOperationError(uint64_t a1)
{
  outlined consume of TextureResource.TextureImportOperationError(*(void **)a1, *(id *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TextureResource.TextureImportOperationError(*(void **)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TextureResource.TextureImportOperationError(*(void **)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TextureResource.TextureImportOperationError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TextureResource.TextureImportOperationError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  void *v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TextureResource.TextureImportOperationError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.TextureImportOperationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.TextureImportOperationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for TextureResource.TextureImportOperationError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for TextureResource.TextureImportOperationError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

void *type metadata accessor for TextureResource.TextureImportOperationError()
{
  return &unk_24DFA2E30;
}

uint64_t NSUserDefaults.BOOL(forKey:default:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v5;
  id v6;
  char v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v5 = (void *)MEMORY[0x220768C3C]();
  v6 = objc_msgSend(v3, sel_objectForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v11)
  {
    if ((swift_dynamicCast() & 1) != 0)
      a3 = v8;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return a3 & 1;
}

{
  void *v3;
  void *v5;
  id v6;
  char v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v5 = (void *)MEMORY[0x220768C3C]();
  v6 = objc_msgSend(v3, sel_objectForKey_, v5);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    if ((swift_dynamicCast() & 1) != 0)
      a3 = v8;
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return a3 & 1;
}

void one-time initialization function for protoStereoRenderingEnabled()
{
  id v0;
  char v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = NSUserDefaults.BOOL(forKey:default:)(0xD000000000000021, 0x800000021BE841D0, 0);

  protoStereoRenderingEnabled = v1 & 1;
}

uint64_t RealityRenderer.EntityCollection.init(entity:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  swift_retain();
  if (REComponentClassFromType())
    REEntityRemoveComponentByClass();
  result = swift_release();
  *a2 = a1;
  return result;
}

uint64_t RealityRenderer.EntityCollection.startIndex.getter()
{
  return 0;
}

uint64_t RealityRenderer.EntityCollection.endIndex.getter()
{
  return REEntityGetChildCount();
}

uint64_t RealityRenderer.EntityCollection.count.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    v2 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v2 >= result)
        break;
      if (v1 == ++v2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t RealityRenderer.EntityCollection.subscript.getter(uint64_t a1)
{
  return Entity.ChildCollection.subscript.getter(a1);
}

Swift::Int __swiftcall RealityRenderer.EntityCollection.index(after:)(Swift::Int after)
{
  Swift::Int v1;

  if (after < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = after;
    after = REEntityGetChildCount();
    if (after > v1)
      return v1 + 1;
  }
  __break(1u);
  return after;
}

uint64_t RealityRenderer.EntityCollection.insert<A>(contentsOf:beforeIndex:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return Entity.ChildCollection.insert<A>(contentsOf:beforeIndex:)(a1, a2, a3);
}

uint64_t RealityRenderer.EntityCollection.append<A>(contentsOf:)()
{
  return Entity.ChildCollection.append<A>(contentsOf:)();
}

uint64_t RealityRenderer.EntityCollection.remove(_:)(uint64_t a1)
{
  swift_retain();
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
  return swift_release();
}

Swift::Void __swiftcall RealityRenderer.EntityCollection.remove(at:)(Swift::Int at)
{
  uint64_t v2;

  swift_retain();
  v2 = Entity.ChildCollection.subscript.getter(at);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, 0);
  swift_release();
  swift_release();
}

Swift::Void __swiftcall RealityRenderer.EntityCollection.removeAll()()
{
  Entity.ChildCollection.removeAll(preservingWorldTransforms:)(0);
}

uint64_t RealityRenderer.EntityCollection.replaceAll<A>(_:)(uint64_t a1, uint64_t a2)
{
  return Entity.ChildCollection.replaceAll<A>(_:)(a1, a2);
}

uint64_t protocol witness for EntityCollection.remove(_:) in conformance RealityRenderer.EntityCollection(uint64_t a1)
{
  swift_retain();
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(a1, 0);
  return swift_release();
}

uint64_t protocol witness for EntityCollection.remove(at:) in conformance RealityRenderer.EntityCollection(uint64_t a1)
{
  uint64_t v2;

  swift_retain();
  v2 = Entity.ChildCollection.subscript.getter(a1);
  Entity.ChildCollection.doRemove(_:preservingWorldTransform:)(v2, 0);
  swift_release();
  return swift_release();
}

void protocol witness for EntityCollection.removeAll() in conformance RealityRenderer.EntityCollection()
{
  Entity.ChildCollection.removeAll(preservingWorldTransforms:)(0);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetChildCount();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection(uint64_t *a1, uint64_t *a2))()
{
  uint64_t v3;

  v3 = Entity.ChildCollection.subscript.getter(*a2);
  *a1 = v3;
  a1[1] = v3;
  return protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection;
}

uint64_t protocol witness for Collection.subscript.read in conformance RealityRenderer.EntityCollection()
{
  return swift_release();
}

uint64_t protocol witness for Collection.subscript.getter in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = *a1;
  v4 = a1[1];
  v6 = *v2;
  result = REEntityGetChildCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    a2[1] = v4;
    a2[2] = v6;
    *a2 = v5;
    return swift_retain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance RealityRenderer.EntityCollection@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  *a1 = *v1;
  a1[1] = 0;
  swift_retain();
  result = REEntityGetChildCount();
  a1[2] = result;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance RealityRenderer.EntityCollection()
{
  return REEntityGetChildCount() == 0;
}

uint64_t protocol witness for Collection.count.getter in conformance RealityRenderer.EntityCollection()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    v2 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v2 >= result)
        break;
      if (v1 == ++v2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance RealityRenderer.EntityCollection(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance RealityRenderer.EntityCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t result;

  result = specialized Collection.index(_:offsetBy:)(*a1, a2, *v3);
  *a3 = result;
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance RealityRenderer.EntityCollection@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  char v7;

  result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance RealityRenderer.EntityCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized Collection.distance(from:to:)(*a1, *a2);
}

int64_t specialized Collection.distance(from:to:)(int64_t result, uint64_t a2, char a3, uint64_t a4, unsigned int a5, char a6)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD v23[2];
  uint64_t v24;
  char v25[8];
  char v26[8];
  int64_t v27;
  uint64_t v28;

  if ((a6 & 1) != 0 || (a3 & 1) != 0)
    goto LABEL_49;
  v8 = result;
  if (a4 < result)
    goto LABEL_47;
  v10 = a2;
  if (a5 != (_DWORD)a2)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    return result;
  }
  if (result != a4)
  {
    v12 = *(_OWORD *)(v6 + 16);
    v23[0] = *(_OWORD *)v6;
    v23[1] = v12;
    v24 = *(_QWORD *)(v6 + 32);
    outlined init with take of Transform?((uint64_t)v23 + 8, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    v11 = 1;
    while (1)
    {
      result = outlined init with take of Transform?((uint64_t)v26, (uint64_t)&v27, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
      v13 = v27;
      if (!v27)
      {
        outlined init with take of Transform?((uint64_t)v23, (uint64_t)v25, &demangling cache variable for type metadata for AnimationLibraryResource?);
        outlined init with take of Transform?((uint64_t)v25, (uint64_t)&v28, &demangling cache variable for type metadata for AnimationLibraryResource?);
        if (v28)
          result = AnimationLibraryResource.keyedResources.getter();
        else
          result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        v13 = result;
      }
      if ((v8 & 0x8000000000000000) != 0 || (v14 = 1 << *(_BYTE *)(v13 + 32), (uint64_t)v8 >= v14))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
      v15 = v8 >> 6;
      v16 = v13 + 64;
      v17 = *(_QWORD *)(v13 + 64 + 8 * (v8 >> 6));
      if (((v17 >> v8) & 1) == 0)
        goto LABEL_43;
      if (*(_DWORD *)(v13 + 36) != (_DWORD)v10)
        goto LABEL_44;
      v18 = v17 & (-2 << (v8 & 0x3F));
      if (v18)
      {
        v8 = __clz(__rbit64(v18)) | v8 & 0xFFFFFFFFFFFFFFC0;
        outlined retain of [String : String]((uint64_t)v26);
        result = swift_bridgeObjectRelease();
        if ((_DWORD)v10 != a5)
          goto LABEL_45;
        goto LABEL_37;
      }
      v19 = v15 + 1;
      v20 = (unint64_t)(v14 + 63) >> 6;
      if (v15 + 1 >= v20)
      {
        outlined retain of [String : String]((uint64_t)v26);
        result = swift_bridgeObjectRelease();
        v8 = v14;
      }
      else
      {
        v21 = *(_QWORD *)(v16 + 8 * v19);
        if (v21)
          goto LABEL_23;
        v19 = v15 + 2;
        if (v15 + 2 >= v20)
        {
          outlined retain of [String : String]((uint64_t)v26);
        }
        else
        {
          v21 = *(_QWORD *)(v16 + 8 * v19);
          if (v21)
          {
LABEL_23:
            outlined retain of [String : String]((uint64_t)v26);
LABEL_24:
            result = swift_bridgeObjectRelease();
            v8 = __clz(__rbit64(v21)) + (v19 << 6);
            goto LABEL_36;
          }
          v19 = v15 + 3;
          if (v15 + 3 < v20)
          {
            v21 = *(_QWORD *)(v16 + 8 * v19);
            if (v21)
            {
LABEL_33:
              outlined retain of [String : String]((uint64_t)v26);
              outlined consume of [String : AnimationResource].Index._Variant(v8, v10, 0);
              goto LABEL_24;
            }
            while (v20 - 4 != v15)
            {
              v21 = *(_QWORD *)(v13 + 96 + 8 * v15++);
              if (v21)
              {
                v19 = v15 + 3;
                goto LABEL_33;
              }
            }
          }
          outlined retain of [String : String]((uint64_t)v26);
          outlined consume of [String : AnimationResource].Index._Variant(v8, v10, 0);
        }
        result = swift_bridgeObjectRelease();
        v8 = v14;
      }
LABEL_36:
      if ((_DWORD)v10 != a5)
        goto LABEL_45;
LABEL_37:
      if (v8 == a4)
        return v11;
      v10 = a5;
      if (__OFADD__(v11++, 1))
        goto LABEL_46;
    }
  }
  outlined consume of [String : AnimationResource].Index._Variant(a4, a2, 0);
  return 0;
}

uint64_t specialized Collection.distance(from:to:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 < result)
    goto LABEL_14;
  if (a2 != result)
  {
    v3 = result;
    v2 = a2 - result;
    if (a2 <= result)
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v4 = 0;
    while (!__OFADD__(v4, 1))
    {
      if (v3 < 0)
        goto LABEL_12;
      result = REEntityGetChildCount();
      if (v3 + v4 >= result)
        goto LABEL_13;
      if (v2 == ++v4)
        return v2;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  return 0;
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityRenderer.EntityCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;

  v2 = *result;
  v3 = a2[1];
  if (*result >= *a2)
  {
    v5 = __OFSUB__(v2, v3);
    v4 = v2 - v3 < 0;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  if (v4 == v5)
    __break(1u);
  return result;
}

_QWORD *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance RealityRenderer.EntityCollection(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance RealityRenderer.EntityCollection@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if (*result < 0)
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t *)REEntityGetChildCount();
    if (v2 < (uint64_t)result)
    {
      *a2 = v2 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance RealityRenderer.EntityCollection(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result;
  if (*result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (uint64_t *)REEntityGetChildCount();
    if (v1 < (uint64_t)result)
    {
      *v2 = v1 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance RealityRenderer.EntityCollection(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance RealityRenderer.EntityCollection()
{
  return specialized Collection.underestimatedCount.getter();
}

uint64_t specialized Collection.underestimatedCount.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  swift_retain();
  result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v1 = result;
    if (!result)
    {
LABEL_6:
      swift_release();
      return v1;
    }
    v2 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v2 >= result)
        break;
      if (v1 == ++v2)
        goto LABEL_6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence._customContainsEquatableElement(_:) in conformance RealityRenderer.EntityCollection()
{
  return 2;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance RealityRenderer.EntityCollection()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance RealityRenderer.EntityCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance RealityRenderer.EntityCollection()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t RealityRenderer.CameraSettings.isToneMappingEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t RealityRenderer.CameraSettings.isToneMappingEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*RealityRenderer.CameraSettings.isToneMappingEnabled.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

_BYTE *RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

void RealityRenderer.CameraSettings.antialiasing.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *RealityRenderer.CameraSettings.antialiasing.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return RealityRenderer.CameraSettings.__proto_antialiasingMode_v1.modify;
}

id static RealityRenderer.CameraSettings.ColorBackground.color(_:)@<X0>(id a1@<X0>, id *a2@<X8>)
{
  *a2 = a1;
  return a1;
}

void static RealityRenderer.CameraSettings.ColorBackground.outputTexture()(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

id RealityRenderer.CameraSettings.colorBackground.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 8);
  *a1 = v2;
  return v2;
}

void RealityRenderer.CameraSettings.colorBackground.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;

  *(_QWORD *)(v1 + 8) = v2;
}

uint64_t (*RealityRenderer.CameraSettings.colorBackground.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RealityRenderer.CameraOutput.InitError.errorDescription.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21BA5CCE4 + 4 * byte_21BE57F40[a1]))(0xD00000000000003BLL, 0x800000021BE83E60);
}

uint64_t sub_21BA5CCE4()
{
  uint64_t v0;

  return v0 + 6;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.CameraOutput.InitError()
{
  unsigned __int8 *v0;

  return RealityRenderer.CameraOutput.InitError.errorDescription.getter(*v0);
}

double RealityRenderer.CameraOutput.RelativeViewport.originX.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void RealityRenderer.CameraOutput.RelativeViewport.originX.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.originX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.originY.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void RealityRenderer.CameraOutput.RelativeViewport.originY.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.originY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.width.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void RealityRenderer.CameraOutput.RelativeViewport.width.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double RealityRenderer.CameraOutput.RelativeViewport.height.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

void RealityRenderer.CameraOutput.RelativeViewport.height.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 24) = a1;
}

uint64_t (*RealityRenderer.CameraOutput.RelativeViewport.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RealityRenderer.CameraOutput.Descriptor.colorTextures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor.colorTextures.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor.colorTextures.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t RealityRenderer.CameraOutput.Descriptor.viewports.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor.viewports.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor.viewports.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)(a1, (uint64_t)&outlined read-only object #0 of static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:), 0, a2);
}

uint64_t RealityRenderer.CameraOutput.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  Swift::Bool v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  char v18;
  _BYTE *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  uint64_t v25;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 32);
  v25 = a1[3];
  if ((*a1 & 0xC000000000000001) != 0)
  {
    v2 = (void *)MEMORY[0x220769770](0, v4);
    goto LABEL_5;
  }
  if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(void **)(v4 + 32);
    swift_unknownObjectRetain();
LABEL_5:
    if (one-time initialization token for protoStereoRenderingEnabled == -1)
      goto LABEL_6;
    goto LABEL_38;
  }
  __break(1u);
LABEL_38:
  swift_once();
LABEL_6:
  v8 = protoStereoRenderingEnabled;
  v9 = objc_msgSend(v2, sel_usage);
  if (!v8)
  {
    if ((v9 & 4) != 0)
    {
      result = swift_unknownObjectRelease();
      v10 = v7;
LABEL_20:
      *(_QWORD *)a2 = v4;
      *(_QWORD *)(a2 + 8) = v5;
      *(_QWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 24) = v25;
      *(_BYTE *)(a2 + 32) = v10;
      return result;
    }
    goto LABEL_22;
  }
  v10 = v7;
  if ((v7 & 1) == 0)
  {
    if ((v9 & 4) == 0)
      goto LABEL_22;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
        goto LABEL_27;
    }
    else
    {
      v15 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_27:
        if ((v5 & 0xC000000000000001) != 0)
        {
          v16 = (void *)MEMORY[0x220769770](0, v5);
        }
        else
        {
          if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_50;
          }
          v16 = *(void **)(v5 + 32);
          swift_unknownObjectRetain();
        }
        swift_bridgeObjectRelease();
        if ((objc_msgSend(v16, sel_usage) & 4) == 0)
          goto LABEL_31;
        if (objc_msgSend(v16, sel_arrayLength) != (id)1)
        {
LABEL_35:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
          swift_allocError();
          v18 = 3;
          goto LABEL_36;
        }
        swift_unknownObjectRelease();
LABEL_41:
        if (!(v6 >> 62))
        {
          v20 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v20)
            goto LABEL_66;
LABEL_43:
          if ((v6 & 0xC000000000000001) != 0)
          {
            v21 = (void *)MEMORY[0x220769770](0, v6);
          }
          else
          {
            if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_64;
            v21 = *(void **)(v6 + 32);
            swift_unknownObjectRetain();
          }
          swift_bridgeObjectRelease();
          if (objc_msgSend(v21, sel_layerCount) != (id)1)
          {
LABEL_60:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
            swift_allocError();
            *v24 = 4;
            swift_willThrow();
            swift_unknownObjectRelease();
            return swift_unknownObjectRelease();
          }
          goto LABEL_47;
        }
LABEL_50:
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter())
          goto LABEL_66;
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if ((v9 & 4) == 0)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
    swift_allocError();
    *v14 = 0;
LABEL_23:
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  if (objc_msgSend(v2, sel_arrayLength) != (id)2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
    swift_allocError();
    *v19 = 2;
    goto LABEL_23;
  }
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_12;
  }
  else
  {
    v11 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
    {
LABEL_12:
      if ((v5 & 0xC000000000000001) != 0)
      {
        v12 = (void *)MEMORY[0x220769770](0, v5);
LABEL_15:
        swift_bridgeObjectRelease();
        if ((objc_msgSend(v12, sel_usage) & 4) != 0)
        {
          if (objc_msgSend(v12, sel_arrayLength) == (id)2)
          {
            swift_unknownObjectRelease();
            goto LABEL_54;
          }
          goto LABEL_35;
        }
LABEL_31:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError();
        swift_allocError();
        v18 = 1;
LABEL_36:
        *v17 = v18;
        swift_willThrow();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(void **)(v5 + 32);
        swift_unknownObjectRetain();
        goto LABEL_15;
      }
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease();
LABEL_54:
  if (!(v6 >> 62))
  {
    v22 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v22)
      goto LABEL_56;
LABEL_66:
    swift_unknownObjectRelease();
    result = swift_bridgeObjectRelease();
    goto LABEL_20;
  }
LABEL_65:
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_66;
LABEL_56:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v23 = (void *)MEMORY[0x220769770](0, v6);
LABEL_59:
    swift_bridgeObjectRelease();
    if (objc_msgSend(v23, sel_layerCount) != (id)2)
      goto LABEL_60;
LABEL_47:
    swift_unknownObjectRelease();
    result = swift_unknownObjectRelease();
    goto LABEL_20;
  }
  if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v23 = *(void **)(v6 + 32);
    swift_unknownObjectRetain();
    goto LABEL_59;
  }
  __break(1u);
  return result;
}

BOOL static RealityRenderer.CameraOutput._proto_Layout_v1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RealityRenderer.scene.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result)
    return swift_retain();
  __break(1u);
  return result;
}

uint64_t RealityRenderer.entities.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  v2 = swift_retain();
  return RealityRenderer.EntityCollection.init(entity:)(v2, a1);
}

uint64_t RealityRenderer.entities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16);
  result = swift_release();
  if (v2 != v3)
    __break(1u);
  return result;
}

uint64_t (*RealityRenderer.entities.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  a1[1] = v3;
  swift_retain_n();
  if (REComponentClassFromType())
    REEntityRemoveComponentByClass();
  swift_release();
  *a1 = v3;
  return RealityRenderer.entities.modify;
}

uint64_t RealityRenderer.entities.modify(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(a1[1] + 16);
  result = swift_release();
  if ((a2 & 1) != 0)
  {
    if (v3 == v4)
      return result;
    __break(1u);
  }
  if (v3 != v4)
    __break(1u);
  return result;
}

uint64_t RealityRenderer.subscribe<A>(to:on:componentType:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, ValueMetadata *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  uint64_t v8;
  uint64_t result;
  _BYTE v18[40];
  uint64_t v19[5];

  if (*(_QWORD *)(v8 + 16))
  {
    swift_retain();
    Scene.subscribe<A>(to:on:componentType:_:)(a1, a2, a3, a4, a5, a6, a7, v19);
    swift_release();
    outlined init with copy of __REAssetService((uint64_t)v19, (uint64_t)v18);
    EventSubscription.init(_:)((uint64_t)v18, a8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t RealityRenderer.ImageBasedLight.resource.getter()
{
  return swift_retain();
}

uint64_t RealityRenderer.ImageBasedLight.resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*RealityRenderer.ImageBasedLight.resource.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float RealityRenderer.ImageBasedLight.intensityExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void RealityRenderer.ImageBasedLight.intensityExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*RealityRenderer.ImageBasedLight.intensityExponent.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t key path setter for RealityRenderer.lighting : RealityRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 32) = v2;
  *(_DWORD *)(v4 + 40) = v3;
  swift_retain();
  swift_release();
  return RealityRenderer.updateIBL()();
}

uint64_t RealityRenderer.lighting.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;

  swift_beginAccess();
  v3 = *(_DWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)(a1 + 8) = v3;
  return swift_retain();
}

uint64_t RealityRenderer.lighting.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = v2;
  *(_DWORD *)(v1 + 40) = v3;
  swift_release();
  return RealityRenderer.updateIBL()();
}

uint64_t (*RealityRenderer.lighting.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return RealityRenderer.lighting.modify;
}

uint64_t RealityRenderer.lighting.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return RealityRenderer.updateIBL()();
  return result;
}

uint64_t key path setter for RealityRenderer.activeCamera : RealityRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 48) = v2;
  swift_retain();
  return swift_release();
}

uint64_t RealityRenderer.activeCamera.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t RealityRenderer.activeCamera.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*RealityRenderer.activeCamera.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

id key path getter for RealityRenderer.cameraSettings : RealityRenderer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  void *v5;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_BYTE *)(v3 + 57);
  v5 = *(void **)(v3 + 64);
  *(_BYTE *)a2 = *(_BYTE *)(v3 + 56);
  *(_BYTE *)(a2 + 1) = v4;
  *(_QWORD *)(a2 + 8) = v5;
  return v5;
}

void key path setter for RealityRenderer.cameraSettings : RealityRenderer(char *a1, uint64_t *a2)
{
  char v2;
  char v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = (void *)*((_QWORD *)a1 + 1);
  v5 = *a2;
  swift_beginAccess();
  v6 = *(void **)(v5 + 64);
  *(_BYTE *)(v5 + 56) = v2;
  *(_BYTE *)(v5 + 57) = v3;
  *(_QWORD *)(v5 + 64) = v4;
  v7 = v4;

}

id RealityRenderer.cameraSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v3;
  void *v4;

  swift_beginAccess();
  v3 = *(_BYTE *)(v1 + 57);
  v4 = *(void **)(v1 + 64);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 56);
  *(_BYTE *)(a1 + 1) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  return v4;
}

void RealityRenderer.cameraSettings.setter(char *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  swift_beginAccess();
  v5 = *(void **)(v1 + 64);
  *(_BYTE *)(v1 + 56) = v2;
  *(_BYTE *)(v1 + 57) = v3;
  *(_QWORD *)(v1 + 64) = v4;

}

uint64_t (*RealityRenderer.cameraSettings.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t RealityRenderer.MetalEventAction.event.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t RealityRenderer.MetalEventAction.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t static RealityRenderer.MetalEventAction.wait(for:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return swift_unknownObjectRetain();
}

float closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset()
{
  uint64_t Strong;
  uint64_t v1;
  float v2;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 1.0;
  v1 = Strong;
  swift_beginAccess();
  v2 = *(float *)(v1 + 76);
  swift_release();
  return v2;
}

float thunk for @escaping @callee_guaranteed () -> (@unowned Float)(uint64_t a1)
{
  float (*v1)(uint64_t);
  uint64_t v2;
  float v3;

  v1 = *(float (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t RealityRenderer.extendedDynamicRangeOutput.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

void RealityRenderer.extendedDynamicRangeOutput.setter(char a1)
{
  uint64_t v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD aBlock[6];

  v3 = a1 & 1;
  swift_beginAccess();
  v4 = *(unsigned __int8 *)(v1 + 72);
  *(_BYTE *)(v1 + 72) = a1;
  if (v4 != v3)
  {
    v5 = *(_QWORD *)(v1 + 16);
    if ((a1 & 1) != 0)
    {
      if (v5)
      {
        RESceneAddEDRColorManagementComponent();
        v6 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = partial apply for closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset;
        aBlock[5] = v6;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> (@unowned Float);
        aBlock[3] = &block_descriptor_2;
        v7 = _Block_copy(aBlock);
        swift_release();
        REEDRColorManagementComponentSetHeadroomCallback();
        _Block_release(v7);
        return;
      }
      __break(1u);
      goto LABEL_9;
    }
    if (!v5)
    {
LABEL_9:
      __break(1u);
      return;
    }
    RESceneRemoveEDRColorManagementComponent();
  }
}

void (*RealityRenderer.extendedDynamicRangeOutput.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *(_BYTE *)(v1 + 72);
  return RealityRenderer.extendedDynamicRangeOutput.modify;
}

void RealityRenderer.extendedDynamicRangeOutput.modify(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  RealityRenderer.extendedDynamicRangeOutput.setter(*(_BYTE *)(*(_QWORD *)a1 + 32));
  free(v1);
}

float RealityRenderer.extendedDynamicRangeHeadroom.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(float *)(v0 + 76);
}

uint64_t RealityRenderer.extendedDynamicRangeHeadroom.setter(float a1)
{
  uint64_t v1;
  float *v3;
  uint64_t result;

  v3 = (float *)(v1 + 76);
  result = swift_beginAccess();
  if (a1 < 1.0 || a1 > 16.0)
    a1 = *v3;
  *v3 = a1;
  return result;
}

void (*RealityRenderer.extendedDynamicRangeHeadroom.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_beginAccess();
  *((_DWORD *)v3 + 8) = *(_DWORD *)(v1 + 76);
  return RealityRenderer.extendedDynamicRangeHeadroom.modify;
}

void RealityRenderer.extendedDynamicRangeHeadroom.modify(uint64_t *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v3;

  v1 = *a1;
  v2 = *(float *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 24);
  if (v2 < 1.0 || v2 > 16.0)
    v2 = *(float *)(v3 + 76);
  *(float *)(v3 + 76) = v2;
  free((void *)v1);
}

dispatch_semaphore_t one-time initialization function for uniqueTokenGenerator()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  static RealityRenderer.uniqueTokenGenerator = 0;
  qword_255195440 = (uint64_t)result;
  return result;
}

{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  static VideoPlayerComponent.uniqueTokenGenerator = 0;
  qword_2551AACE0 = (uint64_t)result;
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.InitError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD00000000000003BLL;
}

uint64_t RealityRenderer.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  RealityRenderer.init()();
  return v0;
}

uint64_t RealityRenderer.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  CGColorRef GenericRGB;
  CGColorRef v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t OverlayForRealityRenderer;
  uint64_t v16;
  char v17;
  uint64_t RealityRendererSceneGroup;
  Swift::String v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t active;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *FailedMessage;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _QWORD *v66;

  v1 = v0;
  *(_OWORD *)(v0 + 96) = 0u;
  v2 = (uint64_t *)(v0 + 96);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 76) = 0x40000000;
  *(_OWORD *)(v0 + 144) = 0u;
  v58 = v0 + 144;
  *(_QWORD *)(v0 + 200) = 0;
  *(_OWORD *)(v0 + 216) = 0u;
  v3 = v0 + 216;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_BYTE *)(v0 + 328) = 0;
  *(_OWORD *)(v0 + 336) = 0u;
  *(_OWORD *)(v0 + 352) = 0u;
  v4 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 368) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v0 + 376) = v4;
  *(_BYTE *)(v0 + 384) = 0;
  GenericRGB = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  *(_WORD *)(v0 + 56) = 257;
  *(_QWORD *)(v0 + 64) = GenericRGB;
  v6 = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  *(_BYTE *)(v0 + 392) = 0;
  *(_QWORD *)(v0 + 400) = v6;
  v7 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v8 = *(_QWORD *)(v7 + 24);
  swift_unownedRetainStrong();
  v9 = *(_QWORD *)(v8 + 24);
  swift_retain();
  swift_release();
  v10 = *(_QWORD *)(v7 + 24);
  swift_unownedRetainStrong();
  swift_beginAccess();
  v11 = *(_QWORD *)(v10 + 40);
  swift_retain();
  result = swift_release();
  if (!v11)
  {
    __break(1u);
    goto LABEL_49;
  }
  v66 = v2 + 1;
  v59 = (uint64_t)(v2 + 20);
  swift_beginAccess();
  outlined init with copy of __REAssetService(v11 + 80, (uint64_t)&v63);
  swift_release();
  v13 = *((_QWORD *)&v64 + 1);
  v14 = v65;
  __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v14 + 32))(&v60, v13, v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
  MEMORY[0x22076CDD0](v9);
  OverlayForRealityRenderer = REEngineCreateOverlayForRealityRenderer();
  if (!OverlayForRealityRenderer)
  {
LABEL_24:
    v17 = 1;
    goto LABEL_25;
  }
  v16 = OverlayForRealityRenderer;
  if (REEngineOverlayIsEngineInsideTick())
  {
    RERelease();
    v17 = 0;
LABEL_25:
    lazy protocol witness table accessor for type RealityRenderer.InitError and conformance RealityRenderer.InitError();
    swift_allocError();
    *v35 = v17;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Material?);
    outlined destroy of BodyTrackingComponent?(v58, (uint64_t *)&demangling cache variable for type metadata for Material?);
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for Cancellable?);
    outlined destroy of BodyTrackingComponent?(v59, &demangling cache variable for type metadata for Cancellable?);
    v36 = *(_QWORD *)(v1 + 336);
    v37 = *(_QWORD *)(v1 + 352);
    outlined consume of RealityRenderer.CameraOutput?(*(_QWORD *)(v1 + 296));
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v36);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    type metadata accessor for RealityRenderer();
    swift_deallocPartialClassInstance();
    return v1;
  }
  *(_QWORD *)(v1 + 80) = v16;
  RealityRendererSceneGroup = REECSManagerCreateRealityRendererSceneGroup();
  if (!RealityRendererSceneGroup)
  {
LABEL_23:
    RERelease();
    goto LABEL_24;
  }
  v56 = v3;
  *(_QWORD *)(v1 + 88) = RealityRendererSceneGroup;
  REEngineOverlaySetRealityRendererSceneGroup();
  if (one-time initialization token for uniqueTokenGenerator != -1)
    swift_once();
  swift_beginAccess();
  OS_dispatch_semaphore.wait()();
  v3 = static RealityRenderer.uniqueTokenGenerator + 1;
  if (!__OFADD__(static RealityRenderer.uniqueTokenGenerator, 1))
  {
    ++static RealityRenderer.uniqueTokenGenerator;
    OS_dispatch_semaphore.signal()();
    swift_endAccess();
    *(_QWORD *)&v63 = 0;
    *((_QWORD *)&v63 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v63 = 0xD000000000000016;
    *((_QWORD *)&v63 + 1) = 0x800000021BE83A70;
    *(_QWORD *)&v60 = v3;
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v20 = RESceneCreate();
    swift_release();
    type metadata accessor for Scene();
    swift_allocObject();
    v21 = (_QWORD *)Scene.init(coreScene:)(v20);
    swift_retain();
    RERelease();
    MEMORY[0x22076FC98](v20, 1);
    Scene.addDefaultCamera()();
    if (!v21[12])
    {
      type metadata accessor for Entity();
      swift_allocObject();
      v22 = Entity.init()();
      REEntitySetName();
      RENetworkMarkEntityMetadataDirty();
      Entity.turnIntoNinja()();
      REAudioMixerComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RESceneAddEntity();
      v21[12] = v22;
      swift_release();
    }
    swift_beginAccess();
    v21[9] = 0;
    swift_release();
    active = v21[9];
    if (!active)
      active = Scene.internalActiveCamera.getter();
    v24 = v21[10];
    v21[10] = active;
    swift_retain();
    swift_retain();
    Scene.internalAudioListener.didset(v24);
    swift_release();
    swift_release();
    swift_release();
    *(_QWORD *)(v1 + 16) = v21;
    swift_release();
    type metadata accessor for AnchorEntity();
    swift_allocObject();
    result = Entity.init()();
    *(_QWORD *)(v1 + 24) = result;
    v25 = *(_QWORD *)(v1 + 16);
    if (v25)
    {
      v26 = result;
      swift_retain();
      swift_retain();
      specialized Scene.AnchorCollection.append(_:)(v26, v25);
      swift_release();
      result = swift_release();
      if (*(_QWORD *)(v1 + 16))
      {
        RESceneSetRealityRendererSceneGroup();
        swift_beginAccess();
        outlined init with copy of __REAssetService(v7 + 80, (uint64_t)&v63);
        v27 = *((_QWORD *)&v64 + 1);
        v28 = v65;
        result = (uint64_t)__swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
        if (*(_QWORD *)(v1 + 16))
        {
          v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
          v30 = swift_retain();
          v29(v30, v27, v28);
          swift_release();
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
          v31 = *(_QWORD *)(v1 + 16);
          if (v31)
          {
            *(_QWORD *)&v63 = *(_QWORD *)(v1 + 16);
            result = swift_beginAccess();
            if (*(_QWORD *)(v31 + 88))
            {
              swift_retain();
              swift_retain();
              Scene.AnchorCollection.removeNinja(_:)();
              swift_release();
              swift_release();
              v32 = *(_QWORD *)(v7 + 24);
              swift_unownedRetainStrong();
              swift_beginAccess();
              v33 = *(_QWORD *)(v32 + 40);
              swift_retain();
              result = swift_release();
              if (v33)
              {
                swift_beginAccess();
                outlined init with copy of __REAssetService(v33 + 120, (uint64_t)&v63);
                swift_release();
                v3 = *((_QWORD *)&v64 + 1);
                v34 = v65;
                __swift_project_boxed_opaque_existential_1(&v63, *((uint64_t *)&v64 + 1));
                (*(void (**)(uint64_t, uint64_t))(v34 + 32))(v3, v34);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63);
                if (one-time initialization token for protoStereoRenderingEnabled == -1)
                  goto LABEL_20;
                goto LABEL_47;
              }
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  __break(1u);
LABEL_47:
  swift_once();
LABEL_20:
  if (protoStereoRenderingEnabled)
  {
    result = REAssetManagerCreateAssetHandle();
    if (!result)
    {
      __break(1u);
      goto LABEL_23;
    }
  }
  else
  {
    result = REAssetManagerCreateAssetHandle();
    if (!result)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
  }
  *(_QWORD *)(v1 + 208) = result;
  v63 = 0u;
  v64 = 0u;
  v38 = specialized static RealityFusionSession.createRealityFusionSession(arSession:)((uint64_t)&v63);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v63, (uint64_t *)&demangling cache variable for type metadata for __AnyARKitObject?);
  *(_QWORD *)(v1 + 184) = v38;
  swift_release();
  *(_QWORD *)(v1 + 192) = REEntityCreate();
  REEntitySetName();
  REAnchorComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  REAnchorComponentSetAnchoredLocally();
  RESceneUnderstandingRootComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  RESceneUnderstandingRenderOptionsComponentGetComponentType();
  result = REEntityGetOrAddComponentByClass();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  RESceneAddEntity();
  REHideEntity();
  type metadata accessor for __MaterialResource();
  v39 = specialized static __MaterialResource.createAssetRef(named:in:)(0xD00000000000004ELL, 0x800000021BE83B10, 0);
  if (v57)
  {
LABEL_35:
    swift_release();
    swift_release();
    return v1;
  }
  v40 = v39;
  REAssetHandleLoadNow();
  if (REAssetHandleLoadFailed())
  {
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
    swift_allocError();
    *(_QWORD *)v45 = 0xD00000000000004ELL;
    *(_QWORD *)(v45 + 8) = 0x800000021BE83B10;
LABEL_32:
    *(_QWORD *)(v45 + 16) = v42;
    *(_QWORD *)(v45 + 24) = v44;
    *(_BYTE *)(v45 + 32) = 1;
    swift_willThrow();
    RERelease();
    goto LABEL_35;
  }
  v46 = (void *)REMaterialParameterBlockValueCreate();
  v47 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v60 = MEMORY[0x24BEE4AF8];
  BYTE8(v60) = 0;
  *(_QWORD *)&v61 = 0;
  *((_QWORD *)&v61 + 1) = v46;
  static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v40, (uint64_t *)&v60, 0, 0, 255, (uint64_t *)&v63);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  RERelease();
  v48 = (uint64_t)v66;
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)&v63, v48, (uint64_t *)&demangling cache variable for type metadata for Material?);
  swift_endAccess();
  if (protoStereoRenderingEnabled)
  {
    v49 = specialized static __MaterialResource.createAssetRef(named:in:)(0xD000000000000054, 0x800000021BE83B80, 0);
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      v50 = (void *)REAssetHandleCopyLoadFailedMessage();
      v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v44 = v51;

      lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError();
      swift_allocError();
      *(_QWORD *)v45 = 0xD000000000000054;
      *(_QWORD *)(v45 + 8) = 0x800000021BE83B80;
      goto LABEL_32;
    }
    v52 = (void *)REMaterialParameterBlockValueCreate();
    *(_QWORD *)&v60 = v47;
    BYTE8(v60) = 0;
    *(_QWORD *)&v61 = 0;
    *((_QWORD *)&v61 + 1) = v52;
    static __MaterialResource.createMaterial(withAsset:parameters:customUniformsState:)(v49, (uint64_t *)&v60, 0, 0, 255, (uint64_t *)&v63);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)&v63, v58, (uint64_t *)&demangling cache variable for type metadata for Material?);
    swift_endAccess();
  }
  type metadata accessor for Entity();
  swift_allocObject();
  *v2 = Entity.init()();
  result = swift_release();
  if (!*v2)
    goto LABEL_57;
  swift_retain();
  REEntitySetName();
  RENetworkMarkEntityMetadataDirty();
  result = swift_release();
  if (!*v2)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  swift_retain();
  Entity.turnIntoNinja()();
  result = swift_release();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  *(_QWORD *)&v63 = *(_QWORD *)(v1 + 16);
  if (!*v2)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  swift_retain();
  v53 = swift_retain();
  Scene.AnchorCollection.appendNinja(_:)(v53);
  swift_release();
  swift_release();
  result = RealityRenderer.updateIBL()();
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  v62 = 0;
  v60 = 0u;
  v61 = 0u;
  v54 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v60, (uint64_t)partial apply for closure #2 in RealityRenderer.init(), v54, (uint64_t *)&v63);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?((uint64_t)&v60, &demangling cache variable for type metadata for EventSource?);
  swift_beginAccess();
  outlined assign with take of Material?((uint64_t)&v63, v56, &demangling cache variable for type metadata for Cancellable?);
  result = swift_endAccess();
  if (*(_QWORD *)(v1 + 16))
  {
    v62 = 0;
    v60 = 0u;
    v61 = 0u;
    v55 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)&v60, (uint64_t)partial apply for closure #3 in RealityRenderer.init(), v55, (uint64_t *)&v63);
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v60, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Material?((uint64_t)&v63, v59, &demangling cache variable for type metadata for Cancellable?);
    swift_endAccess();
    return v1;
  }
LABEL_62:
  __break(1u);
  return result;
}

uint64_t closure #2 in RealityRenderer.init()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    RealityRenderer.doUpdateCallback(deltaTime:)();
    return swift_release();
  }
  return result;
}

uint64_t closure #3 in RealityRenderer.init()()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    RealityRenderer.doRenderCallback()();
    return swift_release();
  }
  return result;
}

uint64_t RealityRenderer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)();
  void (*v13)(uint64_t, void *, uint64_t (*)());
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD aBlock[3];
  void *v18;
  uint64_t (*v19)();
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  result = outlined init with copy of (Int, URL)(v2 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
  if (!v22)
    goto LABEL_16;
  outlined init with take of BindableDataInternal(&v21, (uint64_t)aBlock);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  v4 = v21;
  result = swift_beginAccess();
  if (*(_BYTE *)(v0 + 72) != 1)
  {
LABEL_5:
    v5 = *(_QWORD *)(v0 + 200);
    if (!v5)
      goto LABEL_9;
    v6 = one-time initialization token for dispatchQueue;
    swift_retain();
    if (v6 != -1)
      swift_once();
    v7 = static __RERenderGraphEmitter.dispatchQueue;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v4;
    *(_QWORD *)(v8 + 24) = v5;
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:);
    *(_QWORD *)(v9 + 24) = v8;
    v19 = _sIg_Ieg_TRTA_0;
    v20 = v9;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    v18 = &block_descriptor_11;
    v10 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v7, v10);
    _Block_release(v10);
    LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    result = swift_release();
    if ((v7 & 1) == 0)
    {
LABEL_9:
      *(_QWORD *)(v1 + 200) = 0;
      swift_release();
      swift_beginAccess();
      if (*(_QWORD *)(v1 + 240))
      {
        outlined init with copy of __REAssetService(v1 + 216, (uint64_t)aBlock);
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
        dispatch thunk of Cancellable.cancel()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      }
      swift_beginAccess();
      if (*(_QWORD *)(v1 + 280))
      {
        outlined init with copy of __REAssetService(v1 + 256, (uint64_t)aBlock);
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
        dispatch thunk of Cancellable.cancel()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      }
      RealityRenderer.deinitRealityFusion()();
      swift_beginAccess();
      outlined init with copy of __REAssetService(v2 + 80, (uint64_t)aBlock);
      v11 = v18;
      v12 = v19;
      result = (uint64_t)__swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v18);
      if (*(_QWORD *)(v1 + 16))
      {
        v13 = (void (*)(uint64_t, void *, uint64_t (*)()))*((_QWORD *)v12 + 3);
        v14 = swift_retain();
        v13(v14, v11, v12);
        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        RERelease();
        RERelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        outlined destroy of BodyTrackingComponent?(v1 + 104, (uint64_t *)&demangling cache variable for type metadata for Material?);
        outlined destroy of BodyTrackingComponent?(v1 + 144, (uint64_t *)&demangling cache variable for type metadata for Material?);
        swift_release();
        swift_release();
        outlined destroy of BodyTrackingComponent?(v1 + 216, &demangling cache variable for type metadata for Cancellable?);
        outlined destroy of BodyTrackingComponent?(v1 + 256, &demangling cache variable for type metadata for Cancellable?);
        v15 = *(_QWORD *)(v1 + 336);
        v16 = *(_QWORD *)(v1 + 352);
        outlined consume of RealityRenderer.CameraOutput?(*(_QWORD *)(v1 + 296));
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v15);
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v1;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(_QWORD *)(v0 + 16))
  {
    RESceneRemoveEDRColorManagementComponent();
    goto LABEL_5;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t RealityRenderer.__deallocating_deinit()
{
  RealityRenderer.deinit();
  return swift_deallocClassInstance();
}

uint64_t RealityRenderer.updateIBL()()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  result = swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 96);
  if (v2)
  {
    if (v3)
    {
      swift_retain();
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else if (v3)
  {
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0);
    return swift_release();
  }
  __break(1u);
  return result;
}

void RealityRenderer.deinitRealityFusion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 184);
  if (v1)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24);
    v3 = __OFSUB__(v2, 1);
    v4 = v2 - 1;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + 24) = v4;
      if (!v4)
      {
        swift_beginAccess();
        v5 = static RealityFusionSession.sharedSession;
        if (static RealityFusionSession.sharedSession && (swift_beginAccess(), v5[2]))
        {
          swift_retain();
          v6 = (id)RFServiceManagerGetAnchorManagementService();
          if (v6)
          {
            v7 = v6;
            specialized static __ServiceLocator.shared.getter();
            swift_beginAccess();
            RFAnchorManagementServiceCleanupWithServiceLocator();

          }
        }
        else
        {
          swift_retain();
        }
        RFServiceManagerCleanUp();
        static RealityFusionSession.sharedSession = 0;
        swift_release();
        swift_release();
      }
    }
  }
}

void RealityRenderer.updateRealityFusion(deltaTime:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 184);
  if (!v1 || (swift_beginAccess(), (v2 = *(void **)(v1 + 16)) == 0))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = v2;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (!REServiceLocatorGetECSService())
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  RFServiceManagerGenerateSnapshot();
  v4 = (id)RFServiceManagerGetAnchorManagementService();
  if (!v4)
  {
LABEL_7:

    return;
  }
  if (*(_QWORD *)(v0 + 16))
  {
    v5 = v4;
    RFAnchorManagementServiceUpdateByDeltaTime();

    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
}

void RealityRenderer.doUpdateCallback(deltaTime:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  void *v21;
  uint64_t v22;
  __int128 v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  char *v38;
  _QWORD v39[2];
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  char v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v3 = v0;
  v47 = *MEMORY[0x24BDAC8D0];
  RealityRenderer.updateRealityFusion(deltaTime:)();
  if (*(_BYTE *)(v0 + 384) == 1)
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v0 + 48);
    if (!v4)
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    v5 = *(_QWORD *)(v0 + 296);
    if (!v5)
    {
LABEL_52:
      __break(1u);
      goto LABEL_53;
    }
    v6 = *(_QWORD *)(v3 + 304);
    v1 = *(_QWORD *)(v3 + 312);
    v2 = *(_QWORD *)(v3 + 320);
    v7 = *(_BYTE *)(v3 + 328);
    v41 = v4;
    swift_retain();
    outlined copy of RealityRenderer.CameraOutput?(v5);
    RECameraViewDescriptorsComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    RECameraViewDescriptorsComponentClearCameraViewDescriptors();
    RECameraViewDescriptorsComponentAddViewDescriptor();
    v8 = v5 & 0xC000000000000001;
    if ((v5 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      MEMORY[0x220769770](0, v5);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_17:
        swift_once();
LABEL_8:
        if (!protoStereoRenderingEnabled)
          goto LABEL_27;
        *(_QWORD *)&v40 = v5 & 0xC000000000000001;
        if (v6 >> 62)
        {
          swift_bridgeObjectRetain();
          if (_CocoaArrayWrapper.endIndex.getter())
            goto LABEL_11;
        }
        else
        {
          v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v9)
          {
LABEL_11:
            if ((v6 & 0xC000000000000001) != 0)
            {
              MEMORY[0x220769770](0, v6);
            }
            else
            {
              if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
              swift_unknownObjectRetain();
            }
            swift_bridgeObjectRelease();
            RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture();
            swift_unknownObjectRelease();
LABEL_20:
            v8 = v1 & 0xFFFFFFFFFFFFFF8;
            if (v1 >> 62)
              goto LABEL_44;
            v10 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v10)
              goto LABEL_45;
LABEL_22:
            if ((v1 & 0xC000000000000001) != 0)
            {
              MEMORY[0x220769770](0, v1);
              goto LABEL_25;
            }
            if (*(_QWORD *)(v8 + 16))
            {
              swift_unknownObjectRetain();
LABEL_25:
              v8 = v40;
              swift_bridgeObjectRelease();
              RECameraViewDescriptorsComponentSetRasterizationRateMap();
              swift_unknownObjectRelease();
              if ((v7 & 1) == 0)
                goto LABEL_27;
LABEL_26:
              RECameraViewDescriptorsComponentSetViewMode();
LABEL_27:
              while (!*(_QWORD *)(v2 + 16))
              {
                __break(1u);
LABEL_44:
                swift_bridgeObjectRetain();
                if (_CocoaArrayWrapper.endIndex.getter())
                  goto LABEL_22;
LABEL_45:
                swift_bridgeObjectRelease();
                v8 = v40;
                if ((v7 & 1) != 0)
                  goto LABEL_26;
              }
              RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport();
              if (protoStereoRenderingEnabled)
              {
                v11 = swift_bridgeObjectRetain();
                outlined consume of RealityRenderer.CameraOutput?(v11);
                if (v8)
                {
                  v12 = (void *)MEMORY[0x220769770](0, v5);
                }
                else
                {
                  v12 = *(void **)(v5 + 32);
                  swift_unknownObjectRetain();
                }
                swift_bridgeObjectRelease();
                v13 = (uint64_t)objc_msgSend(v12, sel_arrayLength);
                swift_unknownObjectRelease();
                if (v13 >= 2)
                  RECameraViewDescriptorsComponentCameraViewDescriptorSetViewport();
              }
              else
              {
                outlined consume of RealityRenderer.CameraOutput?(v5);
              }
              v14 = RECameraViewDescriptorsComponentCameraViewDescriptorCopySettingStruct();
              RERenderGraphDataStructAddFloat4();
              v2 = v3 + 56;
              swift_beginAccess();
              MEMORY[0x22076F6B0](v14, "disableAA", (*(_BYTE *)(v3 + 57) & 1) == 0);
              swift_beginAccess();
              outlined init with copy of (Int, URL)(v3 + 104, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
              v1 = v45;
              if (v45)
              {
                v15 = v46;
                v16 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                v17 = *(_QWORD *)(v1 - 8);
                v18 = MEMORY[0x24BDAC7A8](v16);
                v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
                (*(void (**)(char *, __n128))(v17 + 16))(v20, v18);
                outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v1, v15);
                (*(void (**)(char *, unint64_t))(v17 + 8))(v20, v1);
                swift_beginAccess();
                swift_release();
                v21 = *(void **)(v3 + 64);
                if (v21)
                {
                  v1 = v21;
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  v43 = 0;
                  v44 = 0uLL;
                  RECGColorToColorGamut();
                  v22 = 0;
                  v23 = v44;
LABEL_55:
                  while (1)
                  {
                    v42 = v23;
                    v31 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3)));
                    v24 = v31 == 0.0;
                    if (v22 == 3)
                      break;
                    while (1)
                    {
                      ++v22;
                      if (v24)
                        break;
                      if (v22 == 3)
                        goto LABEL_61;
                      v24 = 0;
                    }
                  }
                  if (v31 == 0.0 && *(_BYTE *)v2 == 1)
                  {
                    RERenderGraphAssetSetRuntimeNodeSettingBool();
                  }
                  else
                  {
LABEL_61:
                    v40 = v23;
                    RERenderGraphAssetSetRuntimeNodeSettingBool();
                    REMaterialAssetSetColor4F();
                    REMaterialAssetSetBool();
                    if (protoStereoRenderingEnabled)
                    {
                      swift_beginAccess();
                      outlined init with copy of (Int, URL)(v3 + 144, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                      v32 = v45;
                      if (!v45)
                      {
                        outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                        __break(1u);
                        return;
                      }
                      v33 = v46;
                      v34 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                      v39[1] = v39;
                      v35 = *(_QWORD *)(v32 - 8);
                      v36 = MEMORY[0x24BDAC7A8](v34);
                      v38 = (char *)v39 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
                      (*(void (**)(char *, __n128))(v35 + 16))(v38, v36);
                      outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v33);
                      (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v32);
                      swift_beginAccess();
                      swift_release();
                      REMaterialAssetSetColor4F();
                      REMaterialAssetSetBool();
                    }
                  }

                  goto LABEL_65;
                }
                RERenderGraphAssetSetRuntimeNodeSettingBool();
                RERenderGraphAssetSetRuntimeNodeSettingBool();
                REMaterialAssetSetBool();
                if (!protoStereoRenderingEnabled)
                {
LABEL_65:
                  RERenderGraphAssetSetRuntimeNodeSettingBool();
                  RERenderGraphAssetSetRuntimeNodeStringSetting();
                  RECameraViewDescriptorsComponentCameraViewDescriptorSetSettingStruct();
                  RERelease();
                  RECameraViewDescriptorsComponentSetForceWaitOnPipelineCompilation();
                  swift_release();
                  return;
                }
                swift_beginAccess();
                outlined init with copy of (Int, URL)(v3 + 144, (uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                v1 = v45;
                if (v45)
                {
                  v25 = v46;
                  v26 = __swift_project_boxed_opaque_existential_1(&v44, v45);
                  v27 = *(_QWORD *)(v1 - 8);
                  v28 = MEMORY[0x24BDAC7A8](v26);
                  v30 = (char *)v39 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
                  (*(void (**)(char *, __n128))(v27 + 16))(v30, v28);
                  outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                  (*(void (**)(unint64_t, uint64_t))(v25 + 8))(v1, v25);
                  (*(void (**)(char *, unint64_t))(v27 + 8))(v30, v1);
                  swift_beginAccess();
                  swift_release();
                  REMaterialAssetSetBool();
                  goto LABEL_65;
                }
LABEL_54:
                outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
                __break(1u);
                goto LABEL_55;
              }
LABEL_53:
              outlined destroy of BodyTrackingComponent?((uint64_t)&v44, (uint64_t *)&demangling cache variable for type metadata for Material?);
              __break(1u);
              goto LABEL_54;
            }
            goto LABEL_50;
          }
        }
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      swift_unknownObjectRetain();
    }
    RECameraViewDescriptorsComponentAddSpecifyCommandFromTexture();
    swift_unknownObjectRelease();
    if (one-time initialization token for protoStereoRenderingEnabled == -1)
      goto LABEL_8;
    goto LABEL_17;
  }
}

void RealityRenderer.doRenderCallback()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t RenderFrameSettings;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t RenderFrameWorkload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t (*v29)(uint64_t);
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;

  if (*(_BYTE *)(v0 + 384) == 1)
  {
    v1 = specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    outlined init with copy of (Int, URL)(v1 + 40, (uint64_t)&v31, &demangling cache variable for type metadata for __RenderService?);
    if (v32)
    {
      outlined init with take of BindableDataInternal(&v31, (uint64_t)&aBlock);
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
      type metadata accessor for RERenderManager();
      swift_dynamicCast();
      RenderFrameSettings = RERenderManagerCreateRenderFrameSettings();
      v3 = *(_QWORD *)(v0 + 368);
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        swift_bridgeObjectRetain();
        v5 = v3 + 40;
        do
        {
          RERenderFrameSettingsAddGpuWaitEvent();
          v5 += 16;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
      }
      v6 = *(_QWORD *)(v0 + 376);
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        swift_bridgeObjectRetain();
        v8 = v6 + 40;
        do
        {
          RERenderFrameSettingsAddGpuSignalEvent();
          v8 += 16;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
      }
      REEngineOverlayGetCurrentTime();
      RERenderFrameSettingsSetTotalTime();
      RenderFrameWorkload = RERenderManagerCreateRenderFrameWorkload();
      type metadata accessor for RERenderFrameWorkload();
      v10 = swift_allocObject();
      *(_QWORD *)(v10 + 16) = RenderFrameWorkload;
      MEMORY[0x22076F68C](RenderFrameWorkload, RenderFrameSettings);
      v11 = *(_QWORD *)(v0 + 352);
      v12 = MEMORY[0x24BDAC760];
      if (v11)
      {
        v13 = *(_QWORD *)(v0 + 360);
        v14 = swift_allocObject();
        swift_weakInit();
        v15 = (_QWORD *)swift_allocObject();
        v15[2] = v14;
        v15[3] = v11;
        v15[4] = v13;
        v16 = (_QWORD *)swift_allocObject();
        v16[2] = partial apply for closure #1 in RealityRenderer.doRenderCallback();
        v16[3] = v15;
        v16[4] = v10;
        v29 = partial apply for closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:);
        v30 = v16;
        aBlock = v12;
        v26 = 1107296256;
        v27 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v28 = &block_descriptor_53;
        v17 = _Block_copy(&aBlock);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v11);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_release();
        RERenderFrameWorkloadAddCompletedHandler();
        v18 = v17;
        v12 = MEMORY[0x24BDAC760];
        _Block_release(v18);
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
      }
      v19 = *(_QWORD *)(v0 + 336);
      if (v19)
      {
        v20 = *(_QWORD *)(v0 + 344);
        v21 = swift_allocObject();
        swift_weakInit();
        v22 = (_QWORD *)swift_allocObject();
        v22[2] = v21;
        v22[3] = v19;
        v22[4] = v20;
        v23 = (_QWORD *)swift_allocObject();
        v23[2] = partial apply for closure #2 in RealityRenderer.doRenderCallback();
        v23[3] = v22;
        v23[4] = v10;
        v29 = partial apply for closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:);
        v30 = v23;
        aBlock = v12;
        v26 = 1107296256;
        v27 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
        v28 = &block_descriptor_43_0;
        v24 = _Block_copy(&aBlock);
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v19);
        swift_retain();
        outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v19);
        swift_retain();
        swift_retain();
        swift_release();
        RERenderFrameWorkloadAddScheduledHandler();
        _Block_release(v24);
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed () -> ())?(v19);
      }
      if (*(_QWORD *)(v0 + 200))
      {
        RERenderGraphEmitterAssetExecute();
        RERenderFrameWorkloadCommit();
        swift_release();
        RERelease();
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t closure #1 in RealityRenderer.doRenderCallback()(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    a3();
    return swift_release();
  }
  return result;
}

void RealityRenderer.lazyInitEmitter()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[3];
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  if (*(_QWORD *)(v0 + 200))
    return;
  v1 = v0;
  v2 = specialized static __ServiceLocator.shared.getter();
  type metadata accessor for __RERenderGraphEmitter();
  swift_retain();
  *(_QWORD *)(v0 + 200) = static __RERenderGraphEmitter.firstUsedEmitter()();
  swift_release();
  if (!*(_QWORD *)(v0 + 200))
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v2 + 120, (uint64_t)aBlock);
    v3 = v17;
    v4 = v18;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v17);
    (*((void (**)(void *, uint64_t (*)()))v4 + 4))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    AssetHandle = REAssetManagerCreateAssetHandle();
    if (!AssetHandle)
    {
LABEL_14:
      __break(1u);
      return;
    }
    v17 = (void *)MEMORY[0x24BEE27D0];
    aBlock[0] = AssetHandle;
    outlined init with copy of Any((uint64_t)aBlock, (uint64_t)&v21);
    swift_dynamicCast();
    v6 = v20;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    type metadata accessor for __REAsset();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    *(_QWORD *)(v1 + 200) = v8;
    swift_release();
  }
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v2 + 40, (uint64_t)&v21, &demangling cache variable for type metadata for __RenderService?);
  if (!v22)
  {
    __break(1u);
    goto LABEL_14;
  }
  outlined init with take of BindableDataInternal(&v21, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RenderService);
  type metadata accessor for RERenderManager();
  swift_dynamicCast();
  v9 = v21;
  v10 = *(_QWORD *)(v1 + 200);
  if (!v10)
  {
LABEL_11:
    swift_release();
    swift_release();
    return;
  }
  v11 = one-time initialization token for dispatchQueue;
  swift_retain();
  if (v11 != -1)
    swift_once();
  v12 = static __RERenderGraphEmitter.dispatchQueue;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v9;
  *(_QWORD *)(v13 + 24) = v10;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:);
  *(_QWORD *)(v14 + 24) = v13;
  v18 = thunk for @callee_guaranteed () -> ()partial apply;
  v19 = v14;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  v17 = &block_descriptor_63;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if ((v12 & 1) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance RealityRenderer.UpdateAndRenderError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000005ALL;
  else
    return 0xD00000000000003BLL;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RealityRenderer.update(_:)(Swift::Double a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (REEngineOverlayIsEngineInsideTick())
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *v2 = 0;
    swift_willThrow();
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 296);
    v4 = *(_QWORD *)(v1 + 336);
    v5 = *(_QWORD *)(v1 + 352);
    *(_BYTE *)(v1 + 328) = 0;
    *(_OWORD *)(v1 + 296) = 0u;
    *(_OWORD *)(v1 + 312) = 0u;
    *(_OWORD *)(v1 + 336) = 0u;
    *(_OWORD *)(v1 + 352) = 0u;
    v6 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v1 + 368) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v1 + 376) = v6;
    *(_BYTE *)(v1 + 384) = 0;
    outlined consume of RealityRenderer.CameraOutput?(v3);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    REEngineOverlayEnterFrame();
    REEngineOverlayFramePrepare();
    REEngineOverlayFrameSimulate();
    REEngineOverlayFrameCommit();
    REEngineOverlayFrameExit();
  }
}

uint64_t RealityRenderer.updateAndRender(deltaTime:cameraOutput:whenScheduled:onComplete:actionsBeforeRender:actionsAfterRender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE *v16;
  void *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v12 = *a1;
  v11 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  v28 = *((_BYTE *)a1 + 32);
  result = REEngineOverlayIsEngineInsideTick();
  if ((_DWORD)result)
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *v16 = 0;
    return swift_willThrow();
  }
  v27 = a5;
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v17 = (void *)MEMORY[0x220769770](0, v12);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v17 = *(void **)(v12 + 32);
    swift_unknownObjectRetain();
  }
  swift_beginAccess();
  if (*(_QWORD *)(v7 + 64) || !objc_msgSend(v17, sel_isFramebufferOnly))
  {
    v19 = *(_QWORD *)(v7 + 296);
    *(_QWORD *)(v7 + 296) = v12;
    *(_QWORD *)(v7 + 304) = v11;
    *(_QWORD *)(v7 + 312) = v13;
    *(_QWORD *)(v7 + 320) = v14;
    *(_BYTE *)(v7 + 328) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of RealityRenderer.CameraOutput?(v19);
    v20 = *(_QWORD *)(v7 + 336);
    *(_QWORD *)(v7 + 336) = a2;
    *(_QWORD *)(v7 + 344) = a3;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a2);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v20);
    v21 = *(_QWORD *)(v7 + 352);
    *(_QWORD *)(v7 + 352) = a4;
    *(_QWORD *)(v7 + 360) = v27;
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(a4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
    *(_QWORD *)(v7 + 368) = a6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 + 376) = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v22 = *(_QWORD *)(v7 + 48);
    *(_BYTE *)(v7 + 384) = v22 != 0;
    if (v22)
      RealityRenderer.lazyInitEmitter()();
    REEngineOverlayEnterFrame();
    REEngineOverlayFramePrepare();
    REEngineOverlayFrameSimulate();
    REEngineOverlayFrameCommit();
    REEngineOverlayFrameExit();
    v23 = *(_QWORD *)(v7 + 296);
    v24 = *(_QWORD *)(v7 + 336);
    v25 = *(_QWORD *)(v7 + 352);
    *(_OWORD *)(v7 + 296) = 0u;
    *(_OWORD *)(v7 + 312) = 0u;
    *(_BYTE *)(v7 + 328) = 0;
    *(_OWORD *)(v7 + 336) = 0u;
    *(_OWORD *)(v7 + 352) = 0u;
    v26 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v7 + 368) = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v7 + 376) = v26;
    *(_BYTE *)(v7 + 384) = 0;
    outlined consume of RealityRenderer.CameraOutput?(v23);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v24);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v7 + 48))
    {
      swift_retain();
      RECameraViewDescriptorsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RECameraViewDescriptorsComponentClearCameraViewDescriptors();
      swift_unknownObjectRelease();
      return swift_release();
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError();
    swift_allocError();
    *v18 = 1;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
}

id RealityRenderer.cameraRenderingSettings.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 400);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 392);
  *(_QWORD *)(a1 + 8) = v2;
  return v2;
}

void RealityRenderer.cameraRenderingSettings.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *(void **)(v1 + 400);
  *(_BYTE *)(v1 + 392) = v2;
  *(_QWORD *)(v1 + 400) = v3;

}

void (*RealityRenderer.cameraRenderingSettings.modify(uint64_t a1))(char *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 400);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 392);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v1;
  v3 = v2;
  return RealityRenderer.cameraRenderingSettings.modify;
}

void RealityRenderer.cameraRenderingSettings.modify(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v2 = *((_QWORD *)a1 + 2);
  v4 = *(void **)(v2 + 400);
  *(_BYTE *)(v2 + 392) = v1;
  *(_QWORD *)(v2 + 400) = v3;

}

uint64_t CameraRenderingSettings.disableTonemapping.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t (*CameraRenderingSettings.disableTonemapping.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingSettings.colorBackground.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance CameraRenderingOutput.InitError()
{
  return 0xD00000000000003BLL;
}

double CameraRenderingOutput.RelativeViewport.originX.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.originX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.originY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.width.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CameraRenderingOutput.RelativeViewport.height.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void RealityRenderer.CameraOutput.RelativeViewport.init(originX:originY:width:height:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

uint64_t CameraRenderingOutput.Descriptor.colorTextures.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CameraRenderingOutput.Descriptor.colorTextures.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*CameraRenderingOutput.Descriptor.colorTextures.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CameraRenderingOutput.Descriptor.viewports.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CameraRenderingOutput.Descriptor.viewports.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*CameraRenderingOutput.Descriptor.viewports.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CameraRenderingOutput.Descriptor.monoscopic(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = v4;
  specialized Array._endMutation()();
  *a2 = v6;
  a2[1] = (uint64_t)&outlined read-only object #0 of static CameraRenderingOutput.Descriptor.monoscopic(colorTexture:);
  return swift_unknownObjectRetain();
}

uint64_t *CameraRenderingOutput.init(_:)@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *result;
  v4 = result[1];
  if ((*result & 0xC000000000000001) != 0)
  {
    v5 = (void *)MEMORY[0x220769770](0, v3);
  }
  else
  {
    if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v5 = *(void **)(v3 + 32);
    swift_unknownObjectRetain();
  }
  if ((objc_msgSend(v5, sel_usage) & 4) != 0)
  {
    result = (uint64_t *)swift_unknownObjectRelease();
    *a2 = v3;
    a2[1] = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError();
    swift_allocError();
    swift_willThrow();
    return (uint64_t *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_depthTextures_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 8) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 8) = v2;
  }
  return result;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify;
}

uint64_t RealityRenderer.CameraOutput.Descriptor._proto_rasterizationRateMaps_v1.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 16) = v2;
  }
  return result;
}

uint64_t static RealityRenderer.CameraOutput.Descriptor._proto_stereoProjectionWith_v1(layeredColorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)(a1, (uint64_t)&outlined read-only object #0 of static RealityRenderer.CameraOutput.Descriptor._proto_stereoProjectionWith_v1(layeredColorTexture:), 1, a2);
}

uint64_t static RealityRenderer.CameraOutput.Descriptor.singleProjection(colorTexture:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v8 + 32) = a1;
  v11 = v8;
  specialized Array._endMutation()();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v9;
  *(_QWORD *)(a4 + 24) = a2;
  *(_BYTE *)(a4 + 32) = a3;
  return swift_unknownObjectRetain();
}

void RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

_BYTE *(*RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 32);
  return RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify;
}

_BYTE *RealityRenderer.CameraOutput.Descriptor._proto_layout_v1.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 32) = result[8];
  return result;
}

void RealityRenderer.CameraOutput._proto_Layout_v1.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int RealityRenderer.CameraOutput._proto_Layout_v1.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *(*RealityRenderer.CameraSettings.antialiasing.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 1);
  return RealityRenderer.CameraSettings.antialiasing.modify;
}

_BYTE *RealityRenderer.CameraSettings.antialiasing.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 1) = result[8];
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.CameraOutput.InitError, &unk_24DFA3B90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.CameraOutput.InitError, &unk_24DFA3B90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput.InitError and conformance RealityRenderer.CameraOutput.InitError);
  }
  return result;
}

uint64_t sub_21BA610AC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

float partial apply for closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset()
{
  return closure #1 in RealityRenderer.extendedDynamicRangeOutput.didset();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.InitError and conformance RealityRenderer.InitError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.InitError, &unk_24DFA3B00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.InitError, &unk_24DFA3B00);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.InitError and conformance RealityRenderer.InitError);
  }
  return result;
}

uint64_t outlined consume of RealityRenderer.CameraOutput?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for RealityRenderer()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #2 in RealityRenderer.init()()
{
  return closure #2 in RealityRenderer.init()();
}

uint64_t outlined assign with take of Material?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #3 in RealityRenderer.init()()
{
  return closure #3 in RealityRenderer.init()();
}

unint64_t lazy protocol witness table accessor for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError;
  if (!lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __MaterialResource.LoadError, &type metadata for __MaterialResource.LoadError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __MaterialResource.LoadError and conformance __MaterialResource.LoadError);
  }
  return result;
}

uint64_t partial apply for closure #1 in __RERenderGraphEmitter.unsetup(mgr:)()
{
  uint64_t v0;

  return closure #1 in __RERenderGraphEmitter.unsetup(mgr:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_21BA61244()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return thunk for @callee_guaranteed () -> ()(*(uint64_t (**)(void))(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.UpdateAndRenderError, &unk_24DFA3A70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError;
  if (!lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.UpdateAndRenderError, &unk_24DFA3A70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.UpdateAndRenderError and conformance RealityRenderer.UpdateAndRenderError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError;
  if (!lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CameraRenderingOutput.InitError, &unk_24DFA39E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError;
  if (!lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CameraRenderingOutput.InitError, &unk_24DFA39E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraRenderingOutput.InitError and conformance CameraRenderingOutput.InitError);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for RealityRenderer.EntityCollection(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection;
  if (!lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.EntityCollection, &type metadata for RealityRenderer.EntityCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection;
  if (!lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.EntityCollection, &type metadata for RealityRenderer.EntityCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.EntityCollection and conformance RealityRenderer.EntityCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in RealityRenderer.EntityCollection()
{
  return MEMORY[0x24BEE1780];
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<RealityRenderer.EntityCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<RealityRenderer.EntityCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<RealityRenderer.EntityCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<RealityRenderer.EntityCollection>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in RealityRenderer.EntityCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<RealityRenderer.EntityCollection> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<RealityRenderer.EntityCollection>, MEMORY[0x24BEE2C18]);
}

unint64_t lazy protocol witness table accessor for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1;
  if (!lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for RealityRenderer.CameraOutput._proto_Layout_v1, &type metadata for RealityRenderer.CameraOutput._proto_Layout_v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RealityRenderer.CameraOutput._proto_Layout_v1 and conformance RealityRenderer.CameraOutput._proto_Layout_v1);
  }
  return result;
}

uint64_t sub_21BA6146C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 1);
  return result;
}

_BYTE *sub_21BA61478(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_21BA61484@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = swift_retain();
  result = RealityRenderer.EntityCollection.init(entity:)(v2, &v4);
  *a1 = v4;
  return result;
}

uint64_t sub_21BA614C4(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)result + 16) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 24) + 16))
    __break(1u);
  return result;
}

uint64_t sub_21BA614E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_DWORD *)(v3 + 40);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(a2 + 8) = v4;
  return swift_retain();
}

uint64_t sub_21BA6153C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 48);
  return swift_retain();
}

uint64_t sub_21BA61590@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 72);
  return result;
}

void sub_21BA615D4(char *a1)
{
  RealityRenderer.extendedDynamicRangeOutput.setter(*a1);
}

float sub_21BA615F8@<S0>(uint64_t *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  float result;

  v3 = *a1;
  swift_beginAccess();
  result = *(float *)(v3 + 76);
  *a2 = result;
  return result;
}

uint64_t sub_21BA6163C(float *a1, _QWORD *a2)
{
  float v2;
  float *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (float *)(*a2 + 76);
  result = swift_beginAccess();
  if (v2 < 1.0 || v2 > 16.0)
    v2 = *v3;
  *v3 = v2;
  return result;
}

id sub_21BA616A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(*(_QWORD *)a1 + 392);
  v3 = *(void **)(*(_QWORD *)a1 + 400);
  *(_BYTE *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  return v3;
}

void sub_21BA616B8(uint64_t a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;

  v2 = *(void **)(a1 + 8);
  v3 = *a2;
  v5 = *(id *)(*a2 + 400);
  *(_BYTE *)(v3 + 392) = *(_BYTE *)a1;
  *(_QWORD *)(v3 + 400) = v2;
  v4 = v2;

}

uint64_t sub_21BA616F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BA61700(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_21BA61740@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BA6174C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_21BA6178C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 32);
  return result;
}

_BYTE *sub_21BA61798(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *result;
  return result;
}

_BYTE *sub_21BA617A4(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 1) = *result;
  return result;
}

uint64_t method lookup function for RealityRenderer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RealityRenderer.scene.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of RealityRenderer.entities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of RealityRenderer.entities.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of RealityRenderer.entities.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of RealityRenderer.subscribe<A>(to:on:componentType:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of RealityRenderer.lighting.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of RealityRenderer.activeCamera.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of RealityRenderer.cameraSettings.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeOutput.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of RealityRenderer.extendedDynamicRangeHeadroom.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of RealityRenderer.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 664))();
}

uint64_t dispatch thunk of RealityRenderer.update(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of RealityRenderer.updateAndRender(deltaTime:cameraOutput:whenScheduled:onComplete:actionsBeforeRender:actionsAfterRender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of RealityRenderer.cameraRenderingSettings.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of RealityRenderer.updateAndRender(deltaTime:cameraRenderingOutput:scheduled:completed:actionsBeforeRender:actionsAfterRender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

ValueMetadata *type metadata accessor for RealityRenderer.EntityCollection()
{
  return &type metadata for RealityRenderer.EntityCollection;
}

uint64_t initializeBufferWithCopyOfBuffer for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

void destroy for RealityRenderer.CameraSettings(uint64_t a1)
{

}

uint64_t assignWithCopy for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for RealityRenderer.CameraSettings(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings()
{
  return &type metadata for RealityRenderer.CameraSettings;
}

void **assignWithCopy for RealityRenderer.CameraSettings.ColorBackground(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for RealityRenderer.CameraSettings.ColorBackground(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings.ColorBackground()
{
  return &type metadata for RealityRenderer.CameraSettings.ColorBackground;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput()
{
  return &type metadata for RealityRenderer.CameraOutput;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput.RelativeViewport()
{
  return &type metadata for RealityRenderer.CameraOutput.RelativeViewport;
}

uint64_t destroy for RealityRenderer.CameraOutput()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for RealityRenderer.CameraOutput(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraOutput(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraOutput(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput.Descriptor()
{
  return &type metadata for RealityRenderer.CameraOutput.Descriptor;
}

ValueMetadata *type metadata accessor for RealityRenderer.ImageBasedLight()
{
  return &type metadata for RealityRenderer.ImageBasedLight;
}

_QWORD *initializeBufferWithCopyOfBuffer for RealityRenderer.MetalEventAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for RealityRenderer.MetalEventAction()
{
  return swift_unknownObjectRelease();
}

_QWORD *assignWithCopy for RealityRenderer.MetalEventAction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

_QWORD *assignWithTake for RealityRenderer.MetalEventAction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for RealityRenderer.MetalEventAction()
{
  return &type metadata for RealityRenderer.MetalEventAction;
}

uint64_t initializeBufferWithCopyOfBuffer for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = v4;

  return a1;
}

uint64_t assignWithTake for CameraRenderingSettings(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraSettings(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraSettings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings()
{
  return &type metadata for CameraRenderingSettings;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.CameraSettings.ColorBackground(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraSettings.ColorBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings.ColorBackground()
{
  return &type metadata for CameraRenderingSettings.ColorBackground;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput()
{
  return &type metadata for CameraRenderingOutput;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput.RelativeViewport()
{
  return &type metadata for CameraRenderingOutput.RelativeViewport;
}

uint64_t destroy for CameraRenderingOutput.Descriptor()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for CameraRenderingOutput(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CameraRenderingOutput(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CameraRenderingOutput(_OWORD *a1, _OWORD *a2)
{
  swift_bridgeObjectRelease();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CameraRenderingOutput.Descriptor()
{
  return &type metadata for CameraRenderingOutput.Descriptor;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraOutput._proto_Layout_v1()
{
  return &type metadata for RealityRenderer.CameraOutput._proto_Layout_v1;
}

ValueMetadata *type metadata accessor for CameraRenderingSettings.ColorBackground.Value()
{
  return &type metadata for CameraRenderingSettings.ColorBackground.Value;
}

void **initializeBufferWithCopyOfBuffer for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for RealityRenderer.CameraSettings.ColorBackground.Value(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for CameraRenderingSettings.ColorBackground.Value(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CameraRenderingSettings.ColorBackground.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for RealityRenderer.CameraSettings.ColorBackground.Value(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RealityRenderer.CameraSettings.ColorBackground.Value()
{
  return &type metadata for RealityRenderer.CameraSettings.ColorBackground.Value;
}

uint64_t destroy for RealityRenderer.RenderContext(_QWORD *a1)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[5])
    swift_release();
  if (a1[7])
    swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RealityRenderer.RenderContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  v10 = *(_QWORD *)(a2 + 56);
  if (v10)
  {
    v11 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  v12 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RealityRenderer.RenderContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)a1;
  v5 = *a2;
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    }
    else
    {
      outlined destroy of RealityRenderer.CameraOutput(a1);
      v6 = *((_BYTE *)a2 + 32);
      v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_BYTE *)(a1 + 32) = v6;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *(_OWORD *)a2;
    v9 = *((_OWORD *)a2 + 1);
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
  }
  v10 = a2[5];
  if (*(_QWORD *)(a1 + 40))
  {
    if (v10)
    {
      v11 = a2[6];
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v11;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v10)
  {
    v12 = a2[6];
    *(_QWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 48) = v12;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
LABEL_15:
  v13 = a2[7];
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v13)
    {
      v15 = a2[8];
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v15;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    goto LABEL_22;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_21;
  }
  v14 = a2[8];
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain();
  swift_release();
LABEL_22:
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  return a1;
}

uint64_t outlined destroy of RealityRenderer.CameraOutput(uint64_t a1)
{
  destroy for RealityRenderer.CameraOutput(a1, &type metadata for RealityRenderer.CameraOutput);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RealityRenderer.RenderContext(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1)
  {
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of RealityRenderer.CameraOutput(a1);
  }
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40))
  {
    if (v5)
    {
      v6 = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v6;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v5)
  {
    v7 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v5;
    *(_QWORD *)(a1 + 48) = v7;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_13:
  v8 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v8)
    {
      v10 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v8;
      *(_QWORD *)(a1 + 64) = v10;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_20;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_19;
  }
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  swift_release();
LABEL_20:
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for RealityRenderer.RenderContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.RenderContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for RealityRenderer.RenderContext()
{
  return &unk_24DFA3938;
}

uint64_t storeEnumTagSinglePayload for CameraRenderingOutput.InitError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA628E0 + 4 * byte_21BE57F45[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA62900 + 4 * byte_21BE57F4A[v4]))();
}

_BYTE *sub_21BA628E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA62900(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA62908(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA62910(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA62918(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA62920(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for CameraRenderingOutput.InitError()
{
  return &unk_24DFA39E0;
}

void *type metadata accessor for RealityRenderer.UpdateAndRenderError()
{
  return &unk_24DFA3A70;
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraOutput._proto_Layout_v1(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA62998 + 4 * byte_21BE57F54[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA629CC + 4 * byte_21BE57F4F[v4]))();
}

uint64_t sub_21BA629CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA629D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA629DCLL);
  return result;
}

uint64_t sub_21BA629E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA629F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA629F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA629FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for RealityRenderer.InitError()
{
  return &unk_24DFA3B00;
}

uint64_t storeEnumTagSinglePayload for RealityRenderer.CameraOutput.InitError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21BA62A64 + 4 * byte_21BE57F5E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21BA62A98 + 4 * byte_21BE57F59[v4]))();
}

uint64_t sub_21BA62A98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA62AA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA62AA8);
  return result;
}

uint64_t sub_21BA62AB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA62ABCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21BA62AC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA62AC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for RealityRenderer.CameraOutput.InitError()
{
  return &unk_24DFA3B90;
}

uint64_t partial apply for closure #2 in RealityRenderer.doRenderCallback()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RealityRenderer.doRenderCallback()(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t partial apply for closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:)(uint64_t a1)
{
  _QWORD *v1;

  return closure #1 in RERenderFrameWorkload.addScheduledHandler(handler:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t objectdestroy_39Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RERenderFrameWorkload.addCompletedHandler(handler:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t outlined copy of RealityRenderer.CameraOutput?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t partial apply for closure #1 in __RERenderGraphEmitter.setup(mgr:)()
{
  return closure #1 in __RERenderGraphEmitter.setup(mgr:)();
}

uint64_t sub_21BA62CE8()
{
  return swift_deallocObject();
}

BOOL static __RKEntityActionGroup.Ordering.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void __RKEntityActionGroup.Ordering.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int __RKEntityActionGroup.Ordering.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static __RKEntityActionGroup.infiniteLoopCount.getter()
{
  return 0;
}

uint64_t static __RKEntityActionGroup.noLoopCount.getter()
{
  return 1;
}

uint64_t key path setter for __RKEntityActionGroup.actions : __RKEntityActionGroup(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 112) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityActionGroup.actions.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityActionGroup.ordering.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 120);
  return result;
}

uint64_t __RKEntityActionGroup.loopCount.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 128);
}

uint64_t __RKEntityActionGroup.__allocating_init(actions:ordering:loopCount:)(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  char v7;

  v7 = a4 & 1;
  swift_allocObject();
  return __RKEntityActionGroup.init(actions:ordering:loopCount:)(a1, a2, a3, v7);
}

uint64_t __RKEntityActionGroup.init(actions:ordering:loopCount:)(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a2;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 112) = a1;
  *(_BYTE *)(v4 + 120) = v5;
  if ((a4 & 1) != 0)
    a3 = 1;
  *(_QWORD *)(v4 + 128) = a3;
  v7 = __RKEntityAction.init(targetEntity:)(0);
  swift_retain();
  v8 = __RKEntityActionGroup.collapseRedundantGroups()();
  swift_beginAccess();
  *(_QWORD *)(v7 + 112) = v8;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((*(_BYTE *)(v7 + 120) & 1) != 0)
  {
    swift_release();
  }
  else
  {
    v9 = __RKEntityActionGroup.reorderConcurrentActions()();
    swift_release();
    *(_QWORD *)(v7 + 112) = v9;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t __RKEntityActionGroup.collapseRedundantGroups()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  if (v1 >> 62)
  {
LABEL_36:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (result)
      goto LABEL_3;
LABEL_37:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_37;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    while (1)
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x220769770](v4, v1);
      else
        swift_retain();
      type metadata accessor for __RKEntityActionGroup();
      v6 = swift_dynamicCastClass();
      v7 = swift_retain();
      if (!v6)
      {
        MEMORY[0x220768F0C](v7);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_10;
      }
      v8 = __RKEntityActionGroup.allActions()();
      if (v8 >> 62)
        v9 = _CocoaArrayWrapper.endIndex.getter();
      else
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      if (v9 == 1)
      {
        swift_beginAccess();
        if (*(_QWORD *)(v6 + 128) == 1)
        {
          v10 = __RKEntityActionGroup.allActions()();
          if (v10 >> 62)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
LABEL_21:
              if ((v10 & 0xC000000000000001) != 0)
              {
                MEMORY[0x220769770](0, v10);
              }
              else
              {
                if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  __break(1u);
                  goto LABEL_36;
                }
                swift_retain();
              }
              swift_bridgeObjectRelease();
              v11 = swift_retain();
              MEMORY[0x220768F0C](v11);
              if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              swift_release();
              goto LABEL_9;
            }
          }
          else if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_21;
          }
          swift_bridgeObjectRelease();
        }
      }
      v5 = swift_retain();
      MEMORY[0x220768F0C](v5);
      if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
LABEL_9:
      swift_release();
LABEL_10:
      ++v4;
      swift_release();
      if (v2 == v4)
      {
        swift_bridgeObjectRelease();
        return v12;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.reorderConcurrentActions()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v8 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
    if (result)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_20;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    return result;
  }
  v4 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v6 = MEMORY[0x220769770](v4, v1);
    }
    else
    {
      v6 = *(_QWORD *)(v1 + 8 * v4 + 32);
      swift_retain();
    }
    if (((*(uint64_t (**)(void))(*(_QWORD *)v6 + 488))() & 1) == 0)
    {
      v5 = swift_retain();
      MEMORY[0x220768F0C](v5);
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_8;
    }
    if (v8 >> 62)
      break;
    swift_retain();
LABEL_15:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v6);
LABEL_8:
    ++v4;
    swift_release();
    if (v2 == v4)
      goto LABEL_18;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v7 & 0x8000000000000000) == 0)
    goto LABEL_15;
  __break(1u);
LABEL_18:
  swift_bridgeObjectRelease();
  return v8;
}

Swift::Void __swiftcall __RKEntityActionGroup.preloadAssets()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2)
    goto LABEL_10;
LABEL_3:
  if (v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0)
      {
        v4 = MEMORY[0x220769770](i, v1);
      }
      else
      {
        v4 = *(_QWORD *)(v1 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(void))(*(_QWORD *)v4 + 400))();
      swift_release();
    }
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t __RKEntityActionGroup.checkForCompletion(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;

  v2 = v1;
  if (*(_BYTE *)(v1 + 152) == 1)
  {
    *(_QWORD *)(v1 + 136) = 0;
    *(_QWORD *)(v1 + 144) = 0;
    swift_beginAccess();
    v3 = *(_QWORD *)(v1 + 96);
    v4 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 2;
    *(_BYTE *)(v1 + 104) = 1;
    v41 = v3;
    v42 = v4;
    result = __RKEntityAction.state.didset((uint64_t)&v41);
    *(_BYTE *)(v1 + 152) = 0;
    return result;
  }
  v6 = *a1;
  v7 = a1[1];
  v8 = (uint64_t *)(v1 + 112);
  v9 = *(_QWORD *)(v1 + 136);
  result = swift_beginAccess();
  v10 = *(_QWORD *)(v1 + 112);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v28 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v9 != v28)
      return result;
  }
  else if (v9 != *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  v11 = *(_QWORD *)(v2 + 144);
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v29)
      goto LABEL_19;
    return result;
  }
  *(_QWORD *)(v2 + 144) = v12;
  swift_beginAccess();
  v13 = *(_QWORD *)(v2 + 128);
  v15 = v13 > 1 && v12 < v13;
  if (v13 && !v15)
  {
    *(_QWORD *)(v2 + 144) = 0;
    swift_beginAccess();
    v16 = *(_QWORD *)(v2 + 96);
    v17 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 2;
    *(_BYTE *)(v2 + 104) = 1;
    v39 = v16;
    v40 = v17;
    v18 = &v39;
    return __RKEntityAction.state.didset((uint64_t)v18);
  }
  swift_beginAccess();
  v19 = *(_QWORD *)(v2 + 96);
  v20 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 1;
  v39 = v19;
  v40 = v20;
  __RKEntityAction.state.didset((uint64_t)&v39);
  result = swift_beginAccess();
  if ((*(_BYTE *)(v2 + 120) & 1) == 0)
  {
    *(_QWORD *)(v2 + 136) = 0;
    if ((*(_BYTE *)(v2 + 152) & 1) != 0)
      return result;
    v21 = *v8;
    v36 = (uint64_t *)(v2 + 112);
    if ((unint64_t)*v8 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v22 = result;
      if (!result)
        goto LABEL_36;
    }
    else
    {
      v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (!v22)
        goto LABEL_36;
    }
    if (v22 < 1)
    {
      __break(1u);
      goto LABEL_47;
    }
    v23 = 0;
    do
    {
      if ((v21 & 0xC000000000000001) != 0)
      {
        v24 = MEMORY[0x220769770](v23, v21);
      }
      else
      {
        v24 = *(_QWORD *)(v21 + 8 * v23 + 32);
        swift_retain();
      }
      ++v23;
      v25 = swift_allocObject();
      swift_weakInit();
      v26 = (_QWORD *)swift_allocObject();
      v26[2] = v25;
      v26[3] = v6;
      v26[4] = v7;
      v27 = *(_QWORD *)(v24 + 48);
      *(_QWORD *)(v24 + 48) = closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)partial apply;
      *(_QWORD *)(v24 + 56) = v26;
      swift_retain();
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?(v27);
      swift_release();
    }
    while (v22 != v23);
LABEL_36:
    swift_bridgeObjectRelease();
    v30 = *v36;
    if ((unint64_t)*v36 >> 62)
    {
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v31 = result;
      if (result)
      {
LABEL_38:
        if (v31 >= 1)
        {
          v32 = 0;
          do
          {
            if ((v30 & 0xC000000000000001) != 0)
            {
              v33 = MEMORY[0x220769770](v32, v30);
            }
            else
            {
              v33 = *(_QWORD *)(v30 + 8 * v32 + 32);
              swift_retain();
            }
            ++v32;
            v37 = v6;
            v38 = v7;
            (*(void (**)(uint64_t *))(*(_QWORD *)v33 + 408))(&v37);
            swift_release();
          }
          while (v31 != v32);
          goto LABEL_45;
        }
LABEL_47:
        __break(1u);
        return result;
      }
    }
    else
    {
      v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain();
      if (v31)
        goto LABEL_38;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    v34 = *(_QWORD *)(v2 + 96);
    v35 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 1;
    *(_BYTE *)(v2 + 104) = 1;
    v37 = v34;
    LOBYTE(v38) = v35;
    v18 = &v37;
    return __RKEntityAction.state.didset((uint64_t)v18);
  }
  if ((unint64_t)*v8 >> 62)
    goto LABEL_33;
  if (*(_QWORD *)((*v8 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    *(_QWORD *)(v2 + 136) = 0;
    v37 = v6;
    v38 = v7;
    return __RKEntityActionGroup.performSequentialAction(at:context:)(0, &v37);
  }
  return result;
}

uint64_t closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9[2];

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v6 = *(_QWORD *)(result + 136);
    v7 = __OFADD__(v6, 1);
    v8 = v6 + 1;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(result + 136) = v8;
      v9[0] = a2;
      v9[1] = a3;
      __RKEntityActionGroup.checkForCompletion(with:)(v9);
      return swift_release();
    }
  }
  return result;
}

uint64_t __RKEntityActionGroup.performSequentialAction(at:context:)(unint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  os_log_type_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = *a2;
  v5 = a2[1];
  v26 = 91;
  v27 = 0xE100000000000000;
  v24 = 0;
  v25 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8285;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  swift_release();
  if ((*(_BYTE *)(v2 + 152) & 1) != 0)
  {
    v26 = 91;
    v27 = 0xE100000000000000;
    v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v26);
    return swift_bridgeObjectRelease();
  }
  result = swift_beginAccess();
  v12 = *(_QWORD *)(v2 + 112);
  if ((v12 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v13 = (_QWORD *)MEMORY[0x220769770](a1, v12);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) <= a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v13 = *(_QWORD **)(v12 + 8 * a1 + 32);
  swift_retain();
LABEL_7:
  v14 = swift_allocObject();
  swift_weakInit();
  v15 = (_QWORD *)swift_allocObject();
  v15[2] = v14;
  v15[3] = 91;
  v15[4] = 0xE100000000000000;
  v15[5] = v4;
  v15[6] = v5;
  v16 = v13[6];
  v13[6] = partial apply for closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:);
  v13[7] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v17 = outlined consume of (@escaping @callee_guaranteed () -> ())?(v16);
  MEMORY[0x24BDAC7A8](v17);
  v21[2] = a1;
  v21[3] = v13;
  v24 = 91;
  v25 = 0xE100000000000000;
  v18 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v18, &v24, partial apply for implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:), v21);
  swift_bridgeObjectRelease();
  v24 = v4;
  v25 = v5;
  (*(void (**)(uint64_t *))(*v13 + 408))(&v24);
  swift_beginAccess();
  v19 = *(_QWORD *)(v2 + 96);
  v20 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = 1;
  *(_BYTE *)(v2 + 104) = 1;
  v22 = v19;
  v23 = v20;
  __RKEntityAction.state.didset((uint64_t)&v22);
  return swift_release();
}

void closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[3];

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v21[0] = a2;
    v21[1] = a3;
    v16 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v16, v21);
    return;
  }
  v10 = Strong;
  v11 = *(_QWORD *)(Strong + 136);
  v12 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12 < v17)
      goto LABEL_5;
LABEL_9:
    v19 = a2;
    v20 = a3;
    v18 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v18, &v19);
    v19 = a4;
    v20 = a5;
    __RKEntityActionGroup.checkForCompletion(with:)(&v19);
    goto LABEL_10;
  }
  *(_QWORD *)(Strong + 136) = v12;
  swift_beginAccess();
  v13 = *(_QWORD *)(v10 + 112);
  if (v13 >> 62)
    goto LABEL_8;
  if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_9;
LABEL_5:
  v19 = a2;
  v20 = a3;
  v14 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v14, &v19, partial apply for implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:), v10);
  v15 = *(_QWORD *)(v10 + 136);
  v19 = a4;
  v20 = a5;
  __RKEntityActionGroup.performSequentialAction(at:context:)(v15, &v19);
LABEL_10:
  swift_release();
}

uint64_t implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(60);
  v0._object = (void *)0x800000021BE84350;
  v0._countAndFlagsBits = 0xD00000000000003ALL;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)(uint64_t a1, uint64_t a2)
{
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  _StringGuts.grow(_:)(37);
  v3._object = (void *)0x800000021BE84330;
  v3._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 440))();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t __RKEntityActionGroup.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  os_log_type_t v12;
  os_log_type_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v42[3];

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v42[0] = 91;
  v42[1] = 0xE100000000000000;
  v40 = 0;
  v41 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v9 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v9, v42, partial apply for implicit closure #1 in __RKEntityActionGroup.perform(with:), v1);
  *(_BYTE *)(v1 + 152) = 0;
  v10 = (unint64_t *)(v1 + 112);
  swift_beginAccess();
  if (!(*v10 >> 62))
  {
    if (*(_QWORD *)((*v10 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_17:
    v40 = 91;
    v41 = 0xE100000000000000;
    v23 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v23, &v40);
    swift_beginAccess();
    v24 = *(_QWORD *)(v2 + 96);
    v25 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 2;
    *(_BYTE *)(v2 + 104) = 1;
    v36 = v24;
    LOBYTE(v37) = v25;
    __RKEntityAction.state.didset((uint64_t)&v36);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22)
    goto LABEL_17;
LABEL_3:
  swift_beginAccess();
  if ((*(_BYTE *)(v2 + 120) & 1) != 0)
  {
    v11 = *v10;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v26)
        goto LABEL_6;
    }
    else if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v36 = 91;
      v37 = 0xE100000000000000;
      v12 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v12, &v36);
      *(_QWORD *)(v2 + 136) = 0;
      v36 = v3;
      v37 = v4;
      __RKEntityActionGroup.performSequentialAction(at:context:)(0, &v36);
LABEL_31:
      v38 = 91;
      v39 = 0xE100000000000000;
      v34 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v34, &v38);
      swift_bridgeObjectRelease();
      return 1;
    }
    v36 = 91;
    v37 = 0xE100000000000000;
    v27 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v27, &v36);
    goto LABEL_31;
  }
  v36 = 91;
  v37 = 0xE100000000000000;
  v13 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v13, &v36);
  *(_QWORD *)(v2 + 136) = 0;
  if ((*(_BYTE *)(v2 + 152) & 1) != 0)
    goto LABEL_31;
  v14 = *v10;
  v35 = (uint64_t *)(v2 + 112);
  if (*v10 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v15 = result;
    if (!result)
      goto LABEL_21;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v15)
      goto LABEL_21;
  }
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v17 = 0;
  do
  {
    if ((v14 & 0xC000000000000001) != 0)
    {
      v18 = MEMORY[0x220769770](v17, v14);
    }
    else
    {
      v18 = *(_QWORD *)(v14 + 8 * v17 + 32);
      swift_retain();
    }
    ++v17;
    v19 = swift_allocObject();
    swift_weakInit();
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = v19;
    v20[3] = v3;
    v20[4] = v4;
    v21 = *(_QWORD *)(v18 + 48);
    *(_QWORD *)(v18 + 48) = partial apply for closure #1 in __RKEntityActionGroup.performConcurrentActions(with:);
    *(_QWORD *)(v18 + 56) = v20;
    swift_retain();
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v21);
    swift_release();
  }
  while (v15 != v17);
LABEL_21:
  swift_bridgeObjectRelease();
  v28 = *v35;
  if (!((unint64_t)*v35 >> 62))
  {
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v29)
      goto LABEL_23;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v32 = *(_QWORD *)(v2 + 96);
    v33 = *(_BYTE *)(v2 + 104);
    *(_QWORD *)(v2 + 96) = 1;
    *(_BYTE *)(v2 + 104) = 1;
    v38 = v32;
    LOBYTE(v39) = v33;
    __RKEntityAction.state.didset((uint64_t)&v38);
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v29 = result;
  if (!result)
    goto LABEL_30;
LABEL_23:
  if (v29 >= 1)
  {
    v30 = 0;
    do
    {
      if ((v28 & 0xC000000000000001) != 0)
      {
        v31 = MEMORY[0x220769770](v30, v28);
      }
      else
      {
        v31 = *(_QWORD *)(v28 + 8 * v30 + 32);
        swift_retain();
      }
      ++v30;
      v36 = v3;
      v37 = v4;
      (*(void (**)(uint64_t *))(*(_QWORD *)v31 + 408))(&v36);
      swift_release();
    }
    while (v29 != v30);
    goto LABEL_30;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in __RKEntityActionGroup.perform(with:)(uint64_t a1)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(19);
  v2._countAndFlagsBits = 0x736E6961746E6F43;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  swift_beginAccess();
  if (*(_QWORD *)(a1 + 112) >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x736E6F6974636120;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t partial apply for implicit closure #1 in __RKEntityActionGroup.perform(with:)()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityActionGroup.perform(with:)(v0);
}

uint64_t __RKEntityActionGroup.allActions()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 112);
  if (v1 >> 62)
    goto LABEL_33;
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v2)
  {
    v3 = 0;
    v13 = v1;
    v14 = v1 & 0xC000000000000001;
    v12 = v1 & 0xFFFFFFFFFFFFFF8;
    while (v14)
    {
      MEMORY[0x220769770](v3, v1);
      v4 = __OFADD__(v3++, 1);
      if (v4)
        goto LABEL_30;
LABEL_12:
      type metadata accessor for __RKEntityActionGroup();
      v5 = swift_dynamicCastClass();
      v6 = swift_retain();
      if (!v5)
      {
        MEMORY[0x220768F0C](v6);
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_5;
      }
      v7 = __RKEntityActionGroup.allActions()(v6);
      if (v7 >> 62)
      {
        v8 = _CocoaArrayWrapper.endIndex.getter();
        if (v8)
        {
LABEL_15:
          if (v8 < 1)
            goto LABEL_31;
          v9 = 0;
          do
          {
            if ((v7 & 0xC000000000000001) != 0)
              MEMORY[0x220769770](v9, v7);
            else
              swift_retain();
            v10 = swift_retain();
            MEMORY[0x220768F0C](v10);
            if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            ++v9;
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_release();
          }
          while (v8 != v9);
        }
      }
      else
      {
        v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v8)
          goto LABEL_15;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v1 = v13;
LABEL_5:
      swift_release();
      if (v3 == v2)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    if (v3 >= *(_QWORD *)(v12 + 16))
      goto LABEL_32;
    swift_retain();
    v4 = __OFADD__(v3++, 1);
    if (!v4)
      goto LABEL_12;
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x24BEE4AF8];
}

Swift::Bool __swiftcall __RKEntityActionGroup.runningExclusiveAndBlocksForCompletion()()
{
  uint64_t v0;
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v13;

  v1 = (_BYTE *)v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 112);
  if (v2 >> 62)
    goto LABEL_27;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  LOBYTE(v4) = swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    LOBYTE(v4) = 0;
    return v4;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v6 = MEMORY[0x220769770](0, v2);
    v5 = v6;
    goto LABEL_6;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v5 = *(_QWORD *)(v2 + 32);
    v6 = swift_retain();
LABEL_6:
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v6) & 1) != 0)
    {
LABEL_23:
      swift_bridgeObjectRelease();
      swift_release();
      LOBYTE(v4) = 1;
      return v4;
    }
    v7 = 0;
    v8 = v1 + 89;
    v1 += 90;
    v9 = v3 - 1;
    while (1)
    {
      swift_beginAccess();
      v10 = *(_QWORD *)(v5 + 96);
      v11 = *(unsigned __int8 *)(v5 + 104);
      swift_release();
      if (v11 == 1 && v10 == 1)
      {
        swift_beginAccess();
        if (*v8 == 1)
        {
          swift_beginAccess();
          if (*v1 == 1)
          {
            swift_bridgeObjectRelease();
            LOBYTE(v4) = 1;
            return v4;
          }
        }
      }
      if (v9 == v7)
        goto LABEL_28;
      v13 = v7 + 1;
      if ((v2 & 0xC000000000000001) != 0)
      {
        v5 = MEMORY[0x220769770](v7 + 1, v2);
        if (__OFADD__(v13, 1))
          goto LABEL_25;
      }
      else
      {
        if (v13 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_26;
        v5 = *(_QWORD *)(v2 + 8 * v7 + 40);
        swift_retain();
        if (__OFADD__(v13, 1))
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          swift_bridgeObjectRetain();
          v4 = _CocoaArrayWrapper.endIndex.getter();
          v3 = v4;
          if (!v4)
            goto LABEL_28;
          goto LABEL_3;
        }
      }
      ++v7;
      if (((*(uint64_t (**)(void))(*(_QWORD *)v5 + 328))() & 1) != 0)
        goto LABEL_23;
    }
  }
  __break(1u);
  return v4;
}

unint64_t __RKEntityActionGroup.isExclusiveWith(action:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (v1 == a1)
    return 0;
  v2 = a1;
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 89) == 1)
  {
    swift_beginAccess();
    if ((*(_BYTE *)(v2 + 89) & 1) != 0)
      return 1;
  }
  result = __RKEntityActionGroup.allActions()();
  v5 = result;
  if (result >> 62)
    goto LABEL_44;
  v6 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_45:
    v3 = 0;
LABEL_46:
    swift_bridgeObjectRelease();
    return v3;
  }
LABEL_7:
  v7 = 0;
  v8 = v5 & 0xC000000000000001;
  v9 = v5 & 0xFFFFFFFFFFFFFF8;
  v24 = v6;
  v25 = v5 + 32;
  v22 = v5 & 0xFFFFFFFFFFFFFF8;
  v23 = v5 & 0xC000000000000001;
  v26 = v5;
  v27 = v2;
  while (v8)
  {
    v11 = MEMORY[0x220769770](v7, v5);
    v12 = __OFADD__(v7++, 1);
    if (v12)
      goto LABEL_43;
LABEL_16:
    type metadata accessor for __RKEntityActionGroup();
    if (swift_dynamicCastClass())
    {
      swift_retain();
      result = __RKEntityActionGroup.allActions()();
      v13 = result;
      if (result >> 62)
      {
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
        if (v14)
        {
LABEL_19:
          if ((v13 & 0xC000000000000001) != 0)
          {
            v15 = MEMORY[0x220769770](0, v13);
          }
          else
          {
            if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_49;
            v15 = *(_QWORD *)(v13 + 32);
            swift_retain();
          }
          v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 456);
          v17 = v16(v15);
          swift_release();
          if ((v17 & 1) != 0)
          {
LABEL_39:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            v3 = 1;
            goto LABEL_46;
          }
          v18 = 0;
          v5 = v13 & 0xFFFFFFFFFFFFFF8;
          v2 = v14 - 1;
          while (1)
          {
            if (v2 == v18)
            {
              swift_release();
              v5 = v26;
              v2 = v27;
              v8 = v23;
              v6 = v24;
              v9 = v22;
              goto LABEL_36;
            }
            v19 = v18 + 1;
            if ((v13 & 0xC000000000000001) != 0)
            {
              v20 = MEMORY[0x220769770](v18 + 1, v13);
              if (__OFADD__(v19, 1))
                goto LABEL_41;
            }
            else
            {
              if (v19 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_42;
              v20 = *(_QWORD *)(v13 + 8 * v18 + 40);
              swift_retain();
              if (__OFADD__(v19, 1))
              {
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
LABEL_43:
                __break(1u);
LABEL_44:
                result = _CocoaArrayWrapper.endIndex.getter();
                v6 = result;
                if (!result)
                  goto LABEL_45;
                goto LABEL_7;
              }
            }
            v21 = v16(v20);
            swift_release();
            ++v18;
            if ((v21 & 1) != 0)
              goto LABEL_39;
          }
        }
      }
      else
      {
        v14 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v14)
          goto LABEL_19;
      }
      swift_release();
LABEL_36:
      swift_bridgeObjectRelease();
      result = swift_release();
    }
    else
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 456))(v2);
      result = swift_release();
      if ((v10 & 1) != 0)
      {
        v3 = 1;
        goto LABEL_46;
      }
    }
    if (v7 == v6)
      goto LABEL_45;
  }
  if (v7 < *(_QWORD *)(v9 + 16))
  {
    v11 = *(_QWORD *)(v25 + 8 * v7);
    swift_retain();
    v12 = __OFADD__(v7++, 1);
    if (v12)
      goto LABEL_43;
    goto LABEL_16;
  }
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.reversed()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v11[24];
  uint64_t v12;

  v1 = v0;
  v12 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 112);
  if (v2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    v7 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  while (!__OFSUB__(v3--, 1))
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      v5 = MEMORY[0x220769770](v3, v2);
LABEL_12:
      if ((*(uint64_t (**)(void))(*(_QWORD *)v5 + 432))())
      {
        v6 = swift_retain();
        MEMORY[0x220768F0C](v6);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
      if (!v3)
        goto LABEL_16;
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v3 < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v5 = *(_QWORD *)(v2 + 32 + 8 * v3);
        swift_retain();
        goto LABEL_12;
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
        goto LABEL_21;
    }
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease();
  v7 = v12;
LABEL_17:
  swift_beginAccess();
  v11[0] = *(_BYTE *)(v1 + 120);
  type metadata accessor for __RKEntityActionGroup();
  swift_allocObject();
  v8 = __RKEntityActionGroup.init(actions:ordering:loopCount:)(v7, v11, 1, 0);
  swift_beginAccess();
  v9 = *(_BYTE *)(v1 + 89);
  swift_beginAccess();
  *(_BYTE *)(v8 + 89) = v9;
  return v8;
}

Swift::Bool __swiftcall __RKEntityActionGroup.stop()()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[6];

  v14[0] = 91;
  v14[1] = 0xE100000000000000;
  v14[4] = 0;
  v14[5] = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 8285;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_release();
  v5 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v14);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 152) = 1;
  swift_beginAccess();
  v6 = *(_QWORD *)(v0 + 112);
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    v7 = v8;
    if (!v8)
      goto LABEL_10;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    LOBYTE(v8) = swift_bridgeObjectRetain();
    if (!v7)
      goto LABEL_10;
  }
  if (v7 < 1)
  {
    __break(1u);
    return v8;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0)
    {
      v10 = MEMORY[0x220769770](i, v6);
      v12 = v10;
    }
    else
    {
      v12 = *(_QWORD *)(v6 + 8 * i + 32);
      v10 = swift_retain();
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 448))(v10, v11);
    swift_release();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  LOBYTE(v8) = 1;
  return v8;
}

uint64_t __RKEntityActionGroup.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;

  _StringGuts.grow(_:)(34);
  v1._object = (void *)0x800000021BE84230;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 5975337;
  v2._object = (void *)0xE300000000000000;
  String.append(_:)(v2);
  swift_beginAccess();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0x28202D205DLL;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  v4 = (uint64_t *)(v0 + 112);
  swift_beginAccess();
  v5 = *(_QWORD *)(v0 + 112);
  if (v5 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6 >= 1)
  {
    while (1)
    {
      v7._countAndFlagsBits = 5966090;
      v7._object = (void *)0xE300000000000000;
      String.append(_:)(v7);
      v8 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
        break;
      if (*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v9 = *(_QWORD *)(v8 + 32);
        v10 = swift_retain();
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6 < 1)
        goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    v9 = MEMORY[0x220769770](0, v8);
    v10 = swift_bridgeObjectRelease();
LABEL_6:
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 440))(v10);
    v13 = v12;
    swift_release();
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = v6 - 1;
    if (v6 != 1)
    {
      v19 = 0;
      do
      {
        v20._countAndFlagsBits = 592428;
        v20._object = (void *)0xE300000000000000;
        String.append(_:)(v20);
        v21 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          v22 = MEMORY[0x220769770](v19 + 1, v21);
          v23 = swift_bridgeObjectRelease();
        }
        else
        {
          if ((unint64_t)(v19 + 1) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_16;
          v22 = *(_QWORD *)(v21 + 8 * v19 + 40);
          v23 = swift_retain();
        }
        v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 440))(v23);
        v26 = v25;
        swift_release();
        v27._countAndFlagsBits = v24;
        v27._object = v26;
        String.append(_:)(v27);
        swift_bridgeObjectRelease();
        ++v19;
      }
      while (v15 != v19);
    }
    v16._countAndFlagsBits = 679177;
    v16._object = (void *)0xE300000000000000;
    String.append(_:)(v16);
  }
LABEL_8:
  v17._countAndFlagsBits = 665865;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t __RKEntityActionGroup.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[4];
  uint64_t v15;

  v2 = v1;
  v15 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 112);
  if (!(v4 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
LABEL_16:
    swift_beginAccess();
    v13 = *(_BYTE *)(v2 + 120);
    swift_beginAccess();
    v11 = *(_QWORD *)(v2 + 128);
    v12 = type metadata accessor for __RKEntityActionGroup();
    swift_allocObject();
    result = __RKEntityActionGroup.init(actions:ordering:loopCount:)(v10, &v13, v11, 0);
    a1[3] = v12;
    *a1 = result;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    goto LABEL_15;
LABEL_3:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
      {
        v8 = MEMORY[0x220769770](i, v4);
      }
      else
      {
        v8 = *(_QWORD *)(v4 + 8 * i + 32);
        swift_retain();
      }
      (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)v8 + 464))(v14, 0);
      type metadata accessor for __RKEntityAction();
      if (swift_dynamicCast())
      {
        v9 = swift_retain();
        MEMORY[0x220768F0C](v9);
        if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
    }
    swift_bridgeObjectRelease();
    v10 = v15;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t __RKEntityActionGroup.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v16;
  uint64_t v17;

  v17 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 112);
  if (v3 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (!v4)
      goto LABEL_19;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v4)
      goto LABEL_19;
  }
  v5 = 0;
  while (2)
  {
    v6 = v5;
    while (1)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v7 = MEMORY[0x220769770](v6, v3);
        v5 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_20;
      }
      else
      {
        if (v6 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_21;
        v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
        swift_retain();
        v5 = v6 + 1;
        if (__OFADD__(v6, 1))
        {
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
      }
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 472))(a1, a2);
      v10 = v9;
      if (v8)
      {
        v11 = swift_retain();
        MEMORY[0x220768F0C](v11);
        if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      swift_release();
      if ((v10 & 1) != 0)
        break;
      ++v6;
      if (v5 == v4)
        goto LABEL_19;
    }
    if (v5 != v4)
      continue;
    break;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v16 = *(_BYTE *)(v2 + 120);
  swift_beginAccess();
  v12 = *(_QWORD *)(v2 + 128);
  type metadata accessor for __RKEntityActionGroup();
  swift_allocObject();
  return __RKEntityActionGroup.init(actions:ordering:loopCount:)(v17, &v16, v12, 0);
}

void __RKEntityActionGroup.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityActionGroup.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityActionGroup.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityActionGroup.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityActionGroup.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_21BA65B60()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)()
{
  uint64_t *v0;

  return closure #1 in __RKEntityActionGroup.performConcurrentActions(with:)(v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for __RKEntityActionGroup()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering;
  if (!lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityActionGroup.Ordering, &type metadata for __RKEntityActionGroup.Ordering);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityActionGroup.Ordering and conformance __RKEntityActionGroup.Ordering);
  }
  return result;
}

uint64_t sub_21BA65BFC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 112);
  return swift_bridgeObjectRetain();
}

uint64_t sub_21BA65C48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 120);
  return result;
}

uint64_t sub_21BA65C8C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 120) = v2;
  return result;
}

uint64_t sub_21BA65CCC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 128);
  return result;
}

uint64_t sub_21BA65D10(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 128) = v2;
  return result;
}

uint64_t method lookup function for __RKEntityActionGroup()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityActionGroup.actions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.ordering.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.loopCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of __RKEntityActionGroup.__allocating_init(actions:ordering:loopCount:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v4 + 712))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of __RKEntityActionGroup.allActions()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t storeEnumTagSinglePayload for __RKEntityActionGroup.Ordering(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA65DE4 + 4 * byte_21BE58765[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA65E18 + 4 * byte_21BE58760[v4]))();
}

uint64_t sub_21BA65E18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA65E20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA65E28);
  return result;
}

uint64_t sub_21BA65E34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA65E3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA65E40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA65E48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityActionGroup.Ordering()
{
  return &type metadata for __RKEntityActionGroup.Ordering;
}

uint64_t sub_21BA65E68()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  uint64_t *v0;

  closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t partial apply for implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  uint64_t v0;

  return implicit closure #2 in __RKEntityActionGroup.performSequentialAction(at:context:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)()
{
  return implicit closure #1 in closure #1 in __RKEntityActionGroup.performSequentialAction(at:context:)();
}

void PhysicsBodyComponent.mode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *PhysicsBodyComponent.mode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*PhysicsBodyComponent.mode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PhysicsBodyComponent.massProperties.getter@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  float result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(float *)(v1 + 16);
  v3 = *(_OWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 48);
  v5 = *(_OWORD *)(v1 + 64);
  *(float *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  return result;
}

float PhysicsBodyComponent.massProperties.setter(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  result = *(float *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 32);
  v5 = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v1 + 16) = *(_DWORD *)a1;
  *(_OWORD *)(v1 + 32) = v3;
  *(_OWORD *)(v1 + 48) = v4;
  *(_OWORD *)(v1 + 64) = v5;
  return result;
}

uint64_t (*PhysicsBodyComponent.massProperties.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.material.getter()
{
  return swift_retain();
}

uint64_t PhysicsBodyComponent.material.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*PhysicsBodyComponent.material.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isTranslationLocked.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;

  if (v0[90])
    v1 = 0x10000;
  else
    v1 = 0;
  if (v0[89])
    v2 = 256;
  else
    v2 = 0;
  return v2 | v0[88] | v1;
}

uint64_t PhysicsBodyComponent.isTranslationLocked.setter(uint64_t result, char a2, char a3)
{
  _BYTE *v3;

  v3[88] = result;
  v3[89] = a2;
  v3[90] = a3;
  return result;
}

uint64_t (*PhysicsBodyComponent.isTranslationLocked.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isRotationLocked.getter()
{
  unsigned __int8 *v0;
  int v1;
  int v2;

  if (v0[93])
    v1 = 0x10000;
  else
    v1 = 0;
  if (v0[92])
    v2 = 256;
  else
    v2 = 0;
  return v2 | v0[91] | v1;
}

uint64_t PhysicsBodyComponent.isRotationLocked.setter(uint64_t result, char a2, char a3)
{
  _BYTE *v3;

  v3[91] = result;
  v3[92] = a2;
  v3[93] = a3;
  return result;
}

uint64_t (*PhysicsBodyComponent.isRotationLocked.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 94);
}

uint64_t PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 94) = result;
  return result;
}

uint64_t (*PhysicsBodyComponent.isContinuousCollisionDetectionEnabled.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsBodyComponent.linearDamping.setter(float a1)
{
  uint64_t v1;

  if (a1 < 0.0)
    a1 = 0.0;
  *(float *)(v1 + 164) = a1;
}

void PhysicsBodyComponent.angularDamping.setter(float a1)
{
  uint64_t v1;

  if (a1 < 0.0)
    a1 = 0.0;
  *(float *)(v1 + 168) = a1;
}

double PhysicsBodyComponent.init()@<D0>(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (one-time initialization token for default != -1)
    swift_once();
  v2 = static PhysicsMassProperties.default;
  v11 = xmmword_2551AE3D0;
  v12 = xmmword_2551AE3C0;
  v10 = xmmword_2551AE3E0;
  if (one-time initialization token for default != -1)
    swift_once();
  v3 = static PhysicsMaterialResource.default;
  swift_retain();
  v4 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22076FDD0](*(_QWORD *)(v4 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    v6 = 0.0;
    if (v5 < 0.0)
      v7 = 0.0;
    else
      v7 = v5;
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    if (v8 >= 0.0)
      v6 = v8;
  }
  else
  {
    v6 = 0.25;
    v7 = 0.02;
  }
  *(_BYTE *)a1 = 2;
  *(_DWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v11;
  *(_OWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 80) = v3;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 1;
  *(float *)(a1 + 164) = v7;
  *(float *)(a1 + 168) = v6;
  return result;
}

uint64_t PhysicsBodyComponent.init(massProperties:material:mode:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t result;
  float v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = *a1;
  v17 = *((_OWORD *)a1 + 2);
  v18 = *((_OWORD *)a1 + 1);
  v16 = *((_OWORD *)a1 + 3);
  v7 = *a3;
  if (one-time initialization token for default != -1)
    swift_once();
  if (one-time initialization token for default == -1)
  {
    if (a2)
    {
LABEL_5:
      v8 = a2;
      goto LABEL_8;
    }
  }
  else
  {
    swift_once();
    if (a2)
      goto LABEL_5;
  }
  v8 = static PhysicsMaterialResource.default;
  swift_retain();
LABEL_8:
  swift_retain();
  v9 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22076FDD0](*(_QWORD *)(v9 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v10 < 0.0)
      v11 = 0.0;
    else
      v11 = v10;
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    v13 = v12;
    result = swift_release();
    if (v13 < 0.0)
      v15 = 0.0;
    else
      v15 = v13;
  }
  else
  {
    result = swift_release();
    v15 = 0.25;
    v11 = 0.02;
  }
  *(_BYTE *)a4 = v7;
  *(_DWORD *)(a4 + 16) = v6;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v17;
  *(_OWORD *)(a4 + 64) = v16;
  *(_QWORD *)(a4 + 80) = v8;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_QWORD *)(a4 + 152) = 0;
  *(_BYTE *)(a4 + 160) = 1;
  *(float *)(a4 + 164) = v11;
  *(float *)(a4 + 168) = v15;
  return result;
}

uint64_t PhysicsBodyComponent.init(shapes:density:material:mode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  char v9;
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t Compound;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  char v55;
  __int128 v56;
  __int128 v57;
  char v58;
  _QWORD v59[2];
  int v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  char v78;
  uint64_t v79;

  v9 = *a3;
  result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (!result)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)(v11 - 0x1000000000000000) >> 61 == 7)
    {
      result = swift_slowAlloc();
      if ((unint64_t)(v11 - 0x400000000000000) >> 59 == 31)
      {
        v12 = (_QWORD *)result;
        result = swift_slowAlloc();
        if ((v11 & 0x8000000000000000) == 0)
        {
          v13 = result;
          v55 = v9;
          if (v11)
          {
            if ((a1 & 0xC000000000000001) != 0)
            {
              v14 = 0;
              v15 = (_OWORD *)(result + 16);
              do
              {
                v16 = *(_QWORD *)(MEMORY[0x220769770](v14, a1) + 16);
                swift_unknownObjectRelease();
                v12[v14] = v16;
                v17 = MEMORY[0x220769770](v14, a1);
                v56 = *(_OWORD *)(v17 + 48);
                v57 = *(_OWORD *)(v17 + 32);
                swift_unknownObjectRelease();
                *(v15 - 1) = v57;
                *v15 = v56;
                v15 += 2;
                ++v14;
              }
              while (v11 != v14);
            }
            else
            {
              v18 = (uint64_t *)(a1 + 32);
              v19 = (_OWORD *)(result + 16);
              v20 = v12;
              v21 = v11;
              do
              {
                v22 = *v18++;
                *v20++ = *(_QWORD *)(v22 + 16);
                v23 = *(_OWORD *)(v22 + 48);
                *(v19 - 1) = *(_OWORD *)(v22 + 32);
                *v19 = v23;
                v19 += 2;
                --v21;
              }
              while (v21);
            }
          }
          v24 = specialized static __ServiceLocator.shared.getter() + 120;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v24, (uint64_t)v59);
          v25 = v61;
          v26 = v62;
          __swift_project_boxed_opaque_existential_1(v59, v61);
          (*(void (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
          Compound = REAssetManagerCollisionShapeAssetCreateCompound();
          type metadata accessor for ShapeResource();
          v28 = swift_allocObject();
          *(_QWORD *)(v28 + 16) = Compound;
          REPoseIdentity();
          *(_OWORD *)(v28 + 32) = v29;
          *(_OWORD *)(v28 + 48) = v30;
          RERetain();
          REAssetSetSwiftObject();
          RERelease();
          MEMORY[0x220772F44](v13, -1, -1);
          MEMORY[0x220772F44](v12, -1, -1);
          swift_bridgeObjectRelease();
          v9 = v55;
          goto LABEL_16;
        }
LABEL_27:
        __break(1u);
        return result;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
LABEL_16:
  v58 = v9;
  swift_retain();
  v31 = swift_retain();
  PhysicsBodyComponent.init(shape:density:material:mode:)(v31, a2, &v58, MEMORY[0x24BE22968], (uint64_t)v59, a5);
  v32 = v60;
  v33 = v62;
  v34 = v63;
  v35 = v64;
  v36 = v65;
  v37 = v66;
  v38 = v67;
  v39 = v68;
  v40 = v69;
  v41 = v70;
  v42 = v71;
  v43 = v72;
  v44 = v73;
  v45 = v74;
  v46 = v75;
  v47 = v76;
  v48 = v77;
  v49 = v78;
  *(_BYTE *)a4 = v59[0];
  *(_DWORD *)(a4 + 16) = v32;
  *(_OWORD *)(a4 + 32) = v33;
  *(_OWORD *)(a4 + 48) = v34;
  *(_OWORD *)(a4 + 64) = v35;
  *(_QWORD *)(a4 + 80) = v36;
  *(_BYTE *)(a4 + 88) = v37;
  *(_BYTE *)(a4 + 89) = v38;
  *(_BYTE *)(a4 + 90) = v39;
  *(_BYTE *)(a4 + 91) = v40;
  *(_BYTE *)(a4 + 92) = v41;
  *(_BYTE *)(a4 + 93) = v42;
  *(_BYTE *)(a4 + 94) = v43;
  *(_BYTE *)(a4 + 95) = v44;
  *(_OWORD *)(a4 + 96) = v45;
  *(_OWORD *)(a4 + 112) = v46;
  *(_OWORD *)(a4 + 128) = v47;
  *(_OWORD *)(a4 + 144) = v48;
  *(_BYTE *)(a4 + 160) = v49;
  *(_QWORD *)(a4 + 164) = v79;
  v50 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22076FDD0](*(_QWORD *)(v50 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v51 < 0.0)
      v51 = 0.0;
    *(float *)(a4 + 164) = v51;
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    v53 = v52;
    swift_release();
    result = swift_release();
    if (v53 < 0.0)
      v54 = 0.0;
    else
      v54 = v53;
    *(float *)(a4 + 168) = v54;
  }
  else
  {
    swift_release();
    return swift_release();
  }
  return result;
}

double PhysicsBodyComponent.init(shape:mass:material:mode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  return PhysicsBodyComponent.init(shape:density:material:mode:)(a1, a2, a3, MEMORY[0x24BE22970], a4, a5);
}

double PhysicsBodyComponent.init(shape:density:material:mode:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void (*a4)(_OWORD *__return_ptr, uint64_t, float)@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  float v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[3];
  int v25;

  v11 = *a3;
  if (one-time initialization token for default != -1)
    swift_once();
  if (one-time initialization token for default != -1)
    swift_once();
  v12 = *(_QWORD *)(a1 + 16);
  swift_retain();
  a4(v24, v12, a6);
  v22 = v24[1];
  v23 = v24[0];
  v21 = v24[2];
  v13 = v25;
  if (one-time initialization token for identity == -1)
  {
    if (a2)
    {
LABEL_7:
      v14 = a2;
      goto LABEL_10;
    }
  }
  else
  {
    swift_once();
    if (a2)
      goto LABEL_7;
  }
  v14 = static PhysicsMaterialResource.default;
  swift_retain();
LABEL_10:
  swift_retain();
  swift_release();
  v15 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  if (MEMORY[0x22076FDD0](*(_QWORD *)(v15 + 16)))
  {
    REPhysicsSimulationServiceGetDefaultInitialLinearDamping();
    if (v16 < 0.0)
      v17 = 0.0;
    else
      v17 = v16;
    REPhysicsSimulationServiceGetDefaultInitialAngularDamping();
    v19 = v18;
    swift_release();
    if (v19 < 0.0)
      v19 = 0.0;
  }
  else
  {
    swift_release();
    v19 = 0.25;
    v17 = 0.02;
  }
  swift_release();
  *(_BYTE *)a5 = v11;
  *(_DWORD *)(a5 + 16) = v13;
  *(_OWORD *)(a5 + 32) = v21;
  *(_OWORD *)(a5 + 48) = v23;
  *(_OWORD *)(a5 + 64) = v22;
  *(_QWORD *)(a5 + 80) = v14;
  result = 0.0;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_QWORD *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 160) = 1;
  *(float *)(a5 + 164) = v17;
  *(float *)(a5 + 168) = v19;
  return result;
}

uint64_t PhysicsBodyComponent.init(shapes:mass:material:mode:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _OWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t Compound;
  __int128 v29;
  __int128 v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  char v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  unsigned __int8 v72;
  uint64_t v73;

  v9 = *a3;
  result = specialized static ShapeResource.findShapeResource(_:)(a1);
  if (result)
  {
    v11 = result;
    swift_bridgeObjectRelease();
LABEL_16:
    v52 = v9;
    PhysicsBodyComponent.init(shape:density:material:mode:)(v11, a2, &v52, MEMORY[0x24BE22970], (uint64_t)v53, a5);
    v31 = v54;
    v32 = v56;
    v33 = v57;
    v34 = v58;
    v35 = v59;
    v36 = v60;
    v37 = v61;
    v38 = v62;
    v39 = v63;
    v40 = v64;
    v41 = v65;
    v42 = v66;
    v43 = v67;
    v44 = v68;
    v45 = v69;
    v46 = v70;
    v47 = v71;
    result = v72;
    v48 = v73;
    *(_BYTE *)a4 = v53[0];
    *(_DWORD *)(a4 + 16) = v31;
    *(_OWORD *)(a4 + 32) = v32;
    *(_OWORD *)(a4 + 48) = v33;
    *(_OWORD *)(a4 + 64) = v34;
    *(_QWORD *)(a4 + 80) = v35;
    *(_BYTE *)(a4 + 88) = v36;
    *(_BYTE *)(a4 + 89) = v37;
    *(_BYTE *)(a4 + 90) = v38;
    *(_BYTE *)(a4 + 91) = v39;
    *(_BYTE *)(a4 + 92) = v40;
    *(_BYTE *)(a4 + 93) = v41;
    *(_BYTE *)(a4 + 94) = v42;
    *(_BYTE *)(a4 + 95) = v43;
    *(_OWORD *)(a4 + 96) = v44;
    *(_OWORD *)(a4 + 112) = v45;
    *(_OWORD *)(a4 + 128) = v46;
    *(_OWORD *)(a4 + 144) = v47;
    *(_BYTE *)(a4 + 160) = result;
    *(_QWORD *)(a4 + 164) = v48;
    return result;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)(v12 - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_19;
  }
  result = swift_slowAlloc();
  if ((unint64_t)(v12 - 0x400000000000000) >> 59 != 31)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = (_QWORD *)result;
  result = swift_slowAlloc();
  if ((v12 & 0x8000000000000000) == 0)
  {
    v14 = result;
    v49 = a2;
    if (v12)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v15 = 0;
        v16 = (_OWORD *)(result + 16);
        do
        {
          v17 = *(_QWORD *)(MEMORY[0x220769770](v15, a1) + 16);
          swift_unknownObjectRelease();
          v13[v15] = v17;
          v18 = MEMORY[0x220769770](v15, a1);
          v50 = *(_OWORD *)(v18 + 48);
          v51 = *(_OWORD *)(v18 + 32);
          swift_unknownObjectRelease();
          *(v16 - 1) = v51;
          *v16 = v50;
          v16 += 2;
          ++v15;
        }
        while (v12 != v15);
      }
      else
      {
        v19 = (uint64_t *)(a1 + 32);
        v20 = (_OWORD *)(result + 16);
        v21 = v13;
        v22 = v12;
        do
        {
          v23 = *v19++;
          *v21++ = *(_QWORD *)(v23 + 16);
          v24 = *(_OWORD *)(v23 + 48);
          *(v20 - 1) = *(_OWORD *)(v23 + 32);
          *v20 = v24;
          v20 += 2;
          --v22;
        }
        while (v22);
      }
    }
    v25 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v25, (uint64_t)v53);
    v26 = v55;
    v27 = v56;
    __swift_project_boxed_opaque_existential_1(v53, v55);
    (*(void (**)(uint64_t, uint64_t))(v27 + 32))(v26, v27);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    Compound = REAssetManagerCollisionShapeAssetCreateCompound();
    type metadata accessor for ShapeResource();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = Compound;
    REPoseIdentity();
    *(_OWORD *)(v11 + 32) = v29;
    *(_OWORD *)(v11 + 48) = v30;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    MEMORY[0x220772F44](v14, -1, -1);
    MEMORY[0x220772F44](v13, -1, -1);
    swift_bridgeObjectRelease();
    a2 = v49;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t PhysicsBodyComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int MotionType;
  char v3;
  uint64_t Material;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  char LockTranslationY;
  char LockTranslationZ;
  char LockRotationX;
  char LockRotationY;
  char LockRotationZ;
  char CCDEnabled;
  char GravityEnabled;
  float v18;
  float v19;
  uint64_t result;
  float v21;
  char LockTranslationX;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;

  if (one-time initialization token for default != -1)
    swift_once();
  if (one-time initialization token for default != -1)
    swift_once();
  swift_retain();
  MotionType = RERigidBodyComponentGetMotionType();
  if (MotionType >= 3)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v3 = MotionType;
  RERigidBodyComponentGetMassFrame();
  if (one-time initialization token for identity != -1)
    swift_once();
  Material = RERigidBodyComponentGetMaterial();
  v23 = v3;
  if (!Material)
  {
    v7 = static PhysicsMaterialResource.default;
    swift_retain();
    goto LABEL_14;
  }
  v5 = Material;
  if ((id)REAssetGetSwiftObject())
  {
    type metadata accessor for PhysicsMaterialResource();
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v7 = v6;
LABEL_14:
      swift_release();
      goto LABEL_15;
    }
  }
  type metadata accessor for PhysicsMaterialResource();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 32) = v5;
  REPhysicsMaterialAssetGetStaticFriction();
  *(_DWORD *)(v7 + 16) = v8;
  REPhysicsMaterialAssetGetDynamicFriction();
  *(_DWORD *)(v7 + 20) = v9;
  REPhysicsMaterialAssetGetRestitution();
  *(_DWORD *)(v7 + 24) = v10;
  RERetain();
  REAssetSetSwiftObject();
  swift_release();
  swift_unknownObjectRelease();
LABEL_15:
  LockTranslationX = RERigidBodyComponentGetLockTranslationX();
  LockTranslationY = RERigidBodyComponentGetLockTranslationY();
  LockTranslationZ = RERigidBodyComponentGetLockTranslationZ();
  LockRotationX = RERigidBodyComponentGetLockRotationX();
  LockRotationY = RERigidBodyComponentGetLockRotationY();
  LockRotationZ = RERigidBodyComponentGetLockRotationZ();
  CCDEnabled = RERigidBodyComponentGetCCDEnabled();
  GravityEnabled = RERigidBodyComponentGetGravityEnabled();
  RERigidBodyComponentGetLinearDamping();
  RERigidBodyComponentGetAngularDamping();
  RERigidBodyComponentGetLinearDamping();
  if (v18 < 0.0)
    v19 = 0.0;
  else
    v19 = v18;
  result = RERigidBodyComponentGetAngularDamping();
  *(_BYTE *)a1 = v23;
  if (v21 < 0.0)
    v21 = 0.0;
  *(_DWORD *)(a1 + 16) = v27;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v24;
  *(_OWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 88) = LockTranslationX;
  *(_BYTE *)(a1 + 89) = LockTranslationY;
  *(_BYTE *)(a1 + 90) = LockTranslationZ;
  *(_BYTE *)(a1 + 91) = LockRotationX;
  *(_BYTE *)(a1 + 92) = LockRotationY;
  *(_BYTE *)(a1 + 93) = LockRotationZ;
  *(_BYTE *)(a1 + 94) = CCDEnabled;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 111) = 0u;
  *(_OWORD *)(a1 + 127) = 0u;
  *(_OWORD *)(a1 + 143) = 0u;
  *(_BYTE *)(a1 + 159) = 0;
  *(_BYTE *)(a1 + 160) = GravityEnabled;
  *(float *)(a1 + 164) = v19;
  *(float *)(a1 + 168) = v21;
  return result;
}

uint64_t static PhysicsBodyComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return PhysicsBodyComponent.init(_:)(a1);
}

uint64_t PhysicsBodyComponent.__toCore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_BYTE *)(v0 + 95);
  RERigidBodyComponentSetMotionType();
  REMakeMassFrame();
  RERigidBodyComponentSetMassFrame();
  if (!*(_QWORD *)(v1 + 32) || !REAssetHandleIsLoaded())
  {
    v3 = v2;
    v4 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v4, (uint64_t)&v9);
    v5 = *((_QWORD *)&v10 + 1);
    v6 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    v7 = REAssetManagerPhysicsMaterialAssetCreate2();
    if (!v7)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    *(_QWORD *)(v1 + 32) = v7;
    v2 = v3;
  }
  RERigidBodyComponentSetMaterial();
  RERigidBodyComponentSetLockTranslationX();
  RERigidBodyComponentSetLockTranslationY();
  RERigidBodyComponentSetLockTranslationZ();
  RERigidBodyComponentSetLockRotationX();
  RERigidBodyComponentSetLockRotationY();
  RERigidBodyComponentSetLockRotationZ();
  RERigidBodyComponentSetCCDEnabled();
  RERigidBodyComponentSetCCDVelocityThreshold();
  RERigidBodyComponentSetCanSleep();
  RERigidBodyComponentSetGravityEnabled();
  RERigidBodyComponentSetLinearDamping();
  RERigidBodyComponentSetAngularDamping();
  RERigidBodyComponentAddUserForce();
  RERigidBodyComponentAddUserTorque();
  RERigidBodyComponentAddUserLinearImpulse();
  RERigidBodyComponentAddUserAngularImpulse();
  if ((v2 & 1) != 0)
    RERigidBodyComponentTeleport();
  return RENetworkMarkComponentDirty();
}

void static PhysicsBodyComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 22;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PhysicsBodyComponent@<X0>(uint64_t a1@<X8>)
{
  return PhysicsBodyComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsBodyComponent(_DWORD *a1@<X8>)
{
  *a1 = 22;
}

uint64_t PhysicsBodyComponent.isAffectedByGravity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsBodyComponent.isAffectedByGravity.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 160) = result;
  return result;
}

_BYTE *(*PhysicsBodyComponent.isAffectedByGravity.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 160);
  return PhysicsBodyComponent.isAffectedByGravity.modify;
}

_BYTE *PhysicsBodyComponent.isAffectedByGravity.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 160) = result[8];
  return result;
}

float PhysicsBodyComponent.linearDamping.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 164);
}

float *(*PhysicsBodyComponent.linearDamping.modify(uint64_t a1))(float *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 164);
  return PhysicsBodyComponent.linearDamping.modify;
}

float *PhysicsBodyComponent.linearDamping.modify(float *result)
{
  float v1;

  v1 = result[2];
  if (v1 < 0.0)
    v1 = 0.0;
  *(float *)(*(_QWORD *)result + 164) = v1;
  return result;
}

float PhysicsBodyComponent.angularDamping.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 168);
}

float *(*PhysicsBodyComponent.angularDamping.modify(uint64_t a1))(float *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(v1 + 168);
  return PhysicsBodyComponent.angularDamping.modify;
}

float *PhysicsBodyComponent.angularDamping.modify(float *result)
{
  float v1;

  v1 = result[2];
  if (v1 < 0.0)
    v1 = 0.0;
  *(float *)(*(_QWORD *)result + 168) = v1;
  return result;
}

uint64_t PhysicsBodyComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  int v58;
  int v59;

  v38 = a1;
  v37 = type metadata accessor for Mirror.AncestorRepresentation();
  v36 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v1;
  v6 = *((_DWORD *)v1 + 4);
  v7 = *((_OWORD *)v1 + 3);
  v31 = *((_OWORD *)v1 + 2);
  v30 = v7;
  v29 = *((_OWORD *)v1 + 4);
  v8 = *((_QWORD *)v1 + 10);
  v33 = v1[88];
  v9 = v1[89];
  v32 = v1[90];
  v10 = v1[91];
  v11 = v1[92];
  v12 = v1[93];
  v13 = v1[94];
  LOBYTE(v4) = v1[95];
  v14 = *((_OWORD *)v1 + 6);
  v15 = *((_OWORD *)v1 + 7);
  v16 = *((_OWORD *)v1 + 8);
  v17 = *((_OWORD *)v1 + 9);
  v18 = v1[160];
  v19 = *((_DWORD *)v1 + 41);
  v20 = *((_DWORD *)v1 + 42);
  v39 = v5;
  v40 = v6;
  v41 = v31;
  v42 = v7;
  v43 = v29;
  v44 = v8;
  v45 = v33;
  v46 = v9;
  v47 = v32;
  v48 = v10;
  v49 = v11;
  v50 = v12;
  v51 = v13;
  v52 = v4;
  v53 = v14;
  v54 = v15;
  v55 = v16;
  v56 = v17;
  v57 = v18;
  v58 = v19;
  v59 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21BE58850;
  strcpy((char *)(v21 + 32), "massProperties");
  *(_BYTE *)(v21 + 47) = -18;
  *(_QWORD *)(v21 + 72) = &type metadata for PhysicsMassProperties;
  v22 = swift_allocObject();
  *(_QWORD *)(v21 + 48) = v22;
  *(_DWORD *)(v22 + 16) = v6;
  v23 = v30;
  *(_OWORD *)(v22 + 32) = v31;
  *(_OWORD *)(v22 + 48) = v23;
  *(_OWORD *)(v22 + 64) = v29;
  *(_QWORD *)(v21 + 80) = 0x6C6169726574616DLL;
  *(_QWORD *)(v21 + 88) = 0xE800000000000000;
  v24 = type metadata accessor for PhysicsMaterialResource();
  *(_QWORD *)(v21 + 96) = v8;
  *(_QWORD *)(v21 + 120) = v24;
  *(_QWORD *)(v21 + 128) = 1701080941;
  *(_QWORD *)(v21 + 136) = 0xE400000000000000;
  *(_BYTE *)(v21 + 144) = v5;
  *(_QWORD *)(v21 + 168) = &type metadata for PhysicsBodyMode;
  *(_QWORD *)(v21 + 176) = 0xD000000000000025;
  *(_QWORD *)(v21 + 184) = 0x800000021BE84400;
  v25 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v21 + 192) = v13;
  *(_QWORD *)(v21 + 216) = v25;
  *(_QWORD *)(v21 + 224) = 0xD000000000000010;
  *(_QWORD *)(v21 + 232) = 0x800000021BE84430;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (x: Bool, y: Bool, z: Bool));
  *(_BYTE *)(v21 + 240) = v10;
  *(_BYTE *)(v21 + 241) = v11;
  *(_BYTE *)(v21 + 242) = v12;
  *(_QWORD *)(v21 + 264) = v26;
  *(_QWORD *)(v21 + 272) = 0xD000000000000013;
  *(_QWORD *)(v21 + 280) = 0x800000021BE84450;
  *(_BYTE *)(v21 + 288) = v33;
  *(_BYTE *)(v21 + 289) = v9;
  *(_BYTE *)(v21 + 290) = v32;
  *(_QWORD *)(v21 + 312) = v26;
  *(_QWORD *)(v21 + 320) = 0xD000000000000013;
  *(_QWORD *)(v21 + 328) = 0x800000021BE84470;
  *(_BYTE *)(v21 + 336) = v18;
  *(_QWORD *)(v21 + 360) = v25;
  strcpy((char *)(v21 + 368), "angularDamping");
  *(_BYTE *)(v21 + 383) = -18;
  *(_QWORD *)(v21 + 408) = MEMORY[0x24BEE14E8];
  *(_DWORD *)(v21 + 384) = v20;
  v27 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v35, *MEMORY[0x24BEE43C0], v37);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static PhysicsBodyComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD v26[4];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _DWORD v30[4];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*a1 != *a2)
    return 0;
  v2 = a1[88];
  v3 = a1[89];
  v4 = a1[90];
  v5 = a1[91];
  v6 = a1[92];
  v7 = a1[93];
  v8 = a1[94];
  v21 = a2[88];
  v22 = a2[89];
  v23 = a2[90];
  v24 = a2[91];
  v25 = a2[92];
  v9 = a2[93];
  v10 = a2[94];
  v12 = *((_OWORD *)a2 + 3);
  v11 = *((_OWORD *)a2 + 4);
  v13 = *((_OWORD *)a2 + 2);
  v14 = *((_DWORD *)a2 + 4);
  v16 = *((_OWORD *)a1 + 3);
  v15 = *((_OWORD *)a1 + 4);
  v17 = *((_OWORD *)a1 + 2);
  v30[0] = *((_DWORD *)a1 + 4);
  v31 = v17;
  v32 = v16;
  v33 = v15;
  v26[0] = v14;
  v27 = v13;
  v28 = v12;
  v29 = v11;
  if (!specialized static PhysicsMassProperties.== infix(_:_:)((uint64_t)v30, (uint64_t)v26))
    return 0;
  v20 = v8;
  v18 = PhysicsMaterialResource.coreAsset.getter();
  return (v18 == PhysicsMaterialResource.coreAsset.getter()) & ~(v2 ^ v21) & (v3 ^ v22 ^ 1) & ~(v4 ^ v23) & ~(v5 ^ v24) & ~(v6 ^ v25) & ~(v7 ^ v9) & (v20 ^ v10 ^ 1u);
}

uint64_t sub_21BA678CC()
{
  return swift_deallocObject();
}

uint64_t sub_21BA678DC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 160);
  return result;
}

_BYTE *sub_21BA678E8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = *result;
  return result;
}

float sub_21BA678F4@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 164);
  *a2 = result;
  return result;
}

float *sub_21BA67900(float *result, uint64_t a2)
{
  float v2;

  v2 = *result;
  if (*result < 0.0)
    v2 = 0.0;
  *(float *)(a2 + 164) = v2;
  return result;
}

float sub_21BA67918@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 168);
  *a2 = result;
  return result;
}

float *sub_21BA67924(float *result, uint64_t a2)
{
  float v2;

  v2 = *result;
  if (*result < 0.0)
    v2 = 0.0;
  *(float *)(a2 + 168) = v2;
  return result;
}

uint64_t destroy for PhysicsBodyComponent()
{
  return swift_release();
}

uint64_t initializeWithCopy for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int16 v5;
  __int128 v6;
  __int128 v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  v5 = *(_WORD *)(a2 + 91);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_WORD *)(a1 + 91) = v5;
  *(_WORD *)(a1 + 94) = *(_WORD *)(a2 + 94);
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 95) = *(_BYTE *)(a2 + 95);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  return a1;
}

__n128 __swift_memcpy172_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_OWORD *)(a1 + 156) = *(__int128 *)((char *)a2 + 156);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for PhysicsBodyComponent(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_release();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  *(_BYTE *)(a1 + 91) = *(_BYTE *)(a2 + 91);
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  *(_BYTE *)(a1 + 93) = *(_BYTE *)(a2 + 93);
  *(_BYTE *)(a1 + 94) = *(_BYTE *)(a2 + 94);
  *(_BYTE *)(a1 + 95) = *(_BYTE *)(a2 + 95);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsBodyComponent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 172))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsBodyComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 172) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 172) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsBodyComponent()
{
  return &type metadata for PhysicsBodyComponent;
}

RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional __swiftcall EmphasizeAction.EmphasisAnimationStyle.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional)rawValue;
}

RealityFoundation::EmphasizeAction::EmphasisAnimationStyle_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EmphasizeAction.EmphasisAnimationStyle(Swift::Int *a1)
{
  return EmphasizeAction.EmphasisAnimationStyle.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction.EmphasisAnimationStyle()
{
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction.EmphasisAnimationStyle()
{
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
  return RawRepresentable<>.encode(to:)();
}

RealityFoundation::EmphasizeAction::EmphasisMotionType_optional __swiftcall EmphasizeAction.EmphasisMotionType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 8;
  if ((unint64_t)rawValue < 8)
    v2 = rawValue;
  *v1 = v2;
  return (RealityFoundation::EmphasizeAction::EmphasisMotionType_optional)rawValue;
}

uint64_t EmphasizeAction.EmphasisMotionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

RealityFoundation::EmphasizeAction::EmphasisMotionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance EmphasizeAction.EmphasisMotionType(Swift::Int *a1)
{
  return EmphasizeAction.EmphasisMotionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EmphasizeAction.EmphasisMotionType(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction.EmphasisMotionType()
{
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction.EmphasisMotionType()
{
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
  return RawRepresentable<>.encode(to:)();
}

void EmphasizeAction.motionType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *EmphasizeAction.motionType.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*EmphasizeAction.motionType.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void EmphasizeAction.style.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *EmphasizeAction.style.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*EmphasizeAction.style.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

ValueMetadata *EmphasizeAction.animatedValueType.getter()
{
  return &type metadata for Transform;
}

uint64_t EmphasizeAction.isAdditive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t EmphasizeAction.isAdditive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*EmphasizeAction.isAdditive.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::EmphasizeAction __swiftcall EmphasizeAction.init(motionType:style:isAdditive:)(RealityFoundation::EmphasizeAction::EmphasisMotionType motionType, RealityFoundation::EmphasizeAction::EmphasisAnimationStyle style, Swift::Bool isAdditive)
{
  _BYTE *v3;
  char v4;
  RealityFoundation::EmphasizeAction result;

  v4 = *(_BYTE *)style;
  *v3 = *(_BYTE *)motionType;
  v3[1] = v4;
  v3[2] = isAdditive;
  result.motionType = motionType;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance EmphasizeAction.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x656C797473;
  if (*v0 != 1)
    v1 = 0x6974696464417369;
  if (*v0)
    return v1;
  else
    return 0x79546E6F69746F6DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance EmphasizeAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized EmphasizeAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EmphasizeAction.CodingKeys()
{
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance EmphasizeAction.CodingKeys()
{
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t EmphasizeAction.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  _DWORD v11[3];
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<EmphasizeAction.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v11[2] = v1[2];
  v12 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v17 = v8;
  v16 = 0;
  lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v15 = v12;
    v14 = 1;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.CodingKeys, &unk_24DFA4488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.CodingKeys, &unk_24DFA4488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.CodingKeys, &unk_24DFA4488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.CodingKeys, &unk_24DFA4488);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisMotionType, &type metadata for EmphasizeAction.EmphasisMotionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisMotionType, &type metadata for EmphasizeAction.EmphasisMotionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisMotionType, &type metadata for EmphasizeAction.EmphasisMotionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisMotionType, &type metadata for EmphasizeAction.EmphasisMotionType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisAnimationStyle, &type metadata for EmphasizeAction.EmphasisAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisAnimationStyle, &type metadata for EmphasizeAction.EmphasisAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisAnimationStyle, &type metadata for EmphasizeAction.EmphasisAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle;
  if (!lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for EmphasizeAction.EmphasisAnimationStyle, &type metadata for EmphasizeAction.EmphasisAnimationStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle);
  }
  return result;
}

uint64_t EmphasizeAction.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<EmphasizeAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type EmphasizeAction.CodingKeys and conformance EmphasizeAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v17 = 0;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisMotionType and conformance EmphasizeAction.EmphasisMotionType();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v9 = v18;
    v15 = 1;
    lazy protocol witness table accessor for type EmphasizeAction.EmphasisAnimationStyle and conformance EmphasizeAction.EmphasisAnimationStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v16;
    v14 = 2;
    v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
    a2[2] = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.isAdditive.getter in conformance EmphasizeAction()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

ValueMetadata *protocol witness for EntityAction.animatedValueType.getter in conformance EmphasizeAction()
{
  return &type metadata for Transform;
}

uint64_t protocol witness for Decodable.init(from:) in conformance EmphasizeAction@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return EmphasizeAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance EmphasizeAction(_QWORD *a1)
{
  return EmphasizeAction.encode(to:)(a1);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EmphasizeAction(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for EmphasizeAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmphasizeAction()
{
  return &type metadata for EmphasizeAction;
}

ValueMetadata *type metadata accessor for EmphasizeAction.EmphasisAnimationStyle()
{
  return &type metadata for EmphasizeAction.EmphasisAnimationStyle;
}

uint64_t storeEnumTagSinglePayload for EmphasizeAction.EmphasisMotionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_21BA68650 + 4 * byte_21BE58915[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_21BA68684 + 4 * asc_21BE58910[v4]))();
}

uint64_t sub_21BA68684(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA6868C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA68694);
  return result;
}

uint64_t sub_21BA686A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA686A8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_21BA686AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA686B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmphasizeAction.EmphasisMotionType()
{
  return &type metadata for EmphasizeAction.EmphasisMotionType;
}

uint64_t storeEnumTagSinglePayload for EmphasizeAction.EmphasisAnimationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BA6871C + 4 * byte_21BE5891F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BA68750 + 4 * byte_21BE5891A[v4]))();
}

uint64_t sub_21BA68750(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA68758(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA68760);
  return result;
}

uint64_t sub_21BA6876C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA68774);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BA68778(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA68780(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for EmphasizeAction.CodingKeys()
{
  return &unk_24DFA4488;
}

uint64_t EmphasizeActionHandler.actionStarted(event:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  ValueMetadata *v24;

  v2 = *((_QWORD *)a1 + 2);
  if (v2)
  {
    v11 = *a1;
    v12 = v2;
    v20 = *(__int128 *)((char *)a1 + 136);
    v21 = *(__int128 *)((char *)a1 + 152);
    v22 = *(__int128 *)((char *)a1 + 168);
    v23 = *(__int128 *)((char *)a1 + 184);
    v16 = *(__int128 *)((char *)a1 + 72);
    v17 = *(__int128 *)((char *)a1 + 88);
    v18 = *(__int128 *)((char *)a1 + 104);
    v19 = *(__int128 *)((char *)a1 + 120);
    v13 = *(__int128 *)((char *)a1 + 24);
    v14 = *(__int128 *)((char *)a1 + 40);
    v15 = *(__int128 *)((char *)a1 + 56);
    swift_retain();
    specialized EmphasizeActionHandler.createTransformData(event:targetEntity:)((uint64_t)&v11);
    if (v3)
    {
      v4 = v3;
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)(v1 + 8) = v4;
      *(double *)v1 = 1.0 / (double)*(uint64_t *)(v4 + 16);
      return result;
    }
    *(_QWORD *)&v11 = 0;
    *((_QWORD *)&v11 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v8._countAndFlagsBits = 0x2072656C646E6148;
    v8._object = (void *)0xEC00000020726F66;
    String.append(_:)(v8);
    v24 = &type metadata for EmphasizeAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmphasizeAction.Type);
    v9._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0xD000000000000034;
    v10._object = (void *)0x800000021BE844F0;
    String.append(_:)(v10);
    specialized static AnimationLogger.logError(_:)(v11, *((_QWORD *)&v11 + 1));
    swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)&v11, "Handler for ");
    BYTE13(v11) = 0;
    HIWORD(v11) = -5120;
    v24 = &type metadata for EmphasizeAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmphasizeAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x800000021BE844C0;
    v7._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v7);
    specialized static AnimationLogger.logError(_:)(v11, *((_QWORD *)&v11 + 1));
  }
  return swift_bridgeObjectRelease();
}

uint64_t EmphasizeActionHandler.actionUpdated(event:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[6];
  _OWORD v35[6];
  uint64_t v36;
  _BYTE v37[16];
  double v38;
  char v39;

  v2 = *(_OWORD *)(a1 + 176);
  v35[4] = *(_OWORD *)(a1 + 160);
  v35[5] = v2;
  v36 = *(_QWORD *)(a1 + 192);
  v3 = *(_OWORD *)(a1 + 112);
  v35[0] = *(_OWORD *)(a1 + 96);
  v35[1] = v3;
  v4 = *(_OWORD *)(a1 + 144);
  v35[2] = *(_OWORD *)(a1 + 128);
  v35[3] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v34[2] = *(_OWORD *)(a1 + 32);
  v34[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v34[4] = *(_OWORD *)(a1 + 64);
  v34[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v34[0] = *(_OWORD *)a1;
  v34[1] = v7;
  outlined init with take of Transform?((uint64_t)v35, (uint64_t)v37, &demangling cache variable for type metadata for Double?);
  result = outlined init with take of Transform?((uint64_t)v37, (uint64_t)&v38, &demangling cache variable for type metadata for Double?);
  if ((v39 & 1) == 0)
  {
    v9 = v38;
    outlined retain of ActionEvent<EmphasizeAction>((uint64_t)v34);
    specialized ActionEvent.animationState.getter((uint64_t)&v28);
    outlined release of ActionEvent<EmphasizeAction>((uint64_t)v34);
    if (!*((_QWORD *)&v29 + 1))
      return outlined destroy of AnimationStateProtocol?((uint64_t)&v28);
    outlined init with take of BindableDataInternal(&v28, (uint64_t)v31);
    v10 = v9 / *(double *)v1;
    v11 = floor(v10);
    v12 = v11 + ceil(v10 - v11) + 0.5;
    if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
    {
      if (v12 > -9.22337204e18)
      {
        if (v12 < 9.22337204e18)
        {
          v13 = (uint64_t)v12;
          v14 = *(_QWORD *)(v1 + 8);
          v15 = *(_QWORD *)(v14 + 16);
          if (v15 > (uint64_t)v12)
          {
            if (v13)
            {
              if (!__OFSUB__(v13, 1))
              {
                if (v13 - 1 < (unint64_t)v15)
                {
                  if ((v13 & 0x8000000000000000) == 0)
                  {
                    RESRTLerp();
                    v26 = v16;
                    v27 = v17;
                    v25 = v18;
                    if (one-time initialization token for identity == -1)
                    {
LABEL_12:
                      v19 = v32;
                      v20 = v33;
                      __swift_project_boxed_opaque_existential_1(v31, v32);
                      v28 = v26;
                      v29 = v27;
                      v30 = v25;
LABEL_19:
                      (*(void (**)(__int128 *, ValueMetadata *, uint64_t, uint64_t))(v20 + 64))(&v28, &type metadata for Transform, v19, v20);
                      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
                    }
LABEL_28:
                    swift_once();
                    goto LABEL_12;
                  }
LABEL_27:
                  __break(1u);
                  goto LABEL_28;
                }
LABEL_26:
                __break(1u);
                goto LABEL_27;
              }
LABEL_25:
              __break(1u);
              goto LABEL_26;
            }
            v19 = v32;
            v20 = v33;
            result = (uint64_t)__swift_project_boxed_opaque_existential_1(v31, v32);
            if (!v15)
            {
              __break(1u);
              return result;
            }
            v22 = *(_OWORD *)(v14 + 32);
            v23 = *(_OWORD *)(v14 + 48);
            v24 = *(_OWORD *)(v14 + 64);
LABEL_18:
            v28 = v22;
            v29 = v23;
            v30 = v24;
            goto LABEL_19;
          }
          v19 = v32;
          v20 = v33;
          __swift_project_boxed_opaque_existential_1(v31, v32);
          if (v15)
          {
            v21 = (__int128 *)(v14 + 48 * v15);
            v22 = *(v21 - 1);
            v23 = *v21;
            v24 = v21[1];
            goto LABEL_18;
          }
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

uint64_t specialized ActionEvent.animationState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 192))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 184);
  if (*(_BYTE *)(v1 + 208))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 200);
  if (*(_BYTE *)(v1 + 176))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 168);
  outlined init with take of Transform?(v1 + 160, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 352))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 344);
  if (*(_BYTE *)(v1 + 368))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 360);
  if (*(_BYTE *)(v1 + 336))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 328);
  outlined init with take of Transform?(v1 + 320, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 256))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 248);
  if (*(_BYTE *)(v1 + 272))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 264);
  if (*(_BYTE *)(v1 + 240))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 232);
  outlined init with take of Transform?(v1 + 224, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 208))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 200);
  if (*(_BYTE *)(v1 + 224))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 216);
  if (*(_BYTE *)(v1 + 192))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 184);
  outlined init with take of Transform?(v1 + 176, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 88))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 80);
  if (*(_BYTE *)(v1 + 104))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 96);
  if (*(_BYTE *)(v1 + 72))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 64);
  outlined init with take of Transform?(v1 + 56, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t result;
  uint64_t v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_BYTE *)(v1 + 144))
    v3 = -1.0;
  else
    v3 = *(double *)(v1 + 136);
  if (*(_BYTE *)(v1 + 160))
    v4 = -1.0;
  else
    v4 = *(double *)(v1 + 152);
  if (*(_BYTE *)(v1 + 128))
    v5 = -1.0;
  else
    v5 = *(double *)(v1 + 120);
  outlined init with take of Transform?(v1 + 112, (uint64_t)&v10, &demangling cache variable for type metadata for OpaquePointer?);
  result = outlined init with take of Transform?((uint64_t)&v10, (uint64_t)&v11, &demangling cache variable for type metadata for OpaquePointer?);
  v7 = v11;
  if (v11)
  {
    result = RETimelineEventGetAnimatedType();
    switch((int)result)
    {
      case 0:
        v8 = &demangling cache variable for type metadata for AnimationState<Float>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Float>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Float> and conformance AnimationState<A>;
        break;
      case 1:
        v8 = &demangling cache variable for type metadata for AnimationState<Double>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Double>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Double> and conformance AnimationState<A>;
        break;
      case 2:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD2<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD2<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD2<Float>> and conformance AnimationState<A>;
        break;
      case 3:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD3<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD3<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD3<Float>> and conformance AnimationState<A>;
        break;
      case 4:
        v8 = &demangling cache variable for type metadata for AnimationState<SIMD4<Float>>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<SIMD4<Float>>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<SIMD4<Float>> and conformance AnimationState<A>;
        break;
      case 5:
        v8 = &demangling cache variable for type metadata for AnimationState<simd_quatf>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<simd_quatf>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<simd_quatf> and conformance AnimationState<A>;
        break;
      case 6:
        v8 = &demangling cache variable for type metadata for AnimationState<Transform>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<Transform>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<Transform> and conformance AnimationState<A>;
        break;
      case 7:
        v8 = &demangling cache variable for type metadata for AnimationState<JointTransforms>;
        *(_QWORD *)(a1 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationState<JointTransforms>);
        v9 = (unint64_t *)&lazy protocol witness table cache variable for type AnimationState<JointTransforms> and conformance AnimationState<A>;
        break;
      default:
        goto LABEL_13;
    }
    *(_QWORD *)(a1 + 32) = lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(v9, v8);
    result = swift_allocObject();
    *(_QWORD *)a1 = result;
    *(double *)(result + 16) = v5;
    *(double *)(result + 24) = v3;
    *(double *)(result + 32) = v4;
    *(_QWORD *)(result + 40) = v7;
  }
  else
  {
LABEL_13:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t specialized EmphasizeAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x79546E6F69746F6DLL && a2 == 0xEA00000000006570;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C797473 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974696464417369 && a2 == 0xEA00000000006576)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t outlined retain of ActionEvent<EmphasizeAction>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ActionEvent<EmphasizeAction>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined destroy of AnimationStateProtocol?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationStateProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21BA69C58()
{
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type AnimationState<JointTransforms> and conformance AnimationState<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationState<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

void specialized EmphasizeActionHandler.createTransformData(event:targetEntity:)(uint64_t a1)
{
  __asm { BR              X11 }
}

float *sub_21BA69CE4@<X0>(char a1@<W8>)
{
  uint64_t v1;
  char v2;
  float *v3;
  float *v4;
  char v6;

  v6 = a1;
  v3 = (float *)specialized static EmphasizeAnimations.createEmphasizePopAnimation(style:)(&v6);
  v4 = specialized static EmphasizeAnimations.bakeEmphasisTransforms(_:transforms:isAdditive:)(v1, v3, v2);
  swift_bridgeObjectRelease();
  return v4;
}

_QWORD *assignWithCopy for EmphasizeActionHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for EmphasizeActionHandler(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EmphasizeActionHandler()
{
  return &type metadata for EmphasizeActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in EmphasizeActionHandler()
{
  return &protocol witness table for EmphasizeAction;
}

uint64_t __RKRuntimeSceneCoordinator.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE v13[8];
  uint64_t v14;

  result = swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(v10, (uint64_t)v13);
      if (MEMORY[0x22077301C](v13))
      {
        v11 = v14;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(v3, a1, a2, a3, ObjectType, v11);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v13);
      v10 += 16;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  _BYTE v13[8];
  uint64_t v14;

  result = swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = v8 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of __RKRuntimeSceneCoordinator.WeakObserver(v10, (uint64_t)v13);
      if (MEMORY[0x22077301C](v13))
      {
        v11 = v14;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(v3, a1, a2, a3, ObjectType, v11);
        swift_unknownObjectRelease();
      }
      outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v13);
      v10 += 16;
      --v9;
    }
    while (v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.addObserver(observer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _BYTE v16[8];
  uint64_t v17;

  v5 = (_QWORD **)(v2 + 16);
  swift_beginAccess();
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v9 = MEMORY[0x22077301C](v8);
      if (v9)
      {
        v10 = v9;
        swift_unknownObjectRelease();
        if (v10 == a1)
          return swift_bridgeObjectRelease();
      }
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  v17 = a2;
  swift_unknownObjectWeakInit();
  swift_beginAccess();
  v12 = *v5;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v5 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, (unint64_t)v12);
    *v5 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, (unint64_t)v12);
    *v5 = v12;
  }
  v12[2] = v15 + 1;
  outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver((uint64_t)v16, (uint64_t)&v12[2 * v15 + 4]);
  return swift_endAccess();
}

uint64_t __RKRuntimeSceneCoordinator.removeObserver(observer:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain();
    for (i = 0; i != v5; ++i)
    {
      v8 = MEMORY[0x22077301C](v6);
      if (v8)
      {
        v9 = v8;
        swift_unknownObjectRelease();
        if (v9 == a1)
        {
          swift_bridgeObjectRelease();
          swift_beginAccess();
          specialized Array.remove(at:)(i, (uint64_t)v10);
          outlined destroy of weak __RKSimulationSceneCoordinatorDelegate?((uint64_t)v10);
          return swift_endAccess();
        }
      }
      v6 += 16;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
    specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()((unint64_t)v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver((uint64_t)&v5[2 * a1 + 4], a2);
    if ((uint64_t)(v7 - a1) >= 0)
    {
      result = swift_arrayInitWithTakeFrontToBack();
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = *(_QWORD *)(type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v9 * a1;
  result = outlined init with take of PhotogrammetrySessionImpl.RequestMap.Entry(v10, a2);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v9 > 0 || v10 >= v10 + v9 + v9 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v9)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[6 * a1];
    v10 = v8[4];
    v9 = v8 + 4;
    v11 = v9[5];
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 + 1);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v9 + 3);
    *(_QWORD *)(a2 + 40) = v11;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 6, 48 * v12);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[8 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v8 = v7 + 4;
    v10 = v8[2];
    v11 = v6 - 1;
    v12 = *((_DWORD *)v8 + 10);
    v13 = *((_BYTE *)v8 + 44);
    v14 = v8[6];
    v15 = *((_BYTE *)v8 + 56);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v10;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(v8 + 3);
    *(_DWORD *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 44) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_BYTE *)(a2 + 56) = v15;
    if ((uint64_t)(v11 - a1) >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 8, (v11 - a1) << 6);
      v5[2] = v11;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[14 * a1];
    v9 = *((_OWORD *)v7 + 2);
    v8 = v7 + 4;
    v10 = v6 - 1;
    v11 = v8[2];
    v12 = v8[3];
    v13 = *((_OWORD *)v8 + 2);
    v14 = *((_OWORD *)v8 + 3);
    v15 = *((_OWORD *)v8 + 4);
    v16 = *((_OWORD *)v8 + 5);
    v17 = *((_BYTE *)v8 + 96);
    *(_OWORD *)a2 = v9;
    *(_QWORD *)(a2 + 16) = v11;
    *(_QWORD *)(a2 + 24) = v12;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 64) = v15;
    *(_OWORD *)(a2 + 80) = v16;
    *(_BYTE *)(a2 + 96) = v17;
    if ((uint64_t)(v10 - a1) >= 0)
    {
      result = (uint64_t)memmove(v8, v8 + 14, 112 * (v10 - a1));
      v5[2] = v10;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = &v5[3 * a1];
    v10 = v8[4];
    v9 = v8 + 4;
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v9 + 1);
    v11 = v6 - 1 - a1;
    if (v11 >= 0)
    {
      result = (uint64_t)memmove(v9, v9 + 3, 24 * v11);
      v5[2] = v7;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront();
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[20 * a1];
    v8 = v7[9];
    v9 = v6 - 1;
    a2[6] = v7[8];
    a2[7] = v8;
    v10 = v7[11];
    a2[8] = v7[10];
    a2[9] = v10;
    v11 = v7[5];
    a2[2] = v7[4];
    a2[3] = v11;
    v12 = v7[7];
    a2[4] = v7[6];
    a2[5] = v12;
    v13 = v7[3];
    *a2 = v7[2];
    a2[1] = v13;
    v14 = v6 - 1 - a1;
    if (v14 >= 0)
    {
      result = (uint64_t)memmove(v7 + 2, v7 + 12, 160 * v14);
      v5[2] = v9;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  _QWORD **v2;
  _QWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = &v5[12 * a1];
    v8 = v7[5];
    v9 = v6 - 1;
    a2[2] = v7[4];
    a2[3] = v8;
    v10 = v7[7];
    a2[4] = v7[6];
    a2[5] = v10;
    v11 = v7[3];
    *a2 = v7[2];
    a2[1] = v11;
    v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      result = (uint64_t)memmove(v7 + 2, v7 + 8, 96 * v12);
      v5[2] = v9;
      *v2 = v5;
      return result;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __RKRuntimeSceneCoordinator.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKRuntimeSceneCoordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  return a2;
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinatorObserver.runtimeSceneCoordinator(_:willSwapFromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinatorObserver.runtimeSceneCoordinator(_:didSwapFromEntity:toEntity:anchoringTarget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t type metadata accessor for __RKRuntimeSceneCoordinator()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKRuntimeSceneCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.addObserver(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __RKRuntimeSceneCoordinator.removeObserver(observer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t initializeWithCopy for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKRuntimeSceneCoordinator.WeakObserver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKRuntimeSceneCoordinator.WeakObserver()
{
  return &type metadata for __RKRuntimeSceneCoordinator.WeakObserver;
}

uint64_t outlined init with take of PhotogrammetrySessionImpl.RequestMap.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PhotogrammetrySessionImpl.RequestMap.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t cloneAnchoringComponent(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t Class;
  uint64_t v4;
  uint64_t Object;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v0 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class = REComponentGetClass();
  v4 = REComponentCreateByClassOpaquePointer_0(Class);
  Object = RECustomComponentGetObject();
  if (Object && (v6 = (uint64_t *)Object, (v7 = RECustomComponentGetObject()) != 0))
  {
    v8 = v7;
    v9 = *(int *)(v0 + 24);
    if (!*(uint64_t *)((char *)v6 + v9))
    {
      v10 = *v6;
      if (*v6)
      {
        type metadata accessor for IntrospectionDataCleanupHelper();
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v10;
        *(uint64_t *)((char *)v6 + v9) = v11;
      }
    }
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v6, (uint64_t)v2, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
    swift_arrayDestroy();
    outlined init with take of __RKEntityActionSpecification((uint64_t)v2, v8, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
  return v4;
}

uint64_t __REAnchoring.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v23)(const char *, _QWORD);
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for Data.Deallocator();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](v7);
  v9 = (const char **)((char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(v1 + *(int *)(v7 + 20), (uint64_t)v12);
  outlined init with copy of __RKEntityActionSpecification(v1, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
  v13 = type metadata accessor for __REAnchoringType();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v15 = *v9;
    if (*v9)
    {
      v28 = a1;
      v16 = strlen(v15);
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCDB98], v3);
      v17 = Data.Deallocator._deallocator.getter();
      v27 = v18;
      if (v16)
      {
        v25[1] = v17;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v26 = v3;
        swift_retain();
        v19 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
        v16 = specialized Data._Representation.init(_:count:)(v19, v16);
        v21 = v20;
        v3 = v26;
        swift_release();
      }
      else
      {
        v23 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
        v23(v15, 0);
        swift_release();
        swift_release();
        v21 = 0xC000000000000000;
      }
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (uint64_t)&protocol conformance descriptor for __REAnchoringType);
      v24 = v28;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v24, 0, 1, v13);
      swift_release();
      outlined consume of Data._Representation(v16, v21);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a1, 1, 1, v13);
    }
    outlined destroy of __RKEntityActionSpecification((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
    return outlined destroy of BodyTrackingComponent?((uint64_t)v12, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    outlined destroy of __RKEntityActionSpecification((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
    outlined init with take of __RKEntityActionSpecification((uint64_t)v12, a1, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a1, 0, 1, v13);
  }
}

uint64_t key path setter for __REAnchoring.type : __REAnchoring(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v4);
  return __REAnchoring.type.setter((uint64_t)v4);
}

uint64_t __REAnchoring.type.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  char v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for __REAnchoringType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (__REAnchoringType?, __REAnchoringType?));
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v24 - v15;
  v26 = type metadata accessor for __REAnchoring();
  v25 = v2 + *(int *)(v26 + 20);
  outlined init with copy of __REAnchoringType?(v25, (uint64_t)v16);
  v17 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v10);
  outlined init with copy of __REAnchoringType?((uint64_t)v16, v17);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v10, 1, v4) != 1)
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v10, (uint64_t)v13);
    if (v18(v17, 1, v4) != 1)
    {
      outlined init with take of __RKEntityActionSpecification(v17, (uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      specialized static __REAnchoringType.== infix(_:_:)((uint64_t)v13, (uint64_t)v7);
      v20 = v19;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
      outlined destroy of __RKEntityActionSpecification((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
      if ((v20 & 1) != 0)
        return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
LABEL_8:
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      JSONEncoder.init()();
      lazy protocol witness table accessor for type __REAnchoringType? and conformance <A> A?();
      dispatch thunk of JSONEncoder.encode<A>(_:)();
      v23 = v22;
      swift_release();
      __asm { BR              X10 }
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
    outlined destroy of __RKEntityActionSpecification((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
LABEL_6:
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for (__REAnchoringType?, __REAnchoringType?));
    goto LABEL_8;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v16, &demangling cache variable for type metadata for __REAnchoringType?);
  if (v18(v17, 1, v4) != 1)
    goto LABEL_6;
  outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for __REAnchoringType?);
  return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
}

uint64_t sub_21BA6B8B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = BYTE6(v0) + 1;
  if (__OFADD__(BYTE6(v0), 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v4 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x21BA6BA40);
  }
  v5 = RECIntrospectionAlloc();
  if (*v1)
  {
    v6 = *(int *)(v2 + 24);
    swift_release();
    *(uint64_t *)((char *)v1 + v6) = 0;
  }
  *v1 = v5;
  type metadata accessor for IntrospectionDataCleanupHelper();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v5;
  v8 = *(int *)(v2 + 24);
  v9 = swift_release();
  *(uint64_t *)((char *)v1 + v8) = v7;
  return ((uint64_t (*)(uint64_t))((char *)&loc_21BA6B98C + *((int *)qword_21BA6BA68 + v3)))(v9);
}

uint64_t __REAnchoring.decodedJSON()@<X0>(uint64_t a1@<X8>)
{
  const char **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v14)(const char *, _QWORD);
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for Data.Deallocator();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*v1)
  {
    v8 = strlen(*v1);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x24BDCDB98], v3);
    Data.Deallocator._deallocator.getter();
    if (v8)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      v9 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      v8 = specialized Data._Representation.init(_:count:)(v9, v8);
      v11 = v10;
      swift_release();
    }
    else
    {
      v14 = (void (*)(const char *, _QWORD))Data.Deallocator._deallocator.getter();
      v14(v7, 0);
      swift_release();
      swift_release();
      v11 = 0xC000000000000000;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    v15 = type metadata accessor for __REAnchoringType();
    lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (uint64_t)&protocol conformance descriptor for __REAnchoringType);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 0, 1, v15);
    swift_release();
    return outlined consume of Data._Representation(v8, v11);
  }
  else
  {
    v12 = type metadata accessor for __REAnchoringType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
}

uint64_t type metadata accessor for __REAnchoring()
{
  uint64_t result;

  result = type metadata singleton initialization cache for __REAnchoring;
  if (!type metadata singleton initialization cache for __REAnchoring)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of __REAnchoringType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*__REAnchoring.type.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  void *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  a1[1] = malloc(v3);
  v4 = malloc(v3);
  a1[2] = v4;
  __REAnchoring.type.getter((uint64_t)v4);
  return __REAnchoring.type.modify;
}

void __REAnchoring.type.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v3, (uint64_t)v2);
    __REAnchoring.type.setter((uint64_t)v2);
    outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    __REAnchoring.type.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t __REAnchoring.Registration.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __REAnchoring.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  int v7;
  __int128 *v8;
  uint64_t v9;
  void (*v10)();
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)();
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  v1 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for __REAnchoring() - 8) + 64);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v1 > 0x7FFFFFFF)
    goto LABEL_12;
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(), (v2 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_8:
    REStructBuilderDestroy();
    type metadata accessor for __REAnchoring.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(_QWORD *)(v0 + 16) = v2;
  v6 = xmmword_21BE58DF0;
  v7 = 1;
  v8 = &v6;
  v9 = 0;
  v10 = @objc createAnchoringComponentObject(componentType:);
  v11 = @objc destroyAnchoringComponentObject(componentType:rawPointer:);
  v12 = @objc didAddAnchoringComponentObject(componentRef:);
  v13 = @objc willRemoveAnchoringComponentObject(componentRef:);
  v14 = 0;
  v15 = 0;
  v16 = v2;
  v17 = 0;
  v3 = RECustomComponentTypeCreate();
  if (!v3)
  {
    lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_8;
  }
  v4 = v3;
  REComponentTypeSetCloneCallback();
  *(_QWORD *)(v0 + 24) = v4;
  REStructBuilderDestroy();
  return v0;
}

void @objc createAnchoringComponentObject(componentType:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v0 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](*(_QWORD *)(*(_QWORD *)(v0 - 8) + 64));
  v2 = (uint64_t *)((char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v1 <= 0x7FFFFFFF)
  {
    v3 = RECIntrospectionAlloc();
    *v2 = 0;
    v4 = (char *)v2 + *(int *)(v0 + 20);
    v5 = type metadata accessor for __REAnchoringType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    *(_QWORD *)((char *)v2 + *(int *)(v0 + 24)) = 0;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v2, v3, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
    return;
  }
  __break(1u);
}

uint64_t @objc destroyAnchoringComponentObject(componentType:rawPointer:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;

  v3 = type metadata accessor for __REAnchoring();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of __RKEntityActionSpecification(a2, (uint64_t)v5, v6);
  if (!*(_QWORD *)((char *)v5 + *(int *)(v3 + 24)) && *v5)
    RECIntrospectionFree();
  outlined destroy of __RKEntityActionSpecification((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoring);
  swift_arrayDestroy();
  return RECIntrospectionFree();
}

uint64_t @objc didAddAnchoringComponentObject(componentRef:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v10 - v4;
  result = RECustomComponentGetObject();
  if (result)
  {
    v7 = result + *(int *)(type metadata accessor for __REAnchoring() + 20);
    outlined init with copy of __REAnchoringType?(v7, (uint64_t)v5);
    v8 = type metadata accessor for __REAnchoringType();
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v5, 1, v8);
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for __REAnchoringType?);
    if (v9 == 1)
    {
      __REAnchoring.decodedJSON()((uint64_t)v2);
      return outlined assign with take of __REAnchoringType?((uint64_t)v2, v7);
    }
  }
  return result;
}

uint64_t @objc willRemoveAnchoringComponentObject(componentRef:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = RECustomComponentGetObject();
  if (result)
  {
    v1 = result + *(int *)(type metadata accessor for __REAnchoring() + 20);
    outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for __REAnchoringType?);
    v2 = type metadata accessor for __REAnchoringType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  }
  return result;
}

uint64_t __REAnchoring.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __REAnchoring.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __REAnchoring.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __REAnchoring.registration.setter(void *a1)
{
  swift_beginAccess();
  static __REAnchoring.registration = a1;
  return swift_release();
}

uint64_t (*static __REAnchoring.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Scene.__anchoringType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  swift_beginAccess();
  if (static __REAnchoring.registration)
  {
    RESceneGetComponentsOfCustomType();
    if (v2)
    {
      if (RECustomComponentGetObject())
        return __REAnchoring.type.getter(a1);
    }
  }
  v4 = type metadata accessor for __REAnchoringType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 1, 1, v4);
}

uint64_t Scene.__anchoringType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for __REAnchoringType();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration)
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  v14 = *((_QWORD *)static __REAnchoring.registration + 3);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v9, &demangling cache variable for type metadata for __REAnchoringType?);
    if (REEntityGetCustomComponent())
      REEntityRemoveComponentByClass();
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  outlined init with take of __RKEntityActionSpecification((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  RESceneGetComponentsOfCustomType();
  if (v16 < 1)
  {
    v20 = v2;
    swift_retain();
    if (Scene.AnchorCollection.endIndex.getter())
    {
      v17 = Scene.AnchorCollection.subscript.getter(0);
    }
    else
    {
      swift_release();
      specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of Scene.__anchoringType.setter);
      v17 = specialized AnchorEntity.__allocating_init(world:)(v18);
      swift_retain();
      specialized Scene.AnchorCollection.append(_:)(v17, v2);
    }
    swift_release();
    v19 = *(_QWORD *)(v17 + 16);
    swift_release();
    if (!MEMORY[0x22076CF2C](v19, v14))
      goto LABEL_13;
  }
  if (RECustomComponentGetObject())
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v13, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    __REAnchoring.type.setter((uint64_t)v6);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  }
  else
  {
LABEL_13:
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  }
}

void (*Scene.__anchoringType.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __REAnchoring.registration && (RESceneGetComponentsOfCustomType(), v6) && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v5);
  }
  else
  {
    v7 = type metadata accessor for __REAnchoringType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  }
  return Scene.__anchoringType.modify;
}

void Scene.__anchoringType.modify(uint64_t a1, char a2)
{
  Scene.__anchoringType.modify(a1, a2, (void (*)(void *))Scene.__anchoringType.setter);
}

uint64_t Entity.__anchoringType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;

  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
    return __REAnchoring.type.getter(a1);
  v3 = type metadata accessor for __REAnchoringType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a1, 1, 1, v3);
}

uint64_t key path setter for Scene.__anchoringType : Scene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v9);
  return a5(v9);
}

uint64_t Entity.__anchoringType.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = type metadata accessor for __REAnchoringType();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (!static __REAnchoring.registration)
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  v13 = *((_QWORD *)static __REAnchoring.registration + 3);
  outlined init with copy of __REAnchoringType?(a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v8, &demangling cache variable for type metadata for __REAnchoringType?);
    if (REEntityGetCustomComponent())
      REEntityRemoveComponentByClass();
    return outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  outlined init with take of __RKEntityActionSpecification((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](*(_QWORD *)(v1 + 16), v13)) && RECustomComponentGetObject())
  {
    outlined init with copy of __RKEntityActionSpecification((uint64_t)v12, (uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v5, 0, 1, v9);
    __REAnchoring.type.setter((uint64_t)v5);
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(a1, &demangling cache variable for type metadata for __REAnchoringType?);
    return outlined destroy of __RKEntityActionSpecification((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
  }
}

void (*Entity.__anchoringType.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                             - 8)
                 + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  swift_beginAccess();
  if (static __REAnchoring.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
  {
    __REAnchoring.type.getter((uint64_t)v5);
  }
  else
  {
    v6 = type metadata accessor for __REAnchoringType();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  }
  return Entity.__anchoringType.modify;
}

void Entity.__anchoringType.modify(uint64_t a1, char a2)
{
  Scene.__anchoringType.modify(a1, a2, (void (*)(void *))Entity.__anchoringType.setter);
}

void Scene.__anchoringType.modify(uint64_t a1, char a2, void (*a3)(void *))
{
  void *v4;
  void *v5;
  void *v6;

  v4 = *(void **)a1;
  v5 = *(void **)(*(_QWORD *)a1 + 32);
  v6 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of __REAnchoringType?((uint64_t)v6, (uint64_t)v5);
    a3(v5);
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for __REAnchoringType?);
  }
  else
  {
    a3(v6);
  }
  free(v6);
  free(v5);
  free(v4);
}

uint64_t specialized Data._Representation.init(_:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    type metadata accessor for Data.RangeReference();
    v3 = swift_allocObject();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v4 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      v5 = __DataStorage._length.getter();
      if (v5 >= a2)
        v6 = a2;
      else
        v6 = v5;
      v7 = &v4[v6];
      if (v4)
        v8 = v7;
      else
        v8 = 0;
      v3 = specialized Data.InlineData.init(_:)(v4, v8);
      swift_release();
      return v3;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type __REAnchoringType? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for __REAnchoringType?);
    v2 = lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(&lazy protocol witness table cache variable for type __REAnchoringType and conformance __REAnchoringType, (uint64_t)&protocol conformance descriptor for __REAnchoringType);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoringType? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type __REAnchoringType and conformance __REAnchoringType(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for __REAnchoringType();
    result = MEMORY[0x220772E3C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of __REAnchoringType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __REAnchoring()
{
  return &protocol witness table for __REAnchoring.Registration;
}

uint64_t sub_21BA6CEDC@<X0>(uint64_t a1@<X8>)
{
  return __REAnchoring.type.getter(a1);
}

uint64_t sub_21BA6CF00@<X0>(uint64_t a1@<X8>)
{
  return Scene.__anchoringType.getter(a1);
}

uint64_t sub_21BA6CF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Scene.__anchoringType : Scene(a1, a2, a3, a4, (uint64_t (*)(char *))Scene.__anchoringType.setter);
}

uint64_t sub_21BA6CF3C@<X0>(uint64_t a1@<X8>)
{
  return Entity.__anchoringType.getter(a1);
}

uint64_t sub_21BA6CF5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for Scene.__anchoringType : Scene(a1, a2, a3, a4, (uint64_t (*)(char *))Entity.__anchoringType.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for __REAnchoring(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int EnumCaseMultiPayload;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for __REAnchoringType();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v20 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v8, v9, v20);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        v15 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v8, v9, v15);
        v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        v17 = &v8[v16];
        v18 = &v9[v16];
        v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v8, v9, *(_QWORD *)(v11 + 64));
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for __REAnchoring(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for __REAnchoringType();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3))
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v6 = type metadata accessor for URL();
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload == 1)
    {
      v5 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
      v2 += *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
    }
  }
  return swift_release();
}

_QWORD *initializeWithCopy for __REAnchoring(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for __REAnchoringType();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v7, v8, v18);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v7, v8, v13);
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __REAnchoring(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for __REAnchoringType();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_17;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v7, v8, v29);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v7, v8, v22);
        v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        v24 = &v7[v23];
        v25 = &v8[v23];
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      v20 = *(_QWORD *)(v10 + 64);
      goto LABEL_9;
    }
    outlined destroy of __RKEntityActionSpecification((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
LABEL_8:
    v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                                - 8)
                    + 64);
LABEL_9:
    memcpy(v7, v8, v20);
    goto LABEL_17;
  }
  if (v13)
    goto LABEL_8;
  v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 3)
  {
    v27 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v7, v8, v27);
    swift_storeEnumTagMultiPayload();
  }
  else if (v14 == 1)
  {
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v7, v8, v15);
    v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *initializeWithTake for __REAnchoring(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int EnumCaseMultiPayload;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for __REAnchoringType();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v7, v8, v18);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v13 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v7, v8, v13);
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                   + 48);
      v15 = &v7[v14];
      v16 = &v8[v14];
      v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(v10 + 64));
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for __REAnchoring(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  size_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for __REAnchoringType();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      if (a1 == a2)
        goto LABEL_17;
      outlined destroy of __RKEntityActionSpecification((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3)
      {
        v29 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v7, v8, v29);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        v22 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v7, v8, v22);
        v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                     + 48);
        v24 = &v7[v23];
        v25 = &v8[v23];
        v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      v20 = *(_QWORD *)(v10 + 64);
      goto LABEL_9;
    }
    outlined destroy of __RKEntityActionSpecification((uint64_t)v7, (uint64_t (*)(_QWORD))type metadata accessor for __REAnchoringType);
LABEL_8:
    v20 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?)
                                - 8)
                    + 64);
LABEL_9:
    memcpy(v7, v8, v20);
    goto LABEL_17;
  }
  if (v13)
    goto LABEL_8;
  v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 3)
  {
    v27 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v7, v8, v27);
    swift_storeEnumTagMultiPayload();
  }
  else if (v14 == 1)
  {
    v15 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v7, v8, v15);
    v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, physicalWidth: Measurement<NSUnitLength>))
                 + 48);
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(v10 + 64));
  }
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_17:
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __REAnchoring()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA6DAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for __REAnchoring()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21BA6DB4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __REAnchoringType?);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = a2;
  return result;
}

void type metadata completion function for __REAnchoring()
{
  unint64_t v0;

  type metadata accessor for __REAnchoringType?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for __REAnchoringType?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for __REAnchoringType?)
  {
    type metadata accessor for __REAnchoringType();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for __REAnchoringType?);
  }
}

uint64_t type metadata accessor for __REAnchoring.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __REAnchoring.Registration()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoring.Registration.RegistrationError, &type metadata for __REAnchoring.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __REAnchoring.Registration.RegistrationError, &type metadata for __REAnchoring.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __REAnchoring.Registration.RegistrationError and conformance __REAnchoring.Registration.RegistrationError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __REAnchoring.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA6DD54 + 4 * byte_21BE58E00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA6DD74 + 4 * byte_21BE58E05[v4]))();
}

_BYTE *sub_21BA6DD54(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA6DD74(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA6DD7C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA6DD84(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA6DD8C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA6DD94(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __REAnchoring.Registration.RegistrationError()
{
  return &type metadata for __REAnchoring.Registration.RegistrationError;
}

uint64_t __RKEntityDragTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKEntityDragTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKEntityDragTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEntityDragTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityDragTrigger()
{
  return objc_opt_self();
}

uint64_t EngineConfiguration.__allocating_init()()
{
  uint64_t Default;
  uint64_t result;

  Default = REEngineConfigurationCreateDefault();
  type metadata accessor for EngineConfiguration();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = Default;
  return result;
}

uint64_t type metadata accessor for EngineConfiguration()
{
  return objc_opt_self();
}

uint64_t EngineConfiguration.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t EngineConfiguration.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t EngineConfiguration.instanceID.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)REEngineConfigurationCopyInstanceID();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

void key path getter for EngineConfiguration.instanceID : EngineConfiguration(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)REEngineConfigurationCopyInstanceID();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t key path setter for EngineConfiguration.instanceID : EngineConfiguration()
{
  String.utf8CString.getter();
  REEngineConfigurationSetInstanceID();
  return swift_release();
}

uint64_t EngineConfiguration.instanceID.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEngineConfigurationSetInstanceID();
  return swift_release();
}

uint64_t (*EngineConfiguration.instanceID.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  v3 = (void *)REEngineConfigurationCopyInstanceID();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return EngineConfiguration.instanceID.modify;
}

uint64_t EngineConfiguration.instanceID.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if ((a2 & 1) != 0)
  {
    REEngineConfigurationSetInstanceID();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REEngineConfigurationSetInstanceID();
  }
  return swift_release();
}

uint64_t EngineConfiguration.unsafeUserDataPointer.getter()
{
  return REEngineConfigurationGetUserData();
}

uint64_t EngineConfiguration.unsafeUserDataPointer.setter()
{
  return REEngineConfigurationSetUserData();
}

uint64_t (*EngineConfiguration.unsafeUserDataPointer.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = REEngineConfigurationGetUserData();
  return EngineConfiguration.unsafeUserDataPointer.modify;
}

uint64_t EngineConfiguration.unsafeUserDataPointer.modify()
{
  return REEngineConfigurationSetUserData();
}

uint64_t EngineConfiguration.engineClockMode.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineClockMode.setter()
{
  return REEngineConfigurationSetClockMode();
}

uint64_t (*EngineConfiguration.engineClockMode.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetClockMode();
  return EngineConfiguration.engineClockMode.modify;
}

uint64_t EngineConfiguration.engineClockMode.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21E98]);
}

uint64_t EngineConfiguration.engineServicesToCreate.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineServicesToCreate.setter()
{
  return REEngineConfigurationSetServicesToCreate();
}

uint64_t (*EngineConfiguration.engineServicesToCreate.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToCreate();
  return EngineConfiguration.engineServicesToCreate.modify;
}

uint64_t EngineConfiguration.engineServicesToCreate.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21ED8]);
}

uint64_t EngineConfiguration.engineServicesToUpdate.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineServicesToUpdate.setter()
{
  return REEngineConfigurationSetServicesToUpdate();
}

uint64_t (*EngineConfiguration.engineServicesToUpdate.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetServicesToUpdate();
  return EngineConfiguration.engineServicesToUpdate.modify;
}

uint64_t EngineConfiguration.engineServicesToUpdate.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EE0]);
}

uint64_t EngineConfiguration.engineStartupOptions.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineStartupOptions.setter()
{
  return REEngineConfigurationSetStartupOptions();
}

uint64_t (*EngineConfiguration.engineStartupOptions.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetStartupOptions();
  return EngineConfiguration.engineStartupOptions.modify;
}

uint64_t EngineConfiguration.engineStartupOptions.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EE8]);
}

id EngineConfiguration.engineQueue.getter()
{
  return (id)REEngineConfigurationGetEngineQueue();
}

void EngineConfiguration.engineQueue.setter(void *a1)
{
  REEngineConfigurationSetEngineQueue();

}

void (*EngineConfiguration.engineQueue.modify(_QWORD *a1))(id *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetEngineQueue();
  return EngineConfiguration.engineQueue.modify;
}

void EngineConfiguration.engineQueue.modify(id *a1)
{
  id v1;

  v1 = *a1;
  REEngineConfigurationSetEngineQueue();

}

id EngineConfiguration.metalDevice.getter()
{
  return (id)REEngineConfigurationGetDevice();
}

uint64_t EngineConfiguration.metalDevice.setter()
{
  REEngineConfigurationSetDevice();
  return swift_unknownObjectRelease();
}

uint64_t (*EngineConfiguration.metalDevice.modify(_QWORD *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = (id)REEngineConfigurationGetDevice();
  return EngineConfiguration.metalDevice.modify;
}

uint64_t EngineConfiguration.metalDevice.modify()
{
  REEngineConfigurationSetDevice();
  return swift_unknownObjectRelease();
}

uint64_t EngineConfiguration.useMetal.getter()
{
  return REEngineConfigurationGetUseMetal();
}

uint64_t EngineConfiguration.useMetal.setter()
{
  return REEngineConfigurationSetUseMetal();
}

uint64_t (*EngineConfiguration.useMetal.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUseMetal();
  return EngineConfiguration.useMetal.modify;
}

uint64_t EngineConfiguration.useMetal.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EF0]);
}

uint64_t EngineConfiguration.forExportOnly.getter()
{
  return REEngineConfigurationGetForExportOnly();
}

uint64_t EngineConfiguration.forExportOnly.setter()
{
  return REEngineConfigurationSetForExportOnly();
}

uint64_t (*EngineConfiguration.forExportOnly.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetForExportOnly();
  return EngineConfiguration.forExportOnly.modify;
}

uint64_t EngineConfiguration.forExportOnly.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EB8]);
}

uint64_t EngineConfiguration.useRealityIO.getter()
{
  return REEngineConfigurationGetUseRealityIO();
}

uint64_t EngineConfiguration.useRealityIO.setter()
{
  return REEngineConfigurationSetUseRealityIO();
}

uint64_t (*EngineConfiguration.useRealityIO.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUseRealityIO();
  return EngineConfiguration.useRealityIO.modify;
}

uint64_t EngineConfiguration.useRealityIO.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21F00]);
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.getter()
{
  return REEngineConfigurationGetUsePhysicsSceneSystem();
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.setter()
{
  return REEngineConfigurationSetUsePhysicsSceneSystem();
}

uint64_t (*EngineConfiguration.usePhysicsSceneSystem.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetUsePhysicsSceneSystem();
  return EngineConfiguration.usePhysicsSceneSystem.modify;
}

uint64_t EngineConfiguration.usePhysicsSceneSystem.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EF8]);
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.getter()
{
  return REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.setter()
{
  return REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t (*EngineConfiguration.assetRuntimeSizeLimit.modify(uint64_t *a1))()
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  return EngineConfiguration.assetRuntimeSizeLimit.modify;
}

uint64_t EngineConfiguration.assetRuntimeSizeLimit.modify()
{
  return REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t EngineConfiguration.engineRenderFlags.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t EngineConfiguration.engineRenderFlags.setter()
{
  return REEngineConfigurationSetRenderFlags();
}

uint64_t (*EngineConfiguration.engineRenderFlags.modify(uint64_t a1))(unsigned int *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = REEngineConfigurationGetRenderFlags();
  return EngineConfiguration.engineRenderFlags.modify;
}

uint64_t EngineConfiguration.engineRenderFlags.modify(unsigned int *a1, uint64_t a2)
{
  return EngineConfiguration.engineClockMode.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21ED0]);
}

uint64_t EngineConfiguration.engineClockMode.modify(unsigned int *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)(*(_QWORD *)a1 + 16), a1[2]);
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.getter()
{
  return REEngineConfigurationGetIsHostingSharedAudioSimulation();
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.setter()
{
  return REEngineConfigurationSetIsHostingSharedAudioSimulation();
}

uint64_t (*EngineConfiguration.isHostingSharedAudioSimulation.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetIsHostingSharedAudioSimulation();
  return EngineConfiguration.isHostingSharedAudioSimulation.modify;
}

uint64_t EngineConfiguration.isHostingSharedAudioSimulation.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EC8]);
}

uint64_t EngineConfiguration.enableInteractions.getter()
{
  return REEngineConfigurationGetEnableInteractions();
}

uint64_t EngineConfiguration.enableInteractions.setter()
{
  return REEngineConfigurationSetEnableInteractions();
}

uint64_t (*EngineConfiguration.enableInteractions.modify(uint64_t a1))(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEngineConfigurationGetEnableInteractions();
  return EngineConfiguration.enableInteractions.modify;
}

uint64_t EngineConfiguration.enableInteractions.modify(unsigned __int8 *a1, uint64_t a2)
{
  return EngineConfiguration.useMetal.modify(a1, a2, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EA8]);
}

uint64_t EngineConfiguration.useMetal.modify(unsigned __int8 *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD))
{
  return a3(*(_QWORD *)(*(_QWORD *)a1 + 16), a1[8]);
}

uint64_t EngineConfiguration.clone()()
{
  uint64_t v0;
  uint64_t result;

  v0 = REEngineConfigurationClone();
  type metadata accessor for EngineConfiguration();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t EngineConfiguration.__allocating_init(_:)()
{
  uint64_t v0;
  uint64_t result;

  v0 = REEngineConfigurationClone();
  swift_release();
  RERelease();
  RERetain();
  type metadata accessor for EngineConfiguration();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

uint64_t sub_21BA6E888@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetUserData();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6E8B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21F08]);
}

uint64_t sub_21BA6E8C0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetClockMode();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6E8EC()
{
  return REEngineConfigurationSetClockMode();
}

uint64_t sub_21BA6E900@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToCreate();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6E92C()
{
  return REEngineConfigurationSetServicesToCreate();
}

uint64_t sub_21BA6E940@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetServicesToUpdate();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6E96C()
{
  return REEngineConfigurationSetServicesToUpdate();
}

uint64_t sub_21BA6E980@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetStartupOptions();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6E9AC()
{
  return REEngineConfigurationSetStartupOptions();
}

id sub_21BA6E9C0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E38], a2);
}

uint64_t sub_21BA6E9CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EB0]);
}

id sub_21BA6E9D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return keypath_get_11Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E28], a2);
}

id keypath_get_11Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _QWORD *a3@<X8>)
{
  id result;

  result = (id)a2(*(_QWORD *)(*(_QWORD *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_21BA6EA18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm_1(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EA0]);
}

uint64_t keypath_set_2Tm_1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  return a5(*(_QWORD *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t sub_21BA6EA38@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E70], a2);
}

uint64_t sub_21BA6EA44(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EF0]);
}

uint64_t sub_21BA6EA50@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E40], a2);
}

uint64_t sub_21BA6EA5C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EB8]);
}

uint64_t sub_21BA6EA68@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E80], a2);
}

uint64_t sub_21BA6EA74(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21F00]);
}

uint64_t sub_21BA6EA80@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E78], a2);
}

uint64_t sub_21BA6EA8C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EF8]);
}

uint64_t sub_21BA6EA98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetAssetRuntimeSizeLimitForResourceShareClient();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6EAC4()
{
  return REEngineConfigurationSetAssetRuntimeSizeLimitForResourceShareClient();
}

uint64_t sub_21BA6EAD8@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  result = REEngineConfigurationGetRenderFlags();
  *a1 = result;
  return result;
}

uint64_t sub_21BA6EB04()
{
  return REEngineConfigurationSetRenderFlags();
}

uint64_t sub_21BA6EB18@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E48], a2);
}

uint64_t sub_21BA6EB24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EC8]);
}

uint64_t sub_21BA6EB30@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_15Tm(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE21E30], a2);
}

uint64_t keypath_get_15Tm@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(*(_QWORD *)(*(_QWORD *)a1 + 16));
  *a3 = result;
  return result;
}

uint64_t sub_21BA6EB68(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_16Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x24BE21EA8]);
}

uint64_t keypath_set_16Tm(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  return a5(*(_QWORD *)(*(_QWORD *)a2 + 16), *a1);
}

uint64_t method lookup function for EngineConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.identifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.identifier.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PreviewSupportComponent.SelectableSourceInfo.position.getter()
{
  __n128 *v0;

  return v0[1];
}

void PreviewSupportComponent.SelectableSourceInfo.position.setter(__n128 a1, __n128 a2)
{
  __n128 *v2;

  v2[1] = a1;
  v2[2] = a2;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.position.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PreviewSupportComponent.SelectableSourceInfo.size.getter()
{
  __n128 *v0;

  return v0[3];
}

void PreviewSupportComponent.SelectableSourceInfo.size.setter(__n128 a1)
{
  __n128 *v1;

  v1[3] = a1;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.size.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.displayListIDs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.displayListIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

uint64_t (*PreviewSupportComponent.SelectableSourceInfo.displayListIDs.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t PreviewSupportComponent.SelectableSourceInfo.init(identifier:position:size:displayListIDs:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>, __n128 a7@<Q2>)
{
  a4->n128_u64[0] = result;
  a4->n128_u64[1] = a2;
  a4[1] = a5;
  a4[2] = a6;
  a4[3] = a7;
  a4[4].n128_u64[0] = a3;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BA6ECCC + 4 * byte_21BE58FE0[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_21BA6ECCC()
{
  return 0x6E6F697469736F70;
}

uint64_t sub_21BA6ECE4()
{
  return 1702521203;
}

uint64_t sub_21BA6ECF4()
{
  return 0x4C79616C70736964;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PreviewSupportComponent.SelectableSourceInfo.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreviewSupportComponent.SelectableSourceInfo.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_OWORD *)(v1 + 16);
  v13 = *(_OWORD *)(v1 + 32);
  v14 = v7;
  v11 = *(_OWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 64);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  v8 = v15;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v8)
  {
    v9 = v12;
    v16 = v14;
    v17 = v13;
    v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Double> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Double>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v16 = v11;
    v18 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4108]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(_QWORD *)&v16 = v9;
    v18 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
    lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt32] and conformance <A> [A], MEMORY[0x24BEE44F8], MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys, &unk_24DFA4C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys, &unk_24DFA4C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys, &unk_24DFA4C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys, &unk_24DFA4C58);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys);
  }
  return result;
}

uint64_t PreviewSupportComponent.SelectableSourceInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreviewSupportComponent.SelectableSourceInfo.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo.CodingKeys and conformance PreviewSupportComponent.SelectableSourceInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v20) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  v19 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
  v22 = 1;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Double> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Double>, MEMORY[0x24BEE4118]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v17 = v21;
  v18 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v22 = 2;
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>, &demangling cache variable for type metadata for SIMD3<Float>, MEMORY[0x24BEE4118]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v16 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt32]);
  v22 = 3;
  lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](&lazy protocol witness table cache variable for type [UInt32] and conformance <A> [A], MEMORY[0x24BEE4520], MEMORY[0x24BEE12D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v19;
  v14 = v20;
  *v19 = v9;
  v13[1] = v11;
  v15 = v17;
  *((_OWORD *)v13 + 1) = v18;
  *((_OWORD *)v13 + 2) = v15;
  *((_OWORD *)v13 + 3) = v16;
  v13[8] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type [UInt32] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt32]);
    v8 = a2;
    result = MEMORY[0x220772E3C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PreviewSupportComponent.SelectableSourceInfo@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PreviewSupportComponent.SelectableSourceInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PreviewSupportComponent.SelectableSourceInfo(_QWORD *a1)
{
  return PreviewSupportComponent.SelectableSourceInfo.encode(to:)(a1);
}

RealityFoundation::PreviewSupportComponent __swiftcall PreviewSupportComponent.init()()
{
  _QWORD *v0;
  RealityFoundation::PreviewSupportComponent result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t PreviewSupportComponent.selectableSourceInfos.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PreviewSupportComponent.selectableSourceInfos.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*PreviewSupportComponent.selectableSourceInfos.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static PreviewSupportComponent.customComponentType.getter()
{
  return specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for PreviewSupportComponent, (uint64_t)&protocol witness table for PreviewSupportComponent);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance PreviewSupportComponent.CodingKeys()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PreviewSupportComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PreviewSupportComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PreviewSupportComponent.CodingKeys()
{
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PreviewSupportComponent.CodingKeys()
{
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PreviewSupportComponent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PreviewSupportComponent.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
  lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](&lazy protocol witness table cache variable for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t PreviewSupportComponent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PreviewSupportComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
    lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](&lazy protocol witness table cache variable for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A], (uint64_t (*)(void))lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo, MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PreviewSupportComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PreviewSupportComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PreviewSupportComponent(_QWORD *a1)
{
  return PreviewSupportComponent.encode(to:)(a1);
}

uint64_t SelectableSceneContentIdentifierComponent.init(displayListItemIdentifier:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t SelectableSceneContentIdentifierComponent.displayListItemIdentifier.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t SelectableSceneContentIdentifierComponent.displayListItemIdentifier.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*SelectableSceneContentIdentifierComponent.displayListItemIdentifier.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static SelectableSceneContentIdentifierComponent.customComponentType.getter()
{
  return specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SelectableSceneContentIdentifierComponent, (uint64_t)&protocol witness table for SelectableSceneContentIdentifierComponent);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelectableSceneContentIdentifierComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SelectableSceneContentIdentifierComponent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SelectableSceneContentIdentifierComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SelectableSceneContentIdentifierComponent.init(from:)@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v11;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SelectableSceneContentIdentifierComponent@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return SelectableSceneContentIdentifierComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SelectableSceneContentIdentifierComponent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelectableSceneContentIdentifierComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.CodingKeys, &unk_24DFA4BC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.CodingKeys, &unk_24DFA4BC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.CodingKeys, &unk_24DFA4BC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.CodingKeys, &unk_24DFA4BC8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.CodingKeys and conformance PreviewSupportComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo, &type metadata for PreviewSupportComponent.SelectableSourceInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo;
  if (!lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PreviewSupportComponent.SelectableSourceInfo, &type metadata for PreviewSupportComponent.SelectableSourceInfo);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewSupportComponent.SelectableSourceInfo and conformance PreviewSupportComponent.SelectableSourceInfo);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [PreviewSupportComponent.SelectableSourceInfo] and conformance <A> [A](unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PreviewSupportComponent.SelectableSourceInfo]);
    v8 = a2();
    result = MEMORY[0x220772E3C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SelectableSceneContentIdentifierComponent.CodingKeys, &unk_24DFA4B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SelectableSceneContentIdentifierComponent.CodingKeys, &unk_24DFA4B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SelectableSceneContentIdentifierComponent.CodingKeys, &unk_24DFA4B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SelectableSceneContentIdentifierComponent.CodingKeys, &unk_24DFA4B38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectableSceneContentIdentifierComponent.CodingKeys and conformance SelectableSceneContentIdentifierComponent.CodingKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewSupportComponent()
{
  return &type metadata for PreviewSupportComponent;
}

uint64_t destroy for PreviewSupportComponent.SelectableSourceInfo()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreviewSupportComponent.SelectableSourceInfo()
{
  return &type metadata for PreviewSupportComponent.SelectableSourceInfo;
}

ValueMetadata *type metadata accessor for SelectableSceneContentIdentifierComponent()
{
  return &type metadata for SelectableSceneContentIdentifierComponent;
}

void *type metadata accessor for SelectableSceneContentIdentifierComponent.CodingKeys()
{
  return &unk_24DFA4B38;
}

uint64_t storeEnumTagSinglePayload for SelectableSceneContentIdentifierComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA6FE94 + 4 * byte_21BE58FE4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA6FEB4 + 4 * byte_21BE58FE9[v4]))();
}

_BYTE *sub_21BA6FE94(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA6FEB4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA6FEBC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA6FEC4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA6FECC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA6FED4(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PreviewSupportComponent.CodingKeys()
{
  return &unk_24DFA4BC8;
}

uint64_t storeEnumTagSinglePayload for PreviewSupportComponent.SelectableSourceInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BA6FF3C + 4 * byte_21BE58FF3[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BA6FF70 + 4 * byte_21BE58FEE[v4]))();
}

uint64_t sub_21BA6FF70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA6FF78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA6FF80);
  return result;
}

uint64_t sub_21BA6FF8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA6FF94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BA6FF98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA6FFA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PreviewSupportComponent.SelectableSourceInfo.CodingKeys()
{
  return &unk_24DFA4C58;
}

uint64_t specialized PreviewSupportComponent.SelectableSourceInfo.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697469736F70 && a2 == 0xE800000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x4C79616C70736964 && a2 == 0xEE00734449747369)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized PreviewSupportComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000015 && a2 == 0x800000021BE846C0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t specialized SelectableSceneContentIdentifierComponent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000019 && a2 == 0x800000021BE846E0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void __REAnchoringType.createAnchorEntity(realityAssetFileName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for URL();
  MEMORY[0x24BDAC7A8](v2);
  v3 = type metadata accessor for __REAnchoringType();
  MEMORY[0x24BDAC7A8](v3);
  outlined init with copy of __REAnchoringType(v0, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = (char *)sub_21BA70628 + 4 * byte_21BE594B0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_21BA70628()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 96) = v0[1];
  *(_QWORD *)(v1 - 88) = v2;
  return __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:)((uint64_t *)(v1 - 88), (uint64_t *)(v1 - 96));
}

uint64_t outlined init with copy of __REAnchoringType(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for __REAnchoringType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a2;
  v12 = *a1;
  __REAnchoringType.anchoringComponentAlignmentFromREAnchoringAlignment(_:)(&v12, (char *)&v11);
  LOBYTE(a1) = v11;
  v11 = v7;
  __REAnchoringType.anchoringComponentClassificationFromREAnchoringClassification(_:)(&v11, &v12);
  v8 = v12;
  v9 = specialized SIMD.init<A>(_:)(&outlined read-only object #0 of __REAnchoringType.createSurfaceAnchorEntity(alignment:classification:));
  *v6 = (char)a1;
  *((_QWORD *)v6 + 1) = v8;
  *((double *)v6 + 2) = v9;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  return AnchorEntity.init(_:)((uint64_t)v6);
}

void one-time initialization function for alignmentTypeToAlignment()
{
  static __REAnchoringType.alignmentTypeToAlignment = &outlined read-only object #0 of one-time initialization function for alignmentTypeToAlignment;
}

void one-time initialization function for classificationTypeToClassification()
{
  static __REAnchoringType.classificationTypeToClassification = &outlined read-only object #0 of one-time initialization function for classificationTypeToClassification;
}

uint64_t *__REAnchoringType.anchoringComponentAlignmentFromREAnchoringAlignment(_:)@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v12;

  v3 = *result;
  if (*result)
  {
    if (one-time initialization token for alignmentTypeToAlignment != -1)
      result = (uint64_t *)swift_once();
    v4 = *((_QWORD *)static __REAnchoringType.alignmentTypeToAlignment + 2);
    if (v4)
    {
      v5 = 0;
      v6 = (char *)static __REAnchoringType.alignmentTypeToAlignment + 40;
      do
      {
        v7 = *((_QWORD *)v6 - 1);
        v9 = *v6;
        v6 += 16;
        v8 = v9;
        v10 = v7 & ~v3;
        if ((v9 & ~v5) != 0 && v10 == 0)
          v12 = v8;
        else
          v12 = 0;
        v5 |= v12;
        --v4;
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = -1;
  }
  *a2 = v5;
  return result;
}

uint64_t *__REAnchoringType.anchoringComponentClassificationFromREAnchoringClassification(_:)@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;

  v3 = *result;
  if (*result)
  {
    if (one-time initialization token for classificationTypeToClassification != -1)
      result = (uint64_t *)swift_once();
    v4 = *((_QWORD *)static __REAnchoringType.classificationTypeToClassification + 2);
    if (v4)
    {
      v5 = 0;
      v6 = (uint64_t *)((char *)static __REAnchoringType.classificationTypeToClassification + 40);
      do
      {
        if ((*v6 & ~v5) != 0 && (*(v6 - 1) & ~v3) == 0)
          v8 = *v6;
        else
          v8 = 0;
        v5 |= v8;
        v6 += 2;
        --v4;
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = -1;
  }
  *a2 = v5;
  return result;
}

uint64_t __REAnchoringType.createImageOrObjectAnchorEntity(url:realityAssetFileName:imageAnchoring:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  Swift::String v17;
  __int128 v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD v23[4];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v23[3] = a4;
  v6 = type metadata accessor for AnchoringComponent.Target(0);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = URL.lastPathComponent.getter();
  v11 = v10;
  v12 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)&v24);
  if (one-time initialization token for instances != -1)
    swift_once();
  v13 = static __RealityFileURLResolver.instances;
  v14 = v25;
  v15 = v26;
  v16 = __swift_project_boxed_opaque_existential_1(&v24, v25);
  swift_retain();
  specialized AssetServiceScopedRegistry.instance(for:)((uint64_t)v16, v13, v14, v15);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  *(_QWORD *)&v24 = 0x2F737465737361;
  *((_QWORD *)&v24 + 1) = 0xE700000000000000;
  v17._countAndFlagsBits = v9;
  v17._object = v11;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18 = v24;
  if (one-time initialization token for schemePrefix != -1)
    swift_once();
  v24 = static __RealityFileURLResolver.schemePrefix;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a2;
  v19._object = a3;
  String.append(_:)(v19);
  v20 = *((_QWORD *)&v24 + 1);
  *(_QWORD *)v8 = v24;
  *((_QWORD *)v8 + 1) = v20;
  *((_OWORD *)v8 + 1) = v18;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for AnchorEntity();
  swift_allocObject();
  v21 = AnchorEntity.init(_:)((uint64_t)v8);
  swift_release();
  return v21;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t static MeshAttributeDescriptor.positionFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26308]);
}

uint64_t type metadata accessor for MeshAttributeDescriptor()
{
  return objc_opt_self();
}

uint64_t static MeshAttributeDescriptor.positionHalf3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26310]);
}

uint64_t static MeshAttributeDescriptor.normalFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE262F8]);
}

uint64_t static MeshAttributeDescriptor.normalShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26300]);
}

uint64_t static MeshAttributeDescriptor.tangentFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26328]);
}

uint64_t static MeshAttributeDescriptor.tangentShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26330]);
}

uint64_t static MeshAttributeDescriptor.bitangentFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26270]);
}

uint64_t static MeshAttributeDescriptor.bitangentShort3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26278]);
}

uint64_t static MeshAttributeDescriptor.uv0Float2.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26338]);
}

uint64_t static MeshAttributeDescriptor.colorFloat3.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26288]);
}

uint64_t static MeshAttributeDescriptor.colorFloat4.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26290]);
}

uint64_t static MeshAttributeDescriptor.colorUChar3Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26298]);
}

uint64_t static MeshAttributeDescriptor.colorUChar4Normalized.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE262A0]);
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:)()
{
  JUMPOUT(0x22076E69CLL);
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:)()
{
  JUMPOUT(0x22076E690);
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:)()
{
  JUMPOUT(0x22076E6B4);
}

uint64_t closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v13 = *(_QWORD *)(a5 + 16);
  v14 = String.utf8CString.getter();
  v15 = a8(v13, v14 + 32, a1, a2, a3, a4);
  swift_release();
  return v15;
}

uint64_t MeshAttributeDescriptor.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t MeshAttributeDescriptor.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v7 = specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(a1, a2, a3, v6);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(a1, a2, a3, a4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;

  if (!result)
    goto LABEL_25;
  REMeshAttributesDescriptorCreate();
  v4 = a2 + 64;
  v5 = 1 << *(_BYTE *)(a2 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a2 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_6;
    }
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v10 >= v8)
      goto LABEL_22;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    ++v9;
    if (!v11)
    {
      v9 = v10 + 1;
      if (v10 + 1 >= v8)
        goto LABEL_22;
      v11 = *(_QWORD *)(v4 + 8 * v9);
      if (!v11)
      {
        v9 = v10 + 2;
        if (v10 + 2 >= v8)
          goto LABEL_22;
        v11 = *(_QWORD *)(v4 + 8 * v9);
        if (!v11)
          break;
      }
    }
LABEL_21:
    v7 = (v11 - 1) & v11;
LABEL_6:
    String.utf8CString.getter();
    REMeshAttributeDescriptorArraySetCustomName();
    result = swift_release();
  }
  v12 = v10 + 3;
  if (v12 >= v8)
  {
LABEL_22:
    swift_release();
    v13 = REMeshDefinitionCreateWithAttributes();
    result = RERelease();
    *a3 = v13;
    return result;
  }
  v11 = *(_QWORD *)(v4 + 8 * v12);
  if (v11)
  {
    v9 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    v9 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v9 >= v8)
      goto LABEL_22;
    v11 = *(_QWORD *)(v4 + 8 * v9);
    ++v12;
    if (v11)
      goto LABEL_21;
  }
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

Swift::Void __swiftcall MeshDefinition.setIndices(_:)(Swift::OpaquePointer a1)
{
  MeshDefinition.setIndices(_:)((uint64_t)a1._rawValue, specialized Data.init<A>(buffer:), (void (*)(uint64_t, Class))MEMORY[0x24BE23380]);
}

{
  MeshDefinition.setIndices(_:)((uint64_t)a1._rawValue, specialized Data.init<A>(buffer:), (void (*)(uint64_t, Class))MEMORY[0x24BE23388]);
}

uint64_t specialized Data.init<A>(buffer:)(uint64_t __src, uint64_t a2)
{
  uint64_t v3;

  if (__src)
  {
    if (a2 + 0x4000000000000000 < 0)
    {
      __break(1u);
    }
    else
    {
      v3 = 2 * a2;
      if (2 * a2)
      {
        if (v3 <= 14)
        {
          return specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + v3));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 33;
          }
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return __src;
}

{
  uint64_t v3;

  if (__src)
  {
    if ((unint64_t)(a2 - 0x2000000000000000) >> 62 == 3)
    {
      v3 = 4 * a2;
      if (4 * a2)
      {
        if (v3 <= 14)
        {
          return specialized Data.InlineData.init(_:)((_BYTE *)__src, (_BYTE *)(__src + v3));
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          __DataStorage.init(bytes:length:)();
          if ((unint64_t)v3 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            __src = swift_allocObject();
            *(_QWORD *)(__src + 16) = 0;
            *(_QWORD *)(__src + 24) = v3;
          }
          else
          {
            return a2 << 34;
          }
        }
      }
      else
      {
        return 0;
      }
    }
    else
    {
      __break(1u);
    }
  }
  return __src;
}

void MeshDefinition.setIndices(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD), void (*a3)(uint64_t, Class))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Class isa;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = a2(a1 + 32, *(_QWORD *)(a1 + 16));
  v8 = v7;
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v6, v8);
  a3(v5, isa);

}

void MeshDefinition.setAttribute(_:data:)()
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

}

uint64_t MeshDefinition.setAttribute(_:name:data:)()
{
  Class isa;

  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  return swift_release();
}

uint64_t MeshDefinition.setAttribute(_:positions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E69C](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:normals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E690](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:tangents:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E6B4](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:bitangents:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E624](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:uvs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E6C0](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:colors:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E63C](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E648](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:custom:name:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Class isa;
  uint64_t v6;
  unint64_t v7;

  String.utf8CString.getter();
  v0 = REMeshAttributeDescriptorCopyCustom2sToBuffer();
  swift_release();
  v6 = specialized Data.init(count:)(v0);
  v7 = v1;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v6);
  v2 = v6;
  v3 = v7;
  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v2, v3);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Class isa;
  uint64_t v6;
  unint64_t v7;

  String.utf8CString.getter();
  v0 = REMeshAttributeDescriptorCopyCustom3sToBuffer();
  swift_release();
  v6 = specialized Data.init(count:)(v0);
  v7 = v1;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v6);
  v2 = v6;
  v3 = v7;
  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v2, v3);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Class isa;
  uint64_t v6;
  unint64_t v7;

  String.utf8CString.getter();
  v0 = REMeshAttributeDescriptorCopyCustom4sToBuffer();
  swift_release();
  v6 = specialized Data.init(count:)(v0);
  v7 = v1;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v6);
  v2 = v6;
  v3 = v7;
  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v2, v3);
}

uint64_t MeshDefinition.setBoundingBox(_:)()
{
  return REMeshDefinitionSetBoundingBox();
}

Swift::Void __swiftcall MeshDefinition.setDoubleSided(_:)(Swift::Bool a1)
{
  REMeshDefinitionSetDoubleSided();
}

uint64_t MeshModelDefinition.deinit()
{
  uint64_t v0;

  RERelease();
  return v0;
}

uint64_t MeshModelDefinition.__allocating_init()()
{
  uint64_t v0;
  uint64_t result;

  v0 = REMeshModelDefinitionCreate();
  type metadata accessor for MeshModelDefinition();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v0;
  return result;
}

void key path getter for MeshModelDefinition.name : MeshModelDefinition(uint64_t *a1@<X8>)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (void *)REMeshModelDefinitionCopyName();
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = v4;

  *a1 = v3;
  a1[1] = v5;
}

uint64_t key path setter for MeshModelDefinition.name : MeshModelDefinition()
{
  String.utf8CString.getter();
  REMeshModelDefinitionSetName();
  return swift_release();
}

uint64_t MeshModelDefinition.name.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)REMeshModelDefinitionCopyName();
  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

uint64_t MeshModelDefinition.name.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REMeshModelDefinitionSetName();
  return swift_release();
}

uint64_t (*MeshModelDefinition.name.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  a1[2] = v1;
  v3 = (void *)REMeshModelDefinitionCopyName();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  *a1 = v4;
  a1[1] = v6;
  return MeshModelDefinition.name.modify;
}

uint64_t MeshModelDefinition.name.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if ((a2 & 1) != 0)
  {
    REMeshModelDefinitionSetName();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REMeshModelDefinitionSetName();
  }
  return swift_release();
}

Swift::Void __swiftcall MeshModelDefinition.append(levelOfDetail:minScreenArea:maxViewDepth:)(Swift::Int levelOfDetail, Swift::Float minScreenArea, Swift::Float maxViewDepth)
{
  if (levelOfDetail < 0 || HIDWORD(levelOfDetail))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  JUMPOUT(0x22076E8E8);
}

uint64_t MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0 && !HIDWORD(a2) && (a3 & 0x8000000000000000) == 0 && !HIDWORD(a3))
    return REMeshModelDefinitionAppendTrianglesWithName();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2) || (a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    REMeshModelDefinitionAppendTrianglesWithName();
    return swift_release();
  }
  return result;
}

uint64_t MeshDefinition.__deallocating_deinit()
{
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t MeshInstanceDefinition.__allocating_init(name:modelIndex:transform:levelOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a3 & 0x8000000000000000) != 0 || HIDWORD(a3))
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v3 = REMeshInstanceDefinitionCreate();
    swift_release();
    type metadata accessor for MeshInstanceDefinition();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v3;
  }
  return result;
}

uint64_t static MeshAttributeDescriptor.skinInfluences.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26320]);
}

uint64_t static MeshAttributeDescriptor.skinInfluenceEndIndices.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26318]);
}

uint64_t static MeshAttributeDescriptor.accumulatedVertexValence.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26268]);
}

uint64_t static MeshAttributeDescriptor.vertexAdjacencies.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26340]);
}

uint64_t MeshAttributeDescriptor.makeData(jointInfluences:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v2 = MEMORY[0x22076E684](*(_QWORD *)(v1 + 16), a1 + 32, *(_QWORD *)(a1 + 16), 0, 0);
  v5[0] = specialized Data.init(count:)(v2);
  v5[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)v5);
  return v5[0];
}

uint64_t MeshDefinition.setAttribute(_:skinJointIndices:skinWeights:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 == *(_QWORD *)(a3 + 16))
  {
    v4 = MEMORY[0x22076E678](*(_QWORD *)(a1 + 16), a2 + 32, a3 + 32, v3, 0, 0);
    v10 = specialized Data.init(count:)(v4);
    v11 = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v10);
    v6 = v10;
    v7 = v11;
  }
  else
  {
    v6 = 0;
    v7 = 0xC000000000000000;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:jointInfluences:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Class isa;
  uint64_t v8;
  unint64_t v9;

  v2 = MEMORY[0x22076E684](*(_QWORD *)(a1 + 16), a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v8 = specialized Data.init(count:)(v2);
  v9 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Data._Representation.withUnsafeMutableBytes<A>(_:)((uint64_t)&v8);
  v4 = v8;
  v5 = v9;
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v4, v5);
}

uint64_t MeshDefinition.setAttribute(_:skinInfluenceEndIndices:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E6A8](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

char *MeshDefinition.setAttribute(_:influencesPerVert:vertCount:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Class isa;
  uint64_t v19;
  unint64_t v20;

  result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a3 & ~(a3 >> 63), 0, MEMORY[0x24BEE4AF8]);
  if ((a3 & 0x8000000000000000) == 0)
  {
    v7 = result;
    v8 = a1;
    if (!a3)
    {
LABEL_10:
      v13 = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(swift_allocObject() + 16) = v13;
      v14 = MEMORY[0x22076E6A8](v13, v7 + 32, *((_QWORD *)v7 + 2), 0, 0);
      v19 = specialized Data.init(count:)(v14);
      v20 = v15;
      swift_bridgeObjectRetain();
      _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v19);
      v16 = v19;
      v17 = v20;
      swift_bridgeObjectRelease();
      swift_release();
      isa = Data._bridgeToObjectiveC()().super.isa;
      REMeshDefinitionSetAttributeWithData();

      return (char *)outlined consume of Data._Representation(v16, v17);
    }
    v9 = 0;
    while (1)
    {
      v10 = ++v9 * a2;
      if ((unsigned __int128)(v9 * (__int128)a2) >> 64 != (v9 * a2) >> 63)
        break;
      if (v10 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_12;
      if (v10 > 0x7FFFFFFF)
        goto LABEL_13;
      v12 = *((_QWORD *)v7 + 2);
      v11 = *((_QWORD *)v7 + 3);
      if (v12 >= v11 >> 1)
      {
        result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v7);
        v7 = result;
      }
      *((_QWORD *)v7 + 2) = v12 + 1;
      *(_DWORD *)&v7[4 * v12 + 32] = v10;
      if (a3 == v9)
        goto LABEL_10;
    }
    __break(1u);
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall MeshDefinition.setSkeletonName(_:)(Swift::String a1)
{
  String.utf8CString.getter();
  REMeshDefinitionSetSkeletonName();
  swift_release();
}

uint64_t MeshDefinition.setAttribute(_:accumulatedVertexValence:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E6CC](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t MeshDefinition.setAttribute(_:vertexAdjacencies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E618](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  REMeshDefinitionSetAttributeWithData();

  return outlined consume of Data._Representation(v6, v7);
}

uint64_t static MeshAttributeDescriptor.blendShapeOffset.getter()
{
  return static MeshAttributeDescriptor.positionFloat3.getter(MEMORY[0x24BE26280]);
}

uint64_t static MeshAttributeDescriptor.positionFloat3.getter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  type metadata accessor for MeshAttributeDescriptor();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = v1;
  return result;
}

void implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:)()
{
  JUMPOUT(0x22076E630);
}

uint64_t MeshDefinition.setAttribute(_:blendShapeOffsets:name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  uint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(swift_allocObject() + 16) = v3;
  v4 = MEMORY[0x22076E630](v3, a2 + 32, *(_QWORD *)(a2 + 16), 0, 0);
  v10 = specialized Data.init(count:)(v4);
  v11 = v5;
  swift_bridgeObjectRetain();
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm((uint64_t)&v10);
  v6 = v10;
  v7 = v11;
  swift_release();
  isa = Data._bridgeToObjectiveC()().super.isa;
  String.utf8CString.getter();
  REMeshDefinitionSetCustomAttributeWithData();

  swift_release();
  return outlined consume of Data._Representation(v6, v7);
}

void _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_n(uint64_t a1)
{
  _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C246values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(a1);
}

void _s10Foundation4DataV15_RepresentationO22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_21BA72D0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t, _QWORD, uint64_t *, _QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v1;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x21BA72F18);
  }
  v4(v5, *(_QWORD *)(v2 + 16), &v8, BYTE6(a1));
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v3 = v8;
  v3[1] = v6;
  return swift_bridgeObjectRelease();
}

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)(uint64_t a1)
{
  __asm { BR              X12 }
}

{
  __asm { BR              X12 }
}

{
  __asm { BR              X11 }
}

uint64_t sub_21BA72F9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v1;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  if (!v5)
  {
    __break(1u);
    JUMPOUT(0x21BA731CCLL);
  }
  MEMORY[0x22076E684](*(_QWORD *)(v4 + 16), v5, *(_QWORD *)(v2 + 16), &v8, BYTE6(a1));
  swift_release();
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v3 = v8;
  v3[1] = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_21BA7325C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v9 = v1;
  LOWORD(v10) = a1;
  BYTE2(v10) = BYTE2(a1);
  HIBYTE(v10) = BYTE3(a1);
  v11 = BYTE4(a1);
  v12 = BYTE5(a1);
  v13 = BYTE6(a1);
  if (!v6)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (!v5)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x21BA734B0);
  }
  MEMORY[0x22076E678](*(_QWORD *)(v4 + 16), v6, v5, *(_QWORD *)(v2 + 16), &v9, BYTE6(a1));
  swift_release();
  v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v3 = v9;
  v3[1] = v7;
  return swift_bridgeObjectRelease();
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  Data.InlineSlice.ensureUniqueReference()();
  v9 = *a1;
  v10 = a1[1];
  if ((int)v10 < (int)v9)
  {
    __break(1u);
    goto LABEL_10;
  }
  v11 = __DataStorage._bytes.getter();
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v12 = v11;
  v13 = __DataStorage._offset.getter();
  v14 = v9 - v13;
  if (__OFSUB__(v9, v13))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v15 = __DataStorage._length.getter();
  if (!a3)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (v15 >= v10 - v9)
    v16 = v10 - v9;
  else
    v16 = v15;
  MEMORY[0x22076E684](*(_QWORD *)(a2 + 16), a3, *(_QWORD *)(a5 + 16), v12 + v14, v16);
  swift_bridgeObjectRelease();
  swift_release();
}

void specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  Data.InlineSlice.ensureUniqueReference()();
  v12 = *a1;
  v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_11;
  }
  v14 = __DataStorage._bytes.getter();
  if (!v14)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v15 = v14;
  v16 = __DataStorage._offset.getter();
  v17 = v12 - v16;
  if (__OFSUB__(v12, v16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v18 = __DataStorage._length.getter();
  if (!a3)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!a5)
  {
LABEL_14:
    __break(1u);
    return;
  }
  if (v18 >= v13 - v12)
    v19 = v13 - v12;
  else
    v19 = v18;
  MEMORY[0x22076E678](*(_QWORD *)(a2 + 16), a3, a5, *(_QWORD *)(a7 + 16), v15 + v17, v19);
  swift_bridgeObjectRelease();
  swift_release();
}

void _s10Foundation4DataV11InlineSliceV22withUnsafeMutableBytesyxxSwKXEKlFyt_Tg5177_s17RealityFoundation23MeshAttributeDescriptorC8makeData33_89A8FDC4A276F1EFD5AD996B93AE9C24LL6values4with0B00G0VSayxG_SiSPyxG_SiSvSgSitXEtlFZAJSRyxGXEfU_ySwXEfU_s5SIMD3VySfG_Tg5SPyxGSiSvSgS2iRi_zRi0_zlys5SIMD3VySfGIsgyyyyd_SRyALGSayALGSiTf1ncn_nTm(int *a1, void (*a2)(uint64_t, _QWORD, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, _QWORD, uint64_t, uint64_t);

  Data.InlineSlice.ensureUniqueReference()();
  v10 = *a1;
  v11 = a1[1];
  if ((int)v11 < (int)v10)
  {
    __break(1u);
    goto LABEL_10;
  }
  v18 = a2;
  v12 = __DataStorage._bytes.getter();
  if (!v12)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v13 = v12;
  v14 = __DataStorage._offset.getter();
  v15 = v10 - v14;
  if (__OFSUB__(v10, v14))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v16 = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_12:
    __break(1u);
    return;
  }
  if (v16 >= v11 - v10)
    v17 = v11 - v10;
  else
    v17 = v16;
  v18(a4, *(_QWORD *)(a6 + 16), v13 + v15, v17);
  swift_bridgeObjectRelease();
}

uint64_t specialized Data.init(count:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t specialized MeshDefinition.__allocating_init(attributes:vertexCount:indexCount:customNames:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    v8 = MEMORY[0x24BEE4AF8];
LABEL_17:
    closure #2 in MeshDefinition.init(attributes:vertexCount:indexCount:customNames:)(v8 + 32, a4, &v18);
    swift_bridgeObjectRelease();
    v17 = v18;
    type metadata accessor for MeshDefinition();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v17;
    return result;
  }
  v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
    goto LABEL_16;
LABEL_3:
  v18 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v10 = *(_QWORD *)(MEMORY[0x220769770](i, a1) + 16);
        swift_unknownObjectRelease();
        v18 = v8;
        v12 = *(_QWORD *)(v8 + 16);
        v11 = *(_QWORD *)(v8 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v8 = v18;
        }
        *(_QWORD *)(v8 + 16) = v12 + 1;
        *(_QWORD *)(v8 + 8 * v12 + 32) = v10;
      }
    }
    else
    {
      v13 = 0;
      v14 = *(_QWORD *)(v18 + 16);
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 8 * v13 + 32) + 16);
        v18 = v8;
        v16 = *(_QWORD *)(v8 + 24);
        if (v14 >= v16 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v14 + 1, 1);
          v8 = v18;
        }
        ++v13;
        *(_QWORD *)(v8 + 16) = v14 + 1;
        *(_QWORD *)(v8 + 8 * v14++ + 32) = v15;
      }
      while (v6 != v13);
    }
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_21BA739C4()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(positions:)()
{
  JUMPOUT(0x22076E69CLL);
}

uint64_t sub_21BA739EC()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(normals:)()
{
  JUMPOUT(0x22076E690);
}

uint64_t sub_21BA73A14()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(tangents:)()
{
  JUMPOUT(0x22076E6B4);
}

uint64_t sub_21BA73A3C()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(bitangents:)()
{
  JUMPOUT(0x22076E624);
}

uint64_t sub_21BA73A64()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(uvs:)()
{
  JUMPOUT(0x22076E6C0);
}

uint64_t sub_21BA73A8C()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(colors:)()
{
  JUMPOUT(0x22076E63CLL);
}

{
  JUMPOUT(0x22076E648);
}

uint64_t sub_21BA73AB4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE231F0]);
}

{
  uint64_t *v4;

  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE231F8]);
}

{
  uint64_t *v4;

  return closure #1 in MeshAttributeDescriptor.makeData(custom:name:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x24BE23200]);
}

uint64_t type metadata accessor for MeshModelDefinition()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for MeshInstanceDefinition()
{
  return objc_opt_self();
}

uint64_t sub_21BA73B88()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(skinInfluenceEndIndices:)()
{
  JUMPOUT(0x22076E6A8);
}

uint64_t sub_21BA73BB0()
{
  return swift_deallocObject();
}

uint64_t sub_21BA73BC0()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(accumulatedVertexValence:)()
{
  JUMPOUT(0x22076E6CCLL);
}

uint64_t sub_21BA73BE8()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(vertexAdjacencies:)()
{
  JUMPOUT(0x22076E618);
}

uint64_t sub_21BA73C10()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in MeshAttributeDescriptor.makeData(blendShapeOffsets:)()
{
  JUMPOUT(0x22076E630);
}

uint64_t method lookup function for MeshAttributeDescriptor()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for MeshDefinition()
{
  return objc_opt_self();
}

uint64_t method lookup function for MeshDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeshDefinition.setIndices(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:name:data:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:positions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:normals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:tangents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:bitangents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:uvs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:colors:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of MeshDefinition.setAttribute(_:custom:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of MeshDefinition.setBoundingBox(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of MeshDefinition.setDoubleSided(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t method lookup function for MeshModelDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MeshModelDefinition.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MeshModelDefinition.name.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MeshModelDefinition.name.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(levelOfDetail:minScreenArea:maxViewDepth:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of MeshModelDefinition.append(triangles:materialIndex:levelOfDetail:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t method lookup function for MeshInstanceDefinition()
{
  return swift_lookUpClassMethod();
}

uint64_t BillboardAction.upDirection.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BillboardAction.upDirection.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = result;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*BillboardAction.upDirection.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.forwardDirection.getter()
{
  __n128 *v0;

  return v0[2];
}

void BillboardAction.forwardDirection.setter(__n128 a1)
{
  __n128 *v1;

  v1[2] = a1;
}

uint64_t (*BillboardAction.forwardDirection.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardAction.rotationAxis.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t BillboardAction.rotationAxis.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 48) = result;
  *(_QWORD *)(v3 + 56) = a2;
  *(_BYTE *)(v3 + 64) = a3 & 1;
  return result;
}

uint64_t (*BillboardAction.rotationAxis.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double BillboardAction.Transition.duration.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void BillboardAction.Transition.duration.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*BillboardAction.Transition.duration.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.Transition.timingFunction.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[2].n128_u32[0];
  v3 = v1[2].n128_u8[4];
  result = v1[1];
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  a1[1].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.Transition.timingFunction.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  v3 = a1[1].n128_u8[4];
  result = *a1;
  v1[1] = *a1;
  v1[2].n128_u32[0] = v2;
  v1[2].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.Transition.timingFunction.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.Transition.init(duration:timingFunction:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>, double a3@<D0>)
{
  unsigned __int32 v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = a1[1].n128_u32[0];
  v4 = a1[1].n128_u8[4];
  a2->n128_f64[0] = a3;
  result = *a1;
  a2[1] = *a1;
  a2[2].n128_u32[0] = v3;
  a2[2].n128_u8[4] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BillboardAction.Transition.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x7546676E696D6974;
  else
    return 0x6E6F697461727564;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BillboardAction.Transition.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized BillboardAction.Transition.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BillboardAction.Transition.CodingKeys()
{
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BillboardAction.Transition.CodingKeys()
{
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t BillboardAction.Transition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BillboardAction.Transition.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v1 + 16);
  v14 = *(_QWORD *)(v1 + 24);
  v9 = *(_DWORD *)(v1 + 32);
  v12 = *(unsigned __int8 *)(v1 + 36);
  v13 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v16 = v8;
    v17 = v14;
    v18 = v13;
    v19 = v12;
    v15 = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition.CodingKeys, &unk_24DFA5130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition.CodingKeys, &unk_24DFA5130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition.CodingKeys, &unk_24DFA5130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition.CodingKeys, &unk_24DFA5130);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction, &type metadata for AnimationTimingFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction, &type metadata for AnimationTimingFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction;
  if (!lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationTimingFunction, &type metadata for AnimationTimingFunction);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimingFunction and conformance AnimationTimingFunction);
  }
  return result;
}

uint64_t BillboardAction.Transition.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  __int128 v13;
  _BYTE v15[16];
  __int128 v16;
  int v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BillboardAction.Transition.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.Transition.CodingKeys and conformance BillboardAction.Transition.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    LOBYTE(v16) = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    v15[15] = 1;
    lazy protocol witness table accessor for type AnimationTimingFunction and conformance AnimationTimingFunction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v17;
    v12 = v18;
    v13 = v16;
    *(_QWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v13;
    *(_DWORD *)(a2 + 32) = v11;
    *(_BYTE *)(a2 + 36) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BillboardAction.Transition@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BillboardAction.Transition.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BillboardAction.Transition(_QWORD *a1)
{
  return BillboardAction.Transition.encode(to:)(a1);
}

__n128 BillboardAction.transitionIn.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[7].n128_u32[0];
  v3 = v1[7].n128_u8[4];
  a1->n128_u64[0] = v1[5].n128_u64[0];
  result = v1[6];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.transitionIn.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[2].n128_u32[0];
  v3 = a1[2].n128_u8[4];
  v1[5].n128_u64[0] = a1->n128_u64[0];
  result = a1[1];
  v1[6] = result;
  v1[7].n128_u32[0] = v2;
  v1[7].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.transitionIn.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardAction.transitionOut.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[10].n128_u32[0];
  v3 = v1[10].n128_u8[4];
  a1->n128_u64[0] = v1[8].n128_u64[0];
  result = v1[9];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u8[4] = v3;
  return result;
}

__n128 BillboardAction.transitionOut.setter(__n128 *a1)
{
  __n128 *v1;
  unsigned __int32 v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = a1[2].n128_u32[0];
  v3 = a1[2].n128_u8[4];
  v1[8].n128_u64[0] = a1->n128_u64[0];
  result = a1[1];
  v1[9] = result;
  v1[10].n128_u32[0] = v2;
  v1[10].n128_u8[4] = v3;
  return result;
}

uint64_t (*BillboardAction.transitionOut.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardAction.animatedValueType.getter()
{
  return MEMORY[0x24BEE14E8];
}

__n128 BillboardAction.init(upDirection:forwardDirection:rotationAxis:transitionIn:transitionOut:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10@<Q0>)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int32 v17;
  unsigned __int8 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 result;
  unsigned __int8 v23;
  unsigned __int32 v24;

  v14 = *(_QWORD *)a7;
  v15 = *(_QWORD *)(a7 + 16);
  v16 = *(_QWORD *)(a7 + 24);
  v17 = *(_DWORD *)(a7 + 32);
  v18 = *(_BYTE *)(a7 + 36);
  v19 = *(_QWORD *)a8;
  v20 = *(_QWORD *)(a8 + 16);
  v21 = *(_QWORD *)(a8 + 24);
  v23 = *(_BYTE *)(a8 + 36);
  v24 = *(_DWORD *)(a8 + 32);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(upDirection:forwardDirection:rotationAxis:transitionIn:transitionOut:));
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u8[0] = a3 & 1;
  result = a10;
  a9[2] = a10;
  a9[3].n128_u64[0] = a4;
  a9[3].n128_u64[1] = a5;
  a9[4].n128_u8[0] = a6 & 1;
  a9[5].n128_u64[0] = v14;
  a9[6].n128_u64[0] = v15;
  a9[6].n128_u64[1] = v16;
  a9[7].n128_u32[0] = v17;
  a9[7].n128_u8[4] = v18;
  a9[8].n128_u64[0] = v19;
  a9[9].n128_u64[0] = v20;
  a9[9].n128_u64[1] = v21;
  a9[10].n128_u32[0] = v24;
  a9[10].n128_u8[4] = v23;
  return result;
}

__n128 BillboardAction.init(transitionIn:transitionOut:)@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  __int128 v14;
  __n128 v15;
  __n128 result;
  __n128 v17;
  __int128 v18;

  v4 = *a1;
  v5 = a1[2];
  v6 = a1[3];
  v7 = *((_DWORD *)a1 + 8);
  v8 = *((_BYTE *)a1 + 36);
  v9 = *a2;
  v10 = a2[2];
  v11 = a2[3];
  v12 = *((_DWORD *)a2 + 8);
  v13 = *((_BYTE *)a2 + 36);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(transitionIn:transitionOut:));
  v18 = v14;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #1 of BillboardAction.init(transitionIn:transitionOut:));
  v17 = v15;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #2 of BillboardAction.init(transitionIn:transitionOut:));
  *(_OWORD *)a3 = v18;
  *(_BYTE *)(a3 + 16) = 0;
  result = v17;
  *(__n128 *)(a3 + 32) = v17;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 1;
  *(_QWORD *)(a3 + 80) = v4;
  *(_QWORD *)(a3 + 96) = v5;
  *(_QWORD *)(a3 + 104) = v6;
  *(_DWORD *)(a3 + 112) = v7;
  *(_BYTE *)(a3 + 116) = v8;
  *(_QWORD *)(a3 + 128) = v9;
  *(_QWORD *)(a3 + 144) = v10;
  *(_QWORD *)(a3 + 152) = v11;
  *(_DWORD *)(a3 + 160) = v12;
  *(_BYTE *)(a3 + 164) = v13;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BillboardAction.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BillboardAction.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BillboardAction.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BillboardAction.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance BillboardAction.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BillboardAction.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance BillboardAction.CodingKeys(_QWORD *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0xEC0000006E496E6FLL;
  if (*v1)
    v2 = 0xED000074754F6E6FLL;
  *a1 = 0x697469736E617274;
  a1[1] = v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BillboardAction.CodingKeys()
{
  return 0x697469736E617274;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BillboardAction.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of BillboardAction.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BillboardAction.CodingKeys()
{
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BillboardAction.CodingKeys()
{
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t BillboardAction.isUpToDate(_:)(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  float v18;
  float v19;
  uint64_t result;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  float v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  float v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v2 = 0;
  v4 = *a1;
  v3 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  v7 = a1[4];
  v6 = a1[5];
  v8 = *((unsigned __int8 *)a1 + 48);
  v9 = *((_OWORD *)a1 + 4);
  v11 = *v1;
  v10 = v1[1];
  v12 = *((unsigned __int8 *)v1 + 16);
  v13 = *((_OWORD *)v1 + 2);
  v15 = v1[6];
  v14 = v1[7];
  v16 = 1;
  v17 = *((unsigned __int8 *)v1 + 64);
  while (!v16)
  {
    v16 = 0;
    result = 0;
    if (v2 == 2)
      return result;
LABEL_3:
    ++v2;
  }
  v33 = v9;
  v18 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v34 = v13;
  v19 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
  v16 = v18 == v19;
  if (v2 != 2)
    goto LABEL_3;
  if (v18 != v19)
    return 0;
  if ((v5 & 1) == 0)
  {
    if ((v17 & 1) == 0)
    {
      v21 = 0;
      *(_QWORD *)&v22 = v4;
      *((_QWORD *)&v22 + 1) = v3;
      *(_QWORD *)&v23 = v15;
      *((_QWORD *)&v23 + 1) = v14;
      LOBYTE(v17) = 1;
      while (1)
      {
        if ((v17 & 1) != 0)
        {
          v31 = v22;
          v24 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          v32 = v23;
          v17 = v24 == *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
          if (v21 == 2)
            goto LABEL_9;
        }
        else
        {
          LOBYTE(v17) = 0;
          result = 0;
          if (v21 == 2)
            return result;
        }
        ++v21;
      }
    }
    return 0;
  }
LABEL_9:
  if (((v17 ^ 1 | v8) & 1) != 0)
    return v17 & v12;
  if ((v12 & 1) != 0)
    return 0;
  v25 = 0;
  *(_QWORD *)&v26 = v7;
  *((_QWORD *)&v26 + 1) = v6;
  *(_QWORD *)&v27 = v11;
  *((_QWORD *)&v27 + 1) = v10;
  while (1)
  {
    v29 = v26;
    v28 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
    v30 = v27;
    result = v28 == *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
    if (v25 == 2)
      break;
    while (1)
    {
      ++v25;
      if ((result & 1) != 0)
        break;
      result = 0;
      if (v25 == 2)
        return result;
    }
  }
  return result;
}

Swift::Float __swiftcall BillboardAction.transitionInValue(initialValue:normalizedTime:eventDuration:)(Swift::Float initialValue, Swift::Double normalizedTime, Swift::Double eventDuration)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;

  v4 = initialValue;
  if (normalizedTime > 0.0)
  {
    initialValue = 1.0;
    if (normalizedTime <= 1.0 && eventDuration > 0.0)
    {
      v5 = normalizedTime / (*(double *)(v3 + 80) / eventDuration);
      if (v5 <= 0.0)
        v5 = 0.0;
      if (v5 <= 1.0)
        v6 = v5;
      else
        v6 = 1.0;
      AnimationTimingFunction.coreEasingFunction.getter();
      if (*(_QWORD *)(v7 + 16))
      {
        REEasingFunctionEvaluateEx();
        v6 = v8;
      }
      swift_release();
      return v6 + (float)((float)(1.0 - v6) * v4);
    }
  }
  return initialValue;
}

Swift::Float __swiftcall BillboardAction.transitionOutValue(initialValue:normalizedTime:eventDuration:)(Swift::Float initialValue, Swift::Double normalizedTime, Swift::Double eventDuration)
{
  uint64_t v3;
  float v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;

  v4 = initialValue;
  if (normalizedTime < 1.0)
  {
    initialValue = 1.0;
    if (normalizedTime >= 0.0 && eventDuration > 0.0)
    {
      v5 = (*(double *)(v3 + 128) / eventDuration + normalizedTime + -1.0) / (*(double *)(v3 + 128) / eventDuration);
      if (v5 <= 0.0)
        v5 = 0.0;
      if (v5 <= 1.0)
        v6 = v5;
      else
        v6 = 1.0;
      AnimationTimingFunction.coreEasingFunction.getter();
      if (*(_QWORD *)(v7 + 16))
      {
        REEasingFunctionEvaluateEx();
        v6 = v8;
      }
      swift_release();
      return (float)(1.0 - v6) + (float)(v6 * v4);
    }
  }
  return initialValue;
}

uint64_t BillboardAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  char v27;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BillboardAction.CodingKeys>);
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 96);
  v7 = *(_QWORD *)(v1 + 104);
  v9 = *(_DWORD *)(v1 + 112);
  v26 = *(unsigned __int8 *)(v1 + 116);
  v10 = *(_QWORD *)(v1 + 128);
  v11 = *(_QWORD *)(v1 + 144);
  v17 = *(_QWORD *)(v1 + 152);
  v18 = v11;
  LODWORD(v11) = *(_DWORD *)(v1 + 160);
  v15 = *(unsigned __int8 *)(v1 + 164);
  v16 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v21 = v6;
  v22 = v8;
  v23 = v7;
  v24 = v9;
  v25 = v26;
  v27 = 0;
  lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition();
  v12 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    v21 = v10;
    v22 = v18;
    v23 = v17;
    v24 = v16;
    v25 = v15;
    v27 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v5, v3);
}

uint64_t BillboardAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  unsigned __int8 v27;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BillboardAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of BillboardAction.init(from:));
  v22 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v23 = 0;
    lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v24;
    v20 = *((_QWORD *)&v25 + 1);
    v21 = v25;
    v18 = v27;
    v19 = v26;
    v23 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v11 = v24;
    v12 = v26;
    v13 = v27;
    v14 = v25;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    *(_OWORD *)(a2 + 32) = v22;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    *(_BYTE *)(a2 + 64) = 1;
    *(_QWORD *)(a2 + 80) = v10;
    v15 = v20;
    *(_QWORD *)(a2 + 96) = v21;
    *(_QWORD *)(a2 + 104) = v15;
    *(_DWORD *)(a2 + 112) = v19;
    *(_BYTE *)(a2 + 116) = v18;
    *(_QWORD *)(a2 + 128) = v11;
    *(_OWORD *)(a2 + 144) = v14;
    *(_DWORD *)(a2 + 160) = v12;
    *(_BYTE *)(a2 + 164) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for EntityAction.animatedValueType.getter in conformance BillboardAction()
{
  return MEMORY[0x24BEE14E8];
}

uint64_t protocol witness for Decodable.init(from:) in conformance BillboardAction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BillboardAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BillboardAction(_QWORD *a1)
{
  return BillboardAction.encode(to:)(a1);
}

void *BillboardActionHandler.actionStarted(event:)(void *__src)
{
  uint64_t v1;
  void *result;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  char v42;
  _QWORD v43[48];

  result = memcpy(v43, __src, 0x170uLL);
  if (v43[23])
  {
    swift_retain();
    v3 = outlined retain of ActionEvent<BillboardAction>((uint64_t)v43);
    specialized ActionEvent.animationState.getter(&v36, v3, v4);
    outlined release of ActionEvent<BillboardAction>((uint64_t)v43);
    if (!*((_QWORD *)&v37 + 1))
    {
      swift_release();
      return (void *)outlined destroy of AnimationStateProtocol?((uint64_t)&v36);
    }
    v32[0] = v1;
    outlined init with take of BindableDataInternal(&v36, (uint64_t)v33);
    v5 = v34;
    v6 = v35;
    __swift_project_boxed_opaque_existential_1(v33, v34);
    v7 = *(void (**)(uint64_t, uint64_t))(v6 + 24);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v9 = type metadata accessor for Optional();
    v32[1] = v32;
    v10 = *(_QWORD *)(v9 - 8);
    MEMORY[0x24BDAC7A8](v9);
    v12 = (char *)v32 - v11;
    v7(v5, v6);
    v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      swift_release();
    }
    else
    {
      *((_QWORD *)&v37 + 1) = AssociatedTypeWitness;
      *(_QWORD *)&v38 = swift_getAssociatedConformanceWitness();
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v36);
      (*(void (**)(uint64_t *, char *, uint64_t))(v13 + 32))(boxed_opaque_existential_1, v12, AssociatedTypeWitness);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v15 = v43[2];
        v16 = v43[3];
        v17 = v43[4];
        v19 = v43[6];
        v18 = v43[7];
        v20 = v43[8];
        v21 = v43[9];
        v22 = v43[10];
        swift_retain();
        specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v36);
        swift_release();
        if ((v42 & 1) == 0)
        {
          v26 = v41;
          v27 = v37;
          v28 = v38;
          v29 = v39;
          v30 = v40;
          v31 = v32[0];
          *(_OWORD *)v32[0] = v36;
          *(_OWORD *)(v31 + 16) = v27;
          *(_OWORD *)(v31 + 32) = v28;
          *(_OWORD *)(v31 + 48) = v29;
          *(_OWORD *)(v31 + 64) = v30;
          *(_DWORD *)(v31 + 80) = v26;
          *(_BYTE *)(v31 + 84) = 0;
          *(_QWORD *)&v36 = v20;
          *((_QWORD *)&v36 + 1) = v21;
          v37 = v22 & 1;
          *(_QWORD *)&v38 = v15;
          *((_QWORD *)&v38 + 1) = v16;
          v39 = v17 & 1;
          *(_QWORD *)&v40 = v19;
          *((_QWORD *)&v40 + 1) = v18;
          v41 = v26;
          v42 = 0;
          swift_retain();
          specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v36);
          swift_release_n();
          return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
        }
        *(_QWORD *)&v36 = 0;
        *((_QWORD *)&v36 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(60);
        v23._countAndFlagsBits = 0x2072656C646E6148;
        v23._object = (void *)0xEC00000020726F66;
        String.append(_:)(v23);
        v32[2] = &type metadata for BillboardAction;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
        v24._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v25._object = (void *)0x800000021BE84890;
        v25._countAndFlagsBits = 0xD00000000000002ELL;
        String.append(_:)(v25);
        specialized static AnimationLogger.logError(_:)(v36, *((_QWORD *)&v36 + 1));
        swift_bridgeObjectRelease();
      }
      swift_release();
    }
    return (void *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  }
  return result;
}

uint64_t BillboardActionHandler.actionUpdated(event:)(void *__src)
{
  uint64_t v1;
  unint64_t v2;
  unsigned __int128 v3;
  char v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  unsigned __int128 v20;
  Swift::Double v21;
  uint64_t v22;
  __n128 v23;
  Swift::Float v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  Swift::Double v32;
  unsigned __int128 v33;
  float v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int128 v46;
  unsigned __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  unsigned __int128 v52;
  char v53;
  _BYTE v54[15];
  unsigned __int128 v55;
  unsigned __int128 v56;
  _BYTE v57[33];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  int v62;
  _OWORD v63[23];
  unsigned __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int128 v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int128 v70;
  int v71;
  char v72;
  _BYTE v73[16];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  _QWORD v81[2];
  double v82;
  char v83;

  memcpy(v63, __src, sizeof(v63));
  *((_QWORD *)&v46 + 1) = *((_QWORD *)&v63[1] + 1);
  v2 = *(_QWORD *)&v63[1];
  v48 = LOBYTE(v63[2]);
  v81[0] = *(_QWORD *)((char *)&v63[2] + 1);
  *(_QWORD *)((char *)v81 + 7) = *((_QWORD *)&v63[2] + 1);
  v47 = v63[3];
  v3 = v63[4];
  v4 = v63[5];
  v74 = *(_OWORD *)((char *)&v63[5] + 1);
  v75 = *(_OWORD *)((char *)&v63[6] + 1);
  v80 = *(_DWORD *)((char *)&v63[11] + 1);
  v78 = *(_OWORD *)((char *)&v63[9] + 1);
  v79 = *(_OWORD *)((char *)&v63[10] + 1);
  v76 = *(_OWORD *)((char *)&v63[7] + 1);
  v77 = *(_OWORD *)((char *)&v63[8] + 1);
  if (!*((_QWORD *)&v63[11] + 1))
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)&v52, "Handler for ");
    BYTE13(v52) = 0;
    HIWORD(v52) = -5120;
    *(_QWORD *)&v64 = &type metadata for BillboardAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v10._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x800000021BE844C0;
    v11._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v11);
    specialized static AnimationLogger.logError(_:)(v52, *((_QWORD *)&v52 + 1));
    return swift_bridgeObjectRelease();
  }
  swift_retain_n();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v52);
  swift_release();
  if ((v57[20] & 1) != 0)
  {
    *(_QWORD *)&v52 = 0;
    *((_QWORD *)&v52 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(78);
    v5._countAndFlagsBits = 0x2072656C646E6148;
    v5._object = (void *)0xEC00000020726F66;
    String.append(_:)(v5);
    *(_QWORD *)&v64 = &type metadata for BillboardAction;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v6._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0xD00000000000003DLL;
    v7._object = (void *)0x800000021BE84850;
    String.append(_:)(v7);
    REEntityGetName();
    v8._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 39;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    specialized static AnimationLogger.logError(_:)(v52, *((_QWORD *)&v52 + 1));
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v13 = v2;
  v14 = *(_DWORD *)&v57[16];
  v15 = v56;
  v16 = v53;
  v17 = *(_QWORD *)v57;
  v18 = *(_QWORD *)&v57[8];
  v59 = v77;
  v60 = v78;
  v61 = v79;
  *(_OWORD *)&v57[1] = v74;
  v19 = v52;
  *(_OWORD *)&v57[17] = v75;
  v20 = v55;
  *(_QWORD *)&v46 = v13;
  v52 = __PAIR128__(*((unint64_t *)&v46 + 1), v13);
  v53 = v48;
  *(_QWORD *)v54 = v81[0];
  *(_QWORD *)&v54[7] = *(_QWORD *)((char *)v81 + 7);
  v55 = v47;
  v56 = v3;
  v57[0] = v4;
  v62 = v80;
  v58 = v76;
  v64 = v19;
  LOBYTE(v65) = v16 & 1;
  v67 = v20;
  LOBYTE(v68) = v15 & 1;
  *(_QWORD *)&v70 = v17;
  *((_QWORD *)&v70 + 1) = v18;
  v71 = v14;
  if ((BillboardAction.isUpToDate(_:)((uint64_t *)&v64) & 1) == 0)
  {
    v64 = v3;
    v65 = v4 & 1;
    v66 = 0;
    v67 = v46;
    v68 = v48 & 1;
    v69 = 0;
    v70 = v47;
    v71 = v14;
    v72 = 0;
    swift_retain();
    specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)&v64);
    swift_release();
  }
  outlined init with take of Transform?((uint64_t)&v63[16] + 8, (uint64_t)v73, &demangling cache variable for type metadata for Double?);
  outlined init with take of Transform?((uint64_t)v73, (uint64_t)&v82, &demangling cache variable for type metadata for Double?);
  if (v83 == 1)
    return swift_release();
  v21 = v82;
  v22 = outlined retain of ActionEvent<BillboardAction>((uint64_t)v63);
  specialized ActionEvent.animationState.getter(&v52, v22, v23);
  outlined release of ActionEvent<BillboardAction>((uint64_t)v63);
  if (!*(_QWORD *)&v54[7])
  {
    swift_release();
    return outlined destroy of AnimationStateProtocol?((uint64_t)&v52);
  }
  outlined init with take of BindableDataInternal((__int128 *)&v52, (uint64_t)v49);
  if ((*(_BYTE *)(v1 + 84) & 1) != 0)
    goto LABEL_17;
  v24 = *(float *)(v1 + 80);
  v25 = v51;
  v45 = v50;
  __swift_project_boxed_opaque_existential_1(v49, v50);
  v44 = v25;
  v42 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = type metadata accessor for Optional();
  v43 = &v38;
  v40 = *(_QWORD *)(v27 - 8);
  v41 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (void (*)(uint64_t, uint64_t))((char *)&v38 - v28);
  v42(v45, v44);
  v39 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v42 = v29;
  if (v30((char *)v29, 1, AssociatedTypeWitness) != 1)
  {
    *(_QWORD *)&v54[7] = AssociatedTypeWitness;
    *(_QWORD *)&v55 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
    (*(void (**)(uint64_t *, void (*)(uint64_t, uint64_t), uint64_t))(v39 + 32))(boxed_opaque_existential_1, v42, AssociatedTypeWitness);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimatableData);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v59 = v77;
      v60 = v78;
      v61 = v79;
      *(_OWORD *)&v57[1] = v74;
      *(_OWORD *)&v57[17] = v75;
      v32 = *(double *)&v63[13];
      v33 = v46;
      v52 = v46;
      v53 = v48;
      *(_QWORD *)v54 = v81[0];
      *(_QWORD *)&v54[7] = *(_QWORD *)((char *)v81 + 7);
      v55 = v47;
      v56 = v3;
      v57[0] = v4;
      v62 = v80;
      v58 = v76;
      v34 = BillboardAction.transitionInValue(initialValue:normalizedTime:eventDuration:)(v24, v21, *(Swift::Double *)&v63[13]);
      v55 = v47;
      v59 = v77;
      v60 = v78;
      v61 = v79;
      *(_OWORD *)&v57[1] = v74;
      *(_OWORD *)&v57[17] = v75;
      v52 = v33;
      v53 = v48;
      *(_QWORD *)v54 = v81[0];
      *(_QWORD *)&v54[7] = *(_QWORD *)((char *)v81 + 7);
      v56 = v3;
      v57[0] = v4;
      v62 = v80;
      v58 = v76;
      v35 = v34 * BillboardAction.transitionOutValue(initialValue:normalizedTime:eventDuration:)(v24, v21, v32);
      v36 = v50;
      v37 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      *(float *)&v52 = v35;
      (*(void (**)(unsigned __int128 *, _QWORD, uint64_t, uint64_t))(v37 + 64))(&v52, MEMORY[0x24BEE14E8], v36, v37);
    }
LABEL_17:
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
  }
  (*(void (**)(_QWORD, uint64_t))(v40 + 8))(v42, v41);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
}

uint64_t BillboardActionHandler.actionEnded(event:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  Swift::String v3;
  Swift::String v4;
  _QWORD v5[12];
  _QWORD v6[10];
  char v7;

  if (*(_QWORD *)(a1 + 184))
  {
    outlined init with take of Transform?(v1, (uint64_t)v5, &demangling cache variable for type metadata for BillboardComponent?);
    result = outlined init with take of Transform?((uint64_t)v5, (uint64_t)v6, &demangling cache variable for type metadata for BillboardComponent?);
    if ((v7 & 1) == 0)
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v5);
      return swift_release();
    }
  }
  else
  {
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    strcpy((char *)v6, "Handler for ");
    BYTE5(v6[1]) = 0;
    HIWORD(v6[1]) = -5120;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BillboardAction.Type);
    v3._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._object = (void *)0x800000021BE844C0;
    v4._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v4);
    specialized static AnimationLogger.logError(_:)(v6[0], v6[1]);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.CodingKeys, &type metadata for BillboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.CodingKeys, &type metadata for BillboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.CodingKeys, &type metadata for BillboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.CodingKeys, &type metadata for BillboardAction.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.CodingKeys and conformance BillboardAction.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BillboardAction.Transition and conformance BillboardAction.Transition()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition, &type metadata for BillboardAction.Transition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition;
  if (!lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BillboardAction.Transition, &type metadata for BillboardAction.Transition);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BillboardAction.Transition and conformance BillboardAction.Transition);
  }
  return result;
}

__n128 __swift_memcpy165_16(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 157) = *(_QWORD *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 165))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 116);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BillboardAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 164) = 0;
    *(_DWORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 - 246;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 165) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 165) = 0;
    if (a2)
      *(_BYTE *)(result + 116) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BillboardAction()
{
  return &type metadata for BillboardAction;
}

__n128 __swift_memcpy37_16(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardAction.Transition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF6 && *(_BYTE *)(a1 + 37))
    return (*(_DWORD *)a1 + 246);
  v3 = *(unsigned __int8 *)(a1 + 36);
  if (v3 <= 0xA)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BillboardAction.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 246;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 37) = 1;
  }
  else
  {
    if (a3 >= 0xF6)
      *(_BYTE *)(result + 37) = 0;
    if (a2)
      *(_BYTE *)(result + 36) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BillboardAction.Transition()
{
  return &type metadata for BillboardAction.Transition;
}

ValueMetadata *type metadata accessor for BillboardAction.CodingKeys()
{
  return &type metadata for BillboardAction.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BillboardAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA75E10 + 4 * byte_21BE59595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA75E44 + 4 * byte_21BE59590[v4]))();
}

uint64_t sub_21BA75E44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA75E4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA75E54);
  return result;
}

uint64_t sub_21BA75E60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA75E68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA75E6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA75E74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for BillboardAction.Transition.CodingKeys()
{
  return &unk_24DFA5130;
}

uint64_t specialized BillboardAction.Transition.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7546676E696D6974 && a2 == 0xEE006E6F6974636ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t outlined retain of ActionEvent<BillboardAction>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of ActionEvent<BillboardAction>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

__n128 __swift_memcpy85_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardActionHandler(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 85))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BillboardActionHandler(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 84) = 0;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 85) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BillboardActionHandler()
{
  return &type metadata for BillboardActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in BillboardActionHandler()
{
  return &protocol witness table for BillboardAction;
}

uint64_t __RKVisibilityShowScaleAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityShowScaleAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t __RKVisibilityShowScaleDownAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t type metadata accessor for __RKVisibilityShowScaleAnimation()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKVisibilityShowScaleDownAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 105, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #0 of static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 89, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowScaleDownAnimation.createVisibilityShowScaleDownAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  }
  else
  {
    v33._rawValue = (void *)MEMORY[0x24BEE4AF8];
  }
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_16;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_16:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 127, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 124, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 53, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityShowScaleAnimation.createVisibilityShowScaleAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PhysicsJoint.addToSimulation()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v5;
  uint64_t v7[5];

  v7[4] = a2;
  v7[3] = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(boxed_opaque_existential_1, v2, a1);
  v5 = specialized static PhysicsJointCreator.addToSimulation(_:)(v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  return v5;
}

uint64_t PhysicsFixedJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsFixedJoint.pin0.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsFixedJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsFixedJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsFixedJoint.pin1.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsFixedJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsFixedJoint.checksForInternalCollisions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsFixedJoint.isActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t PhysicsFixedJoint.init(pin0:pin1:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 160) = 0;
  outlined init with take of GeometricPin(a1, a3);
  return outlined init with take of GeometricPin(a2, a3 + 80);
}

uint64_t static PhysicsFixedJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;

  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    v4 = *(_BYTE *)(a1 + 161) ^ *(_BYTE *)(a2 + 161) ^ 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t protocol witness for PhysicsJoint.pin0.getter in conformance PhysicsFixedJoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t protocol witness for PhysicsJoint.pin0.setter in conformance PhysicsFixedJoint(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t protocol witness for PhysicsJoint.pin1.getter in conformance PhysicsFixedJoint@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t protocol witness for PhysicsJoint.pin1.setter in conformance PhysicsFixedJoint(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*protocol witness for PhysicsJoint.pin1.modify in conformance PhysicsFixedJoint())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for PhysicsJoint.checksForInternalCollisions.getter in conformance PhysicsFixedJoint()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t protocol witness for PhysicsJoint.isActive.getter in conformance PhysicsFixedJoint()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  char v4;

  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    v4 = *(_BYTE *)(a1 + 161) ^ *(_BYTE *)(a2 + 161) ^ 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t (*PhysicsSphericalJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsSphericalJoint.angularLimitInYZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsRevoluteJoint.pin0.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsRevoluteJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsRevoluteJoint.pin1.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsRevoluteJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.checksForInternalCollisions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsRevoluteJoint.checksForInternalCollisions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsRevoluteJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsRevoluteJoint.isActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t PhysicsRevoluteJoint.angularLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 164);
}

uint64_t PhysicsRevoluteJoint.angularLimit.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 164) = result;
  *(_BYTE *)(v2 + 172) = a2 & 1;
  return result;
}

uint64_t (*PhysicsRevoluteJoint.angularLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

BOOL static PhysicsRevoluteJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsRevoluteJoint(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

uint64_t (*PhysicsPrismaticJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*PhysicsPrismaticJoint.linearLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsSphericalJoint.init(pin0:pin1:angularLimitInYZ:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t result;

  *(_BYTE *)(a6 + 161) = 0;
  outlined init with take of GeometricPin(a1, a6);
  result = outlined init with take of GeometricPin(a2, a6 + 80);
  *(_QWORD *)(a6 + 164) = a3;
  *(_BYTE *)(a6 + 172) = a4 & 1;
  *(_BYTE *)(a6 + 160) = a5;
  return result;
}

BOOL static PhysicsPrismaticJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PhysicsRevoluteJoint.== infix(_:_:)(a1, a2);
}

uint64_t PhysicsDistanceJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsDistanceJoint.pin0.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsDistanceJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsDistanceJoint.pin1.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsDistanceJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.checksForInternalCollisions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsDistanceJoint.checksForInternalCollisions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsDistanceJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.isActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

float PhysicsDistanceJoint.distanceLimit.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 164);
}

void PhysicsDistanceJoint.distanceLimit.setter(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 164) = a1;
  *(float *)(v2 + 168) = a2;
}

uint64_t (*PhysicsDistanceJoint.distanceLimit.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float PhysicsDistanceJoint.tolerance.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 172);
}

void PhysicsDistanceJoint.tolerance.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 172) = a1;
}

uint64_t (*PhysicsDistanceJoint.tolerance.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsDistanceJoint.init(pin0:pin1:distanceLimit:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  uint64_t result;

  *(_BYTE *)(a4 + 161) = 0;
  *(_DWORD *)(a4 + 172) = 1008981770;
  outlined init with take of GeometricPin(a1, a4);
  result = outlined init with take of GeometricPin(a2, a4 + 80);
  *(float *)(a4 + 164) = a5;
  *(float *)(a4 + 168) = a6;
  *(_BYTE *)(a4 + 160) = a3;
  return result;
}

uint64_t PhysicsCustomJoint.pin0.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1, a1);
}

uint64_t PhysicsCustomJoint.pin0.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1);
}

uint64_t (*PhysicsCustomJoint.pin0.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.pin1.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of GeometricPin(v1 + 80, a1);
}

uint64_t PhysicsCustomJoint.pin1.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of GeometricPin(a1, v1 + 80);
}

uint64_t (*PhysicsCustomJoint.pin1.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.checksForInternalCollisions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 160);
}

uint64_t PhysicsCustomJoint.checksForInternalCollisions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 160) = result;
  return result;
}

uint64_t (*PhysicsCustomJoint.checksForInternalCollisions.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.isActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 161);
}

uint64_t static PhysicsCustomJoint.MotionLimit.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8) == 1)
  {
    v5 = v3 == 0;
    if (v3)
      v6 = 0;
    else
      v6 = *((unsigned __int8 *)a2 + 8);
    if (v5)
      v4 = 0;
    if (v2)
      return v4;
    else
      return v6;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  else
  {
    v8 = *(float *)&v2 == *(float *)&v3;
    return COERCE_FLOAT(HIDWORD(*a1)) == *((float *)&v3 + 1) && v8;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PhysicsCustomJoint.MotionLimit(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  _BOOL4 v8;

  v2 = *a1;
  v3 = *a2;
  v4 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a1 + 8) == 1)
  {
    v5 = v3 == 0;
    if (v3)
      v6 = 0;
    else
      v6 = *((unsigned __int8 *)a2 + 8);
    if (v5)
      v4 = 0;
    if (v2)
      return v4;
    else
      return v6;
  }
  else if ((v4 & 1) != 0)
  {
    return 0;
  }
  else
  {
    v8 = *(float *)&v2 == *(float *)&v3;
    return COERCE_FLOAT(HIDWORD(*a1)) == *((float *)&v3 + 1) && v8;
  }
}

void PhysicsCustomJoint.linearMotionAlongX.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 172);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 164);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongX.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 164) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 172) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.linearMotionAlongY.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 184);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 176);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongY.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 176) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 184) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.linearMotionAlongZ.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 196);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 188);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.linearMotionAlongZ.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 188) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 196) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.linearMotionAlongZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundX.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 208);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 200);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundX.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 200) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 208) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundX.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundY.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 220);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 212);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundY.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 212) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 220) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundY.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void PhysicsCustomJoint.angularMotionAroundZ.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 232);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 224);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t PhysicsCustomJoint.angularMotionAroundZ.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 224) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 232) = v2;
  return result;
}

uint64_t (*PhysicsCustomJoint.angularMotionAroundZ.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t PhysicsCustomJoint.init(pin0:pin1:linearMotionAlongX:linearMotionAlongY:linearMotionAlongZ:angularMotionAroundX:angularMotionAroundY:angularMotionAroundZ:checksForInternalCollisions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v12 = *a3;
  v13 = *((_BYTE *)a3 + 8);
  v14 = *a4;
  v15 = *((_BYTE *)a4 + 8);
  v16 = *a5;
  v17 = *((_BYTE *)a5 + 8);
  v18 = *a6;
  v19 = *((_BYTE *)a6 + 8);
  v24 = *a7;
  v23 = *((_BYTE *)a7 + 8);
  v22 = *a8;
  v21 = *((_BYTE *)a8 + 8);
  *(_BYTE *)(a9 + 161) = 0;
  outlined init with take of GeometricPin(a1, a9);
  result = outlined init with take of GeometricPin(a2, a9 + 80);
  *(_QWORD *)(a9 + 164) = v12;
  *(_BYTE *)(a9 + 172) = v13;
  *(_QWORD *)(a9 + 176) = v14;
  *(_BYTE *)(a9 + 184) = v15;
  *(_QWORD *)(a9 + 188) = v16;
  *(_BYTE *)(a9 + 196) = v17;
  *(_QWORD *)(a9 + 200) = v18;
  *(_BYTE *)(a9 + 208) = v19;
  *(_QWORD *)(a9 + 212) = v24;
  *(_BYTE *)(a9 + 220) = v23;
  *(_QWORD *)(a9 + 224) = v22;
  *(_BYTE *)(a9 + 232) = v21;
  *(_BYTE *)(a9 + 160) = a10;
  return result;
}

RealityFoundation::PhysicsJoints __swiftcall PhysicsJoints.init()()
{
  _QWORD *v0;
  uint64_t v1;
  RealityFoundation::PhysicsJoints result;

  v1 = MEMORY[0x24BEE4AF8];
  *v0 = 0;
  v0[1] = v1;
  return result;
}

uint64_t PhysicsJoints.init(arrayLiteral:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = result;
  return result;
}

uint64_t PhysicsJoints.init(_:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v5 = MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, __n128))(v7 + 16))((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  v8 = Array.init<A>(_:)();
  *a2 = 0;
  a2[1] = v8;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t PhysicsJoints.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Swift::Int __swiftcall PhysicsJoints.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall PhysicsJoints.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t PhysicsJoints.count.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

unint64_t PhysicsJoints.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)(v3 + 16) > result)
      return outlined init with copy of __REAssetService(v3 + 40 * result + 32, a2);
  }
  __break(1u);
  return result;
}

uint64_t key path getter for PhysicsJoints.subscript(_:) : PhysicsJoints@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(result + 8);
    if (v3 < *(_QWORD *)(v4 + 16))
      return outlined init with copy of __REAssetService(v4 + 40 * v3 + 32, a3);
  }
  __break(1u);
  return result;
}

uint64_t key path setter for PhysicsJoints.subscript(_:) : PhysicsJoints(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7[5];

  v4 = *a3;
  outlined init with copy of __REAssetService(a1, (uint64_t)v7);
  v5 = *(_QWORD **)(a2 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 8) = v5;
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  *(_QWORD *)(a2 + 8) = result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v5[2])
  {
    __swift_assign_boxed_opaque_existential_1(&v5[5 * v4 + 4], v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t PhysicsJoints.subscript.setter(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = *(_QWORD **)(v2 + 8);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v2 + 8) = v5;
  if ((result & 1) != 0)
  {
    if ((a2 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  *(_QWORD *)(v2 + 8) = result;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v5[2] > a2)
  {
    __swift_assign_boxed_opaque_existential_1(&v5[5 * a2 + 4], a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*PhysicsJoints.subscript.modify(void (**a1)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*result)(uint64_t *, char);
  uint64_t v6;

  result = (void (*)(uint64_t *, char))malloc(0x60uLL);
  *a1 = result;
  *((_QWORD *)result + 10) = a2;
  *((_QWORD *)result + 11) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 8);
    if (*(_QWORD *)(v6 + 16) > a2)
    {
      outlined init with copy of __REAssetService(v6 + 40 * a2 + 32, (uint64_t)result);
      return PhysicsJoints.subscript.modify;
    }
  }
  __break(1u);
  return result;
}

void PhysicsJoints.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 88);
  if ((a2 & 1) != 0)
  {
    v4 = v2 + 5;
    outlined init with copy of __REAssetService(*a1, (uint64_t)(v2 + 5));
    v5 = *(_QWORD **)(v3 + 8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 8) = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v10 = v2[11];
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(_QWORD *)(v10 + 8) = v5;
    }
    v7 = v2[10];
    if (v5[2] > v7)
    {
      __swift_assign_boxed_opaque_existential_1(&v5[5 * v7 + 4], v2 + 5);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v2 + 5));
LABEL_9:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      free(v2);
      return;
    }
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD **)(v3 + 8);
    v8 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v3 + 8) = v4;
    if ((v8 & 1) != 0)
      goto LABEL_7;
  }
  v11 = v2[11];
  v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  *(_QWORD *)(v11 + 8) = v4;
LABEL_7:
  v9 = v2[10];
  if (v4[2] > v9)
  {
    __swift_assign_boxed_opaque_existential_1(&v4[5 * v9 + 4], v2);
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t PhysicsJoints.replaceSubrange<A>(_:with:)(uint64_t a1)
{
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PhysicsJoint]);
  return Array.replaceSubrange<A>(_:with:)();
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance PhysicsJoints@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    *a2 = *result - 1;
  return result;
}

_QWORD *protocol witness for BidirectionalCollection.formIndex(before:) in conformance PhysicsJoints(_QWORD *result)
{
  if (__OFSUB__(*result, 1))
    __break(1u);
  else
    --*result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance PhysicsJoints@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance PhysicsJoints(_QWORD *a1, _QWORD *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PhysicsJoints(uint64_t *a1, unint64_t *a2)
{
  return PhysicsJoints.subscript.setter(a1, *a2);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PhysicsJoints(void (***a1)(uint64_t *a1, char a2), unint64_t *a2))()
{
  void (**v4)(uint64_t *, char);

  v4 = (void (**)(uint64_t *, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = PhysicsJoints.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PhysicsJoints(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;

  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1], a1[2], a1[3]);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance PhysicsJoints(_QWORD *a1, uint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance PhysicsJoints@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance PhysicsJoints(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance PhysicsJoints()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance PhysicsJoints()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

void protocol witness for RangeReplaceableCollection.init() in conformance PhysicsJoints(_QWORD *a1@<X8>)
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  *a1 = 0;
  a1[1] = v1;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance PhysicsJoints(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  PhysicsJoints.replaceSubrange<A>(_:with:)(*a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 8))(a2, a3);
}

__int128 *specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(__int128 *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];
  _QWORD v10[6];
  _OWORD v11[3];
  uint64_t v12;
  _OWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = MEMORY[0x24BEE4AF8];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)&v13[0] = a2;
      outlined init with take of BindableDataInternal(result, (uint64_t)v13 + 8);
      v11[0] = v13[0];
      v11[1] = v13[1];
      v11[2] = v13[2];
      v12 = 0;
      v4 = 0;
      while (1)
      {
        outlined init with copy of (Int, URL)((uint64_t)v11, (uint64_t)v10, &demangling cache variable for type metadata for Repeated<PhysicsJoint>);
        v5 = v10[0];
        result = (__int128 *)outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Repeated<PhysicsJoint>);
        if (v4 < 0 || v4 >= v5)
          break;
        if (v4 >= *(uint64_t *)&v11[0])
          goto LABEL_12;
        v12 = v4 + 1;
        v6 = *(_QWORD *)(v15 + 16);
        outlined init with copy of __REAssetService((uint64_t)v11 + 8, (uint64_t)v10);
        outlined init with copy of (Int, URL)((uint64_t)v10, (uint64_t)v9, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
        specialized Array.replaceSubrange<A>(_:with:)(v6, v6, (uint64_t)v9);
        outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
        v4 = v12;
        if (v12 == *(_QWORD *)&v11[0])
        {
          v7 = v14;
          v8 = v15;
          result = (__int128 *)outlined destroy of BodyTrackingComponent?((uint64_t)v11, &demangling cache variable for type metadata for IndexingIterator<Repeated<PhysicsJoint>>);
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_12:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    result = (__int128 *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    v7 = 0;
    v8 = MEMORY[0x24BEE4AF8];
LABEL_10:
    *a3 = v7;
    a3[1] = v8;
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance PhysicsJoints()
{
  return RangeReplaceableCollection.init<A>(_:)();
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance PhysicsJoints(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[40];

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
  outlined init with take of BindableDataInternal(a1, (uint64_t)v5);
  outlined init with copy of (Int, URL)((uint64_t)v5, (uint64_t)v4, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance PhysicsJoints()
{
  return RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance PhysicsJoints(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE v4[40];
  _BYTE v5[40];

  v2 = *a2;
  outlined init with take of BindableDataInternal(a1, (uint64_t)v5);
  outlined init with copy of (Int, URL)((uint64_t)v5, (uint64_t)v4, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for CollectionOfOne<PhysicsJoint>);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance PhysicsJoints()
{
  return RangeReplaceableCollection.insert<A>(contentsOf:at:)();
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance PhysicsJoints@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

unint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = v2[1];
  v4 = *(_QWORD *)(v3 + 16);
  if (*v2 == v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = result;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v4 > result)
  {
    outlined init with copy of __REAssetService(v3 + 40 * result + 32, a2);
    return specialized Array.replaceSubrange<A>(_:with:)(v5, v5 + 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance PhysicsJoints(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1]);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance PhysicsJoints@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeFirst()@<X0>(uint64_t a1@<X8>)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = *v1;
  v3 = v1[1];
  v4 = *(_QWORD *)(v3 + 16);
  if (*v1 == v4)
  {
    __break(1u);
    goto LABEL_6;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 < v4)
  {
    outlined init with copy of __REAssetService(v3 + 40 * v2 + 32, a1);
    return specialized Array.replaceSubrange<A>(_:with:)(v2, v2 + 1);
  }
LABEL_7:
  __break(1u);
  return result;
}

int64_t protocol witness for RangeReplaceableCollection.removeFirst(_:) in conformance PhysicsJoints(int64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *v1;
      result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*v1, result, *(_QWORD *)(v1[1] + 16));
      if ((v3 & 1) != 0)
      {
LABEL_9:
        __break(1u);
        return result;
      }
      if (result >= v2)
        return specialized Array.replaceSubrange<A>(_:with:)(v2, result);
    }
    __break(1u);
    goto LABEL_9;
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance PhysicsJoints(char a1)
{
  uint64_t *v1;
  uint64_t result;
  int64_t v3;
  uint64_t v4;

  if ((a1 & 1) != 0)
  {
    result = *v1;
    v3 = *(_QWORD *)(v1[1] + 16);
    if (v3 < *v1)
      __break(1u);
    else
      return specialized Array.replaceSubrange<A>(_:with:)(result, v3);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v4 = MEMORY[0x24BEE4AF8];
    *v1 = 0;
    v1[1] = v4;
  }
  return result;
}

int64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance PhysicsJoints(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  int64_t result;
  int64_t v4;

  result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(a1);
  if (!v2)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
    if (v4 < result)
      __break(1u);
    else
      return specialized Array.replaceSubrange<A>(_:with:)(result, v4);
  }
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PhysicsJoints@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = result;
  return result;
}

void protocol witness for Collection.endIndex.getter in conformance PhysicsJoints(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance PhysicsJoints(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  uint64_t v2;
  void (*result)(uint64_t *);
  unint64_t v6;
  uint64_t v7;

  result = (void (*)(uint64_t *))malloc(0x28uLL);
  *a1 = result;
  v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v7 = *(_QWORD *)(v2 + 8);
    if (v6 < *(_QWORD *)(v7 + 16))
    {
      outlined init with copy of __REAssetService(v7 + 40 * v6 + 32, (uint64_t)result);
      return protocol witness for Collection.subscript.read in conformance PhysicsJoints;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance PhysicsJoints(uint64_t *a1)
{
  void *v1;

  v1 = (void *)*a1;
  __swift_destroy_boxed_opaque_existential_1(*a1);
  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance PhysicsJoints@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *v2;
  result = v2[1];
  v6 = *(_QWORD *)(result + 16);
  if (v6 < *v2)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = *a1;
  if (*a1 < v5)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[1];
  if (v6 >= v8)
  {
    a2[2] = v5;
    a2[3] = result;
    *a2 = v7;
    a2[1] = v8;
    return swift_bridgeObjectRetain();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance PhysicsJoints@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  v4 = *(_QWORD *)(v2 + 16);
  a1[2] = v3;
  a1[3] = v4;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PhysicsJoints()
{
  _QWORD *v0;

  return *v0 == *(_QWORD *)(v0[1] + 16);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance PhysicsJoints@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

_QWORD *protocol witness for Collection.index(after:) in conformance PhysicsJoints@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance PhysicsJoints(_QWORD *result)
{
  if (__OFADD__(*result, 1))
    __break(1u);
  else
    ++*result;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PhysicsJoints(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v2;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PhysicsJoints()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(v0 + 8) + 16);
}

_QWORD *protocol witness for Sequence._copyToContiguousArray() in conformance PhysicsJoints()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PhysicsJoints(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(_QWORD *)v3, *(_QWORD *)(v3 + 8));
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x22076977CLL);
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x22076977CLL);
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t i;
  char v9;
  unint64_t v11;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  char v15;
  uint64_t v16[5];
  uint64_t v17[5];

  v3 = *v1;
  v4 = v1[1];
  v5 = *(_QWORD *)(v4 + 16);
  if (*v1 != v5)
  {
    if (v5 <= v3)
      v7 = *v1;
    else
      v7 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain();
    for (i = 40 * v3 + 72; ; i += 40)
    {
      if (v7 == v3)
      {
        __break(1u);
        goto LABEL_35;
      }
      v9 = a1(v4 + i - 40);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
      if ((v9 & 1) != 0)
        break;
      if (v5 == ++v3)
      {
        swift_bridgeObjectRelease();
        return *(_QWORD *)(v4 + 16);
      }
    }
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v4 + 16) - 1 != v3)
    {
      v5 = v3 + 1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        goto LABEL_42;
      while (1)
      {
        v1[1] = v4;
        v11 = *(_QWORD *)(v4 + 16);
        while (v5 < v11)
        {
          outlined init with copy of __REAssetService(v4 + i, (uint64_t)v17);
          v4 = a1((uint64_t)v17);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
          if (v2)
            return v3;
          if ((v4 & 1) == 0)
          {
            if (v5 != v3)
            {
              if ((v3 & 0x8000000000000000) != 0)
                goto LABEL_37;
              v4 = v1[1];
              v13 = *(_QWORD *)(v4 + 16);
              if (v3 >= v13)
                goto LABEL_38;
              outlined init with copy of __REAssetService(v4 + 40 * v3 + 32, (uint64_t)v17);
              if (v5 >= v13)
                goto LABEL_39;
              outlined init with copy of __REAssetService(v4 + i, (uint64_t)v16);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v1[1] = v4;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v4);
                v1[1] = v4;
              }
              if (v3 >= *(_QWORD *)(v4 + 16))
                goto LABEL_40;
              __swift_assign_boxed_opaque_existential_1((uint64_t *)(v4 + 40 * v3 + 32), v16);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
              v4 = v1[1];
              v15 = swift_isUniquelyReferenced_nonNull_native();
              v1[1] = v4;
              if ((v15 & 1) == 0)
              {
                v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v4);
                v1[1] = v4;
              }
              if (v5 >= *(_QWORD *)(v4 + 16))
                goto LABEL_41;
              __swift_assign_boxed_opaque_existential_1((uint64_t *)(v4 + i), v17);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
            }
            if (__OFADD__(v3++, 1))
              goto LABEL_36;
          }
          ++v5;
          v4 = v1[1];
          v11 = *(_QWORD *)(v4 + 16);
          i += 40;
          if (v5 == v11)
            return v3;
        }
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v4);
      }
    }
  }
  return v3;
}

uint64_t specialized static PhysicsJoints.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  _QWORD v12[5];
  _QWORD v13[5];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 != *(_QWORD *)(v3 + 16))
  {
    v10 = 0;
    return v10 & 1;
  }
  if (!v4)
  {
    v10 = 1;
    return v10 & 1;
  }
  v5 = 0;
  v6 = v2 + 32;
  v7 = v3 + 32;
  v8 = v4 - 1;
  while (1)
  {
    result = outlined init with copy of __REAssetService(v6, (uint64_t)v13);
    if (v5 >= *(_QWORD *)(v3 + 16))
      break;
    outlined init with copy of __REAssetService(v7, (uint64_t)v12);
    v10 = areJointDefinitionsEqual(_:_:)(v13, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if ((v10 & 1) != 0)
    {
      v6 += 40;
      v7 += 40;
      if (v8 != v5++)
        continue;
    }
    return v10 & 1;
  }
  __break(1u);
  return result;
}

uint64_t specialized static PhysicsCustomJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!specialized static GeometricPin.== infix(_:_:)(a1, a2)
    || !specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)
    || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
  {
    return 0;
  }
  v5 = *(_QWORD *)(a1 + 164);
  v6 = *(_QWORD *)(a2 + 164);
  if (*(_BYTE *)(a1 + 172) == 1)
  {
    if (v5)
    {
      if (v6)
        v7 = *(_BYTE *)(a2 + 172);
      else
        v7 = 0;
      if ((v7 & 1) == 0)
        return 0;
    }
    else
    {
      if (v6)
        LOBYTE(v8) = 0;
      else
        v8 = *(unsigned __int8 *)(a2 + 172);
      if ((v8 & 1) == 0)
        return 0;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 172) & 1) != 0)
      return 0;
    result = 0;
    if (*(float *)&v5 != *(float *)&v6 || *((float *)&v5 + 1) != *((float *)&v6 + 1))
      return result;
  }
  v9 = *(_QWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a2 + 176);
  if (*(_BYTE *)(a1 + 184) == 1)
  {
    if (v9)
    {
      if (v10)
        v11 = *(_BYTE *)(a2 + 184);
      else
        v11 = 0;
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      if (v10)
        LOBYTE(v12) = 0;
      else
        v12 = *(unsigned __int8 *)(a2 + 184);
      if ((v12 & 1) == 0)
        return 0;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 184) & 1) != 0)
      return 0;
    result = 0;
    if (*(float *)&v9 != *(float *)&v10 || *((float *)&v9 + 1) != *((float *)&v10 + 1))
      return result;
  }
  v13 = *(_QWORD *)(a1 + 188);
  v14 = *(_QWORD *)(a2 + 188);
  if (*(_BYTE *)(a1 + 196) == 1)
  {
    if (v13)
    {
      if (v14)
        v15 = *(_BYTE *)(a2 + 196);
      else
        v15 = 0;
      if ((v15 & 1) == 0)
        return 0;
    }
    else
    {
      if (v14)
        LOBYTE(v16) = 0;
      else
        v16 = *(unsigned __int8 *)(a2 + 196);
      if ((v16 & 1) == 0)
        return 0;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 196) & 1) != 0)
      return 0;
    result = 0;
    if (*(float *)&v13 != *(float *)&v14 || *((float *)&v13 + 1) != *((float *)&v14 + 1))
      return result;
  }
  v17 = *(_QWORD *)(a1 + 200);
  v18 = *(_QWORD *)(a2 + 200);
  if (*(_BYTE *)(a1 + 208) == 1)
  {
    if (v17)
    {
      if (v18)
        v19 = *(_BYTE *)(a2 + 208);
      else
        v19 = 0;
      if ((v19 & 1) == 0)
        return 0;
    }
    else
    {
      if (v18)
        LOBYTE(v20) = 0;
      else
        v20 = *(unsigned __int8 *)(a2 + 208);
      if ((v20 & 1) == 0)
        return 0;
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 208) & 1) != 0)
      return 0;
    result = 0;
    if (*(float *)&v17 != *(float *)&v18 || *((float *)&v17 + 1) != *((float *)&v18 + 1))
      return result;
  }
  v21 = *(_QWORD *)(a1 + 212);
  v22 = *(_QWORD *)(a2 + 212);
  if (*(_BYTE *)(a1 + 220) == 1)
  {
    if (v21)
    {
      if (v22)
        v23 = *(_BYTE *)(a2 + 220);
      else
        v23 = 0;
      if ((v23 & 1) == 0)
        return 0;
    }
    else
    {
      if (v22)
        LOBYTE(v24) = 0;
      else
        v24 = *(unsigned __int8 *)(a2 + 220);
      if ((v24 & 1) == 0)
        return 0;
    }
LABEL_82:
    v25 = *(_QWORD *)(a1 + 224);
    v26 = *(_QWORD *)(a2 + 224);
    if (*(_BYTE *)(a1 + 232) == 1)
    {
      if (v25)
      {
        if (*(_BYTE *)(a2 + 232))
          return v26 != 0;
      }
      else if (*(_BYTE *)(a2 + 232))
      {
        return v26 == 0;
      }
    }
    else if ((*(_BYTE *)(a2 + 232) & 1) == 0
           && *(float *)&v25 == *(float *)&v26
           && *((float *)&v25 + 1) == *((float *)&v26 + 1))
    {
      return 1;
    }
    return 0;
  }
  if ((*(_BYTE *)(a2 + 220) & 1) != 0)
    return 0;
  result = 0;
  if (*(float *)&v21 == *(float *)&v22 && *((float *)&v21 + 1) == *((float *)&v22 + 1))
    goto LABEL_82;
  return result;
}

BOOL specialized static PhysicsDistanceJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  if (specialized static GeometricPin.== infix(_:_:)(a1, a2)
    && specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    && *(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160)
    && *(unsigned __int8 *)(a1 + 161) == *(unsigned __int8 *)(a2 + 161)
    && (*(float *)(a1 + 164) == *(float *)(a2 + 164) ? (v4 = *(float *)(a1 + 168) == *(float *)(a2 + 168)) : (v4 = 0), v4))
  {
    return *(float *)(a1 + 172) == *(float *)(a2 + 172);
  }
  else
  {
    return 0;
  }
}

BOOL specialized static PhysicsRevoluteJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (!specialized static GeometricPin.== infix(_:_:)(a1, a2)
    || !specialized static GeometricPin.== infix(_:_:)(a1 + 80, a2 + 80)
    || *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)
    || *(unsigned __int8 *)(a1 + 161) != *(unsigned __int8 *)(a2 + 161))
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 172) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 172) & 1) != 0)
      return 0;
    v4 = *(_QWORD *)(a2 + 164);
    return *(float *)(a1 + 164) == *(float *)&v4 && *(float *)(a1 + 168) == *((float *)&v4 + 1);
  }
  return (*(_BYTE *)(a2 + 172) & 1) != 0;
}

BOOL specialized static PhysicsSphericalJoint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  BOOL v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[176];
  _BYTE v15[176];
  _BYTE v16[176];
  _BYTE v17[176];
  _BYTE v18[176];
  _BYTE v19[80];
  uint64_t v20;
  _BYTE v21[80];
  uint64_t v22;

  v4 = specialized static GeometricPin.== infix(_:_:)(a1, a2);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v21);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v19);
  if (!v4)
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v19);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v21);
    outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v18);
    outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v17);
    goto LABEL_8;
  }
  v5 = specialized static GeometricPin.== infix(_:_:)((uint64_t)&v22, (uint64_t)&v20);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v19);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v21);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v18);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v17);
  if (!v5)
  {
LABEL_8:
    outlined destroy of PhysicsSphericalJoint((uint64_t)v17);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v18);
    outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v16);
    outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v15);
    goto LABEL_9;
  }
  v6 = v18[160];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v18);
  v7 = v17[160];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v17);
  outlined init with copy of PhysicsSphericalJoint(a1, (uint64_t)v16);
  outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v15);
  if (v6 != v7)
  {
LABEL_9:
    outlined destroy of PhysicsSphericalJoint((uint64_t)v15);
    outlined destroy of PhysicsSphericalJoint((uint64_t)v16);
    return 0;
  }
  v8 = v16[161];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v16);
  v9 = v15[161];
  outlined destroy of PhysicsSphericalJoint((uint64_t)v15);
  if (v8 == v9)
  {
    if ((*(_BYTE *)(a1 + 172) & 1) != 0)
    {
      outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v14);
      v10 = v14[172];
LABEL_14:
      outlined destroy of PhysicsSphericalJoint((uint64_t)v14);
      return v10;
    }
    if ((*(_BYTE *)(a2 + 172) & 1) != 0)
    {
      outlined init with copy of PhysicsSphericalJoint(a2, (uint64_t)v14);
      v10 = 0;
      goto LABEL_14;
    }
    v12 = *(_QWORD *)(a1 + 164);
    v13 = *(_QWORD *)(a2 + 164);
    if (*(float *)&v12 == *(float *)&v13)
      return *((float *)&v12 + 1) == *((float *)&v13 + 1);
  }
  return 0;
}

uint64_t outlined init with copy of GeometricPin(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for GeometricPin(a2, a1);
  return a2;
}

uint64_t outlined assign with take of GeometricPin(uint64_t a1, uint64_t a2)
{
  assignWithTake for GeometricPin(a2, a1);
  return a2;
}

uint64_t outlined init with take of GeometricPin(uint64_t a1, uint64_t a2)
{
  initializeWithTake for GeometricPin(a2, a1);
  return a2;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsFixedJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint;
  if (!lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsFixedJoint, &type metadata for PhysicsFixedJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint;
  if (!lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsFixedJoint, &type metadata for PhysicsFixedJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsFixedJoint and conformance PhysicsFixedJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsSphericalJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint;
  if (!lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSphericalJoint, &type metadata for PhysicsSphericalJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint;
  if (!lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsSphericalJoint, &type metadata for PhysicsSphericalJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsRevoluteJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint;
  if (!lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsRevoluteJoint, &type metadata for PhysicsRevoluteJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint;
  if (!lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsRevoluteJoint, &type metadata for PhysicsRevoluteJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsPrismaticJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint;
  if (!lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsPrismaticJoint, &type metadata for PhysicsPrismaticJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint;
  if (!lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsPrismaticJoint, &type metadata for PhysicsPrismaticJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsDistanceJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint;
  if (!lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsDistanceJoint, &type metadata for PhysicsDistanceJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint;
  if (!lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsDistanceJoint, &type metadata for PhysicsDistanceJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PhysicsCustomJoint(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint;
  if (!lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsCustomJoint, &type metadata for PhysicsCustomJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint;
  if (!lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsCustomJoint, &type metadata for PhysicsCustomJoint);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsCustomJoint and conformance PhysicsCustomJoint);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJoints, &type metadata for PhysicsJoints);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJoints, &type metadata for PhysicsJoints);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJoints, &type metadata for PhysicsJoints);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJoints, &type metadata for PhysicsJoints);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints;
  if (!lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJoints, &type metadata for PhysicsJoints);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJoints and conformance PhysicsJoints);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<PhysicsJoints>, (uint64_t (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints, MEMORY[0x24BEE0658]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (uint64_t (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (uint64_t (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints, MEMORY[0x24BEE4220]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, (uint64_t (*)(void))lazy protocol witness table accessor for type PhysicsJoints and conformance PhysicsJoints, MEMORY[0x24BEE4240]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x220772E3C](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<PhysicsJoints> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<PhysicsJoints>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<PhysicsJoints> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<PhysicsJoints>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PhysicsJoints()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<PhysicsJoints> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<PhysicsJoints>, MEMORY[0x24BEE2C18]);
}

uint64_t sub_21BA7915C()
{
  return 0;
}

uint64_t dispatch thunk of PhysicsJoint.pin0.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PhysicsJoint.pin0.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PhysicsJoint.pin0.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PhysicsJoint.pin1.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of PhysicsJoint.checksForInternalCollisions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PhysicsJoint.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t initializeWithCopy for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(swift_weakCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  return a1;
}

uint64_t initializeWithTake for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsFixedJoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 162))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsFixedJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 160) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 162) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 162) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsFixedJoint()
{
  return &type metadata for PhysicsFixedJoint;
}

ValueMetadata *type metadata accessor for PhysicsSphericalJoint()
{
  return &type metadata for PhysicsSphericalJoint;
}

ValueMetadata *type metadata accessor for PhysicsRevoluteJoint()
{
  return &type metadata for PhysicsRevoluteJoint;
}

uint64_t initializeWithCopy for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)(swift_weakCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v4 = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = v4;
  return a1;
}

uint64_t initializeWithTake for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  return a1;
}

uint64_t assignWithTake for PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsSphericalJoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 173))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsSphericalJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 172) = 0;
    *(_DWORD *)(result + 168) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 173) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 173) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsPrismaticJoint()
{
  return &type metadata for PhysicsPrismaticJoint;
}

uint64_t initializeWithCopy for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(swift_weakCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t initializeWithTake for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t assignWithTake for PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsDistanceJoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 176))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsDistanceJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 176) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsDistanceJoint()
{
  return &type metadata for PhysicsDistanceJoint;
}

uint64_t destroy for PhysicsFixedJoint()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  v10 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v10;
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 212) = *(_QWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(swift_weakCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  v4 = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 164) = v4;
  v5 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v5;
  v6 = *(_QWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = v6;
  v7 = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = v7;
  v8 = *(_QWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 212) = v8;
  v9 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v9;
  return a1;
}

uint64_t initializeWithTake for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v4 = (_OWORD *)swift_weakTakeInit();
  *(_OWORD *)((char *)v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)((char *)v4 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 64);
  v4[3] = *(_OWORD *)(a2 + 48);
  v4[4] = v5;
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 212) = *(_QWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  return a1;
}

uint64_t assignWithTake for PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  swift_weakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_weakTakeAssign();
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a1 + 161) = *(_BYTE *)(a2 + 161);
  *(_QWORD *)(a1 + 164) = *(_QWORD *)(a2 + 164);
  *(_BYTE *)(a1 + 172) = *(_BYTE *)(a2 + 172);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_BYTE *)(a1 + 196) = *(_BYTE *)(a2 + 196);
  *(_QWORD *)(a1 + 188) = *(_QWORD *)(a2 + 188);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 212) = *(_QWORD *)(a2 + 212);
  *(_BYTE *)(a1 + 220) = *(_BYTE *)(a2 + 220);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsCustomJoint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 233))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsCustomJoint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 232) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 233) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 233) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsCustomJoint()
{
  return &type metadata for PhysicsCustomJoint;
}

uint64_t storeEnumTagSinglePayload for PhysicsCustomJoint.MotionLimit(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for PhysicsCustomJoint.MotionLimit(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t destructiveInjectEnumTag for PhysicsCustomJoint.MotionLimit(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsCustomJoint.MotionLimit()
{
  return &type metadata for PhysicsCustomJoint.MotionLimit;
}

ValueMetadata *type metadata accessor for PhysicsJoints()
{
  return &type metadata for PhysicsJoints;
}

uint64_t outlined init with copy of PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PhysicsSphericalJoint(a2, a1, &type metadata for PhysicsSphericalJoint);
  return a2;
}

uint64_t outlined destroy of PhysicsSphericalJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsSphericalJoint);
  return a1;
}

Swift::Void __swiftcall __makeXfos(_:_:)(Swift::OpaquePointer a1, Swift::OpaquePointer *a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *rawValue;
  _QWORD *isUniquelyReferenced_nonNull_native;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  _OWORD *v28;
  _QWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  __int128 v38;
  int v39;

  v4 = *((_QWORD *)a1._rawValue + 2);
  v5 = v4 / 0xA;
  rawValue = a2->_rawValue;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= rawValue[3] >> 1)
  {
    a2->_rawValue = rawValue;
    if (!v4)
      return;
  }
  else
  {
    if (rawValue[2] <= v5)
      v16 = v4 / 0xA;
    else
      v16 = rawValue[2];
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v16, 0, rawValue);
    a2->_rawValue = rawValue;
    if (!v4)
      return;
  }
  v17 = 0;
  v18 = (char *)a1._rawValue + 32;
  while (1)
  {
    v19 = __OFADD__(v17, 10) ? 0x7FFFFFFFFFFFFFFFLL : v17 + 10;
    if (v17 >= v4)
      break;
    if (v17 + 1 >= v4)
      goto LABEL_29;
    if (v17 + 2 >= v4)
      goto LABEL_30;
    if (v17 + 3 >= v4)
      goto LABEL_31;
    if (v17 + 4 >= v4)
      goto LABEL_32;
    if (v17 + 5 >= v4)
      goto LABEL_33;
    if (v17 + 6 >= v4)
      goto LABEL_34;
    if (v17 + 7 >= v4)
      goto LABEL_35;
    v20 = v17 + 8;
    if (v17 + 8 >= v4)
      goto LABEL_36;
    v21 = v17 + 9;
    if (v17 + 9 >= v4)
      goto LABEL_37;
    LODWORD(v14) = *(_DWORD *)&v18[4 * v17];
    LODWORD(v13) = *(_DWORD *)&v18[4 * v17 + 4];
    LODWORD(v11) = *(_DWORD *)&v18[4 * v17 + 8];
    LODWORD(v22) = *(_DWORD *)&v18[4 * v17 + 12];
    LODWORD(v12) = *(_DWORD *)&v18[4 * v17 + 16];
    LODWORD(v10) = *(_DWORD *)&v18[4 * v17 + 20];
    v23 = *(_DWORD *)&v18[4 * v17 + 24];
    LODWORD(v8) = *(_DWORD *)&v18[4 * v17 + 28];
    v25 = rawValue[2];
    v24 = rawValue[3];
    LODWORD(v15) = *(_DWORD *)&v18[4 * v20];
    LODWORD(v9) = *(_DWORD *)&v18[4 * v21];
    if (v25 >= v24 >> 1)
    {
      v38 = v8;
      v39 = v22;
      v36 = v9;
      v37 = v23;
      v34 = v11;
      v35 = v10;
      v32 = v13;
      v33 = v12;
      v30 = v15;
      v31 = v14;
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, rawValue);
      v15 = v30;
      v14 = v31;
      v13 = v32;
      v12 = v33;
      v11 = v34;
      v10 = v35;
      v9 = v36;
      v23 = v37;
      v8 = v38;
      LODWORD(v22) = v39;
      rawValue = v29;
    }
    *(_QWORD *)&v26 = __PAIR64__(v13, v14);
    *((_QWORD *)&v26 + 1) = v11;
    DWORD1(v22) = v12;
    *((_QWORD *)&v22 + 1) = __PAIR64__(v23, v10);
    *(_QWORD *)&v27 = __PAIR64__(v15, v8);
    *((_QWORD *)&v27 + 1) = v9;
    rawValue[2] = v25 + 1;
    v28 = &rawValue[6 * v25];
    v28[2] = v26;
    v28[3] = v22;
    v28[4] = v27;
    v17 = v19;
    if (v19 >= (uint64_t)v4)
    {
      a2->_rawValue = rawValue;
      return;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t __RKEmphasisSpinAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisSpinAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisSpinAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKEmphasisSpinAnimation.createSpinAnimation(transform:localBoundingBox:_:variant:duration:)(float32x2_t a1, float a2, float32x2_t a3, float a4, float a5, uint64_t a6, uint64_t a7, _BYTE *a8)
{
  char v8;
  int v9;
  float v10;
  uint64_t v16;
  _QWORD *rawValue;
  uint64_t v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  _OWORD *v23;
  uint64_t SRTSampledAnimation;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v31[8];
  const char *v32;
  char v33;
  char v34;
  float v35;
  int v36;
  float v37;
  Swift::OpaquePointer v38;

  if (*a8)
  {
    if (*a8 == 1)
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 148, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for playfulSpinAnimationData == -1)
        goto LABEL_8;
    }
    else
    {
      v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 27, 0, MEMORY[0x24BEE4AF8]);
      if (one-time initialization token for wildSpinAnimationData == -1)
        goto LABEL_8;
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  v38._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 97, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for basicSpinAnimationData != -1)
    goto LABEL_19;
LABEL_8:
  v16 = swift_bridgeObjectRetain();
  __makeXfos(_:_:)((Swift::OpaquePointer)v16, &v38);
  swift_bridgeObjectRelease();
  rawValue = v38._rawValue;
  if (!*((_QWORD *)v38._rawValue + 2))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v18 = rawValue[2];
  if (v18)
  {
    v8 = v34;
    v10 = (float)v18;
    v9 = v36;
    v19 = (__int128 *)&rawValue[6 * v18];
    v29 = *v19;
    v30 = *(v19 - 1);
    v28 = v19[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    __break(1u);
  }
  rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18 + 1, 1, rawValue);
LABEL_11:
  v21 = rawValue[2];
  v20 = rawValue[3];
  v22 = a5 / v10;
  if (v21 >= v20 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, rawValue);
  rawValue[2] = v21 + 1;
  v23 = &rawValue[6 * v21];
  v23[2] = v30;
  v23[3] = v29;
  v23[4] = v28;
  v38._rawValue = rawValue;
  specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(a1, a2, a3, a4, (uint64_t)v31, (float32x2_t **)&v38);
  v31[0] = 1;
  v32 = "Transform.transform";
  v33 = 1;
  v34 = v8;
  v35 = v22;
  v36 = v9;
  v37 = a5;
  SRTSampledAnimation = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (!SRTSampledAnimation)
    goto LABEL_15;
  v25 = SRTSampledAnimation;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_21BE411F0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v26 + 32) = v25;
  return v26;
}

void __RKEntityTagsComponent.buildTagsCache()()
{
  uint64_t *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *v0;
  if (*v0)
  {
    v2 = v0[1];
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (v2)
    {
      v10 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
      do
      {
        v3 = String.init(utf8String:)();
        if (v4)
          v5 = v3;
        else
          v5 = 0;
        if (v4)
          v6 = v4;
        else
          v6 = 0xE000000000000000;
        v8 = *(_QWORD *)(v10 + 16);
        v7 = *(_QWORD *)(v10 + 24);
        if (v8 >= v7 >> 1)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        *(_QWORD *)(v10 + 16) = v8 + 1;
        v9 = v10 + 16 * v8;
        *(_QWORD *)(v9 + 32) = v5;
        *(_QWORD *)(v9 + 40) = v6;
        v1 += 8;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t __RKEntityTagsComponent.tags.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (!*(_QWORD *)(v0 + 16))
  {
    __RKEntityTagsComponent.buildTagsCache()();
    *(_QWORD *)(v0 + 16) = v1;
  }
  return swift_bridgeObjectRetain();
}

uint64_t __RKEntityTagsComponent.tags.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  int64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char __s[16];
  uint64_t v27;
  uint64_t v28;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (!v4)
  {
    v5 = *(_QWORD *)(v2 + 24);
    *(_OWORD *)__s = *(_OWORD *)v2;
    v27 = 0;
    v28 = v5;
    __RKEntityTagsComponent.buildTagsCache()();
    v4 = v6;
    *(_QWORD *)(v2 + 16) = v6;
  }
  if ((specialized static Array<A>.== infix(_:_:)(a1, v4) & 1) != 0)
    return swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v2 + 24) = 0;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  v8 = a1[2];
  *(_QWORD *)(v2 + 8) = v8;
  if (!v8)
    return swift_bridgeObjectRelease();
  if (v8 >> 60)
    goto LABEL_40;
  result = 8 * v8;
  if ((uint64_t)(8 * v8) < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_41:
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    v25 = v2;
    v9 = RECIntrospectionAlloc();
    v10 = v9;
    v11 = 0;
    for (i = a1 + 5; ; i += 2)
    {
      v14 = *(i - 1);
      v13 = *i;
      MEMORY[0x24BDAC7A8](v9);
      if ((v13 & 0x1000000000000000) != 0)
        break;
      if ((v13 & 0x2000000000000000) != 0)
      {
        *(_QWORD *)__s = v14;
        *(_QWORD *)&__s[8] = v13 & 0xFFFFFFFFFFFFFFLL;
        swift_bridgeObjectRetain();
        result = strlen(__s);
        v20 = result + 1;
        if (__OFADD__(result, 1))
          goto LABEL_37;
        if (v20 < (uint64_t)0xFFFFFFFF80000000)
          goto LABEL_38;
        if (v20 > 0x7FFFFFFF)
          goto LABEL_39;
        v21 = (char *)RECIntrospectionAlloc();
        v22 = v21;
        if (v21 != __s || v21 >= &__s[v20])
          memmove(v21, __s, v20);
        *(_QWORD *)(v10 + 8 * v11) = v22;
        goto LABEL_30;
      }
      if ((v14 & 0x1000000000000000) == 0)
        break;
      v15 = (const char *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32);
      swift_bridgeObjectRetain();
      result = strlen(v15);
      v16 = result + 1;
      if (__OFADD__(result, 1))
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      if (v16 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_35;
      if (v16 > 0x7FFFFFFF)
        goto LABEL_36;
      v17 = (char *)RECIntrospectionAlloc();
      v18 = v17;
      if (v17 != v15 || v17 >= &v15[v16])
        memmove(v17, (const void *)((v13 & 0xFFFFFFFFFFFFFFFLL) + 32), v16);
      *(_QWORD *)(v10 + 8 * v11) = v18;
      v9 = swift_bridgeObjectRelease();
LABEL_10:
      if (v8 == ++v11)
      {
        swift_bridgeObjectRelease();
        *(_QWORD *)v2 = v10;
        v23 = *(_QWORD *)(v2 + 8);
        type metadata accessor for ArrayPointerCleanupHelper();
        v24 = swift_allocObject();
        *(_QWORD *)(v24 + 16) = v10;
        *(_QWORD *)(v24 + 24) = v23;
        result = swift_release();
        *(_QWORD *)(v25 + 24) = v24;
        return result;
      }
    }
    swift_bridgeObjectRetain();
    _StringGuts._slowWithCString<A>(_:)();
LABEL_30:
    v9 = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

char *closure #1 in __RKEntityTagsComponent.tags.setter(const char *a1, uint64_t a2, uint64_t a3)
{
  char *result;
  int64_t v7;
  char *v8;

  result = (char *)strlen(a1);
  v7 = (int64_t)(result + 1);
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v7 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v7 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  result = (char *)RECIntrospectionAlloc();
  v8 = result;
  if (result != a1 || result >= &a1[v7])
    result = (char *)memmove(result, a1, v7);
  *(_QWORD *)(a2 + 8 * a3) = v8;
  return result;
}

uint64_t (*__RKEntityTagsComponent.tags.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
    __RKEntityTagsComponent.buildTagsCache()();
    *(_QWORD *)(v1 + 16) = v3;
  }
  *a1 = v3;
  swift_bridgeObjectRetain();
  return __RKEntityTagsComponent.tags.modify;
}

uint64_t __RKEntityTagsComponent.tags.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;

  if ((a2 & 1) == 0)
    return __RKEntityTagsComponent.tags.setter(*a1);
  v2 = (_QWORD *)swift_bridgeObjectRetain();
  __RKEntityTagsComponent.tags.setter(v2);
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityTagsComponent.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  int v5;
  __int128 *v6;
  uint64_t v7;
  double (*v8)();
  void (*v9)();
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberArrayWithCountDataTypeWithTag(), (v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKEntityTagsComponent.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(_QWORD *)(v0 + 16) = v1;
  v4 = xmmword_21BE5A030;
  v5 = 1;
  v6 = &v4;
  v7 = 0;
  v8 = @objc createTagsComponentObject(componentType:);
  v9 = @objc destroyTagsComponentObject(componentType:rawComponentPointer:);
  v10 = 0u;
  v11 = 0u;
  v12 = v1;
  v13 = 0;
  v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 24) = v2;
  REStructBuilderDestroy();
  return v0;
}

double @objc createTagsComponentObject(componentType:)()
{
  _OWORD *v0;
  double result;

  v0 = (_OWORD *)swift_slowAlloc();
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  return result;
}

void @objc destroyTagsComponentObject(componentType:rawComponentPointer:)()
{
  swift_arrayDestroy();
  JUMPOUT(0x220772F44);
}

uint64_t __RKEntityTagsComponent.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKEntityTagsComponent.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __RKEntityTagsComponent.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKEntityTagsComponent.registration.setter(void *a1)
{
  swift_beginAccess();
  static __RKEntityTagsComponent.registration = a1;
  return swift_release();
}

uint64_t (*static __RKEntityTagsComponent.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t ArrayPointerCleanupHelper.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 < 0)
  {
    __break(1u);
  }
  else
  {
    if (v1)
    {
      v2 = *(_QWORD *)(v0 + 16);
      do
      {
        v2 += 8;
        RECIntrospectionFree();
        --v1;
      }
      while (v1);
    }
    RECIntrospectionFree();
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t Entity.__tags.getter()
{
  uint64_t Object;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_beginAccess();
  if (!static __RKEntityTagsComponent.registration)
    return MEMORY[0x24BEE4AF8];
  if (!REEntityGetCustomComponent())
    return MEMORY[0x24BEE4AF8];
  Object = RECustomComponentGetObject();
  if (!Object)
    return MEMORY[0x24BEE4AF8];
  v1 = Object;
  v2 = *(_QWORD *)(Object + 16);
  if (!v2)
  {
    __RKEntityTagsComponent.buildTagsCache()();
    v2 = v3;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 16) = v2;
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Entity.__tags.setter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  swift_beginAccess();
  if (!static __RKEntityTagsComponent.registration)
    return swift_bridgeObjectRelease();
  v3 = *((_QWORD *)static __RKEntityTagsComponent.registration + 3);
  if (a1[2])
  {
    if ((REEntityGetCustomComponent() || MEMORY[0x22076CF2C](*(_QWORD *)(v1 + 16), v3)) && RECustomComponentGetObject())
      return __RKEntityTagsComponent.tags.setter(a1);
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = REEntityGetCustomComponent();
  if (result)
    return REEntityRemoveComponentByClass();
  return result;
}

void (*Entity.__tags.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = v3 + 3;
  v3[4] = v1;
  swift_beginAccess();
  if (static __RKEntityTagsComponent.registration
    && REEntityGetCustomComponent()
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v6 = Object;
    v7 = *(_QWORD *)(Object + 16);
    if (!v7)
    {
      __RKEntityTagsComponent.buildTagsCache()();
      v7 = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v6 + 16) = v7;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    v7 = MEMORY[0x24BEE4AF8];
  }
  *v4 = v7;
  return Entity.__tags.modify;
}

void Entity.__tags.modify(uint64_t a1, char a2)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(void **)a1;
  v3 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)swift_bridgeObjectRetain();
    Entity.__tags.setter(v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    Entity.__tags.setter(v3);
  }
  free(v2);
}

char *partial apply for closure #1 in __RKEntityTagsComponent.tags.setter(const char *a1)
{
  uint64_t v1;

  return closure #1 in __RKEntityTagsComponent.tags.setter(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t type metadata accessor for ArrayPointerCleanupHelper()
{
  return objc_opt_self();
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKEntityTagsComponent()
{
  return &protocol witness table for __RKEntityTagsComponent.Registration;
}

uint64_t sub_21BA7B3D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Entity.__tags.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BA7B3F8()
{
  _QWORD *v0;

  v0 = (_QWORD *)swift_bridgeObjectRetain();
  return Entity.__tags.setter(v0);
}

uint64_t destroy for __RKEntityTagsComponent()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for __RKEntityTagsComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for __RKEntityTagsComponent(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for __RKEntityTagsComponent(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKEntityTagsComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTagsComponent()
{
  return &type metadata for __RKEntityTagsComponent;
}

uint64_t type metadata accessor for __RKEntityTagsComponent.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityTagsComponent.Registration()
{
  return swift_lookUpClassMethod();
}

unint64_t lazy protocol witness table accessor for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTagsComponent.Registration.RegistrationError, &type metadata for __RKEntityTagsComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityTagsComponent.Registration.RegistrationError, &type metadata for __RKEntityTagsComponent.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityTagsComponent.Registration.RegistrationError and conformance __RKEntityTagsComponent.Registration.RegistrationError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKEntityTagsComponent.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA7B6A4 + 4 * byte_21BE5A040[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA7B6C4 + 4 * byte_21BE5A045[v4]))();
}

_BYTE *sub_21BA7B6A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA7B6C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA7B6CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA7B6D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA7B6DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA7B6E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityTagsComponent.Registration.RegistrationError()
{
  return &type metadata for __RKEntityTagsComponent.Registration.RegistrationError;
}

uint64_t __RKVisibilityShowDropAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityShowDropAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowDropAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 174, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 104, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 79, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityShowDropAnimation.createVisibilityShowDropAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of QueryEnumerator.enumerate<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of QueryEnumerator.enumerate<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t StateMachineCondition.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v10;
  uint64_t v11;

  v10 = *a3;
  *(_QWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = v10;
  v11 = a7 + *(int *)(type metadata accessor for StateMachineCondition(0, a5, a6, a4) + 40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v11, a4, a5);
}

uint64_t type metadata accessor for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateMachineCondition);
}

uint64_t StateMachineCondition.parameterName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineCondition.parameterName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineCondition.parameterName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void StateMachineCondition.conditionOperator.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *StateMachineCondition.conditionOperator.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*StateMachineCondition.conditionOperator.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineCondition.testValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t StateMachineCondition.testValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*StateMachineCondition.testValue.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineCondition.referencedParameters.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v11[2];
  char v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21BE411F0;
  v5 = *v1;
  v4 = v1[1];
  v11[0] = 0;
  v11[1] = 0;
  v12 = -1;
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 56) = type metadata accessor for StateMachineParameter(0, v7, v6, v8);
  *(_QWORD *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v3 + 32));
  StateMachineParameter.init(name:bindTarget:)(v5, v4, v11, v7, v6, (uint64_t)boxed_opaque_existential_1);
  swift_bridgeObjectRetain();
  return v3;
}

BOOL static StateMachineConditionOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void StateMachineConditionOperator.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int StateMachineConditionOperator.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

RealityFoundation::StateMachineConditionTrigger __swiftcall StateMachineConditionTrigger.init(_:)(RealityFoundation::StateMachineConditionTrigger result)
{
  RealityFoundation::StateMachineConditionTrigger *v1;

  *v1 = result;
  return result;
}

uint64_t StateMachineConditionTrigger.parameterName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StateMachineConditionTrigger.parameterName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineConditionTrigger.parameterName.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineConditionTrigger.referencedParameters.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v3 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
  *(_QWORD *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  v4 = swift_allocObject();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 511;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_21BA7BDA4()
{
  uint64_t v0;
  int v1;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type StateMachineConditionOperator and conformance StateMachineConditionOperator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator;
  if (!lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for StateMachineConditionOperator, &type metadata for StateMachineConditionOperator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StateMachineConditionOperator and conformance StateMachineConditionOperator);
  }
  return result;
}

uint64_t protocol witness for StateMachineConditionProtocol.referencedParameters.getter in conformance StateMachineConditionTrigger()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v0;
  v1 = v0[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StateMachineParameterProtocol>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v3 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
  *(_QWORD *)(v3 + 64) = &protocol witness table for StateMachineParameter<A>;
  v4 = swift_allocObject();
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_WORD *)(v4 + 48) = 511;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t dispatch thunk of StateMachineConditionProtocol.referencedParameters.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateMachineCondition()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StateMachineCondition(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 17) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v10;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v11 = (a1 + v6 + 17) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 17) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for StateMachineCondition(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 17 + a1) & ~v7;
  v9 = (v7 + 17 + a2) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

uint64_t assignWithCopy for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for StateMachineCondition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineCondition(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 17) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 17) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21BA7C2E8 + 4 * byte_21BE5A210[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for StateMachineCondition(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t getEnumTagSinglePayload for StateMachineConditionOperator(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StateMachineConditionOperator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21BA7C62C + 4 * byte_21BE5A223[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21BA7C660 + 4 * byte_21BE5A21E[v4]))();
}

uint64_t sub_21BA7C660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA7C668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA7C670);
  return result;
}

uint64_t sub_21BA7C67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA7C684);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21BA7C688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA7C690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StateMachineConditionOperator()
{
  return &type metadata for StateMachineConditionOperator;
}

ValueMetadata *type metadata accessor for StateMachineConditionTrigger()
{
  return &type metadata for StateMachineConditionTrigger;
}

uint64_t one-time initialization function for notificationName()
{
  uint64_t result;

  result = MEMORY[0x220768C3C](0xD00000000000001ELL, 0x800000021BE84B30);
  static NotificationAction.notificationName = result;
  return result;
}

id static NotificationAction.notificationName.getter()
{
  if (one-time initialization token for notificationName != -1)
    swift_once();
  return (id)static NotificationAction.notificationName;
}

unint64_t static NotificationAction.sceneKey.getter()
{
  return 0xD000000000000024;
}

unint64_t static NotificationAction.identifierKey.getter()
{
  return 0xD000000000000029;
}

unint64_t static NotificationAction.sourceEntityKey.getter()
{
  return 0xD00000000000002BLL;
}

unint64_t static NotificationAction.customArgumentsKey.getter()
{
  return 0xD00000000000002ELL;
}

uint64_t NotificationAction.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NotificationAction.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*NotificationAction.name.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t NotificationAction.customArguments.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NotificationAction.customArguments.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*NotificationAction.customArguments.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t NotificationAction.animatedValueType.getter()
{
  return 0;
}

RealityFoundation::NotificationAction __swiftcall NotificationAction.init(name:customArguments:)(Swift::String name, Swift::OpaquePointer customArguments)
{
  uint64_t v2;
  RealityFoundation::NotificationAction result;

  *(Swift::String *)v2 = name;
  *(Swift::OpaquePointer *)(v2 + 16) = customArguments;
  result.name = name;
  result.customArguments = customArguments;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NotificationAction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x72416D6F74737563;
  else
    return 1701667182;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NotificationAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized NotificationAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NotificationAction.CodingKeys()
{
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NotificationAction.CodingKeys()
{
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t NotificationAction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NotificationAction.CodingKeys>);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v11 = v9;
    v12 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

unint64_t lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction.CodingKeys, &unk_24DFA6080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction.CodingKeys, &unk_24DFA6080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction.CodingKeys, &unk_24DFA6080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for NotificationAction.CodingKeys, &unk_24DFA6080);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys);
  }
  return result;
}

uint64_t NotificationAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NotificationAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NotificationAction.CodingKeys and conformance NotificationAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  v15 = 1;
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B], MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v12 = v14[1];
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v12;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for EntityAction.animatedValueType.getter in conformance NotificationAction()
{
  return 0;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NotificationAction@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return NotificationAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NotificationAction(_QWORD *a1)
{
  return NotificationAction.encode(to:)(a1);
}

uint64_t destroy for NotificationAction()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for NotificationAction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for NotificationAction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NotificationAction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationAction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationAction()
{
  return &type metadata for NotificationAction;
}

uint64_t storeEnumTagSinglePayload for NotificationAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BA7CED4 + 4 * byte_21BE5A3B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BA7CF08 + 4 * asc_21BE5A3B0[v4]))();
}

uint64_t sub_21BA7CF08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA7CF10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BA7CF18);
  return result;
}

uint64_t sub_21BA7CF24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BA7CF2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BA7CF30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BA7CF38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NotificationAction.CodingKeys()
{
  return &unk_24DFA6080;
}

void protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance NotificationActionHandler(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[14];

  v1 = a1[11];
  v8[10] = a1[10];
  v8[11] = v1;
  v2 = a1[13];
  v8[12] = a1[12];
  v8[13] = v2;
  v3 = a1[7];
  v8[6] = a1[6];
  v8[7] = v3;
  v4 = a1[9];
  v8[8] = a1[8];
  v8[9] = v4;
  v5 = a1[3];
  v8[2] = a1[2];
  v8[3] = v5;
  v6 = a1[5];
  v8[4] = a1[4];
  v8[5] = v6;
  v7 = a1[1];
  v8[0] = *a1;
  v8[1] = v7;
  specialized NotificationActionHandler.postNotification(event:)(v8);
}

uint64_t specialized NotificationAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72416D6F74737563 && a2 == 0xEF73746E656D7567)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void specialized NotificationActionHandler.postNotification(event:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  uint64_t SceneNullable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  id v16;
  uint64_t v17;
  Class isa;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21;
  unint64_t v22;

  v1 = a1[1];
  v3 = a1[2];
  v2 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 32) = 0xD000000000000029;
  *(_QWORD *)(inited + 40) = 0x800000021BE84AA0;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 48) = v1;
  *(_QWORD *)(inited + 56) = v3;
  swift_bridgeObjectRetain();
  v5 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v22 = v5;
  swift_beginAccess();
  if (!swift_weakLoadStrong())
    goto LABEL_6;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    swift_release();
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000024, 0x800000021BE84A70, &v20);
    outlined destroy of Any?((uint64_t)&v20);
    goto LABEL_9;
  }
  v7 = SceneNullable;
  if ((id)RESceneGetSwiftObject())
  {
    swift_release();
    v8 = type metadata accessor for Scene();
    v9 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    v8 = type metadata accessor for Scene();
    swift_allocObject();
    v9 = Scene.init(coreScene:)(v7);
    swift_release();
  }
  type metadata accessor for Scene();
  v21 = v8;
  *(_QWORD *)&v20 = v9;
  outlined init with take of Any(&v20, v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD000000000000024, 0x800000021BE84A70, isUniquelyReferenced_nonNull_native);
  v22 = v5;
  swift_bridgeObjectRelease();
LABEL_9:
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v12 = Strong;
    v21 = type metadata accessor for Entity();
    *(_QWORD *)&v20 = v12;
    outlined init with take of Any(&v20, v19);
    v13 = v22;
    v14 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD00000000000002BLL, 0x800000021BE84AD0, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0xD00000000000002BLL, 0x800000021BE84AD0, &v20);
    outlined destroy of Any?((uint64_t)&v20);
    v13 = v22;
  }
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  *(_QWORD *)&v20 = v2;
  outlined init with take of Any(&v20, v19);
  swift_bridgeObjectRetain();
  v15 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0xD00000000000002ELL, 0x800000021BE84B00, v15);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  if (one-time initialization token for notificationName != -1)
    swift_once();
  v17 = static NotificationAction.notificationName;
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v16, sel_postNotificationName_object_userInfo_, v17, 0, isa);

}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for NotificationActionHandler()
{
  return &type metadata for NotificationActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in NotificationActionHandler()
{
  return &protocol witness table for NotificationAction;
}

uint64_t __RKEntityInteractionSpecification.init(decodeContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = type metadata accessor for __RKEntityInteractionSpecification(0);
  MEMORY[0x24BDAC7A8](v4);
  v49 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for __RKEntityActionSpecification(0);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v47 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for __RKEntityTriggerSpecification(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v52 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityActionSpecification?);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v46 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (uint64_t *)((char *)&v46 - v20);
  v48 = v4;
  v22 = *(int *)(v4 + 24);
  v50 = a2;
  v23 = (_QWORD *)(a2 + v22);
  *v23 = 0;
  v23[1] = 0;
  v56 = v23;
  v24 = *(void **)a1;
  v25 = *(void **)(a1 + 8);
  v26 = *(_QWORD *)(a1 + 16);
  v60 = *(_QWORD *)(a1 + 24);
  v27 = *(_QWORD *)(a1 + 32);
  v58 = *(_QWORD *)(a1 + 40);
  v59 = v27;
  v28 = v24;
  v29 = v25;
  v57 = v26;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  v30 = v53;
  __RKEntityTriggerSpecification.init(decodeContext:)((void **)a1, v21);
  if (v30)
  {

    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v21, v31, 1, v8);
  v53 = v28;
  v32 = v29;
  swift_retain();
  outlined retain of [String : String]((uint64_t)&v60);
  outlined retain of [String : String]((uint64_t)&v59);
  outlined retain of [String : String]((uint64_t)&v58);
  __RKEntityActionSpecification.init(decodeContext:)((void **)a1, (uint64_t)v15);
  v34 = v54;
  v33 = v55;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v15, 0, 1, v55);
  outlined init with copy of (Int, URL)((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v18, 1, v8) == 1)
  {
    v35 = &demangling cache variable for type metadata for __RKEntityTriggerSpecification?;
    v36 = (uint64_t)v18;
LABEL_8:
    outlined destroy of BodyTrackingComponent?(v36, v35);
    lazy protocol witness table accessor for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError();
    swift_allocError();
    swift_willThrow();
    swift_release();

    outlined release of [String : String]((uint64_t)&v60);
    outlined release of [String : String]((uint64_t)&v59);
    outlined release of [String : String]((uint64_t)&v58);
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
    return swift_bridgeObjectRelease();
  }
  v37 = (uint64_t)v18;
  v38 = v52;
  outlined init with take of __RKEntityActionSpecification(v37, v52, type metadata accessor for __RKEntityTriggerSpecification);
  v39 = v51;
  outlined init with copy of (Int, URL)((uint64_t)v15, v51, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v39, 1, v33) == 1)
  {
    outlined destroy of __RKEntityTriggerSpecification(v38);
    v35 = &demangling cache variable for type metadata for __RKEntityActionSpecification?;
    v36 = v39;
    goto LABEL_8;
  }
  swift_release();

  outlined release of [String : String]((uint64_t)&v60);
  outlined release of [String : String]((uint64_t)&v59);
  outlined release of [String : String]((uint64_t)&v58);
  outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for __RKEntityActionSpecification?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v21, &demangling cache variable for type metadata for __RKEntityTriggerSpecification?);
  v41 = v39;
  v42 = v47;
  outlined init with take of __RKEntityActionSpecification(v41, v47, type metadata accessor for __RKEntityActionSpecification);
  v43 = v49;
  outlined init with take of __RKEntityActionSpecification(v38, v49, type metadata accessor for __RKEntityTriggerSpecification);
  v44 = v48;
  outlined init with take of __RKEntityActionSpecification(v42, v43 + *(int *)(v48 + 20), type metadata accessor for __RKEntityActionSpecification);
  v45 = (_QWORD *)(v43 + *(int *)(v44 + 24));
  *v45 = 0;
  v45[1] = 0;
  swift_bridgeObjectRelease();
  return outlined init with take of __RKEntityActionSpecification(v43, v50, type metadata accessor for __RKEntityInteractionSpecification);
}

unint64_t lazy protocol witness table accessor for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.InteractionUSDLoadingError, &type metadata for __RKEntityInteractionSpecification.InteractionUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError;
  if (!lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKEntityInteractionSpecification.InteractionUSDLoadingError, &type metadata for __RKEntityInteractionSpecification.InteractionUSDLoadingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKEntityInteractionSpecification.InteractionUSDLoadingError and conformance __RKEntityInteractionSpecification.InteractionUSDLoadingError);
  }
  return result;
}

uint64_t outlined destroy of __RKEntityTriggerSpecification(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for __RKEntityTriggerSpecification(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for __RKEntityInteractionSpecification.InteractionUSDLoadingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BA7DB18 + 4 * byte_21BE5A590[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BA7DB38 + 4 * byte_21BE5A595[v4]))();
}

_BYTE *sub_21BA7DB18(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BA7DB38(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA7DB40(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA7DB48(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BA7DB50(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BA7DB58(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityInteractionSpecification.InteractionUSDLoadingError()
{
  return &type metadata for __RKEntityInteractionSpecification.InteractionUSDLoadingError;
}

void one-time initialization function for basicPulseAnimationData()
{
  static EmphasizeAnimations.basicPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicPulseAnimationData;
}

void one-time initialization function for playfulPulseAnimationData()
{
  static EmphasizeAnimations.playfulPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulPulseAnimationData;
}

void one-time initialization function for wildPulseAnimationData()
{
  static EmphasizeAnimations.wildPulseAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildPulseAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.makeTransforms(_:_:)(uint64_t a1, _QWORD **a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  __int128 v24;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4 / 0xA;
  v6 = *a2;
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= v6[3] >> 1)
  {
    *a2 = v6;
    if (!v4)
      return result;
  }
  else
  {
    if (v6[2] <= v5)
      v10 = v4 / 0xA;
    else
      v10 = v6[2];
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 0, v6);
    v6 = result;
    *a2 = result;
    if (!v4)
      return result;
  }
  v11 = a1 + 32;
  if (one-time initialization token for identity != -1)
LABEL_39:
    result = (_QWORD *)swift_once();
  v12 = 0;
  do
  {
    if (__OFADD__(v12, 10))
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12 + 10;
    if (v12 >= v4)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v12 + 1 >= v4)
      goto LABEL_30;
    if (v12 + 2 >= v4)
      goto LABEL_31;
    if (v12 + 3 >= v4)
      goto LABEL_32;
    if (v12 + 4 >= v4)
      goto LABEL_33;
    if (v12 + 5 >= v4)
      goto LABEL_34;
    if (v12 + 6 >= v4)
      goto LABEL_35;
    if (v12 + 7 >= v4)
      goto LABEL_36;
    if (v12 + 8 >= v4)
      goto LABEL_37;
    if (v12 + 9 >= v4)
      goto LABEL_38;
    LODWORD(v14) = *(_DWORD *)(v11 + 4 * v12);
    DWORD1(v14) = *(_DWORD *)(v11 + 4 * (v12 + 1));
    *((_QWORD *)&v14 + 1) = *(unsigned int *)(v11 + 4 * (v12 + 2));
    LODWORD(v15) = *(_DWORD *)(v11 + 4 * (v12 + 3));
    LODWORD(v9) = *(_DWORD *)(v11 + 4 * (v12 + 4));
    *(_QWORD *)&v8 = *(_QWORD *)(v11 + 4 * (v12 + 5));
    LODWORD(v16) = *(_DWORD *)(v11 + 4 * (v12 + 7));
    DWORD1(v16) = *(_DWORD *)(v11 + 4 * (v12 + 8));
    *((_QWORD *)&v16 + 1) = *(unsigned int *)(v11 + 4 * (v12 + 9));
    v18 = v6[2];
    v17 = v6[3];
    if (v18 >= v17 >> 1)
    {
      v23 = v15;
      v24 = v14;
      v21 = v16;
      v22 = v8;
      v20 = v9;
      result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v6);
      v9 = v20;
      v16 = v21;
      v8 = v22;
      LODWORD(v15) = v23;
      v14 = v24;
      v6 = result;
    }
    DWORD1(v15) = v9;
    *((_QWORD *)&v15 + 1) = v8;
    v6[2] = v18 + 1;
    v19 = &v6[6 * v18];
    v19[2] = v14;
    v19[3] = v15;
    v19[4] = v16;
    v12 = v13;
  }
  while (v13 < (uint64_t)v4);
  *a2 = v6;
  return result;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizePulseAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 71, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicPulseAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 107, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulPulseAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 99, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildPulseAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

float *specialized static EmphasizeAnimations.bakeEmphasisTransforms(_:transforms:isAdditive:)(uint64_t a1, float *a2, char a3)
{
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  __int128 v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  __int128 v40;
  float *v41;
  unint64_t v42;
  float32x4_t v43;
  float32x2_t v44;
  float v45;
  float32x4_t v47;
  float v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int128 v56;
  float32x4_t v57;
  float32x4_t v58;
  _QWORD v59[8];
  _BYTE v60[64];

  swift_bridgeObjectRetain();
  REEntityComputeMeshBounds();
  v57 = v6;
  v58 = v5;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v59);
  v8 = v59[0];
  v7 = v59[1];
  v10 = v59[2];
  v9 = v59[3];
  v12 = v59[4];
  v11 = v59[5];
  swift_release();
  outlined init with take of Transform?((uint64_t)v59, (uint64_t)v60);
  if ((v60[48] & 1) == 0)
  {
    *(_QWORD *)&v14 = v8;
    *((_QWORD *)&v14 + 1) = v7;
    v56 = v14;
    *(_QWORD *)&v14 = v10;
    *((_QWORD *)&v14 + 1) = v9;
    v55 = (float32x4_t)v14;
    *(_QWORD *)&v13 = v12;
    *((_QWORD *)&v13 + 1) = v11;
    goto LABEL_5;
  }
  if (one-time initialization token for identity != -1)
    goto LABEL_22;
  while (1)
  {
    v55 = (float32x4_t)xmmword_2551B1050;
    v56 = static Transform.identity;
    v13 = xmmword_2551B1060;
LABEL_5:
    v54 = (float32x4_t)v13;
    v15 = *((_QWORD *)a2 + 2);
    if (!v15)
      return a2;
    v16 = 0;
    v17 = 0;
    v18 = vsubq_f32(v57, v58);
    v18.f32[0] = (float)(v18.f32[2] + (float)(v18.f32[1] + (float)(v18.f32[0] + 0.0))) / 3.0;
    v57 = v18;
    v19 = *(float32x2_t *)(a2 + 16);
    v20 = a2[18];
    v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2);
    v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0);
    v21 = vmulq_f32(v55, (float32x4_t)xmmword_21BE516F0);
    v22 = (int32x4_t)vnegq_f32(v21);
    v23 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v22));
    v24 = vextq_s8(v23, v23, 8uLL);
    v25 = vrev64q_s32((int32x4_t)v21);
    v25.i32[0] = v22.i32[1];
    v25.i32[3] = v22.i32[2];
    v50 = (float32x4_t)v25;
    v51 = (float32x4_t)v24;
    v49 = (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v22, 8uLL);
    while (v17 < *((_QWORD *)a2 + 2))
    {
      v58 = *(float32x4_t *)&a2[v16 + 16];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        a2 = (float *)specialized _ArrayBuffer._consumeAndCreateNew()(a2);
      *(float32x2_t *)v38.f32 = vmul_n_f32(vsub_f32(*(float32x2_t *)v58.f32, v19), v57.f32[0]);
      v39 = v57.f32[0] * (float)(v58.f32[2] - v20);
      *(_QWORD *)&v40 = v38.i64[0];
      *((float *)&v40 + 2) = v39;
      HIDWORD(v40) = 0;
      v41 = &a2[v16];
      *(_OWORD *)&a2[v16 + 16] = v40;
      if ((a3 & 1) == 0)
      {
        v42 = *((_QWORD *)a2 + 2);
        if (v17 >= v42)
          goto LABEL_21;
        v43 = *(float32x4_t *)&a2[v16 + 12];
        v44 = *(float32x2_t *)(v41 + 8);
        v45 = a2[v16 + 10];
        if (one-time initialization token for identity == -1)
        {
          if (v17 >= v42)
            goto LABEL_18;
        }
        else
        {
          v58 = v38;
          v47 = *(float32x4_t *)&a2[v16 + 12];
          v48 = v39;
          swift_once();
          v43 = v47;
          v39 = v48;
          v38.i64[0] = v58.i64[0];
          if (v17 >= *((_QWORD *)a2 + 2))
          {
LABEL_18:
            __break(1u);
            return a2;
          }
        }
        *(float32x2_t *)&v26 = vmul_f32(*(float32x2_t *)&v56, v44);
        *((float *)&v26 + 2) = *((float *)&v56 + 2) * v45;
        HIDWORD(v26) = 0;
        v27 = (int32x4_t)vnegq_f32(v43);
        v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v43, vtrn1q_s32((int32x4_t)v43, v27));
        v29 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v27, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v53);
        v30 = (float32x4_t)vrev64q_s32((int32x4_t)v43);
        v30.i32[0] = v27.i32[1];
        v30.i32[3] = v27.i32[2];
        v31 = vmlaq_f32(vmulq_laneq_f32(v43, v55, 3), v30, v52);
        v32 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v49, vmuls_lane_f32(*((float *)&v56 + 1), *(float32x2_t *)v38.f32, 1)), v51, *(float *)&v56 * v38.f32[0]), v50, *((float *)&v56 + 2) * v39);
        v33 = (int32x4_t)vnegq_f32(v32);
        v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
        v35 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v34, v34, 8uLL), v53);
        v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
        v36.i32[0] = v33.i32[1];
        v36.i32[3] = v33.i32[2];
        v37 = vaddq_f32(v54, vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v32, v55, 3), v36, v52), v35));
        v37.i32[3] = 0;
        *((_OWORD *)v41 + 2) = v26;
        *(float32x4_t *)&a2[v16 + 12] = vaddq_f32(v31, v29);
        *((float32x4_t *)v41 + 4) = v37;
      }
      ++v17;
      v16 += 12;
      if (v15 == v17)
        return a2;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    swift_once();
  }
}

uint64_t outlined init with take of Transform?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transform?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t REEncoder.__deallocating_deinit()
{
  return REEncoder.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BE21D70]);
}

uint64_t type metadata accessor for REEncoder()
{
  return objc_opt_self();
}

unint64_t REEncoder.encode<A>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  void *v15;
  _QWORD v16[5];

  v4 = *(_QWORD *)(v1 + 16);
  v5 = type metadata accessor for PrivateEncoder();
  v6 = swift_allocObject();
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 16) = v4;
  *(_QWORD *)(v6 + 24) = v7;
  if (!REEncoderOpen())
  {
    v16[3] = v5;
    v16[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
    v16[0] = v6;
    swift_retain();
    v8 = a1;
    dispatch thunk of Encodable.encode(to:)();
    if (v2)
    {
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      return v8;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    PrivateEncoder.terminateContainers(_:)(0);
    if (!REEncoderClose())
    {
      v15 = (void *)REEncoderCopyToCFData();
      v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

      swift_release();
      return v8;
    }
  }
  v8 = specialized static REEncoder.Error.getStatus(_:)();
  v10 = v9;
  v12 = v11;
  lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
  swift_allocError();
  *(_QWORD *)v13 = v8;
  *(_QWORD *)(v13 + 8) = v10;
  *(_BYTE *)(v13 + 16) = v12 & 1;
  swift_willThrow();
  swift_release();
  return v8;
}

uint64_t PrivateEncoder.writeKey(_:)(_QWORD *a1)
{
  char v2;
  char v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of CodingKey.intValue.getter();
  v3 = v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of CodingKey.stringValue.getter();
  if ((v3 & 1) != 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v5 = REEncoderWriteString();
    result = swift_release();
    if (!v5)
      return result;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  result = REEncoderWriteInt64();
  if ((_DWORD)result)
  {
LABEL_5:
    v6 = specialized static REEncoder.Error.getStatus(_:)();
    v8 = v7;
    v10 = v9;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v11 = v6;
    *(_QWORD *)(v11 + 8) = v8;
    *(_BYTE *)(v11 + 16) = v10 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t PrivateEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  char v27;
  __int128 v28;
  _BYTE v29[25];

  v4 = v3;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
  v7 = (_QWORD *)(v3 + 40);
  swift_beginAccess();
  v8 = *(_QWORD *)(v3 + 40);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v10 + 16) >= v9)
  {
    v11 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v8 + 48 * v9 - 16, (uint64_t)&v28, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v11 = v29[24];
    outlined init with take of BindableDataInternal(&v28, (uint64_t)&v24);
    v27 = v11;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v24, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v10 = *(_QWORD *)(v3 + 24);
  }
  *(_BYTE *)(v3 + 48) = v11;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v10 + 16));
  v13 = type metadata accessor for KeyedEC(0, a2, a3, v12);
  v14 = *(_QWORD *)(v4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v15 = KeyedEC.__allocating_init(encoder:codingPath:)(v4, v14);
  *(_BYTE *)(v4 + 48) = 0;
  v25 = v13;
  v26 = &protocol witness table for KeyedEC<A>;
  *(_QWORD *)&v24 = v15;
  outlined init with take of BindableDataInternal(&v24, (uint64_t)&v28);
  v29[24] = 1;
  swift_beginAccess();
  v16 = *(_QWORD **)(v4 + 40);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 40) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *v7 = v16;
  }
  v19 = v16[2];
  v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
    *v7 = v16;
  }
  v16[2] = v19 + 1;
  v20 = &v16[6 * v19];
  v21 = v28;
  v22 = *(_OWORD *)v29;
  *(_OWORD *)((char *)v20 + 57) = *(_OWORD *)&v29[9];
  v20[2] = v21;
  v20[3] = v22;
  swift_endAccess();
  *(_QWORD *)&v28 = v15;
  MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedEC<A>, v13);
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t KeyedEC.__allocating_init(encoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    REEncoderBeginContainer();
  return v4;
}

uint64_t PrivateEncoder.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;
  char v23;
  __int128 v24;
  _BYTE v25[25];

  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  v3 = (_QWORD *)(v1 + 40);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v6 + 16) >= v5)
  {
    v8 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v4 + 48 * v5 - 16, (uint64_t)&v24, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v7 = v25[24];
    outlined init with take of BindableDataInternal(&v24, (uint64_t)&v20);
    v23 = v7;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v20, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v8 = v7 ^ 1;
    v6 = *(_QWORD *)(v1 + 24);
  }
  *(_BYTE *)(v1 + 48) = v8;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v6 + 16));
  v9 = *(_QWORD *)(v1 + 24);
  v10 = type metadata accessor for UnkeyedEC();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_QWORD *)(v11 + 16) = v1;
  *(_QWORD *)(v11 + 24) = v9;
  if (*(_BYTE *)(v1 + 48) == 1)
  {
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    REEncoderBeginContainer();
  }
  *(_BYTE *)(v1 + 48) = 0;
  v21 = v10;
  v22 = &protocol witness table for UnkeyedEC;
  *(_QWORD *)&v20 = v11;
  outlined init with take of BindableDataInternal(&v20, (uint64_t)&v24);
  v25[24] = 0;
  swift_beginAccess();
  v12 = *(_QWORD **)(v1 + 40);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 40) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *v3 = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
    *v3 = v12;
  }
  v12[2] = v15 + 1;
  v16 = &v12[6 * v15];
  v17 = v24;
  v18 = *(_OWORD *)v25;
  *(_OWORD *)((char *)v16 + 57) = *(_OWORD *)&v25[9];
  v16[2] = v17;
  v16[3] = v18;
  swift_endAccess();
  a1[3] = v10;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, type metadata accessor for UnkeyedEC, (uint64_t)&protocol conformance descriptor for UnkeyedEC);
  a1[4] = result;
  *a1 = v11;
  return result;
}

uint64_t type metadata accessor for PrivateEncoder()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for KeyedEC()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance PrivateEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PrivateEncoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance PrivateEncoder@<X0>(uint64_t *a1@<X8>)
{
  return PrivateEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance PrivateEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = type metadata accessor for SingleValueEC();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  a1[3] = v5;
  a1[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type SingleValueEC and conformance SingleValueEC, type metadata accessor for SingleValueEC, (uint64_t)&protocol conformance descriptor for SingleValueEC);
  *a1 = v6;
  swift_retain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall KeyedEC.terminate()()
{
  KeyedEC.terminate()(MEMORY[0x24BE21D78]);
}

uint64_t KeyedEC.encodeNil(forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  __int128 v15;

  v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v1[3] + 16) + 1);
  v15 = *(_OWORD *)(v4 + 80);
  v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    result = REEncoderWriteNil();
    if ((_DWORD)result)
    {
      v7 = specialized static REEncoder.Error.getStatus(_:)();
      v9 = v8;
      v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = v9;
      *(_BYTE *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  __int128 v16;

  v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v2[3] + 16) + 1);
  v16 = *(_OWORD *)(v5 + 80);
  v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    result = REEncoderWriteBool();
    if ((_DWORD)result)
    {
      v8 = specialized static REEncoder.Error.getStatus(_:)();
      v10 = v9;
      v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_BYTE *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, (uint64_t (*)(_QWORD, const char *, uint64_t))MEMORY[0x24BE21DB8]);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  __int128 v16;

  v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v2[3] + 16) + 1);
  v16 = *(_OWORD *)(v5 + 80);
  v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    result = REEncoderWriteInt8();
    if ((_DWORD)result)
    {
      v8 = specialized static REEncoder.Error.getStatus(_:)();
      v10 = v9;
      v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_BYTE *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  __int128 v16;

  v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v2[3] + 16) + 1);
  v16 = *(_OWORD *)(v5 + 80);
  v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    result = REEncoderWriteInt16();
    if ((_DWORD)result)
    {
      v8 = specialized static REEncoder.Error.getStatus(_:)();
      v10 = v9;
      v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_BYTE *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x24BE21DB0]);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x24BE21DE8]);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  __int128 v16;

  v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v2[3] + 16) + 1);
  v16 = *(_OWORD *)(v5 + 80);
  v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    result = REEncoderWriteUInt8();
    if ((_DWORD)result)
    {
      v8 = specialized static REEncoder.Error.getStatus(_:)();
      v10 = v9;
      v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_BYTE *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15[3];
  __int128 v16;

  v5 = *v2;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v2[3] + 16) + 1);
  v16 = *(_OWORD *)(v5 + 80);
  v14 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v15);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  if (!v3)
  {
    result = REEncoderWriteUInt16();
    if ((_DWORD)result)
    {
      v8 = specialized static REEncoder.Error.getStatus(_:)();
      v10 = v9;
      v12 = v11;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v13 = v8;
      *(_QWORD *)(v13 + 8) = v10;
      *(_BYTE *)(v13 + 16) = v12 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2, MEMORY[0x24BE21DE0]);
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  __int128 v15;

  v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v1[3] + 16) + 1);
  v15 = *(_OWORD *)(v4 + 80);
  v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    result = REEncoderWriteDouble();
    if ((_DWORD)result)
    {
      v7 = specialized static REEncoder.Error.getStatus(_:)();
      v9 = v8;
      v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = v9;
      *(_BYTE *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  __int128 v15;

  v4 = *v1;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v1[3] + 16) + 1);
  v15 = *(_OWORD *)(v4 + 80);
  v13 = v15;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v14);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, a1);
  PrivateEncoder.writeKey(_:)(v14);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (!v2)
  {
    result = REEncoderWriteFloat();
    if ((_DWORD)result)
    {
      v7 = specialized static REEncoder.Error.getStatus(_:)();
      v9 = v8;
      v11 = v10;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = v9;
      *(_BYTE *)(v12 + 16) = v11 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, const char *, uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[3];
  __int128 v21;

  v6 = v3;
  v9 = v3[2];
  v10 = *v6;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v6[3] + 16) + 1);
  v21 = *(_OWORD *)(v10 + 80);
  v19 = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v20);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(boxed_opaque_existential_1, a2);
  PrivateEncoder.writeKey(_:)(v20);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (!v4)
  {
    result = a3(*(_QWORD *)(v9 + 16), "", a1);
    if ((_DWORD)result)
    {
      v13 = specialized static REEncoder.Error.getStatus(_:)();
      v15 = v14;
      v17 = v16;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v18 = v13;
      *(_QWORD *)(v18 + 8) = v15;
      *(_BYTE *)(v18 + 16) = v17 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t result;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];
  __int128 v18;

  v6 = *v3;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v3[3] + 16) + 1);
  v18 = *(_OWORD *)(v6 + 80);
  v16 = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(boxed_opaque_existential_1, a3);
  PrivateEncoder.writeKey(_:)(v17);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (!v4)
  {
    String.utf8CString.getter();
    v9 = REEncoderWriteString();
    result = swift_release();
    if (v9)
    {
      v10 = specialized static REEncoder.Error.getStatus(_:)();
      v12 = v11;
      v14 = v13;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v15 = v10;
      *(_QWORD *)(v15 + 8) = v12;
      *(_BYTE *)(v15 + 16) = v14 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t KeyedEC.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a3;
  v34 = a4;
  v25[1] = a1;
  v27 = *v4;
  v6 = *(_QWORD *)(v27 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v25 - v11;
  v13 = v4[2];
  v26 = v14;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 16) + 1);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v28 = a2;
  v15(v12, a2, v6);
  v16 = (_QWORD *)(v13 + 24);
  swift_beginAccess();
  v17 = *(_QWORD **)(v13 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v13 + 24) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
    *v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
  v15(v9, (uint64_t)v12, v6);
  v21 = *(_QWORD *)(v27 + 88);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v9, (uint64_t *)(v13 + 24), v6, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  swift_endAccess();
  v32 = v6;
  v33 = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v31);
  v15((char *)boxed_opaque_existential_1, v28, v6);
  v23 = v29;
  PrivateEncoder.writeKey(_:)(v31);
  if (!v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    v32 = type metadata accessor for PrivateEncoder();
    v33 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
    v31[0] = v13;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v26);
}

uint64_t KeyedEC.encodeConditional<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a1;
  return KeyedEC.encode<A>(_:forKey:)((uint64_t)&v5, a2, a3, a4);
}

uint64_t KeyedEC.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void (*v16)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)(v4 + 4);
  v7 = *v4;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v4 + 4), (uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
  if (v28)
  {
    outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)v24);
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
    v9 = v25;
    v10 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
  }
  v11 = v4[2];
  v12 = v4[3];
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v12 + 16) + 1);
  v14 = *(_QWORD *)(v7 + 80);
  v13 = *(_UNKNOWN ***)(v7 + 88);
  v28 = v14;
  v29 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  v16 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v16(boxed_opaque_existential_1, a2, v14);
  PrivateEncoder.writeKey(_:)(v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  v18 = type metadata accessor for KeyedEC(0, a3, a4, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v14;
  *(_QWORD *)(inited + 64) = v13;
  v20 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  v16(v20, a2, v14);
  v27[0] = v12;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v21 = KeyedEC.__allocating_init(encoder:codingPath:)(v11, v27[0]);
  v28 = v18;
  v29 = &protocol witness table for KeyedEC<A>;
  v27[0] = v21;
  outlined init with take of Terminatable?((uint64_t)v27, (uint64_t)v24);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v24, v8);
  swift_endAccess();
  v27[0] = v21;
  MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedEC<A>, v18);
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t KeyedEC.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t *boxed_opaque_existential_1;
  void (*v14)(uint64_t *, uint64_t, uint64_t);
  uint64_t inited;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t)(v2 + 4);
  v6 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  if (v25)
  {
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)v21);
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
    v7 = v22;
    v8 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  }
  v9 = v2[2];
  v10 = v2[3];
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v10 + 16) + 1);
  v11 = *(_QWORD *)(v6 + 80);
  v12 = *(_UNKNOWN ***)(v6 + 88);
  v25 = v11;
  v26 = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v24);
  v14 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v14(boxed_opaque_existential_1, a1, v11);
  PrivateEncoder.writeKey(_:)(v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = v12;
  v16 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  v14(v16, a1, v11);
  v24[0] = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v17 = v24[0];
  v18 = type metadata accessor for UnkeyedEC();
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 32) = 0u;
  *(_OWORD *)(v19 + 48) = 0u;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_QWORD *)(v19 + 16) = v9;
  *(_QWORD *)(v19 + 24) = v17;
  if ((*(_BYTE *)(v9 + 48) & 1) == 0)
    REEncoderBeginContainer();
  v25 = v18;
  v26 = &protocol witness table for UnkeyedEC;
  v24[0] = v19;
  outlined init with take of Terminatable?((uint64_t)v24, (uint64_t)v21);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v21, v5);
  swift_endAccess();
  a2[3] = v18;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, type metadata accessor for UnkeyedEC, (uint64_t)&protocol conformance descriptor for UnkeyedEC);
  a2[4] = result;
  *a2 = v19;
  return result;
}

uint64_t KeyedEC.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v5 = type metadata accessor for Optional();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  MEMORY[0x22076A028](0x7265707573, 0xE500000000000000, v4, *(_QWORD *)(v3 + 88), v6);
  v9 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    KeyedEC.superEncoder(forKey:)((uint64_t)v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v8, v4);
  }
  return result;
}

uint64_t KeyedEC.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v5 = *v2;
  v6 = v2[2];
  v7 = v2[3];
  v8 = *(_QWORD *)(v6 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v10 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(inited + 56) = v10;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(v5 + 88);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, a1, v10);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v12 = v7;
  v13 = type metadata accessor for PrivateEncoder();
  v14 = swift_allocObject();
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v14 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v14 + 40) = v15;
  *(_BYTE *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v12;
  a2[3] = v13;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
  a2[4] = result;
  *a2 = v14;
  return result;
}

uint64_t KeyedEC.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);
  return v0;
}

uint64_t KeyedEC.__deallocating_deinit()
{
  KeyedEC.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyedEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyedEC);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance KeyedEC<A>(uint64_t a1)
{
  return KeyedEC.encodeNil(forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2)
{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return KeyedEC.encode(_:forKey:)(a1, a2);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return KeyedEC.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1)
{
  return KeyedEC.encode(_:forKey:)(a1);
}

{
  return KeyedEC.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3D10]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3D18]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v11;

  v11 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return a6(a1, a2, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEC.encode<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEC.encodeConditional<A>(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for KeyedEC(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for KeyedEC(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3C90]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3CA0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3CD0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3CA8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, MEMORY[0x24BEE3CF8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3C98]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CC8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CF0]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CB8]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CD8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CC0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, MEMORY[0x24BEE3CE8]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x24BEE3CE0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(a1, a2, a3, a4, a5, a6, MEMORY[0x24BEE3D00]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 & 0x1FF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 & 0x1FFFF, a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a3 + 80), *(_QWORD *)(a3 + 88), a4);
  return a5(a1 | ((HIDWORD(a1) & 1) << 32), a2, v9, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  v10 = a2 & 1;
  v11 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a4 + 80), *(_QWORD *)(a4 + 88), a4);
  return a6(a1, v10, a3, v11, a5);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;

  v12 = a3 & 1;
  v13 = type metadata accessor for KeyedEC(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return a7(a1, a2, v12, a4, v13, a6);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for KeyedEC(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedEC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedEC.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedEC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedEC.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder() in conformance KeyedEC<A>@<X0>(uint64_t *a1@<X8>)
{
  return KeyedEC.superEncoder()(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.superEncoder(forKey:) in conformance KeyedEC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedEC.superEncoder(forKey:)(a1, a2);
}

void protocol witness for Terminatable.terminate() in conformance KeyedEC<A>()
{
  KeyedEC.terminate()();
}

uint64_t KeyedEC.terminate()(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;

  swift_beginAccess();
  outlined init with copy of (Int, URL)(v1 + 32, (uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
  if (v11)
  {
    outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)v7);
    outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
    v3 = v8;
    v4 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for Terminatable?);
  }
  v6 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v6 + 48) & 1) == 0)
    return a1(*(_QWORD *)(v6 + 16));
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UnkeyedEC.IndexedCodingKey@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  lazy protocol witness table accessor for type Int and conformance Int();
  result = BinaryInteger.description.getter();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnkeyedEC.IndexedCodingKey()
{
  lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnkeyedEC.IndexedCodingKey()
{
  lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  return CodingKey.debugDescription.getter();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encodeNil()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1);
  if (REEncoderWriteNil())
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Bool a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteBool())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Double a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteDouble())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Float a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteFloat())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int a1)
{
  UnkeyedEC.encode(_:)(a1, (uint64_t (*)(_QWORD, const char *, uint64_t))MEMORY[0x24BE21DB8]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int8 a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteInt8())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int16 a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteInt16())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::Int32 a1)
{
  UnkeyedEC.encode(_:)(*(uint64_t *)&a1, MEMORY[0x24BE21DB0]);
}

uint64_t UnkeyedEC.encode(_:)(uint64_t a1, uint64_t (*a2)(_QWORD, const char *, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;

  v6 = v2 + 16;
  v5 = *(_QWORD *)(v2 + 16);
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 16) + 1);
  result = a2(*(_QWORD *)(v5 + 16), "", a1);
  if ((_DWORD)result)
  {
    v8 = specialized static REEncoder.Error.getStatus(_:)();
    v10 = v9;
    v12 = v11;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v13 = v8;
    *(_QWORD *)(v13 + 8) = v10;
    *(_BYTE *)(v13 + 16) = v12 & 1;
    return swift_willThrow();
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::String a1)
{
  uint64_t v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  String.utf8CString.getter();
  v2 = REEncoderWriteString();
  swift_release();
  if (v2)
  {
    v3 = specialized static REEncoder.Error.getStatus(_:)();
    v5 = v4;
    v7 = v6;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v5;
    *(_BYTE *)(v8 + 16) = v7 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt a1)
{
  UnkeyedEC.encode(_:)(a1, MEMORY[0x24BE21DE8]);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt8 a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteUInt8())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt16 a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  if (REEncoderWriteUInt16())
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedEC.encode(_:)(Swift::UInt32 a1)
{
  UnkeyedEC.encode(_:)(*(uint64_t *)&a1, MEMORY[0x24BE21DE0]);
}

uint64_t UnkeyedEC.encode<A>(_:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v21;
  void *v22;
  unint64_t v23;
  _QWORD *v24;

  v5 = (uint64_t)v3;
  v8 = v3[2];
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v3[3] + 16) + 1);
  v9 = v3[9];
  *(_QWORD *)&v21 = v9;
  lazy protocol witness table accessor for type Int and conformance Int();
  v10 = &v21;
  v11 = BinaryInteger.description.getter();
  v13 = *(_QWORD *)(v5 + 72);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
  }
  else
  {
    v10 = (__int128 *)v11;
    v4 = v12;
    v24 = a3;
    *(_QWORD *)(v5 + 72) = v15;
    a3 = (_QWORD *)(v8 + 24);
    swift_beginAccess();
    a1 = *(_QWORD **)(v8 + 24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v8 + 24) = a1;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
  *a3 = a1;
LABEL_3:
  v18 = a1[2];
  v17 = a1[3];
  if (v18 >= v17 >> 1)
  {
    a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, a1);
    *a3 = a1;
  }
  v22 = &unk_24DFA64E0;
  v23 = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  v19 = swift_allocObject();
  *(_QWORD *)&v21 = v19;
  *(_QWORD *)(v19 + 16) = v9;
  *(_BYTE *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 32) = v10;
  *(_QWORD *)(v19 + 40) = v4;
  a1[2] = v18 + 1;
  outlined init with take of BindableDataInternal(&v21, (uint64_t)&a1[5 * v18 + 4]);
  swift_endAccess();
  v22 = (void *)type metadata accessor for PrivateEncoder();
  v23 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
  *(_QWORD *)&v21 = v8;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v21[31] == 2)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteBool())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v21[24] & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteDouble())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = (char *)&v21 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v22 & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteFloat())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v21[31] & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteInt8())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v21[30] & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteInt16())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  __n128 v10;
  uint64_t v11;
  char *v12;
  int v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v23 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v21 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v10);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if (!v22)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  while (1)
  {
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    String.utf8CString.getter();
    v13 = REEncoderWriteString();
    swift_release();
    if (v13)
      break;
    swift_bridgeObjectRelease();
    dispatch thunk of IteratorProtocol.next()();
    if (!v22)
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  }
  v15 = specialized static REEncoder.Error.getStatus(_:)();
  v17 = v16;
  v19 = v18;
  lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
  swift_allocError();
  *(_QWORD *)v20 = v15;
  *(_QWORD *)(v20 + 8) = v17;
  *(_BYTE *)(v20 + 16) = v19 & 1;
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v21[31] & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteUInt8())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];

  v3 = v2;
  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v13 = &v21[-v12];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v21[30] & 1) != 0)
      break;
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
    if (REEncoderWriteUInt16())
    {
      v14 = specialized static REEncoder.Error.getStatus(_:)();
      v16 = v15;
      v18 = v17;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v19 = v14;
      *(_QWORD *)(v19 + 8) = v16;
      *(_BYTE *)(v19 + 16) = v18 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, (unsigned int (*)(_QWORD, const char *, uint64_t))MEMORY[0x24BE21DB8]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x24BE21DB0]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x24BE21DE8]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x24BE21DE0]);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (*a4)(_QWORD, const char *, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  _QWORD v25[3];
  char v26;
  uint64_t v27;

  v6 = v4;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)v25 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a2, v13);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v26 & 1) != 0)
      break;
    v16 = v25[2];
    v17 = *(_QWORD *)(v6 + 16);
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) + 1);
    if (a4(*(_QWORD *)(v17 + 16), "", v16))
    {
      v18 = specialized static REEncoder.Error.getStatus(_:)();
      v20 = v19;
      v22 = v21;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v23 = v18;
      *(_QWORD *)(v23 + 8) = v20;
      *(_BYTE *)(v23 + 16) = v22 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, AssociatedTypeWitness);
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;

  v6 = v4;
  v9 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v26 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v13 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v15 = (char *)&v25 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v11, a1, a2, v13);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v28 & 1) != 0)
      break;
    v16 = v27;
    v17 = *(_QWORD *)(v6 + 16);
    PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 16) + 1);
    if (a4(*(_QWORD *)(v17 + 16), "", v16))
    {
      v18 = specialized static REEncoder.Error.getStatus(_:)();
      v20 = v19;
      v22 = v21;
      lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
      swift_allocError();
      *(_QWORD *)v23 = v18;
      *(_QWORD *)(v23 + 8) = v20;
      *(_BYTE *)(v23 + 16) = v22 & 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, AssociatedTypeWitness);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, AssociatedTypeWitness);
}

uint64_t UnkeyedEC.encode<A>(contentsOf:)(uint64_t a1, uint64_t a2, char *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  _QWORD *v23;
  void (*v24)(_QWORD *, char *, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;

  v26 = a4;
  v30 = a1;
  v29 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v31 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (_QWORD **)((char *)&v26 - v7);
  v9 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v26 - v10;
  v12 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_getAssociatedTypeWitness();
  v27 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v26 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, v30, a2, v17);
  dispatch thunk of Sequence.makeIterator()();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v29 = v19;
  v30 = v16;
  dispatch thunk of IteratorProtocol.next()();
  v21 = v31;
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  if (v22(v11, 1, AssociatedTypeWitness) != 1)
  {
    v28 = AssociatedConformanceWitness;
    v23 = v26;
    v24 = *(void (**)(_QWORD *, char *, uint64_t))(v21 + 32);
    while (1)
    {
      v24(v8, v11, AssociatedTypeWitness);
      UnkeyedEC.encode<A>(_:)(v8, AssociatedTypeWitness, v23);
      if (v4)
        break;
      (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v8, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
      if (v22(v11, 1, AssociatedTypeWitness) == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v30);
    }
    (*(void (**)(_QWORD *, uint64_t))(v31 + 8))(v8, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v30);
}

uint64_t UnkeyedEC.encodeConditional<A>(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = a1;
  return UnkeyedEC.encode<A>(_:)(&v4, a2, a3);
}

uint64_t UnkeyedEC.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27[3];
  uint64_t v28;
  _UNKNOWN **v29;
  uint64_t v30;

  v4 = v3;
  v30 = *MEMORY[0x24BDAC8D0];
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v3 + 4), (uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
  if (v28)
  {
    outlined init with copy of __REAssetService((uint64_t)v27, (uint64_t)v24);
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
    v7 = v25;
    v8 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for Terminatable?);
  }
  v9 = v3[2];
  v10 = v3[3];
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v10 + 16) + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v12 = v3[9];
  v27[0] = v12;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain();
  v13 = BinaryInteger.description.getter();
  v16 = v3[9];
  v17 = v16 + 1;
  if (__OFADD__(v16, 1))
    __break(1u);
  v18 = v13;
  v19 = v14;
  v20 = type metadata accessor for KeyedEC(0, a2, a3, v15);
  v4[9] = v17;
  *(_QWORD *)(inited + 56) = &unk_24DFA64E0;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  v21 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(v21 + 16) = v12;
  *(_BYTE *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = v18;
  *(_QWORD *)(v21 + 40) = v19;
  v27[0] = v10;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v22 = KeyedEC.__allocating_init(encoder:codingPath:)(v9, v27[0]);
  v28 = v20;
  v29 = &protocol witness table for KeyedEC<A>;
  v27[0] = v22;
  outlined init with take of Terminatable?((uint64_t)v27, (uint64_t)v24);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v24, (uint64_t)(v4 + 4));
  swift_endAccess();
  v27[0] = v22;
  MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedEC<A>, v20);
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t UnkeyedEC.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;

  v2 = v1;
  v29 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v1 + 4), (uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
  if (v27)
  {
    outlined init with copy of __REAssetService((uint64_t)v26, (uint64_t)v23);
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
    v5 = v24;
    v6 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v26, &demangling cache variable for type metadata for Terminatable?);
  }
  v7 = v1[2];
  v8 = v1[3];
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v8 + 16) + 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v10 = v1[9];
  v26[0] = v10;
  lazy protocol witness table accessor for type Int and conformance Int();
  swift_retain();
  v11 = BinaryInteger.description.getter();
  v13 = v1[9];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  v16 = v11;
  v17 = v12;
  v2[9] = v15;
  *(_QWORD *)(inited + 56) = &unk_24DFA64E0;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  v18 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v18;
  *(_QWORD *)(v18 + 16) = v10;
  *(_BYTE *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = v16;
  *(_QWORD *)(v18 + 40) = v17;
  v26[0] = v8;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v19 = v26[0];
  v20 = type metadata accessor for UnkeyedEC();
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  *(_OWORD *)(v21 + 64) = 0u;
  *(_QWORD *)(v21 + 16) = v7;
  *(_QWORD *)(v21 + 24) = v19;
  if ((*(_BYTE *)(v7 + 48) & 1) == 0)
    REEncoderBeginContainer();
  v27 = v20;
  v28 = &protocol witness table for UnkeyedEC;
  v26[0] = v21;
  outlined init with take of Terminatable?((uint64_t)v26, (uint64_t)v23);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Terminatable?((uint64_t)v23, v4);
  swift_endAccess();
  a1[3] = v20;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedEC and conformance UnkeyedEC, type metadata accessor for UnkeyedEC, (uint64_t)&protocol conformance descriptor for UnkeyedEC);
  a1[4] = result;
  *a1 = v21;
  return result;
}

uint64_t UnkeyedEC.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v2 = v1;
  v4 = v1[3];
  v5 = *(_QWORD *)(v1[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v7 = v1[9];
  lazy protocol witness table accessor for type Int and conformance Int();
  v8 = BinaryInteger.description.getter();
  v10 = v1[9];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  v13 = v8;
  v14 = v9;
  v2[9] = v12;
  *(_QWORD *)(inited + 56) = &unk_24DFA64E0;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey();
  v15 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(v15 + 16) = v7;
  *(_BYTE *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = v13;
  *(_QWORD *)(v15 + 40) = v14;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v16 = type metadata accessor for PrivateEncoder();
  v17 = swift_allocObject();
  v18 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v17 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v17 + 40) = v18;
  *(_BYTE *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = v4;
  a1[3] = v16;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
  a1[4] = result;
  *a1 = v17;
  return result;
}

uint64_t UnkeyedEC.__deallocating_deinit()
{
  return UnkeyedEC.__deallocating_deinit();
}

{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnkeyedEC()
{
  return objc_opt_self();
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance UnkeyedEC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 72);
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance UnkeyedEC()
{
  UnkeyedEC.encodeNil()();
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Bool a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2)
{
  UnkeyedEC.encode(_:)(*(Swift::String *)&a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Double a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Float a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int a1)
{
  UnkeyedEC.encode(_:)(a1);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int8 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int16 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::Int32 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt a1)
{
  UnkeyedEC.encode(_:)(a1);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt8 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt16 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance UnkeyedEC(Swift::UInt32 a1)
{
  UnkeyedEC.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance UnkeyedEC(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  return UnkeyedEC.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return UnkeyedEC.encodeConditional<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3);
}

{
  return protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(a1, a2, a3);
}

{
  return protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, char *a3)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x24BEE4348]);
}

{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, MEMORY[0x24BEE46B8]);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, char *a3, _QWORD *a4)
{
  return UnkeyedEC.encode<A>(contentsOf:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:) in conformance UnkeyedEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedEC.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.nestedUnkeyedContainer() in conformance UnkeyedEC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedEC.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance UnkeyedEC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedEC.superEncoder()(a1);
}

uint64_t SingleValueEC.encode<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[5];

  v1 = *(_QWORD *)(v0 + 16);
  v3[3] = type metadata accessor for PrivateEncoder();
  v3[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateEncoder and conformance PrivateEncoder, type metadata accessor for PrivateEncoder, (uint64_t)&protocol conformance descriptor for PrivateEncoder);
  v3[0] = v1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t type metadata accessor for SingleValueEC()
{
  return objc_opt_self();
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance SingleValueEC()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteNil();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteBool();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  int v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  String.utf8CString.getter();
  v0 = REEncoderWriteString();
  result = swift_release();
  if (v0)
  {
    v2 = specialized static REEncoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteDouble();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteFloat();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteInt8();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteInt16();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteUInt8();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REEncoderWriteUInt16();
  if ((_DWORD)result)
  {
    v1 = specialized static REEncoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, (uint64_t (*)(_QWORD, const char *, uint64_t))MEMORY[0x24BE21DB8]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x24BE21DB0]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x24BE21DE8]);
}

{
  return protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(a1, a2, a3, MEMORY[0x24BE21DE0]);
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance SingleValueEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, const char *, uint64_t))
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  result = a4(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 16) + 16), "", a1);
  if ((_DWORD)result)
  {
    v6 = specialized static REEncoder.Error.getStatus(_:)();
    v8 = v7;
    v10 = v9;
    lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error();
    swift_allocError();
    *(_QWORD *)v11 = v6;
    *(_QWORD *)(v11 + 8) = v8;
    *(_BYTE *)(v11 + 16) = v10 & 1;
    return swift_willThrow();
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance SingleValueEC()
{
  return SingleValueEC.encode<A>(_:)();
}

uint64_t REDecoder.__deallocating_deinit()
{
  return REEncoder.__deallocating_deinit((void (*)(_QWORD))MEMORY[0x24BE21A30]);
}

uint64_t REEncoder.__deallocating_deinit(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REDecoder()
{
  return objc_opt_self();
}

uint64_t REDecoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(v2 + 16);
  type metadata accessor for PrivateDecoder();
  v6 = swift_allocObject();
  v7 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v6 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v7;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = REDecoderSetFromCFData();

  if (v9 || REDecoderOpen())
  {
    v10 = specialized static REDecoder.Error.getStatus(_:)();
    v12 = v11;
    v14 = v13;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v15 = v10;
    *(_QWORD *)(v15 + 8) = v12;
    *(_BYTE *)(v15 + 16) = v14 & 1;
    swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
    if (!v23)
    {
      PrivateEncoder.terminateContainers(_:)(0);
      if (REDecoderClose())
      {
        v17 = specialized static REDecoder.Error.getStatus(_:)();
        v19 = v18;
        v21 = v20;
        lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
        swift_allocError();
        *(_QWORD *)v22 = v17;
        *(_QWORD *)(v22 + 8) = v19;
        *(_BYTE *)(v22 + 16) = v21 & 1;
        swift_willThrow();
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(a2, a1);
      }
    }
  }
  return swift_release();
}

uint64_t PrivateEncoder.terminateContainers(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  v3 = v1 + 40;
  result = swift_beginAccess();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 40) + 16) > a1)
  {
    while (1)
    {
      result = swift_beginAccess();
      v5 = *(_QWORD **)v3;
      if (!*(_QWORD *)(*(_QWORD *)v3 + 16))
        break;
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)v3 = v5;
      if ((result & 1) != 0)
      {
        v6 = v5[2];
        if (!v6)
          goto LABEL_8;
      }
      else
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        v5 = (_QWORD *)result;
        *(_QWORD *)v3 = result;
        v6 = *(_QWORD *)(result + 16);
        if (!v6)
        {
LABEL_8:
          __break(1u);
          return result;
        }
      }
      v7 = v6 - 1;
      v8 = &v5[6 * v7];
      v9 = v8[2];
      *(_OWORD *)v12 = v8[3];
      *(_OWORD *)&v12[9] = *(_OWORD *)((char *)v8 + 57);
      v5[2] = v7;
      *(_QWORD *)v3 = v5;
      v13 = v9;
      *(_OWORD *)v14 = *(_OWORD *)v12;
      *(_OWORD *)&v14[9] = *(_OWORD *)&v12[9];
      swift_endAccess();
      v10 = *(_QWORD *)&v14[8];
      v11 = *(_QWORD *)&v14[16];
      __swift_project_boxed_opaque_existential_1(&v13, *(uint64_t *)&v14[8]);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
      if (*(_QWORD *)(*(_QWORD *)v3 + 16) <= a1)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t PrivateDecoder.decode(_:)()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char v3;
  char v4;
  uint64_t v5;

  if (REDecoderReadString())
  {
    v0 = specialized static REDecoder.Error.getStatus(_:)();
    v2 = v1;
    v4 = v3 & 1;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v5 = v0;
  }
  else
  {
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v5 = 0xD000000000000017;
    v2 = 0x800000021BE84E00;
    v4 = 1;
  }
  *(_QWORD *)(v5 + 8) = v2;
  *(_BYTE *)(v5 + 16) = v4;
  return swift_willThrow();
}

uint64_t PrivateDecoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  char v31;
  __int128 v32;
  _BYTE v33[25];

  v5 = v4;
  v6 = v3;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 16) + 1);
  v9 = (_QWORD *)(v3 + 40);
  swift_beginAccess();
  v10 = *(_QWORD *)(v3 + 40);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v12 + 16) >= v11)
  {
    v13 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v10 + 48 * v11 - 16, (uint64_t)&v32, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v13 = v33[24];
    outlined init with take of BindableDataInternal(&v32, (uint64_t)&v28);
    v31 = v13;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v28, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v12 = *(_QWORD *)(v3 + 24);
  }
  *(_BYTE *)(v3 + 48) = v13;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v12 + 16));
  v15 = type metadata accessor for KeyedDC(0, a2, a3, v14);
  v16 = *(_QWORD *)(v6 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v6, v16, v17, v18);
  result = swift_release();
  if (!v5)
  {
    *(_BYTE *)(v6 + 48) = 0;
    v29 = v15;
    v30 = &protocol witness table for KeyedDC<A>;
    *(_QWORD *)&v28 = v19;
    outlined init with take of BindableDataInternal(&v28, (uint64_t)&v32);
    v33[24] = 1;
    swift_beginAccess();
    v21 = *(_QWORD **)(v6 + 40);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v6 + 40) = v21;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
      *v9 = v21;
    }
    v24 = v21[2];
    v23 = v21[3];
    if (v24 >= v23 >> 1)
    {
      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, v21);
      *v9 = v21;
    }
    v21[2] = v24 + 1;
    v25 = &v21[6 * v24];
    v26 = v32;
    v27 = *(_OWORD *)v33;
    *(_OWORD *)((char *)v25 + 57) = *(_OWORD *)&v33[9];
    v25[2] = v26;
    v25[3] = v27;
    swift_endAccess();
    *(_QWORD *)&v32 = v19;
    MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedDC<A>, v15);
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t PrivateDecoder.unkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _UNKNOWN **v24;
  char v25;
  __int128 v26;
  _BYTE v27[25];

  v3 = v2;
  swift_beginAccess();
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 16) + 1);
  v5 = (_QWORD *)(v1 + 40);
  swift_beginAccess();
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) >= v7)
  {
    v10 = 0;
  }
  else
  {
    outlined init with copy of (Int, URL)(v6 + 48 * v7 - 16, (uint64_t)&v26, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v9 = v27[24];
    outlined init with take of BindableDataInternal(&v26, (uint64_t)&v22);
    v25 = v9;
    outlined destroy of BodyTrackingComponent?((uint64_t)&v22, &demangling cache variable for type metadata for (Terminatable, keyed: Bool));
    v10 = v9 ^ 1;
    v8 = *(_QWORD *)(v1 + 24);
  }
  *(_BYTE *)(v1 + 48) = v10;
  PrivateEncoder.terminateContainers(_:)(*(_QWORD *)(v8 + 16));
  v11 = *(_QWORD *)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  v12 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v1, v11);
  result = swift_release();
  if (!v3)
  {
    *(_BYTE *)(v1 + 48) = 0;
    v14 = type metadata accessor for UnkeyedDC();
    v23 = v14;
    v24 = &protocol witness table for UnkeyedDC;
    *(_QWORD *)&v22 = v12;
    outlined init with take of BindableDataInternal(&v22, (uint64_t)&v26);
    v27[24] = 0;
    swift_beginAccess();
    v15 = *(_QWORD **)(v1 + 40);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v1 + 40) = v15;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      *v5 = v15;
    }
    v18 = v15[2];
    v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
      *v5 = v15;
    }
    v15[2] = v18 + 1;
    v19 = &v15[6 * v18];
    v20 = v26;
    v21 = *(_OWORD *)v27;
    *(_OWORD *)((char *)v19 + 57) = *(_OWORD *)&v27[9];
    v19[2] = v20;
    v19[3] = v21;
    swift_endAccess();
    a1[3] = v14;
    result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, type metadata accessor for UnkeyedDC, (uint64_t)&protocol conformance descriptor for UnkeyedDC);
    a1[4] = result;
    *a1 = v12;
  }
  return result;
}

uint64_t PrivateEncoder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PrivateDecoder()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for KeyedDC()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance PrivateEncoder()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance PrivateDecoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance PrivateDecoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PrivateDecoder.container<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance PrivateDecoder@<X0>(uint64_t *a1@<X8>)
{
  return PrivateDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance PrivateDecoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = type metadata accessor for SingleValueDC();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  a1[3] = v5;
  a1[4] = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type SingleValueDC and conformance SingleValueDC, type metadata accessor for SingleValueDC, (uint64_t)&protocol conformance descriptor for SingleValueDC);
  *a1 = v6;
  swift_retain();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall KeyedDC.terminate()()
{
  KeyedEC.terminate()(MEMORY[0x24BE21A38]);
}

uint64_t KeyedDC.allKeys.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD *)(v0 + 72);
  }
  else
  {
    v1 = KeyedDC._allKeys.getter();
    *(_QWORD *)(v0 + 72) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyedDC._allKeys.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  char v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  char *v76;
  Swift::Int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v1 = v0;
  v85 = *MEMORY[0x24BDAC8D0];
  v2 = *v0;
  v3 = *(_QWORD *)(*v0 + 80);
  v4 = type metadata accessor for Optional();
  v72 = *(_QWORD *)(v4 - 8);
  v73 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v68 = (char *)&v65 - v8;
  v9 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v76 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v71 = (char *)&v65 - v13;
  MEMORY[0x24BDAC7A8](v14);
  v67 = (char *)&v65 - v15;
  v82 = static Array._allocateUninitialized(_:)();
  v78 = v0[2];
  v16 = REDecoderContainerElementCount();
  v74 = v6;
  if ((v16 & 1) != 0)
  {
    type metadata accessor for OS_os_log();
    v17 = static OS_os_log.default.getter();
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v19 = 134217984;
      v83 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, v17, v18, "Warning: Dictionary contains an odd number of elements: %ld", v19, 0xCu);
      MEMORY[0x220772F44](v19, -1, -1);
    }

    v6 = v74;
  }
  if (v16 >= 0)
    v20 = v16;
  else
    v20 = v16 + 1;
  v21 = v20 >> 1;
  v22 = type metadata accessor for Array();
  v77 = v21;
  v70 = v22;
  Array.reserveCapacity(_:)(v21);
  if (v16 < -1)
    goto LABEL_46;
  if ((unint64_t)(v16 + 1) < 3)
    return v82;
  v24 = 0;
  v66 = v1 + 10;
  v75 = v1 + 11;
  v69 = v2;
  while (1)
  {
    v80 = -1;
    v81 = 0;
    v84 = 0;
    REDecoderContainerGetKeyAndOffset();
    if (v84)
      break;
    v42 = v81;
    v43 = v68;
    dispatch thunk of CodingKey.init(intValue:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v43, 1, v3) != 1)
    {
      v44 = v67;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v67, v43, v3);
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v71, v44, v3);
      Array.append(_:)();
      v45 = v80;
      v46 = v66;
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v79 = (_QWORD *)*v46;
      v48 = v79;
      *v46 = 0x8000000000000000;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
      v51 = v48[2];
      v52 = (v49 & 1) == 0;
      v53 = v51 + v52;
      if (__OFADD__(v51, v52))
        goto LABEL_43;
      v54 = v49;
      if (v48[3] >= v53)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
        v55 = specialized __RawDictionaryStorage.find<A>(_:)(v42);
        if ((v54 & 1) != (v56 & 1))
          goto LABEL_48;
        v50 = v55;
      }
      v2 = v69;
      v57 = v79;
      if ((v54 & 1) != 0)
      {
        *(_QWORD *)(v79[7] + 8 * v50) = v45;
      }
      else
      {
        v79[(v50 >> 6) + 8] |= 1 << v50;
        v58 = 8 * v50;
        *(_QWORD *)(v57[6] + v58) = v42;
        *(_QWORD *)(v57[7] + v58) = v45;
        v59 = v57[2];
        v60 = __OFADD__(v59, 1);
        v61 = v59 + 1;
        if (v60)
          goto LABEL_45;
        v57[2] = v61;
      }
      *v66 = v57;
      swift_bridgeObjectRelease();
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v67, v3);
      goto LABEL_41;
    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v73);
LABEL_13:
    if (v77 == ++v24)
      return v82;
  }
  v25 = String.init(cString:)();
  v27 = v26;
  swift_bridgeObjectRetain();
  MEMORY[0x22076A028](v25, v27, v3, *(_QWORD *)(v2 + 88));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v3) == 1)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v6, v73);
    goto LABEL_13;
  }
  v28 = v76;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v76, v6, v3);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v71, v28, v3);
  Array.append(_:)();
  v29 = v80;
  v30 = v75;
  swift_beginAccess();
  v31 = swift_isUniquelyReferenced_nonNull_native();
  v79 = (_QWORD *)*v30;
  v32 = v79;
  *v30 = 0x8000000000000000;
  v34 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
  v35 = v32[2];
  v36 = (v33 & 1) == 0;
  v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
  }
  v38 = v33;
  if (v32[3] >= v37)
  {
    if ((v31 & 1) != 0)
    {
      v41 = v79;
      if ((v33 & 1) == 0)
        goto LABEL_38;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      v41 = v79;
      if ((v38 & 1) == 0)
        goto LABEL_38;
    }
    goto LABEL_29;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, v31);
  v39 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
  if ((v38 & 1) == (v40 & 1))
  {
    v34 = v39;
    v41 = v79;
    if ((v38 & 1) == 0)
    {
LABEL_38:
      v41[(v34 >> 6) + 8] |= 1 << v34;
      v62 = (uint64_t *)(v41[6] + 16 * v34);
      *v62 = v25;
      v62[1] = v27;
      *(_QWORD *)(v41[7] + 8 * v34) = v29;
      v63 = v41[2];
      v60 = __OFADD__(v63, 1);
      v64 = v63 + 1;
      if (v60)
        goto LABEL_44;
      v41[2] = v64;
      swift_bridgeObjectRetain();
      goto LABEL_40;
    }
LABEL_29:
    *(_QWORD *)(v41[7] + 8 * v34) = v29;
LABEL_40:
    *v75 = v41;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v76, v3);
    v2 = v69;
LABEL_41:
    v6 = v74;
    goto LABEL_13;
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_48:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t KeyedDC.contains(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;

  v1 = v0;
  KeyedDC.allKeys.getter();
  swift_bridgeObjectRelease();
  v2 = dispatch thunk of CodingKey.intValue.getter();
  v4 = v3;
  v5 = dispatch thunk of CodingKey.stringValue.getter();
  v7 = v6;
  if ((v4 & 1) != 0)
  {
    v10 = v5;
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v1 + 88) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v10, v7);
      v9 = v11;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    v9 = 0;
    return v9 & 1;
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16))
    goto LABEL_7;
  specialized __RawDictionaryStorage.find<A>(_:)(v2);
  v9 = v8;
  return v9 & 1;
}

uint64_t KeyedDC.readKey(_:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  char v8;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  KeyedDC.allKeys.getter();
  swift_bridgeObjectRelease();
  v1 = dispatch thunk of CodingKey.intValue.getter();
  v3 = v2;
  v4 = dispatch thunk of CodingKey.stringValue.getter();
  v6 = v5;
  if ((v3 & 1) != 0)
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 88) + 16))
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v4, (uint64_t)v6);
      if ((v8 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return REDecoderContainerSetOffset();
      }
      swift_bridgeObjectRelease();
    }
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    v14 = static OS_os_log.default.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_bridgeObjectRetain();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)v6, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v14, v15, "Warning: Dictionary does not contain key: \"%s\"", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v17, -1, -1);
      MEMORY[0x220772F44](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v25 = 0xD00000000000002BLL;
    v26 = 0x800000021BE84E70;
  }
  else
  {
    swift_beginAccess();
    if (*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v1);
      if ((v7 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return REDecoderContainerSetOffset();
      }
    }
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    v10 = static OS_os_log.default.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc();
      v13 = swift_slowAlloc();
      v25 = v13;
      *(_DWORD *)v12 = 134218242;
      v27 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      swift_bridgeObjectRetain();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, (unint64_t)v6, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v10, v11, "Warning: Dictionary does not contain key: %ld \"%s\"", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v13, -1, -1);
      MEMORY[0x220772F44](v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v25 = 0;
    v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    v25 = 0xD00000000000002ALL;
    v26 = 0x800000021BE84EA0;
    v27 = v1;
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 8736;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
  }
  v20._countAndFlagsBits = v4;
  v20._object = v6;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 34;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v23 = v25;
  v22 = v26;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(_QWORD *)v24 = v23;
  *(_QWORD *)(v24 + 8) = v22;
  *(_BYTE *)(v24 + 16) = 1;
  return swift_willThrow();
}

uint64_t KeyedDC.decodeNil(forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  char Nil;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  Nil = KeyedDC.readKey(_:)();
  if (!v2)
    Nil = REDecoderTryReadNil();
  return Nil & 1;
}

uint64_t KeyedDC.decode(_:forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  KeyedDC.readKey(_:)();
  if (!v2)
  {
    if (REDecoderReadBool())
    {
      v5 = specialized static REDecoder.Error.getStatus(_:)();
      v7 = v6;
      v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v10 = v5;
      *(_QWORD *)(v10 + 8) = v7;
      *(_BYTE *)(v10 + 16) = v9 & 1;
      swift_willThrow();
    }
    else
    {
      v4 = 0;
    }
  }
  return v4 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v2)
  {
    result = REDecoderReadDouble();
    if ((_DWORD)result)
    {
      v5 = specialized static REDecoder.Error.getStatus(_:)();
      v7 = v6;
      v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v10 = v5;
      *(_QWORD *)(v10 + 8) = v7;
      *(_BYTE *)(v10 + 16) = v9 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v2)
  {
    result = REDecoderReadFloat();
    if ((_DWORD)result)
    {
      v5 = specialized static REDecoder.Error.getStatus(_:)();
      v7 = v6;
      v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v10 = v5;
      *(_QWORD *)(v10 + 8) = v7;
      *(_BYTE *)(v10 + 16) = v9 & 1;
      return swift_willThrow();
    }
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v2)
    return PrivateDecoder.decode(_:)();
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1)
{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21A80]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21A88]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21A70]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21A78]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21AA8]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21AB0]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21A98]);
}

{
  return KeyedDC.decode(_:forKey:)(a1, MEMORY[0x24BE21AA0]);
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(_QWORD, const char *, _QWORD *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  _QWORD v15[2];

  v5 = v3;
  v15[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    v15[0] = 0;
    if (a2(*(_QWORD *)(v6 + 16), "", v15))
    {
      v9 = specialized static REDecoder.Error.getStatus(_:)();
      v11 = v10;
      v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v14 = v9;
      *(_QWORD *)(v14 + 8) = v11;
      *(_BYTE *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15[0];
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(_QWORD, const char *, unsigned __int8 *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;

  v5 = v3;
  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    v15 = 0;
    if (a2(*(_QWORD *)(v6 + 16), "", &v15))
    {
      v9 = specialized static REDecoder.Error.getStatus(_:)();
      v11 = v10;
      v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v14 = v9;
      *(_QWORD *)(v14 + 8) = v11;
      *(_BYTE *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(_QWORD, const char *, unsigned __int16 *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;

  v5 = v3;
  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    v15 = 0;
    if (a2(*(_QWORD *)(v6 + 16), "", &v15))
    {
      v9 = specialized static REDecoder.Error.getStatus(_:)();
      v11 = v10;
      v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v14 = v9;
      *(_QWORD *)(v14 + 8) = v11;
      *(_BYTE *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode(_:forKey:)(uint64_t a1, unsigned int (*a2)(_QWORD, const char *, unsigned int *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = v3;
  v16 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v7);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v5)
  {
    v15 = 0;
    if (a2(*(_QWORD *)(v6 + 16), "", &v15))
    {
      v9 = specialized static REDecoder.Error.getStatus(_:)();
      v11 = v10;
      v13 = v12;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v14 = v9;
      *(_QWORD *)(v14 + 8) = v11;
      *(_BYTE *)(v14 + 16) = v13 & 1;
      return swift_willThrow();
    }
    else
    {
      return v15;
    }
  }
  return result;
}

uint64_t KeyedDC.decode<A>(_:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  Swift::Int v16;
  void (*v17)(char *, uint64_t, uint64_t);
  _QWORD *v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = a3;
  v6 = (uint64_t)v5;
  v34 = a4;
  v25[1] = a5;
  v26 = *v5;
  v8 = *(_QWORD *)(v26 + 80);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v25 - v13;
  v15 = v5[2];
  v16 = *(_QWORD *)(v5[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v16);
  swift_bridgeObjectRelease();
  v27 = v9;
  v28 = a2;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v17(v14, a2, v8);
  v18 = (_QWORD *)(v15 + 24);
  swift_beginAccess();
  v19 = *(_QWORD **)(v15 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v15 + 24) = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
    *v18 = v19;
  }
  v22 = v19[2];
  v21 = v19[3];
  if (v22 >= v21 >> 1)
    *v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
  v17(v11, (uint64_t)v14, v8);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, (uint64_t)v11, (uint64_t *)(v15 + 24), v8, *(_QWORD *)(v26 + 88));
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v8);
  swift_endAccess();
  v23 = v29;
  KeyedDC.readKey(_:)();
  if (!v23)
  {
    v32 = type metadata accessor for PrivateDecoder();
    v33 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
    v31 = v15;
    swift_retain();
    dispatch thunk of Decodable.init(from:)();
  }
  return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v6);
}

uint64_t $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 16) + 24;
  swift_beginAccess();
  v2 = *(_QWORD **)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    __break(1u);
LABEL_6:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    v2 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 16);
    if (v4)
      goto LABEL_4;
    goto LABEL_7;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_6;
  v4 = v2[2];
  if (v4)
  {
LABEL_4:
    v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(_QWORD *)v1 = v2;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t KeyedDC.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  uint64_t v32;

  v6 = v5;
  v32 = *MEMORY[0x24BDAC8D0];
  v10 = (uint64_t)(v4 + 4);
  v9 = *v4;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v4 + 4), (uint64_t)v29, &demangling cache variable for type metadata for Terminatable?);
  if (v30)
  {
    outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)v26);
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for Terminatable?);
    v12 = v27;
    v11 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v11);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for Terminatable?);
  }
  v13 = v4[2];
  v14 = *(_QWORD *)(v4[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v14);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v6)
  {
    v17 = type metadata accessor for KeyedDC(0, a3, a4, v16);
    v18 = v4[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v20 = *(_QWORD *)(v9 + 80);
    *(_QWORD *)(inited + 56) = v20;
    *(_QWORD *)(inited + 64) = *(_QWORD *)(v9 + 88);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, a2, v20);
    v29[0] = v18;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    v24 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v13, v29[0], v22, v23);
    swift_release();
    v30 = v17;
    v31 = &protocol witness table for KeyedDC<A>;
    v29[0] = v24;
    outlined init with take of Terminatable?((uint64_t)v29, (uint64_t)v26);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v26, v10);
    swift_endAccess();
    v29[0] = v24;
    MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedDC<A>, v17);
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t KeyedDC.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  uint64_t v26;

  v4 = v3;
  v26 = *MEMORY[0x24BDAC8D0];
  v7 = (uint64_t)(v2 + 4);
  v8 = *v2;
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v2 + 4), (uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
  if (v24)
  {
    outlined init with copy of __REAssetService((uint64_t)v23, (uint64_t)v20);
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
    v9 = v21;
    v10 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for Terminatable?);
  }
  v11 = v2[2];
  v12 = *(_QWORD *)(v2[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v12);
  swift_bridgeObjectRelease();
  result = KeyedDC.readKey(_:)();
  if (!v4)
  {
    v14 = v2[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v16 = *(_QWORD *)(v8 + 80);
    *(_QWORD *)(inited + 56) = v16;
    *(_QWORD *)(inited + 64) = *(_QWORD *)(v8 + 88);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(boxed_opaque_existential_1, a1, v16);
    v23[0] = v14;
    swift_retain();
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    v18 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v11, v23[0]);
    swift_release();
    v19 = type metadata accessor for UnkeyedDC();
    v24 = v19;
    v25 = &protocol witness table for UnkeyedDC;
    v23[0] = v18;
    outlined init with take of Terminatable?((uint64_t)v23, (uint64_t)v20);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v20, v7);
    swift_endAccess();
    a2[3] = v19;
    result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, type metadata accessor for UnkeyedDC, (uint64_t)&protocol conformance descriptor for UnkeyedDC);
    a2[4] = result;
    *a2 = v18;
  }
  return result;
}

uint64_t KeyedDC.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *v1;
  v4 = *(_QWORD *)(v3 + 80);
  v5 = type metadata accessor for Optional();
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v11 - v7;
  MEMORY[0x22076A028](0x7265707573, 0xE500000000000000, v4, *(_QWORD *)(v3 + 88), v6);
  v9 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    KeyedDC.superDecoder(forKey:)((uint64_t)v8, a1);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v8, v4);
  }
  return result;
}

uint64_t KeyedDC.superDecoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v5 = *v2;
  v6 = v2[2];
  v7 = v2[3];
  v8 = *(_QWORD *)(v6 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v10 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(inited + 56) = v10;
  *(_QWORD *)(inited + 64) = *(_QWORD *)(v5 + 88);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(boxed_opaque_existential_1, a1, v10);
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  v12 = v7;
  v13 = type metadata accessor for PrivateDecoder();
  v14 = swift_allocObject();
  v15 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v14 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v14 + 40) = v15;
  *(_BYTE *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 16) = v8;
  *(_QWORD *)(v14 + 24) = v12;
  a2[3] = v13;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
  a2[4] = result;
  *a2 = v14;
  return result;
}

uint64_t KeyedDC.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?(v0 + 32, &demangling cache variable for type metadata for Terminatable?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t KeyedDC.__deallocating_deinit()
{
  KeyedDC.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyedDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyedDC);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance KeyedDC<A>()
{
  return KeyedDC.allKeys.getter();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance KeyedDC<A>()
{
  return KeyedDC.contains(_:)() & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance KeyedDC<A>()
{
  return KeyedDC.decodeNil(forKey:)() & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>()
{
  return KeyedDC.decode(_:forKey:)() & 1;
}

{
  return KeyedDC.decode(_:forKey:)();
}

{
  return KeyedDC.decode(_:forKey:)();
}

{
  return KeyedDC.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1)
{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return KeyedDC.decode(_:forKey:)(a1);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C70]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C78]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  return a4(a1, v7, a3);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return KeyedDC.decode<A>(_:forKey:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

{
  type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
  return KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3BF8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C00]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C08]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C20]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C28]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C30]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C38]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C48]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C10]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C40]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C50]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C58]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C60]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(a1, a2, a3, MEMORY[0x24BEE3C68]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;

  v7 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  return a4(a1, v7, a3) & 0x1FF;
}

{
  uint64_t v7;

  v7 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  return a4(a1, v7, a3) & 0x1FFFF;
}

{
  uint64_t v7;
  unint64_t v8;

  v7 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  v8 = a4(a1, v7, a3);
  return v8 | ((HIDWORD(v8) & 1) << 32);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  result = a4(a1, v8, a3);
  if (v4)
    return v10;
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v8 = type metadata accessor for KeyedDC(0, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)a4);
  result = a4(a1, v8, a3);
  if (v4)
    return v10;
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for KeyedDC(0, *(_QWORD *)(a5 + 80), *(_QWORD *)(a5 + 88), a4);
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance KeyedDC<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return KeyedDC.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedDC.nestedUnkeyedContainer(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance KeyedDC<A>@<X0>(uint64_t *a1@<X8>)
{
  return KeyedDC.superDecoder()(a1);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance KeyedDC<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return KeyedDC.superDecoder(forKey:)(a1, a2);
}

void protocol witness for Terminatable.terminate() in conformance KeyedDC<A>()
{
  KeyedDC.terminate()();
}

uint64_t UnkeyedDC.count.getter()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t result;

  if ((*(_BYTE *)(v0 + 81) & 1) == 0)
    return *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  result = REDecoderContainerElementCount();
  *(_QWORD *)(v0 + 72) = result;
  *(_WORD *)(v0 + 80) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

double protocol witness for CodingKey.init(stringValue:) in conformance UnkeyedDC.IndexedCodingKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  swift_bridgeObjectRelease();
  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance UnkeyedDC.IndexedCodingKey@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = dispatch thunk of CustomStringConvertible.description.getter();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance UnkeyedDC.IndexedCodingKey()
{
  lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  return CodingKey.debugDescription.getter();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UnkeyedDC.decodeNil()()
{
  uint64_t v0;
  Swift::Int v1;
  int Nil;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  Nil = REDecoderTryReadNil();
  if (Nil)
  {
    v3 = *(_QWORD *)(v0 + 88);
    v4 = __OFADD__(v3, 1);
    v5 = v3 + 1;
    if (v4)
      __break(1u);
    else
      *(_QWORD *)(v0 + 88) = v5;
  }
  return Nil;
}

uint64_t UnkeyedDC.decode(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v3);
  swift_bridgeObjectRelease();
  result = PrivateDecoder.decode(_:)();
  if (!v2)
  {
    v5 = *(_QWORD *)(v0 + 88);
    v6 = __OFADD__(v5, 1);
    v7 = v5 + 1;
    if (v6)
      __break(1u);
    else
      *(_QWORD *)(v0 + 88) = v7;
  }
  return result;
}

uint64_t UnkeyedDC.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  void *v34;
  unint64_t v35;
  char *v36;

  v32 = a3;
  v5 = (uint64_t)v4;
  v28 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v36 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v4[2];
  v10 = *(_QWORD *)(v4[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v10);
  swift_bridgeObjectRelease();
  v11 = v4[11];
  *(_QWORD *)&v33 = v11;
  v12 = dispatch thunk of CustomStringConvertible.description.getter();
  v30 = v13;
  v14 = (_QWORD *)(v9 + 24);
  swift_beginAccess();
  v15 = *(_QWORD **)(v9 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v9 + 24) = v15;
  v29 = a4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
    *v14 = v15;
  }
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
  {
    v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, v15);
    *v14 = v15;
  }
  v34 = &unk_24DFA6560;
  v35 = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  v19 = swift_allocObject();
  *(_QWORD *)&v33 = v19;
  *(_QWORD *)(v19 + 16) = v11;
  *(_BYTE *)(v19 + 24) = 0;
  v20 = v30;
  *(_QWORD *)(v19 + 32) = v12;
  *(_QWORD *)(v19 + 40) = v20;
  v15[2] = v18 + 1;
  outlined init with take of BindableDataInternal(&v33, (uint64_t)&v15[5 * v18 + 4]);
  swift_endAccess();
  v34 = (void *)type metadata accessor for PrivateDecoder();
  v35 = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
  *(_QWORD *)&v33 = v9;
  swift_retain();
  v21 = v36;
  v22 = v31;
  result = dispatch thunk of Decodable.init(from:)();
  if (v22)
    return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
  v24 = *(_QWORD *)(v5 + 88);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v5 + 88) = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v29, v21, a2);
    return $defer #1 <A><A1>() in KeyedEC.encode<A>(_:forKey:)(v5);
  }
  __break(1u);
  return result;
}

uint64_t UnkeyedDC.nestedContainer<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  _UNKNOWN **v32;
  uint64_t v33;

  v5 = v4;
  v33 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t)(v3 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v3 + 4), (uint64_t)v30, &demangling cache variable for type metadata for Terminatable?);
  if (v31)
  {
    outlined init with copy of __REAssetService((uint64_t)v30, (uint64_t)v27);
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for Terminatable?);
    v9 = v28;
    v10 = v29;
    __swift_project_boxed_opaque_existential_1(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v30, &demangling cache variable for type metadata for Terminatable?);
  }
  v11 = v3[2];
  v12 = *(_QWORD *)(v3[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v12);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for KeyedDC(0, a2, a3, v13);
  v15 = v3[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v30[0] = v3[11];
  v17 = v30[0];
  swift_retain();
  swift_bridgeObjectRetain();
  v18 = dispatch thunk of CustomStringConvertible.description.getter();
  v20 = v19;
  *(_QWORD *)(inited + 56) = &unk_24DFA6560;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  v21 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v21;
  *(_QWORD *)(v21 + 16) = v17;
  *(_BYTE *)(v21 + 24) = 0;
  *(_QWORD *)(v21 + 32) = v18;
  *(_QWORD *)(v21 + 40) = v20;
  v30[0] = v15;
  specialized Array.append<A>(contentsOf:)(inited);
  v22 = v5;
  v25 = specialized KeyedDC.__allocating_init(decoder:codingPath:)(v11, v30[0], v23, v24);
  result = swift_release();
  if (!v22)
  {
    v31 = v14;
    v32 = &protocol witness table for KeyedDC<A>;
    v30[0] = v25;
    outlined init with take of Terminatable?((uint64_t)v30, (uint64_t)v27);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v27, v8);
    swift_endAccess();
    v30[0] = v25;
    MEMORY[0x220772E3C](&protocol conformance descriptor for KeyedDC<A>, v14);
    return KeyedDecodingContainer.init<A>(_:)();
  }
  return result;
}

uint64_t UnkeyedDC.nestedUnkeyedContainer()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  _UNKNOWN **v26;
  uint64_t v27;

  v3 = v2;
  v27 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t)(v1 + 4);
  swift_beginAccess();
  outlined init with copy of (Int, URL)((uint64_t)(v1 + 4), (uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  if (v25)
  {
    outlined init with copy of __REAssetService((uint64_t)v24, (uint64_t)v21);
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
    v6 = v22;
    v7 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for Terminatable?);
  }
  v8 = v1[2];
  v9 = *(_QWORD *)(v1[3] + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v9);
  swift_bridgeObjectRelease();
  v10 = v1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v24[0] = v1[11];
  v12 = v24[0];
  swift_retain();
  swift_bridgeObjectRetain();
  v13 = dispatch thunk of CustomStringConvertible.description.getter();
  v15 = v14;
  *(_QWORD *)(inited + 56) = &unk_24DFA6560;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  v16 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v16;
  *(_QWORD *)(v16 + 16) = v12;
  *(_BYTE *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = v13;
  *(_QWORD *)(v16 + 40) = v15;
  v24[0] = v10;
  specialized Array.append<A>(contentsOf:)(inited);
  v17 = v3;
  v18 = specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(v8, v24[0]);
  result = swift_release();
  if (!v17)
  {
    v20 = type metadata accessor for UnkeyedDC();
    v25 = v20;
    v26 = &protocol witness table for UnkeyedDC;
    v24[0] = v18;
    outlined init with take of Terminatable?((uint64_t)v24, (uint64_t)v21);
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Terminatable?((uint64_t)v21, v5);
    swift_endAccess();
    a1[3] = v20;
    result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type UnkeyedDC and conformance UnkeyedDC, type metadata accessor for UnkeyedDC, (uint64_t)&protocol conformance descriptor for UnkeyedDC);
    a1[4] = result;
    *a1 = v18;
  }
  return result;
}

uint64_t UnkeyedDC.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v3 = v1[3];
  v4 = *(_QWORD *)(v1[2] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v6 = v1[11];
  swift_bridgeObjectRetain();
  v7 = dispatch thunk of CustomStringConvertible.description.getter();
  v9 = v8;
  *(_QWORD *)(inited + 56) = &unk_24DFA6560;
  *(_QWORD *)(inited + 64) = lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey();
  v10 = swift_allocObject();
  *(_QWORD *)(inited + 32) = v10;
  *(_QWORD *)(v10 + 16) = v6;
  *(_BYTE *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = v7;
  *(_QWORD *)(v10 + 40) = v9;
  specialized Array.append<A>(contentsOf:)(inited);
  v11 = type metadata accessor for PrivateDecoder();
  v12 = swift_allocObject();
  v13 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v12 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v12 + 40) = v13;
  *(_BYTE *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v3;
  a1[3] = v11;
  result = lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
  a1[4] = result;
  *a1 = v12;
  return result;
}

uint64_t UnkeyedDC.__deallocating_deinit()
{
  return UnkeyedEC.__deallocating_deinit();
}

uint64_t type metadata accessor for UnkeyedDC()
{
  return objc_opt_self();
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance UnkeyedDC()
{
  return UnkeyedDC.count.getter();
}

uint64_t protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance UnkeyedDC()
{
  uint64_t v0;
  Swift::Int v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  return REDecoderIsAtEndOfContainer();
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance UnkeyedDC()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 88);
}

BOOL protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance UnkeyedDC()
{
  return UnkeyedDC.decodeNil()();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode(_:) in conformance UnkeyedDC()
{
  return specialized UnkeyedDC.decode(_:)() & 1;
}

{
  return UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21A80]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21A88]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21A70]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21A78]);
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21AA8]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21AB0]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21A98]);
}

{
  return specialized UnkeyedDC.decode(_:)(MEMORY[0x24BE21AA0]);
}

{
  return UnkeyedDecodingContainer.decode(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.decode<A>(_:) in conformance UnkeyedDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return UnkeyedDC.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC()
{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  return UnkeyedDecodingContainer.decodeIfPresent(_:)();
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = UnkeyedDecodingContainer.decodeIfPresent(_:)();
  if (v0)
    return v2;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(uint64_t a1, uint64_t a2)
{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE3690]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36B0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36B8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36C0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36D8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36D0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36E0]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36E8]);
}

{
  return protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(a1, a2, MEMORY[0x24BEE36F8]);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent(_:) in conformance UnkeyedDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

{
  return a3() & 0x1FFFF;
}

{
  unint64_t v3;

  v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (v3)
    return v5;
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance UnkeyedDC()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance UnkeyedDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnkeyedDC.nestedContainer<A>(keyedBy:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance UnkeyedDC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedDC.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance UnkeyedDC@<X0>(uint64_t *a1@<X8>)
{
  return UnkeyedDC.superDecoder()(a1);
}

uint64_t SingleValueDC.decode<A>(_:)()
{
  type metadata accessor for PrivateDecoder();
  lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(&lazy protocol witness table cache variable for type PrivateDecoder and conformance PrivateDecoder, type metadata accessor for PrivateDecoder, (uint64_t)&protocol conformance descriptor for PrivateDecoder);
  swift_retain();
  return dispatch thunk of Decodable.init(from:)();
}

uint64_t SingleValueEC.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SingleValueDC()
{
  return objc_opt_self();
}

uint64_t protocol witness for SingleValueDecodingContainer.codingPath.getter in conformance SingleValueDC()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueDecodingContainer.decodeNil() in conformance SingleValueDC()
{
  return REDecoderTryReadNil();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;

  if (REDecoderReadBool())
  {
    v0 = specialized static REDecoder.Error.getStatus(_:)();
    v2 = v1;
    v4 = v3;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v5 = v0;
    *(_QWORD *)(v5 + 8) = v2;
    *(_BYTE *)(v5 + 16) = v4 & 1;
    swift_willThrow();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

{
  return PrivateDecoder.decode(_:)();
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REDecoderReadDouble();
  if ((_DWORD)result)
  {
    v1 = specialized static REDecoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;

  result = REDecoderReadFloat();
  if ((_DWORD)result)
  {
    v1 = specialized static REDecoder.Error.getStatus(_:)();
    v3 = v2;
    v5 = v4;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = v3;
    *(_BYTE *)(v6 + 16) = v5 & 1;
    return swift_willThrow();
  }
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2)
{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21A80]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21A88]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21A70]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21A78]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21AA8]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21AB0]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21A98]);
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(a1, a2, MEMORY[0x24BE21AA0]);
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD, const char *, unsigned __int8 *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v12 = 0;
  if (!a3(*(_QWORD *)(v4 + 16), "", &v12))
    return v12;
  v5 = specialized static REDecoder.Error.getStatus(_:)();
  v7 = v6;
  v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD, const char *, unsigned __int16 *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int16 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v12 = 0;
  if (!a3(*(_QWORD *)(v4 + 16), "", &v12))
    return v12;
  v5 = specialized static REDecoder.Error.getStatus(_:)();
  v7 = v6;
  v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD, const char *, unsigned int *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v12 = 0;
  if (!a3(*(_QWORD *)(v4 + 16), "", &v12))
    return v12;
  v5 = specialized static REDecoder.Error.getStatus(_:)();
  v7 = v6;
  v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance SingleValueDC(uint64_t a1, uint64_t a2, unsigned int (*a3)(_QWORD, const char *, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v12[0] = 0;
  if (!a3(*(_QWORD *)(v4 + 16), "", v12))
    return v12[0];
  v5 = specialized static REDecoder.Error.getStatus(_:)();
  v7 = v6;
  v9 = v8;
  lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
  swift_allocError();
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = v7;
  *(_BYTE *)(v10 + 16) = v9 & 1;
  return swift_willThrow();
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance SingleValueDC()
{
  return SingleValueDC.decode<A>(_:)();
}

uint64_t associated type witness table accessor for KeyedDecodingContainerProtocol.Key : CodingKey in KeyedDC<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of BindableDataInternal(&v12, v10 + 40 * a1 + 32);
}

unint64_t specialized static REDecoder.Error.getStatus(_:)()
{
  unint64_t v0;
  int Status;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = 0xD000000000000017;
  v11 = 0;
  Status = REDecoderGetStatus();
  if (Status == 3)
  {
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    v3 = static OS_os_log.default.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v9 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E776F6E6B6E75, 0xE700000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v3, v4, "REDecoder decoding error: %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v6, -1, -1);
      MEMORY[0x220772F44](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v9 = 0;
    v10 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v9 = 0xD00000000000001ALL;
    v10 = 0x800000021BE84E50;
    v7._countAndFlagsBits = 0x6E776F6E6B6E75;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    type metadata accessor for OS_os_log();
    v2 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    if (Status == 1)
      return 0xD000000000000025;
  }
  return v0;
}

uint64_t specialized KeyedDC.init(decoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;

  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  v5 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v2 + 80) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v2 + 88) = specialized Dictionary.init(dictionaryLiteral:)(v5);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    if (REDecoderBeginContainer())
    {
      swift_release();
      v6 = specialized static REDecoder.Error.getStatus(_:)();
      v8 = v7;
      v10 = v9;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v11 = v6;
      *(_QWORD *)(v11 + 8) = v8;
      *(_BYTE *)(v11 + 16) = v10 & 1;
      swift_willThrow();
    }
  }
  return v2;
}

uint64_t specialized KeyedDC.__allocating_init(decoder:codingPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for KeyedDC(0, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88), a4);
  swift_allocObject();
  return specialized KeyedDC.init(decoder:codingPath:)(a1, a2);
}

uint64_t specialized UnkeyedDC.__allocating_init(decoder:codingPath:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;

  type metadata accessor for UnkeyedDC();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_WORD *)(v4 + 80) = 256;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  if (*(_BYTE *)(a1 + 48) == 1)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    if (REDecoderBeginContainer())
    {
      swift_release();
      v5 = specialized static REDecoder.Error.getStatus(_:)();
      v7 = v6;
      v9 = v8;
      lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
      swift_allocError();
      *(_QWORD *)v10 = v5;
      *(_QWORD *)(v10 + 8) = v7;
      *(_BYTE *)(v10 + 16) = v9 & 1;
      swift_willThrow();
    }
  }
  return v4;
}

unint64_t specialized static REEncoder.Error.getStatus(_:)()
{
  unint64_t v0;
  int Status;
  void *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v0 = 0xD000000000000017;
  v11 = 0;
  Status = REEncoderGetStatus();
  if (Status == 3)
  {
    type metadata accessor for OS_os_log();
    swift_bridgeObjectRetain_n();
    v3 = static OS_os_log.default.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v9 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6E776F6E6B6E75, 0xE700000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B9AA000, v3, v4, "REEncoder encoding error: %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v6, -1, -1);
      MEMORY[0x220772F44](v5, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v9 = 0;
    v10 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v9 = 0xD00000000000001ALL;
    v10 = 0x800000021BE84DE0;
    v7._countAndFlagsBits = 0x6E776F6E6B6E75;
    v7._object = (void *)0xE700000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    type metadata accessor for OS_os_log();
    v2 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    if (Status == 1)
      return 0xD000000000000025;
  }
  return v0;
}

unint64_t lazy protocol witness table accessor for type REEncoder.Error and conformance REEncoder.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error;
  if (!lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for REEncoder.Error, &type metadata for REEncoder.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REEncoder.Error and conformance REEncoder.Error);
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)()
{
  uint64_t v0;
  Swift::Int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  if (REDecoderReadBool())
  {
    v2 = specialized static REDecoder.Error.getStatus(_:)();
    v4 = v3;
    v6 = v5;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v7 = v2;
    *(_QWORD *)(v7 + 8) = v4;
    *(_BYTE *)(v7 + 16) = v6 & 1;
    swift_willThrow();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 88);
    v10 = v9 + 1;
    if (__OFADD__(v9, 1))
      __break(1u);
    v8 = 0;
    *(_QWORD *)(v0 + 88) = v10;
  }
  return v8 & 1;
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  result = REDecoderReadDouble();
  if ((_DWORD)result)
  {
    v3 = specialized static REDecoder.Error.getStatus(_:)();
    v5 = v4;
    v7 = v6;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v5;
    *(_BYTE *)(v8 + 16) = v7 & 1;
    return swift_willThrow();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 88);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      __break(1u);
    *(_QWORD *)(v0 + 88) = v11;
  }
  return result;
}

{
  uint64_t v0;
  Swift::Int v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v1);
  swift_bridgeObjectRelease();
  result = REDecoderReadFloat();
  if ((_DWORD)result)
  {
    v3 = specialized static REDecoder.Error.getStatus(_:)();
    v5 = v4;
    v7 = v6;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v8 = v3;
    *(_QWORD *)(v8 + 8) = v5;
    *(_BYTE *)(v8 + 16) = v7 & 1;
    return swift_willThrow();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 88);
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      __break(1u);
    *(_QWORD *)(v0 + 88) = v11;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(_QWORD, const char *, _QWORD *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[2];

  v3 = v1;
  v17[1] = *MEMORY[0x24BDAC8D0];
  v5 = v1 + 16;
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  v17[0] = 0;
  if (a1(*(_QWORD *)(v4 + 16), "", v17))
  {
    v7 = specialized static REDecoder.Error.getStatus(_:)();
    v9 = v8;
    v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v12 = v7;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 88);
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      __break(1u);
    result = v17[0];
    *(_QWORD *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(_QWORD, const char *, unsigned __int8 *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;

  v3 = v1;
  v18 = *MEMORY[0x24BDAC8D0];
  v5 = v1 + 16;
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  v17 = 0;
  if (a1(*(_QWORD *)(v4 + 16), "", &v17))
  {
    v7 = specialized static REDecoder.Error.getStatus(_:)();
    v9 = v8;
    v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v12 = v7;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 88);
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      __break(1u);
    result = v17;
    *(_QWORD *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(_QWORD, const char *, unsigned __int16 *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;

  v3 = v1;
  v18 = *MEMORY[0x24BDAC8D0];
  v5 = v1 + 16;
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  v17 = 0;
  if (a1(*(_QWORD *)(v4 + 16), "", &v17))
  {
    v7 = specialized static REDecoder.Error.getStatus(_:)();
    v9 = v8;
    v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v12 = v7;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 88);
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      __break(1u);
    result = v17;
    *(_QWORD *)(v3 + 88) = v16;
  }
  return result;
}

uint64_t specialized UnkeyedDC.decode(_:)(unsigned int (*a1)(_QWORD, const char *, unsigned int *))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  v3 = v1;
  v18 = *MEMORY[0x24BDAC8D0];
  v5 = v1 + 16;
  v4 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 16) + 1;
  swift_bridgeObjectRetain();
  PrivateEncoder.terminateContainers(_:)(v6);
  swift_bridgeObjectRelease();
  v17 = 0;
  if (a1(*(_QWORD *)(v4 + 16), "", &v17))
  {
    v7 = specialized static REDecoder.Error.getStatus(_:)();
    v9 = v8;
    v11 = v10;
    lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error();
    swift_allocError();
    *(_QWORD *)v12 = v7;
    *(_QWORD *)(v12 + 8) = v9;
    *(_BYTE *)(v12 + 16) = v11 & 1;
    return swift_willThrow();
  }
  else
  {
    v14 = *(_QWORD *)(v3 + 88);
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      __break(1u);
    result = v17;
    *(_QWORD *)(v3 + 88) = v16;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type REDecoder.Error and conformance REDecoder.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error;
  if (!lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for REDecoder.Error, &type metadata for REDecoder.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type REDecoder.Error and conformance REDecoder.Error);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedDC.IndexedCodingKey, &unk_24DFA6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedDC.IndexedCodingKey, &unk_24DFA6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedDC.IndexedCodingKey, &unk_24DFA6560);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedDC.IndexedCodingKey and conformance UnkeyedDC.IndexedCodingKey);
  }
  return result;
}

uint64_t sub_21BA89DA4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of Terminatable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Terminatable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of Terminatable?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Terminatable?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedEC.IndexedCodingKey, &unk_24DFA64E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedEC.IndexedCodingKey, &unk_24DFA64E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey;
  if (!lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for UnkeyedEC.IndexedCodingKey, &unk_24DFA64E0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnkeyedEC.IndexedCodingKey and conformance UnkeyedEC.IndexedCodingKey);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SingleValueEC and conformance SingleValueEC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = MEMORY[0x220772E3C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for UnkeyedEC.IndexedCodingKey()
{
  return &unk_24DFA64E0;
}

uint64_t destroy for UnkeyedDC.IndexedCodingKey()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UnkeyedEC.IndexedCodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UnkeyedEC.IndexedCodingKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UnkeyedEC.IndexedCodingKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for UnkeyedDC.IndexedCodingKey()
{
  return &unk_24DFA6560;
}

uint64_t initializeBufferWithCopyOfBuffer for REDecoder.Error(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of REDecoder.Error);
}

uint64_t outlined copy of REDecoder.Error()
{
  return swift_bridgeObjectRetain();
}

uint64_t destroy for REDecoder.Error()
{
  return outlined consume of REDecoder.Error();
}

uint64_t outlined consume of REDecoder.Error()
{
  return swift_bridgeObjectRelease();
}

uint64_t *assignWithCopy for REDecoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for REDecoder.Error(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of REDecoder.Error, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

uint64_t *assignWithTake for REDecoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for REDecoder.Error(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REDecoder.Error);
}

ValueMetadata *type metadata accessor for REDecoder.Error()
{
  return &type metadata for REDecoder.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for REEncoder.Error(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of REEncoder.Error);
}

uint64_t *assignWithCopy for REEncoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for REDecoder.Error(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of REEncoder.Error, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REEncoder.Error);
}

uint64_t *assignWithCopy for REDecoder.Error(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  v12 = *((unsigned __int8 *)a1 + 16);
  *a1 = v7;
  a1[1] = v8;
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for REEncoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for REDecoder.Error(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of REEncoder.Error);
}

uint64_t *assignWithTake for REDecoder.Error(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  v8 = *((unsigned __int8 *)a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for REEncoder.Error()
{
  return &type metadata for REEncoder.Error;
}

uint64_t specialized AssetServiceScopedRegistry.instance(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[6];
  uint64_t v18;

  v2 = v1;
  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 32);
  v6 = v5(v3, v4);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    type metadata accessor for __USDARReferenceProvidingPlugin();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = MEMORY[0x24BEE4B00];
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v18;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v5(v3, v4);
    v13 = swift_allocObject();
    swift_weakInit();
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v6;
    v17[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v17[5] = v14;
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 1107296256;
    v17[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v17[3] = &block_descriptor_28;
    v15 = _Block_copy(v17);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v15);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<CustomMaterial.CustomShaderParameters>);
    swift_allocObject();
    v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<CustomMaterial.CustomShaderParameters>, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<CustomMaterial.CustomShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v19[5] = v16;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = &block_descriptor_84;
    v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<UnlitMaterial.UnlitShaderParameters>);
    swift_allocObject();
    v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<UnlitMaterial.UnlitShaderParameters>, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v19[5] = v16;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = &block_descriptor_3;
    v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>);
    swift_allocObject();
    v11 = specialized ShaderCache.init(_:)((uint64_t)v19, &demangling cache variable for type metadata for SharedCacheStorage<PhysicallyBasedMaterial.PBRShaderParameters>, (uint64_t (*)(_QWORD))specialized Dictionary.init(dictionaryLiteral:), &demangling cache variable for type metadata for ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters>, (uint64_t (*)(uint64_t))specialized Dictionary.init(dictionaryLiteral:));
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v19[5] = v16;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = &block_descriptor_65;
    v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[6];
  uint64_t v20;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v19);
    type metadata accessor for SimpleMaterial.SimpleMaterialMapping();
    swift_allocObject();
    v11 = SimpleMaterial.SimpleMaterialMapping.init(_:)(v19);
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v20 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v13 = a1[3];
    v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14);
    v15 = swift_allocObject();
    swift_weakInit();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v6;
    v19[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v19[5] = v16;
    v19[0] = MEMORY[0x24BDAC760];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = &block_descriptor_93;
    v17 = _Block_copy(v19);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v17);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[6];
  uint64_t v23;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v22);
    type metadata accessor for __ARReferenceProvider();
    v11 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<__ARReferenceProvidingPlugin>);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_21BE50940;
    if (one-time initialization token for instances != -1)
      swift_once();
    swift_retain();
    v13 = specialized AssetServiceScopedRegistry.instance(for:)(v22);
    swift_release();
    *(_QWORD *)(v12 + 56) = type metadata accessor for __RealityFileARReferenceProvidingPlugin();
    *(_QWORD *)(v12 + 64) = &protocol witness table for __RealityFileARReferenceProvidingPlugin;
    *(_QWORD *)(v12 + 32) = v13;
    if (one-time initialization token for instances != -1)
      swift_once();
    v14 = specialized AssetServiceScopedRegistry.instance(for:)(v22);
    *(_QWORD *)(v12 + 96) = type metadata accessor for __USDARReferenceProvidingPlugin();
    *(_QWORD *)(v12 + 104) = &protocol witness table for __USDARReferenceProvidingPlugin;
    *(_QWORD *)(v12 + 72) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *(_QWORD *)(v11 + 16) = v12;
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v23;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v16 = a1[3];
    v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v16);
    (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    v18 = swift_allocObject();
    swift_weakInit();
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v18;
    *(_QWORD *)(v19 + 24) = v6;
    v22[4] = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v22[5] = v19;
    v22[0] = MEMORY[0x24BDAC760];
    v22[1] = 1107296256;
    v22[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v22[3] = &block_descriptor_37;
    v20 = _Block_copy(v22);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v20);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

_QWORD *specialized AssetServiceScopedRegistry.instance(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __int128 v20;
  uint64_t (*v21)(uint64_t);
  void *v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(v4, v5);
  v7 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 16) + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v8 + 16) && (v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) != 0))
  {
    v11 = *(_QWORD **)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain();
  }
  else
  {
    os_unfair_lock_unlock(v7);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v20);
    type metadata accessor for __RealityFileARReferenceProvidingPlugin();
    v11 = (_QWORD *)swift_allocObject();
    if (one-time initialization token for schemePrefix != -1)
      swift_once();
    v12 = *((_QWORD *)&static __RealityFileURLResolver.schemePrefix + 1);
    v11[7] = static __RealityFileURLResolver.schemePrefix;
    v11[8] = v12;
    v11[9] = MEMORY[0x24BEE4B00];
    outlined init with take of BindableDataInternal(&v20, (uint64_t)(v11 + 2));
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v7);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, v6, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 24) = v25;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v14 = a1[3];
    v15 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v14);
    (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    v16 = swift_allocObject();
    swift_weakInit();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = v16;
    *(_QWORD *)(v17 + 24) = v6;
    v23 = partial apply for specialized closure #1 in AssetServiceScopedRegistry.instance(for:);
    v24 = v17;
    *(_QWORD *)&v20 = MEMORY[0x24BDAC760];
    *((_QWORD *)&v20 + 1) = 1107296256;
    v21 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v22 = &block_descriptor_46;
    v18 = _Block_copy(&v20);
    swift_release();
    REAssetManagerAddCleanupCallback();
    _Block_release(v18);
  }
  os_unfair_lock_unlock(v7);
  return v11;
}

id CustomMaterial.Program.surfaceShader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v7;

  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v7 = *(id *)(v1 + 48);
  v5 = *(_BYTE *)(v1 + 56);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return v7;
}

id CustomMaterial.Program.geometryModifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_QWORD *)(v1 + 72);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  v6 = *(void **)(v1 + 96);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(v1 + 104);
  return outlined copy of CustomMaterial.GeometryModifier?(v2, v3, v4, v5, v6);
}

void CustomMaterial.Program.descriptor.getter(_WORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_WORD *)(v1 + 105);
}

void CustomMaterial.Program.Descriptor.lightingModel.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CustomMaterial.Program.Descriptor.lightingModel.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CustomMaterial.Program.Descriptor.lightingModel.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Program.Descriptor.blendMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *CustomMaterial.Program.Descriptor.blendMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*CustomMaterial.Program.Descriptor.blendMode.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Program.Descriptor.init()(_WORD *a1@<X8>)
{
  *a1 = 512;
}

void CustomMaterial.Program.Descriptor.hash(into:)()
{
  unsigned __int8 *v0;
  int v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int CustomMaterial.Program.Descriptor.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  int v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  int v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CustomMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  int v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Program.Descriptor()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  int v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 & 1);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  uint64_t v3;
  _QWORD *v7;

  swift_allocObject();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(a1, a2, a3);
}

uint64_t CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  *(_QWORD *)(v4 + 200) = v3;
  v5 = *a1;
  *(_QWORD *)(v4 + 208) = *v3;
  *(_QWORD *)(v4 + 216) = v5;
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a1 + 1);
  v6 = a1[4];
  *(_QWORD *)(v4 + 240) = a1[3];
  *(_QWORD *)(v4 + 248) = v6;
  *(_BYTE *)(v4 + 425) = *((_BYTE *)a1 + 40);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 256) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 272) = v7;
  *(_QWORD *)(v4 + 288) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(v4 + 428) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(v4 + 429) = *a3;
  return swift_task_switch();
}

uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  int v13;
  unsigned __int8 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  _QWORD *v46;
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _OWORD v64[2];
  uint64_t v65;
  char v66;
  unsigned __int8 v67[17];

  v1 = *(_BYTE *)(v0 + 430);
  v2 = *(_BYTE *)(v0 + 429);
  v3 = *(_BYTE *)(v0 + 428);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_BYTE *)(v0 + 425);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 200);
  v9 = *(_OWORD *)(v0 + 224);
  v10 = *(_OWORD *)(v0 + 256);
  v11 = *(_OWORD *)(v0 + 272);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v0 + 216);
  *(_OWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 40) = v7;
  *(_QWORD *)(v8 + 48) = v6;
  *(_BYTE *)(v8 + 56) = v5;
  *(_OWORD *)(v8 + 64) = v10;
  *(_OWORD *)(v8 + 80) = v11;
  *(_QWORD *)(v8 + 96) = v4;
  *(_BYTE *)(v8 + 104) = v3;
  *(_BYTE *)(v8 + 105) = v2;
  *(_BYTE *)(v8 + 106) = v1;
  v12 = 0x800020004uLL >> (16 * v2);
  v13 = *(unsigned __int8 *)(v0 + 430);
  if (v13 != 2)
  {
    if ((v13 & 1) != 0)
      LOWORD(v12) = v12 | 0x2001;
    else
      LOWORD(v12) = v12 | 1;
  }
  *(_WORD *)(v0 + 426) = v12;
  v14 = *(_BYTE *)(v0 + 429);
  v15 = *(_BYTE *)(v0 + 428);
  v16 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 248);
  v59 = *(_QWORD *)(v0 + 216);
  v60 = *(_OWORD *)(v0 + 224);
  v61 = v18;
  v62 = v17;
  v63 = v5;
  v19 = *(_OWORD *)(v0 + 272);
  v64[0] = *(_OWORD *)(v0 + 256);
  v64[1] = v19;
  v65 = v16;
  v66 = v15;
  v67[0] = v14;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)v47, (uint64_t)v53, (uint64_t)&v59, (uint64_t)v64, v67);
  v44 = v47[0];
  v46 = (_QWORD *)(v0 + 16);
  *(_BYTE *)(v0 + 431) = v47[0];
  v20 = v49;
  v43 = v48;
  *(_QWORD *)(v0 + 296) = v48;
  *(_QWORD *)(v0 + 304) = v20;
  v21 = v51;
  v41 = v50;
  *(_QWORD *)(v0 + 312) = v50;
  *(_QWORD *)(v0 + 320) = v21;
  v22 = v52;
  v38 = v53[0];
  *(_BYTE *)(v0 + 432) = v53[0];
  v23 = v54;
  v24 = v55;
  *(_QWORD *)(v0 + 328) = v22;
  *(_QWORD *)(v0 + 336) = v23;
  v37 = v23;
  v25 = v56;
  v26 = v57;
  *(_QWORD *)(v0 + 344) = v24;
  *(_QWORD *)(v0 + 352) = v25;
  v36 = v25;
  v27 = v58;
  *(_QWORD *)(v0 + 360) = v26;
  *(_QWORD *)(v0 + 368) = v27;
  *(_BYTE *)(v0 + 424) = 1;
  v28 = one-time initialization token for shaderCacheRegistry;
  v42 = v20;
  swift_bridgeObjectRetain();
  v40 = v21;
  swift_bridgeObjectRetain();
  v39 = v22;
  v29 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30 = v27;
  if (v28 != -1)
    swift_once();
  v31 = *(_BYTE *)(v0 + 430);
  v32 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v32, v0 + 136);
  *(_QWORD *)(v0 + 376) = specialized AssetServiceScopedRegistry.instance(for:)((_QWORD *)(v0 + 136));
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  *(_WORD *)(v0 + 16) = v12;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v0 + 424);
  *(_BYTE *)(v0 + 33) = v31;
  *(_BYTE *)(v0 + 34) = 1;
  *(_QWORD *)(v0 + 40) = v38;
  *(_QWORD *)(v0 + 48) = v37;
  *(_QWORD *)(v0 + 56) = v24;
  *(_QWORD *)(v0 + 64) = v36;
  *(_QWORD *)(v0 + 72) = v26;
  *(_QWORD *)(v0 + 80) = v27;
  *(_QWORD *)(v0 + 88) = v44;
  *(_QWORD *)(v0 + 96) = v43;
  *(_QWORD *)(v0 + 104) = v42;
  *(_QWORD *)(v0 + 112) = v41;
  *(_QWORD *)(v0 + 120) = v40;
  *(_QWORD *)(v0 + 128) = v39;
  outlined retain of CustomMaterial.CustomShaderParameters(v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  swift_retain();
  v33 = specialized SharedCacheStorage.getResource(forKey:)((uint64_t)v46);
  swift_release();
  if (v33)
  {
    swift_release();
    *(_QWORD *)(v0 + 400) = v33;
    outlined retain of CustomMaterial.CustomShaderParameters(v46, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    return swift_task_switch();
  }
  else
  {
    v45 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ShaderCacheLoader.loadResource(forKey:)
                                          + async function pointer to specialized ShaderCacheLoader.loadResource(forKey:));
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 384) = v35;
    *v35 = v0;
    v35[1] = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
    return v45((uint64_t)v46);
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  *(_QWORD *)(v0[25] + 112) = v0[50];
  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized RequestLoadable.awaitForResourceSharing()
                             + async function pointer to specialized RequestLoadable.awaitForResourceSharing());
  swift_retain();
  v1 = (_QWORD *)swift_task_alloc();
  v0[51] = v1;
  *v1 = v0;
  v1[1] = CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(void **)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 344);
  v5 = *(unsigned __int8 *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 320);
  v6 = *(void **)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 312);
  v12 = *(unsigned __int8 *)(v0 + 431);
  v13 = *(_QWORD *)(v0 + 296);
  swift_release();
  outlined retain of CustomMaterial.CustomShaderParameters((_QWORD *)(v0 + 16), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v4, v3, v14, v2, v1);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v12, v13, v8, v15, v7, v6);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = *(void **)(v9 + 48);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  outlined consume of CustomMaterial.GeometryModifier?(*(_QWORD *)(v9 + 64), *(_QWORD *)(v9 + 72), *(_QWORD *)(v9 + 80), *(_QWORD *)(v9 + 88), *(void **)(v9 + 96));
  swift_deallocPartialClassInstance();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(void **)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 352);
  v4 = *(unsigned __int8 *)(v0 + 432);
  v5 = *(void **)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 320);
  v18 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 296);
  v8 = *(_QWORD *)(v0 + 304);
  v10 = *(unsigned __int8 *)(v0 + 431);
  v11 = *(_BYTE *)(v0 + 430);
  v12 = *(_QWORD *)(v0 + 200);
  v13 = *(_BYTE *)(v0 + 424);
  *(_WORD *)(v12 + 120) = *(_WORD *)(v0 + 426);
  *(_QWORD *)(v12 + 128) = 0;
  *(_BYTE *)(v12 + 136) = v13;
  *(_BYTE *)(v12 + 137) = v11;
  *(_BYTE *)(v12 + 138) = 1;
  *(_QWORD *)(v12 + 144) = v4;
  *(_QWORD *)(v12 + 152) = v6;
  *(_QWORD *)(v12 + 160) = v3;
  *(_QWORD *)(v12 + 168) = v16;
  *(_QWORD *)(v12 + 176) = v1;
  *(_QWORD *)(v12 + 184) = v2;
  *(_QWORD *)(v12 + 192) = v10;
  *(_QWORD *)(v12 + 200) = v9;
  v15 = v8;
  *(_QWORD *)(v12 + 208) = v8;
  *(_QWORD *)(v12 + 216) = v18;
  *(_QWORD *)(v12 + 224) = v7;
  *(_QWORD *)(v12 + 232) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v19 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v17 = v2;
  outlined copy of __MaterialResource.CoreMaterialFunction?(v4, v6, v3, v16, v1, v2);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v15, v18, v7, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  RERelease();
  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v4, v6, v3, v16, v1, v2);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v10, v9, v15, v18, v7, v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 200));
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(void **)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = *(unsigned __int8 *)(v0 + 432);
  v6 = *(void **)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v9 = *(unsigned __int8 *)(v0 + 431);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of __MaterialResource.CoreMaterialFunction?(v4, v5, v3, v14, v1, v2);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v9, v13, v8, v15, v7, v6);
  v10 = *(_QWORD *)(v0 + 200);
  v11 = *(void **)(v10 + 48);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  outlined consume of CustomMaterial.GeometryModifier?(*(_QWORD *)(v10 + 64), *(_QWORD *)(v10 + 72), *(_QWORD *)(v10 + 80), *(_QWORD *)(v10 + 88), *(void **)(v10 + 96));
  swift_release();
  swift_deallocPartialClassInstance();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CustomMaterial.Program.init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 392) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_release();
    *(_QWORD *)(v4 + 400) = a1;
    outlined retain of CustomMaterial.CustomShaderParameters((_QWORD *)(v4 + 16), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  }
  return swift_task_switch();
}

void CustomMaterial.Program.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::UInt v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::UInt8 v8;
  Swift::UInt v9;
  int v10;

  v2 = *(void **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 48);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (*(_QWORD *)(v0 + 72))
  {
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(void **)(v0 + 96);
    v7 = *(void **)(v0 + 80);
    v8 = *(_BYTE *)(v0 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v7, sel_hash));
    if (v6)
    {
      v9 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v5, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v10 = *(unsigned __int8 *)(v0 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 105));
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 & 1);
  }
}

uint64_t CustomMaterial.Program.init(resource:shaderParameters:blending:)(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  void *v32;
  char v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  char v37;
  uint64_t result;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  char v51;

  v4 = v3;
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_BYTE *)a2 + 16);
  v8 = *(unsigned __int16 *)((char *)a2 + 17);
  v10 = *((_QWORD *)a2 + 3);
  v9 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = *((_QWORD *)a2 + 6);
  v13 = *((_QWORD *)a2 + 7);
  v14 = (void *)*((_QWORD *)a2 + 8);
  v15 = *((_QWORD *)a2 + 9);
  v16 = *((_QWORD *)a2 + 10);
  v17 = *((_QWORD *)a2 + 11);
  v18 = *((_QWORD *)a2 + 12);
  v20 = *((_QWORD *)a2 + 13);
  v19 = (void *)*((_QWORD *)a2 + 14);
  v21 = *(_QWORD *)a3;
  v22 = *(_QWORD *)(a3 + 8);
  v23 = *(unsigned int *)(a3 + 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 20) << 32);
  *(_QWORD *)(v4 + 112) = a1;
  *(_WORD *)(v4 + 120) = v5;
  *(_QWORD *)(v4 + 128) = v6;
  *(_BYTE *)(v4 + 136) = v7;
  *(_WORD *)(v4 + 137) = v8;
  *(_QWORD *)(v4 + 144) = v10;
  *(_QWORD *)(v4 + 152) = v9;
  *(_QWORD *)(v4 + 160) = v11;
  *(_QWORD *)(v4 + 168) = v12;
  *(_QWORD *)(v4 + 176) = v13;
  *(_QWORD *)(v4 + 184) = v14;
  v46 = v16;
  v47 = v15;
  *(_QWORD *)(v4 + 192) = v15;
  *(_QWORD *)(v4 + 200) = v16;
  v42 = v17;
  v43 = v19;
  *(_QWORD *)(v4 + 208) = v17;
  *(_QWORD *)(v4 + 216) = v18;
  v44 = v20;
  v45 = v18;
  *(_QWORD *)(v4 + 224) = v20;
  *(_QWORD *)(v4 + 232) = v19;
  if (v22 == 1)
  {
    v24 = v21;
    swift_retain();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
    outlined consume of CustomMaterial.Blending?(v24, 1);
LABEL_5:
    LOBYTE(v25) = 2;
    if ((v5 & 4) == 0)
      goto LABEL_6;
LABEL_9:
    LOBYTE(v26) = 0;
    goto LABEL_11;
  }
  if (v22 == 2)
  {
    swift_retain();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
    goto LABEL_5;
  }
  v41 = v21;
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v9, v11, v12, v13, v14);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
  outlined consume of CustomMaterial.Blending?(v41, v22);
  v25 = HIDWORD(v23) & 1;
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_6:
  if ((v5 & 2) != 0)
    LOBYTE(v26) = 1;
  else
    v26 = (v5 >> 2) & 2;
LABEL_11:
  v40 = v14;
  if ((v5 & 1) != 0)
    LOBYTE(v25) = (v5 & 0x2000) != 0;
  *(_BYTE *)(v4 + 105) = v26;
  *(_BYTE *)(v4 + 106) = v25;
  if (v42
    && (v27 = v12,
        v28 = v10,
        __MaterialResource.CoreMaterialFunction.getSurfaceShader()((uint64_t)&v48),
        (v29 = *((_QWORD *)&v48 + 1)) != 0))
  {
    v30 = v48;
    v31 = v49;
    v32 = v50;
    v33 = v51;
    *(_QWORD *)(v4 + 16) = v48;
    *(_QWORD *)(v4 + 24) = v29;
    *(_OWORD *)(v4 + 32) = v31;
    *(_QWORD *)(v4 + 48) = v32;
    *(_BYTE *)(v4 + 56) = v33 & 1;
    if (v11)
    {
      v39 = v30;
      outlined copy of CustomMaterial.GeometryModifier?(v30, v29, v31, *((uint64_t *)&v31 + 1), v32);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      __MaterialResource.CoreMaterialFunction.getGeometryModifier()((uint64_t)&v48);
      swift_release();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
      outlined consume of CustomMaterial.GeometryModifier?(v39, v29, v31, *((uint64_t *)&v31 + 1), v32);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, v11, v27, v13, v40);
      v34 = v48;
      v35 = v49;
      v36 = v50;
      v37 = v51;
    }
    else
    {
      swift_release();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v9, 0, v27, v13, v40);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v47, v46, v42, v45, v44, v43);
      v36 = 0;
      v37 = 0;
      v34 = 0uLL;
      v35 = 0uLL;
    }
    *(_OWORD *)(v4 + 64) = v34;
    *(_OWORD *)(v4 + 80) = v35;
    *(_QWORD *)(v4 + 96) = v36;
    *(_BYTE *)(v4 + 104) = v37;
    return v4;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CustomMaterial.Program.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(void **)(v0 + 96));
  swift_release();
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(void **)(v0 + 232);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(void **)(v0 + 184));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v1, v2, v3, v4, v5, v6);
  return v0;
}

uint64_t CustomMaterial.Program.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(void **)(v0 + 96));
  swift_release();
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v6 = *(void **)(v0 + 232);
  outlined consume of __MaterialResource.CoreMaterialFunction?(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(void **)(v0 + 184));
  outlined consume of __MaterialResource.CoreMaterialFunction?(v1, v2, v3, v4, v5, v6);
  return swift_deallocClassInstance();
}

Swift::Int CustomMaterial.Program.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::UInt v4;
  void *v5;
  uint64_t v6;
  void *v7;
  Swift::UInt8 v8;
  Swift::UInt v9;
  int v10;

  Hasher.init(_seed:)();
  v2 = *(void **)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 48);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (*(_QWORD *)(v0 + 72))
  {
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(void **)(v0 + 96);
    v7 = *(void **)(v0 + 80);
    v8 = *(_BYTE *)(v0 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v7, sel_hash));
    if (v6)
    {
      v9 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v5, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v10 = *(unsigned __int8 *)(v0 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 105));
  if (v10 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10 & 1);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CustomMaterial.Program(uint64_t *a1, uint64_t *a2)
{
  return specialized static CustomMaterial.Program.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.Program()
{
  return CustomMaterial.Program.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance CustomMaterial.Program()
{
  CustomMaterial.Program.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Program()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::UInt v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::UInt8 v9;
  Swift::UInt v10;
  int v11;

  v1 = *v0;
  Hasher.init(_seed:)();
  v3 = *(void **)(v1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  v4 = *(void **)(v1 + 48);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 56));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  if (v2)
  {
    v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v4, sel_hash));
  if (*(_QWORD *)(v1 + 72))
  {
    v7 = *(_QWORD *)(v1 + 88);
    v6 = *(void **)(v1 + 96);
    v8 = *(void **)(v1 + 80);
    v9 = *(_BYTE *)(v1 + 104) & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v8, sel_hash));
    if (v7)
    {
      v10 = OpaquePointer.hashValue.getter();
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10);
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    Hasher._combine(_:)((Swift::UInt)objc_msgSend(v6, sel_hash));
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v11 = *(unsigned __int8 *)(v1 + 106);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 105));
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11 & 1);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.init(program:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  _BOOL8 v14;
  char v15;
  uint64_t v16;
  char v17;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  char v29;

  v4 = REMaterialParameterBlockValueCreate();
  v5 = MEMORY[0x24BEE4AF8];
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 1;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a2 + 320) = 0;
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a2 + 304) = 0;
  *(_QWORD *)(a2 + 288) = 3;
  *(_WORD *)(a2 + 312) = 0;
  *(_WORD *)(a2 + 328) = 257;
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 8) = v5;
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 136);
  v8 = *(_WORD *)(a1 + 137);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(_QWORD *)(a1 + 160);
  v11 = *(_QWORD *)(a1 + 168);
  v12 = *(_QWORD *)(a1 + 176);
  v19 = *(void **)(a1 + 184);
  v20 = *(_QWORD *)(a1 + 144);
  v25 = *(_QWORD *)(a1 + 200);
  v26 = *(_QWORD *)(a1 + 192);
  v23 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(a1 + 208);
  v21 = *(void **)(a1 + 232);
  v22 = *(_QWORD *)(a1 + 224);
  *(_WORD *)(a2 + 152) = *(_WORD *)(a1 + 120);
  *(_QWORD *)(a2 + 160) = v6;
  *(_BYTE *)(a2 + 168) = v7;
  *(_WORD *)(a2 + 169) = v8;
  *(_QWORD *)(a2 + 176) = v20;
  *(_QWORD *)(a2 + 184) = v9;
  *(_QWORD *)(a2 + 192) = v10;
  *(_QWORD *)(a2 + 200) = v11;
  *(_QWORD *)(a2 + 208) = v12;
  *(_QWORD *)(a2 + 216) = v19;
  *(_QWORD *)(a2 + 224) = v26;
  *(_QWORD *)(a2 + 232) = v25;
  *(_QWORD *)(a2 + 240) = v24;
  *(_QWORD *)(a2 + 248) = v23;
  *(_QWORD *)(a2 + 256) = v22;
  *(_QWORD *)(a2 + 264) = v21;
  LODWORD(v5) = *(unsigned __int8 *)(a1 + 106);
  v13 = (_DWORD)v5 == 2;
  v14 = (_DWORD)v5 == 2;
  v15 = v5 & 1;
  if (v13)
    v16 = 0;
  else
    v16 = 1065353216;
  *(_QWORD *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 64) = v14;
  v17 = v15;
  *(_BYTE *)(a2 + 76) = v15;
  *(_DWORD *)(a2 + 72) = 0;
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v9, v10, v11, v12, v19);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v26, v25, v24, v23, v22, v21);
  *(_QWORD *)(a2 + 80) = REDirectParameterBufferCreate();
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  v27[0] = v16;
  v27[1] = v14;
  v29 = v17;
  v28 = 0;
  outlined copy of CustomMaterial.Blending(v16, v14);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v27, 0);
  swift_release();
  return outlined consume of __EntityInfoComponent?(v16, v14);
}

uint64_t CustomMaterial.program.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[2];
  int v22;
  char v23;
  unsigned __int16 v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_BYTE *)(v0 + 168);
  v4 = *(_WORD *)(v0 + 169);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v10 = *(_QWORD *)(v0 + 208);
  v9 = *(void **)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 224);
  v17 = *(_QWORD *)(v0 + 248);
  v18 = *(_QWORD *)(v0 + 240);
  v15 = *(void **)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 256);
  v24 = *(_WORD *)(v0 + 152);
  v25 = v2;
  v26 = v3;
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v8;
  v31 = v7;
  v32 = v10;
  v33 = v9;
  v34 = v20;
  v35 = v19;
  v36 = v18;
  v37 = v17;
  v38 = v16;
  v39 = v15;
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_BYTE *)(v0 + 76);
  LODWORD(v2) = *(_DWORD *)(v0 + 72);
  v21[0] = *(_QWORD *)(v0 + 56);
  v21[1] = v11;
  v23 = v12;
  v22 = v2;
  type metadata accessor for CustomMaterial.Program();
  v13 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v5, v6, v8, v7, v10, v9);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v19, v18, v17, v16, v15);
  outlined copy of CustomMaterial.Blending?(v21[0], v11);
  CustomMaterial.Program.init(resource:shaderParameters:blending:)(v1, &v24, (uint64_t)v21);
  return v13;
}

uint64_t key path getter for CustomMaterial.program : CustomMaterial@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[2];
  int v24;
  char v25;
  unsigned __int16 v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_BYTE *)(a1 + 168);
  v5 = *(_WORD *)(a1 + 169);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 208);
  v11 = *(void **)(a1 + 216);
  v20 = *(_QWORD *)(a1 + 232);
  v21 = *(_QWORD *)(a1 + 224);
  v18 = *(_QWORD *)(a1 + 248);
  v19 = *(_QWORD *)(a1 + 240);
  v16 = *(void **)(a1 + 264);
  v17 = *(_QWORD *)(a1 + 256);
  v26 = *(_WORD *)(a1 + 152);
  v27 = v3;
  v28 = v4;
  v29 = v5;
  v30 = v6;
  v31 = v7;
  v32 = v8;
  v33 = v9;
  v34 = v10;
  v35 = v11;
  v36 = v21;
  v37 = v20;
  v38 = v19;
  v39 = v18;
  v40 = v17;
  v41 = v16;
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_BYTE *)(a1 + 76);
  LODWORD(v3) = *(_DWORD *)(a1 + 72);
  v23[0] = *(_QWORD *)(a1 + 56);
  v23[1] = v12;
  v25 = v13;
  v24 = v3;
  type metadata accessor for CustomMaterial.Program();
  v14 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v6, v7, v8, v9, v10, v11);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v21, v20, v19, v18, v17, v16);
  outlined copy of CustomMaterial.Blending?(v23[0], v12);
  result = CustomMaterial.Program.init(resource:shaderParameters:blending:)(v2, &v26, (uint64_t)v23);
  *a2 = v14;
  return result;
}

uint64_t CustomMaterial.program.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  int v37;
  char v38;

  v3 = *(_QWORD *)(a1 + 112);
  swift_retain();
  swift_release();
  *(_QWORD *)v1 = v3;
  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_BYTE *)(a1 + 136);
  v6 = *(_WORD *)(a1 + 137);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 168);
  v11 = *(_QWORD *)(a1 + 176);
  v12 = *(void **)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 192);
  v14 = *(_QWORD *)(a1 + 200);
  v15 = *(_QWORD *)(a1 + 208);
  v16 = *(_QWORD *)(a1 + 216);
  v17 = *(_QWORD *)(a1 + 224);
  v18 = *(void **)(a1 + 232);
  v19 = *(_QWORD *)(v1 + 176);
  v20 = *(_QWORD *)(v1 + 184);
  v28 = *(_QWORD *)(v1 + 200);
  v29 = *(_QWORD *)(v1 + 192);
  v26 = *(void **)(v1 + 216);
  v27 = *(_QWORD *)(v1 + 208);
  v34 = *(_QWORD *)(v1 + 232);
  v35 = *(_QWORD *)(v1 + 224);
  v32 = *(_QWORD *)(v1 + 248);
  v33 = *(_QWORD *)(v1 + 240);
  v30 = *(void **)(v1 + 264);
  v31 = *(_QWORD *)(v1 + 256);
  *(_WORD *)(v1 + 152) = *(_WORD *)(a1 + 120);
  *(_QWORD *)(v1 + 160) = v4;
  *(_BYTE *)(v1 + 168) = v5;
  *(_WORD *)(v1 + 169) = v6;
  *(_QWORD *)(v1 + 176) = v7;
  *(_QWORD *)(v1 + 184) = v8;
  *(_QWORD *)(v1 + 192) = v9;
  *(_QWORD *)(v1 + 200) = v10;
  *(_QWORD *)(v1 + 208) = v11;
  *(_QWORD *)(v1 + 216) = v12;
  *(_QWORD *)(v1 + 224) = v13;
  *(_QWORD *)(v1 + 232) = v14;
  *(_QWORD *)(v1 + 240) = v15;
  *(_QWORD *)(v1 + 248) = v16;
  *(_QWORD *)(v1 + 256) = v17;
  *(_QWORD *)(v1 + 264) = v18;
  outlined copy of __MaterialResource.CoreMaterialFunction?(v7, v8, v9, v10, v11, v12);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v13, v14, v15, v16, v17, v18);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v19, v20, v29, v28, v27, v26);
  outlined consume of __MaterialResource.CoreMaterialFunction?(v35, v34, v33, v32, v31, v30);
  v21 = *(unsigned __int8 *)(a1 + 106);
  if (v21 == 2)
  {
    outlined consume of CustomMaterial.Blending?(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
    v22 = 0;
    v23 = 0;
    *(_OWORD *)(v1 + 56) = xmmword_21BE56B70;
    *(_BYTE *)(v1 + 76) = 0;
    *(_DWORD *)(v1 + 72) = 0;
    v24 = 1;
  }
  else
  {
    outlined consume of CustomMaterial.Blending?(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
    *(_OWORD *)(v1 + 56) = *(_OWORD *)zmmword_21BE41220;
    v24 = 0;
    if ((v21 & 1) != 0)
    {
      *(_DWORD *)(v1 + 72) = 0;
      *(_BYTE *)(v1 + 76) = 1;
      v23 = 0x100000000;
    }
    else
    {
      v23 = 0;
      *(_BYTE *)(v1 + 76) = 0;
      *(_DWORD *)(v1 + 72) = 0;
    }
    v22 = 1065353216;
  }
  v36[0] = v22;
  v36[1] = v24;
  v37 = v23;
  v38 = BYTE4(v23);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v36, 0);
  swift_release();
  return outlined consume of __EntityInfoComponent?(v22, v24);
}

uint64_t (*CustomMaterial.program.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23[2];
  int v24;
  char v25;
  unsigned __int16 v26;
  uint64_t v27;
  char v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;

  a1[1] = v1;
  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 160);
  v4 = *(_BYTE *)(v1 + 168);
  v5 = *(_WORD *)(v1 + 169);
  v6 = *(_QWORD *)(v1 + 176);
  v7 = *(_QWORD *)(v1 + 184);
  v9 = *(_QWORD *)(v1 + 192);
  v8 = *(_QWORD *)(v1 + 200);
  v10 = *(_QWORD *)(v1 + 208);
  v11 = *(void **)(v1 + 216);
  v21 = *(_QWORD *)(v1 + 224);
  v19 = *(_QWORD *)(v1 + 240);
  v20 = *(_QWORD *)(v1 + 232);
  v17 = *(_QWORD *)(v1 + 256);
  v18 = *(_QWORD *)(v1 + 248);
  v16 = *(void **)(v1 + 264);
  v26 = *(_WORD *)(v1 + 152);
  v27 = v3;
  v28 = v4;
  v29 = v5;
  v30 = v6;
  v31 = v7;
  v32 = v9;
  v33 = v8;
  v34 = v10;
  v35 = v11;
  v36 = v21;
  v37 = v20;
  v38 = v19;
  v39 = v18;
  v40 = v17;
  v41 = v16;
  v12 = *(_QWORD *)(v1 + 64);
  v13 = *(_BYTE *)(v1 + 76);
  LODWORD(v3) = *(_DWORD *)(v1 + 72);
  v23[0] = *(_QWORD *)(v1 + 56);
  v23[1] = v12;
  v25 = v13;
  v24 = v3;
  type metadata accessor for CustomMaterial.Program();
  v14 = swift_allocObject();
  swift_retain();
  outlined copy of __MaterialResource.CoreMaterialFunction?(v6, v7, v9, v8, v10, v11);
  outlined copy of __MaterialResource.CoreMaterialFunction?(v21, v20, v19, v18, v17, v16);
  outlined copy of CustomMaterial.Blending?(v23[0], v12);
  CustomMaterial.Program.init(resource:shaderParameters:blending:)(v2, &v26, (uint64_t)v23);
  *a1 = v14;
  return CustomMaterial.program.modify;
}

uint64_t CustomMaterial.program.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) == 0)
    return CustomMaterial.program.setter(*a1);
  v2 = swift_retain();
  CustomMaterial.program.setter(v2);
  return swift_release();
}

uint64_t specialized SharedCacheStorage.getResource(forKey:)(uint64_t a1)
{
  uint64_t v1;
  os_unfair_lock_s *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  v3 = (os_unfair_lock_s *)(*(_QWORD *)(v1 + 24) + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_retain();
    }
    else
    {
      v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  os_unfair_lock_unlock(v3);
  return v7;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 24) + 16);
  os_unfair_lock_lock(v5);
  v6 = (uint64_t *)(v2 + 16);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 16);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_5;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    swift_beginAccess();
    outlined retain of CustomMaterial.CustomShaderParameters(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v6;
    *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, (uint64_t)a2, isUniquelyReferenced_nonNull_native);
    *v6 = v12;
    swift_bridgeObjectRelease();
    outlined retain of CustomMaterial.CustomShaderParameters(a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    swift_endAccess();
    swift_retain();
    goto LABEL_6;
  }
  a1 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  swift_retain();
  swift_bridgeObjectRelease();
LABEL_6:
  os_unfair_lock_unlock(v5);
  return a1;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  os_unfair_lock_s *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v5 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 24) + 16);
  os_unfair_lock_lock(v5);
  v6 = (uint64_t *)(v2 + 16);
  swift_beginAccess();
  v7 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v7 + 16) && (v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v9 & 1) != 0))
  {
    a1 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v6;
    *v6 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *v6 = v12;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_retain();
  os_unfair_lock_unlock(v5);
  return a1;
}

uint64_t specialized SharedCacheStorage.addResource(value:forKey:)(uint64_t a1, __int16 a2, Swift::UInt a3, int a4)
{
  uint64_t v4;
  os_unfair_lock_s *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v9 = (os_unfair_lock_s *)(*(_QWORD *)(v4 + 24) + 16);
  os_unfair_lock_lock(v9);
  v10 = (uint64_t *)(v4 + 16);
  swift_beginAccess();
  v11 = *(_QWORD *)(v4 + 16);
  if (*(_QWORD *)(v11 + 16)
    && (v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 0xFFFF01), (v13 & 1) != 0))
  {
    a1 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
  }
  else
  {
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v10;
    *v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4 & 0xFFFF01, isUniquelyReferenced_nonNull_native);
    *v10 = v16;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_retain();
  os_unfair_lock_unlock(v9);
  return a1;
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[16] = a1;
  v2[17] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  uint64_t v23;

  v1 = v0[17] + 160;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    goto LABEL_5;
  v3 = v0[16];
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v8 = v0[17];
    v7 = v0[18];
    v9 = v0[16];
    v10 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
    v11 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<CustomMaterial.CustomShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<CustomMaterial.CustomShaderParameters>);
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v8;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = *(_OWORD *)(v9 + 48);
    v15 = *(_OWORD *)v9;
    v14 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)(v12 + 64) = *(_OWORD *)(v9 + 32);
    *(_OWORD *)(v12 + 80) = v13;
    *(_OWORD *)(v12 + 32) = v15;
    *(_OWORD *)(v12 + 48) = v14;
    v16 = *(_OWORD *)(v9 + 64);
    v17 = *(_OWORD *)(v9 + 96);
    v18 = *(_QWORD *)(v9 + 112);
    *(_OWORD *)(v12 + 112) = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v12 + 128) = v17;
    *(_OWORD *)(v12 + 96) = v16;
    *(_QWORD *)(v12 + 144) = v18;
    *(_QWORD *)(v12 + 152) = v8;
    swift_retain_n();
    outlined retain of CustomMaterial.CustomShaderParameters((_QWORD *)v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
    v19 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v7, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v12);
    v0[22] = v19;
    swift_beginAccess();
    outlined retain of CustomMaterial.CustomShaderParameters((_QWORD *)v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v9, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v1 = v23;
    swift_bridgeObjectRelease();
    outlined retain of CustomMaterial.CustomShaderParameters((_QWORD *)v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
    swift_endAccess();
    v21 = (_QWORD *)swift_task_alloc();
    v0[23] = v21;
    type metadata accessor for __MaterialResource();
    v0[24] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v21 = v0;
    v21[1] = specialized ShaderCacheLoader.loadResource(forKey:);
    return Task.value.getter();
  }
  v0[19] = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
  swift_retain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)swift_task_alloc();
  v0[20] = v6;
  type metadata accessor for __MaterialResource();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v6 = v0;
  v6[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  swift_beginAccess();
  outlined retain of CustomMaterial.CustomShaderParameters(v1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of __MaterialResource.CoreMaterialFunction?);
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v1);
  swift_endAccess();
  outlined retain of CustomMaterial.CustomShaderParameters(v1, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of __MaterialResource.CoreMaterialFunction?);
  swift_release();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 200);
  _StringGuts.grow(_:)(119);
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0xE000000000000000;
  v2._object = (void *)0x800000021BE84F70;
  v2._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v2);
  *(_QWORD *)(v0 + 104) = v1;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000049;
  v3._object = (void *)0x800000021BE84FA0;
  String.append(_:)(v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError();
  swift_allocError();
  *v6 = v4;
  v6[1] = v5;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  char v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  unsigned int v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 136) + 160;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  v3 = *(_DWORD *)(v0 + 208);
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v7 = v3 & 0xFFFF00;
LABEL_6:
    v22 = v7;
    *(_DWORD *)(v0 + 212) = v7;
    v9 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 128);
    v11 = v3 >> 8;
    v12 = *(_WORD *)(v0 + 216);
    v21 = HIWORD(v3);
    v13 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
    v14 = v3 & 1;
    v15 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<PhysicallyBasedMaterial.PBRShaderParameters>);
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = v9;
    *(_QWORD *)(v16 + 24) = v15;
    *(_WORD *)(v16 + 32) = v12;
    *(_QWORD *)(v16 + 40) = v10;
    *(_BYTE *)(v16 + 48) = v14;
    *(_BYTE *)(v16 + 49) = v11;
    *(_BYTE *)(v16 + 50) = v21;
    *(_QWORD *)(v16 + 56) = v9;
    swift_retain_n();
    v17 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v8, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v16);
    *(_QWORD *)(v0 + 176) = v17;
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v12, v10, v22 | v14, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v1 = v23;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 184) = v19;
    type metadata accessor for __MaterialResource();
    *(_QWORD *)(v0 + 192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v19 = v0;
    v19[1] = specialized ShaderCacheLoader.loadResource(forKey:);
    return Task.value.getter();
  }
  v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_WORD *)(v0 + 216), *(_QWORD *)(v0 + 128), v3 & 0xFFFF01);
  if ((v5 & 1) == 0)
  {
    v7 = v3 & 0xFFFF00;
    v3 = *(_DWORD *)(v0 + 208);
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v6;
  type metadata accessor for __MaterialResource();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v6 = v0;
  v6[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::UInt16 v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(v0 + 208);
  v1 = *(_DWORD *)(v0 + 212);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_WORD *)(v0 + 216);
  swift_beginAccess();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v3, v1 | v2 & 1u);
  if ((v7 & 1) != 0)
  {
    v8 = v6;
    v9 = *(_QWORD *)(v0 + 136);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *(_QWORD *)(v9 + 160);
    *(_QWORD *)(v9 + 160) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    v12 = *(_QWORD *)(v0 + 136);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *(_QWORD *)(v12 + 160) = v11;
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v14;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 128) + 160;
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  if (*(_QWORD *)(*(_QWORD *)v1 + 16)
    && (v3 = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(v0 + 200)), (v4 & 1) != 0))
  {
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v5;
    type metadata accessor for __MaterialResource();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v5 = v0;
    v5[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_DWORD *)(v0 + 200);
    v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 1, 1, v9);
    v10 = lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(&lazy protocol witness table cache variable for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>, &demangling cache variable for type metadata for ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters>);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = v7;
    *(_QWORD *)(v11 + 24) = v10;
    *(_DWORD *)(v11 + 32) = v8;
    *(_QWORD *)(v11 + 40) = v7;
    swift_retain_n();
    v12 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC10RealityKit18__MaterialResourceC_Tgm5(v6, (uint64_t)&async function pointer to partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:), v11);
    *(_QWORD *)(v0 + 168) = v12;
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *(_QWORD *)v1;
    *(_QWORD *)v1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, v8, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)v1 = v16;
    swift_bridgeObjectRelease();
    swift_endAccess();
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v14;
    type metadata accessor for __MaterialResource();
    *(_QWORD *)(v0 + 184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    *v14 = v0;
    v14[1] = specialized ShaderCacheLoader.loadResource(forKey:);
  }
  return Task.value.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 192) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 112);
  swift_beginAccess();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(v1);
  if ((v4 & 1) != 0)
  {
    v5 = v3;
    v6 = *(_QWORD *)(v0 + 128);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v6 + 160);
    *(_QWORD *)(v6 + 160) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    v9 = *(_QWORD *)(v0 + 128);
    specialized _NativeDictionary._delete(at:)(v5, v8);
    *(_QWORD *)(v9 + 160) = v8;
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(void **)(v0 + 192);
  _StringGuts.grow(_:)(119);
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 96) = 0xE000000000000000;
  v2._object = (void *)0x800000021BE84F70;
  v2._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v2);
  *(_QWORD *)(v0 + 104) = v1;
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0xD000000000000049;
  v3._object = (void *)0x800000021BE84FA0;
  String.append(_:)(v3);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError();
  swift_allocError();
  *v6 = v4;
  v6[1] = v5;
  swift_willThrow();

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(__int16 a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(v4 + 208) = a3;
  *(_QWORD *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 136) = v3;
  *(_WORD *)(v4 + 216) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v4 + 144) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ShaderCacheLoader.loadResource(forKey:)(int a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = v1;
  *(_DWORD *)(v2 + 200) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v2 + 136) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ShaderCache.init(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16[2];

  outlined init with copy of __REAssetService(a1, v5 + 16);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = swift_allocObject();
  v12 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v11 + 16) = a3(MEMORY[0x24BEE4AF8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v11 + 24) = v13;
  *(_QWORD *)(v5 + 56) = v11;
  outlined init with copy of __REAssetService(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(a4);
  v14 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  *(_QWORD *)(v14 + 160) = a5(v12);
  *(_QWORD *)(v14 + 112) = v11;
  outlined init with take of BindableDataInternal(v16, v14 + 120);
  __swift_destroy_boxed_opaque_existential_1(a1);
  *(_QWORD *)(v5 + 64) = v14;
  return v5;
}

uint64_t specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(uint64_t a1, Swift::UInt a2)
{
  return specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(a1, a2, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:));
}

uint64_t specialized closure #1 in AssetServiceScopedRegistry.instance(for:)(uint64_t a1, Swift::UInt a2, void (*a3)(void), void (*a4)(uint64_t, uint64_t))
{
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v8 = (uint64_t *)(result + 24);
    swift_beginAccess();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v10 & 1) != 0)
    {
      v11 = v9;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v13 = *v8;
      v14 = *v8;
      *v8 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        a3();
        v13 = v14;
      }
      a4(v11, v13);
      *v8 = v13;
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v7 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v5 + 96) = v7;
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(a4 + 96);
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(v5 + 136) = a1;
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v5 + 32) = v8;
  v9 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v5 + 64) = v9;
  v10 = swift_task_alloc();
  *(_QWORD *)(v5 + 144) = v10;
  *(_QWORD *)v10 = v5;
  *(_QWORD *)(v10 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(_QWORD *)(v10 + 400) = a5;
  v11 = *(_OWORD *)(v5 + 80);
  v12 = *(_OWORD *)(v5 + 96);
  v13 = *(_OWORD *)(v5 + 112);
  *(_QWORD *)(v10 + 248) = *(_QWORD *)(v5 + 128);
  *(_OWORD *)(v10 + 232) = v13;
  *(_OWORD *)(v10 + 216) = v12;
  *(_OWORD *)(v10 + 200) = v11;
  v14 = *(_OWORD *)(v5 + 16);
  v15 = *(_OWORD *)(v5 + 32);
  v16 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v10 + 184) = *(_OWORD *)(v5 + 64);
  *(_OWORD *)(v10 + 168) = v16;
  *(_OWORD *)(v10 + 152) = v15;
  *(_OWORD *)(v10 + 136) = v14;
  return swift_task_switch();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 136) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5)
{
  uint64_t v5;
  __int16 v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;

  *(_QWORD *)(v5 + 16) = a1;
  v7 = *a4;
  v8 = *((_QWORD *)a4 + 1);
  v9 = *((unsigned __int8 *)a4 + 16);
  v10 = *((unsigned __int8 *)a4 + 17);
  v11 = *((unsigned __int8 *)a4 + 18);
  v12 = swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v12;
  *(_QWORD *)v12 = v5;
  *(_QWORD *)(v12 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(_QWORD *)(v12 + 184) = a5;
  *(_DWORD *)(v12 + 180) = (v10 << 8) | (v11 << 16) | v9;
  *(_WORD *)(v12 + 264) = v7;
  *(_WORD *)(v12 + 160) = v7;
  *(_QWORD *)(v12 + 168) = v8;
  *(_BYTE *)(v12 + 176) = v9;
  *(_BYTE *)(v12 + 177) = v10;
  *(_BYTE *)(v12 + 178) = v11;
  return swift_task_switch();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5)
{
  uint64_t v5;
  int v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 16) = a1;
  v7 = *a4;
  v8 = swift_task_alloc();
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)v8 = v5;
  *(_QWORD *)(v8 + 8) = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  *(_QWORD *)(v8 + 160) = a5;
  *(_DWORD *)(v8 + 240) = v7;
  return swift_task_switch();
}

uint64_t specialized static CustomMaterial.Program.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v5;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 == 2)
  {
    if (v3 != 2)
      return 0;
  }
  else
  {
    v5 = (v3 ^ v2) & 1;
    if (v3 == 2 || v5 != 0)
      return 0;
  }
  return 1;
}

BOOL specialized static CustomMaterial.Program.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  int v26;
  int v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  char v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  id v43;
  char v44;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v40 = *(_QWORD *)(a1 + 16);
  v41 = *(_OWORD *)(a1 + 24);
  v42 = v4;
  v43 = v5;
  v44 = v6;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(void **)(a2 + 48);
  v9 = *(_BYTE *)(a2 + 56);
  v35 = *(_QWORD *)(a2 + 16);
  v36 = *(_OWORD *)(a2 + 24);
  v37 = v7;
  v38 = v8;
  v39 = v9;
  if ((specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(&v40, &v35) & 1) == 0)
    return 0;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  v14 = *(void **)(a1 + 96);
  v15 = *(_BYTE *)(a1 + 104);
  v17 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a2 + 72);
  v18 = *(_QWORD *)(a2 + 80);
  v19 = *(_QWORD *)(a2 + 88);
  v20 = *(void **)(a2 + 96);
  v21 = *(_BYTE *)(a2 + 104);
  if (!v11)
  {
    v31 = *(_QWORD *)(a1 + 64);
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(void **)(a1 + 96);
    if (!v16)
      goto LABEL_7;
LABEL_12:
    outlined copy of CustomMaterial.GeometryModifier?(v17, v16, v18, v19, v20);
    outlined consume of CustomMaterial.GeometryModifier?(v31, v11, v13, v32, v33);
    outlined consume of CustomMaterial.GeometryModifier?(v17, v16, v18, v19, v20);
    return 0;
  }
  v40 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)&v41 = v11;
  *((_QWORD *)&v41 + 1) = v13;
  v42 = v12;
  v43 = v14;
  v44 = v15;
  if (!v16)
  {
    v31 = v10;
    v32 = v12;
    v28 = v14;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v33 = v28;
    v29 = v28;
    goto LABEL_12;
  }
  v35 = v17;
  *(_QWORD *)&v36 = v16;
  *((_QWORD *)&v36 + 1) = v18;
  v37 = v19;
  v38 = v20;
  v39 = v21 & 1;
  v22 = v10;
  v23 = v12;
  v24 = v14;
  outlined copy of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v25 = v24;
  v34 = specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(&v40, &v35);

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of CustomMaterial.GeometryModifier?(v22, v11, v13, v23, v24);
  if ((v34 & 1) == 0)
    return 0;
LABEL_7:
  if (*(unsigned __int8 *)(a1 + 105) != *(unsigned __int8 *)(a2 + 105))
    return 0;
  v26 = *(unsigned __int8 *)(a1 + 106);
  v27 = *(unsigned __int8 *)(a2 + 106);
  if (v26 == 2)
    return v27 == 2;
  return v27 != 2 && ((v27 ^ v26) & 1) == 0;
}

_QWORD *outlined retain of CustomMaterial.CustomShaderParameters(_QWORD *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[9];
  v5 = a1[10];
  v6 = a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[14];
  a2(a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  a2(v4, v5, v6, v7, v8, v9);
  return a1;
}

void outlined consume of __MaterialResource.CoreMaterialFunction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

uint64_t outlined copy of CustomMaterial.Blending(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for CustomMaterial.Program()
{
  return objc_opt_self();
}

uint64_t outlined copy of CustomMaterial.Blending?(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return outlined copy of CustomMaterial.Blending(a1, a2);
  return a1;
}

uint64_t outlined consume of CustomMaterial.Blending?(uint64_t a1, uint64_t a2)
{
  if (a2 != 2)
    return outlined consume of __EntityInfoComponent?(a1, a2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Program.Descriptor, &type metadata for CustomMaterial.Program.Descriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Program.Descriptor and conformance CustomMaterial.Program.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Program and conformance CustomMaterial.Program()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program)
  {
    v1 = type metadata accessor for CustomMaterial.Program();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Program, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Program and conformance CustomMaterial.Program);
  }
  return result;
}

uint64_t sub_21BA8F108()
{
  uint64_t v0;

  v0 = swift_retain();
  return CustomMaterial.program.setter(v0);
}

uint64_t method lookup function for CustomMaterial.Program()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v3 + 120) + *(_QWORD *)(v3 + 120));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of CustomMaterial.Program.__allocating_init(surfaceShader:geometryModifier:descriptor:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t getEnumTagSinglePayload for CustomMaterial.Program.Descriptor(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 65282 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65282 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65282;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65282;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65282;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomMaterial.Program.Descriptor(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65282 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65282 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BA8F2E4 + 4 * byte_21BE5B2ED[v4]))();
  *a1 = a2 - 254;
  return ((uint64_t (*)(void))((char *)sub_21BA8F318 + 4 * byte_21BE5B2E8[v4]))();
}

uint64_t sub_21BA8F318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA8F320(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21BA8F328);
  return result;
}

uint64_t sub_21BA8F334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21BA8F33CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BA8F340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21BA8F348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustomMaterial.Program.Descriptor()
{
  return &type metadata for CustomMaterial.Program.Descriptor;
}

uint64_t sub_21BA8F364()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)(v1 + 4);
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                            + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)))(a1, v4, v5, v6, v7);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int16 *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (__int16 *)(v1 + 4);
  v7 = v1[7];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __int16 *, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                                + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)))(a1, v4, v5, v6, v7);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[19];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)
                                                                              + async function pointer to specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)))(a1, v4, v5, v6, v7);
}

unint64_t lazy protocol witness table accessor for type ShaderCacheError and conformance ShaderCacheError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError;
  if (!lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderCacheError, &type metadata for ShaderCacheError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShaderCacheError and conformance ShaderCacheError);
  }
  return result;
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 216) = v3;
  *(_OWORD *)(v2 + 232) = *(_OWORD *)(a1 + 96);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 152) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 168) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 400) = a2;
  *(_QWORD *)(v2 + 248) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(v2 + 184) = v5;
  return swift_task_switch();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = CustomMaterial.CustomShaderParameters.materialPath.getter();
  v4 = v3;
  *(_QWORD *)(v0 + 408) = CustomMaterial.CustomShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v1 + 120, v0 + 256);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 256), v5);
  v7 = __REAssetService.asset(_:)(v2, v4, v5, v6);
  *(_QWORD *)(v0 + 416) = v7;
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 424) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 432) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v9);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 440) = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v0 + 488) = 1;
    __swift_destroy_boxed_opaque_existential_1(v0 + 256);
    *(_BYTE *)(v0 + 489) = *(_BYTE *)(v0 + 153);
    *(_WORD *)(v0 + 490) = *(_WORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 176);
    if (v10)
    {
      v11 = *(_QWORD *)(v0 + 168);
      v12 = *(_QWORD *)(v0 + 192);
      v26 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 160);
      v13 = *(void **)(v0 + 200);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v24 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v15 + 1, 1, v9);
      v9[2] = v15 + 1;
      v16 = &v9[6 * v15];
      *((_BYTE *)v16 + 32) = v28;
      v16[5] = v11;
      v16[6] = v10;
      v16[7] = v26;
      v16[8] = v12;
      v16[9] = v24;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v28, v11, v10, v26, v12, v13);
    }
    v17 = *(_QWORD *)(v0 + 224);
    if (v17)
    {
      v27 = *(_QWORD *)(v0 + 216);
      v29 = *(_QWORD *)(v0 + 208);
      v18 = *(_QWORD *)(v0 + 232);
      v19 = *(_QWORD *)(v0 + 240);
      v20 = *(void **)(v0 + 248);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v25 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v22 = v9[2];
      v21 = v9[3];
      if (v22 >= v21 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v9);
      v9[2] = v22 + 1;
      v23 = &v9[6 * v22];
      *((_BYTE *)v23 + 32) = v29;
      v23[5] = v27;
      v23[6] = v17;
      v23[7] = v18;
      v23[8] = v19;
      v23[9] = v25;
      outlined consume of __MaterialResource.CoreMaterialFunction?(v29, v27, v17, v18, v19, v20);
    }
    *(_QWORD *)(v0 + 448) = v9;
    *(_QWORD *)(v0 + 456) = type metadata accessor for __MaterialResource();
    *(_BYTE *)(v0 + 492) = *(_BYTE *)(v0 + 488);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 464) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11[3];
  char v12;
  BOOL v13;
  BOOL v14;
  char v15;
  char v16;
  __int128 v17;
  __int128 v18;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_BYTE *)(v0 + 492);
  v3 = *(_WORD *)(v0 + 490);
  v4 = *(_BYTE *)(v0 + 489);
  v5 = *(_QWORD *)(v0 + 408);
  v11[0] = *(_QWORD *)(v0 + 416);
  v11[1] = v5;
  v11[2] = 0;
  v12 = v2;
  v13 = (v3 & 0x400) != 0;
  v14 = (v3 & 0x800) != 0;
  v15 = 2;
  v16 = v4;
  v6 = *(_OWORD *)(v0 + 440);
  v7 = v1 + 120;
  v17 = *(_OWORD *)(v0 + 424);
  v18 = v6;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, v0 + 336);
  v8 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v11, (_QWORD *)(v0 + 336));
  *(_QWORD *)(v0 + 472) = v8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v9;
  *v9 = v0;
  v9[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 296, v8);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 296), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 296);
  v4 = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 200);
  *(_OWORD *)(v0 + 96) = v4;
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 248);
  v5 = *(_OWORD *)(v0 + 152);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 32) = v5;
  v6 = *(_OWORD *)(v0 + 184);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 168);
  *(_OWORD *)(v0 + 64) = v6;
  swift_retain();
  v7 = specialized SharedCacheStorage.addResource(value:forKey:)(v3, (_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v1 = 0xD00000000000002ALL;
  v2 = *(_WORD *)(v0 + 264);
  if ((v2 & 2) != 0)
  {
    v3 = 0x800000021BE81D80;
  }
  else if ((v2 & 1) == 0 && *(unsigned __int8 *)(v0 + 181) << 8 == 512)
  {
    v1 = 0xD00000000000001FLL;
    v3 = 0x800000021BE85050;
  }
  else
  {
    v3 = 0x800000021BE85070;
  }
  v4 = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 192) = PhysicallyBasedMaterial.PBRShaderParameters.functionConstants.getter();
  outlined init with copy of __REAssetService(v4 + 120, v0 + 16);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v5);
  v7 = __REAssetService.asset(_:)(v1, v3, v5, v6);
  *(_QWORD *)(v0 + 200) = v7;
  result = swift_bridgeObjectRelease();
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v9 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 208) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 216) = specialized Dictionary.init(dictionaryLiteral:)(v9);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 224) = specialized Dictionary.init(dictionaryLiteral:)(v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    *(_BYTE *)(v0 + 179) = *(_BYTE *)(v0 + 177);
    *(_QWORD *)(v0 + 232) = type metadata accessor for __MaterialResource();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 240) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9[3];
  char v10;
  __int16 v11;
  char v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_BYTE *)(v0 + 179);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v9[0] = *(_QWORD *)(v0 + 200);
  v9[1] = v4;
  v9[2] = 0;
  v10 = 1;
  v11 = 0;
  v12 = 2;
  v13 = v2;
  v14 = *(_OWORD *)(v0 + 208);
  v5 = v1 + 120;
  v15 = v3;
  v16 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, v0 + 96);
  v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v9, (_QWORD *)(v0 + 96));
  *(_QWORD *)(v0 + 248) = v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 256) = v7;
  *v7 = v0;
  v7[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 56, v6);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  v4 = *(_QWORD *)(v0 + 168);
  v5 = *(unsigned __int8 *)(v0 + 176);
  v6 = *(unsigned __int8 *)(v0 + 177);
  v7 = *(unsigned __int8 *)(v0 + 178);
  LOWORD(v2) = *(_WORD *)(v0 + 160);
  swift_retain();
  v8 = specialized SharedCacheStorage.addResource(value:forKey:)(v3, v2, v4, (v6 << 8) | (v7 << 16) | v5);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

{
  uint64_t v0;
  int v1;
  unsigned int v2;
  _BOOL4 v3;
  _BOOL4 v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v1 = *(_DWORD *)(v0 + 240);
  v2 = (unsigned __int16)v1;
  v3 = (v1 & 1) == 0;
  v4 = (v1 & 0xFF0000) == 0x20000;
  v5 = !v4 || !v3;
  if (v4 && v3)
    v6 = 0xD000000000000021;
  else
    v6 = 0xD00000000000002CLL;
  v7 = 0x800000021BE85020;
  if (!v5)
    v7 = 0x800000021BE84FF0;
  if ((v1 & 2) != 0)
    v8 = 0xD00000000000002CLL;
  else
    v8 = v6;
  if ((v1 & 2) != 0)
    v9 = 0x800000021BE81DB0;
  else
    v9 = v7;
  v10 = *(_QWORD *)(v0 + 160);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v11 + 32) = 0x6C6E55686374614DLL;
  *(_QWORD *)(v11 + 40) = 0xEF726F6C6F437469;
  *(_QWORD *)(v11 + 48) = (v2 >> 2) & 1;
  *(_QWORD *)(v11 + 56) = 0;
  *(_BYTE *)(v11 + 64) = 0;
  *(_QWORD *)(v0 + 168) = specialized Dictionary.init(dictionaryLiteral:)(v11);
  outlined init with copy of __REAssetService(v10 + 120, v0 + 16);
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), v12);
  v14 = __REAssetService.asset(_:)(v8, v9, v12, v13);
  *(_QWORD *)(v0 + 176) = v14;
  result = swift_bridgeObjectRelease();
  if (v14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v16 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v0 + 184) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 192) = specialized Dictionary.init(dictionaryLiteral:)(v16);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 200) = specialized Dictionary.init(dictionaryLiteral:)(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    *(_QWORD *)(v0 + 208) = type metadata accessor for __MaterialResource();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 216) = specialized static __ServiceLocator.shared.getter();
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9[3];
  char v10;
  __int16 v11;
  char v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(_WORD *)(v0 + 242);
  v9[0] = *(_QWORD *)(v0 + 176);
  v9[1] = v3;
  v9[2] = 0;
  v10 = 1;
  v11 = 0;
  v12 = 2;
  v13 = v4;
  v14 = *(_OWORD *)(v0 + 184);
  v5 = v1 + 120;
  v15 = v2;
  v16 = MEMORY[0x24BEE4AF8];
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, v0 + 96);
  v6 = specialized static __MaterialResource.buildCoreAsset(_:assetService:)(v9, (_QWORD *)(v0 + 96));
  *(_QWORD *)(v0 + 224) = v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v7;
  *v7 = v0;
  v7[1] = specialized closure #1 in ShaderCacheLoader.loadResource(forKey:);
  return static __MaterialResource.load(_:)(v0 + 56, v6);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  RERelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v3, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_retain();
  v5 = specialized SharedCacheStorage.addResource(value:forKey:)(v4, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(__int16 a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 184) = a4;
  *(_DWORD *)(v4 + 180) = a3;
  *(_WORD *)(v4 + 264) = a1;
  *(_WORD *)(v4 + 160) = a1;
  *(_QWORD *)(v4 + 168) = a2;
  *(_BYTE *)(v4 + 176) = a3 & 1;
  *(_BYTE *)(v4 + 177) = BYTE1(a3);
  *(_BYTE *)(v4 + 178) = BYTE2(a3);
  return swift_task_switch();
}

uint64_t specialized closure #1 in ShaderCacheLoader.loadResource(forKey:)(int a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = a2;
  *(_DWORD *)(v2 + 240) = a1;
  return swift_task_switch();
}

uint64_t sub_21BA90594()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BA905B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_21BA90694()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

id outlined copy of CustomMaterial.GeometryModifier?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    return a5;
  }
  return result;
}

void outlined consume of CustomMaterial.GeometryModifier?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();

  }
}

uint64_t lazy protocol witness table accessor for type ShaderCacheLoader<UnlitMaterial.UnlitShaderParameters> and conformance ShaderCacheLoader<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ShaderCacheLoader<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_21BA90838()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 72))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  swift_release();
  return swift_deallocObject();
}

uint64_t areJointDefinitionsEqual(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t DynamicType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  __int128 *v29;
  char v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD v60[29];
  unsigned __int8 v61;
  _BYTE v62[197];
  uint64_t v63;
  unsigned __int8 v64;
  _BYTE v65[197];
  uint64_t v66;
  char v67;
  _BYTE v68[212];
  uint64_t v69;
  unsigned __int8 v70;
  _BYTE v71[200];
  uint64_t v72;
  char v73;
  _BYTE v74[173];
  uint64_t v75;
  unsigned __int8 v76;
  _BYTE v77[173];
  uint64_t v78;
  char v79;
  _BYTE v80[188];
  uint64_t v81;
  unsigned __int8 v82;
  _BYTE v83[172];
  float v84;
  uint64_t v85;
  char v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  _BYTE v99[25];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _OWORD v109[6];
  _QWORD v110[20];
  uint64_t v111;
  char v112;
  __int128 v113[2];
  _QWORD v114[3];
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  uint64_t v124;
  uint64_t v125;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  DynamicType = swift_getDynamicType();
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  if (DynamicType != swift_getDynamicType())
    return 0;
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 16))(v110, v5, v6);
  v7 = a2[3];
  v8 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v7);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v100, v7, v8);
  v9 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v110, (uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)v110);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v123);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v120);
  if (!v9)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v117);
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v114);
    goto LABEL_9;
  }
  v10 = v124;
  v11 = v125;
  __swift_project_boxed_opaque_existential_1(v123, v124);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 40))(v110, v10, v11);
  v12 = v121;
  v13 = v122;
  __swift_project_boxed_opaque_existential_1(v120, v121);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v13 + 40))(&v100, v12, v13);
  v14 = specialized static GeometricPin.== infix(_:_:)((uint64_t)v110, (uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)&v100);
  outlined destroy of GeometricPin((uint64_t)v110);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v123);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v117);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v114);
  if (!v14)
  {
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    return 0;
  }
  v15 = v118;
  v16 = v119;
  __swift_project_boxed_opaque_existential_1(v117, v118);
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 64))(v15, v16);
  v17 = v115;
  v18 = v116;
  __swift_project_boxed_opaque_existential_1(v114, v115);
  v19 = v15 ^ (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 64))(v17, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
  if ((v19 & 1) != 0)
    return 0;
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v100);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)v110);
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v113);
    outlined init with take of BindableDataInternal(v113, (uint64_t)&v100);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined destroy of PhysicsFixedJoint((uint64_t)v110);
      return 1;
    }
  }
  else
  {
    outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v113);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v113);
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
  if ((swift_dynamicCast() & 1) == 0)
  {
    memset(v109, 0, 29);
    v108 = 0u;
    v107 = 0u;
    v106 = 0u;
    v105 = 0u;
    v104 = 0u;
    v103 = 0u;
    v102 = 0u;
    v101 = 0u;
    v100 = 0u;
    v22 = &v100;
    goto LABEL_19;
  }
  outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)v110);
  outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
  if ((swift_dynamicCast() & 1) == 0)
  {
    memset(v96, 0, 29);
    v95 = 0u;
    v94 = 0u;
    v93 = 0u;
    v92 = 0u;
    v91 = 0u;
    v90 = 0u;
    v89 = 0u;
    v88 = 0u;
    v87 = 0u;
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    v22 = &v87;
LABEL_19:
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for PhysicsSphericalJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of PhysicsRevoluteJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of PhysicsRevoluteJoint((uint64_t)&v87, (uint64_t)&v100);
        v20 = (v112 & BYTE12(v109[1]));
        if ((v112 & 1) == 0 && (BYTE12(v109[1]) & 1) == 0)
          v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
        outlined destroy of PhysicsRevoluteJoint((uint64_t)&v100);
        outlined destroy of PhysicsRevoluteJoint((uint64_t)v110);
        return v20;
      }
      memset(v96, 0, 29);
      v95 = 0u;
      v94 = 0u;
      v93 = 0u;
      v92 = 0u;
      v91 = 0u;
      v90 = 0u;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      outlined destroy of PhysicsRevoluteJoint((uint64_t)v110);
      v23 = &v87;
    }
    else
    {
      memset(v109, 0, 29);
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v100 = 0u;
      v23 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v23, &demangling cache variable for type metadata for PhysicsRevoluteJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of PhysicsPrismaticJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of PhysicsPrismaticJoint((uint64_t)&v87, (uint64_t)&v100);
        v20 = (v112 & BYTE12(v109[1]));
        if ((v112 & 1) == 0 && (BYTE12(v109[1]) & 1) == 0)
          v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
        outlined destroy of PhysicsPrismaticJoint((uint64_t)&v100);
        outlined destroy of PhysicsPrismaticJoint((uint64_t)v110);
        return v20;
      }
      memset(v96, 0, 29);
      v95 = 0u;
      v94 = 0u;
      v93 = 0u;
      v92 = 0u;
      v91 = 0u;
      v90 = 0u;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      outlined destroy of PhysicsPrismaticJoint((uint64_t)v110);
      v24 = &v87;
    }
    else
    {
      memset(v109, 0, 29);
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v100 = 0u;
      v24 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v24, &demangling cache variable for type metadata for PhysicsPrismaticJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of PhysicsDistanceJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of PhysicsDistanceJoint((uint64_t)&v87, (uint64_t)&v100);
        v25 = v111;
        v26 = *(_QWORD *)((char *)&v109[1] + 4);
        outlined init with take of PhysicsDistanceJoint((uint64_t)v110, (uint64_t)&v87);
        outlined init with take of PhysicsDistanceJoint((uint64_t)&v100, (uint64_t)v83);
        if (*(float *)&v25 == *(float *)&v26 && *((float *)&v25 + 1) == *((float *)&v26 + 1))
        {
          v27 = *((float *)&v96[1] + 3);
          outlined destroy of PhysicsDistanceJoint((uint64_t)&v87);
          v28 = v84;
          outlined destroy of PhysicsDistanceJoint((uint64_t)v83);
          return v27 == v28;
        }
        outlined destroy of PhysicsDistanceJoint((uint64_t)v83);
        outlined destroy of PhysicsDistanceJoint((uint64_t)&v87);
        return 0;
      }
      memset(v96, 0, sizeof(v96));
      v95 = 0u;
      v94 = 0u;
      v93 = 0u;
      v92 = 0u;
      v91 = 0u;
      v90 = 0u;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      outlined destroy of PhysicsDistanceJoint((uint64_t)v110);
      v29 = &v87;
    }
    else
    {
      memset(v109, 0, 32);
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v100 = 0u;
      v29 = &v100;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v29, &demangling cache variable for type metadata for PhysicsDistanceJoint?);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v87);
    if ((swift_dynamicCast() & 1) != 0)
    {
      outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v110);
      outlined init with copy of __REAssetService((uint64_t)a2, (uint64_t)v83);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of PhysicsCustomJoint((uint64_t)&v87, (uint64_t)&v100);
        if (v112 == 1)
        {
          if (v111)
          {
            if (*(_QWORD *)((char *)&v109[1] + 4))
              v30 = BYTE12(v109[1]);
            else
              v30 = 0;
            if ((v30 & 1) == 0)
              goto LABEL_79;
          }
          else
          {
            if (*(_QWORD *)((char *)&v109[1] + 4))
              v36 = 0;
            else
              v36 = BYTE12(v109[1]);
            if ((v36 & 1) == 0)
              goto LABEL_79;
          }
        }
        else if ((BYTE12(v109[1]) & 1) != 0
               || *(float *)&v111 != *((float *)&v109[1] + 1)
               || *((float *)&v111 + 1) != *((float *)&v109[1] + 2))
        {
LABEL_79:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)&v87);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v83);
          outlined destroy of PhysicsCustomJoint((uint64_t)v83);
          outlined destroy of PhysicsCustomJoint((uint64_t)&v87);
LABEL_80:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v80);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v77);
          outlined destroy of PhysicsCustomJoint((uint64_t)v77);
          outlined destroy of PhysicsCustomJoint((uint64_t)v80);
LABEL_81:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v74);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v71);
          outlined destroy of PhysicsCustomJoint((uint64_t)v71);
          outlined destroy of PhysicsCustomJoint((uint64_t)v74);
LABEL_82:
          outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v68);
          outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v65);
          outlined destroy of PhysicsCustomJoint((uint64_t)v65);
          outlined destroy of PhysicsCustomJoint((uint64_t)v68);
LABEL_83:
          outlined init with take of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v62);
          outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v60);
          outlined destroy of PhysicsCustomJoint((uint64_t)v60);
          outlined destroy of PhysicsCustomJoint((uint64_t)v62);
          return 0;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)&v87);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v83);
        v31 = v97;
        v32 = BYTE8(v97);
        outlined destroy of PhysicsCustomJoint((uint64_t)&v87);
        v33 = v85;
        v34 = v86;
        outlined destroy of PhysicsCustomJoint((uint64_t)v83);
        if (v32 == 1)
        {
          if (v31)
          {
            if (v33)
              v35 = v34;
            else
              v35 = 0;
            if ((v35 & 1) == 0)
              goto LABEL_80;
          }
          else
          {
            if (v33)
              v37 = 0;
            else
              v37 = v34;
            if ((v37 & 1) == 0)
              goto LABEL_80;
          }
        }
        else if ((v34 & 1) != 0 || *(float *)&v31 != *(float *)&v33 || *((float *)&v31 + 1) != *((float *)&v33 + 1))
        {
          goto LABEL_80;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v80);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v77);
        v38 = v81;
        v39 = v82;
        outlined destroy of PhysicsCustomJoint((uint64_t)v80);
        v40 = v78;
        v41 = v79;
        outlined destroy of PhysicsCustomJoint((uint64_t)v77);
        if (v39 == 1)
        {
          if (v38)
          {
            if (v40)
              v42 = v41;
            else
              v42 = 0;
            if ((v42 & 1) == 0)
              goto LABEL_81;
          }
          else
          {
            if (v40)
              v43 = 0;
            else
              v43 = v41;
            if ((v43 & 1) == 0)
              goto LABEL_81;
          }
        }
        else if ((v41 & 1) != 0 || *(float *)&v38 != *(float *)&v40 || *((float *)&v38 + 1) != *((float *)&v40 + 1))
        {
          goto LABEL_81;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v74);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v71);
        v44 = v75;
        v45 = v76;
        outlined destroy of PhysicsCustomJoint((uint64_t)v74);
        v46 = v72;
        v47 = v73;
        outlined destroy of PhysicsCustomJoint((uint64_t)v71);
        if (v45 == 1)
        {
          if (v44)
          {
            if (v46)
              v48 = v47;
            else
              v48 = 0;
            if ((v48 & 1) == 0)
              goto LABEL_82;
          }
          else
          {
            if (v46)
              v49 = 0;
            else
              v49 = v47;
            if ((v49 & 1) == 0)
              goto LABEL_82;
          }
        }
        else if ((v47 & 1) != 0 || *(float *)&v44 != *(float *)&v46 || *((float *)&v44 + 1) != *((float *)&v46 + 1))
        {
          goto LABEL_82;
        }
        outlined init with copy of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v68);
        outlined init with copy of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v65);
        v50 = v69;
        v51 = v70;
        outlined destroy of PhysicsCustomJoint((uint64_t)v68);
        v52 = v66;
        v53 = v67;
        outlined destroy of PhysicsCustomJoint((uint64_t)v65);
        if (v51 == 1)
        {
          if (v50)
          {
            if (v52)
              v54 = v53;
            else
              v54 = 0;
            if ((v54 & 1) == 0)
              goto LABEL_83;
          }
          else
          {
            if (v52)
              v55 = 0;
            else
              v55 = v53;
            if ((v55 & 1) == 0)
              goto LABEL_83;
          }
        }
        else if ((v53 & 1) != 0 || *(float *)&v50 != *(float *)&v52 || *((float *)&v50 + 1) != *((float *)&v52 + 1))
        {
          goto LABEL_83;
        }
        outlined init with take of PhysicsCustomJoint((uint64_t)v110, (uint64_t)v62);
        outlined init with take of PhysicsCustomJoint((uint64_t)&v100, (uint64_t)v60);
        v56 = v63;
        v57 = v64;
        outlined destroy of PhysicsCustomJoint((uint64_t)v62);
        v58 = v60[28];
        v59 = v61;
        outlined destroy of PhysicsCustomJoint((uint64_t)v60);
        if (v57 == 1)
        {
          if (v56)
          {
            if (v58)
              return v59;
            else
              return 0;
          }
          else if (v58)
          {
            return 0;
          }
          else
          {
            return v59;
          }
        }
        if ((v59 & 1) == 0)
          return *((float *)&v56 + 1) == *((float *)&v58 + 1) && *(float *)&v56 == *(float *)&v58;
      }
      else
      {
        memset(v99, 0, sizeof(v99));
        v98 = 0u;
        v97 = 0u;
        memset(v96, 0, sizeof(v96));
        v95 = 0u;
        v94 = 0u;
        v93 = 0u;
        v92 = 0u;
        v91 = 0u;
        v90 = 0u;
        v89 = 0u;
        v88 = 0u;
        v87 = 0u;
        outlined destroy of PhysicsCustomJoint((uint64_t)v110);
        outlined destroy of BodyTrackingComponent?((uint64_t)&v87, &demangling cache variable for type metadata for PhysicsCustomJoint?);
      }
    }
    else
    {
      memset(v109, 0, 89);
      v108 = 0u;
      v107 = 0u;
      v106 = 0u;
      v105 = 0u;
      v104 = 0u;
      v103 = 0u;
      v102 = 0u;
      v101 = 0u;
      v100 = 0u;
      outlined destroy of BodyTrackingComponent?((uint64_t)&v100, &demangling cache variable for type metadata for PhysicsCustomJoint?);
    }
    return 0;
  }
  outlined init with take of PhysicsSphericalJoint((uint64_t)&v87, (uint64_t)&v100);
  if ((v112 & 1) != 0)
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)&v87);
    v20 = BYTE12(v96[1]);
LABEL_47:
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v87);
    return v20;
  }
  if ((BYTE12(v109[1]) & 1) != 0)
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v100, (uint64_t)&v87);
    v20 = 0;
    goto LABEL_47;
  }
  v20 = *((float *)&v111 + 1) == *((float *)&v109[1] + 2) && *(float *)&v111 == *((float *)&v109[1] + 1);
  outlined destroy of PhysicsSphericalJoint((uint64_t)&v100);
  outlined destroy of PhysicsSphericalJoint((uint64_t)v110);
  return v20;
}

uint64_t static PhysicsJointCreator.createJointDefinition(fromCoreJointDefinition:isActive:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t Entity;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char ChecksForCollisions;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  float32x2_t v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  float32x2_t v78;
  uint64_t v79;
  char v80;
  __int128 v81;
  ValueMetadata *v82;
  unint64_t v83;
  char v84[8];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[80];
  char v92;
  char v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  char v105;
  _BYTE v106[80];
  _BYTE v107[96];
  uint64_t v108;

  Entity = REPhysicsJointDefinitionGetEntity();
  if (!Entity || (v5 = Entity, (v6 = REPhysicsJointDefinitionGetEntity()) == 0))
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_BYTE *)(v8 + 32) = 4;
    return swift_willThrow();
  }
  v7 = v6;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    if ((REEntityIsBeingDestroyed() & 1) != 0)
    {
      __break(1u);
      goto LABEL_79;
    }
    v10 = specialized static Entity.entityInfoType(_:)();
    if (v10)
    {
      v11 = (*(uint64_t (**)(void))(v10 + 232))();
      v12 = *(_QWORD *)(v11 + 16);
      swift_retain();
      MEMORY[0x22076D160](v12, 0);
      *(_QWORD *)(v11 + 16) = v5;
      MEMORY[0x22076D160](v5, v11);
      swift_release();
    }
    else
    {
      makeEntity(for:)(v5);
    }
  }
  v108 = a2;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    swift_dynamicCastClassUnconditional();
    goto LABEL_14;
  }
  if ((REEntityIsBeingDestroyed() & 1) != 0)
  {
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    JUMPOUT(0x21BA920E8);
  }
  v13 = specialized static Entity.entityInfoType(_:)();
  if (v13)
  {
    v14 = (*(uint64_t (**)(void))(v13 + 232))();
    v15 = *(_QWORD *)(v14 + 16);
    swift_retain();
    MEMORY[0x22076D160](v15, 0);
    *(_QWORD *)(v14 + 16) = v7;
    MEMORY[0x22076D160](v7, v14);
    swift_release();
  }
  else
  {
    makeEntity(for:)(v7);
  }
LABEL_14:
  REPhysicsJointDefinitionGetPinName();
  v16 = String.init(cString:)();
  v18 = v17;
  REPhysicsJointDefinitionGetPinName();
  v19 = String.init(cString:)();
  v21 = v20;
  REPhysicsJointDefinitionGetOffsetFromPin();
  v68 = v23;
  v71 = v22;
  REPhysicsJointDefinitionGetOffsetFromPin();
  v74 = v25;
  v77 = v24;
  swift_weakInit();
  v89 = v71;
  v90 = v68;
  swift_weakAssign();
  v85 = v16;
  v86 = v18;
  swift_bridgeObjectRelease();
  v87 = 0;
  v88 = 0;
  outlined init with take of GeometricPin((uint64_t)v84, (uint64_t)v107);
  swift_weakInit();
  v87 = 0;
  v88 = 0;
  v89 = v77;
  v90 = v74;
  swift_weakAssign();
  v85 = v19;
  v86 = v21;
  swift_bridgeObjectRelease();
  v87 = 0;
  v88 = 0;
  outlined init with take of GeometricPin((uint64_t)v84, (uint64_t)v106);
  ChecksForCollisions = REPhysicsJointDefinitionGetChecksForCollisions();
  switch(REPhysicsJointDefinitionGetJointType())
  {
    case 1u:
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v92 = 0;
      v93 = a1 & 1;
      v82 = &type metadata for PhysicsFixedJoint;
      v83 = lazy protocol witness table accessor for type PhysicsFixedJoint and conformance PhysicsFixedJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsFixedJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 2u:
      REPhysicsJointDefinitionSphericalJointGetAngularLimitYZ();
      if (*(float *)&v28 <= 0.0 || *((float *)&v28 + 1) <= 0.0)
      {
        v30 = 0;
        v29 = 1;
      }
      else
      {
        v29 = 0;
        v30 = v28;
      }
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v94 = v30;
      LOBYTE(v95) = v29;
      v92 = ChecksForCollisions;
      v93 = a1 & 1;
      v82 = &type metadata for PhysicsSphericalJoint;
      v83 = lazy protocol witness table accessor for type PhysicsSphericalJoint and conformance PhysicsSphericalJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsSphericalJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 3u:
      REPhysicsJointDefinitionRevoluteJointGetAngularLimitX();
      v32 = *(float *)&v31 > *((float *)&v31 + 1);
      if (*(float *)&v31 <= *((float *)&v31 + 1))
        v33 = v31;
      else
        v33 = 0;
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v94 = v33;
      LOBYTE(v95) = v32;
      v92 = ChecksForCollisions;
      v93 = a1 & 1;
      v82 = &type metadata for PhysicsRevoluteJoint;
      v83 = lazy protocol witness table accessor for type PhysicsRevoluteJoint and conformance PhysicsRevoluteJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsRevoluteJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 4u:
      REPhysicsJointDefinitionPrismaticJointGetLinearLimitX();
      v35 = *(float *)&v34 > *((float *)&v34 + 1);
      if (*(float *)&v34 <= *((float *)&v34 + 1))
        v36 = v34;
      else
        v36 = 0;
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v94 = v36;
      LOBYTE(v95) = v35;
      v92 = ChecksForCollisions;
      v93 = a1 & 1;
      v82 = &type metadata for PhysicsPrismaticJoint;
      v83 = lazy protocol witness table accessor for type PhysicsPrismaticJoint and conformance PhysicsPrismaticJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsPrismaticJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 5u:
      REPhysicsJointDefinitionDistanceJointGetDistanceLimit();
      v78 = v37;
      if ((vmvn_s8((int8x8_t)vcge_f32((float32x2_t)vdup_lane_s32((int32x2_t)v37, 1), v37)).u8[0] & 1) != 0)
        goto LABEL_80;
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v94 = (unint64_t)v78;
      v92 = ChecksForCollisions;
      REPhysicsJointDefinitionDistanceJointGetTolerance();
      v95 = v38;
      v93 = a1 & 1;
      v82 = &type metadata for PhysicsDistanceJoint;
      v83 = lazy protocol witness table accessor for type PhysicsDistanceJoint and conformance PhysicsDistanceJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsDistanceJoint((uint64_t)v84, v81 + 16);
      goto LABEL_76;
    case 6u:
      REPhysicsJointDefinitionGetLinearLimit();
      v66 = v39;
      v40 = 1;
      REPhysicsJointDefinitionGetLinearLimit();
      v69 = v41;
      REPhysicsJointDefinitionGetLinearLimit();
      v72 = v42;
      REPhysicsJointDefinitionGetAngularLimit();
      v75 = v43;
      REPhysicsJointDefinitionGetAngularLimit();
      v79 = v44;
      REPhysicsJointDefinitionGetAngularLimit();
      if (*(float *)&v66 == 0.0 && *((float *)&v66 + 1) == 0.0)
      {
        v46 = 0;
        v48 = v75;
        v47 = v79;
        v50 = v69;
        v49 = v72;
      }
      else
      {
        v48 = v75;
        v47 = v79;
        v50 = v69;
        v49 = v72;
        if (*((float *)&v66 + 1) >= *(float *)&v66)
        {
          v40 = 0;
          v46 = v66 | ((unint64_t)HIDWORD(v66) << 32);
        }
        else
        {
          v46 = 1;
        }
      }
      if (*(float *)&v50 == 0.0 && *((float *)&v50 + 1) == 0.0)
      {
        v51 = 0;
LABEL_45:
        v52 = 1;
        goto LABEL_47;
      }
      if (*((float *)&v50 + 1) < *(float *)&v50)
      {
        v51 = 1;
        goto LABEL_45;
      }
      v52 = 0;
      v51 = v50;
LABEL_47:
      if (*(float *)&v49 == 0.0 && *((float *)&v49 + 1) == 0.0)
      {
        v53 = 0;
LABEL_52:
        v54 = 1;
        goto LABEL_54;
      }
      if (*((float *)&v49 + 1) < *(float *)&v49)
      {
        v53 = 1;
        goto LABEL_52;
      }
      v54 = 0;
      v53 = v49;
LABEL_54:
      if (*(float *)&v48 == 0.0 && *((float *)&v48 + 1) == 0.0)
      {
        v55 = 0;
LABEL_59:
        v56 = 1;
        goto LABEL_61;
      }
      if (*((float *)&v48 + 1) < *(float *)&v48)
      {
        v55 = 1;
        goto LABEL_59;
      }
      v56 = 0;
      v55 = v48;
LABEL_61:
      if (*(float *)&v47 == 0.0 && *((float *)&v47 + 1) == 0.0)
      {
        v57 = 0;
LABEL_66:
        v58 = 1;
        goto LABEL_68;
      }
      if (*((float *)&v47 + 1) < *(float *)&v47)
      {
        v57 = 1;
        goto LABEL_66;
      }
      v58 = 0;
      v57 = v47;
LABEL_68:
      v64 = a1;
      v65 = ChecksForCollisions;
      v80 = v54;
      v76 = v53;
      v73 = v56;
      v70 = v55;
      v67 = v58;
      v63 = v57;
      if (*(float *)&v45 == 0.0 && *((float *)&v45 + 1) == 0.0)
      {
        v59 = v51;
        v60 = v46;
        v61 = 0;
LABEL_73:
        v62 = 1;
        goto LABEL_75;
      }
      if (*((float *)&v45 + 1) < *(float *)&v45)
      {
        v59 = v51;
        v60 = v46;
        v61 = 1;
        goto LABEL_73;
      }
      v59 = v51;
      v60 = v46;
      v62 = 0;
      v61 = v45;
LABEL_75:
      outlined init with copy of GeometricPin((uint64_t)v107, (uint64_t)v84);
      outlined init with copy of GeometricPin((uint64_t)v106, (uint64_t)v91);
      v94 = v60;
      LOBYTE(v95) = v40;
      v96 = v59;
      v97 = v52;
      v98 = v76;
      v99 = v80;
      v100 = v70;
      v101 = v73;
      v102 = v63;
      v103 = v67;
      v104 = v61;
      v105 = v62;
      v92 = v65;
      v93 = v64 & 1;
      v82 = &type metadata for PhysicsCustomJoint;
      v83 = lazy protocol witness table accessor for type PhysicsCustomJoint and conformance PhysicsCustomJoint();
      *(_QWORD *)&v81 = swift_allocObject();
      outlined init with take of PhysicsCustomJoint((uint64_t)v84, v81 + 16);
LABEL_76:
      swift_release();
      swift_release();
      outlined destroy of GeometricPin((uint64_t)v106);
      outlined destroy of GeometricPin((uint64_t)v107);
      result = outlined init with take of BindableDataInternal(&v81, v108);
      break;
    default:
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(_QWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 16) = 0;
      *(_QWORD *)(v27 + 24) = 0;
      *(_BYTE *)(v27 + 32) = 4;
      swift_willThrow();
      swift_release();
      swift_release();
      outlined destroy of GeometricPin((uint64_t)v106);
      return outlined destroy of GeometricPin((uint64_t)v107);
  }
  return result;
}

uint64_t specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _BYTE *v18;
  uint64_t result;
  _QWORD *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _OWORD v41[6];
  uint64_t v42;
  float v43;
  float v44;
  char v45;
  float v46;
  float v47;
  char v48;
  float v49;
  float v50;
  char v51;
  _BYTE v52[56];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 16))(&v42, v2, v3);
  Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v42);
  if (!Strong
    || (swift_release(),
        v5 = a1[3],
        v6 = a1[4],
        __swift_project_boxed_opaque_existential_1(a1, v5),
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 40))(&v42, v5, v6),
        Strong = swift_weakLoadStrong(),
        outlined destroy of GeometricPin((uint64_t)&v42),
        !Strong))
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    v18 = v17 + 2;
    *v17 = 0u;
    v17[1] = 0u;
LABEL_6:
    *v18 = 4;
    swift_willThrow();
    return Strong;
  }
  swift_release();
  v7 = a1[3];
  v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 16))(&v42, v7, v8);
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)&v42);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v10 + 40))(&v42, v9, v10);
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)&v42);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v12 + 16))(&v42, v11, v12);
  outlined destroy of GeometricPin((uint64_t)&v42);
  v13 = a1[3];
  v14 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v14 + 40))(&v42, v13, v14);
  outlined destroy of GeometricPin((uint64_t)&v42);
  v15 = a1[3];
  v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  (*(void (**)(uint64_t, uint64_t))(v16 + 64))(v15, v16);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)&v32);
  Strong = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Strong = REPhysicsJointDefinitionCreateFixedJoint();
LABEL_21:
    swift_release();
    swift_release();
    return Strong;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsSphericalJoint((uint64_t)&v32, (uint64_t)&v42);
    __asm { FMOV            V8.2S, #-1.0 }
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Strong = REPhysicsJointDefinitionCreateSphericalJoint();
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  v40 = 0u;
  memset(v41, 0, 29);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsSphericalJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsRevoluteJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Strong = REPhysicsJointDefinitionCreateRevoluteJoint();
    outlined destroy of PhysicsRevoluteJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  v40 = 0u;
  memset(v41, 0, 29);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsRevoluteJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsPrismaticJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Strong = REPhysicsJointDefinitionCreatePrismaticJoint();
    outlined destroy of PhysicsPrismaticJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  v40 = 0u;
  memset(v41, 0, 29);
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsPrismaticJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if (swift_dynamicCast())
  {
    outlined init with take of PhysicsDistanceJoint((uint64_t)&v32, (uint64_t)&v42);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    Strong = REPhysicsJointDefinitionCreateDistanceJoint();
    outlined destroy of PhysicsDistanceJoint((uint64_t)&v42);
    goto LABEL_21;
  }
  memset(v41, 0, 32);
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsDistanceJoint?);
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v52);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v40 = 0u;
    memset(v41, 0, 89);
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)&v32, &demangling cache variable for type metadata for PhysicsCustomJoint?);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *v25 = 1;
    v25[1] = 0;
    v18 = v25 + 4;
    v25[2] = 0;
    v25[3] = 0;
    goto LABEL_6;
  }
  result = outlined init with take of PhysicsCustomJoint((uint64_t)&v32, (uint64_t)&v42);
  if (v45 != 1)
  {
    v26 = v43;
    if (v43 <= v44)
    {
      if (v43 >= -6.2832)
      {
        if (v43 <= 6.2832)
        {
          v27 = -6.2832;
          if (v44 >= -6.2832)
          {
            v27 = 6.2832;
            if (v44 <= 6.2832)
              v27 = v44;
          }
        }
        else
        {
          if (v44 < -6.2832)
            goto LABEL_67;
          v26 = 6.2832;
          v27 = v44;
          if (v44 > 6.2832)
            goto LABEL_36;
        }
      }
      else
      {
        if (v44 < -6.2832)
          goto LABEL_36;
        v27 = 6.2832;
        if (v44 <= 6.2832)
          v27 = v44;
        v26 = -6.2832;
      }
      if (v26 <= v27)
        goto LABEL_36;
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
  }
LABEL_36:
  if (v48 != 1)
  {
    v28 = v46;
    if (v46 <= v47)
    {
      if (v46 >= -6.2832)
      {
        if (v46 <= 6.2832)
        {
          v29 = -6.2832;
          if (v47 >= -6.2832)
          {
            v29 = 6.2832;
            if (v47 <= 6.2832)
              v29 = v47;
          }
        }
        else
        {
          if (v47 < -6.2832)
            goto LABEL_68;
          v28 = 6.2832;
          v29 = v47;
          if (v47 > 6.2832)
            goto LABEL_51;
        }
LABEL_50:
        if (v28 <= v29)
          goto LABEL_51;
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (v47 >= -6.2832)
      {
        v29 = 6.2832;
        if (v47 <= 6.2832)
          v29 = v47;
        v28 = -6.2832;
        goto LABEL_50;
      }
    }
  }
LABEL_51:
  if (v51 == 1)
    goto LABEL_66;
  v30 = v49;
  if (v49 > v50)
    goto LABEL_66;
  if (v49 >= -6.2832)
  {
    if (v49 <= 6.2832)
    {
      v31 = -6.2832;
      if (v50 >= -6.2832)
      {
        v31 = 6.2832;
        if (v50 <= 6.2832)
          v31 = v50;
      }
    }
    else
    {
      if (v50 < -6.2832)
        goto LABEL_69;
      v30 = 6.2832;
      v31 = v50;
      if (v50 > 6.2832)
        goto LABEL_66;
    }
  }
  else
  {
    if (v50 < -6.2832)
    {
LABEL_66:
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      Strong = REPhysicsJointDefinitionCreateCustomJoint();
      outlined destroy of PhysicsCustomJoint((uint64_t)&v42);
      goto LABEL_21;
    }
    v31 = 6.2832;
    if (v50 <= 6.2832)
      v31 = v50;
    v30 = -6.2832;
  }
  if (v30 <= v31)
    goto LABEL_66;
LABEL_69:
  __break(1u);
  return result;
}

uint64_t outlined destroy of GeometricPin(uint64_t a1)
{
  destroy for GeometricPin();
  return a1;
}

unint64_t lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError;
  if (!lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for PhysicsJointError, &type metadata for PhysicsJointError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicsJointError and conformance PhysicsJointError);
  }
  return result;
}

uint64_t outlined init with take of PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsCustomJoint(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhysicsCustomJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsCustomJoint);
  return a1;
}

uint64_t outlined init with take of PhysicsDistanceJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsDistanceJoint(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhysicsDistanceJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsDistanceJoint);
  return a1;
}

uint64_t outlined init with take of PhysicsPrismaticJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsSphericalJoint(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhysicsPrismaticJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsPrismaticJoint);
  return a1;
}

uint64_t outlined init with take of PhysicsRevoluteJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsSphericalJoint(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhysicsRevoluteJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsRevoluteJoint);
  return a1;
}

uint64_t outlined init with take of PhysicsSphericalJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsSphericalJoint(a2, a1);
  return a2;
}

uint64_t outlined destroy of PhysicsFixedJoint(uint64_t a1)
{
  destroy for PhysicsFixedJoint(a1, &type metadata for PhysicsFixedJoint);
  return a1;
}

uint64_t sub_21BA930E4()
{
  return objectdestroyTm_0();
}

uint64_t sub_21BA93130()
{
  return objectdestroyTm_0();
}

uint64_t sub_21BA9317C()
{
  return objectdestroyTm_0();
}

uint64_t sub_21BA931C8()
{
  return objectdestroyTm_0();
}

uint64_t sub_21BA93214()
{
  return objectdestroyTm_0();
}

uint64_t sub_21BA93260()
{
  return objectdestroyTm_0();
}

uint64_t objectdestroyTm_0()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of PhysicsFixedJoint(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PhysicsFixedJoint(a2, a1);
  return a2;
}

uint64_t outlined init with copy of PhysicsCustomJoint(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for PhysicsCustomJoint(a2, a1);
  return a2;
}

uint64_t specialized static PhysicsJointCreator.findNearestOrAddPhysicsJointsComponent(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t Component;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t Parent;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t Object;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSString *v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  swift_retain_n();
  Component = REEntityGetComponent();
  swift_release();
  if (Component)
  {
    v4 = a1;
LABEL_3:
    swift_release();
    return v4;
  }
  v5 = a1;
  while (1)
  {
    if (v2 && *(_QWORD *)(v5 + 16) == *(_QWORD *)(v2 + 16)
      || (swift_retain(), v8 = REEntityGetComponent(), swift_release(), v8))
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0, MEMORY[0x24BEE4AF8]);
      swift_release();
      swift_release();
      return v5;
    }
    Parent = REEntityGetParent();
    if (!Parent)
    {
      swift_retain();
      specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(0, MEMORY[0x24BEE4AF8]);
      swift_release();
      swift_release();
      swift_release();
      swift_retain();
      return a1;
    }
    v10 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release();
      type metadata accessor for Entity();
      v4 = swift_dynamicCastClassUnconditional();
      goto LABEL_7;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      break;
    if (one-time initialization token for customComponentTypeObjectIdToHandles != -1)
      swift_once();
    swift_beginAccess();
    if (!*(_QWORD *)(static SceneManager.customComponentTypeObjectIdToHandles + 16)
      || (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for __EntityInfoComponent),
          (v11 & 1) == 0))
    {
      swift_endAccess();
      v12 = specialized static SceneManager.customComponentTypeHelper(_:typeName:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent, 0, 0);
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = static SceneManager.customComponentTypeObjectIdToHandles;
      static SceneManager.customComponentTypeObjectIdToHandles = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, (uint64_t)&type metadata for __EntityInfoComponent, isUniquelyReferenced_nonNull_native);
      static SceneManager.customComponentTypeObjectIdToHandles = v30;
      swift_bridgeObjectRelease();
    }
    swift_endAccess();
    if (!REEntityGetCustomComponent())
      goto LABEL_41;
    Object = RECustomComponentGetObject();
    if (!Object)
      goto LABEL_41;
    v15 = *(unsigned __int8 **)Object;
    if (*(_QWORD *)(Object + 8) || !v15)
    {
      result = swift_retain();
    }
    else
    {
      v16 = *v15;
      v17 = String.init(utf8String:)();
      if (v18)
        v19 = v17;
      else
        v19 = 0;
      if (v18)
        v20 = v18;
      else
        v20 = 0xE000000000000000;
      v15 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v16 == 42, v19, v20);
      swift_bridgeObjectRelease();
      type metadata accessor for IntrospectionDataCleanupHelper();
      result = swift_allocObject();
      *(_QWORD *)(result + 16) = v15;
    }
    if (!v15)
      goto LABEL_46;
    swift_retain();
    v21 = String.init(utf8String:)();
    v23 = v22;
    swift_release();
    v24 = v23 ? v21 : 0;
    v25 = v23 ? v23 : 0xE000000000000000;
    v26 = (NSString *)MEMORY[0x220768C3C](v24, v25);
    swift_bridgeObjectRelease();
    v27 = NSClassFromString(v26);

    swift_release();
    if (!v27)
      goto LABEL_41;
    swift_getObjCClassMetadata();
    type metadata accessor for Entity();
    v28 = swift_dynamicCastMetatype();
    if (v28)
    {
      v4 = (*(uint64_t (**)(void))(v28 + 232))();
      v29 = *(_QWORD *)(v4 + 16);
      swift_retain();
      MEMORY[0x22076D160](v29, 0);
      *(_QWORD *)(v4 + 16) = v10;
      MEMORY[0x22076D160](v10, v4);
      swift_release();
    }
    else
    {
LABEL_41:
      v4 = makeEntity(for:)(v10);
    }
    swift_release();
LABEL_7:
    swift_retain();
    v7 = REEntityGetComponent();
    swift_release();
    v5 = v4;
    if (v7)
      goto LABEL_3;
  }
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t specialized static PhysicsJointCreator.verifyData(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE v63[40];
  __int128 v64[2];
  __int128 v65[2];
  __int128 v66[2];
  __int128 v67[2];
  __int128 v68[2];
  _BYTE v69[48];
  _BYTE v70[48];
  _BYTE v71[48];
  _BYTE v72[48];

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v3 + 16))(&v60, v2, v3);
  Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v60);
  if (!Strong)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_BYTE *)(v16 + 32) = 4;
    return swift_willThrow();
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    REEntityGetName();
    v18 = String.init(cString:)();
    v20 = v19;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v14 = v18;
    *(_QWORD *)(v14 + 8) = v20;
    *(_QWORD *)(v14 + 16) = 0;
    *(_QWORD *)(v14 + 24) = 0;
    v15 = 1;
    goto LABEL_12;
  }
  PhysicsBodyComponent.init(_:)((uint64_t)&v60);
  swift_release();
  swift_release();
  v5 = a1[3];
  v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 16))(&v60, v5, v6);
  GeometricPin.pose.getter((uint64_t)v69);
  outlined destroy of GeometricPin((uint64_t)&v60);
  outlined init with take of REPoseF?((uint64_t)v69, (uint64_t)v72);
  if ((v72[32] & 1) != 0)
  {
    REEntityGetName();
    v7 = String.init(cString:)();
    v9 = v8;
    v10 = a1[3];
    v11 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 16))(&v60, v10, v11);
    v13 = v61;
    v12 = v62;
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)&v60);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v14 = v7;
    *(_QWORD *)(v14 + 8) = v9;
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v12;
    v15 = 3;
LABEL_12:
    *(_BYTE *)(v14 + 32) = v15;
    swift_willThrow();
    return swift_release();
  }
  v21 = a1[3];
  v22 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 40))(&v60, v21, v22);
  v23 = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)&v60);
  if (!v23)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)(v14 + 16) = 0u;
    v15 = 4;
    goto LABEL_12;
  }
  swift_retain();
  if (!REEntityGetComponent())
  {
    swift_release();
    REEntityGetName();
    v35 = String.init(cString:)();
    v37 = v36;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v33 = v35;
    *(_QWORD *)(v33 + 8) = v37;
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)(v33 + 24) = 0;
    v34 = 1;
    goto LABEL_15;
  }
  PhysicsBodyComponent.init(_:)((uint64_t)&v60);
  swift_release();
  swift_release();
  v24 = a1[3];
  v25 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v24);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v25 + 40))(&v60, v24, v25);
  GeometricPin.pose.getter((uint64_t)v70);
  outlined destroy of GeometricPin((uint64_t)&v60);
  outlined init with take of REPoseF?((uint64_t)v70, (uint64_t)v71);
  if ((v71[32] & 1) != 0)
  {
    REEntityGetName();
    v26 = String.init(cString:)();
    v28 = v27;
    v29 = a1[3];
    v30 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v29);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 40))(&v60, v29, v30);
    v32 = v61;
    v31 = v62;
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)&v60);
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v33 = v26;
    *(_QWORD *)(v33 + 8) = v28;
    *(_QWORD *)(v33 + 16) = v32;
    *(_QWORD *)(v33 + 24) = v31;
    v34 = 3;
LABEL_15:
    *(_BYTE *)(v33 + 32) = v34;
LABEL_16:
    swift_willThrow();
    swift_release();
    return swift_release();
  }
  if (*(_QWORD *)(Strong + 16) == *(_QWORD *)(v23 + 16))
  {
    REEntityGetName();
    v47 = String.init(cString:)();
    v49 = v48;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v50 = v47;
    *(_QWORD *)(v50 + 8) = v49;
    *(_QWORD *)(v50 + 16) = 0;
    *(_QWORD *)(v50 + 24) = 0;
    *(_BYTE *)(v50 + 32) = 0;
    goto LABEL_16;
  }
  v38 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  v39 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
  if (v38)
  {
    if (!v39)
    {
      swift_retain();
      REEntityGetName();
      v55 = String.init(cString:)();
      v57 = v56;
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(_QWORD *)v58 = v55;
      *(_QWORD *)(v58 + 8) = v57;
      *(_OWORD *)(v58 + 16) = xmmword_21BE5B440;
      *(_BYTE *)(v58 + 32) = 2;
      swift_willThrow();
      swift_release();
      goto LABEL_28;
    }
    if (*(_QWORD *)(v38 + 16) != *(_QWORD *)(v39 + 16))
    {
      swift_retain();
      REEntityGetName();
      v40 = String.init(cString:)();
      v42 = v41;
      REEntityGetName();
      v43 = String.init(cString:)();
      v45 = v44;
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(_QWORD *)v46 = v40;
      *(_QWORD *)(v46 + 8) = v42;
      *(_QWORD *)(v46 + 16) = v43;
      *(_QWORD *)(v46 + 24) = v45;
      *(_BYTE *)(v46 + 32) = 2;
      swift_willThrow();
      swift_release();
      swift_release();
LABEL_28:
      swift_release();
      return swift_release_n();
    }
  }
  else if (v39)
  {
    REEntityGetName();
    v51 = String.init(cString:)();
    v53 = v52;
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)v54 = xmmword_21BE5B440;
    *(_QWORD *)(v54 + 16) = v51;
    *(_QWORD *)(v54 + 24) = v53;
    *(_BYTE *)(v54 + 32) = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    return swift_release();
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhysicsJoint);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsFixedJoint((uint64_t)&v60);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v68);
LABEL_31:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v67);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
LABEL_32:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v66);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
LABEL_33:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v65);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
LABEL_34:
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v64);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v64);
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v68);
  outlined init with take of BindableDataInternal(v68, (uint64_t)v67);
  if (swift_dynamicCast())
  {
    outlined destroy of PhysicsSphericalJoint((uint64_t)&v60);
    goto LABEL_31;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v67);
  outlined init with take of BindableDataInternal(v67, (uint64_t)v66);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined destroy of PhysicsRevoluteJoint((uint64_t)&v60);
    goto LABEL_32;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v66);
  outlined init with take of BindableDataInternal(v66, (uint64_t)v65);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined destroy of PhysicsPrismaticJoint((uint64_t)&v60);
    goto LABEL_33;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v65);
  outlined init with take of BindableDataInternal(v65, (uint64_t)v64);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined destroy of PhysicsDistanceJoint((uint64_t)&v60);
    goto LABEL_34;
  }
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v64);
  outlined init with take of BindableDataInternal(v64, (uint64_t)v63);
  if ((swift_dynamicCast() & 1) == 0)
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_QWORD *)v59 = 1;
    *(_QWORD *)(v59 + 8) = 0;
    *(_QWORD *)(v59 + 16) = 0;
    *(_QWORD *)(v59 + 24) = 0;
    *(_BYTE *)(v59 + 32) = 4;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of PhysicsCustomJoint((uint64_t)&v60);
}

uint64_t specialized static PhysicsJointCreator.addToSimulation(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v8;
  _QWORD v9[10];

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 16))(v9, v3, v4);
  Strong = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)v9);
  if (Strong)
  {
    v3 = specialized static PhysicsJointCreator.findNearestOrAddPhysicsJointsComponent(for:)(Strong);
    specialized static PhysicsJointCreator.verifyData(_:)(a1);
    if (!v1)
    {
      specialized static PhysicsJointCreator.createCoreJointDefinition(fromDefinition:jointsComponentEntity:)(a1);
      REPhysicsJointsComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REPhysicsJointsComponentAddPhysicsJointDefinition();
        RERelease();
        swift_release();
        return v3;
      }
      lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
      swift_allocError();
      *(_OWORD *)v8 = 0u;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_BYTE *)(v8 + 32) = 4;
      swift_willThrow();
    }
    swift_release();
    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type PhysicsJointError and conformance PhysicsJointError();
    swift_allocError();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
    *(_BYTE *)(v6 + 32) = 4;
    swift_willThrow();
  }
  return v3;
}

uint64_t outlined init with take of REPoseF?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for REPoseF?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of PhysicsJointError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 - 2 > 1)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for PhysicsJointError(uint64_t a1)
{
  return outlined consume of PhysicsJointError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of PhysicsJointError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 - 2 > 1)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PhysicsJointError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of PhysicsJointError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of PhysicsJointError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PhysicsJointError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of PhysicsJointError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PhysicsJointError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PhysicsJointError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PhysicsJointError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 3u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t destructiveInjectEnumTag for PhysicsJointError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 4;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PhysicsJointError()
{
  return &type metadata for PhysicsJointError;
}

float EnvironmentLightingConfigurationComponent.environmentLightingWeight.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void EnvironmentLightingConfigurationComponent.environmentLightingWeight.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*EnvironmentLightingConfigurationComponent.environmentLightingWeight.modify())()
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::EnvironmentLightingConfigurationComponent __swiftcall EnvironmentLightingConfigurationComponent.init(environmentLightingWeight:)(RealityFoundation::EnvironmentLightingConfigurationComponent environmentLightingWeight)
{
  RealityFoundation::EnvironmentLightingConfigurationComponent *v1;

  v1->environmentLightingWeight = environmentLightingWeight.environmentLightingWeight;
  return environmentLightingWeight;
}

BOOL static EnvironmentLightingConfigurationComponent.== infix(_:_:)(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t static EnvironmentLightingConfigurationComponent.__fromCore(_:)@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight();
  *a1 = v3;
  return result;
}

uint64_t EnvironmentLightingConfigurationComponent.__toCore(_:)()
{
  REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight();
  return RENetworkMarkComponentDirty();
}

void static EnvironmentLightingConfigurationComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5003;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance EnvironmentLightingConfigurationComponent@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;
  int v3;

  result = REEnvironmentLightingConfigurationComponentGetEnvironmentLightingWeight();
  *a1 = v3;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance EnvironmentLightingConfigurationComponent()
{
  REEnvironmentLightingConfigurationComponentSetEnvironmentLightingWeight();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance EnvironmentLightingConfigurationComponent(_DWORD *a1@<X8>)
{
  *a1 = 5003;
}

ValueMetadata *type metadata accessor for EnvironmentLightingConfigurationComponent()
{
  return &type metadata for EnvironmentLightingConfigurationComponent;
}

void one-time initialization function for playingControllers()
{
  static AudioPlaybackController.playingControllers = MEMORY[0x24BEE4B00];
}

uint64_t AudioPlaybackController.entity.getter()
{
  swift_beginAccess();
  return swift_weakLoadStrong();
}

uint64_t AudioPlaybackController.resource.getter()
{
  return swift_retain();
}

uint64_t AudioPlaybackController.deinit()
{
  uint64_t v0;

  MEMORY[0x22076B93C](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
  RENetworkMarkComponentDirty();
  swift_release();
  swift_weakDestroy();
  swift_release();
  return v0;
}

uint64_t AudioPlaybackController.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22076B93C](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
  RENetworkMarkComponentDirty();
  swift_release();
  swift_weakDestroy();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t key path getter for AudioPlaybackController.completionHandler : AudioPlaybackController@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 120);
  if (v4)
  {
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v4;
    *(_QWORD *)(v6 + 24) = v5;
    v7 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
}

uint64_t key path setter for AudioPlaybackController.completionHandler : AudioPlaybackController(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = _sIg_Ieg_TRTA_0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v8 = *(_QWORD *)(v7 + 112);
  *(_QWORD *)(v7 + 112) = v6;
  *(_QWORD *)(v7 + 120) = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v8);
}

uint64_t AudioPlaybackController.completionHandler.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 112);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v1);
  return v1;
}

uint64_t AudioPlaybackController.completionHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 + 112);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a2;
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v4);
}

uint64_t (*AudioPlaybackController.completionHandler.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  a1[2] = v3;
  v4 = *(_QWORD *)(v3 + 112);
  v5 = *(_QWORD *)(v3 + 120);
  *a1 = v4;
  a1[1] = v5;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
  return AudioPlaybackController.completionHandler.modify;
}

uint64_t AudioPlaybackController.completionHandler.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  v5 = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v2 + 112) = *a1;
  *(_QWORD *)(v2 + 120) = v3;
  if ((a2 & 1) != 0)
  {
    outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v4);
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v5);
    v6 = v4;
  }
  else
  {
    v6 = v5;
  }
  return outlined consume of (@escaping @callee_guaranteed () -> ())?(v6);
}

double AudioPlaybackController.speed.getter()
{
  uint64_t v0;

  return MEMORY[0x22076B888](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
}

uint64_t AudioPlaybackController.speed.setter(double a1)
{
  return AudioPlaybackController.speed.setter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E38], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20ED0], a1);
}

uint64_t (*AudioPlaybackController.speed.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22076B888]();
  return AudioPlaybackController.speed.modify;
}

uint64_t AudioPlaybackController.speed.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E38], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20ED0]);
}

double AudioPlaybackController.gain.getter()
{
  float v0;

  REAudioPlayerComponentGetDecibelGainForToken();
  return v0;
}

uint64_t AudioPlaybackController.gain.setter(double a1)
{
  return AudioPlaybackController.speed.setter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E28], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EA0], a1);
}

uint64_t (*AudioPlaybackController.gain.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;
  float v4;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  REAudioPlayerComponentGetDecibelGainForToken();
  *(double *)a1 = v4;
  return AudioPlaybackController.gain.modify;
}

uint64_t AudioPlaybackController.gain.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E28], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EA0]);
}

Swift::Void __swiftcall AudioPlaybackController.fade(to:duration:)(Swift::Double to, Swift::Double duration)
{
  REAudioPlayerComponentFadeTokenToGainWithDuration();
  RENetworkMarkComponentDirty();
}

double AudioPlaybackController.reverbSendLevel.getter()
{
  uint64_t v0;

  return MEMORY[0x22076B894](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
}

uint64_t AudioPlaybackController.reverbSendLevel.setter(double a1)
{
  return AudioPlaybackController.speed.setter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E48], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EE0], a1);
}

uint64_t (*AudioPlaybackController.reverbSendLevel.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22076B894]();
  return AudioPlaybackController.reverbSendLevel.modify;
}

uint64_t AudioPlaybackController.reverbSendLevel.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E48], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EE0]);
}

double AudioPlaybackController.directSendLevel.getter()
{
  uint64_t v0;

  return MEMORY[0x22076B87C](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
}

uint64_t key path setter for AudioPlaybackController.speed : AudioPlaybackController(double *a1, uint64_t *a2, uint64_t a3, uint64_t a4, float (*a5)(uint64_t, _QWORD), uint64_t (*a6)(uint64_t, _QWORD, float))
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  uint64_t result;

  v7 = *a1;
  v8 = *a2;
  v9 = *(_QWORD *)(*a2 + 32);
  v10 = a5(v9, *(_QWORD *)(*a2 + 48));
  v11 = v7;
  result = a6(v9, *(_QWORD *)(v8 + 48), v11);
  if (v7 != v10)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t AudioPlaybackController.directSendLevel.setter(double a1)
{
  return AudioPlaybackController.speed.setter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E30], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EB0], a1);
}

uint64_t AudioPlaybackController.speed.setter(float (*a1)(uint64_t, _QWORD), uint64_t (*a2)(uint64_t, _QWORD, float), double a3)
{
  uint64_t v3;
  uint64_t v6;
  double v7;
  float v8;
  uint64_t result;

  v6 = *(_QWORD *)(v3 + 32);
  v7 = a1(v6, *(_QWORD *)(v3 + 48));
  v8 = a3;
  result = a2(v6, *(_QWORD *)(v3 + 48), v8);
  if (v7 != a3)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t (*AudioPlaybackController.directSendLevel.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22076B87C]();
  return AudioPlaybackController.directSendLevel.modify;
}

uint64_t AudioPlaybackController.directSendLevel.modify(uint64_t a1, uint64_t a2)
{
  return AudioPlaybackController.speed.modify(a1, a2, (float (*)(uint64_t, _QWORD))MEMORY[0x24BE20E30], (uint64_t (*)(uint64_t, _QWORD, float))MEMORY[0x24BE20EB0]);
}

uint64_t AudioPlaybackController.speed.modify(uint64_t a1, uint64_t a2, float (*a3)(uint64_t, _QWORD), uint64_t (*a4)(uint64_t, _QWORD, float))
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  float v9;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(double *)a1;
  v8 = a3(v5, *(_QWORD *)(v6 + 48));
  v9 = v7;
  result = a4(v5, *(_QWORD *)(v6 + 48), v9);
  if (v7 != v8)
    return RENetworkMarkComponentDirty();
  return result;
}

uint64_t AudioPlaybackController.isPlaying.getter()
{
  uint64_t v0;

  return MEMORY[0x22076B8AC](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
}

Swift::Void __swiftcall AudioPlaybackController.play()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  void *v6;
  void *v7;
  uint64_t v8;

  v1 = v0;
  swift_beginAccess();
  if (!swift_weakLoadStrong() || (v2 = specialized HasHierarchy.parent.getter(), swift_release(), swift_release(), !v2))
  {
    static os_log_type_t.info.getter();
    type metadata accessor for OS_os_log();
    v6 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    v3 = *(_QWORD *)(v1 + 48);
    if (v3)
      goto LABEL_4;
LABEL_10:
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v7 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return;
  }
  v3 = *(_QWORD *)(v0 + 48);
  if (!v3)
    goto LABEL_10;
LABEL_4:
  type metadata accessor for AudioUnitResource();
  if (!swift_dynamicCastClass())
  {
    if (one-time initialization token for playingControllers != -1)
    {
      swift_once();
      v3 = *(_QWORD *)(v1 + 48);
    }
    v4 = *(_QWORD *)(v1 + 16);
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = static AudioPlaybackController.playingControllers;
    static AudioPlaybackController.playingControllers = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v3, isUniquelyReferenced_nonNull_native);
    static AudioPlaybackController.playingControllers = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  REAudioPlayerComponentPlayToken();
  RENetworkMarkComponentDirty();
}

Swift::Void __swiftcall AudioPlaybackController.pause()()
{
  AudioPlaybackController.pause()((void (*)(_QWORD, _QWORD))MEMORY[0x24BE20E68]);
}

Swift::Void __swiftcall AudioPlaybackController.stop()()
{
  AudioPlaybackController.pause()((void (*)(_QWORD, _QWORD))MEMORY[0x24BE20EF8]);
}

uint64_t AudioPlaybackController.pause()(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48));
  return RENetworkMarkComponentDirty();
}

void AudioPlaybackController.__playbackPosition.getter()
{
  JUMPOUT(0x22076B8D0);
}

uint64_t AudioPlaybackController.__playbackPosition.setter()
{
  uint64_t v0;

  MEMORY[0x22076B948](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48));
  return RENetworkMarkComponentDirty();
}

uint64_t (*AudioPlaybackController.__playbackPosition.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v1;
  *(_QWORD *)(a1 + 16) = v3;
  *(double *)a1 = MEMORY[0x22076B8D0]();
  return AudioPlaybackController.__playbackPosition.modify;
}

uint64_t AudioPlaybackController.__playbackPosition.modify(uint64_t a1)
{
  MEMORY[0x22076B948](*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), *(double *)a1);
  return RENetworkMarkComponentDirty();
}

uint64_t AudioPlaybackController.parentTimebase.getter()
{
  const void *v0;
  CFTypeID v1;

  v0 = (const void *)REAudioPlayerComponentCopySourceClockOrTimebase();
  v1 = CFGetTypeID(v0);
  if (v1 == CMTimebaseGetTypeID())
  {
    type metadata accessor for CMTimebaseRef(0);
    return swift_dynamicCastUnknownClassUnconditional();
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
}

uint64_t key path getter for AudioPlaybackController.parentTimebase : AudioPlaybackController@<X0>(uint64_t *a1@<X8>)
{
  const void *v2;
  CFTypeID v3;
  uint64_t result;

  v2 = (const void *)REAudioPlayerComponentCopySourceClockOrTimebase();
  v3 = CFGetTypeID(v2);
  if (v3 == CMTimebaseGetTypeID())
  {
    type metadata accessor for CMTimebaseRef(0);
    result = swift_dynamicCastUnknownClassUnconditional();
  }
  else
  {
    swift_unknownObjectRelease();
    result = 0;
  }
  *a1 = result;
  return result;
}

void key path setter for AudioPlaybackController.parentTimebase : AudioPlaybackController(id *a1)
{
  id v1;

  if (*a1)
  {
    v1 = *a1;
    REAudioPlayerComponentSetSourceClockOrTimebase();
    RENetworkMarkComponentDirty();

  }
}

uint64_t AudioPlaybackController.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

void protocol witness for Identifiable.id.getter in conformance AudioPlaybackController(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 48);
}

uint64_t AudioPlaybackController.audioUnit.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 56))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<AUAudioUnit>);
    lazy protocol witness table accessor for type LoadRequest<AUAudioUnit> and conformance LoadRequest<A>();
    return Publisher.eraseToAnyPublisher()();
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL AudioPlaybackController.__audioUnitIsLoaded.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;
  void *v4;
  int v5;
  _BOOL8 result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    v3 = (os_unfair_lock_s *)(*(_QWORD *)(v2 + 16) + 16);
    swift_retain();
    os_unfair_lock_lock(v3);
    swift_beginAccess();
    v4 = *(void **)(v2 + 24);
    v5 = *(unsigned __int8 *)(v2 + 32);
    outlined copy of Result<AUAudioUnit, Error>?(v4, v5);
    os_unfair_lock_unlock(v3);
    swift_release();
    if (v5 != 255)
      outlined consume of Result<AUAudioUnit, Error>?(v4, v5);
    return v5 != 255;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AudioPlaybackController.seek(to:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;

  v1 = (double)Duration.components.getter();
  Duration.components.getter();
  MEMORY[0x22076B948](*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 48), (double)v2 * 1.0e-18 + v1);
  return RENetworkMarkComponentDirty();
}

_QWORD *AudioPlaybackController.Internal.createAudioPlaybackController()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;

  v1 = v0;
  Strong = swift_weakLoadStrong();
  if (!Strong)
    return 0;
  v3 = Strong;
  v4 = *(_QWORD *)(v0 + 32);
  type metadata accessor for AudioPlaybackController();
  v5 = (_QWORD *)swift_allocObject();
  swift_weakInit();
  v5[5] = v4;
  v5[6] = 0;
  swift_beginAccess();
  swift_weakAssign();
  swift_retain_n();
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  v6 = REEntityGetOrAddComponentByClass();
  v5[4] = v6;
  RERetain();
  v7 = REAudioPlayerComponentPrepareAsset();
  v5[6] = v7;
  type metadata accessor for AudioPlaybackController.Internal();
  swift_allocObject();
  swift_retain();
  swift_retain();
  v8 = specialized AudioPlaybackController.Internal.init(component:entity:resource:token:)(v6, v3, v4, v7);
  swift_release();
  swift_release();
  v5[2] = v8;
  swift_weakAssign();
  RENetworkMarkComponentDirty();
  swift_release();
  swift_release();
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 48);
  REAudioPlayerComponentGetDecibelGainForToken();
  v12 = v11;
  v13 = v5[4];
  REAudioPlayerComponentGetDecibelGainForToken();
  v15 = v14;
  REAudioPlayerComponentSetDecibelGainForToken();
  if (v12 != v15)
    RENetworkMarkComponentDirty();
  v16 = MEMORY[0x22076B888](v9, v10);
  v17 = MEMORY[0x22076B888](v13, v5[6]);
  REAudioPlayerComponentSetPlaybackRateForToken();
  if (v16 != v17)
    RENetworkMarkComponentDirty();
  v18 = MEMORY[0x22076B894](v9, v10);
  v19 = MEMORY[0x22076B894](v13, v5[6]);
  REAudioPlayerComponentSetReverbSendLevelForToken();
  if (v18 != v19)
    RENetworkMarkComponentDirty();
  v20 = MEMORY[0x22076B87C](v9, v10);
  v21 = MEMORY[0x22076B87C](v13, v5[6]);
  REAudioPlayerComponentSetDirectSendLevelForToken();
  if (v20 != v21)
    RENetworkMarkComponentDirty();
  swift_release();
  return v5;
}

uint64_t closure #1 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    if (*(_QWORD *)(result + 48) == a2
      && a4 <= 5
      && ((1 << a4) & 0x2D) != 0
      && (REAudioPlayerComponentIsStreamPendingPlay() & 1) == 0)
    {
      if (one-time initialization token for playingControllers != -1)
        swift_once();
      swift_beginAccess();
      specialized Dictionary._Variant.removeValue(forKey:)(a2);
      swift_endAccess();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @unowned REAudioPlaybackState, @unowned REAudioPlaybackState) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v9(a2, a3, a4, a5);
  return swift_release();
}

void closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(void (*a1)(void **), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, void *, void *);
  void *v19;
  uint64_t (*v20)(uint64_t, uint64_t, void *, void *);
  _QWORD *v21;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  swift_retain();
  v7 = (id)REAudioPlayerComponentGetAudioUnitForToken();
  if (v7)
  {
    v8 = v7;
    swift_release();
    v16 = v8;
    LOBYTE(v17) = 0;
    v9 = v8;
    a1(&v16);

  }
  else
  {
    v10 = swift_allocObject();
    swift_weakInit();
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = v10;
    v11[3] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v11[4] = v6;
    v20 = partial apply for closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:);
    v21 = v11;
    v16 = (void *)MEMORY[0x24BDAC760];
    v17 = 1107296256;
    v18 = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @guaranteed AUAudioUnit?, @guaranteed Error?) -> ();
    v19 = &block_descriptor_33;
    v12 = _Block_copy(&v16);
    swift_release();
    v13 = REAudioPlayerComponentSetDidPrepareAudioUnitCallback();
    v15 = v14;
    _Block_release(v12);
    *(_QWORD *)(a3 + 88) = v13;
    *(_QWORD *)(a3 + 96) = v15;
    *(_BYTE *)(a3 + 104) = 0;
  }
}

uint64_t closure #1 in closure #2 in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(void *, uint64_t))
{
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v11 = result;
    if (*(_QWORD *)(result + 48) == a2)
    {
      v12 = (_QWORD *)(result + 88);
      if ((*(_BYTE *)(result + 104) & 1) == 0)
      {
        if (a4)
        {
          v13 = a4;
          a6(a4, 1);
          REAudioPlayerComponentRemoveCallback();

        }
        else
        {
          if (!a3)
          {
            result = _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          v14 = a3;
          a6(a3, 0);
          REAudioPlayerComponentRemoveCallback();

        }
        *v12 = 0;
        *(_QWORD *)(v11 + 96) = 0;
        *(_BYTE *)(v11 + 104) = 1;
      }
    }
    return swift_release();
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UInt64, @guaranteed AUAudioUnit?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  void (*v9)(uint64_t, uint64_t, void *, void *);
  id v10;
  id v11;

  v9 = *(void (**)(uint64_t, uint64_t, void *, void *))(a1 + 32);
  swift_retain();
  v11 = a4;
  v10 = a5;
  v9(a2, a3, a4, a5);
  swift_release();

}

uint64_t handler #1 (token:) in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;

  if (one-time initialization token for playingControllers != -1)
    swift_once();
  swift_beginAccess();
  v2 = static AudioPlaybackController.playingControllers;
  if (!*(_QWORD *)(static AudioPlaybackController.playingControllers + 16))
    return swift_endAccess();
  v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0)
    return swift_endAccess();
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  result = swift_endAccess();
  v7 = *(void (**)(uint64_t))(v5 + 112);
  if (v7)
  {
    v8 = swift_retain();
    v7(v8);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v7);
  }
  return result;
}

uint64_t removeFromSceneCallback #1 (token:) in AudioPlaybackController.Internal.init(component:entity:resource:token:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  unint64_t v4;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  if (one-time initialization token for playingControllers != -1)
    swift_once();
  swift_beginAccess();
  v2 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v3 & 1) != 0)
  {
    v4 = v2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v6 = static AudioPlaybackController.playingControllers;
    v8 = static AudioPlaybackController.playingControllers;
    static AudioPlaybackController.playingControllers = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v6 = v8;
    }
    specialized _NativeDictionary._delete(at:)(v4, v6);
    static AudioPlaybackController.playingControllers = v6;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t AudioPlaybackController.Internal.deinit()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
    REAudioPlayerComponentRemoveCallback();
  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
    REAudioPlayerComponentRemoveCallback();
  MEMORY[0x22076B828](*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 48));
  RENetworkMarkComponentDirty();
  RERelease();
  swift_weakDestroy();
  swift_release();
  swift_weakDestroy();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 112));
  return v0;
}

uint64_t AudioPlaybackController.Internal.__deallocating_deinit()
{
  AudioPlaybackController.Internal.deinit();
  return swift_deallocClassInstance();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= result && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        *(_QWORD *)(v16[7] + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= result && (a3 & 1) == 0)
    {
      result = (uint64_t)specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
    result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v17 & 1))
    {
      v10 = result;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, (uint64_t (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  unint64_t v22;
  char v23;
  uint64_t v24;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v23 & 1))
    {
      v14 = v22;
      v20 = *v4;
      if ((v18 & 1) != 0)
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 40))(v20[7] + *(_QWORD *)(v9 + 72) * v14, a1, v8);
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return swift_retain();
    }
  }
  type metadata accessor for Entity();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of __RKEntityAction.ActionStateObservation(a1, v16[7] + 16 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return outlined assign with take of __RKEntityAction.ActionStateObservation(a1, v16[7] + 16 * v10);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return outlined retain of CustomMaterial.CustomShaderParameters(a2);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return outlined retain of CustomMaterial.CustomShaderParameters(a2);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)();
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)();
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
      return swift_retain();
    }
  }
  type metadata accessor for __REAsset();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = v3;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = *(_QWORD *)(v8 + 24);
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = *(_QWORD *)(v16 + 56);
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = *(_QWORD *)(v20 + 56);
      result = swift_release();
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
}

