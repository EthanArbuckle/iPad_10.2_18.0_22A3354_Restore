uint64_t specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t result;

  v5 = v4;
  v10 = (char *)malloc(0x70uLL);
  *a1 = v10;
  *((_QWORD *)v10 + 11) = a3;
  *((_QWORD *)v10 + 12) = v5;
  *((_QWORD *)v10 + 10) = a2;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v10[73] = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v10 + 13) = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v5 + 56) + 80 * v13;
        v20 = *(_OWORD *)v19;
        v21 = *(unsigned __int8 *)(v19 + 16);
        v22 = *(_QWORD *)(v19 + 24);
        v23 = *(unsigned __int8 *)(v19 + 32);
        v24 = *(unsigned __int8 *)(v19 + 33);
        v25 = *(_QWORD *)(v19 + 40);
        v26 = *(_QWORD *)(v19 + 48);
        v27 = *(_OWORD *)(v19 + 56);
        v28 = *(_BYTE *)(v19 + 72);
        v29 = v24 == 0;
        v30 = 256;
        if (v29)
          v30 = 0;
        v31 = v30 | v23;
        goto LABEL_15;
      }
LABEL_14:
      v21 = 0;
      v22 = 0;
      v31 = 0;
      v25 = 0;
      v26 = 0;
      v28 = 0;
      v20 = 0uLL;
      v27 = 0uLL;
LABEL_15:
      *(_OWORD *)v10 = v20;
      *((_QWORD *)v10 + 2) = v21;
      *((_QWORD *)v10 + 3) = v22;
      *((_QWORD *)v10 + 4) = v31;
      *((_QWORD *)v10 + 5) = v25;
      *((_QWORD *)v10 + 6) = v26;
      result = (uint64_t)_NativeDictionary.subscript.modifyspecialized ;
      *(_OWORD *)(v10 + 56) = v27;
      v10[72] = v28;
      return result;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v33 & 1))
    {
      v13 = v32;
      *((_QWORD *)v10 + 13) = v32;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (__int128 **a1)
{
  __int128 *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 73), *((uint64_t **)*a1 + 12), *((_QWORD *)*a1 + 13), *((_QWORD *)*a1 + 10), *((_QWORD *)*a1 + 11));
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(__int128 *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[25];

  v8 = *((_QWORD *)a1 + 6);
  if (v8)
  {
    v9 = *((_QWORD *)a1 + 5);
    v10 = *((_DWORD *)a1 + 8);
    v11 = *((_QWORD *)a1 + 3);
    v12 = *((_DWORD *)a1 + 4);
    v13 = *((_BYTE *)a1 + 72) & 1;
    v18 = *a1;
    LOBYTE(v19) = v12 & 1;
    *((_QWORD *)&v19 + 1) = v11;
    LOWORD(v20) = v10 & 0x101;
    *((_QWORD *)&v20 + 1) = v9;
    *(_QWORD *)v21 = v8;
    *(_OWORD *)&v21[8] = *(__int128 *)((char *)a1 + 56);
    v21[24] = v13;
    if ((a2 & 1) != 0)
    {
      v14 = (_OWORD *)(*(_QWORD *)(*a3 + 56) + 80 * a4);
      v15 = *(_OWORD *)v21;
      v14[2] = v20;
      v14[3] = v15;
      *(_OWORD *)((char *)v14 + 57) = *(_OWORD *)&v21[9];
      v16 = v19;
      *v14 = v18;
      v14[1] = v16;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, &v18, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

double SPRect3D.init(_:)@<D0>(uint64_t a1@<X8>)
{
  float32x2_t v2;
  float v3;
  float v4;
  float32x2_t v5;
  double result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  SPSize3D v16;
  SPPoint3D v17;

  REAABBCenter();
  v11 = (__n128)vcvtq_f64_f32(v2);
  v12 = COERCE_UNSIGNED_INT64(v3);
  SPSize3DMakeWithVector(&v11, (__n128 *)&v17);
  REAABBExtents();
  v11 = (__n128)vcvtq_f64_f32(v5);
  v12 = COERCE_UNSIGNED_INT64(v4);
  SPSize3DMakeWithVector(&v11, (__n128 *)&v16);
  SPRect3DMakeAtCenter(&v17, &v16, (uint64_t)&v11);
  result = v11.n128_f64[0];
  v7 = v12;
  v8 = v13;
  v9 = v14;
  v10 = v15;
  *(__n128 *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 32) = v8;
  return result;
}

float64x2_t SPRect3DMakeAtCenter@<Q0>(SPPoint3D *a1@<X0>, SPSize3D *a2@<X1>, uint64_t a3@<X8>)
{
  float64x2_t v3;
  __int128 v4;
  uint64_t v10;
  float64x2_t result;

  v4 = *(_OWORD *)&a2->width;
  v3 = *(float64x2_t *)&a2->vector.f64[2];
  __asm { FMOV            V4.2D, #-0.5 }
  v10 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->vector.f64[2], vmulq_f64(v3, _Q4));
  result = vaddq_f64(*(float64x2_t *)&a1->x, vmulq_f64(*(float64x2_t *)&a2->width, _Q4));
  *(float64x2_t *)a3 = result;
  *(_QWORD *)(a3 + 16) = v10;
  *(_OWORD *)(a3 + 32) = v4;
  *(float64_t *)(a3 + 48) = v3.f64[0];
  return result;
}

__n128 BoundingBox.init(_:)(double *a1)
{
  double v1;
  double v2;
  double z;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __int128 v9;
  unsigned int v10;
  __int128 v12;
  float64x2_t v13;
  double v14;
  SPRect3D v15;

  v1 = *a1;
  v2 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v15.origin.z = a1[2];
  z = v15.origin.z;
  v15.origin.vector.f64[3] = v4;
  v15.origin.x = v1;
  v15.origin.y = v2;
  v15.size.depth = v7;
  v15.size.vector.f64[3] = v8;
  v15.size.width = v5;
  v15.size.height = v6;
  SPRect3DGetMinimum(&v15, (uint64_t)&v13);
  *(float32x2_t *)&v9 = vcvt_f32_f64(v13);
  *(float *)&v10 = v14;
  *((_QWORD *)&v9 + 1) = v10;
  v12 = v9;
  v15.origin.z = z;
  v15.origin.vector.f64[3] = v4;
  v15.origin.x = v1;
  v15.origin.y = v2;
  v15.size.depth = v7;
  v15.size.vector.f64[3] = v8;
  v15.size.width = v5;
  v15.size.height = v6;
  SPRect3DGetMaximum(&v15, (uint64_t)&v13);
  return (__n128)v12;
}

float64x2_t SPRect3DGetMinimum@<Q0>(SPRect3D *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float64x2_t result;

  v2 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->origin.vector.f64[2], vminnmq_f64((float64x2_t)*(unint64_t *)&a1->size.depth, (float64x2_t)0));
  result = vaddq_f64(*(float64x2_t *)&a1->origin.x, vminnmq_f64(*(float64x2_t *)&a1->size.width, (float64x2_t)0));
  *(float64x2_t *)a2 = result;
  *(_QWORD *)(a2 + 16) = v2;
  return result;
}

float64x2_t SPRect3DGetMaximum@<Q0>(SPRect3D *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float64x2_t result;

  v2 = *(_OWORD *)&vaddq_f64(*(float64x2_t *)&a1->origin.vector.f64[2], vmaxnmq_f64((float64x2_t)*(unint64_t *)&a1->size.depth, (float64x2_t)0));
  result = vaddq_f64(*(float64x2_t *)&a1->origin.x, vmaxnmq_f64(*(float64x2_t *)&a1->size.width, (float64x2_t)0));
  *(float64x2_t *)a2 = result;
  *(_QWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t VFXParameterType.isMatching(type:)()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t result;

  v1 = *v0;
  if (swift_dynamicCastMetatype())
  {
    return v1 == 0;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 1;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 2;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 3;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 4;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 5;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 6;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 7;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 8;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 9;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 10;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 11;
  }
  else if (swift_dynamicCastMetatype())
  {
    return v1 == 12;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCastMetatype())
    {
      return v1 == 13;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      if (swift_dynamicCastMetatype())
      {
        return v1 == 14;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        if (swift_dynamicCastMetatype())
        {
          return v1 == 15;
        }
        else
        {
          type metadata accessor for simd_float3x3(0);
          if (swift_dynamicCastMetatype())
          {
            return v1 == 16;
          }
          else
          {
            type metadata accessor for simd_float4x4(0);
            if (swift_dynamicCastMetatype())
            {
              return v1 == 17;
            }
            else
            {
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Double>);
              if (swift_dynamicCastMetatype())
              {
                return v1 == 18;
              }
              else
              {
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Double>);
                if (swift_dynamicCastMetatype())
                {
                  return v1 == 19;
                }
                else
                {
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD4<Double>);
                  if (swift_dynamicCastMetatype())
                  {
                    return v1 == 20;
                  }
                  else
                  {
                    type metadata accessor for simd_double3x3(0);
                    if (swift_dynamicCastMetatype())
                    {
                      return v1 == 21;
                    }
                    else
                    {
                      type metadata accessor for simd_double4x4(0);
                      if (swift_dynamicCastMetatype())
                      {
                        return v1 == 22;
                      }
                      else
                      {
                        type metadata accessor for OS_os_log(0, &lazy cache variable for type metadata for CAKeyframeAnimation);
                        result = swift_dynamicCastMetatype();
                        if (!result)
                          return result;
                        return (v1 & 0xFE) == 24;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t VFXParameterType.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  __int128 *v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  result = v9;
  if (v2)
  {
    v4 = (__int128 *)(a1 + 32);
    v5 = *(_QWORD *)(v9 + 16);
    do
    {
      v6 = *v4;
      v10 = result;
      v7 = *(_QWORD *)(result + 24);
      if (v5 >= v7 >> 1)
      {
        v8 = *v4;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v5 + 1, 1);
        v6 = v8;
        result = v10;
      }
      *(_QWORD *)(result + 16) = v5 + 1;
      *(_OWORD *)(result + 16 * v5 + 32) = v6;
      ++v4;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v12;
  if (v2)
  {
    for (i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v11);
      if (!swift_dynamicCast())
        break;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v12;
      }
      v6 = *(_QWORD *)(v3 + 16);
      v5 = *(_QWORD *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        v3 = v12;
      }
      *(_QWORD *)(v3 + 16) = v6 + 1;
      v7 = v3 + 16 * v6;
      *(_QWORD *)(v7 + 32) = v9;
      *(_QWORD *)(v7 + 40) = v10;
      if (!--v2)
        return v3;
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

RealityFoundation::VFXParameterSemantic_optional __swiftcall VFXParameterSemantic.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 12;
  if ((unint64_t)rawValue < 0xC)
    v2 = rawValue;
  *v1 = v2;
  return (RealityFoundation::VFXParameterSemantic_optional)rawValue;
}

RealityFoundation::VFXParameterSemantic_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXParameterSemantic(Swift::Int *a1)
{
  return VFXParameterSemantic.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXParameterSemantic()
{
  lazy protocol witness table accessor for type VFXParameterSemantic and conformance VFXParameterSemantic();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXParameterSemantic()
{
  lazy protocol witness table accessor for type VFXParameterSemantic and conformance VFXParameterSemantic();
  return RawRepresentable<>.encode(to:)();
}

RealityFoundation::VFXParameterType_optional __swiftcall VFXParameterType.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 0;
  v3 = 8;
  switch(rawValue)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v2 = 1;
      goto LABEL_10;
    case 2:
      v2 = 2;
      goto LABEL_10;
    case 3:
      v2 = 3;
      goto LABEL_10;
    case 4:
      v2 = 4;
      goto LABEL_10;
    case 5:
      v2 = 5;
      goto LABEL_10;
    case 6:
      v2 = 6;
      goto LABEL_10;
    case 7:
      v2 = 7;
LABEL_10:
      v3 = v2;
      goto LABEL_11;
    case 8:
LABEL_11:
      *v1 = v3;
      break;
    case 9:
      *v1 = 9;
      break;
    case 10:
      *v1 = 10;
      break;
    case 11:
      *v1 = 11;
      break;
    case 12:
      *v1 = 12;
      break;
    case 13:
      *v1 = 13;
      break;
    case 14:
      *v1 = 14;
      break;
    case 15:
      *v1 = 15;
      break;
    case 16:
      *v1 = 16;
      break;
    case 17:
      *v1 = 17;
      break;
    case 18:
      *v1 = 18;
      break;
    case 19:
      *v1 = 19;
      break;
    case 20:
      *v1 = 20;
      break;
    case 21:
      *v1 = 21;
      break;
    case 22:
      *v1 = 22;
      break;
    case 23:
      *v1 = 23;
      break;
    case 24:
      *v1 = 24;
      break;
    case 25:
      *v1 = 25;
      break;
    default:
      *v1 = 26;
      break;
  }
  return (RealityFoundation::VFXParameterType_optional)rawValue;
}

RealityFoundation::VFXParameterType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance VFXParameterType(Swift::Int *a1)
{
  return VFXParameterType.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance VFXParameterType()
{
  lazy protocol witness table accessor for type VFXParameterType and conformance VFXParameterType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance VFXParameterType()
{
  lazy protocol witness table accessor for type VFXParameterType and conformance VFXParameterType();
  return RawRepresentable<>.encode(to:)();
}

unint64_t VFXResource.LoadError.errorDescription.getter()
{
  __int128 *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  unint64_t v11;
  _QWORD v12[4];
  char v13;

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v12);
  v1 = v12[0];
  v2 = (void *)v12[1];
  if ((v13 & 1) != 0)
  {
    v3 = v12[2];
    v4 = v12[3];
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000019;
    v5._countAndFlagsBits = v1;
    v5._object = v2;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 2112034;
    v6._object = (void *)0xE300000000000000;
    String.append(_:)(v6);
    v7 = v3;
    v8 = v4;
  }
  else
  {
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease();
    v11 = 0xD000000000000023;
    v9._countAndFlagsBits = v1;
    v9._object = v2;
    String.append(_:)(v9);
    v7 = 0x6E7562206E692022;
    v8 = 0xEB00000000656C64;
  }
  String.append(_:)(*(Swift::String *)&v7);
  return v11;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance VFXResource.LoadError()
{
  __int128 *v0;
  _BYTE v2[40];

  outlined init with take of __MaterialResource.LoadError(v0, (uint64_t)v2);
  return VFXResource.LoadError.errorDescription.getter();
}

id static VFXResource.systemNames.getter()
{
  id result;
  void *v1;
  uint64_t v2;

  result = (id)REVFXAssetEnumerateBuiltInAssets();
  if (result)
  {
    v1 = result;
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *static VFXResource.load(systemName:)(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD v22[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v22 - v13;
  v15 = (void *)MEMORY[0x220768C3C](a1, a2, v12);
  v16 = (id)REVFXGetLibraryURLForSystemName();

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_7;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_7:
    outlined destroy of URL?((uint64_t)v6);
    v20 = (id)REVFXAssetGetBuiltInEffectsBundle();
    a2 = specialized static VFXResource.load(named:in:)(a1, (uint64_t)a2, v20);

    return a2;
  }
  v17(v14, v6, v7);
  v18 = v22[1];
  v19 = specialized static VFXResource.load(contentsOf:withName:)();
  if (!v18)
    a2 = (char *)v19;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static VFXResource.load(contentsOf:withName:)()
{
  return specialized static VFXResource.load(contentsOf:withName:)();
}

char *static VFXResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized static VFXResource.load(named:in:)(a1, a2, a3);
}

uint64_t static VFXResource.loadAsync(systemName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  id v19;
  uint64_t v21;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v21 - v13;
  v15 = (void *)MEMORY[0x220768C3C](a1, a2, v12);
  v16 = (id)REVFXGetLibraryURLForSystemName();

  if (!v16)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_5;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v17(v6, v10, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_5:
    outlined destroy of URL?((uint64_t)v6);
    v19 = (id)REVFXAssetGetBuiltInEffectsBundle();
    v18 = specialized static VFXResource.loadAsync(named:in:)(a1, a2, v19);

    return v18;
  }
  v17(v14, v6, v7);
  v18 = specialized static VFXResource.loadAsync(contentsOf:withName:)(v14);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
  return v18;
}

void closure #1 in static VFXResource.loadAsync(named:in:)(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char);
  void *v14;
  void (*v15)(void *, void (*)(char));
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t (*v21)();
  void *v22;
  void (*v23)(char);
  uint64_t AssetRequest;
  void *Request;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t Strong;
  uint64_t v34;
  os_unfair_lock_s *v35;
  _QWORD *v36;
  _QWORD *v37;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  void (*v43)(uint64_t *);
  __int128 v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void *v46;
  uint64_t (*v47)();
  uint64_t v48;
  uint64_t aBlock;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void *v52;
  void (*v53)(char);
  _QWORD *v54;

  v11 = swift_allocObject();
  v43 = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(a3 + 120, (uint64_t)&aBlock);
  v14 = v52;
  v13 = v53;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v52);
  v15 = (void (*)(void *, void (*)(char)))*((_QWORD *)v13 + 4);
  swift_retain();
  v15(v14, v13);
  v16 = (void *)MEMORY[0x220768C3C](a5, a6);
  v17 = (void *)MEMORY[0x220768C3C](7890550, 0xE300000000000000);
  v18 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (v18)
  {
    v19 = a5;
    outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
    outlined init with copy of __REAssetService(v12, (uint64_t)&v44);
    v20 = v46;
    v21 = v47;
    __swift_project_boxed_opaque_existential_1(&v44, (uint64_t)v46);
    LOBYTE(v20) = (*((uint64_t (**)(void *, uint64_t (*)()))v21 + 7))(v20, v21);
    v22 = v52;
    v23 = v53;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v52);
    (*((void (**)(void *, void (*)(char)))v23 + 4))(v22, v23);
    AssetRequest = REAssetManagerCreateAssetRequest();
    Request = (void *)type metadata accessor for __AssetLoadRequest();
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = AssetRequest;
    if ((v20 & 1) != 0)
      REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    v27 = (_QWORD *)swift_allocObject();
    v27[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    v27[3] = v11;
    v27[4] = v18;
    v27[5] = v19;
    v27[6] = a6;
    v27[7] = v26;
    v53 = partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:);
    v54 = v27;
    v28 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v50 = 1107296256;
    v51 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v52 = &block_descriptor_62_0;
    v29 = _Block_copy(&aBlock);
    v30 = _Block_copy(v29);
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v30;
    v47 = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v48 = v31;
    *(_QWORD *)&v44 = v28;
    *((_QWORD *)&v44 + 1) = 1107296256;
    v45 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v46 = &block_descriptor_69;
    v32 = _Block_copy(&v44);
    swift_retain_n();
    swift_bridgeObjectRetain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v32);
    _Block_release(v29);
    swift_release();
    REAssetLoadRequestAddAsset();
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v34 = Strong;
      v52 = Request;
      aBlock = v26;
      v35 = (os_unfair_lock_s *)(*(_QWORD *)(Strong + 24) + 16);
      os_unfair_lock_lock(v35);
      outlined init with copy of Any((uint64_t)&aBlock, (uint64_t)&v44);
      v36 = (_QWORD *)(v34 + 16);
      swift_beginAccess();
      v37 = *(_QWORD **)(v34 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v34 + 16) = v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
        *v36 = v37;
      }
      v40 = v37[2];
      v39 = v37[3];
      if (v40 >= v39 >> 1)
      {
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v37);
        *v36 = v37;
      }
      v37[2] = v40 + 1;
      outlined init with take of Any(&v44, &v37[4 * v40 + 4]);
      swift_endAccess();
      os_unfair_lock_unlock(v35);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    }
    else
    {
      swift_release_n();
    }
    RERelease();
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    v41 = (void *)swift_allocError();
    *(_QWORD *)v42 = a5;
    *(_QWORD *)(v42 + 8) = a6;
    *(_QWORD *)(v42 + 16) = 0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_BYTE *)(v42 + 32) = 0;
    aBlock = (uint64_t)v41;
    LOBYTE(v50) = 1;
    swift_bridgeObjectRetain();
    v43(&aBlock);

  }
}

void specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  void *FailedMessage;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[6];
  _QWORD aBlock[6];

  if ((a1 & 1) != 0)
  {
    type metadata accessor for VFXResource();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v8, 0);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v14 = v13;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    v15 = (void *)swift_allocError();
    *(_QWORD *)v16 = a5;
    *(_QWORD *)(v16 + 8) = a6;
    *(_QWORD *)(v16 + 16) = v12;
    *(_QWORD *)(v16 + 24) = v14;
    *(_BYTE *)(v16 + 32) = 1;
    a2((uint64_t)v15, 1);

  }
  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  v17 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_72_1;
  v18 = _Block_copy(aBlock);
  v19 = _Block_copy(v18);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v22[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v22[5] = v20;
  v22[0] = v17;
  v22[1] = 1107296256;
  v22[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v22[3] = &block_descriptor_79;
  v21 = _Block_copy(v22);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v21);
  _Block_release(v18);
}

void closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char);
  void *v14;
  void (*v15)(void *, void (*)(char));
  Swift::String v16;
  uint64_t AssetHandle;
  void *v18;
  uint64_t (**v19)(void *, uint64_t (*)(char));
  void *v20;
  void (*v21)(char);
  uint64_t AssetRequest;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t Strong;
  uint64_t v35;
  os_unfair_lock_s *v36;
  _QWORD *v37;
  _QWORD *v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void (*Request)(_QWORD);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  void *v53;
  uint64_t (*v54)(char);
  uint64_t v55;
  uint64_t aBlock;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  void *v59;
  void (*v60)(char);
  char *v61;

  v48 = a5;
  v50 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v50 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v50);
  v49 = (char *)&Request - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  Request = a1;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = a3 + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
  v14 = v59;
  v13 = v60;
  __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v59);
  v15 = (void (*)(void *, void (*)(char)))*((_QWORD *)v13 + 4);
  swift_retain();
  v15(v14, v13);
  *(_QWORD *)&v51 = 0x6170656372756F73;
  *((_QWORD *)&v51 + 1) = 0xEB000000003A6874;
  v16._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
  if (AssetHandle)
  {
    v48 += 16;
    outlined init with copy of __REAssetService(v12, (uint64_t)&aBlock);
    outlined init with copy of __REAssetService(v12, (uint64_t)&v51);
    v18 = v53;
    v19 = (uint64_t (**)(void *, uint64_t (*)(char)))v54;
    __swift_project_boxed_opaque_existential_1(&v51, (uint64_t)v53);
    LOBYTE(v19) = v19[7](v18, (uint64_t (*)(char))v19);
    v20 = v59;
    v21 = v60;
    __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v59);
    (*((void (**)(void *, void (*)(char)))v21 + 4))(v20, v21);
    AssetRequest = REAssetManagerCreateAssetRequest();
    Request = (void (*)(_QWORD))type metadata accessor for __AssetLoadRequest();
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = AssetRequest;
    if ((v19 & 1) != 0)
      REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
    v24 = v49;
    v25 = a4;
    v26 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v49, v25, v50);
    v27 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v28 = (char *)swift_allocObject();
    *((_QWORD *)v28 + 2) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
    *((_QWORD *)v28 + 3) = v11;
    *((_QWORD *)v28 + 4) = AssetHandle;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v28[v27], v24, v26);
    *(_QWORD *)&v28[(v10 + v27 + 7) & 0xFFFFFFFFFFFFFFF8] = v23;
    v60 = partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:);
    v61 = v28;
    v29 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v57 = 1107296256;
    v58 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v59 = &block_descriptor_28_0;
    v30 = _Block_copy(&aBlock);
    v31 = _Block_copy(v30);
    v32 = swift_allocObject();
    *(_QWORD *)(v32 + 16) = v31;
    v54 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
    v55 = v32;
    *(_QWORD *)&v51 = v29;
    *((_QWORD *)&v51 + 1) = 1107296256;
    v52 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v53 = &block_descriptor_34;
    v33 = _Block_copy(&v51);
    swift_retain_n();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v33);
    _Block_release(v30);
    swift_release();
    REAssetLoadRequestAddAsset();
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v35 = Strong;
      v59 = Request;
      aBlock = v23;
      v36 = (os_unfair_lock_s *)(*(_QWORD *)(Strong + 24) + 16);
      os_unfair_lock_lock(v36);
      outlined init with copy of Any((uint64_t)&aBlock, (uint64_t)&v51);
      v37 = (_QWORD *)(v35 + 16);
      swift_beginAccess();
      v38 = *(_QWORD **)(v35 + 16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v35 + 16) = v38;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
        *v37 = v38;
      }
      v41 = v38[2];
      v40 = v38[3];
      if (v41 >= v40 >> 1)
      {
        v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v40 > 1), v41 + 1, 1, v38);
        *v37 = v38;
      }
      v38[2] = v41 + 1;
      outlined init with take of Any(&v51, &v38[4 * v41 + 4]);
      swift_endAccess();
      os_unfair_lock_unlock(v36);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
    }
    else
    {
      swift_release_n();
    }
    RERelease();
  }
  else
  {
    swift_release();
    v42 = URL.path.getter();
    v44 = v43;
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    v45 = (void *)swift_allocError();
    *(_QWORD *)v46 = v42;
    *(_QWORD *)(v46 + 8) = v44;
    *(_QWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v46 + 24) = 0;
    *(_BYTE *)(v46 + 32) = 0;
    aBlock = (uint64_t)v45;
    LOBYTE(v57) = 1;
    Request(&aBlock);

  }
}

void specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *FailedMessage;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  _QWORD v21[6];
  _QWORD aBlock[6];

  if ((a1 & 1) != 0)
  {
    type metadata accessor for VFXResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v6, 0);
    swift_release();
  }
  else
  {
    v7 = URL.path.getter();
    v9 = v8;
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    v14 = (void *)swift_allocError();
    *(_QWORD *)v15 = v7;
    *(_QWORD *)(v15 + 8) = v9;
    *(_QWORD *)(v15 + 16) = v11;
    *(_QWORD *)(v15 + 24) = v13;
    *(_BYTE *)(v15 + 32) = 1;
    a2((uint64_t)v14, 1);

  }
  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  v16 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_37_0;
  v17 = _Block_copy(aBlock);
  v18 = _Block_copy(v17);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v18;
  v21[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v21[5] = v19;
  v21[0] = v16;
  v21[1] = 1107296256;
  v21[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v21[3] = &block_descriptor_44_0;
  v20 = _Block_copy(v21);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v20);
  _Block_release(v17);
}

uint64_t protocol witness for VFXParameter.bindingName.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void protocol witness for VFXParameter.semantic.getter in conformance VFXResource.VFXParameterImpl(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 49);
}

double protocol witness for VFXParameter.min.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

double protocol witness for VFXParameter.max.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v0;

  return *(double *)(v0 + 64);
}

uint64_t protocol witness for VFXParameter.userManual.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for VFXParameter.enumName.getter in conformance VFXResource.VFXParameterImpl()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for VFXParameter.enumCases.getter in conformance VFXResource.VFXParameterImpl()
{
  return swift_bridgeObjectRetain();
}

uint64_t VFXResource.version.getter()
{
  return REVFXAssetGetAssetVersion();
}

uint64_t VFXResource.parameters.getter()
{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  uint64_t v3;
  _QWORD v5[6];

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = MEMORY[0x24BEE4AF8];
  v1 = (uint64_t *)(v0 + 16);
  v5[4] = partial apply for closure #1 in VFXResource.parameters.getter;
  v5[5] = v0;
  v5[0] = MEMORY[0x24BDAC760];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ();
  v5[3] = &block_descriptor_26;
  v2 = _Block_copy(v5);
  swift_retain();
  swift_release();
  REVFXAssetEnumerateParameterInfosWithEnum();
  _Block_release(v2);
  swift_beginAccess();
  v3 = *v1;
  swift_bridgeObjectRetain();
  swift_release();
  return v3;
}

void closure #1 in VFXResource.parameters.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int rawValue, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v23;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  __int128 v39;
  ValueMetadata *v40;
  _UNKNOWN **v41;
  uint64_t v42;

  VFXParameterType.init(rawValue:)(rawValue);
  v23 = v39;
  if (v39 == 26 || a8 > 0xB)
  {
    v25 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = static OS_os_log.default.getter();
    if (os_log_type_enabled(log, v25))
    {
      v26 = swift_slowAlloc();
      v27 = swift_slowAlloc();
      *(_QWORD *)&v39 = v27;
      *(_DWORD *)v26 = 136315650;
      swift_bridgeObjectRetain();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain();
      v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, (uint64_t *)&v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 22) = 2048;
      v42 = rawValue;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, log, v25, "[VFX] Parameter %s.%s with unknown type %ld", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v27, -1, -1);
      MEMORY[0x220772F44](v26, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    v28 = (_QWORD *)(a16 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = specialized _arrayConditionalCast<A, B>(_:)(a15);
    swift_beginAccess();
    v29 = *(_QWORD **)(a16 + 16);
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v28 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
      *v28 = v29;
    }
    v32 = v29[2];
    v31 = v29[3];
    if (v32 >= v31 >> 1)
    {
      v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v29);
      *v28 = v29;
    }
    v40 = &type metadata for VFXResource.VFXParameterImpl;
    v41 = &protocol witness table for VFXResource.VFXParameterImpl;
    v33 = swift_allocObject();
    *(_QWORD *)&v39 = v33;
    *(_QWORD *)(v33 + 16) = a1;
    *(_QWORD *)(v33 + 24) = a2;
    *(_QWORD *)(v33 + 32) = a3;
    *(_QWORD *)(v33 + 40) = a4;
    *(_QWORD *)(v33 + 48) = a5;
    *(_QWORD *)(v33 + 56) = a6;
    *(_BYTE *)(v33 + 64) = v23;
    *(_BYTE *)(v33 + 65) = a8;
    *(double *)(v33 + 72) = a9;
    *(double *)(v33 + 80) = a10;
    *(_QWORD *)(v33 + 88) = a11;
    *(_QWORD *)(v33 + 96) = a12;
    *(_QWORD *)(v33 + 104) = a13;
    *(_QWORD *)(v33 + 112) = a14;
    *(_QWORD *)(v33 + 120) = v34;
    v29[2] = v32 + 1;
    outlined init with take of BindableDataInternal(&v39, (uint64_t)&v29[5 * v32 + 4]);
    swift_endAccess();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ()(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;
  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19 = v18;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v27(v26, v11, v25, v13, v14, v16, a7, a8, a2, a3, v17, v19, v20, v22, v23);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t VFXResource.parameter(named:owner:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v14[6];

  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_QWORD *)(v10 + 48) = 0;
  if (a4)
    a4 = (void *)MEMORY[0x220768C3C](a3, a4);
  v11 = (void *)MEMORY[0x220768C3C](a1, a2);
  v14[4] = partial apply for closure #1 in VFXResource.parameter(named:owner:);
  v14[5] = v10;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed String, @guaranteed String, @guaranteed String, @unowned Int, @unowned Int, @unowned Double, @unowned Double, @guaranteed String, @guaranteed String, @guaranteed [Any]) -> ();
  v14[3] = &block_descriptor_6_3;
  v12 = _Block_copy(v14);
  swift_retain();
  swift_release();
  REVFXAssetFindParameterInfoWithEnum();
  _Block_release(v12);

  swift_beginAccess();
  outlined init with copy of VFXParameter?(v10 + 16, a5);
  return swift_release();
}

void closure #1 in VFXResource.parameter(named:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int rawValue, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  char v23;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *log;
  uint64_t v34[6];

  VFXParameterType.init(rawValue:)(rawValue);
  v23 = v34[0];
  if (LOBYTE(v34[0]) == 26 || a8 > 0xB)
  {
    v25 = a3;
    v26 = static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log(0, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    log = static OS_os_log.default.getter();
    if (os_log_type_enabled(log, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      v34[0] = v28;
      *(_DWORD *)v27 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, a4, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, a6, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v27 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B9AA000, log, v26, "[VFX] Parameter %s.%s with unknown type %ld", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v28, -1, -1);
      MEMORY[0x220772F44](v27, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = specialized _arrayConditionalCast<A, B>(_:)(a15);
    v34[3] = (uint64_t)&type metadata for VFXResource.VFXParameterImpl;
    v34[4] = (uint64_t)&protocol witness table for VFXResource.VFXParameterImpl;
    v30 = swift_allocObject();
    v34[0] = v30;
    *(_QWORD *)(v30 + 16) = a1;
    *(_QWORD *)(v30 + 24) = a2;
    *(_QWORD *)(v30 + 32) = a3;
    *(_QWORD *)(v30 + 40) = a4;
    *(_QWORD *)(v30 + 48) = a5;
    *(_QWORD *)(v30 + 56) = a6;
    *(_BYTE *)(v30 + 64) = v23;
    *(_BYTE *)(v30 + 65) = a8;
    *(double *)(v30 + 72) = a9;
    *(double *)(v30 + 80) = a10;
    *(_QWORD *)(v30 + 88) = a11;
    *(_QWORD *)(v30 + 96) = a12;
    *(_QWORD *)(v30 + 104) = a13;
    *(_QWORD *)(v30 + 112) = a14;
    *(_QWORD *)(v30 + 120) = v29;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined assign with take of VFXParameter?((uint64_t)v34, a16 + 16);
  }
}

uint64_t VFXResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t VFXResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t specialized static VFXResource.load(contentsOf:withName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  Swift::String v4;
  uint64_t AssetHandle;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v11);
  v1 = v12;
  v2 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v3 = *(void (**)(uint64_t, uint64_t))(v2 + 32);
  swift_retain();
  v3(v1, v2);
  v4._countAndFlagsBits = URL.path.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    type metadata accessor for VFXResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
  }
  else
  {
    v7 = URL.path.getter();
    v6 = v8;
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(_QWORD *)v9 = v7;
    *(_QWORD *)(v9 + 8) = v6;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 32) = 0;
    swift_willThrow();
  }
  swift_release();
  return v6;
}

char *specialized static VFXResource.load(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  void *v28;
  void *v29;
  id v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void *v40;
  uint64_t v41;
  void *FailedMessage;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char *v50;
  char *v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  MEMORY[0x24BDAC7A8](v12);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v48 - v14;
  v55 = v3;
  v50 = v16;
  v51 = (char *)v17;
  v18 = a2;
  if (a3)
    v19 = a3;
  else
    v19 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v20 = a3;
  v21 = v19;
  v22 = objc_msgSend(v19, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = URL.pathExtension.getter();
  v25 = v24;
  v49 = *(void (**)(char *, uint64_t))(v11 + 8);
  v49(v15, v10);
  if (v23 == 0x617262696C786676 && v25 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
      goto LABEL_18;
  }
  v28 = (void *)MEMORY[0x220768C3C](a1, v18);
  v29 = (void *)MEMORY[0x220768C3C](7890550, 0xE300000000000000);
  v30 = objc_msgSend(v21, sel_URLForResource_withExtension_, v28, v29);

  if (v30)
  {
    v31 = v51;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v32(v9, v31, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) != 1)
    {
      v33 = v50;
      v32(v50, v9, v10);
      v34 = v55;
      v35 = specialized static VFXResource.load(contentsOf:withName:)();
      if (!v34)
        v31 = (char *)v35;
      v49(v33, v10);

      return v31;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  outlined destroy of URL?((uint64_t)v9);
LABEL_18:
  v36 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v36, (uint64_t)v52);
  v37 = v53;
  v38 = v54;
  __swift_project_boxed_opaque_existential_1(v52, v53);
  v39 = *(void (**)(uint64_t, uint64_t))(v38 + 32);
  swift_retain();
  v39(v37, v38);
  v31 = (char *)MEMORY[0x220768C3C](a1, v18);
  v40 = (void *)MEMORY[0x220768C3C](7890550, 0xE300000000000000);
  v41 = REAssetManagerAssetHandleCreateWithBundleResource();

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
  if (v41)
  {
    REAssetHandleLoadNow();
    if (!REAssetHandleLoadFailed())
    {
      type metadata accessor for VFXResource();
      v31 = (char *)swift_allocObject();
      *((_QWORD *)v31 + 2) = v41;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();

      swift_release();
      return v31;
    }
    swift_bridgeObjectRetain();
    FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
    v31 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(_QWORD *)v45 = a1;
    *(_QWORD *)(v45 + 8) = v18;
    *(_QWORD *)(v45 + 16) = v31;
    *(_QWORD *)(v45 + 24) = v44;
    *(_BYTE *)(v45 + 32) = 1;
    swift_willThrow();
    RERelease();
  }
  else
  {
    lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError();
    swift_allocError();
    *(_QWORD *)v46 = a1;
    *(_QWORD *)(v46 + 8) = v18;
    *(_QWORD *)(v46 + 16) = 0;
    *(_QWORD *)(v46 + 24) = 0;
    *(_BYTE *)(v46 + 32) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }

  swift_release();
  return v31;
}

uint64_t specialized static VFXResource.loadAsync(contentsOf:withName:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;

  v28 = a1;
  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (uint64_t *)((char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v10 = *(_QWORD *)(v9 + 24);
  swift_unownedRetainStrong();
  v11 = *(void **)(v10 + 32);
  swift_retain();
  v12 = v11;
  swift_release();
  *v8 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE5610], v5);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v12 & 1) != 0)
  {
    type metadata accessor for LoadRequestDependencies();
    v15 = swift_allocObject();
    v16 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v15 + 16) = MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v17 = swift_allocObject();
    *(_DWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v15 + 24) = v17;
    swift_beginAccess();
    *(_QWORD *)(v15 + 16) = v16;
    swift_bridgeObjectRelease();
    v18 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, id, uint64_t))(v2 + 16))((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v1);
    v19 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v28 = v13;
    v20 = (v3 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = v9;
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v21 + v19, v4, v1);
    *(_QWORD *)(v21 + v20) = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<VFXResource>);
    v22 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<VFXResource, Error>?>);
    v23 = swift_allocObject();
    v24 = swift_allocObject();
    *(_DWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v23 + 16) = v24;
    *(_QWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 32) = -1;
    *(_QWORD *)(v22 + 16) = v23;
    v25 = (_QWORD *)swift_allocObject();
    v25[2] = partial apply for closure #1 in static VFXResource.loadAsync(contentsOf:withName:);
    v25[3] = v21;
    v25[4] = v23;
    v25[5] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<VFXResource, Error>);
    swift_allocObject();
    swift_retain();
    swift_retain();
    v26 = Future.init(_:)();
    swift_release();

    *(_QWORD *)(v22 + 24) = v26;
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized static VFXResource.loadAsync(named:in:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  void *v28;
  void *v29;
  id v30;
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;

  v6 = type metadata accessor for DispatchPredicate();
  v57 = *(_QWORD *)(v6 - 8);
  v58 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (void (**)(char *, uint64_t))((char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v56 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v55 = (char *)&v54 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v54 - v18;
  if (a3)
    v20 = a3;
  else
    v20 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v21 = a3;
  v59 = v20;
  v22 = objc_msgSend(v20, sel_bundleURL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = URL.pathExtension.getter();
  v25 = v24;
  v54 = *(void (**)(char *, uint64_t))(v13 + 8);
  v54(v19, v12);
  if (v23 == 0x617262696C786676 && v25 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
      goto LABEL_16;
  }
  v28 = (void *)MEMORY[0x220768C3C](a1, a2);
  v29 = (void *)MEMORY[0x220768C3C](7890550, 0xE300000000000000);
  v30 = objc_msgSend(v59, sel_URLForResource_withExtension_, v28, v29);

  if (v30)
  {
    v31 = v56;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v32(v11, v31, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
    {
      v33 = v55;
      v32(v55, v11, v12);
      v34 = specialized static VFXResource.loadAsync(contentsOf:withName:)(v33);

      v54((char *)v33, v12);
      return v34;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  outlined destroy of URL?((uint64_t)v11);
LABEL_16:
  v35 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v36 = *(_QWORD *)(v35 + 24);
  swift_unownedRetainStrong();
  v37 = *(void **)(v36 + 32);
  swift_retain();
  v38 = v37;
  swift_release();
  *v8 = v38;
  v40 = v57;
  v39 = v58;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v57 + 104))(v8, *MEMORY[0x24BEE5610], v58);
  v41 = v38;
  LOBYTE(v36) = _dispatchPreconditionTest(_:)();
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v40 + 8))(v8, v39);
  if ((v36 & 1) != 0)
  {
    type metadata accessor for LoadRequestDependencies();
    v43 = swift_allocObject();
    v44 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)(v43 + 16) = MEMORY[0x24BEE4AF8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    v45 = swift_allocObject();
    *(_DWORD *)(v45 + 16) = 0;
    *(_QWORD *)(v43 + 24) = v45;
    swift_beginAccess();
    *(_QWORD *)(v43 + 16) = v44;
    swift_bridgeObjectRelease();
    v46 = swift_allocObject();
    swift_weakInit();
    v47 = (_QWORD *)swift_allocObject();
    v48 = v59;
    v47[2] = v35;
    v47[3] = v48;
    v47[4] = a1;
    v47[5] = a2;
    v47[6] = v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<VFXResource>);
    v34 = swift_allocObject();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<VFXResource, Error>?>);
    v49 = swift_allocObject();
    v50 = swift_allocObject();
    *(_DWORD *)(v50 + 16) = 0;
    *(_QWORD *)(v49 + 16) = v50;
    *(_QWORD *)(v49 + 24) = 0;
    *(_BYTE *)(v49 + 32) = -1;
    *(_QWORD *)(v34 + 16) = v49;
    v51 = (_QWORD *)swift_allocObject();
    v51[2] = partial apply for closure #1 in static VFXResource.loadAsync(named:in:);
    v51[3] = v47;
    v51[4] = v49;
    v51[5] = v43;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<VFXResource, Error>);
    swift_allocObject();
    swift_retain();
    v52 = v48;
    swift_bridgeObjectRetain();
    swift_retain();
    v53 = Future.init(_:)();

    swift_release();
    *(_QWORD *)(v34 + 24) = v53;
    return v34;
  }
  __break(1u);
  return result;
}

uint64_t sub_21BC68818()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in VFXResource.parameters.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int a7, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  closure #1 in VFXResource.parameters.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v15);
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t sub_21BC68880()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

void partial apply for closure #1 in VFXResource.parameter(named:owner:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, Swift::Int a7, unint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  closure #1 in VFXResource.parameter(named:owner:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, v15);
}

uint64_t outlined init with copy of VFXParameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXParameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type VFXParameterSemantic and conformance VFXParameterSemantic()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic;
  if (!lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXParameterSemantic, &type metadata for VFXParameterSemantic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic;
  if (!lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXParameterSemantic, &type metadata for VFXParameterSemantic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterSemantic and conformance VFXParameterSemantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VFXParameterType and conformance VFXParameterType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType;
  if (!lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXParameterType, &type metadata for VFXParameterType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType;
  if (!lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXParameterType, &type metadata for VFXParameterType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXParameterType and conformance VFXParameterType);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VFXParameterSemantic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21BC689FC + 4 * byte_21BE6A53F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21BC68A30 + 4 * byte_21BE6A53A[v4]))();
}

uint64_t sub_21BC68A30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC68A38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC68A40);
  return result;
}

uint64_t sub_21BC68A4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC68A54);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21BC68A58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC68A60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFXParameterSemantic()
{
  return &type metadata for VFXParameterSemantic;
}

uint64_t getEnumTagSinglePayload for VFXParameterType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXParameterType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_21BC68B58 + 4 * byte_21BE6A549[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_21BC68B8C + 4 * byte_21BE6A544[v4]))();
}

uint64_t sub_21BC68B8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC68B94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC68B9CLL);
  return result;
}

uint64_t sub_21BC68BA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC68BB0);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_21BC68BB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC68BBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VFXParameterType()
{
  return &type metadata for VFXParameterType;
}

uint64_t dispatch thunk of VFXParameter.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of VFXParameter.objectName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VFXParameter.bindingName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of VFXParameter.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of VFXParameter.semantic.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of VFXParameter.min.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of VFXParameter.max.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of VFXParameter.userManual.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of VFXParameter.enumName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of VFXParameter.enumCases.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t type metadata accessor for VFXResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for VFXResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of VFXResource.version.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of VFXResource.parameters.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of VFXResource.parameter(named:owner:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t sub_21BC68D0C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined assign with take of VFXParameter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for VFXParameter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BC68DA0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21BC68DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_21BC68EC8()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type VFXResource.LoadError and conformance VFXResource.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError;
  if (!lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for VFXResource.LoadError, &unk_24DFC13A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VFXResource.LoadError and conformance VFXResource.LoadError);
  }
  return result;
}

uint64_t sub_21BC68F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(char a1)
{
  uint64_t v1;

  type metadata accessor for URL();
  specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(contentsOf:withName:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_21BC69018()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_21BC6903C()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in static VFXResource.loadAsync(named:in:)(void (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;

  closure #1 in static VFXResource.loadAsync(named:in:)(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_21BC6908C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(char a1)
{
  uint64_t v1;

  specialized finishVFXResourceLoad #1 (_:) in closure #1 in static VFXResource.loadAsync(named:in:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t outlined copy of VFXResource.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for VFXResource.LoadError(uint64_t a1)
{
  return outlined consume of VFXResource.LoadError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t outlined consume of VFXResource.LoadError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of VFXResource.LoadError(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of VFXResource.LoadError(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of VFXResource.LoadError(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for VFXResource.LoadError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of VFXResource.LoadError(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXResource.LoadError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXResource.LoadError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t destructiveInjectEnumTag for VFXResource.LoadError(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

void *type metadata accessor for VFXResource.LoadError()
{
  return &unk_24DFC13A8;
}

uint64_t destroy for VFXResource.VFXParameterImpl()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v6;
  v7 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v7;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VFXResource.VFXParameterImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for VFXResource.VFXParameterImpl(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VFXResource.VFXParameterImpl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXResource.VFXParameterImpl()
{
  return &type metadata for VFXResource.VFXParameterImpl;
}

uint64_t StateMachineCommandParameter.init(name:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v8;

  *a6 = a1;
  a6[1] = a2;
  v8 = (char *)a6 + *(int *)(type metadata accessor for StateMachineCommandParameter(0, a4, a5, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(v8, a3, a4);
}

uint64_t type metadata accessor for StateMachineCommandParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateMachineCommandParameter);
}

uint64_t StateMachineCommandParameter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t StateMachineCommandParameter.id.getter()
{
  uint64_t v0;

  v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for StateMachineCommandParameterProtocol.name.getter in conformance StateMachineCommandParameter<A>()
{
  uint64_t v0;

  v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t protocol witness for Identifiable.id.getter in conformance StateMachineCommandParameter<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized StateMachineCommandParameter.id.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized StateMachineCommandParameter.id.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t dispatch thunk of StateMachineCommandParameterProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t type metadata completion function for StateMachineCommandParameter()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachineCommandParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = ((unint64_t)a1 + v6 + 16) & ~v6;
    v12 = ((unint64_t)a2 + v6 + 16) & ~v6;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v13(v11, v12, v4);
  }
  return a1;
}

uint64_t destroy for StateMachineCommandParameter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *initializeWithCopy for StateMachineCommandParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain();
  v10(v8, v9, v5);
  return a1;
}

_QWORD *assignWithCopy for StateMachineCommandParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for StateMachineCommandParameter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_QWORD *assignWithTake for StateMachineCommandParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineCommandParameter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 16) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21BC69BB4 + 4 * byte_21BE6A910[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for StateMachineCommandParameter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t SetEntityEnabledAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t SetEntityEnabledAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SetEntityEnabledAction.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

_BYTE *(*SetEntityEnabledAction.enabled.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 17);
  return SetEntityEnabledAction.enabled.modify;
}

_BYTE *SetEntityEnabledAction.enabled.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 17) = result[8];
  return result;
}

uint64_t SetEntityEnabledAction.isEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t SetEntityEnabledAction.isEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*SetEntityEnabledAction.isEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityEnabledAction.animatedValueType.getter()
{
  return 0;
}

__n128 SetEntityEnabledAction.init(targetEntity:isEnabled:)@<Q0>(__n128 *a1@<X0>, unsigned __int8 a2@<W1>, __n128 *a3@<X8>)
{
  unsigned __int8 v3;
  __n128 result;

  v3 = a1[1].n128_u8[0];
  result = *a1;
  *a3 = *a1;
  a3[1].n128_u8[0] = v3;
  a3[1].n128_u8[1] = a2;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SetEntityEnabledAction.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C62616E457369;
  else
    return 0x6E45746567726174;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SetEntityEnabledAction.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized SetEntityEnabledAction.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SetEntityEnabledAction.CodingKeys()
{
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SetEntityEnabledAction.CodingKeys()
{
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SetEntityEnabledAction.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  char v17;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SetEntityEnabledAction.CodingKeys>);
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  v8 = *((_BYTE *)v1 + 16);
  v16 = *((unsigned __int8 *)v1 + 17);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v7;
  v14 = v6;
  v15 = v8;
  v17 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v5, v3);
}

unint64_t lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction.CodingKeys, &unk_24DFC1748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction.CodingKeys, &unk_24DFC1748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction.CodingKeys, &unk_24DFC1748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityEnabledAction.CodingKeys, &unk_24DFC1748);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys);
  }
  return result;
}

uint64_t SetEntityEnabledAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  char v18;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SetEntityEnabledAction.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SetEntityEnabledAction.CodingKeys and conformance SetEntityEnabledAction.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v9 = v14;
  v10 = v15;
  LOBYTE(v14) = 1;
  v17 = v16;
  outlined copy of ActionEntityResolution();
  v11 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_BYTE *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 17) = v11 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined consume of ActionEntityResolution();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SetEntityEnabledAction@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SetEntityEnabledAction.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SetEntityEnabledAction(_QWORD *a1)
{
  return SetEntityEnabledAction.encode(to:)(a1);
}

uint64_t sub_21BC6A318@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 17);
  return result;
}

_BYTE *sub_21BC6A324(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 17) = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SetEntityEnabledAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t assignWithCopy for SetEntityEnabledAction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t assignWithTake for SetEntityEnabledAction(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  outlined consume of ActionEntityResolution();
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetEntityEnabledAction(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SetEntityEnabledAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SetEntityEnabledAction()
{
  return &type metadata for SetEntityEnabledAction;
}

uint64_t storeEnumTagSinglePayload for SetEntityEnabledAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC6A52C + 4 * byte_21BE6AA95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC6A560 + 4 * byte_21BE6AA90[v4]))();
}

uint64_t sub_21BC6A560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6A568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC6A570);
  return result;
}

uint64_t sub_21BC6A57C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC6A584);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC6A588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6A590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for SetEntityEnabledAction.CodingKeys()
{
  return &unk_24DFC1748;
}

uint64_t protocol witness for ActionHandlerProtocol.actionSkipped(event:) in conformance SetEntityEnabledActionHandler(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[13];
  uint64_t v9;

  v1 = *(_OWORD *)(a1 + 176);
  v8[10] = *(_OWORD *)(a1 + 160);
  v8[11] = v1;
  v8[12] = *(_OWORD *)(a1 + 192);
  v9 = *(_QWORD *)(a1 + 208);
  v2 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v2;
  v3 = *(_OWORD *)(a1 + 144);
  v8[8] = *(_OWORD *)(a1 + 128);
  v8[9] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)((uint64_t)v8);
}

uint64_t specialized SetEntityEnabledAction.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E45746567726174 && a2 == 0xEC00000079746974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t specialized SetEntityEnabledActionHandler.setEntityEnabled(event:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t SceneNullable;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(unsigned __int8 *)(a1 + 25);
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    _StringGuts.grow(_:)(62);
    v7._countAndFlagsBits = 0x2072656C646E6148;
    v7._object = (void *)0xEC00000020726F66;
    String.append(_:)(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SetEntityEnabledAction.Type);
    v8._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x800000021BE85620;
    v9._countAndFlagsBits = 0xD000000000000030;
    String.append(_:)(v9);
    specialized static AnimationLogger.logError(_:)(0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if ((v2 & 1) == 0)
  {
    v12 = v1;
    outlined copy of ActionEntityResolution();
    v11 = Entity.subscript.getter(&v12);
    outlined consume of ActionEntityResolution();
    if (!v11)
      return swift_release();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    v5 = SceneNullable;
    v6 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v6)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v5);
    }
    v11 = Scene.findEntity(named:)();
    swift_release();
    outlined consume of ActionEntityResolution();
    if (!v11)
      return swift_release();
LABEL_12:
    MEMORY[0x22076D154](*(_QWORD *)(v11 + 16), v3);
    RENetworkMarkEntityMetadataDirty();
    swift_release();
    return swift_release();
  }
  outlined consume of ActionEntityResolution();
  return swift_release();
}

ValueMetadata *type metadata accessor for SetEntityEnabledActionHandler()
{
  return &type metadata for SetEntityEnabledActionHandler;
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SetEntityEnabledActionHandler()
{
  return &protocol witness table for SetEntityEnabledAction;
}

uint64_t static InputTargetComponent.__coreComponentType.getter()
{
  uint64_t v0;
  uint64_t v2;
  _DWORD v3[6];
  uint64_t v4;

  type metadata accessor for REComponentType(0);
  v4 = v0;
  v3[0] = 4010;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)&v2);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t InputTargetComponent.isEnabled.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t InputTargetComponent.isEnabled.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*InputTargetComponent.isEnabled.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void InputTargetComponent.allowedInputTypes.getter(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 4);
}

_DWORD *InputTargetComponent.allowedInputTypes.setter(_DWORD *result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = *result;
  return result;
}

uint64_t (*InputTargetComponent.allowedInputTypes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t InputTargetComponent.InputType.init(rawValue:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static InputTargetComponent.InputType.direct.getter(_DWORD *a1@<X8>)
{
  *a1 = 1;
}

void static InputTargetComponent.InputType.indirect.getter(_DWORD *a1@<X8>)
{
  *a1 = 2;
}

void one-time initialization function for all()
{
  static InputTargetComponent.InputType.all = 3;
}

{
  static PhysicsSimulationComponent.CollisionOptions.all = 3;
}

uint64_t static InputTargetComponent.InputType.all.getter@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result;

  if (one-time initialization token for all != -1)
    result = swift_once();
  *a1 = static InputTargetComponent.InputType.all;
  return result;
}

uint64_t InputTargetComponent.InputType.rawValue.getter()
{
  unsigned int *v0;

  return *v0;
}

int *InputTargetComponent.init(allowedInputTypes:)@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *result;
  *(_BYTE *)a2 = 1;
  *(_DWORD *)(a2 + 4) = v2;
  return result;
}

uint64_t static InputTargetComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int AllowsDirectInput;
  uint64_t result;

  AllowsDirectInput = REInputTargetComponentGetAllowsDirectInput();
  if (REInputTargetComponentGetAllowsIndirectInput())
    AllowsDirectInput |= 2u;
  result = REInputTargetComponentIsEnabled();
  *(_BYTE *)a1 = result;
  *(_DWORD *)(a1 + 4) = AllowsDirectInput;
  return result;
}

uint64_t InputTargetComponent.__toCore(_:)()
{
  REInputTargetComponentSetEnabled();
  REInputTargetComponentSetAllowsDirectInput();
  REInputTargetComponentSetAllowsIndirectInput();
  return RENetworkMarkComponentDirty();
}

BOOL static InputTargetComponent.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance InputTargetComponent@<X0>(uint64_t a1@<X8>)
{
  int AllowsDirectInput;
  uint64_t result;

  AllowsDirectInput = REInputTargetComponentGetAllowsDirectInput();
  if (REInputTargetComponentGetAllowsIndirectInput())
    AllowsDirectInput |= 2u;
  result = REInputTargetComponentIsEnabled();
  *(_BYTE *)a1 = result;
  *(_DWORD *)(a1 + 4) = AllowsDirectInput;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance InputTargetComponent()
{
  REInputTargetComponentSetEnabled();
  REInputTargetComponentSetAllowsDirectInput();
  REInputTargetComponentSetAllowsIndirectInput();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__coreComponentType.getter in conformance InputTargetComponent()
{
  uint64_t v0;
  uint64_t v2;
  _DWORD v3[6];
  uint64_t v4;

  type metadata accessor for REComponentType(0);
  v4 = v0;
  v3[0] = 4010;
  outlined init with copy of Any((uint64_t)v3, (uint64_t)&v2);
  swift_dynamicCast();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance InputTargetComponent(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t InputTargetComponent.customMirror.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  int v16;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((_DWORD *)v0 + 1);
  v15 = *v0;
  v8 = v15;
  v16 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v10 + 32) = 0x656C62616E457369;
  *(_QWORD *)(v10 + 40) = 0xE900000000000064;
  v11 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v10 + 48) = v8;
  *(_QWORD *)(v10 + 72) = v11;
  *(_QWORD *)(v10 + 80) = 0xD000000000000011;
  *(_QWORD *)(v10 + 88) = 0x800000021BE8D0A0;
  *(_QWORD *)(v10 + 120) = &type metadata for InputTargetComponent.InputType;
  *(_DWORD *)(v10 + 96) = v9;
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t lazy protocol witness table accessor for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InputTargetComponent.InputType, &type metadata for InputTargetComponent.InputType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InputTargetComponent.InputType, &type metadata for InputTargetComponent.InputType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InputTargetComponent.InputType, &type metadata for InputTargetComponent.InputType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType;
  if (!lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for InputTargetComponent.InputType, &type metadata for InputTargetComponent.InputType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputTargetComponent.InputType and conformance InputTargetComponent.InputType);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InputTargetComponent(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[8])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InputTargetComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for InputTargetComponent()
{
  return &type metadata for InputTargetComponent;
}

ValueMetadata *type metadata accessor for InputTargetComponent.InputType()
{
  return &type metadata for InputTargetComponent.InputType;
}

uint64_t __RKEntityAnimateAction.perform(with:)()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = StaticString.description.getter();
  v4[1] = v0;
  v1._countAndFlagsBits = 8250;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v2, v4);
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Void __swiftcall __RKEntityAnimateAction.stopAnimations()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    if (*(_BYTE *)(v0 + 144) == 1)
    {
      swift_retain();
      RERenderOptionsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      if ((RERenderOptionsComponentGetVisibilityMode() || (REEntityGetSelfEnabled() & 1) == 0)
        && (REEntityGetSelfEnabled() & 1) != 0)
      {
        MEMORY[0x22076D154](*(_QWORD *)(v1 + 16), 0);
        RENetworkMarkEntityMetadataDirty();
      }
    }
    else
    {
      swift_retain();
    }
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (REAnimationComponentHasRunningAnimations())
      {
        if ((REAnimationComponentAllAnimationsCompleted() & 1) != 0
          || (swift_beginAccess(), *(_BYTE *)(v0 + 104) == 1) && *(_QWORD *)(v0 + 96) == 3)
        {
          REAnimationComponentStopAllAnimations();
          RENetworkMarkComponentDirty();
        }
      }
    }
    swift_release();
    *(_QWORD *)(v0 + 168) = 0;
    *(_BYTE *)(v0 + 176) = 1;
  }
}

uint64_t __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(double a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t Object;
  unsigned __int8 *v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  NSString *v22;
  Class v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  REAudioAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REAudioAnimationComponentSetMute();
    REAudioAnimationComponentSetLinearGain();
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
    return swift_release();
  v5 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v5 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_43;
    v7 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v8 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_42;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v10 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v11 = 1;
          else
            v11 = v10 == 0;
          if (v11)
          {
            result = swift_retain();
          }
          else
          {
            v12 = *v10;
            v13 = String.init(utf8String:)();
            if (v14)
              v15 = v13;
            else
              v15 = 0;
            if (v14)
              v16 = v14;
            else
              v16 = 0xE000000000000000;
            v10 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v12 == 42, v15, v16);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v10;
          }
          if (!v10)
            goto LABEL_44;
          swift_retain();
          v17 = String.init(utf8String:)();
          v19 = v18;
          swift_release();
          v20 = v19 ? v17 : 0;
          v21 = v19 ? v19 : 0xE000000000000000;
          v22 = (NSString *)MEMORY[0x220768C3C](v20, v21);
          swift_bridgeObjectRelease();
          v23 = NSClassFromString(v22);

          swift_release();
          if (v23)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v24 = swift_dynamicCastMetatype();
            if (v24)
            {
              v25 = (*(uint64_t (**)(void))(v24 + 232))();
              v26 = *(_QWORD *)(v25 + 16);
              swift_retain();
              MEMORY[0x22076D160](v26, 0);
              *(_QWORD *)(v25 + 16) = v7;
              MEMORY[0x22076D160](v7, v25);
              swift_release();
              goto LABEL_37;
            }
          }
        }
      }
      v8 = makeEntity(for:)(v7);
    }
    v25 = v8;
LABEL_37:
    result = REEntityGetChildCount();
    if (v5 >= result)
      goto LABEL_41;
    ++v5;
    __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(v25, a3 & 1, a1);
    swift_release();
    if (v5 >= REEntityGetChildCount())
      return swift_release();
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t DefaultAnimation;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Name;
  unint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  char v18;
  float v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  int8x16_t v39;
  char v40;
  _OWORD v41[9];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char v53;
  char v54;
  int8x16_t v55;
  char v56;
  _BYTE v57[40];
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  v4 = v3;
  DefaultAnimation = REAnimationLibraryComponentCreateDefaultAnimation();
  if (!DefaultAnimation)
    return 0;
  v8 = DefaultAnimation;
  type metadata accessor for AnimationResource();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v8;
  if (REAssetHandleAssetType() == 11)
    REAnimationSceneAssetGetRootTimeline();
  Name = REAnimationAssetGetName();
  if (Name)
    Name = String.init(cString:)();
  else
    v11 = 0xE000000000000000;
  v9[3] = Name;
  v9[4] = v11;
  RERetain();
  REAssetSetSwiftObject();
  AnimationResource.definition.getter(v58);
  v13 = *(double *)(v3 + 128);
  if (v13 == 0.0)
  {
    v14 = v59;
    v15 = v60;
    __swift_project_boxed_opaque_existential_1(v58, v59);
    v13 = (*(double (**)(uint64_t, uint64_t))(v15 + 272))(v14, v15);
  }
  v16 = *(_QWORD *)(v3 + 112);
  if (v16)
  {
    v17 = v13;
    if (v16 >= 2)
      v17 = v13 * (double)v16;
  }
  else
  {
    v17 = INFINITY;
  }
  outlined init with copy of __REAssetService((uint64_t)v58, (uint64_t)v57);
  v55 = 0uLL;
  v56 = -1;
  if (*(unsigned __int8 *)(v3 + 136) < 4u)
  {
    v54 = *(_BYTE *)(v3 + 136);
    if (one-time initialization token for forwards != -1)
      swift_once();
    v18 = static AnimationFillMode.forwards;
    v53 = static AnimationFillMode.forwards;
    v19 = -*(float *)(v4 + 140);
    if (!*(_BYTE *)(v4 + 137))
      v19 = *(float *)(v4 + 140);
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)v57, 0, 0xE000000000000000, &v55, 0, &v54, &v53, *(_QWORD *)(v4 + 120), (uint64_t)v41, 0.0, 0.0, v19, 0, COERCE__INT64(v13 + *(double *)(v4 + 120)), 0, *(uint64_t *)&v17, 0);
    *((_QWORD *)&v28 + 1) = &type metadata for AnimationView;
    *(_QWORD *)&v29 = &protocol witness table for AnimationView;
    v20 = swift_allocObject();
    *(_QWORD *)&v27 = v20;
    v21 = v41[7];
    *(_OWORD *)(v20 + 112) = v41[6];
    *(_OWORD *)(v20 + 128) = v21;
    *(_OWORD *)(v20 + 144) = v41[8];
    *(_QWORD *)(v20 + 160) = v42;
    v22 = v41[3];
    *(_OWORD *)(v20 + 48) = v41[2];
    *(_OWORD *)(v20 + 64) = v22;
    v23 = v41[5];
    *(_OWORD *)(v20 + 80) = v41[4];
    *(_OWORD *)(v20 + 96) = v23;
    v24 = v41[1];
    *(_OWORD *)(v20 + 16) = v41[0];
    *(_OWORD *)(v20 + 32) = v24;
    v39 = 0uLL;
    v40 = -1;
    v38 = v18;
    v37 = 0;
    outlined retain of TimelineClipProperties((uint64_t)v41);
    AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)((uint64_t)&v27, 0, 0xE000000000000000, &v39, 0, &v37, &v38, 0, (uint64_t)&v43, 0.0, 0.0, 1.0, 1, 0, 1, *(uint64_t *)&v17, 0);
    v33 = v49;
    v34 = v50;
    v35 = v51;
    v36 = v52;
    v29 = v45;
    v30 = v46;
    v31 = v47;
    v32 = v48;
    v27 = v43;
    v28 = v44;
    if ((TimelineClipProperties.isModified.getter() & 1) != 0)
    {
      v33 = v49;
      v34 = v50;
      v35 = v51;
      v36 = v52;
      v29 = v45;
      v30 = v46;
      v31 = v47;
      v32 = v48;
      v27 = v43;
      v28 = v44;
      if (TimelineClipProperties.createClip()())
      {
LABEL_21:
        REAnimationSceneAssetCreateWithTimeline();
        REAnimationComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        *(_QWORD *)&v27 = 2;
        DWORD2(v27) = 256;
        *(_QWORD *)&v28 = "AnimateAction";
        BYTE8(v28) = 0;
        v12 = REAnimationComponentPlay();
        if ((a3 & 1) == 0)
        {
          REAnimationComponentPauseAnimation();
          RENetworkMarkComponentDirty();
        }
        if ((REEntityGetSelfEnabled() & 1) == 0)
        {
          MEMORY[0x22076D154](*(_QWORD *)(a1 + 16), 0);
          RENetworkMarkEntityMetadataDirty();
          RERenderOptionsComponentGetComponentType();
          REEntityGetOrAddComponentByClass();
          RERenderOptionsComponentSetVisibilityMode();
          RENetworkMarkComponentDirty();
          MEMORY[0x22076D154](*(_QWORD *)(a1 + 16), 1);
          RENetworkMarkEntityMetadataDirty();
        }
        RERenderOptionsComponentGetComponentType();
        REEntityGetOrAddComponentByClass();
        if (RERenderOptionsComponentGetVisibilityMode())
          v25 = 1;
        else
          v25 = REEntityGetSelfEnabled() ^ 1;
        *(_BYTE *)(v4 + 144) = v25;
        RERelease();
        swift_release();
        swift_release();
        outlined release of TimelineClipProperties((uint64_t)&v43);
        outlined release of TimelineClipProperties((uint64_t)v41);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
        RERelease();
        return v12;
      }
    }
    else if (TimelineDefinition.resource.getter())
    {
      goto LABEL_21;
    }
    swift_release();
    outlined release of TimelineClipProperties((uint64_t)&v43);
    outlined release of TimelineClipProperties((uint64_t)v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    RERelease();
    return 0;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall __RKEntityAnimateAction.stop()()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    swift_retain();
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass()
      && REAnimationComponentHasRunningAnimations()
      && (*(_BYTE *)(v0 + 176) & 1) == 0)
    {
      REAnimationComponentPauseAnimation();
    }
    swift_release();
  }
  return 1;
}

uint64_t __RKEntityAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityAnimateAction();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  swift_beginAccess();
  v3 = v1[2];
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityAnimateAction();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 120) = 0;
    *(_QWORD *)(v5 + 128) = 0;
    *(_QWORD *)(v5 + 112) = 1;
    *(_WORD *)(v5 + 136) = 1;
    *(_DWORD *)(v5 + 140) = 1065353216;
    *(_WORD *)(v5 + 144) = 0;
    *(_QWORD *)(v5 + 160) = 0;
    *(_QWORD *)(v5 + 168) = 0;
    *(_QWORD *)(v5 + 152) = 0x3FF0000000000000;
    *(_BYTE *)(v5 + 176) = 1;
    *(_OWORD *)(v5 + 184) = 0u;
    *(_OWORD *)(v5 + 200) = 0u;
    *(_OWORD *)(v5 + 216) = 0u;
    *(_OWORD *)(v5 + 232) = 0u;
    *(_OWORD *)(v5 + 248) = 0u;
    v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD))(*v1 + 464))(v8, 0);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v7;
    else
      return 0;
  }
}

uint64_t __RKEntityAnimateAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityAnimateAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  return outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKEntityAnimateAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityAnimateAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityStartAnimateAction.__allocating_init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(uint64_t a1, uint64_t a2, char *a3, char a4, char a5, char a6, uint64_t a7, double a8, double a9, float a10, double a11)
{
  swift_allocObject();
  return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(uint64_t a1, uint64_t a2, char *a3, char a4, char a5, char a6, uint64_t a7, double a8, double a9, float a10, double a11)
{
  uint64_t v11;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v22 = *a3;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 112) = 1;
  *(_WORD *)(v11 + 136) = 1;
  *(_DWORD *)(v11 + 140) = 1065353216;
  *(_WORD *)(v11 + 144) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 168) = 0;
  *(_QWORD *)(v11 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v11 + 176) = 1;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 248) = 0u;
  v23 = swift_retain();
  v24 = __RKEntityAction.init(targetEntity:)(v23);
  v25 = v24;
  if (a1)
  {
    *(_QWORD *)(v24 + 160) = a7;
    swift_retain_n();
    swift_release();
    swift_release();
    swift_beginAccess();
    *(_BYTE *)(v25 + 105) = v22;
    swift_release();
    *(_QWORD *)(v25 + 112) = a2;
    *(_BYTE *)(v25 + 137) = a4 & 1;
    *(double *)(v25 + 120) = a8;
    *(double *)(v25 + 128) = a9;
    *(float *)(v25 + 140) = a10;
    if ((a5 & 1) != 0)
      v26 = 3;
    else
      v26 = 1;
    if (a2 == 1)
      v26 = 0;
    *(_BYTE *)(v25 + 136) = v26;
    *(_BYTE *)(v25 + 145) = a6 & 1;
    *(double *)(v25 + 152) = a11;
  }
  swift_release();
  return v25;
}

uint64_t __RKEntityStartAnimateAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t SceneNullable;
  uint64_t ServiceLocator;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v31;
  char v32;
  char *v33;
  unint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  _UNKNOWN **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v38 = 91;
  v39 = 0xE100000000000000;
  if (v2)
  {
    v35[0] = 0;
    v35[1] = 0xE000000000000000;
    v42 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v9 = *(_QWORD *)(v0 + 16);
  if (!v9)
  {
    v12 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v12, &v38);
    goto LABEL_15;
  }
  swift_retain();
  REAnimationComponentGetComponentType();
  if (!REEntityGetComponentByClass()
    || (*(_BYTE *)(v0 + 176) & 1) != 0
    || !REAnimationComponentIsPaused())
  {
    v11 = (_QWORD *)(v0 + 96);
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 104) == 1 && *v11 == 1)
    {
      swift_beginAccess();
      if (*(_BYTE *)(v1 + 105))
      {
        if (*(_BYTE *)(v1 + 105) == 1)
        {
          swift_release();
LABEL_15:
          swift_bridgeObjectRelease();
          return 0;
        }
        swift_bridgeObjectRelease();
        v31 = *(char **)(v1 + 96);
        v32 = *(_BYTE *)(v1 + 104);
        *(_QWORD *)(v1 + 96) = 2;
        v10 = 1;
        *(_BYTE *)(v1 + 104) = 1;
        v38 = (uint64_t)v31;
        LOBYTE(v39) = v32;
        __RKEntityAction.state.didset((uint64_t)&v38);
LABEL_23:
        swift_release();
        return v10;
      }
      __RKEntityAnimateAction.stopAnimations()();
    }
    __RKEntityAnimateAction.setAudioAnimationParameters(on:mute:gain:)(*(double *)(v1 + 152), v9, *(_BYTE *)(v1 + 145));
    SceneNullable = REEntityGetSceneNullable();
    v33 = (char *)v38;
    v34 = v39;
    if (SceneNullable && (SceneNullable = RESceneGetECSManagerNullable()) != 0)
    {
      ServiceLocator = REECSManagerGetServiceLocator();
      SceneNullable = MEMORY[0x22076FD58](ServiceLocator);
      if (SceneNullable)
      {
        SceneNullable = __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(v9, SceneNullable, 1);
        v16 = v15 & 1;
      }
      else
      {
        v16 = 1;
      }
    }
    else
    {
      v16 = 0;
    }
    *(_QWORD *)(v1 + 168) = SceneNullable;
    *(_BYTE *)(v1 + 176) = v16;
    v17 = swift_allocObject();
    swift_weakInit();
    v18 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = partial apply for closure #1 in __RKEntityStartAnimateAction.perform(with:);
    *(_QWORD *)(v1 + 40) = v17;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v18);
    v19 = *(char **)(v1 + 96);
    v20 = *(_BYTE *)(v1 + 104);
    v10 = 1;
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    v38 = (uint64_t)v19;
    LOBYTE(v39) = v20;
    __RKEntityAction.state.didset((uint64_t)&v38);
    v21 = type metadata accessor for Entity();
    v36 = v21;
    v37 = &protocol witness table for Entity;
    v35[0] = v9;
    v22 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v35, 0, (char **)&v38);
    v23 = swift_allocObject();
    *(_QWORD *)(v23 + 16) = partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:);
    *(_QWORD *)(v23 + 24) = v22;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackCompleted>);
    v24 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v25 = type metadata accessor for AnyCancellable();
    v40 = v25;
    v41 = MEMORY[0x24BDB9B58];
    swift_release();
    v38 = (uint64_t)v24;
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v38, v1 + 184);
    swift_endAccess();
    v36 = v21;
    v37 = &protocol witness table for Entity;
    v35[0] = v9;
    v26 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    specialized Scene.publisher<A>(for:on:componentType:rootEntity:matching:)((uint64_t)v35, 0, (char **)&v38);
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:);
    *(_QWORD *)(v27 + 24) = v26;
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    lazy protocol witness table accessor for type Scene.Publisher<AnimationEvents.PlaybackCompleted> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Scene.Publisher<AnimationEvents.PlaybackTerminated> and conformance Scene.Publisher<A>, &demangling cache variable for type metadata for Scene.Publisher<AnimationEvents.PlaybackTerminated>);
    v28 = (char *)Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    v40 = v25;
    v41 = MEMORY[0x24BDB9B58];
    swift_release();
    v38 = (uint64_t)v28;
    outlined destroy of BodyTrackingComponent?((uint64_t)v35, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v38, v1 + 224);
    swift_endAccess();
    v38 = (uint64_t)v33;
    v39 = v34;
    v29 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v29, &v38);
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
  REAnimationComponentResumeAnimation();
  swift_release();
  return 1;
}

uint64_t closure #1 in __RKEntityStartAnimateAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[3];
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 184;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v2, (uint64_t)&v5);
    if (*((_QWORD *)&v6 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v5, (uint64_t)v3);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v3, v4);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
    }
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Cancellable?((uint64_t)&v5, v2);
    swift_endAccess();
    swift_release();
    swift_beginAccess();
    outlined init with copy of Cancellable?(v1 + 224, (uint64_t)&v5);
    if (*((_QWORD *)&v6 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v5, (uint64_t)v3);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v3, v4);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v5, &demangling cache variable for type metadata for Cancellable?);
    }
    v7 = 0;
    v5 = 0u;
    v6 = 0u;
    swift_beginAccess();
    swift_retain();
    outlined assign with take of Cancellable?((uint64_t)&v5, v1 + 224);
    swift_endAccess();
    swift_release();
    __RKEntityAnimateAction.stopAnimations()();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in __RKEntityStartAnimateAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v1 = *a1;
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    if ((*(_BYTE *)(result + 176) & 1) != 0 || *(_QWORD *)(v1 + 16) != *(_QWORD *)(result + 168))
    {
      return swift_release();
    }
    else
    {
      swift_beginAccess();
      v4 = *(_QWORD *)(v3 + 96);
      v5 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v6 = v4;
      v7 = v5;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v6);
      return swift_release_n();
    }
  }
  return result;
}

uint64_t __RKEntityStartAnimateAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  type metadata accessor for __RKEntityStopAnimateAction();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 112) = 1;
  *(_WORD *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 1065353216;
  *(_WORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v0 + 176) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityStopAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityStartAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  double v5;
  char v6;
  float v7;
  char v8;
  char v9;
  double v10;
  uint64_t v11;
  uint64_t started;
  uint64_t v13;
  uint64_t result;
  char v15;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 112);
  swift_beginAccess();
  v15 = *(_BYTE *)(v1 + 105);
  v4 = *(double *)(v1 + 120);
  v5 = *(double *)(v1 + 128);
  v6 = *(_BYTE *)(v1 + 137);
  v7 = *(float *)(v1 + 140);
  v8 = *(_BYTE *)(v1 + 136) == 3;
  v9 = *(_BYTE *)(v1 + 145);
  v10 = *(double *)(v1 + 152);
  v11 = *(_QWORD *)(v1 + 160);
  started = type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  swift_retain();
  v13 = swift_retain();
  result = __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v13, v3, &v15, v6, v8, v9, v11, v4, v5, v7, v10);
  a1[3] = started;
  *a1 = result;
  return result;
}

uint64_t __RKEntityStartAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  char v8;
  float v9;
  char v10;
  char v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    v5 = *(_QWORD *)(v1 + 112);
    swift_beginAccess();
    LOBYTE(v15) = *(_BYTE *)(v1 + 105);
    v6 = *(double *)(v1 + 120);
    v7 = *(double *)(v1 + 128);
    v8 = *(_BYTE *)(v1 + 137);
    v9 = *(float *)(v1 + 140);
    v10 = *(_BYTE *)(v1 + 136) == 3;
    v11 = *(_BYTE *)(v1 + 145);
    v12 = *(double *)(v1 + 152);
    v13 = *(_QWORD *)(v1 + 160);
    type metadata accessor for __RKEntityStartAnimateAction();
    swift_allocObject();
    swift_retain();
    v14 = swift_retain();
    return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v14, v5, (char *)&v15, v8, v10, v11, v13, v6, v7, v9, v12);
  }
  else
  {
    __RKEntityStartAnimateAction.copy(with:)(v16);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v15;
    else
      return 0;
  }
}

void __RKEntityStartAnimateAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityStartAnimateAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityStopAnimateAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t SceneNullable;
  uint64_t ServiceLocator;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v1 = v0;
  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  v29 = 91;
  v30 = 0xE100000000000000;
  if (v2)
  {
    v27 = v2;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  swift_release();
  v10 = v29;
  v9 = v30;
  v11 = *(_QWORD *)(v0 + 16);
  if (!v11)
  {
    v17 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v17, &v29);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v12 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105) == 1)
    {
      swift_retain();
LABEL_15:
      v27 = v29;
      v28 = v30;
      v18 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v18, &v27);
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_15;
  SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable && (SceneNullable = RESceneGetECSManagerNullable()) != 0)
  {
    ServiceLocator = REECSManagerGetServiceLocator();
    SceneNullable = MEMORY[0x22076FD58](ServiceLocator);
    if (SceneNullable)
    {
      SceneNullable = __RKEntityAnimateAction._setupAnimations(entity:assetManager:andPlay:)(v11, SceneNullable, 0);
      v16 = v15 & 1;
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(v1 + 168) = SceneNullable;
  *(_BYTE *)(v1 + 176) = v16;
  v20 = *(_QWORD *)(v1 + 96);
  v21 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 3;
  v19 = 1;
  *(_BYTE *)(v1 + 104) = 1;
  v27 = v20;
  LOBYTE(v28) = v21;
  __RKEntityAction.state.didset((uint64_t)&v27);
  __RKEntityAnimateAction.stopAnimations()();
  v27 = v10;
  v28 = v9;
  v22 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v22, &v27);
  v23 = *(_QWORD *)(v1 + 96);
  v24 = *(_BYTE *)(v1 + 104);
  *(_QWORD *)(v1 + 96) = 2;
  *(_BYTE *)(v1 + 104) = 1;
  v27 = v23;
  LOBYTE(v28) = v24;
  __RKEntityAction.state.didset((uint64_t)&v27);
  v27 = v10;
  v28 = v9;
  v25 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v25, &v27);
  swift_bridgeObjectRelease();
  swift_release();
  return v19;
}

uint64_t __RKEntityStopAnimateAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 160);
  v4 = 1;
  type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  swift_retain();
  v2 = swift_retain();
  return __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v2, 1, &v4, 0, 0, 0, v1, 0.0, 0.0, 1.0, 1.0);
}

uint64_t __RKEntityStopAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityStopAnimateAction();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityStopAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityStopAnimateAction();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 112) = 1;
    *(_WORD *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 1065353216;
    *(_WORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 160) = 0;
    *(_QWORD *)(v7 + 168) = 0;
    *(_QWORD *)(v7 + 152) = 0x3FF0000000000000;
    *(_BYTE *)(v7 + 176) = 1;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityStopAnimateAction();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 112) = 1;
    *(_WORD *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 1065353216;
    *(_WORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 152) = 0x3FF0000000000000;
    *(_BYTE *)(v4 + 176) = 1;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v9;
    else
      return 0;
  }
}

uint64_t __RKEntityStopAnimateAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityStartAnimateAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKEntityStartAnimateAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t __RKEntityToggleAnimateAction.perform(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int IsAnimated;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t *);
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  swift_beginAccess();
  v5 = *(_QWORD *)(v1 + 16);
  v43 = 91;
  v44 = 0xE100000000000000;
  if (v5)
  {
    v41 = 0;
    v42 = 0xE000000000000000;
    v38 = v5;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v6 = 0;
    v7 = 0xE000000000000000;
  }
  else
  {
    v7 = 0xE300000000000000;
    v6 = 7104878;
  }
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8285;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8250;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  swift_release();
  v13 = v43;
  v12 = v44;
  if (!*(_QWORD *)(v1 + 16))
  {
    v16 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v16, &v43);
    swift_bridgeObjectRelease();
LABEL_14:
    v18 = 0;
    return v18 & 1;
  }
  v14 = (_QWORD *)(v1 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v2 + 104) == 1 && *v14 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v2 + 105) == 1)
    {
      swift_retain();
LABEL_13:
      v41 = v43;
      v42 = v44;
      v17 = static os_log_type_t.info.getter();
      specialized InteractionsLogger.log(_:_:)(v17, &v41);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_14;
    }
  }
  swift_retain();
  if (!RESceneGetECSManagerNullable())
    goto LABEL_13;
  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
    IsAnimated = RETransformComponentIsAnimated();
  else
    IsAnimated = 0;
  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    if ((REAnimationComponentHasRunningAnimations() & 1) != 0)
    {
LABEL_18:
      type metadata accessor for __RKEntityStopAnimateAction();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 120) = 0;
      *(_QWORD *)(v19 + 128) = 0;
      *(_QWORD *)(v19 + 112) = 1;
      *(_WORD *)(v19 + 136) = 1;
      *(_DWORD *)(v19 + 140) = 1065353216;
      *(_WORD *)(v19 + 144) = 0;
      *(_QWORD *)(v19 + 160) = 0;
      *(_QWORD *)(v19 + 168) = 0;
      *(_QWORD *)(v19 + 152) = 0x3FF0000000000000;
      *(_BYTE *)(v19 + 176) = 1;
      *(_OWORD *)(v19 + 184) = 0u;
      *(_OWORD *)(v19 + 200) = 0u;
      *(_OWORD *)(v19 + 216) = 0u;
      *(_OWORD *)(v19 + 232) = 0u;
      *(_OWORD *)(v19 + 248) = 0u;
      v20 = swift_retain();
      v21 = __RKEntityAction.init(targetEntity:)(v20);
      goto LABEL_21;
    }
  }
  else if (IsAnimated)
  {
    goto LABEL_18;
  }
  LOBYTE(v41) = 1;
  type metadata accessor for __RKEntityStartAnimateAction();
  swift_allocObject();
  v22 = swift_retain();
  v21 = __RKEntityStartAnimateAction.init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)(v22, 1, (char *)&v41, 0, 0, 0, 0, 0.0, 0.0, 1.0, 1.0);
LABEL_21:
  *(_QWORD *)(v2 + 264) = v21;
  result = swift_release();
  v24 = *(_QWORD *)(v2 + 264);
  if (!v24)
  {
    __break(1u);
    goto LABEL_28;
  }
  v25 = swift_allocObject();
  swift_weakInit();
  v26 = *(_QWORD *)(v24 + 32);
  *(_QWORD *)(v24 + 32) = partial apply for closure #1 in __RKEntityToggleAnimateAction.perform(with:);
  *(_QWORD *)(v24 + 40) = v25;
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v26);
  v27 = *(_QWORD *)(v2 + 264);
  if (!v27)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v41 = v3;
  v42 = v4;
  v28 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v27 + 408);
  swift_retain();
  v18 = v28(&v41);
  result = swift_release();
  v29 = *(_QWORD *)(v2 + 264);
  if (!v29)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  swift_beginAccess();
  v30 = *(_BYTE *)(v29 + 104);
  v31 = *(_QWORD *)(v2 + 96);
  v32 = *(_BYTE *)(v2 + 104);
  *(_QWORD *)(v2 + 96) = *(_QWORD *)(v29 + 96);
  *(_BYTE *)(v2 + 104) = v30;
  v39 = v31;
  LOBYTE(v40) = v32;
  result = __RKEntityAction.state.didset((uint64_t)&v39);
  v33 = *(_QWORD *)(v2 + 264);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 168);
    v35 = *(_BYTE *)(v33 + 176);
    *(_QWORD *)(v2 + 168) = v34;
    *(_BYTE *)(v2 + 176) = v35;
    MEMORY[0x24BDAC7A8](result);
    v37[16] = v18 & 1;
    v39 = v13;
    v40 = v12;
    v36 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v36, &v39, partial apply for implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:), v37);
    swift_bridgeObjectRelease();
    swift_release();
    return v18 & 1;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t closure #1 in __RKEntityToggleAnimateAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 264);
    if (v2)
    {
      swift_beginAccess();
      v3 = *(_QWORD *)(v2 + 96);
      v4 = *(_BYTE *)(v2 + 104);
      swift_beginAccess();
      v5 = *(_QWORD *)(v1 + 96);
      v6 = *(_BYTE *)(v1 + 104);
      *(_QWORD *)(v1 + 96) = v3;
      *(_BYTE *)(v1 + 104) = v4;
      v7 = v5;
      v8 = v6;
      swift_retain();
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v7);
      swift_release();
      swift_release();
      *(_QWORD *)(v1 + 168) = 0;
      *(_BYTE *)(v1 + 176) = 1;
    }
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)(char a1)
{
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  v2._countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityToggleAnimateAction.reversed()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  type metadata accessor for __RKEntityToggleAnimateAction();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 120) = 0;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 112) = 1;
  *(_WORD *)(v0 + 136) = 1;
  *(_DWORD *)(v0 + 140) = 1065353216;
  *(_WORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v0 + 176) = 1;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_OWORD *)(v0 + 216) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 248) = 0u;
  v1 = swift_retain();
  return __RKEntityAction.init(targetEntity:)(v1);
}

uint64_t __RKEntityToggleAnimateAction.__allocating_init(targetEntity:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 112) = 1;
  *(_WORD *)(v2 + 136) = 1;
  *(_DWORD *)(v2 + 140) = 1065353216;
  *(_WORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v2 + 176) = 1;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleAnimateAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v2 = type metadata accessor for __RKEntityToggleAnimateAction();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 264) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 112) = 1;
  *(_WORD *)(v3 + 136) = 1;
  *(_DWORD *)(v3 + 140) = 1065353216;
  *(_WORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v3 + 176) = 1;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v2;
  *a1 = result;
  return result;
}

uint64_t __RKEntityToggleAnimateAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityToggleAnimateAction();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 264) = 0;
    *(_QWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v7 + 128) = 0;
    *(_QWORD *)(v7 + 112) = 1;
    *(_WORD *)(v7 + 136) = 1;
    *(_DWORD *)(v7 + 140) = 1065353216;
    *(_WORD *)(v7 + 144) = 0;
    *(_QWORD *)(v7 + 160) = 0;
    *(_QWORD *)(v7 + 168) = 0;
    *(_QWORD *)(v7 + 152) = 0x3FF0000000000000;
    *(_BYTE *)(v7 + 176) = 1;
    *(_OWORD *)(v7 + 184) = 0u;
    *(_OWORD *)(v7 + 200) = 0u;
    *(_OWORD *)(v7 + 216) = 0u;
    *(_OWORD *)(v7 + 232) = 0u;
    *(_OWORD *)(v7 + 248) = 0u;
    v8 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v8);
  }
  else
  {
    type metadata accessor for __RKEntityToggleAnimateAction();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 264) = 0;
    *(_QWORD *)(v4 + 120) = 0;
    *(_QWORD *)(v4 + 128) = 0;
    *(_QWORD *)(v4 + 112) = 1;
    *(_WORD *)(v4 + 136) = 1;
    *(_DWORD *)(v4 + 140) = 1065353216;
    *(_WORD *)(v4 + 144) = 0;
    *(_QWORD *)(v4 + 160) = 0;
    *(_QWORD *)(v4 + 168) = 0;
    *(_QWORD *)(v4 + 152) = 0x3FF0000000000000;
    *(_BYTE *)(v4 + 176) = 1;
    *(_OWORD *)(v4 + 184) = 0u;
    *(_OWORD *)(v4 + 200) = 0u;
    *(_OWORD *)(v4 + 216) = 0u;
    *(_OWORD *)(v4 + 232) = 0u;
    *(_OWORD *)(v4 + 248) = 0u;
    v5 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v5);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v9;
    else
      return 0;
  }
}

uint64_t __RKEntityToggleAnimateAction.init(targetEntity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = 1;
  *(_WORD *)(v1 + 136) = 1;
  *(_DWORD *)(v1 + 140) = 1065353216;
  *(_WORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 152) = 0x3FF0000000000000;
  *(_BYTE *)(v1 + 176) = 1;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityToggleAnimateAction.__ivar_destroyer()
{
  return swift_release();
}

uint64_t __RKEntityToggleAnimateAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  return v0;
}

uint64_t __RKEntityToggleAnimateAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 184, &demangling cache variable for type metadata for Cancellable?);
  outlined destroy of BodyTrackingComponent?(v0 + 224, &demangling cache variable for type metadata for Cancellable?);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityAnimateAction()
{
  return objc_opt_self();
}

uint64_t sub_21BC6E12C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntityStartAnimateAction.perform(with:)()
{
  return closure #1 in __RKEntityStartAnimateAction.perform(with:)();
}

uint64_t partial apply for closure #2 in __RKEntityStartAnimateAction.perform(with:)(uint64_t *a1)
{
  return closure #2 in __RKEntityStartAnimateAction.perform(with:)(a1);
}

uint64_t sub_21BC6E170()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for __RKEntityStopAnimateAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKEntityStartAnimateAction()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in __RKEntityToggleAnimateAction.perform(with:)()
{
  return closure #1 in __RKEntityToggleAnimateAction.perform(with:)();
}

uint64_t partial apply for implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)()
{
  uint64_t v0;

  return implicit closure #3 in __RKEntityToggleAnimateAction.perform(with:)(*(_BYTE *)(v0 + 16));
}

uint64_t type metadata accessor for __RKEntityToggleAnimateAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityAnimateAction()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for __RKEntityStartAnimateAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityStartAnimateAction.__allocating_init(targetEntity:loopCount:multiplePerformBehavior:clipStart:clipDuration:clipReversed:animationSpeed:clipReverses:muteAudio:audioGain:targetAnimationEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 976))();
}

uint64_t method lookup function for __RKEntityToggleAnimateAction()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_21BC6E230()
{
  uint64_t v0;
  int v1;

  swift_release();
  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 144);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for AudioBufferResource.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC6E2CC + 4 * byte_21BE6AFD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC6E300 + 4 * byte_21BE6AFD0[v4]))();
}

uint64_t sub_21BC6E300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6E308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC6E310);
  return result;
}

uint64_t sub_21BC6E31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC6E324);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC6E328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6E330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioBufferResource.Error()
{
  return &type metadata for AudioBufferResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioBufferResource.Error and conformance AudioBufferResource.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioBufferResource.Error, &type metadata for AudioBufferResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error;
  if (!lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioBufferResource.Error, &type metadata for AudioBufferResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioBufferResource.Error and conformance AudioBufferResource.Error);
  }
  return result;
}

unint64_t AudioBufferResource.Error.errorDescription.getter(char a1)
{
  if (!a1)
    return 0xD000000000000043;
  if (a1 == 1)
    return 0xD000000000000036;
  return 0xD00000000000002DLL;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioBufferResource.Error()
{
  char *v0;

  return AudioBufferResource.Error.errorDescription.getter(*v0);
}

uint64_t AudioGeneratorConfiguration.init(layoutTag:mixGroupName:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 48000;
  *(_DWORD *)(a4 + 4) = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = a3;
  return result;
}

uint64_t AudioGeneratorConfiguration.layoutTag.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AudioGeneratorConfiguration.layoutTag.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*AudioGeneratorConfiguration.layoutTag.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioGeneratorConfiguration.mixGroupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioGeneratorConfiguration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AudioGeneratorConfiguration.mixGroupName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioGeneratorConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioGeneratorConfiguration(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AudioGeneratorConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AudioGeneratorConfiguration()
{
  return &type metadata for AudioGeneratorConfiguration;
}

void static ModelSortGroupComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2018;
}

uint64_t ModelSortGroup.init(depthPass:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  type metadata accessor for ModelSortGroup.SortGroupRef();
  v4 = swift_allocObject();
  result = RECreateMeshSortGroup();
  *(_QWORD *)(v4 + 16) = result;
  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = 3;
  *(_QWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t type metadata accessor for ModelSortGroup.SortGroupRef()
{
  return objc_opt_self();
}

BOOL static ModelSortGroup.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  if (REMeshSortingComponentCheckIfEqual())
  {
    v4 = v3 == 3;
    v6 = v3 != 3 && v2 == v3;
    if (v2 != 3)
      v4 = v6;
  }
  else
  {
    v4 = 0;
  }
  return !v4;
}

void ModelSortGroup.depthPass.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

BOOL static ModelSortGroup.DepthPass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void ModelSortGroup.DepthPass.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ModelSortGroup.DepthPass.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void ModelSortGroup.planarUIPlacement.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

BOOL static ModelSortGroup.PlanarUIPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void ModelSortGroup.PlanarUIPlacement.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int ModelSortGroup.PlanarUIPlacement.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t one-time initialization function for planarUIInline()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ModelSortGroup.SortGroupRef();
  v0 = swift_allocObject();
  result = RECreateMeshSortGroup();
  *(_QWORD *)(v0 + 16) = result;
  static ModelSortGroup.planarUIInline = 2;
  qword_2551A5338 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIInline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for planarUIInline != -1)
    swift_once();
  v2 = qword_2551A5338;
  *(_WORD *)a1 = static ModelSortGroup.planarUIInline;
  *(_QWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t one-time initialization function for planarUIAlwaysInFront()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ModelSortGroup.SortGroupRef();
  v0 = swift_allocObject();
  result = RECreateMeshSortGroup();
  *(_QWORD *)(v0 + 16) = result;
  static ModelSortGroup.planarUIAlwaysInFront = 258;
  qword_2551A5348 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIAlwaysInFront.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for planarUIAlwaysInFront != -1)
    swift_once();
  v2 = qword_2551A5348;
  *(_WORD *)a1 = static ModelSortGroup.planarUIAlwaysInFront;
  *(_QWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t one-time initialization function for planarUIAlwaysBehind()
{
  uint64_t v0;
  uint64_t result;

  type metadata accessor for ModelSortGroup.SortGroupRef();
  v0 = swift_allocObject();
  result = RECreateMeshSortGroup();
  *(_QWORD *)(v0 + 16) = result;
  static ModelSortGroup.planarUIAlwaysBehind = 514;
  qword_2551A5358 = v0;
  return result;
}

uint64_t static ModelSortGroup.planarUIAlwaysBehind.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  if (one-time initialization token for planarUIAlwaysBehind != -1)
    swift_once();
  v2 = qword_2551A5358;
  *(_WORD *)a1 = static ModelSortGroup.planarUIAlwaysBehind;
  *(_QWORD *)(a1 + 8) = v2;
  return swift_retain();
}

__int16 *ModelSortGroupComponent.init(group:order:)@<X0>(__int16 *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int16 v3;
  uint64_t v4;

  v3 = *result;
  v4 = *((_QWORD *)result + 1);
  *(_DWORD *)a3 = a2;
  *(_WORD *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v4;
  return result;
}

uint64_t ModelSortGroupComponent.group.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t ModelSortGroupComponent.group.setter(__int16 *a1)
{
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  result = swift_release();
  *(_WORD *)(v1 + 8) = v2;
  *(_QWORD *)(v1 + 16) = v3;
  return result;
}

uint64_t (*ModelSortGroupComponent.group.modify(uint64_t a1))(char *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_WORD *)a1 = *(_WORD *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v1;
  swift_retain();
  return ModelSortGroupComponent.group.modify;
}

uint64_t ModelSortGroupComponent.group.modify(char *a1, char a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    swift_release();
    *(_BYTE *)(v5 + 8) = v2;
    *(_BYTE *)(v5 + 9) = v3;
    *(_QWORD *)(v5 + 16) = v4;
    return swift_release();
  }
  else
  {
    result = swift_release();
    *(_BYTE *)(v5 + 8) = v2;
    *(_BYTE *)(v5 + 9) = v3;
    *(_QWORD *)(v5 + 16) = v4;
  }
  return result;
}

uint64_t ModelSortGroupComponent.order.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t ModelSortGroupComponent.order.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ModelSortGroupComponent.order.modify(uint64_t a1))(uint64_t result)
{
  _DWORD *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return ModelSortGroupComponent.order.modify;
}

uint64_t ModelSortGroupComponent.order.modify(uint64_t result)
{
  **(_DWORD **)result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t static ModelSortGroupComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int SortCategory;
  char v5;
  uint64_t result;
  int PriorityInSortGroup;
  char v8;

  v2 = REMeshSortingComponentCopySortGroup();
  RECreateMeshSortGroup();
  type metadata accessor for ModelSortGroup.SortGroupRef();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  RERelease();
  REComponentGetEntity();
  REUISortingComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    SortCategory = REUISortingComponentGetSortCategory();
    if ((SortCategory + 2) >= 5)
      v5 = 0;
    else
      v5 = 0x101000202uLL >> (8 * (SortCategory + 2));
    result = REUISortingComponentGetSortPriorityHint();
    PriorityInSortGroup = result;
    v8 = 2;
  }
  else
  {
    PriorityInSortGroup = REMeshSortingComponentGetPriorityInSortGroup();
    result = REMeshSortingComponentGetDepthPriorityInSortGroup();
    if ((_DWORD)result == 0x7FFFFFFF)
      v8 = 1;
    else
      v8 = 2;
    if ((_DWORD)result == 0x80000000)
      v8 = 0;
    v5 = 3;
  }
  *(_DWORD *)a1 = PriorityInSortGroup;
  *(_BYTE *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 9) = v5;
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t ModelSortGroupComponent.__toCore(_:)()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 9) == 3)
  {
    if (REMeshSortingComponentGetIsUI())
    {
      REMeshSortingComponentSetIsUI();
      REComponentGetEntity();
      REUISortingComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
    REMeshSortingComponentSetPriorityInSortGroup();
  }
  else
  {
    REMeshSortingComponentSetIsUI();
    REComponentGetEntity();
    REUISortingComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    REUISortingComponentSetSortCategory();
    REUISortingComponentSetSortPriorityHint();
    REUISortingComponentSetUsesMeshBoundingBox();
    RENetworkMarkComponentDirty();
  }
  REMeshSortingComponentSetDepthPriorityInSortGroup();
  REMeshSortingComponentSetSortGroup();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ModelSortGroupComponent(_DWORD *a1@<X8>)
{
  *a1 = 2018;
}

uint64_t ModelSortGroupComponent.customMirror.getter()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  char v17;
  char v18;
  uint64_t v19;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *((_BYTE *)v0 + 8);
  v10 = *((_BYTE *)v0 + 9);
  v11 = *((_QWORD *)v0 + 2);
  v16 = *v0;
  v8 = v16;
  v17 = v9;
  v18 = v10;
  v19 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v12 + 32) = 0x70756F7267;
  *(_QWORD *)(v12 + 40) = 0xE500000000000000;
  *(_BYTE *)(v12 + 48) = v9;
  *(_BYTE *)(v12 + 49) = v10;
  *(_QWORD *)(v12 + 56) = v11;
  *(_QWORD *)(v12 + 72) = &type metadata for ModelSortGroup;
  *(_QWORD *)(v12 + 80) = 0x726564726FLL;
  *(_QWORD *)(v12 + 88) = 0xE500000000000000;
  *(_QWORD *)(v12 + 120) = MEMORY[0x24BEE3F88];
  *(_DWORD *)(v12 + 96) = v8;
  v13 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v7, 1, 1, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain_n();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t ModelSortGroup.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[8];
  uint64_t v14;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  LOBYTE(v6) = *(_BYTE *)(v0 + 1);
  v9 = *(_QWORD *)(v0 + 8);
  v13[0] = *(_BYTE *)v0;
  v8 = v13[0];
  v13[1] = v6;
  v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v10 + 32) = 0x7361506874706564;
  *(_QWORD *)(v10 + 40) = 0xE900000000000073;
  *(_QWORD *)(v10 + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModelSortGroup.DepthPass?);
  *(_BYTE *)(v10 + 48) = v8;
  v11 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t specialized static ModelSortGroup.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t result;
  _BOOL4 v6;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a2 + 1);
  result = REMeshSortingComponentCheckIfEqual();
  if ((_DWORD)result)
  {
    v6 = v3 != 3 && v2 == v3;
    if (v2 == 3)
      return v3 == 3;
    else
      return v6;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass;
  if (!lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ModelSortGroup.DepthPass, &type metadata for ModelSortGroup.DepthPass);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelSortGroup.DepthPass and conformance ModelSortGroup.DepthPass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement;
  if (!lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ModelSortGroup.PlanarUIPlacement, &type metadata for ModelSortGroup.PlanarUIPlacement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelSortGroup.PlanarUIPlacement and conformance ModelSortGroup.PlanarUIPlacement);
  }
  return result;
}

uint64_t sub_21BC6F144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v2;
  uint64_t v3;

  v2 = *(_WORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_WORD *)a2 = v2;
  *(_QWORD *)(a2 + 8) = v3;
  return swift_retain();
}

uint64_t sub_21BC6F158(__int16 *a1, uint64_t a2)
{
  __int16 v3;
  uint64_t v4;
  uint64_t result;

  v3 = *a1;
  v4 = *((_QWORD *)a1 + 1);
  swift_retain();
  result = swift_release();
  *(_WORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  return result;
}

_DWORD *sub_21BC6F1A0@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_21BC6F1AC(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ModelSortGroup(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ModelSortGroup()
{
  return &type metadata for ModelSortGroup;
}

uint64_t storeEnumTagSinglePayload for ModelSortGroup.DepthPass(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC6F2CC + 4 * byte_21BE6B105[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC6F300 + 4 * asc_21BE6B100[v4]))();
}

uint64_t sub_21BC6F300(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6F308(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC6F310);
  return result;
}

uint64_t sub_21BC6F31C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC6F324);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC6F328(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6F330(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelSortGroup.DepthPass()
{
  return &type metadata for ModelSortGroup.DepthPass;
}

uint64_t storeEnumTagSinglePayload for ModelSortGroup.PlanarUIPlacement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BC6F398 + 4 * byte_21BE6B10F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BC6F3CC + 4 * byte_21BE6B10A[v4]))();
}

uint64_t sub_21BC6F3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6F3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC6F3DCLL);
  return result;
}

uint64_t sub_21BC6F3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC6F3F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BC6F3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC6F3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModelSortGroup.PlanarUIPlacement()
{
  return &type metadata for ModelSortGroup.PlanarUIPlacement;
}

uint64_t initializeBufferWithCopyOfBuffer for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ModelSortGroupComponent(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ModelSortGroupComponent()
{
  return &type metadata for ModelSortGroupComponent;
}

void Entity.moveCharacter(by:deltaTime:relativeTo:collisionHandler:)(uint64_t a1@<X0>, void (*a2)(_QWORD *)@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t SceneNullable;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t CollisionCount;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t HitEntityAtCollisionIndex;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _QWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;

  v4 = v3;
  RECharacterControllerComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v11 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

LABEL_28:
    *a3 = 0;
    return;
  }
  RECharacterControllerComponentStateGetComponentType();
  REEntityGetOrAddComponentByClass();
  if (a1)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_10;
    v9 = SceneNullable;
    v10 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v10)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v9);
    }
    v12 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v12)
LABEL_10:
      v12 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    v12 = 0;
  }
  specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v12);
  if (!RECharacterControllerComponentMoveEx())
  {
    swift_release();
    goto LABEL_28;
  }
  if (!a2)
  {
LABEL_26:
    *a3 = RECharacterControllerCollisionResultGetHitFlags();
    RERelease();
    swift_release();
    return;
  }
  swift_retain();
  CollisionCount = RECharacterControllerCollisionResultGetCollisionCount();
  if (CollisionCount < 0)
    goto LABEL_30;
  v14 = CollisionCount;
  v29 = a3;
  if (!CollisionCount)
  {
LABEL_25:
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)a2);
    a3 = v29;
    goto LABEL_26;
  }
  v15 = 0;
  while (1)
  {
    HitEntityAtCollisionIndex = RECharacterControllerCollisionResultGetHitEntityAtCollisionIndex();
    RECharacterControllerCollisionResultGetHitPositionAtCollisionIndex();
    v35 = v22;
    RECharacterControllerCollisionResultGetHitNormalAtCollisionIndex();
    v34 = v23;
    RECharacterControllerCollisionResultGetMoveDirectionAtCollisionIndex();
    v33 = v24;
    RECharacterControllerCollisionResultGetMoveDistanceAtCollisionIndex();
    v26 = v25;
    swift_retain();
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v16 = swift_dynamicCastClassUnconditional();
      goto LABEL_18;
    }
    if ((REEntityIsBeingDestroyed() & 1) != 0)
      break;
    v27 = specialized static Entity.entityInfoType(_:)();
    if (v27)
    {
      v17 = (*(uint64_t (**)(void))(v27 + 232))();
      v28 = *(_QWORD *)(v17 + 16);
      swift_retain();
      MEMORY[0x22076D160](v28, 0);
      *(_QWORD *)(v17 + 16) = HitEntityAtCollisionIndex;
      MEMORY[0x22076D160](HitEntityAtCollisionIndex, v17);
      swift_release();
      goto LABEL_19;
    }
    v16 = makeEntity(for:)(HitEntityAtCollisionIndex);
LABEL_18:
    v17 = v16;
LABEL_19:
    ++v15;
    v19 = v34;
    v18 = v35;
    v20 = v33;
    HIDWORD(v18) = v32;
    HIDWORD(v19) = v31;
    HIDWORD(v20) = v30;
    v36[0] = v4;
    v36[1] = v17;
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v26;
    a2(v36);
    swift_release();
    swift_release();
    if (v14 == v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

void Entity.teleportCharacter(to:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  void *v12;

  RECharacterControllerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECharacterControllerComponentStateGetComponentType();
    REEntityGetOrAddComponentByClass();
    if (a1)
    {
      swift_retain();
      SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable)
        goto LABEL_10;
      v4 = SceneNullable;
      v5 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v5)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v4);
      }
      v6 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v6)
LABEL_10:
        v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      v6 = 0;
    }
    *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
    simd_float4x4.transform(position:)(a2, v7, v8, v9, v10);
    RECharacterControllerComponentSetPosition();
    swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v12 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

  }
}

uint64_t Entity.characterController.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for Entity.characterController : Entity@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  __int128 v4;
  double result;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;
  char v9;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v6);
  swift_release();
  v2 = v8;
  v3 = v9;
  v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  result = *(double *)&v7;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = v3;
  return result;
}

uint64_t key path setter for Entity.characterController : Entity(uint64_t a1)
{
  _BYTE v2[64];

  outlined init with take of CharacterControllerComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

uint64_t Entity.characterController.setter(uint64_t a1)
{
  _BYTE v2[64];

  outlined init with take of CharacterControllerComponent?(a1, (uint64_t)v2);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v2);
  return swift_release();
}

void (*Entity.characterController.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0xC8uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 16);
  v3[24] = v1;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v4);
  swift_release();
  return Entity.characterController.modify;
}

void Entity.characterController.modify(void **a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = (uint64_t)*a1 + 64;
  v4 = (uint64_t)*a1 + 128;
  if ((a2 & 1) != 0)
    v5 = (uint64_t)v2;
  else
    v5 = v3;
  outlined init with take of CharacterControllerComponent?(v4, v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v5);
  swift_release();
  free(v2);
}

uint64_t Entity.characterControllerState.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

double key path getter for Entity.characterControllerState : Entity@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  swift_release();
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t key path setter for Entity.characterControllerState : Entity(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2, v3);
  return swift_release();
}

uint64_t Entity.characterControllerState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2, v3);
  return swift_release();
}

void (*Entity.characterControllerState.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x20uLL);
  *a1 = v3;
  v3[3] = v1;
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v3);
  swift_release();
  return Entity.characterControllerState.modify;
}

void Entity.characterControllerState.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  v4 = *((_BYTE *)*a1 + 16);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v3, v4);
  swift_release();
  free(v1);
}

uint64_t outlined init with take of CharacterControllerComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CharacterControllerComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 simd_float4x4.decompose()(float32x4_t a1, int32x4_t a2, int8x16_t a3, __n128 a4)
{
  REDecomposeMatrix();
  simd_float4x4.scale.getter(a1, a2, a3);
  return a4;
}

double static simd_float4x4.identity.getter()
{
  return *(double *)&_PromotedConst_1;
}

double simd_float4x4.init(translation:)()
{
  return *(double *)&_PromotedConst_5;
}

double simd_float4x4.translation.getter(double a1, double a2, double a3, double a4)
{
  return a4;
}

__n64 simd_float4x4.scale.getter(float32x4_t a1, int32x4_t a2, int8x16_t a3)
{
  float32x4_t v3;
  BOOL v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  __n64 result;

  v3 = vmulq_f32(a1, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(a3, a3, 0xCuLL), a3, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a2, a2), (int8x16_t)a2, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a3, (int32x4_t)a3), a3, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)a2, (int8x16_t)a2, 0xCuLL), (int8x16_t)a2, 8uLL)));
  v4 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0] <= 0.0;
  v5 = -1.0;
  if (!v4)
    v5 = 1.0;
  v6 = vmulq_f32(a1, a1);
  v7 = vmulq_f32((float32x4_t)a2, (float32x4_t)a2);
  result.n64_f32[0] = sqrtf(v6.f32[2] + vaddv_f32(*(float32x2_t *)v6.f32)) * v5;
  result.n64_f32[1] = sqrtf(v7.f32[2] + vaddv_f32(*(float32x2_t *)v7.f32)) * v5;
  return result;
}

double simd_float4x4.rotation.getter()
{
  REDecomposeMatrix();
  return 0.0;
}

double simd_float4x4.init(scale:)(float a1)
{
  double v1;

  HIDWORD(v1) = vdupq_lane_s32(0, 0).i32[1];
  *(float *)&v1 = a1;
  return v1;
}

void __swiftcall simd_float3x3.init(_:)(simd_float3x3 *__return_ptr retstr, simd_float4x4 *a2)
{
  simd_float3 v2;
  simd_float3 v3;
  simd_float3 v4;

  v2.i32[3] = 0;
  v3.i32[3] = 0;
  v4.i32[3] = 0;
  retstr->columns[0] = v2;
  retstr->columns[1] = v3;
  retstr->columns[2] = v4;
}

double simd_float4x4.init(rows:)(int32x4_t a1, int32x4_t a2, int32x4_t a3, int32x4_t a4)
{
  double result;

  *(_QWORD *)&result = vzip1q_s32(vzip1q_s32(a1, a3), vzip1q_s32(a2, a4)).u64[0];
  return result;
}

void __swiftcall simd_float4x4.init(rows:)(simd_float4x4 *__return_ptr retstr, Swift::tuple_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float_tuple_Float_Float_Float_Float *rows)
{
  ;
}

float32x4_t simd_float4x4.scale(_:)(float32x4_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t result;

  v2 = vmulq_lane_f32(v1[1], *(float32x2_t *)a1.f32, 1);
  *v1 = vmulq_n_f32(*v1, a1.f32[0]);
  v1[1] = v2;
  result = vmulq_laneq_f32(v1[2], a1, 2);
  v1[2] = result;
  return result;
}

float32x4_t simd_float4x4.translate(_:)(float32x4_t a1)
{
  float32x4_t *v1;
  float32x4_t result;

  result = vaddq_f32(v1[3], a1);
  result.i32[3] = HIDWORD(*(_OWORD *)&v1[3]);
  v1[3] = result;
  return result;
}

double simd_float4x4.scaled(_:)(float a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vmulq_n_f32(a2, a1).u64[0];
  return result;
}

double simd_float4x4.translated(_:)(double a1, double a2)
{
  return a2;
}

double key path setter for simd_float4x4.scale : simd_float4x4(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;
  float32x4_t v10;
  float32x4_t v11;

  v3 = *a2;
  v10 = *a2;
  v11 = *a1;
  v3.i32[3] = 0;
  *(double *)v4.i64 = simd_normalize(v3);
  v4.i32[3] = v10.i32[3];
  *a2 = v4;
  v5 = a2[1];
  v10.i32[3] = v5.i32[3];
  v5.i32[3] = 0;
  *(double *)v6.i64 = simd_normalize(v5);
  v6.i32[3] = v10.i32[3];
  a2[1] = v6;
  v7 = a2[2];
  v10.i32[3] = v7.i32[3];
  v7.i32[3] = 0;
  *(double *)v8.i64 = simd_normalize(v7);
  v8.i32[3] = v10.i32[3];
  a2[2] = v8;
  *(_QWORD *)&result = simd_float4x4.scale(_:)(v11).u64[0];
  return result;
}

double simd_float4x4.scale.setter(float32x4_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  int32x4_t v7;
  float32x2_t v8;
  float32x2_t v9;
  float32x4_t v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  double result;

  v2 = v1[1];
  v3 = (int32x4_t)vmulq_f32(*v1, *v1);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v6 = vmulq_n_f32(*v1, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  v6.i32[3] = HIDWORD(*(unsigned __int128 *)v1);
  v7 = (int32x4_t)vmulq_f32(v2, v2);
  v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
  v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
  v10 = vmulq_n_f32(v2, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]);
  v10.i32[3] = v2.i32[3];
  v11 = v1[2];
  v12 = (int32x4_t)vmulq_f32(v11, v11);
  *v1 = v6;
  v1[1] = v10;
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
  *(float32x2_t *)v6.f32 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  *(float32x2_t *)v6.f32 = vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32)));
  v13 = vmulq_n_f32(v11, vmul_f32(*(float32x2_t *)v6.f32, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(*(float32x2_t *)v6.f32, *(float32x2_t *)v6.f32))).f32[0]);
  v13.i32[3] = v11.i32[3];
  v1[2] = v13;
  *(_QWORD *)&result = simd_float4x4.scale(_:)(a1).u64[0];
  return result;
}

void (*simd_float4x4.scale.modify(_QWORD *a1))(float32x4_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  *(__n64 *)&v4 = simd_float4x4.scale.getter(*(float32x4_t *)v1, *(int32x4_t *)(v1 + 16), *(int8x16_t *)(v1 + 32));
  *(_OWORD *)v3 = v4;
  return simd_float4x4.scale.modify;
}

void simd_float4x4.scale.modify(float32x4_t **a1)
{
  float32x4_t *v1;

  v1 = *a1;
  simd_float4x4.scale.setter(**a1);
  free(v1);
}

void simd_float4x4.rotation.setter(float32x4_t a1)
{
  uint64_t v1;
  float v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double v7;

  v7 = *(double *)(v1 + 48);
  LODWORD(v2) = simd_float4x4.scale.getter(*(float32x4_t *)v1, *(int32x4_t *)(v1 + 16), *(int8x16_t *)(v1 + 32)).n64_u32[0];
  *(double *)&v3 = specialized simd_float4x4.init(translation:rotation:scale:)(v7, a1, v2);
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
}

void (*simd_float4x4.rotation.modify(_QWORD *a1))(float32x4_t **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x48uLL);
  *a1 = v3;
  v3[8] = v1;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  REDecomposeMatrix();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 2);
  return simd_float4x4.rotation.modify;
}

void simd_float4x4.rotation.modify(float32x4_t **a1)
{
  float32x4_t *v1;
  uint64_t v2;
  float v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  float32x4_t v9;

  v1 = *a1;
  v2 = (*a1)[4].i64[0];
  v8 = *(double *)(v2 + 48);
  v9 = **a1;
  LODWORD(v3) = simd_float4x4.scale.getter(*(float32x4_t *)v2, *(int32x4_t *)(v2 + 16), *(int8x16_t *)(v2 + 32)).n64_u32[0];
  *(double *)&v4 = specialized simd_float4x4.init(translation:rotation:scale:)(v8, v9, v3);
  *(_OWORD *)v2 = v4;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v6;
  *(_OWORD *)(v2 + 48) = v7;
  free(v1);
}

__n128 simd_float4x4.translation.setter(__n128 result)
{
  __n128 *v1;

  result.n128_u32[3] = v1[3].n128_u32[3];
  v1[3] = result;
  return result;
}

__n128 (*simd_float4x4.translation.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;
  __int128 v4;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v4 = *(_OWORD *)(v1 + 48);
  HIDWORD(v4) = 0;
  v3[2] = v1;
  *(_OWORD *)v3 = v4;
  return simd_float4x4.translation.modify;
}

__n128 simd_float4x4.translation.modify(void **a1)
{
  _QWORD *v1;
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v1 = *a1;
  v2 = v1[2];
  v3 = *(_OWORD *)v1;
  HIDWORD(v3) = *(_DWORD *)(v2 + 60);
  *(_OWORD *)(v2 + 48) = v3;
  free(v1);
  return result;
}

double specialized simd_float4x4.init(translation:rotation:scale:)(double a1, float32x4_t a2, float a3)
{
  float32x4_t v3;
  double result;

  *(double *)v3.i64 = simd_matrix4x4(a2);
  *(_QWORD *)&result = vmulq_n_f32(v3, a3).u64[0];
  return result;
}

double simd_normalize(float32x4_t a1)
{
  int32x4_t v1;
  float32x2_t v2;
  float32x2_t v3;
  double result;

  v1 = (int32x4_t)vmulq_f32(a1, a1);
  v1.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v1, 2), vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1))).u32[0];
  v2 = vrsqrte_f32((float32x2_t)v1.u32[0]);
  v3 = vmul_f32(v2, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v2, v2)));
  *(_QWORD *)&result = vmulq_n_f32(a1, vmul_f32(v3, vrsqrts_f32((float32x2_t)v1.u32[0], vmul_f32(v3, v3))).f32[0]).u64[0];
  return result;
}

void sub_21BC7059C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;

  *(__n64 *)&v3 = simd_float4x4.scale.getter(*(float32x4_t *)a1, *(int32x4_t *)(a1 + 16), *(int8x16_t *)(a1 + 32));
  *a2 = v3;
}

double sub_21BC705CC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  REDecomposeMatrix();
  result = 0.0;
  *a1 = 0u;
  return result;
}

void sub_21BC70648(float32x4_t *a1, uint64_t a2)
{
  float v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  float32x4_t v9;

  v8 = *(double *)(a2 + 48);
  v9 = *a1;
  LODWORD(v3) = simd_float4x4.scale.getter(*(float32x4_t *)a2, *(int32x4_t *)(a2 + 16), *(int8x16_t *)(a2 + 32)).n64_u32[0];
  *(double *)&v4 = specialized simd_float4x4.init(translation:rotation:scale:)(v8, v9, v3);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
}

__n128 sub_21BC70698@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[3];
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

__n128 sub_21BC706A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  result.n128_u32[3] = a2[3].n128_u32[3];
  a2[3] = result;
  return result;
}

uint64_t GeometricPin.pose.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  int SkeletalJointPinPose;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  __int128 v10;
  __int128 v11;

  result = swift_weakLoadStrong();
  if (!result)
    goto LABEL_6;
  if (!*(_QWORD *)(v1 + 32))
  {
    result = swift_release();
LABEL_6:
    v9 = 0;
    v7 = *(_OWORD *)(v1 + 48);
    v8 = *(_OWORD *)(v1 + 64);
    goto LABEL_8;
  }
  String.utf8CString.getter();
  SkeletalJointPinPose = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if (SkeletalJointPinPose)
  {
    REPoseMultiply();
    v10 = v6;
    v11 = v5;
    result = swift_release();
    v8 = v10;
    v7 = v11;
    v9 = 0;
  }
  else
  {
    result = swift_release();
    v9 = 1;
    v8 = 0uLL;
    v7 = 0uLL;
  }
LABEL_8:
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  return result;
}

uint64_t GeometricPin.init(named:offsetPosition:offsetOrientation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>)
{
  uint64_t result;

  swift_weakInit();
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u64[0] = 0;
  a3[3] = a4;
  a3[4] = a5;
  swift_weakAssign();
  a3->n128_u64[1] = a1;
  a3[1].n128_u64[0] = a2;
  result = swift_bridgeObjectRelease();
  a3[1].n128_u64[1] = 0;
  a3[2].n128_u64[0] = 0;
  return result;
}

uint64_t GeometricPin.init(named:skeletalJointName:offsetPosition:offsetOrientation:)@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  uint64_t result;

  swift_weakInit();
  a5[1].n128_u64[1] = 0;
  a5[2].n128_u64[0] = 0;
  a5[3] = a6;
  a5[4] = a7;
  swift_weakAssign();
  a5->n128_u64[1] = a1;
  a5[1].n128_u64[0] = a2;
  result = swift_bridgeObjectRelease();
  a5[1].n128_u64[1] = a3;
  a5[2].n128_u64[0] = a4;
  return result;
}

uint64_t GeometricPin.position.getter()
{
  uint64_t v0;
  char SkeletalJointPinPose;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;

  if (!swift_weakLoadStrong())
    return *(_OWORD *)(v0 + 48);
  if (!*(_QWORD *)(v0 + 32))
  {
    swift_release();
    return *(_OWORD *)(v0 + 48);
  }
  String.utf8CString.getter();
  SkeletalJointPinPose = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    swift_release();
    return 0;
  }
  REPoseMultiply();
  v5 = v2;
  swift_release();
  *(_QWORD *)&v3 = v5;
  return v3;
}

uint64_t GeometricPin.orientation.getter()
{
  uint64_t v0;
  char SkeletalJointPinPose;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;

  if (!swift_weakLoadStrong())
    return *(_OWORD *)(v0 + 64);
  if (!*(_QWORD *)(v0 + 32))
  {
    swift_release();
    return *(_OWORD *)(v0 + 64);
  }
  String.utf8CString.getter();
  SkeletalJointPinPose = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    swift_release();
    return 0;
  }
  REPoseMultiply();
  v5 = v2;
  swift_release();
  *(_QWORD *)&v3 = v5;
  return v3;
}

uint64_t GeometricPin.position(relativeTo:)(uint64_t a1)
{
  _BYTE v2[48];
  uint64_t v3;
  char v4;

  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v2);
  outlined init with take of Transform?((uint64_t)v2, (uint64_t)&v3, &demangling cache variable for type metadata for REPoseF?);
  if (v4)
    return 0;
  else
    return v3;
}

uint64_t GeometricPin.pose(relativeTo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char SkeletalJointPinPose;
  __int128 v7;
  float32x4_t v8;
  uint64_t Strong;
  double v10;
  __n128 v11;
  __int128 v12;
  unsigned __int32 v13;
  uint64_t result;
  __int128 v15;
  char v16;
  __n128 v17;
  __int128 v18;
  float32x4_t v19;
  __n128 v20;
  __int128 v21;
  unsigned __int32 v22;

  v3 = v2;
  if (!swift_weakLoadStrong())
    goto LABEL_6;
  if (!*(_QWORD *)(v3 + 32))
  {
    swift_release();
LABEL_6:
    v19 = *(float32x4_t *)(v3 + 64);
    v21 = *(_OWORD *)(v3 + 48);
    goto LABEL_7;
  }
  String.utf8CString.getter();
  SkeletalJointPinPose = REEntityTryGetSkeletalJointPinPose();
  swift_release();
  if ((SkeletalJointPinPose & 1) == 0)
  {
    result = swift_release();
    v16 = 1;
    v15 = 0uLL;
    v17 = 0uLL;
    goto LABEL_8;
  }
  REPoseMultiply();
  v19 = v8;
  v21 = v7;
  swift_release();
LABEL_7:
  Strong = swift_weakLoadStrong();
  LODWORD(v10) = DWORD2(v21);
  v11 = transformPose(_:from:to:)(Strong, a1, *(double *)&v21, v10, v19);
  v18 = v12;
  v20 = v11;
  v22 = v13;
  result = swift_release();
  v15 = v18;
  v17 = v20;
  v16 = 0;
  v17.n128_u32[2] = v22;
LABEL_8:
  *(__n128 *)a2 = v17;
  *(_OWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 32) = v16;
  return result;
}

uint64_t GeometricPin.orientation(relativeTo:)(uint64_t a1)
{
  _BYTE v2[48];
  _BYTE v3[16];
  uint64_t v4;
  char v5;

  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v2);
  outlined init with take of Transform?((uint64_t)v2, (uint64_t)v3, &demangling cache variable for type metadata for REPoseF?);
  if (v5)
    return 0;
  else
    return v4;
}

uint64_t GeometricPin.entity.getter()
{
  return swift_weakLoadStrong();
}

uint64_t GeometricPin.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t GeometricPin.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*GeometricPin.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 GeometricPin.offsetPosition.getter()
{
  __n128 *v0;

  return v0[3];
}

void GeometricPin.offsetPosition.setter(__n128 a1)
{
  __n128 *v1;

  v1[3] = a1;
}

void (*GeometricPin.offsetPosition.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 48);
  return GeometricPin.offsetPosition.modify;
}

void GeometricPin.offsetPosition.modify(void **a1)
{
  _QWORD *v1;

  v1 = *a1;
  *(_OWORD *)(v1[2] + 48) = *(_OWORD *)v1;
  free(v1);
}

__n128 GeometricPin.offsetOrientation.getter()
{
  __n128 *v0;

  return v0[4];
}

void GeometricPin.offsetOrientation.setter(__n128 a1)
{
  __n128 *v1;

  v1[4] = a1;
}

void (*GeometricPin.offsetOrientation.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x18uLL);
  *a1 = v3;
  v3[2] = v1;
  *(_OWORD *)v3 = *(_OWORD *)(v1 + 64);
  return GeometricPin.offsetOrientation.modify;
}

void GeometricPin.offsetOrientation.modify(void **a1)
{
  _QWORD *v1;

  v1 = *a1;
  *(_OWORD *)(v1[2] + 64) = *(_OWORD *)v1;
  free(v1);
}

uint64_t GeometricPin.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

__n128 transformPose(_:from:to:)(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v18;

  *(double *)v5.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, a2);
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16 = v8;
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of transformPose(_:from:to:));
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a5, v9);
  v18 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v10.f32[0]), v14, *(float32x2_t *)v10.f32, 1), v15, v10, 2), v16, v10, 3);
  REDecomposeMatrix();
  return (__n128)v18;
}

void GeometricPin.alignment(to:relativeTo:)(uint64_t a1@<X1>, float32x4_t *a2@<X8>)
{
  float32x4_t v4;
  char v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  simd_float4 v23;
  simd_float4 v24;
  simd_float4 v25;
  float32x4_t v26;
  double v27;
  simd_float4 v28;
  _BYTE v29[48];
  _BYTE v30[48];
  _BYTE v31[48];
  _BYTE v32[48];
  _BYTE v33[16];
  float32x4_t v34;
  char v35;
  double v36[4];
  char v37;
  _BYTE v38[16];
  float32x4_t v39;
  char v40;
  double v41[4];
  char v42;
  simd_float4x4 v43;
  simd_float4x4 v44;

  GeometricPin.pose(relativeTo:)(a1, (uint64_t)v29);
  outlined init with take of Transform?((uint64_t)v29, (uint64_t)v41, &demangling cache variable for type metadata for REPoseF?);
  v4 = 0uLL;
  if ((v42 & 1) != 0)
  {
    v5 = 1;
    v6 = 0uLL;
    v7 = 0uLL;
    v8 = 0uLL;
  }
  else
  {
    v27 = v41[0];
    GeometricPin.pose(relativeTo:)(a1, (uint64_t)v30);
    outlined init with take of Transform?((uint64_t)v30, (uint64_t)v38, &demangling cache variable for type metadata for REPoseF?);
    if ((v40 & 1) != 0)
      goto LABEL_8;
    v9 = v39;
    if (one-time initialization token for identity != -1)
    {
      v26 = v39;
      swift_once();
      v9 = v26;
    }
    *(double *)v10.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v27, v9, 1.0);
    v25 = v11;
    v28 = v10;
    v23 = v13;
    v24 = v12;
    GeometricPin.pose(relativeTo:)(a1, (uint64_t)v31);
    outlined init with take of Transform?((uint64_t)v31, (uint64_t)v36, &demangling cache variable for type metadata for REPoseF?);
    if ((v37 & 1) != 0
      || (v20 = v36[0],
          GeometricPin.pose(relativeTo:)(a1, (uint64_t)v32),
          outlined init with take of Transform?((uint64_t)v32, (uint64_t)v33, &demangling cache variable for type metadata for REPoseF?), (v35 & 1) != 0))
    {
LABEL_8:
      v5 = 1;
      v6 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v4 = 0uLL;
    }
    else
    {
      *(double *)v14.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(v20, v34, 1.0);
      v18 = v14;
      v19 = v15;
      v21 = v16;
      v22 = v17;
      v43.columns[1] = v25;
      v43.columns[0] = v28;
      v43.columns[3] = v23;
      v43.columns[2] = v24;
      v44 = __invert_f4(v43);
      v5 = 0;
      v4 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[0].f32[0]), v19, *(float32x2_t *)v44.columns[0].f32, 1), v21, (float32x4_t)v44.columns[0], 2), v22, (float32x4_t)v44.columns[0], 3);
      v6 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[1].f32[0]), v19, *(float32x2_t *)v44.columns[1].f32, 1), v21, (float32x4_t)v44.columns[1], 2), v22, (float32x4_t)v44.columns[1], 3);
      v7 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[2].f32[0]), v19, *(float32x2_t *)v44.columns[2].f32, 1), v21, (float32x4_t)v44.columns[2], 2), v22, (float32x4_t)v44.columns[2], 3);
      v8 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, v44.columns[3].f32[0]), v19, *(float32x2_t *)v44.columns[3].f32, 1), v21, (float32x4_t)v44.columns[3], 2), v22, (float32x4_t)v44.columns[3], 3);
    }
  }
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v8;
  a2[4].i8[0] = v5;
}

Swift::Int GeometricPin.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GeometricPin()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GeometricPin()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GeometricPin()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t HasTransform.align(_:to:)@<X0>(float32x4_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  float32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  double v13;
  float32x4_t v14;
  double v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26[4];
  char v27;
  __int128 v28;
  char v29;

  v2 = v1;
  result = swift_weakLoadStrong();
  v5 = 0uLL;
  if (result)
  {
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(v2 + 16);
    result = swift_release();
    if (v6 == v7)
    {
      v12 = HasHierarchy.parent.getter();
      GeometricPin.alignment(to:relativeTo:)(v12, v26);
      v24 = v26[1];
      v25 = v26[0];
      v22 = v26[3];
      v23 = v26[2];
      v8 = v27;
      swift_release();
      result = outlined init with take of Transform?((uint64_t)v26, (uint64_t)&v28, &demangling cache variable for type metadata for simd_float4x4?);
      if ((v29 & 1) == 0)
      {
        v13 = HasTransform.transform.getter();
        specialized simd_float4x4.init(translation:rotation:scale:)(v15, v14, *(float *)&v13);
        REMakeSRTFromMatrix();
        if (one-time initialization token for identity != -1)
        {
          v20 = v16;
          v21 = v17;
          v19 = v18;
          swift_once();
          v18 = v19;
          v16 = v20;
          v17 = v21;
        }
        result = HasTransform.transform.setter(v16, v17, v18);
      }
      v9 = v24;
      v5 = v25;
      v11 = v22;
      v10 = v23;
    }
    else
    {
      v8 = 1;
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 0uLL;
      v5 = 0uLL;
    }
  }
  else
  {
    v8 = 1;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *a1 = v5;
  a1[1] = v9;
  a1[2] = v10;
  a1[3] = v11;
  a1[4].i8[0] = v8;
  return result;
}

BOOL specialized static GeometricPin.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  float v12;
  uint64_t v13;
  BOOL v14;
  float v15;
  float v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[80];
  _BYTE v30[80];
  _BYTE v31[64];
  __int128 v32;
  _BYTE v33[64];
  __int128 v34;
  _BYTE v35[48];
  __int128 v36;
  _BYTE v37[48];
  __int128 v38;
  _BYTE v39[24];
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];
  uint64_t v43;
  uint64_t v44;

  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    outlined init with copy of GeometricPin(a1, (uint64_t)v42);
    outlined init with copy of GeometricPin(a2, (uint64_t)v39);
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined init with copy of GeometricPin(a1, (uint64_t)v42);
    outlined init with copy of GeometricPin(a2, (uint64_t)v39);
    if ((v5 & 1) == 0)
    {
      outlined destroy of GeometricPin((uint64_t)v39);
      outlined destroy of GeometricPin((uint64_t)v42);
LABEL_17:
      outlined init with copy of GeometricPin(a1, (uint64_t)v37);
      outlined init with copy of GeometricPin(a2, (uint64_t)v35);
      goto LABEL_18;
    }
  }
  v6 = v41;
  if (!v44)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    if (!v6)
      goto LABEL_14;
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  if (!v41)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    goto LABEL_16;
  }
  if (v43 == v40 && v44 == v41)
  {
    swift_bridgeObjectRetain();
    outlined destroy of GeometricPin((uint64_t)v39);
    outlined destroy of GeometricPin((uint64_t)v42);
    swift_bridgeObjectRelease();
LABEL_14:
    outlined init with copy of GeometricPin(a1, (uint64_t)v37);
    outlined init with copy of GeometricPin(a2, (uint64_t)v35);
    goto LABEL_25;
  }
  v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  outlined destroy of GeometricPin((uint64_t)v39);
  outlined destroy of GeometricPin((uint64_t)v42);
  swift_bridgeObjectRelease();
  outlined init with copy of GeometricPin(a1, (uint64_t)v37);
  outlined init with copy of GeometricPin(a2, (uint64_t)v35);
  if ((v8 & 1) == 0)
  {
LABEL_18:
    outlined destroy of GeometricPin((uint64_t)v35);
    outlined destroy of GeometricPin((uint64_t)v37);
LABEL_19:
    outlined init with copy of GeometricPin(a1, (uint64_t)v33);
    outlined init with copy of GeometricPin(a2, (uint64_t)v31);
    goto LABEL_20;
  }
LABEL_25:
  v23 = v38;
  outlined destroy of GeometricPin((uint64_t)v37);
  v21 = v36;
  outlined destroy of GeometricPin((uint64_t)v35);
  v9 = 0;
  while (1)
  {
    v27 = v23;
    v11 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v28 = v21;
    v12 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v10 = v11 == v12;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v10)
        break;
      if (v9 == 2)
        goto LABEL_19;
      v10 = 0;
    }
  }
  outlined init with copy of GeometricPin(a1, (uint64_t)v33);
  outlined init with copy of GeometricPin(a2, (uint64_t)v31);
  if (v11 != v12)
  {
LABEL_20:
    outlined destroy of GeometricPin((uint64_t)v31);
    outlined destroy of GeometricPin((uint64_t)v33);
LABEL_21:
    outlined init with copy of GeometricPin(a1, (uint64_t)v30);
    outlined init with copy of GeometricPin(a2, (uint64_t)v29);
LABEL_22:
    outlined destroy of GeometricPin((uint64_t)v29);
    outlined destroy of GeometricPin((uint64_t)v30);
    return 0;
  }
  v24 = v34;
  outlined destroy of GeometricPin((uint64_t)v33);
  v22 = v32;
  outlined destroy of GeometricPin((uint64_t)v31);
  v13 = 0;
  v14 = 1;
  while (1)
  {
    while (!v14)
    {
      if (v13 == 3)
        goto LABEL_21;
      v14 = 0;
      ++v13;
    }
    v25 = v24;
    v15 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    v26 = v22;
    v16 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    v14 = v15 == v16;
    if (v13 == 3)
      break;
    ++v13;
  }
  outlined init with copy of GeometricPin(a1, (uint64_t)v30);
  outlined init with copy of GeometricPin(a2, (uint64_t)v29);
  if (v15 != v16)
    goto LABEL_22;
  Strong = swift_weakLoadStrong();
  v18 = swift_weakLoadStrong();
  outlined destroy of GeometricPin((uint64_t)v29);
  outlined destroy of GeometricPin((uint64_t)v30);
  if (Strong)
  {
    if (v18)
    {
      v19 = *(_QWORD *)(Strong + 16);
      v20 = *(_QWORD *)(v18 + 16);
      swift_release();
      swift_release();
      return v19 == v20;
    }
LABEL_43:
    swift_release();
    return 0;
  }
  if (v18)
    goto LABEL_43;
  return 1;
}

unint64_t lazy protocol witness table accessor for type GeometricPin and conformance GeometricPin()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin;
  if (!lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for GeometricPin, &type metadata for GeometricPin);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometricPin and conformance GeometricPin);
  }
  return result;
}

uint64_t sub_21BC717CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Strong;
  uint64_t result;
  _BYTE v5[80];

  outlined init with copy of GeometricPin(a1, (uint64_t)v5);
  Strong = swift_weakLoadStrong();
  result = outlined destroy of GeometricPin((uint64_t)v5);
  *a2 = Strong;
  return result;
}

uint64_t sub_21BC71810()
{
  return swift_weakAssign();
}

__n128 sub_21BC71820@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[3];
  *a2 = result;
  return result;
}

__n128 sub_21BC7182C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[3] = *a1;
  return result;
}

__n128 sub_21BC71838@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = a1[4];
  *a2 = result;
  return result;
}

__n128 sub_21BC71844(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[4] = *a1;
  return result;
}

uint64_t destroy for GeometricPin()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GeometricPin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  swift_weakCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GeometricPin(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(swift_weakCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for GeometricPin(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = swift_weakTakeInit();
  *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a2 + 24);
  result = *(__n128 *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(v3 + 48) = result;
  *(_OWORD *)(v3 + 64) = v5;
  return result;
}

uint64_t assignWithTake for GeometricPin(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  swift_weakTakeAssign();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for GeometricPin(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GeometricPin(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GeometricPin()
{
  return &type metadata for GeometricPin;
}

__n128 __RKScenePhysics.gravity.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void __RKScenePhysics.gravity.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*__RKScenePhysics.gravity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKScenePhysics.adaptiveTimeStep.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t __RKScenePhysics.adaptiveTimeStep.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*__RKScenePhysics.adaptiveTimeStep.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t __RKScenePhysics.Registration.componentType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t __RKScenePhysics.Registration.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  int v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  REStructBuilderCreate();
  if (!REStructBuilderInit()
    || (REStructBuilderAddMemberDataTypeWithTag(),
        REStructBuilderAddMemberDataTypeWithTag(),
        (v1 = RECIntrospectionStructRegister()) == 0))
  {
    lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
LABEL_6:
    REStructBuilderDestroy();
    type metadata accessor for __RKScenePhysics.Registration();
    swift_deallocPartialClassInstance();
    return v0;
  }
  *(_QWORD *)(v0 + 16) = v1;
  v4 = xmmword_21BE6B410;
  v5 = 1;
  v6 = &v4;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v11 = v1;
  v12 = 0;
  v2 = RECustomComponentTypeCreate();
  if (!v2)
  {
    lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError();
    swift_allocError();
    swift_willThrow();
    goto LABEL_6;
  }
  *(_QWORD *)(v0 + 24) = v2;
  REStructBuilderDestroy();
  return v0;
}

uint64_t __RKScenePhysics.Registration.deinit()
{
  uint64_t v0;

  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return v0;
}

uint64_t __RKScenePhysics.Registration.__deallocating_deinit()
{
  RECustomComponentTypeDestroy();
  RECIntrospectionStructUnregister();
  return swift_deallocClassInstance();
}

uint64_t static __RKScenePhysics.registration.getter()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t static __RKScenePhysics.registration.setter(void *a1)
{
  swift_beginAccess();
  static __RKScenePhysics.registration = a1;
  return swift_release();
}

uint64_t (*static __RKScenePhysics.registration.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Scene.getOrAddInternalComponentPointer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  if (!static __RKScenePhysics.registration)
    return 0;
  v0 = *((_QWORD *)static __RKScenePhysics.registration + 3);
  RESceneGetComponentsOfCustomType();
  if (v1 >= 1)
    return RECustomComponentGetObject();
  swift_retain();
  if (!Scene.AnchorCollection.endIndex.getter())
  {
    swift_release();
    REEntityCreate();
    RESceneAddEntity();
    swift_retain();
    if (!Scene.AnchorCollection.endIndex.getter())
    {
      result = swift_release();
      __break(1u);
      return result;
    }
  }
  v3 = Scene.AnchorCollection.subscript.getter(0);
  swift_release();
  v4 = *(_QWORD *)(v3 + 16);
  swift_release();
  result = MEMORY[0x22076CF2C](v4, v0);
  if (result)
    return RECustomComponentGetObject();
  return result;
}

uint64_t Scene.__gravity.getter()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  if (!static __RKScenePhysics.registration)
    return 0;
  RESceneGetComponentsOfCustomType();
  if (!v0)
    return 0;
  result = RECustomComponentGetObject();
  if (result)
    return *(_QWORD *)result;
  return result;
}

_QWORD *Scene.__gravity.setter(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    if ((a3 & 1) != 0)
    {
      result = (_QWORD *)REEntityGetCustomComponent();
      if (result)
        return (_QWORD *)REEntityRemoveComponentByClass();
    }
    else
    {
      result = (_QWORD *)Scene.getOrAddInternalComponentPointer()();
      if (result)
      {
        *result = a1;
        result[1] = a2;
      }
    }
  }
  return result;
}

void (*Scene.__gravity.modify(_QWORD *a1))(uint64_t **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *Object;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v4)
    && (Object = (uint64_t *)RECustomComponentGetObject()) != 0)
  {
    v6 = 0;
    v7 = *Object;
    v8 = Object[1];
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v6 = 1;
  }
  *v3 = v7;
  v3[1] = v8;
  *((_BYTE *)v3 + 16) = v6;
  return Scene.__gravity.modify;
}

void Scene.__gravity.modify(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = **a1;
  v3 = (*a1)[1];
  if (static __RKScenePhysics.registration)
  {
    if ((v1[2] & 1) != 0)
    {
      if (REEntityGetCustomComponent())
        REEntityRemoveComponentByClass();
    }
    else
    {
      v4 = (_QWORD *)Scene.getOrAddInternalComponentPointer()();
      if (v4)
      {
        *v4 = v2;
        v4[1] = v3;
      }
    }
  }
  free(v1);
}

uint64_t Scene.__adaptiveTimeStep.getter()
{
  uint64_t v0;
  uint64_t Object;

  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v0)
    && (Object = RECustomComponentGetObject()) != 0)
  {
    return *(unsigned __int8 *)(Object + 16);
  }
  else
  {
    return 2;
  }
}

uint64_t Scene.__adaptiveTimeStep.setter(char a1)
{
  uint64_t result;

  result = swift_beginAccess();
  if (static __RKScenePhysics.registration)
  {
    if (a1 == 2)
    {
      result = REEntityGetCustomComponent();
      if (result)
        return REEntityRemoveComponentByClass();
    }
    else
    {
      result = Scene.getOrAddInternalComponentPointer()();
      if (result)
        *(_BYTE *)(result + 16) = a1 & 1;
    }
  }
  return result;
}

void (*Scene.__adaptiveTimeStep.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t Object;
  char v7;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = v3 + 32;
  *((_QWORD *)v3 + 3) = v1;
  swift_beginAccess();
  if (static __RKScenePhysics.registration
    && (RESceneGetComponentsOfCustomType(), v5)
    && (Object = RECustomComponentGetObject()) != 0)
  {
    v7 = *(_BYTE *)(Object + 16);
  }
  else
  {
    v7 = 2;
  }
  *v4 = v7;
  return Scene.__adaptiveTimeStep.modify;
}

void Scene.__adaptiveTimeStep.modify(uint64_t a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(unsigned __int8 *)(*(_QWORD *)a1 + 32);
  if (static __RKScenePhysics.registration)
  {
    if (v2 == 2)
    {
      if (REEntityGetCustomComponent())
        REEntityRemoveComponentByClass();
    }
    else
    {
      v3 = Scene.getOrAddInternalComponentPointer()();
      if (v3)
        *(_BYTE *)(v3 + 16) = v2 & 1;
    }
  }
  free(v1);
}

_UNKNOWN **associated type witness table accessor for InternalComponent.Registration : InternalComponentRegistryEntry in __RKScenePhysics()
{
  return &protocol witness table for __RKScenePhysics.Registration;
}

uint64_t sub_21BC722E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = Scene.__gravity.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

_QWORD *sub_21BC72318(uint64_t a1)
{
  return Scene.__gravity.setter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_21BC72348@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = Scene.__adaptiveTimeStep.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BC72370(char *a1)
{
  return Scene.__adaptiveTimeStep.setter(*a1);
}

uint64_t getEnumTagSinglePayload for __RKScenePhysics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for __RKScenePhysics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for __RKScenePhysics()
{
  return &type metadata for __RKScenePhysics;
}

uint64_t type metadata accessor for __RKScenePhysics.Registration()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKScenePhysics.Registration()
{
  return swift_lookUpClassMethod();
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = a3();
  if (!v3)
    return v5;
  return result;
}

_QWORD *specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKScenePhysics.Registration.RegistrationError, &type metadata for __RKScenePhysics.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError;
  if (!lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for __RKScenePhysics.Registration.RegistrationError, &type metadata for __RKScenePhysics.Registration.RegistrationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __RKScenePhysics.Registration.RegistrationError and conformance __RKScenePhysics.Registration.RegistrationError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for __RKScenePhysics.Registration.RegistrationError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC72560 + 4 * byte_21BE6B420[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC72580 + 4 * byte_21BE6B425[v4]))();
}

_BYTE *sub_21BC72560(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC72580(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC72588(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC72590(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC72598(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC725A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for __RKScenePhysics.Registration.RegistrationError()
{
  return &type metadata for __RKScenePhysics.Registration.RegistrationError;
}

uint64_t AudioPlaybackController._proto_fade(to:duration:)()
{
  Duration.components.getter();
  Duration.components.getter();
  REAudioPlayerComponentFadeTokenToGainWithDuration();
  return RENetworkMarkComponentDirty();
}

void static CharacterControllerStateComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 2102;
}

void CharacterControllerStateComponent.init()(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

__n128 CharacterControllerStateComponent.velocity.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

uint64_t CharacterControllerStateComponent.isOnGround.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t static CharacterControllerStateComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t result;
  __int128 v4;
  void *v5;
  __int128 v6;

  REComponentGetEntity();
  RECharacterControllerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RECharacterControllerComponentGetVelocity();
    v6 = v2;
    result = RECharacterControllerComponentOnGround();
    v4 = v6;
  }
  else
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v5 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    result = 0;
    v4 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = result;
  return result;
}

void protocol witness for static Component.__coreComponentType.getter in conformance CharacterControllerStateComponent(_DWORD *a1@<X8>)
{
  *a1 = 2102;
}

uint64_t CharacterControllerStateComponent.customMirror.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  char v15;

  v1 = type metadata accessor for Mirror.AncestorRepresentation();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = *(_OWORD *)v0;
  v14[1] = v14[0];
  v8 = *(_BYTE *)(v0 + 16);
  v15 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21BE50940;
  *(_QWORD *)(v9 + 32) = 0x756F72476E4F7369;
  *(_QWORD *)(v9 + 40) = 0xEA0000000000646ELL;
  v10 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v9 + 48) = v8;
  *(_QWORD *)(v9 + 72) = v10;
  *(_QWORD *)(v9 + 80) = 0x797469636F6C6576;
  *(_QWORD *)(v9 + 88) = 0xE800000000000000;
  *(_QWORD *)(v9 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
  v11 = swift_allocObject();
  *(_QWORD *)(v9 + 96) = v11;
  *(_OWORD *)(v11 + 16) = v14[0];
  v12 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE43C0], v1);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t sub_21BC72930()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for CharacterControllerStateComponent()
{
  return &type metadata for CharacterControllerStateComponent;
}

id __RCInteractionsController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __RCInteractionsController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Void __swiftcall __RCEntity.invokeCustomTrigger(named:overrides:)(Swift::String named, Swift::OpaquePointer_optional overrides)
{
  void *rawValue;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t SceneNullable;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  rawValue = overrides.value._rawValue;
  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  SceneNullable = REEntityGetSceneNullable();
  if (SceneNullable)
  {
    v6 = SceneNullable;
    v7 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v7)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v6);
    }
    Scene.__interactionService.getter();
    v9 = v8;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, _QWORD, void *, uint64_t, uint64_t))(v9 + 48))(countAndFlagsBits, object, 0, rawValue, ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

uint64_t __RCEntity.registerCustomAction(named:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;

  result = REEntityGetSceneNullable();
  if (result)
  {
    v9 = result;
    v10 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v10)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v9);
    }
    Scene.__interactionService.getter();
    v12 = v11;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, a2, a3, a4, ObjectType, v12);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t __RCEntity.__allocating_init()()
{
  swift_allocObject();
  return Entity.init()();
}

uint64_t __RCEntity.__allocating_init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v2;
}

uint64_t __RCEntity.init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v1;
}

uint64_t __RCEntity.deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return v0;
}

uint64_t __RCEntity.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RCInteractionsController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RCEntity()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RCEntity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RCEntity.invokeCustomTrigger(named:overrides:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of __RCEntity.registerCustomAction(named:action:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t sub_21BC72E14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString) -> ()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (id)MEMORY[0x220768C3C]();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);

}

uint64_t specialized static __RCInteractionsController.__invokeCustomTrigger(named:onEntityNamed:inSceneNamed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v8 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v8, (uint64_t)v17);
  v9 = v18;
  v10 = v19;
  __swift_project_boxed_opaque_existential_1(v17, v18);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  swift_bridgeObjectRetain();
  v12 = specialized Sequence.first(where:)(v11, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if (v12)
  {
    swift_retain();
    Scene.__interactionService.getter();
    v15 = v14;
    swift_release();
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(v15 + 48))(a1, a2, 0, 0, ObjectType, v15);
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t specialized static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t);
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v12 = specialized static __ServiceLocator.shared.getter() + 80;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v12, (uint64_t)v23);
  v13 = v24;
  v14 = v25;
  __swift_project_boxed_opaque_existential_1(v23, v24);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  swift_bridgeObjectRetain();
  v16 = specialized Sequence.first(where:)(v15, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  if (v16)
  {
    swift_retain();
    Scene.__interactionService.getter();
    v19 = v18;
    swift_release();
    ObjectType = swift_getObjectType();
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a5;
    *(_QWORD *)(v21 + 24) = a6;
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v19 + 56);
    swift_retain();
    v22(a1, a2, partial apply for closure #2 in static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:), v21, ObjectType, v19);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_21BC7328C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static __RCInteractionsController.__registerCustomAction(named:inSceneNamed:action:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 16))(0x614E797469746E45, 0xEA0000000000656DLL);
}

uint64_t MaterialDefinitionResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t MaterialDefinitionResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t MaterialDefinitionResource.__allocating_init(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  type metadata accessor for MaterialDefinitionResource();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t type metadata accessor for MaterialDefinitionResource()
{
  return objc_opt_self();
}

uint64_t MaterialDefinitionResource.BuildParameters.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.overrideMaterial.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.overrideMaterial.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.overrideMaterial.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.techniqueMapping.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.techniqueMapping.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.techniqueMapping.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.library.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 32) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.library.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MaterialDefinitionResource.BuildParameters.DebugMapping.init(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a3 = a1;
  a3[1] = a2;
  a3[2] = result;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.debugMappings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.debugMappings.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.debugMappings.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.library.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.library.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.debugMapping.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.debugMapping.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.debugMapping.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.getter()
{
  return swift_retain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.ShaderData.library.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.ShaderData.entry.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.ShaderData.init(entry:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = result;
  a3[2] = a2;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.vertexShader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 16) = v2;
  swift_retain();
  return swift_bridgeObjectRetain();
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.vertexShader.setter(__n128 *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_u64[0];
  swift_bridgeObjectRelease();
  swift_release();
  result = v4;
  *(__n128 *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 56) = v2;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.vertexShader.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.pixelShader.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[8];
  v3 = v1[9];
  v4 = v1[10];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  return outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
}

uint64_t outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.pixelShader.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;

  v4 = *a1;
  v2 = a1[1].n128_i64[0];
  outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v1[8], v1[9], v1[10]);
  result = v4;
  *((__n128 *)v1 + 4) = v4;
  v1[10] = v2;
  return result;
}

uint64_t outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.pixelShader.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.alphaBlend.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.writeDepth.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.depthCompareFunction.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = result;
  *(_BYTE *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.cullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.State.colorWriteMask.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MaterialDefinitionResource.BuildParameters.Technique.State.init()(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 514;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
}

void MaterialDefinitionResource.BuildParameters.Technique.state.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_BYTE *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_BYTE *)(v1 + 120);
  v6 = *(_QWORD *)(v1 + 128);
  v7 = *(_BYTE *)(v1 + 136);
  *(_WORD *)a1 = *(_WORD *)(v1 + 88);
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.state.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_BYTE *)(result + 16);
  v4 = *(_QWORD *)(result + 24);
  v5 = *(_BYTE *)(result + 32);
  v6 = *(_QWORD *)(result + 40);
  v7 = *(_BYTE *)(result + 48);
  *(_WORD *)(v1 + 88) = *(_WORD *)result;
  *(_QWORD *)(v1 + 96) = v2;
  *(_BYTE *)(v1 + 104) = v3;
  *(_QWORD *)(v1 + 112) = v4;
  *(_BYTE *)(v1 + 120) = v5;
  *(_QWORD *)(v1 + 128) = v6;
  *(_BYTE *)(v1 + 136) = v7;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.state.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.functionConstants.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.functionConstants.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.functionConstants.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.variations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.variations.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 152) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.variations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 160) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.Technique.defaultVariations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MaterialDefinitionResource.BuildParameters.Technique.init(name:vertexShader:fragmentShader:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __n128 result;
  __n128 v12;
  __int128 v13;

  v8 = *((_QWORD *)a3 + 2);
  v12 = *a4;
  v13 = *a3;
  v9 = a4[1].n128_u64[0];
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_WORD *)(a5 + 88) = 514;
  *(_QWORD *)(a5 + 96) = 0;
  *(_BYTE *)(a5 + 104) = 1;
  *(_QWORD *)(a5 + 112) = 0;
  *(_BYTE *)(a5 + 120) = 1;
  *(_QWORD *)(a5 + 128) = 0;
  *(_BYTE *)(a5 + 136) = 1;
  v10 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a5 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(a5 + 152) = specialized Dictionary.init(dictionaryLiteral:)(v10);
  *(_QWORD *)(a5 + 160) = v10;
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_OWORD *)(a5 + 40) = v13;
  *(_QWORD *)(a5 + 56) = v8;
  result = v12;
  *(__n128 *)(a5 + 64) = v12;
  *(_QWORD *)(a5 + 80) = v9;
  return result;
}

uint64_t MaterialDefinitionResource.BuildParameters.techniques.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MaterialDefinitionResource.BuildParameters.techniques.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 48) = a1;
  return result;
}

uint64_t (*MaterialDefinitionResource.BuildParameters.techniques.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t MaterialDefinitionResource.BuildParameters.init()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t result;

  v2 = MEMORY[0x24BEE4AF8];
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = result;
  a1[4] = 0;
  a1[5] = v2;
  a1[6] = v2;
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance MaterialDefinitionResource.LoadError()
{
  return 0xD000000000000024;
}

uint64_t static MaterialDefinitionResource.load(_:services:)(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;

  v3 = *((_QWORD *)a1 + 4);
  v4 = a1[1];
  v10 = *a1;
  v11 = v4;
  v12 = v3;
  v13 = *(__int128 *)((char *)a1 + 40);
  v5 = specialized static MaterialDefinitionResource.createBuilder(_:)(&v10);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)&v10);
  v6 = *((_QWORD *)&v11 + 1);
  v7 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  v8 = REAssetManagerMaterialDefinitionAssetBuilderBuild();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  RERelease();
  REAssetHandleLoadNow();
  if ((REAssetHandleLoadFailed() & 1) != 0)
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    type metadata accessor for MaterialDefinitionResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v8;
    RERetain();
    REAssetSetSwiftObject();
  }
  RERelease();
  return v5;
}

uint64_t static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssetRequest;
  uint64_t Request;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  __int128 v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a2 + 120;
  v31 = *(_OWORD *)(a1 + 5);
  swift_beginAccess();
  outlined init with copy of __REAssetService(v7, (uint64_t)v32);
  outlined init with copy of __REAssetService(v7, (uint64_t)v36);
  v8 = v37;
  v9 = v38;
  __swift_project_boxed_opaque_existential_1(v36, v37);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(v8, v9);
  v11 = v33;
  v12 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v11, v12);
  AssetRequest = REAssetManagerCreateAssetRequest();
  Request = type metadata accessor for __AssetLoadRequest();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = AssetRequest;
  if ((v10 & 1) != 0)
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
  v16 = swift_allocObject();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  *(_QWORD *)(v16 + 16) = v15;
  v32[0] = v2;
  v32[1] = v3;
  v32[2] = v4;
  v33 = v5;
  v34 = v6;
  v35 = v31;
  specialized static MaterialDefinitionResource.createBuilder(_:)(v32);
  outlined init with copy of __REAssetService(v7, (uint64_t)v32);
  v17 = v33;
  v18 = v34;
  __swift_project_boxed_opaque_existential_1(v32, v33);
  (*(void (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
  v19 = REAssetManagerMaterialDefinitionAssetBuilderBuild();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
  RERelease();
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v16;
  *(_QWORD *)(v20 + 24) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21BE411F0;
  swift_beginAccess();
  v22 = *(_QWORD *)(v16 + 16);
  *(_QWORD *)(v21 + 56) = Request;
  *(_QWORD *)(v21 + 32) = v22;
  type metadata accessor for LoadRequestDependencies();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v23 + 24) = v24;
  swift_beginAccess();
  *(_QWORD *)(v23 + 16) = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequest<MaterialDefinitionResource>);
  v25 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LoadRequestAllocatedLock<Result<MaterialDefinitionResource, Error>?>);
  v26 = swift_allocObject();
  v27 = swift_allocObject();
  *(_DWORD *)(v27 + 16) = 0;
  *(_QWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 24) = 0;
  *(_BYTE *)(v26 + 32) = -1;
  *(_QWORD *)(v25 + 16) = v26;
  v28 = (_QWORD *)swift_allocObject();
  v28[2] = partial apply for closure #1 in static MaterialDefinitionResource.loadAsync(_:services:);
  v28[3] = v20;
  v28[4] = v26;
  v28[5] = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Future<MaterialDefinitionResource, Error>);
  swift_allocObject();
  swift_retain();
  v29 = Future.init(_:)();
  swift_release();
  *(_QWORD *)(v25 + 24) = v29;
  return v25;
}

uint64_t closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD v16[6];
  _QWORD aBlock[6];

  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  swift_beginAccess();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Result<TextureResource, Error>) -> ();
  v9[3] = v8;
  v9[4] = a4;
  v9[5] = a3;
  aBlock[4] = partial apply for closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:);
  aBlock[5] = v9;
  v10 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_27;
  v11 = _Block_copy(aBlock);
  v12 = _Block_copy(v11);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v12;
  v16[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v16[5] = v13;
  v16[0] = v10;
  v16[1] = 1107296256;
  v16[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v16[3] = &block_descriptor_18_3;
  v14 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v14);
  swift_release();
  _Block_release(v11);
  swift_release();
  swift_beginAccess();
  return REAssetLoadRequestAddAsset();
}

void closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(char a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD v13[6];
  _QWORD aBlock[6];

  if ((a1 & 1) != 0)
  {
    type metadata accessor for MaterialDefinitionResource();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = a4;
    RERetain();
    REAssetSetSwiftObject();
    a2(v6, 0);
    swift_release();
    swift_beginAccess();
    aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5] = 0;
    v7 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_21;
    v8 = _Block_copy(aBlock);
    v9 = _Block_copy(v8);
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9;
    v13[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v13[5] = v10;
    v13[0] = v7;
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v13[3] = &block_descriptor_28_1;
    v11 = _Block_copy(v13);
    swift_retain();
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v11);
    swift_release();
    _Block_release(v8);
  }
  else
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    v12 = (void *)swift_allocError();
    a2((uint64_t)v12, 1);

  }
}

uint64_t MaterialDefinitionResource.update(from:services:)(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 4);
  v4 = a1[1];
  v8 = *a1;
  v9 = v4;
  v10 = v3;
  v11 = *(__int128 *)((char *)a1 + 40);
  specialized static MaterialDefinitionResource.createBuilder(_:)(&v8);
  swift_beginAccess();
  outlined init with copy of __REAssetService(a2 + 120, (uint64_t)&v8);
  v5 = *((_QWORD *)&v9 + 1);
  v6 = v10;
  __swift_project_boxed_opaque_existential_1(&v8, *((uint64_t *)&v9 + 1));
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  LOBYTE(a2) = REAssetManagerMaterialDefinitionAssetBuilderUpdateExistingAsset();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  if ((a2 & 1) == 0)
  {
    lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError();
    swift_allocError();
    swift_willThrow();
  }
  return RERelease();
}

uint64_t MaterialDefinitionResource.udpate(from:services:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v5[2];
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  v6 = v2;
  v7 = *(_OWORD *)(a1 + 40);
  return MaterialDefinitionResource.update(from:services:)(v5, a2);
}

void MaterialDefinitionResource.networkSendBlockingCategory.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t MaterialDefinitionResource.addToLoadRequest(_:)()
{
  return REAssetLoadRequestAddAsset();
}

uint64_t specialized MaterialDefinitionResource.__allocating_init(path:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t AssetHandle;
  uint64_t v9;
  uint64_t result;
  Swift::String v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v12);
  v5 = v14;
  v6 = v15;
  __swift_project_boxed_opaque_existential_1(&v12, v14);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
  swift_retain();
  v7(v5, v6);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  if (AssetHandle)
  {
    swift_bridgeObjectRelease();
    REAssetHandleLoadNow();
    type metadata accessor for MaterialDefinitionResource();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = AssetHandle;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    swift_release();
    return v9;
  }
  else
  {
    v12 = 0;
    v13 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000024;
    v13 = 0x800000021BE8D570;
    v11._countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static MaterialDefinitionResource.createBuilder(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;

  v1 = a1[1];
  v2 = a1[3];
  v3 = a1[5];
  v71 = a1[6];
  v4 = REMaterialDefinitionAssetBuilderCreate();
  if (v1)
  {
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetName();
    swift_release();
  }
  v78 = v3;
  v80 = v4;
  REMaterialDefinitionAssetBuilderSetOverrideMaterial();
  v5 = v2 + 64;
  v6 = 1 << *(_BYTE *)(v2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v2 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v8 &= v8 - 1;
      goto LABEL_7;
    }
    v12 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_126;
    v13 = v4;
    if (v12 >= v9)
      goto LABEL_23;
    v14 = *(_QWORD *)(v5 + 8 * v12);
    ++v11;
    if (!v14)
    {
      v11 = v12 + 1;
      if (v12 + 1 >= v9)
        goto LABEL_23;
      v14 = *(_QWORD *)(v5 + 8 * v11);
      if (!v14)
      {
        v11 = v12 + 2;
        if (v12 + 2 >= v9)
          goto LABEL_23;
        v14 = *(_QWORD *)(v5 + 8 * v11);
        if (!v14)
          break;
      }
    }
LABEL_22:
    v8 = (v14 - 1) & v14;
LABEL_7:
    String.utf8CString.getter();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueMapping();
    swift_release();
    result = swift_release();
  }
  v15 = v12 + 3;
  if (v15 >= v9)
    goto LABEL_23;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v11 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v15 + 1;
    if (__OFADD__(v15, 1))
      goto LABEL_129;
    if (v11 >= v9)
      break;
    v14 = *(_QWORD *)(v5 + 8 * v11);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_23:
  swift_release();
  v16 = v78;
  REMaterialDefinitionAssetBuilderSetLibrary();
  v77 = *(_QWORD *)(v78 + 16);
  if (!v77)
    goto LABEL_49;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  while (2)
  {
    if (v17 >= *(_QWORD *)(v16 + 16))
      goto LABEL_127;
    v18 = *(_QWORD *)(v78 + 32 + 24 * v17 + 16);
    v81 = v17 + 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    REMaterialDefinitionAssetBuilderAddDebugMapping();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetDebugMappingName();
    swift_release();
    v20 = v18 + 64;
    v19 = *(_QWORD *)(v18 + 64);
    v21 = 1 << *(_BYTE *)(v18 + 32);
    result = swift_bridgeObjectRelease();
    v22 = 0;
    if (v21 < 64)
      v23 = ~(-1 << v21);
    else
      v23 = -1;
    v24 = v23 & v19;
    v25 = (unint64_t)(v21 + 63) >> 6;
    while (2)
    {
      if (v24)
      {
        v24 &= v24 - 1;
LABEL_32:
        String.utf8CString.getter();
        swift_bridgeObjectRetain();
        REMaterialDefinitionAssetBuilderSetDebugMappingEntry();
        swift_bridgeObjectRelease();
        result = swift_release();
        continue;
      }
      break;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    if (v26 >= v25)
      goto LABEL_25;
    v27 = *(_QWORD *)(v20 + 8 * v26);
    ++v22;
    if (v27)
      goto LABEL_47;
    v22 = v26 + 1;
    if (v26 + 1 >= v25)
      goto LABEL_25;
    v27 = *(_QWORD *)(v20 + 8 * v22);
    if (v27)
      goto LABEL_47;
    v22 = v26 + 2;
    if (v26 + 2 >= v25)
      goto LABEL_25;
    v27 = *(_QWORD *)(v20 + 8 * v22);
    if (v27)
    {
LABEL_47:
      v24 = (v27 - 1) & v27;
      goto LABEL_32;
    }
    v28 = v26 + 3;
    if (v28 < v25)
    {
      v27 = *(_QWORD *)(v20 + 8 * v28);
      if (!v27)
      {
        while (1)
        {
          v22 = v28 + 1;
          if (__OFADD__(v28, 1))
            break;
          if (v22 >= v25)
            goto LABEL_25;
          v27 = *(_QWORD *)(v20 + 8 * v22);
          ++v28;
          if (v27)
            goto LABEL_47;
        }
LABEL_123:
        __break(1u);
        goto LABEL_124;
      }
      v22 = v28;
      goto LABEL_47;
    }
LABEL_25:
    result = swift_release();
    v16 = v78;
    v13 = v80;
    v17 = v81;
    if (v81 != v77)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
LABEL_49:
  v70 = *(_QWORD *)(v71 + 16);
  if (!v70)
    return v13;
  swift_bridgeObjectRetain();
  v29 = 0;
  while (2)
  {
    v72 = v29;
    v30 = v71 + 32 + 168 * v29;
    v31 = *(_OWORD *)v30;
    v32 = *(_OWORD *)(v30 + 32);
    v82[1] = *(_OWORD *)(v30 + 16);
    v83 = v32;
    v82[0] = v31;
    v33 = *(_OWORD *)(v30 + 48);
    v34 = *(_OWORD *)(v30 + 64);
    v35 = *(_OWORD *)(v30 + 96);
    v86 = *(_OWORD *)(v30 + 80);
    v87 = v35;
    v84 = v33;
    v85 = v34;
    v36 = *(_OWORD *)(v30 + 112);
    v37 = *(_OWORD *)(v30 + 128);
    v38 = *(_OWORD *)(v30 + 144);
    v91 = *(_QWORD *)(v30 + 160);
    v89 = v37;
    v90 = v38;
    v88 = v36;
    outlined retain of MaterialDefinitionResource.BuildParameters.Technique(v82);
    REMaterialDefinitionAssetBuilderAddTechnique();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueName();
    swift_release();
    v39 = v83;
    REMaterialDefinitionAssetBuilderSetTechniqueLibrary();
    if (v39)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRetain();
      REMaterialDefinitionAssetBuilderSetTechniqueDebugMapping();
      swift_bridgeObjectRelease();
      swift_release();
    }
    v40 = v85;
    v41 = v86;
    REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderLibrary();
    String.utf8CString.getter();
    REMaterialDefinitionAssetBuilderSetTechniqueVertexShaderEntry();
    swift_release();
    if (v41)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      REMaterialDefinitionAssetBuilderSetTechniquePixelShaderLibrary();
      String.utf8CString.getter();
      REMaterialDefinitionAssetBuilderSetTechniquePixelShaderEntry();
      swift_release();
      outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v40, *((uint64_t *)&v40 + 1), v41);
    }
    v42 = BYTE9(v86);
    v43 = BYTE8(v87);
    v44 = BYTE8(v88);
    v45 = BYTE8(v89);
    if (BYTE8(v86) == 2)
    {
      if (BYTE9(v86) == 2)
        goto LABEL_57;
LABEL_114:
      REMaterialDefinitionAssetBuilderSetTechniqueStateWriteDepth();
      if ((v43 & 1) == 0)
        goto LABEL_115;
LABEL_58:
      if ((v44 & 1) != 0)
        goto LABEL_59;
LABEL_116:
      REMaterialDefinitionAssetBuilderSetTechniqueStateCullMode();
      if ((v45 & 1) != 0)
        goto LABEL_61;
LABEL_60:
      REMaterialDefinitionAssetBuilderSetTechniqueStateColorWriteMask();
      goto LABEL_61;
    }
    REMaterialDefinitionAssetBuilderSetTechniqueStateAlphaBlend();
    if (v42 != 2)
      goto LABEL_114;
LABEL_57:
    if ((v43 & 1) != 0)
      goto LABEL_58;
LABEL_115:
    REMaterialDefinitionAssetBuilderSetTechniqueStateDepthCompareFunction();
    if ((v44 & 1) == 0)
      goto LABEL_116;
LABEL_59:
    if ((v45 & 1) == 0)
      goto LABEL_60;
LABEL_61:
    v73 = v72 + 1;
    v46 = v90 + 64;
    v47 = 1 << *(_BYTE *)(v90 + 32);
    if (v47 < 64)
      v48 = ~(-1 << v47);
    else
      v48 = -1;
    v49 = v48 & *(_QWORD *)(v90 + 64);
    v50 = (unint64_t)(v47 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v51 = 0;
    while (2)
    {
      if (v49)
      {
        v49 &= v49 - 1;
LABEL_66:
        String.utf8CString.getter();
        String.utf8CString.getter();
        REMaterialDefinitionAssetBuilderSetTechniqueFunctionConstant();
        swift_release();
        result = swift_release();
        continue;
      }
      break;
    }
    v52 = v51 + 1;
    if (__OFADD__(v51, 1))
      goto LABEL_121;
    if (v52 < v50)
    {
      v53 = *(_QWORD *)(v46 + 8 * v52);
      ++v51;
      if (!v53)
      {
        v51 = v52 + 1;
        if (v52 + 1 >= v50)
          goto LABEL_82;
        v53 = *(_QWORD *)(v46 + 8 * v51);
        if (!v53)
        {
          v51 = v52 + 2;
          if (v52 + 2 >= v50)
            goto LABEL_82;
          v53 = *(_QWORD *)(v46 + 8 * v51);
          if (!v53)
          {
            v54 = v52 + 3;
            if (v54 >= v50)
              goto LABEL_82;
            v53 = *(_QWORD *)(v46 + 8 * v54);
            if (!v53)
            {
              while (1)
              {
                v51 = v54 + 1;
                if (__OFADD__(v54, 1))
                  break;
                if (v51 >= v50)
                  goto LABEL_82;
                v53 = *(_QWORD *)(v46 + 8 * v51);
                ++v54;
                if (v53)
                  goto LABEL_81;
              }
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
              break;
            }
            v51 = v54;
          }
        }
      }
LABEL_81:
      v49 = (v53 - 1) & v53;
      goto LABEL_66;
    }
LABEL_82:
    swift_release();
    v75 = *((_QWORD *)&v90 + 1) + 64;
    v55 = 1 << *(_BYTE *)(*((_QWORD *)&v90 + 1) + 32);
    if (v55 < 64)
      v56 = ~(-1 << v55);
    else
      v56 = -1;
    v57 = v56 & *(_QWORD *)(*((_QWORD *)&v90 + 1) + 64);
    v76 = (unint64_t)(v55 + 63) >> 6;
    result = swift_bridgeObjectRetain();
    v58 = 0;
    v74 = result;
    while (2)
    {
      if (v57)
      {
        v59 = __clz(__rbit64(v57));
        v57 &= v57 - 1;
        v60 = v59 | (v58 << 6);
LABEL_102:
        v64 = *(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v60);
        v65 = *(_QWORD *)(v64 + 16);
        if (v65)
        {
          v79 = v58;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v66 = v64 + 40;
          do
          {
            String.utf8CString.getter();
            swift_bridgeObjectRetain();
            REMaterialDefinitionAssetBuilderAddTechniqueVariation();
            swift_release();
            String.utf8CString.getter();
            String.utf8CString.getter();
            swift_bridgeObjectRelease();
            REMaterialDefinitionAssetBuilderSetTechniqueVariation();
            swift_release();
            swift_release();
            v66 += 16;
            --v65;
          }
          while (v65);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          result = v74;
          v58 = v79;
        }
        continue;
      }
      break;
    }
    v61 = v58 + 1;
    if (__OFADD__(v58, 1))
      goto LABEL_122;
    if (v61 < v76)
    {
      v62 = *(_QWORD *)(v75 + 8 * v61);
      ++v58;
      if (!v62)
      {
        v58 = v61 + 1;
        if (v61 + 1 >= v76)
          goto LABEL_106;
        v62 = *(_QWORD *)(v75 + 8 * v58);
        if (!v62)
        {
          v58 = v61 + 2;
          if (v61 + 2 >= v76)
            goto LABEL_106;
          v62 = *(_QWORD *)(v75 + 8 * v58);
          if (!v62)
          {
            v63 = v61 + 3;
            if (v63 >= v76)
              goto LABEL_106;
            v62 = *(_QWORD *)(v75 + 8 * v63);
            if (!v62)
            {
              while (1)
              {
                v58 = v63 + 1;
                if (__OFADD__(v63, 1))
                  goto LABEL_125;
                if (v58 >= v76)
                  goto LABEL_106;
                v62 = *(_QWORD *)(v75 + 8 * v58);
                ++v63;
                if (v62)
                  goto LABEL_101;
              }
            }
            v58 = v63;
          }
        }
      }
LABEL_101:
      v57 = (v62 - 1) & v62;
      v60 = __clz(__rbit64(v62)) + (v58 << 6);
      goto LABEL_102;
    }
LABEL_106:
    swift_release();
    v67 = v91;
    v68 = *(_QWORD *)(v91 + 16);
    if (v68)
    {
      swift_bridgeObjectRetain();
      v69 = v67 + 40;
      do
      {
        swift_bridgeObjectRetain();
        REMaterialDefinitionAssetBuilderAddTechniqueDefaultVariation();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REMaterialDefinitionAssetBuilderSetTechniqueDefaultVariation();
        swift_release();
        v69 += 16;
        --v68;
      }
      while (v68);
      swift_bridgeObjectRelease();
    }
    result = (uint64_t)outlined release of MaterialDefinitionResource.BuildParameters.Technique(v82);
    v29 = v73;
    if (v73 == v70)
    {
      swift_bridgeObjectRelease();
      return v80;
    }
    if (v73 < *(_QWORD *)(v71 + 16))
      continue;
    break;
  }
  __break(1u);
LABEL_129:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError;
  if (!lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialDefinitionResource.LoadError, &unk_24DFC28C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError;
  if (!lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MaterialDefinitionResource.LoadError, &unk_24DFC28C8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MaterialDefinitionResource.LoadError and conformance MaterialDefinitionResource.LoadError);
  }
  return result;
}

uint64_t sub_21BC752A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BC752C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_21BC752F4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t method lookup function for MaterialDefinitionResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MaterialDefinitionResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of MaterialDefinitionResource.update(from:services:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of MaterialDefinitionResource.udpate(from:services:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MaterialDefinitionResource.BuildParameters(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MaterialDefinitionResource.BuildParameters(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MaterialDefinitionResource.BuildParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.DebugMapping()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.DebugMapping;
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 80))
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = v8;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (_OWORD *)(a1 + 64);
  v5 = (_OWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 80))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_retain();
      swift_release();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(a1 + 64);
      v7 = *(_QWORD *)(a2 + 80);
      *v4 = *v5;
      *(_QWORD *)(a1 + 80) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v8 = *v5;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *v4 = v8;
  }
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v9 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v10;
  v11 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy168_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release();
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 80);
  if (!v7)
  {
    outlined destroy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData(a1 + 64);
LABEL_5:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_release();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 168))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 168) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique;
}

uint64_t destroy for MaterialDefinitionResource.BuildParameters.Technique.ShaderData()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for MaterialDefinitionResource.BuildParameters.Technique.ShaderData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_release();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique.ShaderData()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique.ShaderData;
}

uint64_t getEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique.State(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[49])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.BuildParameters.Technique.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialDefinitionResource.BuildParameters.Technique.State()
{
  return &type metadata for MaterialDefinitionResource.BuildParameters.Technique.State;
}

uint64_t storeEnumTagSinglePayload for MaterialDefinitionResource.LoadError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC75E24 + 4 * byte_21BE6B670[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC75E44 + 4 * byte_21BE6B675[v4]))();
}

_BYTE *sub_21BC75E24(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC75E44(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC75E4C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC75E54(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC75E5C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC75E64(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for MaterialDefinitionResource.LoadError()
{
  return &unk_24DFC28C8;
}

uint64_t sub_21BC75ECC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21BC75EF0()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(char a1)
{
  uint64_t v1;

  closure #1 in closure #1 in static MaterialDefinitionResource.loadAsync(_:services:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t sub_21BC75F40()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

_QWORD *outlined retain of MaterialDefinitionResource.BuildParameters.Technique(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *outlined release of MaterialDefinitionResource.BuildParameters.Technique(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[8];
  v3 = a1[9];
  v4 = a1[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of MaterialDefinitionResource.BuildParameters.Technique.ShaderData?(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.BeamCodingKeys()
{
  return 0x7375636F66;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.BeamCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7375636F66 && a2 == 0xE500000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.BeamCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.BeamCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.CodingKeys()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BC76200 + 4 * byte_21BE6B860[*v0]))(1835099490, 0xE400000000000000);
}

uint64_t sub_21BC76200()
{
  return 0x6E616D7568;
}

uint64_t sub_21BC76214()
{
  return 0x65726964696E6D6FLL;
}

unint64_t sub_21BC76238()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Audio.Directivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.CodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.CodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.HumanCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.HumanCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.OmnidirectionalCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.OmnidirectionalCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x41676E696E65706FLL;
  else
    return 0x726574656D616964;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Audio.Directivity.SphericalApproximationCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized Audio.Directivity.SphericalApproximationCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();
  return CodingKey.debugDescription.getter();
}

void Audio.Directivity.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt v5;

  v1 = *(_QWORD *)v0;
  if (!*(_BYTE *)(v0 + 16))
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v1;
    else
      v4 = 0;
LABEL_12:
    Hasher._combine(_:)(v4);
    return;
  }
  v2 = *(_QWORD *)(v0 + 8);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(3uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v3 = v1;
    else
      v3 = 0;
    Hasher._combine(_:)(v3);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = v2;
    else
      v4 = 0;
    goto LABEL_12;
  }
  if (v1 | v2)
    v5 = 2;
  else
    v5 = 1;
  Hasher._combine(_:)(v5);
}

uint64_t Audio.Directivity.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.SphericalApproximationCodingKeys>);
  v38 = *(_QWORD *)(v3 - 8);
  v39 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.OmnidirectionalCodingKeys>);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.HumanCodingKeys>);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.BeamCodingKeys>);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Audio.Directivity.CodingKeys>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = *v1;
  v40 = v1[1];
  v16 = *((unsigned __int8 *)v1 + 16);
  v17 = a1[3];
  v18 = a1;
  v19 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(v18, v17);
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!v16)
  {
    v42 = 0;
    lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v25 = v36;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  v20 = v41;
  if (v16 != 1)
  {
    if (v15 | v40)
    {
      v44 = 2;
      lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys();
      v26 = v32;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v33;
      v27 = v34;
    }
    else
    {
      v43 = 1;
      lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys();
      v26 = v29;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v28 = v30;
      v27 = v31;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
  }
  v47 = 3;
  lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys();
  v21 = v37;
  v22 = v12;
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  v46 = 0;
  v23 = v39;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v20)
  {
    v45 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v22);
}

Swift::Int Audio.Directivity.hashValue.getter()
{
  Hasher.init(_seed:)();
  Audio.Directivity.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Audio.Directivity.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v25[12];
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;

  v25[9] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.SphericalApproximationCodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  v25[7] = v3;
  v25[8] = v4;
  MEMORY[0x24BDAC7A8](v3);
  v27 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.OmnidirectionalCodingKeys>);
  v25[4] = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v25[11] = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.HumanCodingKeys>);
  v25[5] = *(_QWORD *)(v7 - 8);
  v25[6] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v25[10] = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.BeamCodingKeys>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Audio.Directivity.CodingKeys>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys();
  v18 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    v25[2] = v9;
    v25[3] = v12;
    v25[1] = v10;
    v29 = v14;
    v19 = KeyedDecodingContainer.allKeys.getter();
    v20 = v13;
    if (*(_QWORD *)(v19 + 16) == 1)
      __asm { BR              X10 }
    v21 = type metadata accessor for DecodingError();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v23 = &type metadata for Audio.Directivity;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v20);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Audio.Directivity()
{
  Hasher.init(_seed:)();
  Audio.Directivity.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Audio.Directivity()
{
  Hasher.init(_seed:)();
  Audio.Directivity.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Audio.Directivity@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Audio.Directivity.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Audio.Directivity(_QWORD *a1)
{
  return Audio.Directivity.encode(to:)(a1);
}

uint64_t specialized static Audio.Directivity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;
  double v5;
  double v6;
  uint64_t v10;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
  {
    v5 = *(double *)(a1 + 8);
    v6 = *(double *)(a2 + 8);
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      if (v4 == 1 && v2 == v3)
        return v5 == v6;
      return 0;
    }
    if (*(_QWORD *)&v2 | *(_QWORD *)&v5)
    {
      if (v4 != 2 || *(_QWORD *)&v3 != 1 || *(_QWORD *)&v6 != 0)
        return 0;
    }
    else
    {
      v10 = *(_QWORD *)&v6 | *(_QWORD *)&v3;
      if (v4 != 2 || v10 != 0)
        return 0;
    }
    return 1;
  }
  return !*(_BYTE *)(a2 + 16) && v2 == v3;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.CodingKeys, &unk_24DFC2BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.CodingKeys, &unk_24DFC2BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.CodingKeys, &unk_24DFC2BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.CodingKeys, &unk_24DFC2BE0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.CodingKeys and conformance Audio.Directivity.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.SphericalApproximationCodingKeys, &unk_24DFC2D40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.SphericalApproximationCodingKeys, &unk_24DFC2D40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.SphericalApproximationCodingKeys, &unk_24DFC2D40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.SphericalApproximationCodingKeys, &unk_24DFC2D40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.SphericalApproximationCodingKeys and conformance Audio.Directivity.SphericalApproximationCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.OmnidirectionalCodingKeys, &unk_24DFC2CB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.OmnidirectionalCodingKeys, &unk_24DFC2CB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.OmnidirectionalCodingKeys, &unk_24DFC2CB0);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.OmnidirectionalCodingKeys and conformance Audio.Directivity.OmnidirectionalCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.HumanCodingKeys, &unk_24DFC2C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.HumanCodingKeys, &unk_24DFC2C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.HumanCodingKeys, &unk_24DFC2C90);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.HumanCodingKeys and conformance Audio.Directivity.HumanCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.BeamCodingKeys, &unk_24DFC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.BeamCodingKeys, &unk_24DFC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.BeamCodingKeys, &unk_24DFC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys;
  if (!lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Audio.Directivity.BeamCodingKeys, &unk_24DFC2C70);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Audio.Directivity.BeamCodingKeys and conformance Audio.Directivity.BeamCodingKeys);
  }
  return result;
}

ValueMetadata *type metadata accessor for Audio()
{
  return &type metadata for Audio;
}

ValueMetadata *type metadata accessor for Audio.Directivity()
{
  return &type metadata for Audio.Directivity;
}

uint64_t storeEnumTagSinglePayload for Audio.Directivity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21BC771FC + 4 * byte_21BE6B86D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21BC77230 + 4 * byte_21BE6B868[v4]))();
}

uint64_t sub_21BC77230(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC77238(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC77240);
  return result;
}

uint64_t sub_21BC7724C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC77254);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21BC77258(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC77260(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Audio.Directivity.CodingKeys()
{
  return &unk_24DFC2BE0;
}

uint64_t storeEnumTagSinglePayload for Audio.Directivity.BeamCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC772BC + 4 * byte_21BE6B872[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC772DC + 4 * byte_21BE6B877[v4]))();
}

_BYTE *sub_21BC772BC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC772DC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC772E4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC772EC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC772F4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC772FC(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for Audio.Directivity.BeamCodingKeys()
{
  return &unk_24DFC2C70;
}

void *type metadata accessor for Audio.Directivity.HumanCodingKeys()
{
  return &unk_24DFC2C90;
}

void *type metadata accessor for Audio.Directivity.OmnidirectionalCodingKeys()
{
  return &unk_24DFC2CB0;
}

uint64_t storeEnumTagSinglePayload for Audio.Directivity.SphericalApproximationCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC77384 + 4 * byte_21BE6B881[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC773B8 + 4 * byte_21BE6B87C[v4]))();
}

uint64_t sub_21BC773B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC773C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC773C8);
  return result;
}

uint64_t sub_21BC773D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC773DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC773E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC773E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Audio.Directivity.SphericalApproximationCodingKeys()
{
  return &unk_24DFC2D40;
}

uint64_t specialized Audio.Directivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1835099490 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E616D7568 && a2 == 0xE500000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65726964696E6D6FLL && a2 == 0xEF6C616E6F697463
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000021BE8D5A0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t specialized Audio.Directivity.SphericalApproximationCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x726574656D616964 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x41676E696E65706FLL && a2 == 0xEC000000656C676ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL static Entity.CoordinateSpaceReference.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Entity.CoordinateSpaceReference.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Entity.CoordinateSpaceReference.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void Entity.transformMatrix(relativeTo:)(char *a1@<X0>, float32x4_t *a2@<X8>)
{
  char v3;
  uint64_t ComponentInHierarchy;
  float32x4_t v5;
  int IsSelfInImmersiveSpace;
  char IsImmersiveSpaceOpen;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  char v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;

  v3 = *a1;
  ComponentInHierarchy = RESceneSpaceRootComponentFindComponentInHierarchy();
  v5 = 0uLL;
  if (!ComponentInHierarchy)
  {
    v13 = 1;
    v15 = 0uLL;
    v17 = 0uLL;
    v19 = 0uLL;
    goto LABEL_10;
  }
  IsSelfInImmersiveSpace = RESceneSpaceRootComponentGetIsSelfInImmersiveSpace();
  IsImmersiveSpaceOpen = RESceneSpaceRootComponentGetIsImmersiveSpaceOpen();
  if ((v3 & 1) == 0)
  {
    if ((IsSelfInImmersiveSpace & 1) == 0)
      goto LABEL_9;
LABEL_8:
    v13 = 1;
    v15 = 0uLL;
    v17 = 0uLL;
    v19 = 0uLL;
    v5 = 0uLL;
    goto LABEL_10;
  }
  if ((IsImmersiveSpaceOpen & 1) == 0)
    goto LABEL_8;
  if (IsSelfInImmersiveSpace)
  {
LABEL_9:
    *(double *)v20.i64 = findWorldMatrix4x4FFromTransformComponent(_:)();
    v5 = v20;
    v13 = 0;
    goto LABEL_10;
  }
  RESceneSpaceRootComponentGetSceneToImmersiveTransform();
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  *(double *)v12.i64 = findWorldMatrix4x4FFromTransformComponent(_:)();
  v13 = 0;
  v5 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v12.f32[0]), v22, *(float32x2_t *)v12.f32, 1), v23, v12, 2), v24, v12, 3);
  v15 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v14.f32[0]), v22, *(float32x2_t *)v14.f32, 1), v23, v14, 2), v24, v14, 3);
  v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v16.f32[0]), v22, *(float32x2_t *)v16.f32, 1), v23, v16, 2), v24, v16, 3);
  v19 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, v18.f32[0]), v22, *(float32x2_t *)v18.f32, 1), v23, v18, 2), v24, v18, 3);
LABEL_10:
  *a2 = v5;
  a2[1] = v15;
  a2[2] = v17;
  a2[3] = v19;
  a2[4].i8[0] = v13;
}

double findWorldMatrix4x4FFromTransformComponent(_:)()
{
  double result;
  double v1;

  RETransformComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    RETransformComponentGetWorldMatrix4x4F();
  }
  else if (specialized HasHierarchy.parent.getter())
  {
    v1 = findWorldMatrix4x4FFromTransformComponent(_:)();
    swift_release();
    return v1;
  }
  else
  {
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference;
  if (!lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.CoordinateSpaceReference, &type metadata for Entity.CoordinateSpaceReference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.CoordinateSpaceReference and conformance Entity.CoordinateSpaceReference);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Entity.CoordinateSpaceReference(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC77D54 + 4 * byte_21BE6BE45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC77D88 + 4 * byte_21BE6BE40[v4]))();
}

uint64_t sub_21BC77D88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC77D90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC77D98);
  return result;
}

uint64_t sub_21BC77DA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC77DACLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC77DB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC77DB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Entity.CoordinateSpaceReference()
{
  return &type metadata for Entity.CoordinateSpaceReference;
}

void AudioFileResource.CreateOptions.spatialMode.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AudioFileResource.CreateOptions.spatialMode.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.spatialMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.loadingStrategy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *AudioFileResource.CreateOptions.loadingStrategy.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.loadingStrategy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.shouldLoop.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioFileResource.CreateOptions.shouldLoop.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.shouldLoop.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.randomizeStartTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t AudioFileResource.CreateOptions.randomizeStartTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.randomizeStartTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.CreateOptions.mixGroupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.CreateOptions.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.mixGroupName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.normalization.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioFileResource.CreateOptions.normalization.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.normalization.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.CreateOptions.calibration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 48);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioFileResource.CreateOptions.calibration.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 40) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 48) = v2;
  return result;
}

uint64_t (*AudioFileResource.CreateOptions.calibration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double AudioFileResource.CreateOptions.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 257;
  *(_DWORD *)a1 = 257;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = -1;
  return result;
}

uint64_t AudioFileResource.CreateOptions.init(from:)@<X0>(uint64_t a1@<X8>)
{
  unsigned int InputMode;
  char v3;
  char Streaming;
  int LoopCount;
  char RandomizeStart;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int NormalizationMode;
  double v13;
  double v14;
  char v15;
  int CalibrationMode;
  uint64_t result;
  uint64_t v18;
  char v19;
  uint64_t v20;

  InputMode = REAudioFileAssetGetInputMode();
  if (InputMode >= 3)
    goto LABEL_21;
  v3 = InputMode;
  Streaming = REAudioFileAssetGetStreaming();
  LoopCount = REAudioFileAssetGetLoopCount();
  RandomizeStart = REAudioFileAssetGetRandomizeStart();
  v7 = (id)REAudioFileAssetGetMixGroupName();
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  NormalizationMode = REAudioFileAssetGetNormalizationMode();
  REAudioFileAssetGetTargetLUFS();
  if (NormalizationMode == 2)
  {
    v15 = 0;
LABEL_12:
    v14 = v13;
    goto LABEL_13;
  }
  v14 = 0.0;
  if (NormalizationMode != 1)
  {
    v15 = -1;
    goto LABEL_13;
  }
  if (v13 != *MEMORY[0x24BE26238])
  {
    v15 = 1;
    goto LABEL_12;
  }
  v15 = 2;
LABEL_13:
  CalibrationMode = REAudioFileAssetGetCalibrationMode();
  result = REAudioFileAssetGetCalibrationLevel();
  switch(CalibrationMode)
  {
    case 0:
      v20 = 0;
      v19 = -1;
LABEL_20:
      *(_BYTE *)a1 = 0x20001u >> (8 * v3);
      *(_BYTE *)(a1 + 1) = Streaming ^ 1;
      *(_BYTE *)(a1 + 2) = LoopCount != 0;
      *(_BYTE *)(a1 + 3) = RandomizeStart;
      *(_QWORD *)(a1 + 8) = v9;
      *(_QWORD *)(a1 + 16) = v11;
      *(double *)(a1 + 24) = v14;
      *(_BYTE *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v20;
      *(_BYTE *)(a1 + 48) = v19;
      return result;
    case 1:
      v19 = 0;
LABEL_19:
      v20 = v18;
      goto LABEL_20;
    case 2:
      v19 = 1;
      goto LABEL_19;
  }
LABEL_21:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized static AudioFileResource.CreateOptions.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  double v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  double v16;
  int v17;
  double v18;
  char v19;
  char v20;
  int v21;
  double v22;
  double v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (*a1 != *a2)
    return 0;
  v2 = a1[2];
  v3 = a1[3];
  v27 = *((_QWORD *)a1 + 1);
  v28 = *((_QWORD *)a1 + 2);
  v24 = a1[32];
  v4 = *((double *)a1 + 5);
  v5 = a1[48];
  v6 = a2[2];
  v7 = a2[3];
  v26 = *((_QWORD *)a2 + 1);
  v29 = *((_QWORD *)a2 + 2);
  v8 = a1[1] == 0;
  v22 = *((double *)a1 + 3);
  v23 = *((double *)a2 + 3);
  if (a1[1])
    v9 = 0x64616F6C657270;
  else
    v9 = 0x6D6165727473;
  v25 = a2[32];
  if (v8)
    v10 = 0xE600000000000000;
  else
    v10 = 0xE700000000000000;
  v11 = *((double *)a2 + 5);
  if (a2[1])
    v12 = 0x64616F6C657270;
  else
    v12 = 0x6D6165727473;
  if (a2[1])
    v13 = 0xE700000000000000;
  else
    v13 = 0xE600000000000000;
  v14 = a2[48];
  if (v9 == v12 && v10 == v13)
  {
    swift_bridgeObjectRelease_n();
    result = 0;
    if (v2 != v6 || ((v3 ^ v7) & 1) != 0)
      return result;
  }
  else
  {
    v21 = a2[48];
    v16 = *((double *)a2 + 5);
    v17 = v5;
    v18 = v4;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v19 & 1) == 0)
      return result;
    if (((v2 ^ v6) & 1) != 0)
      return result;
    v4 = v18;
    v5 = v17;
    v11 = v16;
    v14 = v21;
    if (((v3 ^ v7) & 1) != 0)
      return result;
  }
  if (!v28)
  {
    if (v29)
      return 0;
    goto LABEL_29;
  }
  if (!v29)
    return 0;
  if (v27 == v26 && v28 == v29 || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v20 & 1) != 0))
  {
LABEL_29:
    if (v24 == 255)
    {
      if (v25 != 255)
        return 0;
LABEL_42:
      if (v5 == 255)
      {
        if (v14 == 255)
          return 1;
      }
      else if (v14 != 255)
      {
        if ((v5 & 1) != 0)
        {
          if ((v14 & 1) == 0)
            return 0;
        }
        else if ((v14 & 1) != 0)
        {
          return 0;
        }
        if (v4 == v11)
          return 1;
      }
      return 0;
    }
    if (v25 == 255)
      return 0;
    if (v24)
    {
      if (v24 != 1)
      {
        result = 0;
        if (v25 != 2 || v23 != 0.0)
          return result;
        goto LABEL_42;
      }
      result = 0;
      if (v25 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (v25)
        return result;
    }
    if (v22 != v23)
      return result;
    goto LABEL_42;
  }
  return result;
}

uint64_t initializeWithCopy for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithTake for AudioFileResource.CreateOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioFileResource.CreateOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioFileResource.CreateOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioFileResource.CreateOptions()
{
  return &type metadata for AudioFileResource.CreateOptions;
}

CGColorRef HasAmbientLight.light.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  CGColorRef result;
  int v4;
  CGColor *v5;
  int v6;
  uint64_t v7;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v7);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v5);
  swift_release();
  result = v5;
  if (v5)
  {
    v4 = v6;
  }
  else
  {
    result = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
    v4 = 1143652352;
  }
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for HasAmbientLight.light : <A>A(uint64_t a1)
{
  int v1;
  id v2;
  void *v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 8);
  v4 = *(void **)a1;
  v5 = v1;
  v2 = v4;
  return HasAmbientLight.light.setter(&v4);
}

uint64_t HasAmbientLight.light.setter(void **a1)
{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();

  return v3(v5, 0);
}

void (*HasAmbientLight.light.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(void ***a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[3] = a3;
  v7[4] = v3;
  v7[2] = a2;
  HasAmbientLight.light.getter((uint64_t)v7);
  return HasAmbientLight.light.modify;
}

void HasAmbientLight.light.modify(void ***a1, char a2)
{
  id *v2;
  void *v3;
  int v4;
  id v5;
  void *v6;
  int v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *((_DWORD *)*a1 + 2);
  v6 = v3;
  v7 = v4;
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    HasAmbientLight.light.setter(&v6);

  }
  else
  {
    HasAmbientLight.light.setter(&v6);
  }
  free(v2);
}

float sub_21BC78860@<S0>(uint64_t a1@<X8>)
{
  float result;
  uint64_t v3;
  float v4;

  HasAmbientLight.light.getter((uint64_t)&v3);
  result = v4;
  *(_QWORD *)a1 = v3;
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t sub_21BC788A4()
{
  return 16;
}

__n128 sub_21BC788B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t _sSpsRi_zrlE10initialize2toyxn_tF(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a2, a1);
}

void ObservableComponent.init()()
{
  ObservableComponent.init()();
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t static ObservableComponent.__publisher(buffer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  specialized static ObservableComponent.__publisher(buffer:)(a1, a2, a3, a4);
  return swift_retain();
}

{
  specialized static ObservableComponent.__publisher(buffer:)(a1, a2, a3, a4);
  return swift_retain();
}

uint64_t static ObservableComponent.__size.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(_QWORD *)(*(_QWORD *)(type metadata accessor for ObservableComponentStorage(0, a1, a2, a4) - 8) + 64);
}

uint64_t static ObservableComponent.__load(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t static ObservableComponent.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE v23[40];

  v7 = a4;
  v10 = type metadata accessor for ObservableComponentStorage(0, a5, a6, a4);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = &v23[-v12 - 8];
  v14 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v23[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v18);
  v20 = &v23[-v19 - 8];
  outlined init with copy of __REAssetService(a1, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if ((v7 & 1) != 0)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 24))(a2, v20, a5);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
    ObservableComponentStorage.notifyValueSubscribers()();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v20, a5);
    *(_QWORD *)&v13[*(int *)(v10 + 36)] = 0;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v13, v17, a5);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v13, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, a5);
}

Swift::Void __swiftcall ObservableComponentStorage.notifyValueSubscribers()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = ((__n128 (*)())MEMORY[0x24BDAC7A8])();
  if (*(_QWORD *)(v0 + *(int *)(v4 + 36)))
  {
    (*(void (**)(char *, uint64_t, __n128))(v2 + 16))((char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v3);
    CurrentValueSubject.value.setter();
  }
}

uint64_t ObservableComponentStorage.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 + *(int *)(type metadata accessor for ObservableComponentStorage(0, a2, a3, a4) + 36)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a5, a1, a2);
}

uint64_t static ObservableComponent.__free(to:offset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE v11[16];

  v5 = type metadata accessor for ObservableComponentStorage(0, a3, a4, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = &v11[-v8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(&v11[-v8], a1, v5, v7);
  if (*(_QWORD *)&v9[*(int *)(v5 + 36)])
  {
    v11[15] = 1;
    CurrentValueSubject.send(completion:)();
  }
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  UnsafeMutablePointer.deinitialize(count:)();
  return MEMORY[0x220769464](a1, v5);
}

Swift::Void __swiftcall ObservableComponentStorage.cleanup()()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v1 + *(int *)(v0 + 36)))
    CurrentValueSubject.send(completion:)();
}

uint64_t static ObservableComponent<>.__store(attribute:to:offset:deinitialize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  _BYTE v24[40];

  v23 = a7;
  v8 = a4;
  v11 = type metadata accessor for ObservableComponentStorage(0, a5, a6, a4);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = &v24[-v13 - 8];
  v15 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = &v24[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x24BDAC7A8](v19);
  v21 = &v24[-v20 - 8];
  outlined init with copy of __REAssetService(a1, (uint64_t)v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
  swift_dynamicCast();
  if ((v8 & 1) != 0)
  {
    ObservableComponentStorage<>.setValueIfChanged(_:)((uint64_t)v21, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v21, a5);
    *(_QWORD *)&v14[*(int *)(v11 + 36)] = 0;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v14, v18, a5);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v14, v11);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v21, a5);
}

void ObservableComponentStorage<>.setValueIfChanged(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;

  v3 = v2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, v3, v5, v7);
  v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v3, a1, v5);
    ObservableComponentStorage.notifyValueSubscribers()();
  }
}

uint64_t specialized ObservableComponentStorage.publisher()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v7 + 36);
  result = *(_QWORD *)(v2 + v8);
  if (!result)
  {
    type metadata accessor for CurrentValueSubject();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, v3);
    result = CurrentValueSubject.__allocating_init(_:)();
    *(_QWORD *)(v2 + v8) = result;
  }
  return result;
}

uint64_t specialized static ObservableComponent.__publisher(buffer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservableComponentStorage(0, a2, a3, a4);
  return specialized ObservableComponentStorage.publisher()(v4);
}

uint64_t type metadata accessor for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ObservableComponentStorage);
}

uint64_t dispatch thunk of ObservableComponent.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static ObservableComponent.__publisher(buffer:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata completion function for ObservableComponentStorage()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ObservableComponentStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ObservableComponentStorage(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
  return swift_release();
}

uint64_t initializeWithCopy for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ObservableComponentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ObservableComponentStorage(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFE)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFE)
    {
      v12 = *(_QWORD *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      if ((v12 + 1) >= 2)
        return v12;
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_21BC793BC + 4 * byte_21BE6BF70[v10]))();
  }
}

void storeEnumTagSinglePayload for ObservableComponentStorage(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFEu)
    v6 = 2147483646;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_21BC7953C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x21BC795C0);
}

void sub_21BC79544(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x21BC7954CLL);
  JUMPOUT(0x21BC795C0);
}

void sub_21BC79594()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BC795C0);
}

void sub_21BC7959C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x21BC795C0);
}

uint64_t sub_21BC795A4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFE)
  {
    if (a2 > 0x7FFFFFFE)
      JUMPOUT(0x21BC795B0);
    *(_QWORD *)((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) = a2;
LABEL_6:
    JUMPOUT(0x21BC795C0);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

void static PhysicsMotionComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 58;
}

__n128 PhysicsMotionComponent.linearVelocity.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void PhysicsMotionComponent.linearVelocity.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*PhysicsMotionComponent.linearVelocity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 PhysicsMotionComponent.angularVelocity.getter()
{
  __n128 *v0;

  return v0[1];
}

void PhysicsMotionComponent.angularVelocity.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*PhysicsMotionComponent.angularVelocity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double PhysicsMotionComponent.init()@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void PhysicsMotionComponent.init(linearVelocity:angularVelocity:)(__n128 *a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>)
{
  *a1 = a2;
  a1[1] = a3;
}

uint64_t static PhysicsMotionComponent.__fromCore(_:)@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;

  REMotionStateComponentGetLinearVelocity();
  v5 = v2;
  result = REMotionStateComponentGetAngularVelocity();
  *a1 = v5;
  a1[1] = v4;
  return result;
}

uint64_t PhysicsMotionComponent.__toCore(_:)()
{
  REMotionStateComponentSetLinearVelocity();
  REMotionStateComponentSetAngularVelocity();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance PhysicsMotionComponent@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  uint64_t result;
  __int128 v4;
  __int128 v5;

  REMotionStateComponentGetLinearVelocity();
  v5 = v2;
  result = REMotionStateComponentGetAngularVelocity();
  *a1 = v5;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance PhysicsMotionComponent()
{
  REMotionStateComponentSetLinearVelocity();
  REMotionStateComponentSetAngularVelocity();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance PhysicsMotionComponent(_DWORD *a1@<X8>)
{
  *a1 = 58;
}

ValueMetadata *type metadata accessor for PhysicsMotionComponent()
{
  return &type metadata for PhysicsMotionComponent;
}

uint64_t specialized Collection<>.indices.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  _BYTE v18[8];
  _BYTE v19[8];
  uint64_t v20;
  unint64_t v21;

  v14 = *(_OWORD *)(v1 + 16);
  v15 = *(_QWORD *)(v1 + 32);
  v16[0] = *(_OWORD *)v1;
  v16[1] = v14;
  v17 = v15;
  outlined init with take of Transform?((uint64_t)v16, (uint64_t)v19, &demangling cache variable for type metadata for AnimationLibraryResource?);
  v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v1 + 32);
  outlined init with take of Transform?((uint64_t)v19, (uint64_t)&v20, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v20)
  {
    outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
    outlined retain of OrbitEntityActionHandler((uint64_t)v19);
    v4 = AnimationLibraryResource.keyedResources.getter();
    v5 = specialized Dictionary.startIndex.getter(v4);
    v7 = v6;
    v9 = v8;
    swift_bridgeObjectRelease();
    outlined release of TimelineDefinition?((uint64_t)v19);
  }
  else
  {
    outlined init with take of Transform?((uint64_t)v16 + 8, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    outlined init with take of Transform?((uint64_t)v18, (uint64_t)&v21, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
    v10 = v21;
    if (v21)
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
    }
    else
    {
      outlined retain of AnimationLibraryComponent.AnimationCollection(v1);
      v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    }
    v5 = specialized Dictionary.startIndex.getter(v10);
    v7 = v11;
    v9 = v12;
    outlined retain of [String : String]((uint64_t)v18);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = v9 & 1;
  return AnimationLibraryComponent.AnimationCollection.endIndex.getter(a1 + 64);
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Shared;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Default;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt Class;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v40;
  uint64_t v41[6];

  if (a2 < 0)
    goto LABEL_56;
  v3 = a2;
  v4 = result;
  if (!a2)
  {
LABEL_53:
    *a3 = v4;
    return result;
  }
  v5 = 0;
  while (1)
  {
    if (__OFADD__(v4++, 1))
      goto LABEL_55;
    result = REEntityGetComponentCount();
    if (v4 < result)
      break;
LABEL_5:
    if (++v5 == v3)
      goto LABEL_53;
  }
  while (1)
  {
    Shared = REEngineGetShared();
    if (Shared)
    {
      v8 = Shared;
      if (one-time initialization token for lock != -1)
        swift_once();
      os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v8)
      {
        type metadata accessor for __Engine();
        swift_allocObject();
        static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v8);
        swift_release();
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
        specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
      v9 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine)
        goto LABEL_34;
    }
    else
    {
      static __ServiceLocator.sharedEngine = 0;
      swift_release();
      v9 = static __ServiceLocator.sharedEngine;
      if (static __ServiceLocator.sharedEngine)
        goto LABEL_34;
    }
    Default = REEngineConfigurationCreateDefault();
    type metadata accessor for EngineConfiguration();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = Default;
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v12 = REEngineConfigurationClone();
      v13 = swift_allocObject();
      *(_QWORD *)(v13 + 16) = v12;
      swift_release_n();
      v11 = v13;
    }
    REEngineConfigurationSetClockMode();
    if (one-time initialization token for defaultServices != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v14 = REEngineConfigurationClone();
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v14;
      swift_release_n();
      v11 = v15;
    }
    REEngineConfigurationSetServicesToCreate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v16 = REEngineConfigurationClone();
      v17 = swift_allocObject();
      *(_QWORD *)(v17 + 16) = v16;
      swift_release_n();
      v11 = v17;
    }
    REEngineConfigurationSetServicesToUpdate();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v18 = REEngineConfigurationClone();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v18;
      swift_release_n();
      v11 = v19;
    }
    REEngineConfigurationSetStartupOptions();
    if (one-time initialization token for defaultRenderFlags != -1)
      swift_once();
    if ((int)REGetRetainCount() >= 2)
    {
      swift_retain();
      v20 = REEngineConfigurationClone();
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v20;
      swift_release_n();
      v11 = v21;
    }
    REEngineConfigurationSetRenderFlags();
    if (!specialized static __ServiceLocator.__sharedEngine.getter())
    {
      v41[0] = v11;
      v22 = specialized static __Engine.makeSharedEngine(_:)(v41);
      REEngineSetShared();
      static __ServiceLocator.sharedEngine = v22;
      swift_release();
      static __ServiceLocator.createdSharedEngine = 1;
    }
    swift_release();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
    result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    v9 = static __ServiceLocator.sharedEngine;
    if (!static __ServiceLocator.sharedEngine)
      goto LABEL_58;
LABEL_34:
    result = swift_beginAccess();
    v23 = v9[5];
    if (!v23)
      goto LABEL_57;
    v24 = v23 + 80;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v24, (uint64_t)v41);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
    type metadata accessor for SceneManager();
    swift_dynamicCast();
    REEntityGetComponentAtIndex();
    Class = REComponentGetClass();
    swift_beginAccess();
    v26 = *(_QWORD *)(v40 + 16);
    swift_beginAccess();
    v27 = *(_QWORD *)(v26 + 24);
    if (*(_QWORD *)(v27 + 16))
    {
      v28 = specialized __RawDictionaryStorage.find<A>(_:)(Class);
      if ((v29 & 1) != 0)
        break;
    }
    if (one-time initialization token for handlesToCustomComponentTypes != -1)
      swift_once();
    swift_beginAccess();
    v32 = static SceneManager.handlesToCustomComponentTypes;
    if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
      && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v34 & 1) != 0))
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 16 * v33);
      swift_endAccess();
      v36 = *(_QWORD *)(v40 + 16);
      swift_beginAccess();
      if (!*(_QWORD *)(*(_QWORD *)(v36 + 16) + 16)
        || (specialized __RawDictionaryStorage.find<A>(_:)(v35), (v37 & 1) == 0))
      {
        result = swift_release();
        goto LABEL_4;
      }
    }
    else
    {
      swift_endAccess();
    }
    result = swift_release();
    v31 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_54;
LABEL_50:
    result = REEntityGetComponentCount();
    ++v4;
    if (v31 >= result)
    {
      v4 = v31;
LABEL_4:
      v3 = a2;
      goto LABEL_5;
    }
  }
  v30 = *(unsigned __int8 *)(*(_QWORD *)(v27 + 56) + 80 * v28 + 48);
  result = swift_release();
  if (v30 == 2)
    goto LABEL_4;
  v31 = v4 + 1;
  if (!__OFADD__(v4, 1))
    goto LABEL_50;
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v2 = a2;
    v3 = result;
    if (!a2)
      return v3;
    v4 = a2 + result;
    v5 = result;
    while ((v3 & 0x8000000000000000) == 0)
    {
      result = REEntityGetChildCount();
      if (v5 >= result)
        goto LABEL_10;
      ++v5;
      if (!--v2)
        return v4;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  _OWORD v28[2];
  uint64_t v29;
  char v30[8];
  char v31[8];
  uint64_t v32;
  uint64_t v33;

  if (a4 < 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
  }
  else
  {
    v8 = a2;
    v9 = result;
    v10 = a5;
    v11 = a3 & 1;
    if (a4)
    {
      v12 = *(_OWORD *)(v5 + 16);
      v28[0] = *(_OWORD *)v5;
      v28[1] = v12;
      v29 = *(_QWORD *)(v5 + 32);
      outlined init with take of Transform?((uint64_t)v28 + 8, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
      v13 = a3 & 1;
      v14 = (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?;
      outlined copy of [A : B].Index._Variant<A, B>(v9, v8, v13);
      v15 = 0;
      v16 = v8;
      while (1)
      {
        result = outlined init with take of Transform?((uint64_t)v31, (uint64_t)&v32, v14);
        v17 = v32;
        if (!v32)
        {
          outlined init with take of Transform?((uint64_t)v28, (uint64_t)v30, &demangling cache variable for type metadata for AnimationLibraryResource?);
          outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v33, &demangling cache variable for type metadata for AnimationLibraryResource?);
          if (v33)
            result = AnimationLibraryResource.keyedResources.getter();
          else
            result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
          v17 = result;
        }
        if ((v11 & 1) != 0)
          goto LABEL_41;
        if ((v9 & 0x8000000000000000) != 0 || (v18 = 1 << *(_BYTE *)(v17 + 32), (uint64_t)v9 >= v18))
        {
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v19 = v9 >> 6;
        v20 = v17 + 64;
        v21 = *(_QWORD *)(v17 + 64 + 8 * (v9 >> 6));
        if (((v21 >> v9) & 1) == 0)
          goto LABEL_38;
        if (*(_DWORD *)(v17 + 36) != (_DWORD)v8)
          goto LABEL_39;
        v22 = v21 & (-2 << (v9 & 0x3F));
        if (v22)
        {
          v9 = __clz(__rbit64(v22)) | v9 & 0xFFFFFFFFFFFFFFC0;
          outlined retain of [String : String]((uint64_t)v31);
          result = swift_bridgeObjectRelease();
        }
        else
        {
          v23 = v19 + 1;
          v24 = (unint64_t)(v18 + 63) >> 6;
          if (v19 + 1 < v24)
          {
            v25 = v14;
            v26 = *(_QWORD *)(v20 + 8 * v23);
            if (v26)
              goto LABEL_19;
            v23 = v19 + 2;
            if (v19 + 2 >= v24)
            {
              outlined retain of [String : String]((uint64_t)v31);
              goto LABEL_31;
            }
            v26 = *(_QWORD *)(v20 + 8 * v23);
            if (v26)
            {
LABEL_19:
              outlined retain of [String : String]((uint64_t)v31);
            }
            else
            {
              v23 = v19 + 3;
              if (v19 + 3 >= v24)
                goto LABEL_33;
              v26 = *(_QWORD *)(v20 + 8 * v23);
              if (!v26)
              {
                while (v24 - 4 != v19)
                {
                  v26 = *(_QWORD *)(v17 + 96 + 8 * v19++);
                  if (v26)
                  {
                    v23 = v19 + 3;
                    goto LABEL_29;
                  }
                }
LABEL_33:
                outlined retain of [String : String]((uint64_t)v31);
                outlined consume of [String : AnimationResource].Index._Variant(v9, v8, 0);
LABEL_31:
                result = swift_bridgeObjectRelease();
                v9 = v18;
LABEL_32:
                v14 = v25;
                goto LABEL_5;
              }
LABEL_29:
              outlined retain of [String : String]((uint64_t)v31);
              outlined consume of [String : AnimationResource].Index._Variant(v9, v8, 0);
            }
            result = swift_bridgeObjectRelease();
            v9 = __clz(__rbit64(v26)) + (v23 << 6);
            goto LABEL_32;
          }
          outlined retain of [String : String]((uint64_t)v31);
          result = swift_bridgeObjectRelease();
          v9 = v18;
        }
LABEL_5:
        v11 = 0;
        ++v15;
        v8 = v16;
        if (v15 == a4)
        {
          v8 = v16;
          v10 = a5;
          goto LABEL_36;
        }
      }
    }
    result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
LABEL_36:
    *(_QWORD *)v10 = v9;
    *(_QWORD *)(v10 + 8) = v8;
    *(_BYTE *)(v10 + 16) = v11;
  }
  return result;
}

void static AnimationLibraryComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 45;
}

uint64_t AnimationLibraryResource.__deallocating_deinit()
{
  RERelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t AnimationLibraryResource.resource(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Entry;
  _QWORD *v8;
  uint64_t Name;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = (uint64_t *)(v1 + 24);
  swift_beginAccess();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v4 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v4 + 16) <= a1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 + 8 * a1;
  if (*(_QWORD *)(v5 + 32))
  {
    v6 = *(_QWORD *)(v5 + 32);
LABEL_15:
    swift_retain();
    return v6;
  }
  Entry = REAnimationLibraryAssetGetEntry();
  type metadata accessor for AnimationResource();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = Entry;
  if (REAssetHandleAssetType() == 11)
    REAnimationSceneAssetGetRootTimeline();
  Name = REAnimationAssetGetName();
  if (Name)
    Name = String.init(cString:)();
  else
    v10 = 0xE000000000000000;
  v8[3] = Name;
  v8[4] = v10;
  RERetain();
  REAssetSetSwiftObject();
  swift_beginAccess();
  v11 = *v3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v3 = v11;
  if ((result & 1) == 0)
LABEL_18:
    specialized _ArrayBuffer._consumeAndCreateNew()();
  if (*(_QWORD *)(v11 + 16) <= a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)(v11 + 8 * a1 + 32) = v8;
  swift_release();
  specialized Array._endMutation()();
  result = swift_endAccess();
  if (*(_QWORD *)(*v3 + 16) <= a1)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(*v3 + 8 * a1 + 32);
  if (v6)
  {
    swift_retain();
    goto LABEL_15;
  }
LABEL_21:
  __break(1u);
  return result;
}

unint64_t AnimationLibraryResource.keyedResources.getter()
{
  uint64_t v0;
  unint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t Entry;
  _QWORD *v10;
  uint64_t Name;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t KeyCount;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t EntryIndexFromKey;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;

  if (*(_QWORD *)(v0 + 32))
    return swift_bridgeObjectRetain();
  v2 = v0;
  v3 = (uint64_t *)(v0 + 24);
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
LABEL_20:
    v15 = *(_QWORD *)(v2 + 16);
    KeyCount = REAnimationLibraryAssetGetKeyCount();
    if (KeyCount < 1)
    {
      *(_QWORD *)(v2 + 32) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v2 + 32))
        return swift_bridgeObjectRetain();
      __break(1u);
    }
    else
    {
      v17 = KeyCount;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<Int8>);
      v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v18 + 16) = v17;
      REAnimationLibraryAssetGetKeys();
      *(_QWORD *)(v18 + 16) = v17;
      swift_release();
      v45 = *(_QWORD *)(v18 + 16);
      if (v45)
      {
        swift_bridgeObjectRetain();
        v19 = 0;
        v20 = (_QWORD *)MEMORY[0x24BEE4B00];
        v44 = v3;
        while (1)
        {
          EntryIndexFromKey = REAnimationLibraryAssetGetEntryIndexFromKey();
          if (!EntryIndexFromKey)
            goto LABEL_25;
          v22 = (unint64_t *)EntryIndexFromKey;
          v23 = String.init(cString:)();
          v25 = *v22;
          if ((*v22 & 0x8000000000000000) != 0)
            goto LABEL_48;
          if (v25 >= *(_QWORD *)(*v3 + 16))
            goto LABEL_49;
          v26 = *(_QWORD *)(*v3 + 8 * v25 + 32);
          if (!v26)
            goto LABEL_54;
          v27 = v23;
          v28 = v24;
          v29 = v15;
          v30 = v2;
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v33 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
          v34 = v20[2];
          v35 = (v32 & 1) == 0;
          v36 = v34 + v35;
          if (__OFADD__(v34, v35))
            goto LABEL_50;
          v37 = v32;
          if (v20[3] >= v36)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              if ((v32 & 1) == 0)
                goto LABEL_37;
            }
            else
            {
              specialized _NativeDictionary.copy()();
              if ((v37 & 1) == 0)
                goto LABEL_37;
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
            v38 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v28);
            if ((v37 & 1) != (v39 & 1))
              goto LABEL_56;
            v33 = v38;
            if ((v37 & 1) == 0)
            {
LABEL_37:
              v20[(v33 >> 6) + 8] |= 1 << v33;
              v40 = (uint64_t *)(v20[6] + 16 * v33);
              *v40 = v27;
              v40[1] = v28;
              *(_QWORD *)(v20[7] + 8 * v33) = v26;
              v41 = v20[2];
              v42 = __OFADD__(v41, 1);
              v43 = v41 + 1;
              if (v42)
                goto LABEL_53;
              v20[2] = v43;
              swift_bridgeObjectRetain();
              goto LABEL_24;
            }
          }
          *(_QWORD *)(v20[7] + 8 * v33) = v26;
          swift_release();
LABEL_24:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v2 = v30;
          v15 = v29;
          v3 = v44;
LABEL_25:
          if (v45 == ++v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_45;
          }
        }
      }
    }
    v20 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_45:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 32) = v20;
    swift_bridgeObjectRelease();
    if (!*(_QWORD *)(v2 + 32))
      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    return swift_bridgeObjectRetain();
  }
  v6 = -v5;
  v7 = 4;
  while (1)
  {
    v8 = v7 - 4;
    if ((unint64_t)(v7 - 4) >= *(_QWORD *)(v4 + 16))
      break;
    if (!*(_QWORD *)(v4 + 8 * v7))
    {
      Entry = REAnimationLibraryAssetGetEntry();
      type metadata accessor for AnimationResource();
      v10 = (_QWORD *)swift_allocObject();
      v10[2] = Entry;
      if (REAssetHandleAssetType() == 11)
        REAnimationSceneAssetGetRootTimeline();
      Name = REAnimationAssetGetName();
      if (Name)
        Name = String.init(cString:)();
      else
        v12 = 0xE000000000000000;
      v10[3] = Name;
      v10[4] = v12;
      RERetain();
      REAssetSetSwiftObject();
      swift_beginAccess();
      v13 = *v3;
      v14 = swift_isUniquelyReferenced_nonNull_native();
      *v3 = v13;
      if ((v14 & 1) == 0)
        specialized _ArrayBuffer._consumeAndCreateNew()();
      if (v8 >= *(_QWORD *)(v13 + 16))
        goto LABEL_51;
      *(_QWORD *)(v13 + 8 * v7) = v10;
      swift_release();
      specialized Array._endMutation()();
      swift_endAccess();
      v4 = *v3;
      if (v8 >= *(_QWORD *)(*v3 + 16))
        goto LABEL_52;
      if (!*(_QWORD *)(v4 + 8 * v7))
        goto LABEL_55;
    }
    ++v7;
    if (v6 + v7 == 4)
      goto LABEL_20;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.addResource(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  char v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;

  v4 = v3;
  v8 = *v3;
  v9 = v3[4];
  if (v9)
  {
    v10 = v3[4];
  }
  else if (v8)
  {
    swift_beginAccess();
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16);
    swift_retain();
    v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v11);
    swift_release();
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v12 = specialized Sequence.contains(where:)(v10, a3);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v12 & 1) == 0)
  {
    if (v9)
    {
      swift_retain();
      v13 = v9;
    }
    else if (v8)
    {
      swift_beginAccess();
      v14 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16);
      swift_retain();
      swift_retain();
      v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v14);
      swift_release();
    }
    else
    {
      swift_retain();
      v13 = MEMORY[0x24BEE4AF8];
    }
    v15 = swift_bridgeObjectRetain();
    MEMORY[0x220768F0C](v15);
    if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_bridgeObjectRelease();
    v4[4] = v13;
  }
  v16 = v4[1];
  if (v16)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v17 = v16;
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    if (v8)
      v18 = AnimationLibraryResource.keyedResources.getter();
    else
      v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v17 = v18;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, a1, a2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v4[1] = v17;
  return result;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if ((a1 & 0xC000000000000001) != 0)
    return __CocoaDictionary.startIndex.getter();
  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v1 = 1 << v5;
  if (v6 < 7)
    return v1;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  if (v6 < 8)
    return v1;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = 128;
    return __clz(__rbit64(v2)) + v3;
  }
  v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 88);
  v3 = 128;
  while (v8)
  {
    v10 = *v9++;
    v2 = v10;
    --v8;
    v3 += 64;
    if (v10)
      return __clz(__rbit64(v2)) + v3;
  }
  return v1;
}

_QWORD *specialized Dictionary.subscript.getter(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 16 * a2);
    *result = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * a2);
    swift_bridgeObjectRetain();
    swift_retain();
    return (_QWORD *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2;
  v7 = (_QWORD *)result;
  if ((a5 & 0xC000000000000001) == 0)
  {
    if ((a4 & 1) != 0)
      goto LABEL_10;
    if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == a3)
      {
LABEL_12:
        v11 = *(_QWORD *)(a5 + 56);
        v8 = *(_QWORD *)(*(_QWORD *)(a5 + 48) + 8 * v6);
        *v7 = *(_QWORD *)(v11 + 8 * v6);
        swift_retain();
        swift_retain();
        return v8;
      }
      __break(1u);
LABEL_10:
      result = __CocoaDictionary.Index.age.getter();
      if ((_DWORD)result == *(_DWORD *)(a5 + 36))
      {
        __CocoaDictionary.Index.key.getter();
        type metadata accessor for __REAsset();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v6 = specialized __RawDictionaryStorage.find<A>(_:)();
        v10 = v9;
        result = swift_release();
        if ((v10 & 1) != 0)
          goto LABEL_12;
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_16;
  }
  if ((a4 & 1) != 0)
  {
    __CocoaDictionary.lookup(_:)();
    type metadata accessor for __REAsset();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v8 = v12;
    swift_unknownObjectRelease();
    type metadata accessor for RESceneDescriptor();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    *v7 = v12;
    swift_unknownObjectRelease();
    return v8;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.removeResource(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v3 = v2;
  v6 = *v2;
  if (v2[1])
  {
    v7 = v2[1];
  }
  else if (v6)
  {
    v7 = AnimationLibraryResource.keyedResources.getter();
  }
  else
  {
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v17 = v7;
  swift_bridgeObjectRetain();
  v8 = specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
  swift_bridgeObjectRelease();
  v2[1] = v17;
  if (!v8)
    return v8;
  swift_retain_n();
  v9 = swift_bridgeObjectRetain();
  v10 = specialized Sequence.contains(where:)(v9, v8);
  swift_bridgeObjectRelease();
  swift_release();
  if ((v10 & 1) != 0)
  {
    swift_release();
    return v8;
  }
  v11 = v2[4];
  if (v11)
  {
    swift_retain();
    v12 = v11;
  }
  else if (v6)
  {
    swift_beginAccess();
    v13 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
    swift_retain();
    swift_retain();
    v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v13);
    swift_release();
  }
  else
  {
    swift_retain();
    v12 = MEMORY[0x24BEE4AF8];
  }
  v18 = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  v14 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(&v18, v8);
  result = swift_release();
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v16 >= v14)
      goto LABEL_16;
  }
  else
  {
    v16 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16 >= v14)
    {
LABEL_16:
      specialized Array.replaceSubrange<A>(_:with:)(v14, v16);
      swift_release_n();
      swift_bridgeObjectRelease();
      v3[4] = v18;
      return v8;
    }
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.removeAll(_:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;

  v2 = v1;
  v4 = *v1;
  if (v2[1])
  {
    v5 = v2[1];
  }
  else
  {
    if (v4)
      v6 = AnimationLibraryResource.keyedResources.getter();
    else
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v5 = v6;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  v7 = specialized _NativeDictionary.filter(_:)(v5, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v2[1] = v7;
  v8 = v2[4];
  if (v8)
  {
    swift_retain();
    v9 = v8;
  }
  else if (v4)
  {
    swift_beginAccess();
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
    swift_retain();
    swift_retain();
    v9 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v10);
    swift_release();
  }
  else
  {
    swift_retain();
    v9 = MEMORY[0x24BEE4AF8];
  }
  v14 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  v11 = specialized MutableCollection._halfStablePartition(isSuffixElement:)(&v14, a1);
  result = swift_release();
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v13 >= v11)
      goto LABEL_14;
  }
  else
  {
    v13 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v11)
    {
LABEL_14:
      specialized Array.replaceSubrange<A>(_:with:)(v11, v13);
      swift_release();
      result = swift_bridgeObjectRelease();
      v2[4] = v14;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.defaultResource.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t *EntryIndexFromKey;
  uint64_t result;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = *v0;
  v1 = v0[1];
  v3 = specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v0, v1, v0[2], v0[3]);
  if (v4)
  {
    v5 = v3;
    v6 = v4;
    if (v1)
    {
      if (*(_QWORD *)(v1 + 16))
      {
        swift_bridgeObjectRetain();
        v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
        if ((v8 & 1) != 0)
        {
          EntryIndexFromKey = *(unint64_t **)(*(_QWORD *)(v1 + 56) + 8 * v7);
          swift_retain();
          swift_bridgeObjectRelease_n();
          return (uint64_t)EntryIndexFromKey;
        }
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    else if (v2)
    {
      String.utf8CString.getter();
      EntryIndexFromKey = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
      swift_release();
      if (EntryIndexFromKey)
        EntryIndexFromKey = (unint64_t *)AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
      swift_bridgeObjectRelease();
      return (uint64_t)EntryIndexFromKey;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined init with take of Transform?((uint64_t)(v0 + 4), (uint64_t)&v14, &demangling cache variable for type metadata for [AnimationResource]?);
  result = outlined init with take of Transform?((uint64_t)&v14, (uint64_t)&v15, &demangling cache variable for type metadata for [AnimationResource]?);
  v11 = v15;
  if (!v15)
  {
    if (!v2)
      return 0;
    return AnimationLibraryResource.resource(_:)(0);
  }
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    result = outlined release of [String : String]((uint64_t)&v14);
    if (v13 <= 0)
      return 0;
  }
  else if (*(uint64_t *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10) <= 0)
  {
    return 0;
  }
  if ((v11 & 0xC000000000000001) != 0)
    return MEMORY[0x220769770](0, v11);
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    EntryIndexFromKey = *(unint64_t **)(v11 + 32);
    swift_retain();
    return (uint64_t)EntryIndexFromKey;
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryDefinition.createAsset()()
{
  uint64_t v0;
  uint64_t ServiceLocator;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t AnimationLibraryAsset;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  Swift::UInt v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59[8];
  char v60[8];
  unint64_t v61;
  uint64_t v62;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_release();
  ServiceLocator = REEngineGetServiceLocator();
  if (!MEMORY[0x22076FD58](ServiceLocator))
    return 0;
  v57 = 0;
  v58 = (_QWORD *)MEMORY[0x24BEE4B00];
  REAnimationLibraryDefinitionCreate();
  outlined init with take of Transform?(v0 + 32, (uint64_t)v60, &demangling cache variable for type metadata for [AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v60, (uint64_t)&v61, &demangling cache variable for type metadata for [AnimationResource]?);
  v2 = v61;
  if (v61)
  {
    if (!(v61 >> 62))
      goto LABEL_4;
LABEL_31:
    swift_bridgeObjectRetain_n();
    outlined retain of [String : String]((uint64_t)v60);
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v53 = (uint64_t *)v0;
    if (v3)
      goto LABEL_5;
    goto LABEL_32;
  }
  outlined init with take of Transform?(v0, (uint64_t)v59, &demangling cache variable for type metadata for AnimationLibraryResource?);
  outlined init with take of Transform?((uint64_t)v59, (uint64_t)&v62, &demangling cache variable for type metadata for AnimationLibraryResource?);
  v25 = v62;
  if (v62)
  {
    swift_beginAccess();
    v26 = *(_QWORD *)(*(_QWORD *)(v25 + 24) + 16);
    outlined retain of OrbitEntityActionHandler((uint64_t)v59);
    v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v26);
    outlined release of TimelineDefinition?((uint64_t)v59);
    if (v2 >> 62)
      goto LABEL_31;
  }
  else
  {
    v2 = MEMORY[0x24BEE4AF8];
    if (MEMORY[0x24BEE4AF8] >> 62)
      goto LABEL_31;
  }
LABEL_4:
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  outlined retain of [String : String]((uint64_t)v60);
  v53 = (uint64_t *)v0;
  if (v3)
  {
LABEL_5:
    swift_beginAccess();
    v56 = 0;
    v4 = 4;
    while (1)
    {
      v5 = v4 - 4;
      if ((v2 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x220769770](v4 - 4, v2);
        v7 = v4 - 3;
        if (__OFADD__(v5, 1))
          goto LABEL_77;
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * v4);
        swift_retain();
        v7 = v4 - 3;
        if (__OFADD__(v5, 1))
        {
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
      }
      v8 = *(_QWORD *)(v6 + 16);
      swift_beginAccess();
      if (v58[2])
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if ((v9 & 1) != 0)
        {
          swift_endAccess();
          goto LABEL_7;
        }
      }
      swift_endAccess();
      swift_beginAccess();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      v13 = v58[2];
      v14 = (v11 & 1) == 0;
      v15 = v13 + v14;
      if (__OFADD__(v13, v14))
        goto LABEL_80;
      v16 = v11;
      if (v58[3] >= v15)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v19 = v58;
          if ((v11 & 1) == 0)
            goto LABEL_19;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          v19 = v58;
          if ((v16 & 1) == 0)
            goto LABEL_19;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
        if ((v16 & 1) != (v18 & 1))
          goto LABEL_86;
        v12 = v17;
        v19 = v58;
        if ((v16 & 1) == 0)
        {
LABEL_19:
          v19[(v12 >> 6) + 8] |= 1 << v12;
          v20 = 8 * v12;
          *(_QWORD *)(v19[6] + v20) = v8;
          *(_QWORD *)(v19[7] + v20) = v56;
          v21 = v19[2];
          v22 = __OFADD__(v21, 1);
          v23 = v21 + 1;
          if (v22)
            goto LABEL_84;
          v19[2] = v23;
          goto LABEL_24;
        }
      }
      *(_QWORD *)(v19[7] + 8 * v12) = v56;
LABEL_24:
      v58 = v19;
      swift_bridgeObjectRelease();
      swift_endAccess();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (__OFADD__(v57, 1))
        goto LABEL_81;
      v56 = ++v57;
LABEL_7:
      swift_release();
      ++v4;
      if (v7 == v3)
        goto LABEL_33;
    }
  }
LABEL_32:
  v56 = 0;
LABEL_33:
  swift_bridgeObjectRelease_n();
  v27 = v53[1];
  if (!v27)
  {
LABEL_71:
    specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v53, v27, v53[2], v53[3]);
    if (v51)
    {
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      REAnimationLibraryDefinitionSetDefaultEntryKey();
      swift_release();
    }
    AnimationLibraryAsset = REAnimationLibraryDefinitionCreateAnimationLibraryAsset();
    RERelease();
    swift_bridgeObjectRelease();
    return AnimationLibraryAsset;
  }
  v54 = v27 + 64;
  v28 = 1 << *(_BYTE *)(v27 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v27 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v31 = 0;
  v55 = (unint64_t)(v28 + 63) >> 6;
  while (v30)
  {
    v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v33 = v32 | (v31 << 6);
LABEL_52:
    v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v33) + 16);
    swift_beginAccess();
    if (v58[2] && (specialized __RawDictionaryStorage.find<A>(_:)(v36), (v37 & 1) != 0))
    {
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      v38 = v27;
      swift_endAccess();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_retain();
      v39 = swift_isUniquelyReferenced_nonNull_native();
      v41 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
      v42 = v58[2];
      v43 = (v40 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
        goto LABEL_78;
      v45 = v40;
      if (v58[3] >= v44)
      {
        if ((v39 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, v39);
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v36);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_86;
        v41 = v46;
      }
      if ((v45 & 1) != 0)
      {
        *(_QWORD *)(v58[7] + 8 * v41) = v56;
      }
      else
      {
        v58[(v41 >> 6) + 8] |= 1 << v41;
        v48 = 8 * v41;
        *(_QWORD *)(v58[6] + v48) = v36;
        *(_QWORD *)(v58[7] + v48) = v56;
        v49 = v58[2];
        v22 = __OFADD__(v49, 1);
        v50 = v49 + 1;
        if (v22)
          goto LABEL_83;
        v58[2] = v50;
      }
      swift_bridgeObjectRelease();
      swift_endAccess();
      REAnimationLibraryDefinitionAddEntryAsset();
      if (__OFADD__(v57, 1))
        goto LABEL_79;
      v27 = v38;
      v56 = ++v57;
    }
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    REAnimationLibraryDefinitionAddKeyedEntryIndex();
    swift_release();
    swift_release();
  }
  v22 = __OFADD__(v31++, 1);
  if (v22)
    goto LABEL_82;
  if (v31 >= v55)
  {
LABEL_70:
    swift_release();
    goto LABEL_71;
  }
  v34 = *(_QWORD *)(v54 + 8 * v31);
  if (v34)
  {
LABEL_51:
    v30 = (v34 - 1) & v34;
    v33 = __clz(__rbit64(v34)) + (v31 << 6);
    goto LABEL_52;
  }
  v35 = v31 + 1;
  if (v31 + 1 >= v55)
    goto LABEL_70;
  v34 = *(_QWORD *)(v54 + 8 * v35);
  if (v34)
    goto LABEL_50;
  v35 = v31 + 2;
  if (v31 + 2 >= v55)
    goto LABEL_70;
  v34 = *(_QWORD *)(v54 + 8 * v35);
  if (v34)
    goto LABEL_50;
  v35 = v31 + 3;
  if (v31 + 3 >= v55)
    goto LABEL_70;
  v34 = *(_QWORD *)(v54 + 8 * v35);
  if (v34)
  {
LABEL_50:
    v31 = v35;
    goto LABEL_51;
  }
  while (1)
  {
    v31 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v31 >= v55)
      goto LABEL_70;
    v34 = *(_QWORD *)(v54 + 8 * v31);
    ++v35;
    if (v34)
      goto LABEL_51;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

__n128 AnimationLibraryComponent.init(dictionaryLiteral:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  specialized AnimationLibraryDefinition.init(_:)(a1, (uint64_t)v7);
  v5 = (__n128)v7[1];
  v6 = v7[0];
  v3 = v8;
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)a2 = v6;
  *(__n128 *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

double AnimationLibraryComponent.init(animations:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  AnimationLibraryComponent.AnimationCollection.init(dictionary:)(a1, (uint64_t)v6);
  v3 = v7;
  result = *(double *)v6;
  v5 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.init(dictionary:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 v19;

  v2 = result;
  v4 = 0;
  *(_QWORD *)&v19 = 0;
  *((_QWORD *)&v19 + 1) = MEMORY[0x24BEE4B00];
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }
    v16 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v16 >= v9)
      goto LABEL_21;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    ++v4;
    if (!v17)
    {
      v4 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_21;
      v17 = *(_QWORD *)(v5 + 8 * v4);
      if (!v17)
      {
        v4 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_21;
        v17 = *(_QWORD *)(v5 + 8 * v4);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v8 = (v17 - 1) & v17;
    v11 = __clz(__rbit64(v17)) + (v4 << 6);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v11);
    v13 = *v12;
    v14 = v12[1];
    v15 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain();
    AnimationLibraryDefinition.addResource(_:_:)(v13, v14, v15);
    swift_bridgeObjectRelease();
    result = swift_release();
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_21:
    result = swift_release();
    *(_OWORD *)a2 = v19;
    *(_OWORD *)(a2 + 16) = xmmword_21BE56B70;
    *(_QWORD *)(a2 + 32) = 0;
    return result;
  }
  v17 = *(_QWORD *)(v5 + 8 * v18);
  if (v17)
  {
    v4 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v4 >= v9)
      goto LABEL_21;
    v17 = *(_QWORD *)(v5 + 8 * v4);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

double AnimationLibraryComponent.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;

  specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x24BEE4AF8], (uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)a1 = v5[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v2;
  return result;
}

uint64_t AnimationLibraryComponent.defaultAnimation.getter()
{
  return AnimationLibraryDefinition.defaultResource.getter();
}

uint64_t AnimationLibraryComponent.defaultKey.getter()
{
  uint64_t *v0;

  return specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t key path getter for AnimationLibraryComponent.defaultKey : AnimationLibraryComponent@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v5, v6);
  swift_bridgeObjectRetain();
  v7 = specialized AnimationLibraryDefinition.defaultResourceKey.getter(v3, v4, v5, v6);
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v5, v6);
  result = swift_bridgeObjectRelease();
  *a2 = v7;
  a2[1] = v9;
  return result;
}

uint64_t AnimationLibraryComponent.defaultKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = outlined consume of String??(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*AnimationLibraryComponent.defaultKey.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;

  a1[2] = (uint64_t)v1;
  *a1 = specialized AnimationLibraryDefinition.defaultResourceKey.getter(*v1, v1[1], v1[2], v1[3]);
  a1[1] = v3;
  return AnimationLibraryComponent.defaultKey.modify;
}

uint64_t AnimationLibraryComponent.defaultKey.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    outlined consume of String??(v5, v6);
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = outlined consume of String??(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(v3 + 24) = v2;
  }
  return result;
}

uint64_t static AnimationLibraryComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  return AnimationLibraryComponent.init(_:)(a1);
}

uint64_t AnimationLibraryComponent.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t AnimationLibraryAsset;
  uint64_t v3;
  _QWORD *v4;
  uint64_t EntryCount;
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;

  AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (AnimationLibraryAsset)
  {
    v3 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    v4 = (_QWORD *)swift_allocObject();
    v4[4] = 0;
    v4[2] = v3;
    RERetain();
    EntryCount = REAnimationLibraryAssetGetEntryCount();
    result = specialized Array.init(repeating:count:)(0, EntryCount);
    v7 = 0;
    v4[3] = result;
    v8 = (unint64_t)v4;
    v9 = xmmword_21BE56B70;
  }
  else
  {
    result = specialized AnimationLibraryDefinition.init(_:)(MEMORY[0x24BEE4AF8], (uint64_t)v10);
    v8 = v10[0];
    v9 = v10[1];
    v7 = v11;
  }
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 32) = v7;
  return result;
}

uint64_t AnimationLibraryComponent.__toCore(_:)()
{
  __int128 *v0;
  __int128 v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[8];
  _BYTE v7[8];
  _BYTE v8[16];
  _BYTE v9[8];
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[1];
  v3 = *v0;
  v4 = v1;
  v5 = *((_QWORD *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v10
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v8, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for String??), v12 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v7, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v7, (uint64_t)&v13, &demangling cache variable for type metadata for [AnimationResource]?), v13))
  {
    result = AnimationLibraryDefinition.createAsset()();
    if (!result)
      return result;
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v6, &demangling cache variable for type metadata for AnimationLibraryResource?);
  result = outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v14)
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  return result;
}

uint64_t AnimationLibraryComponent.animations.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  *a1 = v3;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v4, v5);
  return swift_bridgeObjectRetain();
}

__n128 AnimationLibraryComponent.animations.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of String??(v3, v4);
  swift_bridgeObjectRelease();
  result = v6;
  *(_OWORD *)v1 = v7;
  *(__n128 *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AnimationLibraryComponent.animations.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AnimationLibraryComponent.AnimationCollection.count.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = v0[1];
    if (!v2)
      return 0;
  }
  return *(_QWORD *)(v2 + 16);
}

BOOL AnimationLibraryComponent.AnimationCollection.isEmpty.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = v0[1];
    if (!v2)
      return 1;
  }
  return *(_QWORD *)(v2 + 16) == 0;
}

uint64_t AnimationLibraryComponent.AnimationCollection.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t result;

  if (*v1)
  {
    swift_retain();
    v3 = AnimationLibraryResource.keyedResources.getter();
    v4 = specialized Dictionary.startIndex.getter(v3);
    v6 = v5;
    v8 = v7;
    swift_release();
  }
  else
  {
    if (v1[1])
      v9 = v1[1];
    else
      v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v4 = specialized Dictionary.startIndex.getter(v9);
    v6 = v10;
    v8 = v11;
    swift_bridgeObjectRetain();
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v8 & 1;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.endIndex.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t result;

  if (*v1)
  {
    swift_retain();
    v3 = AnimationLibraryResource.keyedResources.getter();
    swift_release();
    v4 = *(_BYTE *)(v3 + 32);
    v5 = *(_DWORD *)(v3 + 36);
  }
  else
  {
    if (v1[1])
      v6 = v1[1];
    else
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v4 = *(_BYTE *)(v6 + 32);
    v5 = *(_DWORD *)(v6 + 36);
    swift_bridgeObjectRetain();
  }
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = 1 << v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  if (!v3)
  {
    if (*v1)
      v6 = AnimationLibraryResource.keyedResources.getter();
    else
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v3 = v6;
  }
  v7 = -1 << *(_BYTE *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 64);
  swift_release();
  outlined consume of String??(v4, v5);
  result = swift_bridgeObjectRelease();
  if (-v7 < 64)
    v10 = ~(-1 << -(char)v7);
  else
    v10 = -1;
  *a1 = v3;
  a1[1] = v3 + 64;
  a1[2] = ~v7;
  a1[3] = 0;
  a1[4] = v10 & v8;
  return result;
}

uint64_t (*AnimationLibraryComponent.AnimationCollection.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = AnimationLibraryComponent.AnimationCollection.subscript.getter(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v10 = *v2;
  v9 = v2[1];
  v11 = v2[2];
  v12 = v2[3];
  v13 = v2[4];
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v13;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v11, v12);
  swift_bridgeObjectRetain();
  outlined copy of [A : B].Index._Variant<A, B>(v3, v4, v5);
  return outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
}

uint64_t AnimationLibraryComponent.AnimationCollection.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  if (v2[1])
  {
    v7 = v2[1];
  }
  else
  {
    if (*v2)
      v8 = AnimationLibraryResource.keyedResources.getter();
    else
      v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v7 = v8;
  }
  swift_bridgeObjectRetain();
  v9 = specialized _NativeDictionary.index(after:)(v4, v5, v6, v7);
  v11 = v10;
  v13 = v12;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v13 & 1;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.formIndex(after:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  if (v1[1])
  {
    v3 = v1[1];
  }
  else
  {
    if (*v1)
      v4 = AnimationLibraryResource.keyedResources.getter();
    else
      v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v3 = v4;
  }
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  swift_bridgeObjectRetain();
  v8 = specialized _NativeDictionary.index(after:)(v5, v6, v7, v3);
  v10 = v9;
  v12 = v11;
  outlined consume of [String : AnimationResource].Index._Variant(v5, v6, v7);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v12 & 1;
  return result;
}

_QWORD *AnimationLibraryComponent.AnimationCollection.subscript.getter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v1[1])
  {
    v5 = v1[1];
  }
  else
  {
    if (*v1)
      v6 = AnimationLibraryResource.keyedResources.getter();
    else
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v5 = v6;
  }
  v7 = specialized Dictionary.subscript.getter(&v9, v2, v3, v4, v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t AnimationLibraryComponent.AnimationCollection.Iterator.next()()
{
  _QWORD *v0;
  unint64_t v1;
  int64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;

  v2 = v0[3];
  v1 = v0[4];
  if (v1)
  {
    v3 = (v1 - 1) & v1;
    v4 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    v5 = *(_QWORD *)(*(_QWORD *)(*v0 + 48) + 16 * v4);
    swift_bridgeObjectRetain();
    swift_retain();
LABEL_4:
    v0[3] = v2;
    v0[4] = v3;
    return v5;
  }
  v7 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    v8 = (unint64_t)(v0[2] + 64) >> 6;
    if (v7 >= v8)
    {
      v3 = 0;
      v5 = 0;
      goto LABEL_4;
    }
    v9 = v0[1];
    v10 = *(_QWORD *)(v9 + 8 * v7);
    if (v10)
      goto LABEL_8;
    if (v2 + 2 < v8)
    {
      v10 = *(_QWORD *)(v9 + 8 * (v2 + 2));
      if (v10)
      {
        v7 = v2 + 2;
LABEL_8:
        v3 = (v10 - 1) & v10;
        v4 = __clz(__rbit64(v10)) + (v7 << 6);
        v2 = v7;
        goto LABEL_3;
      }
      if (v2 + 3 >= v8)
      {
        v3 = 0;
        v5 = 0;
        v2 += 2;
        goto LABEL_4;
      }
      v10 = *(_QWORD *)(v9 + 8 * (v2 + 3));
      if (v10)
      {
        v7 = v2 + 3;
        goto LABEL_8;
      }
      v7 = v2 + 4;
      if (v2 + 4 >= v8)
      {
        v3 = 0;
        v5 = 0;
        v2 += 3;
        goto LABEL_4;
      }
      v10 = *(_QWORD *)(v9 + 8 * v7);
      if (v10)
        goto LABEL_8;
      v7 = v8 - 1;
      v11 = v2 + 5;
      while (v8 != v11)
      {
        v10 = *(_QWORD *)(v9 + 8 * v11++);
        if (v10)
        {
          v7 = v11 - 1;
          goto LABEL_8;
        }
      }
    }
    v3 = 0;
    v5 = 0;
    v2 = v7;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for IteratorProtocol.next() in conformance AnimationLibraryComponent.AnimationCollection.Iterator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = AnimationLibraryComponent.AnimationCollection.Iterator.next()();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

BOOL static AnimationLibraryComponent.AnimationCollection.Index.< infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.Index.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(v1, v2, v3);
  type metadata accessor for AnimationResource();
  Dictionary.Index.hash(into:)();
  return outlined consume of [String : AnimationResource].Index._Variant(v1, v2, v3);
}

BOOL static AnimationLibraryComponent.AnimationCollection.Index.== infix(_:_:)(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int AnimationLibraryComponent.AnimationCollection.Index.hashValue.getter()
{
  Hasher.init(_seed:)();
  type metadata accessor for AnimationResource();
  Dictionary.Index.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result < *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 >= *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result >= *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(a2 + 16) & 1) == 0 && (*(_BYTE *)(result + 16) & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 8) == *(_QWORD *)(result + 8))
      return *(_QWORD *)a2 < *(_QWORD *)result;
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  Hasher.init(_seed:)();
  type metadata accessor for AnimationResource();
  Dictionary.Index.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  type metadata accessor for AnimationResource();
  return Dictionary.Index.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  Hasher.init(_seed:)();
  type metadata accessor for AnimationResource();
  Dictionary.Index.hash(into:)();
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationLibraryComponent.AnimationCollection.Index(_BOOL8 result, uint64_t a2)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0 && (*(_BYTE *)(a2 + 16) & 1) == 0)
  {
    if (*(_DWORD *)(result + 8) == *(_QWORD *)(a2 + 8))
      return *(_QWORD *)result == *(_QWORD *)a2;
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection(_QWORD *a1, uint64_t a2))(void (***a1)(_QWORD, _QWORD), uint64_t a2)
{
  _QWORD *v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = malloc(0x40uLL);
  *a1 = v4;
  v5 = AnimationLibraryComponent.AnimationCollection.subscript.read(v4, a2);
  v4[4] = v6;
  v4 += 4;
  v4[2] = v7;
  v4[3] = v5;
  v4[1] = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection;
}

void protocol witness for Collection.subscript.read in conformance AnimationLibraryComponent.AnimationCollection(void (***a1)(_QWORD, _QWORD), uint64_t a2)
{
  void (**v3)(_QWORD, _QWORD);

  v3 = *a1;
  swift_bridgeObjectRelease();
  swift_release();
  v3[7](v3, a2);
  free(v3);
}

uint64_t (*AnimationLibraryComponent.AnimationCollection.subscript.read(_QWORD *a1, uint64_t a2))()
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v2[1])
  {
    v7 = v2[1];
  }
  else
  {
    if (*v2)
      v8 = AnimationLibraryResource.keyedResources.getter();
    else
      v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v7 = v8;
  }
  specialized Dictionary.subscript.getter(&v11, v4, v5, v6, v7);
  *a1 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = v11;
  return AnimationLibraryComponent.AnimationCollection.subscript.read;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.read()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)(a1 + 40);
  v10 = *v2;
  v9 = v2[1];
  v11 = v2[2];
  v12 = v2[3];
  v13 = v2[4];
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  *(_QWORD *)(a2 + 80) = v13;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v11, v12);
  swift_bridgeObjectRetain();
  outlined copy of [A : B].Index._Variant<A, B>(v3, v4, v5);
  return outlined copy of [A : B].Index._Variant<A, B>(v6, v7, v8);
}

uint64_t protocol witness for Collection.indices.getter in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X8>)
{
  return specialized Collection<>.indices.getter(a1);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AnimationLibraryComponent.AnimationCollection()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = v0[1];
    if (!v2)
      return 1;
  }
  return *(_QWORD *)(v2 + 16) == 0;
}

void protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = -2;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return specialized Collection.index(_:offsetBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, a3);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return specialized Collection.index(_:offsetBy:limitedBy:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_BYTE *)(a3 + 16), a4);
}

int64_t protocol witness for Collection.distance(from:to:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2)
{
  return specialized Collection.distance(from:to:)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 16));
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  __int128 v7;
  _OWORD v8[2];

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 16);
  v5 = a2[1];
  v7 = *a2;
  v8[0] = v5;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(v2, v3, v4, &v7);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t result, uint64_t a2)
{
  int v2;

  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((*(_BYTE *)(a2 + 40) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != v2)
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  if ((*(_BYTE *)(result + 16) & 1) != 0 || (*(_BYTE *)(a2 + 16) & 1) != 0)
    goto LABEL_13;
  if (*(_DWORD *)(result + 8) != *(_QWORD *)(a2 + 8))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(_QWORD *)result < *(_QWORD *)a2)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (((*(_BYTE *)(a2 + 40) | *(_BYTE *)(result + 40)) & 1) != 0)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(result + 32))
    goto LABEL_11;
  if (*(_QWORD *)(a2 + 24) < *(_QWORD *)(result + 24))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t result;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  if (v2[1])
  {
    v7 = v2[1];
  }
  else
  {
    if (*v2)
      v8 = AnimationLibraryResource.keyedResources.getter();
    else
      v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v7 = v8;
  }
  swift_bridgeObjectRetain();
  v9 = specialized _NativeDictionary.index(after:)(v4, v5, v6, v7);
  v11 = v10;
  v13 = v12;
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v13 & 1;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  if (v1[1])
  {
    v3 = v1[1];
  }
  else
  {
    if (*v1)
      v4 = AnimationLibraryResource.keyedResources.getter();
    else
      v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v3 = v4;
  }
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  swift_bridgeObjectRetain();
  v8 = specialized _NativeDictionary.index(after:)(v5, v6, v7, v3);
  v10 = v9;
  v12 = v11;
  outlined consume of [String : AnimationResource].Index._Variant(v5, v6, v7);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnimationLibraryComponent.AnimationCollection@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  if (v3)
    goto LABEL_4;
  if (*v1)
  {
    v3 = AnimationLibraryResource.keyedResources.getter();
LABEL_4:
    swift_release();
    goto LABEL_5;
  }
  v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
LABEL_5:
  outlined consume of String??(v4, v5);
  result = swift_bridgeObjectRelease();
  v7 = -1;
  v8 = -1 << *(_BYTE *)(v3 + 32);
  if (-v8 < 64)
    v7 = ~(-1 << -(char)v8);
  v9 = v7 & *(_QWORD *)(v3 + 64);
  *a1 = v3;
  a1[1] = v3 + 64;
  a1[2] = ~v8;
  a1[3] = 0;
  a1[4] = v9;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance AnimationLibraryComponent.AnimationCollection()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  if (*v0)
  {
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 24);
  }
  else
  {
    v2 = v0[1];
    if (!v2)
      return 0;
  }
  return *(_QWORD *)(v2 + 16);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(_OWORD *))specialized _copyCollectionToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnimationLibraryComponent.AnimationCollection(unint64_t *a1, _QWORD *a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance AnimationLibraryComponent@<X0>(uint64_t a1@<X8>)
{
  return AnimationLibraryComponent.init(_:)(a1);
}

void protocol witness for static Component.__coreComponentType.getter in conformance AnimationLibraryComponent(_DWORD *a1@<X8>)
{
  *a1 = 45;
}

__n128 protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance AnimationLibraryComponent@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;

  specialized AnimationLibraryDefinition.init(_:)(a1, (uint64_t)v7);
  v5 = (__n128)v7[1];
  v6 = v7[0];
  v3 = v8;
  swift_bridgeObjectRelease();
  result = v5;
  *(_OWORD *)a2 = v6;
  *(__n128 *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 32) = v3;
  return result;
}

double _Proto_AnimationLibraryComponent_v1.init()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x24BEE4B00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v1;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t *EntryIndexFromKey;

  v3 = v2;
  v6 = v2[1];
  if (!v6)
  {
    v9 = *v3;
    if (!*v3)
      return v9;
    String.utf8CString.getter();
    EntryIndexFromKey = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
    swift_release();
    if (EntryIndexFromKey)
      return AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
    return 0;
  }
  if (!*(_QWORD *)(v6 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *a2;
  v9 = a2[1];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v6, v7);
  swift_bridgeObjectRetain();
  v10 = a3(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v6, v7);
  result = swift_bridgeObjectRelease();
  *a4 = v10;
  return result;
}

uint64_t key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a3;
  v3 = a3[1];
  v5 = *a1;
  if (*a1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    AnimationLibraryDefinition.addResource(_:_:)(v4, v3, v5);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    AnimationLibraryDefinition.removeResource(_:)(v4, v3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    AnimationLibraryDefinition.addResource(_:_:)(a2, a3, a1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    AnimationLibraryDefinition.removeResource(_:)(a2, a3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t (*_Proto_AnimationLibraryComponent_v1.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = _Proto_AnimationLibraryComponent_v1.subscript.getter(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t AnimationLibraryComponent.AnimationCollection.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = *a1;
  v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (v3)
    {
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v4, v2, v3);
    }
    else
    {
      AnimationLibraryDefinition.removeResource(_:)(v4, v2);
    }
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v3)
      AnimationLibraryDefinition.addResource(_:_:)(v4, v2, v3);
    else
      AnimationLibraryDefinition.removeResource(_:)(v4, v2);
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t _Proto_AnimationLibraryComponent_v1.addToLibrary(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
    do
    {
      v3 = *(v2 - 2);
      v4 = *(v2 - 1);
      v5 = *v2;
      v2 += 3;
      swift_bridgeObjectRetain();
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v3, v4, v5);
      swift_release();
      swift_bridgeObjectRelease();
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t AnimationLibraryComponent.unkeyedResources.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v1 = specialized AnimationLibraryDefinition.unkeyedResources.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 32));
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3)
      return v1;
    goto LABEL_3;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v1;
}

double static _Proto_AnimationLibraryComponent_v1.__fromCore(_:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t AnimationLibraryAsset;
  uint64_t v3;
  _QWORD *v4;
  uint64_t EntryCount;
  uint64_t v6;
  uint64_t v7;
  double result;

  AnimationLibraryAsset = REAnimationLibraryComponentGetAnimationLibraryAsset();
  if (AnimationLibraryAsset)
  {
    v3 = AnimationLibraryAsset;
    type metadata accessor for AnimationLibraryResource();
    v4 = (_QWORD *)swift_allocObject();
    v4[4] = 0;
    v4[2] = v3;
    RERetain();
    EntryCount = REAnimationLibraryAssetGetEntryCount();
    v6 = specialized Array.init(repeating:count:)(0, EntryCount);
    v7 = 0;
    v4[3] = v6;
  }
  else
  {
    v4 = 0;
    v7 = MEMORY[0x24BEE4B00];
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v7;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_21BE56B70;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t _Proto_AnimationLibraryComponent_v1.__toCore(_:)()
{
  __int128 *v0;
  __int128 v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[8];
  _BYTE v7[8];
  _BYTE v8[16];
  _BYTE v9[8];
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[1];
  v3 = *v0;
  v4 = v1;
  v5 = *((_QWORD *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v7, (uint64_t)&v13, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v13
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v8, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v8, (uint64_t)v11, &demangling cache variable for type metadata for String??), v12 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v9, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for [AnimationResource]?), v10))
  {
    result = AnimationLibraryDefinition.createAsset()();
    if (!result)
      return result;
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v6, &demangling cache variable for type metadata for AnimationLibraryResource?);
  result = outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v14)
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance AnimationLibraryComponent()
{
  __int128 *v0;
  __int128 v1;
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[8];
  _BYTE v7[16];
  _BYTE v8[8];
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[8];
  uint64_t v13;
  uint64_t v14;

  v1 = v0[1];
  v3 = *v0;
  v4 = v1;
  v5 = *((_QWORD *)v0 + 4);
  outlined init with take of Transform?((uint64_t)&v3 + 8, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  outlined init with take of Transform?((uint64_t)v6, (uint64_t)&v14, (uint64_t *)&demangling cache variable for type metadata for [String : AnimationResource]?);
  if (v14
    || (outlined init with take of Transform?((uint64_t)&v4, (uint64_t)v7, &demangling cache variable for type metadata for String??), outlined init with take of Transform?((uint64_t)v7, (uint64_t)v12, &demangling cache variable for type metadata for String??), v13 != 1)|| (outlined init with take of Transform?((uint64_t)&v5, (uint64_t)v8, &demangling cache variable for type metadata for [AnimationResource]?), outlined init with take of Transform?((uint64_t)v8, (uint64_t)&v11, &demangling cache variable for type metadata for [AnimationResource]?), v11))
  {
    result = AnimationLibraryDefinition.createAsset()();
    if (!result)
      return result;
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  }
  outlined init with take of Transform?((uint64_t)&v3, (uint64_t)v9, &demangling cache variable for type metadata for AnimationLibraryResource?);
  result = outlined init with take of Transform?((uint64_t)v9, (uint64_t)&v10, &demangling cache variable for type metadata for AnimationLibraryResource?);
  if (v10)
    return REAnimationLibraryComponentAssignAnimationLibraryAsset();
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(_OWORD *))specialized _copySequenceToContiguousArray<A>(_:));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent.AnimationCollection(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *))
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v4 = *(_OWORD *)(v3 + 16);
  v7[0] = *(_OWORD *)v3;
  v7[1] = v4;
  v8 = *(_QWORD *)(v3 + 32);
  v5 = a3(v7);
  outlined release of AnimationLibraryComponent((uint64_t)v7);
  return v5;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance _Proto_AnimationLibraryComponent_v1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, a4, a5);
}

uint64_t AnimationLibraryComponent.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v44 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v43 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v4);
  v40 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = v1[1];
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v45 = *v1;
  v46 = v7;
  v47 = v8;
  v48 = v9;
  v49 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v11 + 32) = 0x73656D616ELL;
  *(_QWORD *)(v11 + 40) = 0xE500000000000000;
  v39 = v11;
  v35[1] = v7;
  if (v7)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    outlined copy of String??(v8, v9);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v6)
    {
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      v12 = AnimationLibraryResource.keyedResources.getter();
    }
    else
    {
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      outlined copy of String??(v8, v9);
      swift_bridgeObjectRetain();
      v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    }
    v7 = v12;
  }
  v35[0] = v6;
  swift_release();
  v36 = v9;
  v37 = v8;
  outlined consume of String??(v8, v9);
  v38 = v10;
  result = swift_bridgeObjectRelease();
  v14 = 0;
  v15 = v7 + 64;
  v16 = 1 << *(_BYTE *)(v7 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v7 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v18)
    goto LABEL_11;
LABEL_10:
  v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v21 | (v14 << 6); ; i = __clz(__rbit64(v24)) + (v14 << 6))
  {
    v26 = (uint64_t *)(*(_QWORD *)(v7 + 48) + 16 * i);
    v28 = *v26;
    v27 = v26[1];
    swift_bridgeObjectRetain();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
      v20 = (_QWORD *)result;
    }
    v30 = v20[2];
    v29 = v20[3];
    if (v30 >= v29 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v29 > 1), v30 + 1, 1, v20);
      v20 = (_QWORD *)result;
    }
    v20[2] = v30 + 1;
    v31 = &v20[2 * v30];
    v31[4] = v28;
    v31[5] = v27;
    if (v18)
      goto LABEL_10;
LABEL_11:
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v19)
      goto LABEL_33;
    v24 = *(_QWORD *)(v15 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v19)
        goto LABEL_33;
      v24 = *(_QWORD *)(v15 + 8 * v14);
      if (!v24)
      {
        v14 = v23 + 2;
        if (v23 + 2 >= v19)
          goto LABEL_33;
        v24 = *(_QWORD *)(v15 + 8 * v14);
        if (!v24)
        {
          v14 = v23 + 3;
          if (v23 + 3 >= v19)
            goto LABEL_33;
          v24 = *(_QWORD *)(v15 + 8 * v14);
          if (!v24)
            break;
        }
      }
    }
LABEL_26:
    v18 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v19)
  {
LABEL_33:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(v37, v36);
    swift_bridgeObjectRelease();
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v33 = v39;
    *(_QWORD *)(v39 + 72) = v32;
    *(_QWORD *)(v33 + 48) = v20;
    v34 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v40, 1, 1, v34);
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, *MEMORY[0x24BEE43C0], v42);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
  v24 = *(_QWORD *)(v15 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v19)
      goto LABEL_33;
    v24 = *(_QWORD *)(v15 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_26;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t _Proto_AnimationLibraryComponent_v1.makeIterator()@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (v1[1])
  {
    v3 = v1[1];
  }
  else if (*v1)
  {
    v3 = AnimationLibraryResource.keyedResources.getter();
  }
  else
  {
    v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  v4 = -1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v3 + 64);
  *a1 = v3;
  a1[1] = v3 + 64;
  a1[2] = ~v5;
  a1[3] = 0;
  a1[4] = v6;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _Proto_AnimationLibraryComponent_v1@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v2 = v1;
  v5 = *v1;
  v4 = v1[1];
  if (!v4)
  {
    if (v5)
      v6 = AnimationLibraryResource.keyedResources.getter();
    else
      v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v4 = v6;
  }
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = *(_QWORD *)(v4 + 64);
  swift_release();
  if (-v7 < 64)
    v9 = ~(-1 << -(char)v7);
  else
    v9 = -1;
  v10 = v9 & v8;
  outlined consume of String??(v2[2], v2[3]);
  result = swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v4 + 64;
  a1[2] = ~v7;
  a1[3] = 0;
  a1[4] = v10;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnimationLibraryComponent()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[2];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 16);
  v4[0] = *(_OWORD *)v0;
  v4[1] = v1;
  v5 = *(_QWORD *)(v0 + 32);
  v2 = specialized _copySequenceToContiguousArray<A>(_:)(v4);
  outlined release of AnimationLibraryComponent((uint64_t)v4);
  return v2;
}

unint64_t *AnimationLibraryComponent.animationResource(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t *EntryIndexFromKey;

  v5 = v2[1];
  v7 = v2[2];
  v6 = v2[3];
  if (!v5)
  {
    if (*v2)
    {
      String.utf8CString.getter();
      swift_retain();
      outlined copy of String??(v7, v6);
      swift_bridgeObjectRetain();
      EntryIndexFromKey = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
      swift_release();
      if (EntryIndexFromKey)
        EntryIndexFromKey = (unint64_t *)AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_9;
    }
    return 0;
  }
  if (!*(_QWORD *)(v5 + 16))
    return 0;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of String??(v7, v6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of String??(v7, v6);
    swift_bridgeObjectRelease();
    return 0;
  }
  EntryIndexFromKey = *(unint64_t **)(*(_QWORD *)(v5 + 56) + 8 * v8);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_9:
  outlined consume of String??(v7, v6);
  swift_bridgeObjectRelease();
  return EntryIndexFromKey;
}

uint64_t key path getter for AnimationLibraryComponent.subscript(_:) : AnimationLibraryComponent@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *a2;
  v7 = a2[1];
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of String??(v4, v5);
  swift_bridgeObjectRetain();
  v8 = AnimationLibraryComponent.animationResource(_:)(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of String??(v4, v5);
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t AnimationLibraryComponent.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    AnimationLibraryDefinition.addResource(_:_:)(a2, a3, a1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    AnimationLibraryDefinition.removeResource(_:)(a2, a3);
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t (*AnimationLibraryComponent.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  uint64_t v3;

  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  *a1 = AnimationLibraryComponent.animationResource(_:)(a2, a3);
  return AnimationLibraryComponent.AnimationCollection.subscript.modify;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0)
    goto LABEL_10;
  if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
  {
    __break(1u);
  }
  else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    if (*(_DWORD *)(a4 + 36) == a2)
      return _HashTable.occupiedBucket(after:)();
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v6 = result;
  if ((a3 & 1) == 0)
  {
    if (result < 0 || -(-1 << *(_BYTE *)(a4 + 32)) <= result)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + 64 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        return _HashTable.occupiedBucket(after:)();
      goto LABEL_13;
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = __CocoaDictionary.Index.age.getter();
  if ((_DWORD)result != *(_DWORD *)(a4 + 36))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  __CocoaDictionary.Index.key.getter();
  outlined copy of [A : B].Index._Variant<A, B>(v6, a2, 1);
  type metadata accessor for __REAsset();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  specialized __RawDictionaryStorage.find<A>(_:)();
  v9 = v8;
  result = swift_release();
  if ((v9 & 1) != 0)
  {
    __CocoaDictionary.Index.dictionary.getter();
    v7 = __CocoaDictionary.index(after:)();
    outlined consume of [String : AnimationResource].Index._Variant(v6, a2, 1);
    swift_unknownObjectRelease();
    return v7;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      a2 = *(_QWORD *)(a2 + 16);
      while ((a1 & 0xC000000000000001) == 0)
      {
        v7 = __OFADD__(v5++, 1);
        v9 = v7;
        v10 = swift_retain();
        if ((v9 & 1) != 0)
          goto LABEL_17;
        v11 = *(_QWORD *)(v10 + 16);
        swift_release();
        if (a2 == v11)
        {
LABEL_15:
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_13:
        if (v5 == v4)
          goto LABEL_14;
      }
      v6 = MEMORY[0x220769770](v5, a1);
      v7 = __OFADD__(v5++, 1);
      if (!v7)
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        goto LABEL_14;
    }
    v8 = *(_QWORD *)(v6 + 16);
    swift_unknownObjectRelease();
    if (a2 == v8)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(uint64_t result, int64_t a2)
{
  int64_t v2;
  int64_t v3;
  uint64_t v5;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
    goto LABEL_10;
  v3 = result;
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (a2 < v3 || v2 < 0)
      goto LABEL_11;
    while (a2 != v3)
    {
      AnimationLibraryResource.resource(_:)(v3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized ContiguousArray._endMutation()();
      if (a2 == ++v3)
        return v5;
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t specialized AnimationLibraryDefinition.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[32];

  v4 = *(_QWORD *)(a1 + 16);
  type metadata accessor for AnimationResource();
  result = Dictionary.init(minimumCapacity:)();
  *(_QWORD *)v12 = result;
  *(_OWORD *)&v12[8] = xmmword_21BE56B70;
  *(_QWORD *)&v12[24] = 0;
  if (v4)
  {
    v6 = (uint64_t *)(a1 + 48);
    do
    {
      v7 = *(v6 - 2);
      v8 = *(v6 - 1);
      v9 = *v6;
      v6 += 3;
      swift_bridgeObjectRetain();
      swift_retain();
      AnimationLibraryDefinition.addResource(_:_:)(v7, v8, v9);
      swift_bridgeObjectRelease();
      result = swift_release();
      --v4;
    }
    while (v4);
    v10 = *(_OWORD *)v12;
    v11 = *(_OWORD *)&v12[16];
  }
  else
  {
    v10 = (unint64_t)result;
    v11 = xmmword_21BE41200;
  }
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = v10;
  *(_OWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, char a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  int v9;
  __int128 v10;
  char v11;
  _BYTE v12[24];
  __int128 v13;
  char v14;
  _BYTE v15[24];
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;

  if ((a3 & 1) != 0)
    goto LABEL_12;
  v4 = a2;
  v13 = *a4;
  v14 = *((_BYTE *)a4 + 16);
  outlined init with take of Transform?((uint64_t)&v13, (uint64_t)v15, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  outlined init with take of Transform?((uint64_t)v15, (uint64_t)&v16, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  if ((v18 & 1) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v17 != (_DWORD)v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v16 > a1)
  {
LABEL_14:
    result = outlined consume of [String : AnimationResource].Index._Variant(a1, v4, 0);
    __break(1u);
    goto LABEL_15;
  }
  v10 = *(__int128 *)((char *)a4 + 24);
  v11 = *((_BYTE *)a4 + 40);
  outlined init with take of Transform?((uint64_t)&v10, (uint64_t)v12, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  result = outlined init with take of Transform?((uint64_t)v12, (uint64_t)&v19, &demangling cache variable for type metadata for [String : AnimationResource].Index._Variant);
  if ((v21 & 1) != 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v8 = v19;
  v9 = v20;
  result = outlined consume of [String : AnimationResource].Index._Variant(a1, v4, 0);
  if (v9 != (_DWORD)v4)
    goto LABEL_10;
  if (v8 <= a1)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized AnimationLibraryDefinition.defaultResourceKey.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *EntryIndexFromKey;
  uint64_t v12;
  char v13;
  char v14;

  if (!a4)
    return 0;
  if (a4 == 1)
  {
    if (!a1 || !REAnimationLibraryAssetGetDefaultEntryKey())
      return 0;
    v8 = String.init(cString:)();
    v10 = v9;
    if (!a2)
      goto LABEL_6;
  }
  else
  {
    v8 = a3;
    v10 = a4;
    if (!a2)
    {
LABEL_6:
      if (a1)
      {
        String.utf8CString.getter();
        outlined copy of String??(a3, a4);
        EntryIndexFromKey = (unint64_t *)REAnimationLibraryAssetGetEntryIndexFromKey();
        swift_release();
        if (EntryIndexFromKey)
        {
          AnimationLibraryResource.resource(_:)(*EntryIndexFromKey);
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          return 0;
        }
        return v8;
      }
      outlined copy of String??(a3, a4);
      goto LABEL_15;
    }
  }
  v12 = *(_QWORD *)(a2 + 16);
  outlined copy of String??(a3, a4);
  if (!v12
    || (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(v8, v10),
        v14 = v13,
        swift_bridgeObjectRelease(),
        (v14 & 1) == 0))
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t specialized Sequence.contains(where:)(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;

  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v9 = v8 | (v2 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 56) + 8 * v9) + 16) == *(_QWORD *)(a2 + 16))
      return 1;
  }
  v10 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v10 >= v7)
    return 0;
  v11 = *(_QWORD *)(v3 + 8 * v10);
  ++v2;
  if (v11)
    goto LABEL_22;
  v2 = v10 + 1;
  if (v10 + 1 >= v7)
    return 0;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_22;
  v2 = v10 + 2;
  if (v10 + 2 >= v7)
    return 0;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
    goto LABEL_22;
  v2 = v10 + 3;
  if (v10 + 3 >= v7)
    return 0;
  v11 = *(_QWORD *)(v3 + 8 * v2);
  if (v11)
  {
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
    goto LABEL_5;
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return 0;
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return 0;
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = *(_QWORD *)(MEMORY[0x220769770](v5, a1) + 16);
        v7 = *(_QWORD *)(a2 + 16);
        swift_unknownObjectRelease();
        if (v6 == v7)
          return v5;
      }
      else if (*(_QWORD *)(*(_QWORD *)(a1 + 8 * v5 + 32) + 16) == *(_QWORD *)(a2 + 16))
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 >> 62)
    goto LABEL_13;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = MEMORY[0x220769770](v5, a1);
        swift_unknownObjectRelease();
        if (v6 == a2)
          return v5;
      }
      else if (*(_QWORD *)(a1 + 8 * v5 + 32) == a2)
      {
        return v5;
      }
      if (__OFADD__(v5, 1))
        break;
      if (++v5 == v4)
        return 0;
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized AnimationLibraryDefinition.unkeyedResources.getter(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  Swift::UInt v28;

  if (a2)
  {
    v6 = a2;
  }
  else
  {
    if (a1)
      v7 = AnimationLibraryResource.keyedResources.getter();
    else
      v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v6 = v7;
  }
  v8 = *(_QWORD *)(v6 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    if (a3)
    {
      v11 = a3;
    }
    else if (a1)
    {
      swift_beginAccess();
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      swift_retain();
      v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v12);
      swift_release();
    }
    else
    {
      v11 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRetain();
    return v11;
  }
  v9 = a2;
  if (!a2)
  {
    if (a1)
      v10 = AnimationLibraryResource.keyedResources.getter();
    else
      v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    v9 = v10;
  }
  v27 = MEMORY[0x24BEE4B08];
  v13 = v9 + 64;
  v14 = 1 << *(_BYTE *)(v9 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v9 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_21;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v22 >= v17)
      goto LABEL_41;
    v23 = *(_QWORD *)(v13 + 8 * v22);
    ++v19;
    if (!v23)
    {
      v19 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_41;
      v23 = *(_QWORD *)(v13 + 8 * v19);
      if (!v23)
      {
        v19 = v22 + 2;
        if (v22 + 2 >= v17)
          goto LABEL_41;
        v23 = *(_QWORD *)(v13 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 3;
          if (v22 + 3 >= v17)
            goto LABEL_41;
          v23 = *(_QWORD *)(v13 + 8 * v19);
          if (!v23)
          {
            v19 = v22 + 4;
            if (v22 + 4 >= v17)
              goto LABEL_41;
            v23 = *(_QWORD *)(v13 + 8 * v19);
            if (!v23)
              break;
          }
        }
      }
    }
LABEL_40:
    v16 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_21:
    result = specialized Set._Variant.insert(_:)(&v28, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21) + 16));
  }
  v24 = v22 + 5;
  if (v24 < v17)
  {
    v23 = *(_QWORD *)(v13 + 8 * v24);
    if (!v23)
    {
      while (1)
      {
        v19 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_51;
        if (v19 >= v17)
          goto LABEL_41;
        v23 = *(_QWORD *)(v13 + 8 * v19);
        ++v24;
        if (v23)
          goto LABEL_40;
      }
    }
    v19 = v24;
    goto LABEL_40;
  }
LABEL_41:
  swift_release();
  swift_bridgeObjectRelease();
  if (a3)
  {
    v25 = a3;
  }
  else if (a1)
  {
    swift_beginAccess();
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    swift_retain();
    v25 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_10RealityKit17AnimationResourceCs5NeverOTg504_s17d12Foundation24f7LibraryG42C13resourceArraySay0A3Kit0cE0CGvgAGSiXEfU_0D10Foundation0fkG0CTf1cn_nTf4ng_n(0, v26);
    swift_release();
  }
  else
  {
    v25 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v11 = specialized _ArrayProtocol.filter(_:)(v25, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t type metadata accessor for AnimationLibraryResource()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationLibraryComponent.AnimationCollection.Index, &type metadata for AnimationLibraryComponent.AnimationCollection.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationLibraryComponent.AnimationCollection.Index, &type metadata for AnimationLibraryComponent.AnimationCollection.Index);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Index and conformance AnimationLibraryComponent.AnimationCollection.Index);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationLibraryComponent.AnimationCollection, &type metadata for AnimationLibraryComponent.AnimationCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection and conformance AnimationLibraryComponent.AnimationCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnimationLibraryComponent.AnimationCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<AnimationLibraryComponent.AnimationCollection> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<AnimationLibraryComponent.AnimationCollection>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnimationLibraryComponent.AnimationCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<AnimationLibraryComponent.AnimationCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<AnimationLibraryComponent.AnimationCollection>, MEMORY[0x24BEE4238]);
}

unint64_t lazy protocol witness table accessor for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator;
  if (!lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationLibraryComponent.AnimationCollection.Iterator, &type metadata for AnimationLibraryComponent.AnimationCollection.Iterator);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationLibraryComponent.AnimationCollection.Iterator and conformance AnimationLibraryComponent.AnimationCollection.Iterator);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in _Proto_AnimationLibraryComponent_v1()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [String : AnimationResource].Iterator and conformance [A : B].Iterator, &demangling cache variable for type metadata for [String : AnimationResource].Iterator, MEMORY[0x24BEE0408]);
}

uint64_t sub_21BC7F938(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  result = outlined consume of String??(v5, v6);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_21BC7F984@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, AnimationLibraryComponent.AnimationCollection.subscript.getter, a3);
}

uint64_t sub_21BC7F9A0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, a3);
}

uint64_t sub_21BC7F9B4()
{
  return 0;
}

uint64_t sub_21BC7F9C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, (uint64_t (*)(uint64_t, uint64_t))_Proto_AnimationLibraryComponent_v1.subscript.getter, a3);
}

uint64_t sub_21BC7F9E0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return key path setter for AnimationLibraryComponent.AnimationCollection.subscript(_:) : AnimationLibraryComponent.AnimationCollection(a1, a2, a3);
}

uint64_t sub_21BC7F9F4()
{
  return 0;
}

uint64_t sub_21BC7FA0C()
{
  return 0;
}

uint64_t outlined destroy of String?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent()
{
  return &type metadata for AnimationLibraryComponent;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection;
}

uint64_t destroy for AnimationLibraryComponent.AnimationCollection.Iterator()
{
  return outlined consume of [String : AnimationResource].Iterator._Variant();
}

_QWORD *initializeWithCopy for AnimationLibraryComponent.AnimationCollection.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

_QWORD *assignWithCopy for AnimationLibraryComponent.AnimationCollection.Iterator(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  outlined copy of [A : B].Iterator._Variant<A, B>();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return a1;
}

uint64_t assignWithTake for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v3;
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7F && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 127);
  v3 = (((*(_QWORD *)a1 >> 57) >> 6) | (2 * ((*(_QWORD *)a1 >> 57) & 0x38 | *(_QWORD *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimationLibraryComponent.AnimationCollection.Iterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 127;
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7F)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection.Iterator()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection.Iterator;
}

uint64_t destroy for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1)
{
  return outlined consume of [String : AnimationResource].Index._Variant(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of [A : B].Index._Variant<A, B>(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of [String : AnimationResource].Index._Variant(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnimationLibraryComponent.AnimationCollection.Index(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of [String : AnimationResource].Index._Variant(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AnimationLibraryComponent.AnimationCollection.Index()
{
  return &type metadata for AnimationLibraryComponent.AnimationCollection.Index;
}

ValueMetadata *type metadata accessor for _Proto_AnimationLibraryComponent_v1()
{
  return &type metadata for _Proto_AnimationLibraryComponent_v1;
}

uint64_t destroy for AnimationLibraryComponent(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 24) != 1)
    swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AnimationLibraryComponent(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 2;
  v6 = a2[3];
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AnimationLibraryComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  if (a1[3] != 1)
  {
    if (v4 != 1)
    {
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined destroy of String?((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    goto LABEL_8;
  }
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
LABEL_8:
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for AnimationLibraryComponent(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;

  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  v4 = a2 + 2;
  if (a1[3] != 1)
  {
    v5 = a2[3];
    if (v5 != 1)
    {
      a1[2] = *v4;
      a1[3] = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of String?((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v4;
LABEL_6:
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationLibraryComponent(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationLibraryComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationLibraryDefinition()
{
  return &type metadata for AnimationLibraryDefinition;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v14);
    ++v6;
    if (!v15)
    {
      v6 = v14 + 1;
      if (v14 + 1 >= v11)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      v15 = *(_QWORD *)(v7 + 8 * v6);
      if (!v15)
      {
        v6 = v14 + 2;
        if (v14 + 2 >= v11)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
        v15 = *(_QWORD *)(v7 + 8 * v6);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v6 << 6);
LABEL_5:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v13) + 16) != *(_QWORD *)(a4 + 16))
    {
      *(unint64_t *)((char *)result + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v5++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
      }
    }
  }
  v16 = v14 + 3;
  if (v16 >= v11)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
  v15 = *(_QWORD *)(v7 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v11)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v5, a3);
    v15 = *(_QWORD *)(v7 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v6;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  uint64_t isStackAllocationSafe;
  unint64_t *v11;
  void *v12;
  _QWORD v14[2];

  v3 = v2;
  v14[1] = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE *)(a1 + 32);
  v7 = v6 & 0x3F;
  v8 = (unint64_t)((1 << v6) + 63) >> 6;
  v9 = 8 * v8;
  isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    bzero((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((_QWORD *)((char *)v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    if (v3)
      swift_willThrow();
    swift_release_n();
  }
  else
  {
    v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    v11 = specialized closure #1 in _NativeDictionary.filter(_:)((unint64_t *)v12, v8, a1, a2);
    swift_release();
    MEMORY[0x220772F44](v12, -1, -1);
    swift_release_n();
  }
  return v11;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = specialized Collection.firstIndex(where:)(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22)
        goto LABEL_6;
    }
    else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v6 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        if (*(_QWORD *)(*(_QWORD *)(v12 + 8 * i) + 16) != *(_QWORD *)(a2 + 16))
          goto LABEL_11;
LABEL_31:
        v9 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_46;
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18)
          return v6;
      }
      v19 = *(_QWORD *)(MEMORY[0x220769770](i - 4) + 16);
      v9 = *(_QWORD *)(a2 + 16);
      swift_unknownObjectRelease();
      if (v19 == v9)
        goto LABEL_31;
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1))
          goto LABEL_47;
        goto LABEL_31;
      }
      v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x220769770](v6, *a1);
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v14 = *(_QWORD *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v13 = *(_QWORD *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = MEMORY[0x220769770](i - 4, v9);
      v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      }
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      specialized Array._endMutation()();
      v9 = *a1;
      v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  v20 = *a1;
  if (!(v20 >> 62))
    return *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  int v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = swift_bridgeObjectRetain();
  v6 = specialized Collection.firstIndex(where:)(v5, a2);
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v2)
    return v6;
  if ((v8 & 1) == 0)
  {
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_54;
    if (*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9 != v22)
        goto LABEL_6;
    }
    else if (v9 != *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v6 + 5; ; ++i)
      {
        v11 = i - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
          break;
        if ((v11 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        if (v11 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_45;
        if (*(_QWORD *)(v12 + 8 * i) != a2)
          goto LABEL_11;
LABEL_31:
        v9 = i - 3;
        if (__OFADD__(v11, 1))
          goto LABEL_46;
        if (*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == v18)
          return v6;
      }
      v19 = MEMORY[0x220769770](i - 4);
      swift_unknownObjectRelease();
      if (v19 == a2)
        goto LABEL_31;
LABEL_11:
      if (v11 == v6)
      {
LABEL_30:
        if (__OFADD__(v6++, 1))
          goto LABEL_47;
        goto LABEL_31;
      }
      v9 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x220769770](v6, *a1);
        v9 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_16:
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_50;
          if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_51;
          v14 = *(_QWORD *)(v9 + 8 * i);
          swift_retain();
          goto LABEL_19;
        }
      }
      else
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_48;
        if (v6 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_49;
        v13 = *(_QWORD *)(v9 + 8 * v6 + 32);
        swift_retain();
        if ((v9 & 0xC000000000000001) == 0)
          goto LABEL_16;
      }
      v14 = MEMORY[0x220769770](i - 4, v9);
      v9 = *a1;
LABEL_19:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!isUniquelyReferenced_nonNull_bridgeObject
        || (v9 & 0x8000000000000000) != 0
        || (v9 & 0x4000000000000000) != 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      }
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v14;
      swift_release();
      specialized Array._endMutation()();
      v9 = *a1;
      v16 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v9;
      if (!v16 || (v9 & 0x8000000000000000) != 0 || (v9 & 0x4000000000000000) != 0)
        specialized _ArrayBuffer._consumeAndCreateNew()(v9);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_52;
      if (v11 >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_53;
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v13;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_30;
    }
    return v6;
  }
  v20 = *a1;
  if (!(v20 >> 62))
    return *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t __RERetain(_:)(uint64_t result)
{
  if (result)
    return RERetain();
  return result;
}

uint64_t __RERelease(_:)(uint64_t result)
{
  if (result)
    return RERelease();
  return result;
}

_QWORD *specialized static StateMachineParametersCreator.createBoundParameters(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t BoundParameterCount;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int BoundParameterTypeAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40[2];
  uint64_t v41[2];
  unsigned __int8 v42;
  uint64_t v43;
  _UNKNOWN **v44;

  v0 = type metadata accessor for Logger();
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v36 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v39 = (char *)&v30 - v3;
  BoundParameterCount = REStateMachineComponentGetBoundParameterCount();
  if (BoundParameterCount < 0)
  {
    __break(1u);
    JUMPOUT(0x21BC80C70);
  }
  v6 = BoundParameterCount;
  if (!BoundParameterCount)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v7 = 0;
  v8 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v35 = "Scope";
  v33 = 0x800000021BE82150;
  *(_QWORD *)&v5 = 136315138;
  v34 = v5;
  v31 = 0x800000021BE8D700;
  v30 = MEMORY[0x24BEE4AD8] + 8;
  v32 = 0x800000021BE8D730;
  do
  {
    BoundParameterTypeAtIndex = REStateMachineComponentGetBoundParameterTypeAtIndex();
    REStateMachineComponentGetBoundParameterNameAtIndex();
    v10 = String.init(cString:)();
    v12 = v11;
    REStateMachineComponentGetBoundParameterBindTargetAtIndex();
    v13 = String.init(cString:)();
    static InternalBindPath.targetFromPath(_:)(v13, v14, (uint64_t)v41);
    swift_bridgeObjectRelease();
    v15 = v41[0];
    v16 = v41[1];
    v17 = v42;
    switch(BoundParameterTypeAtIndex)
    {
      case 0:
      case 4:
        swift_bridgeObjectRelease();
        outlined consume of BindTarget(v15, v16, v17);
        Logger.init(subsystem:category:)();
        v18 = Logger.logObject.getter();
        v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc();
          v21 = swift_slowAlloc();
          v41[0] = v21;
          *(_DWORD *)v20 = v34;
          *(_QWORD *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v32, v41);
          _os_log_impl(&dword_21B9AA000, v18, v19, "%s", (uint8_t *)v20, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x220772F44](v21, -1, -1);
          MEMORY[0x220772F44](v20, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v38);
        break;
      case 1:
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Int>);
        v44 = &protocol witness table for StateMachineParameter<A>;
        v26 = swift_allocObject();
        v41[0] = v26;
        *(_QWORD *)(v26 + 56) = 0;
        *(_BYTE *)(v26 + 64) = 1;
        goto LABEL_15;
      case 2:
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Float>);
        v44 = &protocol witness table for StateMachineParameter<A>;
        v26 = swift_allocObject();
        v41[0] = v26;
        *(_DWORD *)(v26 + 52) = 0;
        *(_BYTE *)(v26 + 56) = 1;
        goto LABEL_15;
      case 3:
        v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
        v44 = &protocol witness table for StateMachineParameter<A>;
        v26 = swift_allocObject();
        v41[0] = v26;
        *(_BYTE *)(v26 + 49) = 2;
LABEL_15:
        *(_QWORD *)(v26 + 16) = v10;
        *(_QWORD *)(v26 + 24) = v12;
        *(_QWORD *)(v26 + 32) = v15;
        *(_QWORD *)(v26 + 40) = v16;
        *(_BYTE *)(v26 + 48) = v17;
        outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
        v28 = v8[2];
        v27 = v8[3];
        if (v28 >= v27 >> 1)
          v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v27 > 1), v28 + 1, 1, v8);
        v8[2] = v28 + 1;
        outlined init with take of BindableDataInternal(v40, (uint64_t)&v8[5 * v28 + 4]);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        break;
      default:
        swift_bridgeObjectRelease();
        outlined consume of BindTarget(v15, v16, v17);
        Logger.init(subsystem:category:)();
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc();
          v25 = swift_slowAlloc();
          v41[0] = v25;
          *(_DWORD *)v24 = v34;
          *(_QWORD *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, v31, v41);
          _os_log_impl(&dword_21B9AA000, v22, v23, "%s", (uint8_t *)v24, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x220772F44](v25, -1, -1);
          MEMORY[0x220772F44](v24, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v38);
        break;
    }
    ++v7;
  }
  while (v6 != v7);
  return v8;
}

uint64_t specialized static StateMachineParametersCreator.updateInCoreComponent(coreComponent:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33[2];
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;
  unsigned __int8 v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v3 = type metadata accessor for Logger();
  v30 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v32 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = REStateMachineComponentRemoveAllBoundParameters();
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = a2 + 32;
    v26[1] = a2;
    swift_bridgeObjectRetain();
    v29 = 0x800000021BE82150;
    *(_QWORD *)&v8 = 136315138;
    v28 = v8;
    v27 = 0x800000021BE8D6D0;
    v26[2] = MEMORY[0x24BEE4AD8] + 8;
    while (1)
    {
      outlined init with copy of __REAssetService(v7, (uint64_t)v41);
      v14 = v42;
      v15 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 16))(v33, v14, v15);
      v16 = v34;
      if (v34 != 255)
      {
        v18 = v33[0];
        v17 = v33[1];
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v33);
        outlined consume of BindTarget?(v18, v17, v16);
        outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v37);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameterProtocol);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Int>);
        if (swift_dynamicCast()
          || (outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v37),
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Float>),
              swift_dynamicCast()))
        {
          v9 = v34;
          v10 = v35;
          v11 = v36;
          swift_bridgeObjectRelease();
          outlined consume of BindTarget?(v9, v10, v11);
        }
        else
        {
          outlined init with copy of __REAssetService((uint64_t)v41, (uint64_t)v33);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StateMachineParameter<Bool>);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            Logger.init(subsystem:category:)();
            v22 = Logger.logObject.getter();
            v23 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v22, v23))
            {
              v24 = swift_slowAlloc();
              v25 = swift_slowAlloc();
              v33[0] = v25;
              *(_DWORD *)v24 = v28;
              *(_QWORD *)(v24 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, v27, v33);
              _os_log_impl(&dword_21B9AA000, v22, v23, "%s", (uint8_t *)v24, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x220772F44](v25, -1, -1);
              MEMORY[0x220772F44](v24, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v31);
            goto LABEL_5;
          }
          v19 = v38;
          v20 = v39;
          v21 = v40;
          swift_bridgeObjectRelease();
          outlined consume of BindTarget?(v19, v20, v21);
        }
        v13 = v42;
        v12 = v43;
        __swift_project_boxed_opaque_existential_1(v41, v42);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v12);
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REStateMachineComponentAddBoundParameter();
        swift_release();
        swift_release();
      }
LABEL_5:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      v7 += 40;
      if (!--v6)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_21BC810C8()
{
  return objectdestroyTm_4();
}

uint64_t sub_21BC810D0()
{
  return objectdestroyTm_4();
}

uint64_t sub_21BC810D8()
{
  return objectdestroyTm_4();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v0;
  int v1;

  swift_bridgeObjectRelease();
  v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 != 255)
    outlined consume of BindTarget(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v1);
  return swift_deallocObject();
}

uint64_t specialized static StateMachineParametersCreator.syncUp(parameters:with:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t DynamicType;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[5];
  _QWORD v50[5];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v41 = *(_QWORD *)(a2 + 24);
  v2 = *a1;
  v3 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)&v51 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v2 + 16);
  result = swift_bridgeObjectRetain();
  if (v4)
  {
    v6 = 0;
    v7 = v2 + 32;
    v8 = MEMORY[0x24BEE4AF8];
    do
    {
      if (v6 >= *(_QWORD *)(v2 + 16))
        goto LABEL_51;
      outlined init with copy of __REAssetService(v7, (uint64_t)&v58);
      v9 = v59;
      v10 = v60;
      __swift_project_boxed_opaque_existential_1(&v58, v59);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v10 + 16))(&v54, v9, v10);
      v11 = v55;
      outlined consume of BindTarget?(v54, *((uint64_t *)&v54 + 1), v55);
      if (v11 == 255)
      {
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
      }
      else
      {
        outlined init with take of BindableDataInternal(&v58, (uint64_t)&v54);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v8 + 16) + 1, 1);
        v8 = v51;
        v13 = *(_QWORD *)(v51 + 16);
        v12 = *(_QWORD *)(v51 + 24);
        if (v13 >= v12 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
          v8 = v51;
        }
        *(_QWORD *)(v8 + 16) = v13 + 1;
        result = outlined init with take of BindableDataInternal(&v54, v8 + 40 * v13 + 32);
      }
      ++v6;
      v7 += 40;
    }
    while (v4 != v6);
    v3 = v51;
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  v40 = *(_QWORD *)(v41 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain();
    result = v41;
    v14 = 0;
    while (1)
    {
      if (v14 >= *(_QWORD *)(result + 16))
        goto LABEL_52;
      v15 = *(_QWORD *)(v41 + 32 + 72 * v14 + 64);
      v44 = *(_QWORD *)(v15 + 16);
      if (v44)
        break;
LABEL_16:
      if (++v14 == v40)
        return swift_bridgeObjectRelease();
    }
    v39 = v14;
    v43 = v15 + 32;
    result = swift_bridgeObjectRetain();
    v16 = 0;
    v42 = v15;
    while (1)
    {
      if (v16 >= *(_QWORD *)(v15 + 16))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        return result;
      }
      outlined init with copy of __REAssetService(v43 + 40 * v16, (uint64_t)&v58);
      v17 = v59;
      v18 = v60;
      __swift_project_boxed_opaque_existential_1(&v58, v59);
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
      v20 = v19;
      v47 = *(_QWORD *)(v19 + 16);
      if (v47)
        break;
      swift_bridgeObjectRelease();
LABEL_21:
      ++v16;
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
      if (v16 == v44)
      {
        swift_bridgeObjectRelease();
        result = v41;
        v14 = v39;
        goto LABEL_16;
      }
    }
    v45 = v16;
    v21 = 0;
    v46 = v19 + 32;
    while (v21 < *(_QWORD *)(v20 + 16))
    {
      outlined init with copy of __REAssetService(v46 + 40 * v21, (uint64_t)&v54);
      v22 = *(_QWORD *)(*a1 + 16);
      if (v22)
      {
        v23 = *a1 + 32;
        swift_bridgeObjectRetain_n();
        while (1)
        {
          outlined init with copy of __REAssetService(v23, (uint64_t)&v51);
          v24 = v52;
          v25 = v53;
          __swift_project_boxed_opaque_existential_1(&v51, v52);
          v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
          v28 = v27;
          v30 = v56;
          v29 = v57;
          __swift_project_boxed_opaque_existential_1(&v54, v56);
          if (v26 == (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v30, v29) && v28 == v31)
            break;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined init with copy of __REAssetService((uint64_t)&v51, (uint64_t)v50);
          outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)v49);
          if ((v33 & 1) != 0)
            goto LABEL_39;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
LABEL_31:
          v23 += 40;
          if (!--v22)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_42;
          }
        }
        swift_bridgeObjectRelease_n();
        outlined init with copy of __REAssetService((uint64_t)&v51, (uint64_t)v50);
        outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)v49);
LABEL_39:
        __swift_project_boxed_opaque_existential_1(v50, v50[3]);
        DynamicType = swift_getDynamicType();
        __swift_project_boxed_opaque_existential_1(v49, v49[3]);
        v35 = swift_getDynamicType();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
        if (DynamicType == v35)
        {
          swift_bridgeObjectRelease_n();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
          goto LABEL_26;
        }
        goto LABEL_31;
      }
LABEL_42:
      outlined init with copy of __REAssetService((uint64_t)&v54, (uint64_t)&v51);
      v36 = (_QWORD *)*a1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
        v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
      v36[2] = v38 + 1;
      outlined init with take of BindableDataInternal(&v51, (uint64_t)&v36[5 * v38 + 4]);
      *a1 = (uint64_t)v36;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
LABEL_26:
      if (++v21 == v47)
      {
        swift_bridgeObjectRelease();
        v15 = v42;
        v16 = v45;
        goto LABEL_21;
      }
    }
    __break(1u);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for VideoComponent(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for VideoComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

_QWORD *assignWithCopy for VideoComponent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  return a1;
}

uint64_t assignWithTake for VideoComponent(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for VideoComponent()
{
  return &type metadata for VideoComponent;
}

uint64_t static VideoComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t VideoAsset;
  uint64_t v3;
  uint64_t MaterialAsset;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t Entity;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t j;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  id v30;
  _OWORD v31[3];
  uint64_t v32;
  _QWORD v33[6];

  VideoAsset = REVideoComponentGetVideoAsset();
  type metadata accessor for __VideoResource();
  *(_QWORD *)&v31[0] = VideoAsset;
  v3 = static __VideoResource.__fromCore(_:)((uint64_t *)v31);
  swift_retain();
  MaterialAsset = REVideoComponentGetMaterialAsset();
  v5 = (void *)REMaterialParameterBlockValueCreate();
  v6 = specialized static LoadableResource.fromCore(assetRef:)(MaterialAsset);
  if (!v6)
    goto LABEL_42;
  v7 = v6;
  v33[3] = &type metadata for AnyMaterial;
  v33[4] = &protocol witness table for AnyMaterial;
  v8 = swift_allocObject();
  v33[0] = v8;
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v9;
  *(_BYTE *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = v5;
  *(_QWORD *)&v31[0] = v3;
  outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)v31 + 8);
  specialized SIMD.init<A>(_:)((uint64_t)&outlined read-only object #0 of static VideoComponent.__fromCore(_:));
  v11 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  v30 = v5;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  v32 = v11;
  v12 = v31[1];
  *(_OWORD *)a1 = v31[0];
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = v31[2];
  *(_QWORD *)(a1 + 48) = v32;
  Entity = REComponentGetEntity();
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v14 = swift_dynamicCastClassUnconditional();
    goto LABEL_4;
  }
  if ((REEntityIsBeingDestroyed() & 1) == 0)
  {
    v16 = specialized static Entity.entityInfoType(_:)();
    if (v16)
    {
      v15 = (*(uint64_t (**)(void))(v16 + 232))();
      v17 = *(_QWORD *)(v15 + 16);
      swift_retain();
      MEMORY[0x22076D160](v17, 0);
      *(_QWORD *)(v15 + 16) = Entity;
      MEMORY[0x22076D160](Entity, v15);
      swift_release();
LABEL_8:
      __VideoResource.addEntity(_:)(v15);
      REVideoComponentGetDesiredViewingMode();
      v18 = (uint64_t *)(v3 + 24);
      swift_beginAccess();
      v19 = *(_QWORD *)(v3 + 24);
      v33[0] = v9;
      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.endIndex.getter();
        if (v20)
          goto LABEL_10;
      }
      else
      {
        v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v20)
        {
LABEL_10:
          if (v20 < 1)
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          for (i = 0; i != v20; ++i)
          {
            if ((v19 & 0xC000000000000001) != 0)
              MEMORY[0x220769770](i, v19);
            else
              swift_retain();
            Strong = swift_weakLoadStrong();
            swift_release();
            if (Strong)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
              swift_release();
            }
          }
          swift_bridgeObjectRelease();
          v23 = v33[0];
LABEL_23:
          *v18 = v23;
          swift_bridgeObjectRelease();
          v24 = *v18;
          if ((unint64_t)*v18 >> 62)
          {
            swift_bridgeObjectRetain();
            v25 = _CocoaArrayWrapper.endIndex.getter();
            if (v25)
            {
LABEL_25:
              if (v25 >= 1)
              {
                for (j = 0; j != v25; ++j)
                {
                  if ((v24 & 0xC000000000000001) != 0)
                    MEMORY[0x220769770](j, v24);
                  else
                    swift_retain();
                  if (swift_weakLoadStrong())
                  {
                    REVideoComponentGetComponentType();
                    if (REEntityGetComponentByClass())
                    {
                      REVideoComponentSetDesiredViewingMode();
                      RENetworkMarkComponentDirty();
                    }
                    swift_release();
                  }
                  swift_release();
                }
                goto LABEL_38;
              }
              goto LABEL_40;
            }
          }
          else
          {
            v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v25)
              goto LABEL_25;
          }
LABEL_38:
          swift_release();
          swift_bridgeObjectRelease();
          REVideoComponentGetFadeThreshold();
          v28 = v27;
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          result = swift_release();
          *(_QWORD *)(a1 + 48) = v28;
          return result;
        }
      }
      swift_bridgeObjectRelease();
      v23 = MEMORY[0x24BEE4AF8];
      goto LABEL_23;
    }
    v14 = makeEntity(for:)(Entity);
LABEL_4:
    v15 = v14;
    goto LABEL_8;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance VideoComponent()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  REVideoComponentSetVideoAsset();
  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  swift_beginAccess();
  swift_release();
  REVideoComponentSetMaterialAsset();
  REVideoComponentSetFadeThreshold();
  REVideoComponentAddRealityKitDefaultAttachmentsOnAllMaterials();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance VideoComponent(_DWORD *a1@<X8>)
{
  *a1 = 1004;
}

uint64_t sub_21BC81D90()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointV7elementtG_AKs5NeverOTg504_s17e13Foundation28_g1_hi1_j42V16removingChildren2of5namedACSS_SSSgtFAC5K85VSi6offset_AI7elementt_tcfu0_33_179b2a53a27cf57a49aec8c1ce8a5464SiAJ_AiKtAITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v16 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v16;
    v4 = (uint64_t *)(a1 + 56);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = v4[1];
      v12 = *((_BYTE *)v4 + 16);
      v14 = *(_OWORD *)(v4 + 5);
      v15 = *(_OWORD *)(v4 + 3);
      v13 = *(_OWORD *)(v4 + 7);
      v9 = *(_QWORD *)(v16 + 16);
      v8 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      *(_QWORD *)(v16 + 16) = v9 + 1;
      v10 = v16 + 80 * v9;
      *(_QWORD *)(v10 + 32) = v6;
      *(_QWORD *)(v10 + 40) = v5;
      *(_QWORD *)(v10 + 48) = v7;
      *(_BYTE *)(v10 + 56) = v12;
      *(_OWORD *)(v10 + 64) = v15;
      *(_OWORD *)(v10 + 80) = v14;
      *(_OWORD *)(v10 + 96) = v13;
      v4 += 12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

int64_t _Proto_SkeletonDefinition_v1.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *JointParentIndex;
  unsigned int *v14;
  uint64_t v15;
  __int128 *JointLocalRestTransform;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  if (!*(_QWORD *)(a1 + 16))
  {
    result = swift_release();
    v7 = MEMORY[0x24BEE4AF8];
    v5 = 0xE500000000000000;
    v3 = 0x7974706D65;
LABEL_26:
    *a2 = v3;
    a2[1] = v5;
    a2[2] = v7;
    return result;
  }
  if (RESkeletonAssetGetName())
  {
    v3 = String.init(cString:)();
    v5 = v4;
  }
  else
  {
    v3 = 0;
    v5 = 0xE000000000000000;
  }
  result = RESkeletonAssetGetJointCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v8 = result;
    if (result)
    {
      v29 = v5;
      v30 = a2;
      v31 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, result, 0);
      v9 = 0;
      v7 = v31;
      do
      {
        if (RESkeletonAssetGetJointName())
        {
          v10 = String.init(cString:)();
          v12 = v11;
        }
        else
        {
          v10 = 0;
          v12 = 0xE000000000000000;
        }
        JointParentIndex = (unsigned int *)RESkeletonAssetGetJointParentIndex();
        v14 = JointParentIndex;
        if (JointParentIndex)
          v15 = *JointParentIndex;
        else
          v15 = 0;
        JointLocalRestTransform = (__int128 *)RESkeletonAssetGetJointLocalRestTransform();
        if (JointLocalRestTransform)
        {
          v18 = *JointLocalRestTransform;
          v17 = JointLocalRestTransform[1];
          v19 = JointLocalRestTransform[2];
          if (one-time initialization token for identity != -1)
          {
            v25 = JointLocalRestTransform[2];
            v27 = JointLocalRestTransform[1];
            v23 = *JointLocalRestTransform;
            swift_once();
            v18 = v23;
            v19 = v25;
            v17 = v27;
          }
        }
        else
        {
          if (one-time initialization token for identity != -1)
            swift_once();
          v17 = static simd_quatf.identity;
          v19 = 0uLL;
          v18 = xmmword_21BE41210;
        }
        v21 = *(_QWORD *)(v31 + 16);
        v20 = *(_QWORD *)(v31 + 24);
        if (v21 >= v20 >> 1)
        {
          v26 = v19;
          v28 = v17;
          v24 = v18;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          v18 = v24;
          v19 = v26;
          v17 = v28;
        }
        ++v9;
        *(_QWORD *)(v31 + 16) = v21 + 1;
        v22 = v31 + 80 * v21;
        *(_QWORD *)(v22 + 32) = v10;
        *(_QWORD *)(v22 + 40) = v12;
        *(_QWORD *)(v22 + 48) = v15;
        *(_BYTE *)(v22 + 56) = v14 == 0;
        *(_OWORD *)(v22 + 64) = v18;
        *(_OWORD *)(v22 + 80) = v17;
        *(_OWORD *)(v22 + 96) = v19;
      }
      while (v8 != v9);
      result = swift_release();
      v5 = v29;
      a2 = v30;
    }
    else
    {
      result = swift_release();
      v7 = MEMORY[0x24BEE4AF8];
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.parentIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.parentIndex.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.parentIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 _Proto_SkeletonDefinition_v1.Joint.localTransform.getter()
{
  __n128 *v0;

  return v0[2];
}

void _Proto_SkeletonDefinition_v1.Joint.localTransform.setter(__n128 a1, __n128 a2, __n128 a3)
{
  __n128 *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
}

uint64_t (*_Proto_SkeletonDefinition_v1.Joint.localTransform.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.Joint.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonDefinition_v1.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _Proto_SkeletonDefinition_v1.joints.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _Proto_SkeletonDefinition_v1.joints.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*_Proto_SkeletonDefinition_v1.joints.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.init(named:withJoints:)(Swift::String named, Swift::OpaquePointer withJoints)
{
  uint64_t v2;
  RealityFoundation::_Proto_SkeletonDefinition_v1 result;

  *(Swift::String *)v2 = named;
  *(Swift::OpaquePointer *)(v2 + 16) = withJoints;
  result.name = named;
  result.joints = withJoints;
  return result;
}

Swift::Bool __swiftcall _Proto_SkeletonDefinition_v1.equivalent(to:compareEnrolment:)(RealityFoundation::_Proto_SkeletonDefinition_v1 to, Swift::Bool compareEnrolment)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char object;
  char v6;

  v3 = *(_QWORD *)(to.name._countAndFlagsBits + 16);
  v4 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v4 + 16) != *(_QWORD *)(v3 + 16))
    return 0;
  object = (char)to.name._object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized Sequence.allSatisfy(_:)(v4, v3) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((object & 1) != 0)
  {
    v6 = specialized Sequence.allSatisfy(_:)(v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (v6 & 1) != 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  char v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 1;
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = 0;
  while (v5)
  {
    v7 = *(_QWORD *)(a1 + v6 + 48);
    v8 = *(_BYTE *)(a1 + v6 + 56);
    v9 = *(_QWORD *)(a2 + v6 + 48);
    v10 = *(_BYTE *)(a2 + v6 + 56);
    v11 = *(_QWORD *)(a1 + v6 + 32) == *(_QWORD *)(a2 + v6 + 32)
       && *(_QWORD *)(a1 + v6 + 40) == *(_QWORD *)(a2 + v6 + 40);
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
LABEL_16:
      v13 = 0;
      goto LABEL_19;
    }
    if ((v8 & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_16;
    }
    else
    {
      if (v7 == v9)
        v12 = v10;
      else
        v12 = 1;
      if ((v12 & 1) != 0)
        goto LABEL_16;
    }
    v6 += 80;
    --v5;
    if (!--v2)
      break;
  }
  v13 = 1;
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  float v12;
  float v13;
  __int128 v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = a1 + 32;
    v5 = a2 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v6 = 0;
    while (2)
    {
      if (v6 != v3)
      {
        v7 = 0;
        v8 = *(_OWORD *)(v4 + 80 * v6 + 64);
        v9 = v6 + 1;
        v10 = *(_OWORD *)(v5 + 80 * v6 + 64);
        v11 = 1;
        while (1)
        {
          while (!v11)
          {
            if (v7 == 2)
              goto LABEL_14;
            v11 = 0;
            ++v7;
          }
          v15 = v8;
          v12 = *(float *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
          v16 = v10;
          v13 = *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v7 & 3)));
          v11 = v12 == v13;
          if (v7 == 2)
            break;
          ++v7;
        }
        if (v12 != v13)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
        v6 = v9;
        if (v9 != v2)
          continue;
      }
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t _Proto_SkeletonDefinition_v1.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(unint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;

  v5 = *(_QWORD *)(v2 + 16);
  result = specialized Array.init(repeating:count:)(MEMORY[0x24BEE4AF8], *(_QWORD *)(v5 + 16));
  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    v24 = a2;
    v25 = a1;
    swift_bridgeObjectRetain();
    v9 = 0;
    v10 = (_BYTE *)(v5 + 56);
    do
    {
      if ((*v10 & 1) == 0)
      {
        v11 = *((_QWORD *)v10 - 1);
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) != 0)
        {
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_35;
        }
        else
        {
          result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
          v7 = (_QWORD *)result;
          if ((v11 & 0x8000000000000000) != 0)
            goto LABEL_35;
        }
        if (v11 >= v7[2])
          goto LABEL_34;
        v12 = v7 + 4;
        v13 = (_QWORD *)v7[v11 + 4];
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v7[v11 + 4] = v13;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v12[v11] = v13;
        }
        v16 = v13[2];
        v15 = v13[3];
        if (v16 >= v15 >> 1)
        {
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v15 > 1), v16 + 1, 1, v13);
          v12[v11] = v13;
        }
        v13[2] = v16 + 1;
        v13[v16 + 4] = v9;
      }
      ++v9;
      v10 += 80;
    }
    while (v8 != v9);
    result = swift_bridgeObjectRelease();
    a1 = v25;
    a2 = v24;
  }
  if ((a2 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_21BE411F0;
    *(_QWORD *)(v17 + 32) = a1;
    v26 = v17;
    goto LABEL_21;
  }
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v7[2] <= a1)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  v17 = v7[a1 + 4];
  v18 = *(_QWORD *)(v17 + 16);
  v26 = v17;
  swift_bridgeObjectRetain();
  if (v18)
  {
LABEL_21:
    v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      v20 = *(_QWORD *)(v17 + 32);
      specialized Array.replaceSubrange<A>(_:with:)(0, 1);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        v19 = (_QWORD *)result;
      }
      v22 = v19[2];
      v21 = v19[3];
      if (v22 >= v21 >> 1)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v21 > 1), v22 + 1, 1, v19);
        v19 = (_QWORD *)result;
      }
      v19[2] = v22 + 1;
      v19[v22 + 4] = v20;
      if ((v20 & 0x8000000000000000) != 0)
        break;
      if (v20 >= v7[2])
        goto LABEL_33;
      v23 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v23);
      v17 = v26;
      if (!*(_QWORD *)(v26 + 16))
        goto LABEL_31;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v19 = (_QWORD *)MEMORY[0x24BEE4AF8];
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

uint64_t _Proto_SkeletonDefinition_v1.adjustParenting(_:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v23 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  v6 = v23;
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v20 = v4;
    v22 = v5;
    swift_bridgeObjectRetain();
    v8 = 0;
    v21 = a1;
    v9 = (uint64_t *)(a1 + 40);
    do
    {
      v11 = *(v9 - 1);
      v10 = *v9;
      v23 = v6;
      v13 = *(_QWORD *)(v6 + 16);
      v12 = *(_QWORD *)(v6 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v6 = v23;
      }
      v9 += 10;
      *(_QWORD *)(v6 + 16) = v13 + 1;
      v14 = (_QWORD *)(v6 + 24 * v13);
      v14[5] = v10;
      v14[6] = v8;
      v14[4] = v11;
      ++v8;
    }
    while (v7 != v8);
    a1 = v21;
    swift_bridgeObjectRelease();
    v5 = v22;
    v4 = v20;
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
    v15 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v15 = MEMORY[0x24BEE4B00];
  }
  v23 = v15;
  v16 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, 1, &v23);
  swift_release();
  v17 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_AJs5NeverOTg504_s17d13Foundation28_f1_gh1_i62V15adjustParenting33_E1ACD9F60859F542086512E2BAD683FFLLySayAC5J14VGAHFA2GXEfU0_AHSDySSSiGTf1cn_nTf4ngg_n(a1, v4, v3, v5, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v18;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.subTree(fromRoot:named:)(Swift::String fromRoot, Swift::String_optional named)
{
  uint64_t *v2;
  uint64_t *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  RealityFoundation::_Proto_SkeletonDefinition_v1 result;

  object = fromRoot._object;
  countAndFlagsBits = fromRoot._countAndFlagsBits;
  v6 = v2;
  v7 = *v3;
  v8 = v3[1];
  v9 = v3[2];
  v10 = (uint64_t)named.value._object;
  if (!named.value._object)
  {
    swift_bridgeObjectRetain();
    named.value._countAndFlagsBits = v7;
    v10 = v8;
  }
  v22 = named.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = countAndFlagsBits;
  v11._object = object;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = specialized Collection.firstIndex(where:)(v12, countAndFlagsBits, (uint64_t)object, 47, (void *)0xE100000000000000);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = swift_bridgeObjectRelease_n();
  if ((v15 & 1) != 0)
  {
    v21 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v19 = _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(v13, 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVs5NeverOTg504_s17d13Foundation28_f1_gh1_i38V7subTree8fromRoot5namedACSS_SSSgtFAC5J9VSiXEfU0_AITf1cn_nTf4ng_n(v19, v7, v8, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = _Proto_SkeletonDefinition_v1.adjustParenting(_:)(v20);
    v16 = swift_bridgeObjectRelease();
  }
  *v6 = v22;
  v6[1] = v10;
  v6[2] = v21;
  result.joints._rawValue = v18;
  result.name._object = v17;
  result.name._countAndFlagsBits = v16;
  return result;
}

RealityFoundation::_Proto_SkeletonDefinition_v1 __swiftcall _Proto_SkeletonDefinition_v1.removingChildren(of:named:)(Swift::String of, Swift::String_optional named)
{
  uint64_t *v2;
  uint64_t *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  RealityFoundation::_Proto_SkeletonDefinition_v1 result;

  object = of._object;
  countAndFlagsBits = of._countAndFlagsBits;
  v6 = v2;
  v7 = *v3;
  v8 = (void *)v3[1];
  v9 = v3[2];
  v10 = named.value._object;
  if (!named.value._object)
  {
    swift_bridgeObjectRetain();
    named.value._countAndFlagsBits = v7;
    v10 = v8;
  }
  v24 = named.value._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = countAndFlagsBits;
  v11._object = object;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = specialized Collection.firstIndex(where:)(v12, countAndFlagsBits, (uint64_t)object, 47, (void *)0xE100000000000000);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v15 & 1) != 0)
  {
    v21 = swift_bridgeObjectRetain();
  }
  else
  {
    v16 = _Proto_SkeletonDefinition_v1.subTreeIndices(under:inclusive:)(v13, 0);
    v17 = specialized Set.init<A>(_:)(v16);
    swift_bridgeObjectRelease();
    v18 = swift_bridgeObjectRetain();
    v19 = specialized Sequence.filter(_:)(v18, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointV7elementtG_AKs5NeverOTg504_s17e13Foundation28_g1_hi1_j42V16removingChildren2of5namedACSS_SSSgtFAC5K85VSi6offset_AI7elementt_tcfu0_33_179b2a53a27cf57a49aec8c1ce8a5464SiAJ_AiKtAITf3nnnpk_nTf1cn_n(v19);
    swift_bridgeObjectRelease();
    v9 = _Proto_SkeletonDefinition_v1.adjustParenting(_:)(v20);
    v21 = swift_bridgeObjectRelease();
  }
  *v6 = v24;
  v6[1] = (uint64_t)v10;
  v6[2] = v9;
  result.joints._rawValue = v23;
  result.name._object = v22;
  result.name._countAndFlagsBits = v21;
  return result;
}

uint64_t specialized static _Proto_SkeletonDefinition_v1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(v2 + 16) == *(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized Sequence.allSatisfy(_:)(v2, v3) & 1) != 0)
      v4 = specialized Sequence.allSatisfy(_:)(v2, v3);
    else
      v4 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVG_AJs5NeverOTg504_s17d13Foundation28_f1_gh1_i62V15adjustParenting33_E1ACD9F60859F542086512E2BAD683FFLLySayAC5J14VGAHFA2GXEfU0_AHSDySSSiGTf1cn_nTf4ngg_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (!v5)
    return v6;
  v31 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
  v10 = a5;
  v6 = v31;
  v26 = a4 + 32;
  v11 = (unint64_t *)(a1 + 48);
  v12 = a4;
  while (1)
  {
    v13 = *(v11 - 1);
    v14 = *v11;
    v27 = *((_OWORD *)v11 + 3);
    v30 = *(v11 - 2);
    v28 = *((_OWORD *)v11 + 2);
    v29 = *((_OWORD *)v11 + 1);
    if ((v11[1] & 1) != 0)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    if ((v14 & 0x8000000000000000) != 0)
      break;
    if (v14 >= *(_QWORD *)(v12 + 16))
      goto LABEL_20;
    if (*(_QWORD *)(v10 + 16))
    {
      v15 = v12;
      v16 = (uint64_t *)(v26 + 80 * v14);
      v17 = *v16;
      v18 = v16[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      if ((v20 & 1) != 0)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v19);
        result = swift_bridgeObjectRelease();
        v21 = 0;
      }
      else
      {
        result = swift_bridgeObjectRelease();
        v14 = 0;
        v21 = 1;
      }
      v12 = v15;
      goto LABEL_13;
    }
    result = swift_bridgeObjectRetain();
    v14 = 0;
LABEL_12:
    v21 = 1;
LABEL_13:
    v23 = *(_QWORD *)(v31 + 16);
    v22 = *(_QWORD *)(v31 + 24);
    if (v23 >= v22 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      v10 = a5;
    }
    *(_QWORD *)(v31 + 16) = v23 + 1;
    v24 = v31 + 80 * v23;
    *(_QWORD *)(v24 + 32) = v30;
    *(_QWORD *)(v24 + 40) = v13;
    *(_QWORD *)(v24 + 48) = v14;
    *(_BYTE *)(v24 + 56) = v21;
    *(_OWORD *)(v24 + 64) = v29;
    *(_OWORD *)(v24 + 80) = v28;
    *(_OWORD *)(v24 + 96) = v27;
    v11 += 10;
    if (!--v5)
      return v6;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_17RealityFoundation28_Proto_SkeletonDefinition_v1V5JointVs5NeverOTg504_s17d13Foundation28_f1_gh1_i38V7subTree8fromRoot5namedACSS_SSSgtFAC5J9VSiXEfU0_AITf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
    return v5;
  v25 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  v5 = v25;
  v9 = (unint64_t *)(a1 + 32);
  v10 = a4 + 32;
  v20 = *(_QWORD *)(a4 + 16);
  while (1)
  {
    v12 = *v9++;
    v11 = v12;
    if (v12 >= v20)
      break;
    v13 = (uint64_t *)(v10 + 80 * v11);
    v14 = v13[1];
    v21 = *v13;
    v15 = v13[2];
    v16 = *((_BYTE *)v13 + 24);
    v23 = *((_OWORD *)v13 + 3);
    v24 = *((_OWORD *)v13 + 2);
    v22 = *((_OWORD *)v13 + 4);
    v18 = *(_QWORD *)(v25 + 16);
    v17 = *(_QWORD *)(v25 + 24);
    result = swift_bridgeObjectRetain();
    if (v18 >= v17 >> 1)
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    *(_QWORD *)(v25 + 16) = v18 + 1;
    v19 = v25 + 80 * v18;
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v14;
    *(_QWORD *)(v19 + 48) = v15;
    *(_BYTE *)(v19 + 56) = v16;
    *(_OWORD *)(v19 + 64) = v24;
    *(_OWORD *)(v19 + 80) = v23;
    *(_OWORD *)(v19 + 96) = v22;
    if (!--v4)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v10;
  _QWORD *i;
  Swift::String v13;
  Swift::Bool v14;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return 0;
  v10 = 0;
  for (i = (_QWORD *)(a1 + 40); *(i - 1) != a2 || *i != a3; i += 10)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = a4;
    v13._object = a5;
    v14 = String.hasSuffix(_:)(v13);
    swift_bridgeObjectRelease();
    if (v14)
      break;
    if (v5 == ++v10)
      return 0;
  }
  return v10;
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return MEMORY[0x24BEE4AF8];
  v3 = a2;
  v4 = 0;
  v23 = result + 32;
  v5 = a2 + 56;
  v6 = MEMORY[0x24BEE4AF8];
  do
  {
    v22 = v6;
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    for (i = v4; ; ++i)
    {
      if (i == v7)
      {
        __break(1u);
        return result;
      }
      v9 = v23 + 80 * i;
      v11 = *(_QWORD *)v9;
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v24 = *(_BYTE *)(v9 + 24);
      v26 = *(_OWORD *)(v9 + 48);
      v27 = *(_OWORD *)(v9 + 32);
      v25 = *(_OWORD *)(v9 + 64);
      v4 = i + 1;
      if (!*(_QWORD *)(v3 + 16))
        break;
      result = static Hasher._hash(seed:_:)();
      v13 = -1 << *(_BYTE *)(v3 + 32);
      v14 = result & ~v13;
      if (((*(_QWORD *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
        break;
      v15 = *(_QWORD *)(v3 + 48);
      if (*(_QWORD *)(v15 + 8 * v14) != i)
      {
        v16 = ~v13;
        do
        {
          v14 = (v14 + 1) & v16;
          if (((*(_QWORD *)(v5 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
            goto LABEL_16;
        }
        while (*(_QWORD *)(v15 + 8 * v14) != i);
      }
      if (v4 == v2)
        return v22;
    }
LABEL_16:
    swift_bridgeObjectRetain();
    v6 = v22;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
      v6 = v22;
    }
    v18 = *(_QWORD *)(v6 + 16);
    v17 = *(_QWORD *)(v6 + 24);
    v19 = v18 + 1;
    if (v18 >= v17 >> 1)
    {
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      v19 = v18 + 1;
      v6 = v22;
    }
    *(_QWORD *)(v6 + 16) = v19;
    v20 = v6 + 96 * v18;
    *(_QWORD *)(v20 + 32) = i;
    *(_QWORD *)(v20 + 48) = v11;
    *(_QWORD *)(v20 + 56) = v10;
    *(_QWORD *)(v20 + 64) = v12;
    *(_BYTE *)(v20 + 72) = v24;
    *(_OWORD *)(v20 + 80) = v27;
    *(_OWORD *)(v20 + 96) = v26;
    *(_OWORD *)(v20 + 112) = v25;
    v3 = a2;
  }
  while (v4 != v2);
  return v6;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonDefinition_v1()
{
  return &type metadata for _Proto_SkeletonDefinition_v1;
}

uint64_t initializeWithCopy for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for _Proto_SkeletonDefinition_v1.Joint(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _Proto_SkeletonDefinition_v1.Joint(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _Proto_SkeletonDefinition_v1.Joint()
{
  return &type metadata for _Proto_SkeletonDefinition_v1.Joint;
}

uint64_t __RKTimerTrigger.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_WORD *)(result + 16) = 0;
  *(_BYTE *)(result + 18) = 0;
  return result;
}

uint64_t __RKTimerTrigger.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_WORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 18) = 0;
  return result;
}

uint64_t __RKTimerTrigger.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKTimerTrigger.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKTimerTrigger()
{
  return objc_opt_self();
}

void one-time initialization function for basicFloatAnimationData()
{
  static EmphasizeAnimations.basicFloatAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicFloatAnimationData;
}

void one-time initialization function for playfulFloatAnimationData()
{
  static EmphasizeAnimations.playfulFloatAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulFloatAnimationData;
}

void one-time initialization function for wildFloatAnimationData()
{
  static EmphasizeAnimations.wildFloatAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildFloatAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeFloatAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 318, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicFloatAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 375, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulFloatAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 404, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildFloatAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t QueryPredicate.enumerate(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t static QueryPredicateProtocol.everything.getter@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = type metadata accessor for QueryPredicates.Constant(0, AssociatedTypeWitness, v3, v4);
  v6 = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Constant<A>, v5);
  return QueryPredicateProtocol.eraseToQueryPredicate()(v5, v6, a1);
}

uint64_t QueryPredicate.evaluate(value:)()
{
  uint64_t (**v0)(void);

  return (*v0)() & 1;
}

uint64_t QueryPredicate.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t (**a5)()@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t (*v18)();
  uint64_t (*v19)();
  uint64_t (*v20)();
  uint64_t (*v21)();
  uint64_t (*v22)();
  uint64_t v23;
  uint64_t result;
  uint64_t (*v25)();
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  _BYTE v29[40];

  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = implicit closure #1 in QueryPredicate.init<A>(_:)(v13, v14, v15, v16);
  v19 = v18;
  v20 = implicit closure #3 in QueryPredicate.init<A>(_:)(a1, a2, a3, a4);
  v22 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for QueryInternalizable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
    outlined init with take of BindableDataInternal(v27, (uint64_t)v29);
    outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)v27);
    v23 = swift_allocObject();
    outlined init with take of BindableDataInternal(v27, v23 + 16);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    v25 = partial apply for implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:);
  }
  else
  {
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    outlined destroy of BodyTrackingComponent?((uint64_t)v27, &demangling cache variable for type metadata for QueryInternalizable?);
    v25 = (uint64_t (*)())makeCustomPredicate<A>(predicate:)(a1, a3, a4);
    v23 = v26;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  }
  *a5 = v17;
  a5[1] = v19;
  a5[2] = v25;
  a5[3] = (uint64_t (*)())v23;
  a5[4] = v20;
  a5[5] = v22;
  return result;
}

uint64_t (*implicit closure #1 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:);
}

uint64_t (*implicit closure #3 in QueryPredicate.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t v14;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v7 + 16))(v10, v9);
  v11 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = a2;
  *((_QWORD *)v12 + 3) = a3;
  *((_QWORD *)v12 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v12[v11], v10, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:);
}

uint64_t implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for Entity();
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
    v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a2;
    *(_QWORD *)(v11 + 24) = a3;
    v12 = (char *)(v11 + v10);
    v13 = partial apply for closure #1 in makeCustomPredicate<A>(predicate:);
LABEL_9:
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
    return (uint64_t)v13;
  }
  v14 = swift_conformsToProtocol2();
  if (v14)
    v15 = AssociatedTypeWitness;
  else
    v15 = 0;
  if (v15)
  {
    v16 = v14;
    if (v14)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
      v17 = (*(unsigned __int8 *)(v6 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v18 = (_QWORD *)swift_allocObject();
      v18[2] = a2;
      v18[3] = a3;
      v18[4] = AssociatedTypeWitness;
      v18[5] = v16;
      v12 = (char *)v18 + v17;
      v13 = partial apply for closure #2 in makeCustomPredicate<A>(predicate:);
      goto LABEL_9;
    }
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicate<A>@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = QueryPredicate.evaluate(value:)();
  *a1 = result & 1;
  return result;
}

uint64_t QueryPredicateProtocol.eraseToQueryPredicate()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v3;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  v7 = MEMORY[0x24BDAC7A8](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v9, v3, a1, v7);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return QueryPredicate.init<A>(_:)((uint64_t)v9, AssociatedTypeWitness, a1, a2, a3);
}

uint64_t type metadata accessor for QueryPredicates.Constant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicates.Constant);
}

uint64_t instantiation function for generic protocol witness table for QueryPredicate<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicate<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of QueryEvaluable.evaluate(value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of QueryEvaluable.enumerate(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t destroy for QueryPredicate()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for QueryPredicate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for QueryPredicate(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for QueryPredicate(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for QueryPredicate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QueryPredicate);
}

ValueMetadata *type metadata accessor for QueryPredicates()
{
  return &type metadata for QueryPredicates;
}

uint64_t getEnumTagSinglePayload for QueryPredicates.Constant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryPredicates.Constant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC84504 + 4 * byte_21BE6C645[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC84538 + 4 * byte_21BE6C640[v4]))();
}

uint64_t sub_21BC84538(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC84540(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC84548);
  return result;
}

uint64_t sub_21BC84554(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC8455CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC84560(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC84568(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t protocol witness for QueryEvaluable.evaluate(value:) in conformance QueryPredicates.Constant<A>@<X0>(_BYTE *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = specialized QueryPredicates.Constant.evaluate(value:)(*v1);
  *a1 = result & 1;
  return result;
}

uint64_t instantiation function for generic protocol witness table for QueryPredicates.Constant<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x220772E3C](&protocol conformance descriptor for QueryPredicates.Constant<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t thunk #1 (_:) in createEntityPredicate(_:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _BYTE v10[32];
  _QWORD v11[4];

  v11[3] = MEMORY[0x24BEE27D0];
  v11[0] = a1;
  outlined init with copy of Any((uint64_t)v11, (uint64_t)v10);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v3 = swift_dynamicCastClassUnconditional();
    goto LABEL_3;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v6 = specialized static Entity.entityInfoType(_:)();
    if (v6)
    {
      v4 = (*(uint64_t (**)(void))(v6 + 232))();
      v7 = *(_QWORD *)(v4 + 16);
      swift_retain();
      MEMORY[0x22076D160](v7, 0);
      *(_QWORD *)(v4 + 16) = v9;
      MEMORY[0x22076D160](v9, v4);
      swift_release();
      goto LABEL_7;
    }
    v3 = makeEntity(for:)(v9);
LABEL_3:
    v4 = v3;
LABEL_7:
    v8 = a2(v4);
    swift_release();
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t CustomEntityPredicate;
  _QWORD v14[6];
  __int128 v15;
  uint64_t (*v16)@<X0>(_BYTE *@<X8>);
  _QWORD *v17;

  v5 = implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)(a1, a2, a3);
  v7 = v6;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = v5;
  v8[5] = v7;
  v16 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool);
  v17 = v8;
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:));
  swift_dynamicCast();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = v15;
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = _s10RealityKit6EntityCSbIegnr_ACSbIeggd_TRTA_0;
  *(_QWORD *)(v10 + 24) = v9;
  v14[4] = partial apply for thunk #1 (_:) in createEntityPredicate(_:);
  v14[5] = v10;
  v14[0] = MEMORY[0x24BDAC760];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  v14[3] = &block_descriptor_28;
  v11 = _Block_copy(v14);
  swift_retain();
  swift_release();
  CustomEntityPredicate = REQueryCreateCustomEntityPredicate();
  _Block_release(v11);
  swift_release();
  return CustomEntityPredicate;
}

uint64_t (*implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = MEMORY[0x24BDAC7A8](a1);
  v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v5 + 16))(v8, v7);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:);
}

uint64_t closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  void *v17;
  uint64_t CustomComponentPredicate;
  _QWORD aBlock[6];

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = MEMORY[0x24BDAC7A8](a1);
  v12 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, v13, v14, v11);
  v15 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v16 = (char *)swift_allocObject();
  *((_QWORD *)v16 + 2) = a4;
  *((_QWORD *)v16 + 3) = a5;
  *((_QWORD *)v16 + 4) = a1;
  *((_QWORD *)v16 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v16[v15], v12, a4);
  aBlock[4] = partial apply for thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer) -> (@unowned Bool);
  aBlock[3] = &block_descriptor_21_0;
  v17 = _Block_copy(aBlock);
  swift_release();
  CustomComponentPredicate = REQueryCreateCustomComponentPredicate();
  _Block_release(v17);
  return CustomComponentPredicate;
}

uint64_t thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE v16[47];
  _BYTE v17[40];
  uint64_t v18[5];

  v10 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v14 = &v16[-v13];
  closure #1 in thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(a2, a3, a1, v18);
  outlined init with copy of Component?((uint64_t)v18, (uint64_t)&v16[8]);
  if (*(_QWORD *)&v16[32])
  {
    outlined init with take of BindableDataInternal((__int128 *)&v16[8], (uint64_t)v17);
    outlined init with copy of __REAssetService((uint64_t)v17, (uint64_t)&v16[8]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
    swift_dynamicCast();
    (*(void (**)(_BYTE *__return_ptr, _BYTE *, uint64_t, uint64_t))(v10 + 24))(&v16[7], v14, a5, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for Component?);
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
    return v16[7];
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for Component?);
    outlined destroy of BodyTrackingComponent?((uint64_t)&v16[8], &demangling cache variable for type metadata for Component?);
    return 0;
  }
}

uint64_t closure #1 in thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t Entity;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  _QWORD v17[4];

  (*(void (**)(_QWORD *__return_ptr))(a2 + 80))(v17);
  if (LODWORD(v17[0]) != 36)
  {
    v17[0] = a3;
    v11 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(a2 + 64);
    a4[3] = a1;
    a4[4] = a2;
    __swift_allocate_boxed_opaque_existential_1(a4);
    return v11(v17, a1, a2);
  }
  Entity = REComponentGetEntity();
  v17[3] = MEMORY[0x24BEE27D0];
  v17[0] = Entity;
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
  swift_dynamicCast();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v9 = swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      return result;
    }
    v13 = specialized static Entity.entityInfoType(_:)();
    if (v13)
    {
      v10 = (*(uint64_t (**)(void))(v13 + 232))();
      v14 = *(_QWORD *)(v10 + 16);
      swift_retain();
      MEMORY[0x22076D160](v14, 0);
      *(_QWORD *)(v10 + 16) = v15;
      MEMORY[0x22076D160](v15, v10);
      swift_release();
      goto LABEL_9;
    }
    v9 = makeEntity(for:)(v15);
  }
  v10 = v9;
LABEL_9:
  v17[0] = v10;
  Entity.ComponentSet.existentialBox(for:)(a1, a2, (uint64_t)a4);
  return swift_release();
}

uint64_t specialized QueryPredicates.Constant.evaluate(value:)(char a1)
{
  return a1 & 1;
}

uint64_t partial apply for closure #2 in makeCustomPredicate<A>(predicate:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[2];
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #2 in makeCustomPredicate<A>(predicate:)(v0[4], v0[5], (uint64_t)v0 + ((v2 + 48) & ~v2), v1, v0[3]);
}

uint64_t partial apply for closure #1 in makeCustomPredicate<A>(predicate:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #1 in makeCustomPredicate<A>(predicate:)(v0 + ((v2 + 32) & ~v2), v1, *(_QWORD *)(v0 + 24));
}

uint64_t sub_21BC84DD4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.QueryEvaluable.Value) -> (@unowned Bool)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t _s10RealityKit6EntityCSbIegnr_ACSbIeggd_TRTA_0(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed (@in_guaranteed Entity) -> (@out Bool)(a1, *(void (**)(unsigned __int8 *__return_ptr, uint64_t *))(v1 + 16));
}

uint64_t sub_21BC84E2C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t objectdestroy_2Tm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in makeCustomPredicate<A>(predicate:)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*(_QWORD *)(v0 + 24) + 8) + 24))(&v2);
  return v2;
}

uint64_t objectdestroyTm_5()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 16) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[2];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return thunk #1 <A>(_:) in closure #2 in makeCustomPredicate<A>(predicate:)(a1, v1[4], v1[5], (uint64_t)v1 + ((v3 + 48) & ~v3), v2, v1[3]);
}

uint64_t outlined init with copy of Component?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BC84FD4()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in QueryPredicate.init<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in QueryPredicate.init<A>(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 8) + 32))();
}

uint64_t objectdestroy_26Tm()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in QueryPredicate.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 8) + 24))(&v2);
  return v2;
}

uint64_t AudioFileResource.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;

  v2 = *(_BYTE *)(v1 + 41);
  v3 = *(_BYTE *)(v1 + 42);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_BYTE *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_BYTE *)(v1 + 72);
  v9 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 88);
  v10 = *(_DWORD *)(v1 + 96);
  v11 = *(_BYTE *)(v1 + 100);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 1) = v2;
  *(_BYTE *)(a1 + 2) = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 60) = v11;
  return swift_bridgeObjectRetain();
}

uint64_t AudioFileResource.__allocating_init(fromCore:)(uint64_t a1)
{
  swift_allocObject();
  return AudioFileResource.init(fromCore:)(a1);
}

uint64_t AudioFileResource.init(fromCore:)(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  _QWORD v26[3];
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  int v33;
  char v34;

  swift_retain();
  v3 = (void *)REAssetCopyDescription();
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  v27 = 47;
  v28 = 0xE100000000000000;
  v26[2] = &v27;
  v7 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in Collection<>.split(separator:maxSplits:omittingEmptySubsequences:), (uint64_t)v26, v4, v6);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = (uint64_t *)(v7 + 32 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v13 = v9[3];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x220768CFC](v10, v11, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  *(_QWORD *)(v1 + 24) = v14;
  *(_QWORD *)(v1 + 32) = v16;
  if ((REAssetHandleIsLoaded() & 1) == 0)
    REAssetHandleLoadNow();
  AudioFileResource.Configuration.init(from:)((uint64_t)&v27);
  v17 = BYTE1(v27);
  v18 = BYTE2(v27);
  v19 = v28;
  v20 = v29;
  v21 = v30;
  v22 = v31;
  v23 = v33;
  v24 = v34;
  *(_BYTE *)(v1 + 40) = v27;
  *(_BYTE *)(v1 + 41) = v17;
  *(_BYTE *)(v1 + 42) = v18;
  *(_QWORD *)(v1 + 48) = v19;
  *(_BYTE *)(v1 + 56) = v20;
  *(_QWORD *)(v1 + 64) = v21;
  *(_BYTE *)(v1 + 72) = v22;
  *(_OWORD *)(v1 + 80) = v32;
  *(_DWORD *)(v1 + 96) = v23;
  *(_BYTE *)(v1 + 100) = v24;
  swift_release();
  return AudioResource.init(fromCore:)(a1);
}

uint64_t AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int IsCompletelyLoaded;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  void *FailedMessage;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v81;
  int InputMode;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  _BYTE v111[8];
  void (*v112)(char *, uint64_t);
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  char v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  unsigned __int8 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  unsigned __int8 v128;
  uint64_t AudioAssetID;

  v7 = v6;
  v98 = a4;
  v95 = a3;
  v99 = a2;
  v11 = type metadata accessor for URL();
  v97 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v96 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a5;
  v14 = a5[1];
  v103 = a5[2];
  v109 = (void (*)(char *, uint64_t))*((_QWORD *)a5 + 1);
  v108 = a5[16];
  v107 = *((_QWORD *)a5 + 3);
  v106 = a5[32];
  v15 = *((_QWORD *)a5 + 6);
  v105 = *((_QWORD *)a5 + 5);
  v16 = *((_DWORD *)a5 + 14);
  v17 = a5[60];
  v18 = *a6;
  swift_retain();
  IsCompletelyLoaded = REAudioFileAssetIsCompletelyLoaded();
  v110 = v15;
  v104 = v13;
  v102 = v14;
  v101 = v16;
  v100 = v17;
  if (IsCompletelyLoaded)
  {
    v93 = v18;
    v94 = v11;
    AudioFileResource.Configuration.init(from:)((uint64_t)&v120);
    v91 = v120;
    v20 = a1;
    v90 = BYTE1(v120);
    v89 = BYTE2(v120);
    v21 = v121;
    v88 = v122;
    v87 = v123;
    v86 = v124;
    v22 = v126;
    v85 = v125;
    v84 = v127;
    v83 = v128;
    v92 = v20;
    InputMode = REAudioFileAssetGetInputMode();
    LOBYTE(v120) = v13;
    BYTE1(v120) = v14;
    v23 = v103;
    BYTE2(v120) = v103;
    v121 = v109;
    v122 = v108;
    v123 = v107;
    LOBYTE(v124) = v106;
    v125 = v105;
    v126 = v15;
    v127 = v16;
    v128 = v17;
    v111[0] = v91;
    v111[1] = v90;
    v111[2] = v89;
    v112 = v21;
    v113 = v88;
    v114 = v87;
    v115 = v86;
    v116 = v85;
    v117 = v22;
    v118 = v84;
    v119 = v83;
    v24 = specialized static AudioFileResource.Configuration.== infix(_:_:)((uint64_t)&v120, (uint64_t)v111);
    swift_bridgeObjectRelease();
    if (v24 && InputMode == (0x20001u >> (8 * v93)))
    {
      v25 = 0;
      v26 = 1;
      v27 = v99;
      v11 = v94;
      a1 = v92;
      v28 = v98;
      v29 = v97;
      goto LABEL_13;
    }
    if (one-time initialization token for audio != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.audio);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    v33 = os_log_type_enabled(v31, v32);
    v11 = v94;
    a1 = v92;
    v34 = v104;
    if (v33)
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_21B9AA000, v31, v32, "[API/RealityKit] AudioFileResource initialized with different CreateOptions. Cloning the internal asset.", v35, 2u);
      MEMORY[0x220772F44](v35, -1, -1);
    }

    v36 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v36, (uint64_t)&v120);
    v37 = v123;
    v38 = v124;
    __swift_project_boxed_opaque_existential_1(&v120, v123);
    (*(void (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v120);
    LOBYTE(v120) = v34;
    BYTE1(v120) = v102;
    BYTE2(v120) = v23;
    v121 = v109;
    v122 = v108;
    v123 = v107;
    LOBYTE(v124) = v106;
    v125 = v105;
    v126 = v110;
    v127 = v101;
    v128 = v100;
    type metadata accessor for REAudioFileAssetConfigurationWrapper();
    swift_initStackObject();
    swift_bridgeObjectRetain();
    REAudioFileAssetConfigurationWrapper.init(configuration:)((char *)&v120);
    REAudioFileAssetConfigurationSetInputMode();
    v25 = REAudioFileAssetCloneWithConfiguration();
    swift_release();
    v26 = 0;
    if (v25)
      a1 = v25;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v28 = v98;
  v29 = v97;
  v27 = v99;
LABEL_13:
  v39 = v96;
  v40 = v27;
  (*(void (**)(char *))(v29 + 16))(v96);
  if (v28)
  {
    v41 = v39;
    v42 = v95;
  }
  else
  {
    v43 = URL.lastPathComponent.getter();
    v41 = v39;
    v42 = v43;
    v28 = v44;
  }
  v45 = *(void (**)(char *, uint64_t))(v29 + 8);
  v45(v41, v11);
  *(_QWORD *)(v7 + 24) = v42;
  *(_QWORD *)(v7 + 32) = v28;
  *(_BYTE *)(v7 + 40) = v104;
  *(_BYTE *)(v7 + 41) = v102;
  *(_BYTE *)(v7 + 42) = v103;
  v46 = v110;
  *(_QWORD *)(v7 + 48) = v109;
  *(_BYTE *)(v7 + 56) = v108;
  *(_QWORD *)(v7 + 64) = v107;
  *(_BYTE *)(v7 + 72) = v106;
  *(_QWORD *)(v7 + 80) = v105;
  *(_QWORD *)(v7 + 88) = v46;
  *(_DWORD *)(v7 + 96) = v101;
  *(_BYTE *)(v7 + 100) = v100;
  swift_bridgeObjectRetain();
  swift_release();
  v47 = AudioResource.init(fromCore:)(a1);
  swift_retain();
  if (v25)
    RERelease();
  v48 = v40;
  if (v26)
  {
    v45(v40, v11);
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v109 = v45;
  if ((REAssetHandleIsLoaded() & 1) == 0)
  {
    REAssetHandleLoadNow();
    if (REAssetHandleLoadFailed())
    {
      swift_release();
      swift_bridgeObjectRelease();
      v49 = (void *)REAssetCopyDescription();
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v52 = v51;

      FailedMessage = (void *)REAssetHandleCopyLoadFailedMessage();
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v56 = v55;

      v120 = v50;
      v121 = v52;
      swift_bridgeObjectRetain();
      v57._countAndFlagsBits = 8250;
      v57._object = (void *)0xE200000000000000;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v58._countAndFlagsBits = v54;
      v58._object = v56;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v59 = v120;
      v60 = v121;
      lazy protocol witness table accessor for type AudioResource.CoreREError and conformance AudioResource.CoreREError();
      swift_allocError();
      *v61 = v59;
      v61[1] = (uint64_t)v60;
      swift_willThrow();
      swift_release();
      v62 = v40;
      v63 = v11;
LABEL_37:
      v109(v62, v63);
      return v47;
    }
  }
  v64 = 0xE900000000000067;
  v65 = 0x6E696D6165727473;
  if ((v104 & 1) != 0)
  {
    v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      v65 = 0x6564616F6C657270;
      v64 = 0xE900000000000064;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for audio != -1)
    swift_once();
  v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Logger.audio);
  swift_retain_n();
  swift_bridgeObjectRetain();
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = swift_slowAlloc();
    v94 = v11;
    v71 = v70;
    v110 = swift_slowAlloc();
    v120 = v110;
    *(_DWORD *)v71 = 136315906;
    swift_bridgeObjectRetain();
    AudioAssetID = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v64, &v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 12) = 2080;
    v72 = *(_QWORD *)(v47 + 24);
    v73 = *(_QWORD *)(v47 + 32);
    swift_bridgeObjectRetain();
    AudioAssetID = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, &v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 22) = 2048;
    AudioAssetID = REAudioFileAssetGetAudioAssetID();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v71 + 32) = 2048;
    AudioAssetID = REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_21B9AA000, v68, v69, "[API/RealityKit] Loading %s AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu", (uint8_t *)v71, 0x2Au);
    v74 = v110;
    swift_arrayDestroy();
    MEMORY[0x220772F44](v74, -1, -1);
    v75 = v71;
    v11 = v94;
    MEMORY[0x220772F44](v75, -1, -1);

  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  v76 = (id)REAudioFileGetAVAudioFormat();
  if (!v76)
  {
    swift_release();
    lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError();
    swift_allocError();
    *v79 = 1;
    swift_willThrow();
    swift_release();
    v62 = v48;
    v63 = v11;
    goto LABEL_37;
  }
  v77 = v76;
  AVAudioFormat.validateAudioFormatSupportsMultiChannel()();
  if (v78)
  {
    v109(v48, v11);

    swift_release_n();
    return v47;
  }
  v109(v48, v11);

LABEL_20:
  swift_release();
  return v47;
}

uint64_t key path setter for AudioFileResource.loadingStrategy : AudioFileResource(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return REAudioFileAssetSetStreaming();
}

uint64_t AudioFileResource.loadingStrategy.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetStreaming();
  *a1 = result ^ 1;
  return result;
}

uint64_t AudioFileResource.loadingStrategy.setter(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return REAudioFileAssetSetStreaming();
}

uint64_t (*AudioFileResource.loadingStrategy.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REAudioFileAssetGetStreaming() ^ 1;
  return AudioFileResource.loadingStrategy.modify;
}

uint64_t AudioFileResource.loadingStrategy.modify(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8) == 1)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  return REAudioFileAssetSetStreaming();
}

BOOL AudioFileResource.shouldLoop.getter()
{
  return REAudioFileAssetGetLoopCount() == -1;
}

uint64_t AudioFileResource.shouldLoop.setter()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t (*AudioFileResource.shouldLoop.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = REAudioFileAssetGetLoopCount() == -1;
  return AudioFileResource.shouldLoop.modify;
}

uint64_t AudioFileResource.shouldLoop.modify()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t AudioFileResource.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AudioFileResource.deinit()
{
  uint64_t v0;

  v0 = AudioResource.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioFileResource.__deallocating_deinit()
{
  AudioResource.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void AudioFileResource.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

Swift::Int AudioFileResource.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t AudioFileResource.__duration.getter()
{
  return REAudioFileAssetGetLengthInSeconds();
}

uint64_t AudioFileResource.duration.getter()
{
  REAudioFileAssetGetLengthInSeconds();
  return static Duration.seconds(_:)();
}

uint64_t AudioFileResource.init(named:in:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = type metadata accessor for URL();
  *(_QWORD *)(v5 + 56) = v7;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 72) = swift_task_alloc();
  v8 = swift_task_alloc();
  *(_BYTE *)(v5 + 188) = *(_BYTE *)a4;
  *(_BYTE *)(v5 + 189) = *(_BYTE *)(a4 + 1);
  *(_BYTE *)(v5 + 190) = *(_BYTE *)(a4 + 2);
  v9 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v5 + 80) = v8;
  *(_QWORD *)(v5 + 88) = v9;
  *(_BYTE *)(v5 + 191) = *(_BYTE *)(a4 + 16);
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(a4 + 24);
  *(_BYTE *)(v5 + 192) = *(_BYTE *)(a4 + 32);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a4 + 40);
  *(_DWORD *)(v5 + 184) = *(_DWORD *)(a4 + 56);
  *(_BYTE *)(v5 + 193) = *(_BYTE *)(a4 + 60);
  type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 120) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 128) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 136) = v10;
  return swift_task_switch();
}

uint64_t AudioFileResource.init(named:in:configuration:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  char v31;
  int v32;
  char v33;
  char v34;
  uint64_t v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  int v54;
  char v55;
  unsigned __int8 v56[9];

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(id *)(v0 + 32);
  }
  else
  {
    v2 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
    v1 = 0;
  }
  *(_QWORD *)(v0 + 144) = v1;
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(char **)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v8 = v1;
  static AudioFileResource.url(forAssetNamed:in:)(v7, v6, v2, v5);

  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3);
  v10 = *(_QWORD *)(v0 + 48);
  v12 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 24);
  if (v9 == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of URL?(v10);
    lazy protocol witness table accessor for type AudioFileResource.Error and conformance AudioFileResource.Error();
    swift_allocError();
    *v13 = v12;
    v13[1] = v11;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v14 = URL.pathExtension.getter();
  v16 = v15;
  v17 = (void *)MEMORY[0x220768C3C](v12, v11);
  v18 = objc_msgSend(v17, sel_pathExtension);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v21 = v20;

  if (v14 == v19 && v16 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      v25 = *(void **)(v0 + 24);
      v48 = *(_QWORD *)(v0 + 16);
      v49 = v25;
      swift_bridgeObjectRetain();
      v26._countAndFlagsBits = 46;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      v27 = URL.pathExtension.getter();
      v29 = v28;
      swift_bridgeObjectRetain();
      v30._countAndFlagsBits = v27;
      v30._object = v29;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v24 = v48;
      v23 = v49;
      goto LABEL_12;
    }
  }
  v23 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v24 = *(_QWORD *)(v0 + 16);
LABEL_12:
  v31 = *(_BYTE *)(v0 + 193);
  v32 = *(_DWORD *)(v0 + 184);
  v33 = *(_BYTE *)(v0 + 192);
  v34 = *(_BYTE *)(v0 + 191);
  v36 = *(void **)(v0 + 88);
  v35 = *(_QWORD *)(v0 + 96);
  v37 = *(_BYTE *)(v0 + 190);
  v38 = *(_BYTE *)(v0 + 189);
  v39 = *(void **)(v0 + 32);
  LOBYTE(v48) = *(_BYTE *)(v0 + 188);
  BYTE1(v48) = v38;
  BYTE2(v48) = v37;
  v49 = v36;
  v50 = v34;
  v51 = v35;
  v52 = v33;
  v53 = *(_OWORD *)(v0 + 104);
  v54 = v32;
  v55 = v31;
  v56[0] = 1;
  v40 = static AudioFileResource.makeAssetRef(bundle:name:configuration:inputMode:)(v39, v24, v23, (unsigned __int8 *)&v48, v56);
  *(_QWORD *)(v0 + 152) = v40;
  v42 = v40;
  swift_bridgeObjectRelease();
  v43 = URL.absoluteString.getter();
  v45 = v44;
  *(_QWORD *)(v0 + 160) = v44;
  v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  v46 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v46;
  *v46 = v0;
  v46[1] = AudioFileResource.init(named:in:configuration:);
  return v47(v42, v43, v45);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned __int8 v25[8];
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  unsigned __int8 v34[9];

  v22 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(void **)(v0 + 144);
  v17 = *(_DWORD *)(v0 + 184);
  v18 = *(_BYTE *)(v0 + 193);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  v14 = *(_BYTE *)(v0 + 192);
  v1 = *(_BYTE *)(v0 + 191);
  v2 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  v3 = *(_BYTE *)(v0 + 190);
  v4 = *(_BYTE *)(v0 + 189);
  v5 = *(_BYTE *)(v0 + 188);
  v7 = *(char **)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 56);
  v9 = *(_QWORD *)(v0 + 64);
  v21 = v9;
  v19 = *(_QWORD *)(v0 + 16);
  v20 = *(_QWORD *)(v0 + 24);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, v6, v8);
  v25[0] = v5;
  v25[1] = v4;
  v25[2] = v3;
  v26 = v2;
  v27 = v1;
  v28 = v13;
  v29 = v14;
  v30 = v15;
  v31 = v16;
  v32 = v17;
  v33 = v18;
  v34[0] = 1;
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  v10 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v22, v7, v19, v20, v25, v34);
  RERelease();

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  v11 = swift_task_dealloc();
  if (!v23)
    v11 = v10;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  swift_release();
  RERelease();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AudioFileResource.init(named:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v6[10] = a5;
  v6[11] = v5;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  type metadata accessor for MainActor();
  v6[12] = static MainActor.shared.getter();
  v6[13] = dispatch thunk of Actor.unownedExecutor.getter();
  v6[14] = v7;
  return swift_task_switch();
}

uint64_t AudioFileResource.init(named:from:in:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;

  v1 = (void *)v0[10];
  v3 = v0[6];
  v2 = (void *)v0[7];
  v11 = v0[8];
  v12 = (void *)v0[9];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 58;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v0[15] = v12;
  static LoadableResource.getAssetRefFromRealityFileInBundle(named:in:)(v11, v12, v1);
  v7 = *(_QWORD *)(v6 + 16);
  v0[16] = v7;
  RERetain();
  swift_release();
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  v8 = (_QWORD *)swift_task_alloc();
  v0[17] = v8;
  *v8 = v0;
  v8[1] = AudioFileResource.init(named:from:in:);
  return v10(v7, v11, (uint64_t)v12);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  swift_release();
  if (one-time initialization token for audio != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.audio);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 64);
    v6 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v14 = v13;
    *(_DWORD *)v6 = 136315906;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2048;
    *(_QWORD *)(v0 + 24) = REAudioFileAssetGetAudioAssetID();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2048;
    *(_QWORD *)(v0 + 32) = REAssetGetAssetId();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 32) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21B9AA000, v2, v3, "[API/RealityKit] Loading AudioFileResource %s with audioAssetID: %llu and REAssetID: %llu from scene: %s", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v13, -1, -1);
    MEMORY[0x220772F44](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(void **)(v0 + 80);
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  v9 = AudioFileResource.init(fromCore:)(v7);
  RERelease();

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
}

{
  uint64_t v0;

  swift_release();
  RERelease();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AudioFileResource.init(contentsOf:withName:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  v6 = type metadata accessor for URL();
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 56) = swift_task_alloc();
  v7 = swift_task_alloc();
  *(_BYTE *)(v4 + 164) = *(_BYTE *)a4;
  *(_BYTE *)(v4 + 165) = *(_BYTE *)(a4 + 1);
  *(_BYTE *)(v4 + 166) = *(_BYTE *)(a4 + 2);
  v8 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 72) = v8;
  *(_BYTE *)(v4 + 167) = *(_BYTE *)(a4 + 16);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a4 + 24);
  *(_BYTE *)(v4 + 168) = *(_BYTE *)(a4 + 32);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a4 + 40);
  *(_DWORD *)(v4 + 160) = *(_DWORD *)(a4 + 56);
  *(_BYTE *)(v4 + 169) = *(_BYTE *)(a4 + 60);
  type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 104) = static MainActor.shared.getter();
  *(_QWORD *)(v4 + 112) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v4 + 120) = v9;
  return swift_task_switch();
}

uint64_t AudioFileResource.init(contentsOf:withName:configuration:)()
{
  uint64_t v0;
  char v1;
  int v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  char v20[8];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  int v26;
  char v27;
  char v28;

  v1 = *(_BYTE *)(v0 + 169);
  v2 = *(_DWORD *)(v0 + 160);
  v3 = *(_BYTE *)(v0 + 168);
  v4 = *(_BYTE *)(v0 + 167);
  v6 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 80);
  v7 = *(_BYTE *)(v0 + 166);
  v8 = *(_BYTE *)(v0 + 165);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 16);
  v20[0] = *(_BYTE *)(v0 + 164);
  v20[1] = v8;
  v20[2] = v7;
  v21 = v6;
  v22 = v4;
  v23 = v5;
  v24 = v3;
  v25 = *(_OWORD *)(v0 + 88);
  v26 = v2;
  v27 = v1;
  v28 = 1;
  v12 = specialized static AudioFileResource.makeAssetRef(from:withName:configuration:inputMode:)(v11, v9, v10, v20);
  *(_QWORD *)(v0 + 128) = v12;
  v13 = v12;
  v14 = URL.absoluteString.getter();
  v16 = v15;
  *(_QWORD *)(v0 + 136) = v15;
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:)
                                                          + async function pointer to specialized static AudioResource.loadAssetWithSharedAssetService(asset:debugAssetName:));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v17;
  *v17 = v0;
  v17[1] = AudioFileResource.init(contentsOf:withName:configuration:);
  return v19(v13, v14, v16);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  char v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31[8];
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char v39;
  unsigned __int8 v40[9];

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 16);
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v6, v3);
  v7(v1, v6, v3);
  if (v5)
  {
    v29 = *(_QWORD *)(v0 + 24);
    v30 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v29 = URL.lastPathComponent.getter();
    v30 = v8;
  }
  v27 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 152);
  v22 = *(_DWORD *)(v0 + 160);
  v23 = *(_BYTE *)(v0 + 169);
  v9 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 96);
  v10 = *(_BYTE *)(v0 + 168);
  v11 = *(_BYTE *)(v0 + 167);
  v13 = *(_QWORD *)(v0 + 72);
  v12 = *(_QWORD *)(v0 + 80);
  v14 = *(_BYTE *)(v0 + 166);
  v15 = *(_BYTE *)(v0 + 165);
  v16 = *(_BYTE *)(v0 + 164);
  v17 = *(char **)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 40);
  v26 = *(_QWORD *)(v0 + 16);
  v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 48) + 8);
  ((void (*)(_QWORD))v24)(*(_QWORD *)(v0 + 56));
  v31[0] = v16;
  v31[1] = v15;
  v31[2] = v14;
  v32 = v13;
  v33 = v11;
  v34 = v12;
  v35 = v10;
  v36 = v9;
  v37 = v21;
  v38 = v22;
  v39 = v23;
  v40[0] = 1;
  type metadata accessor for AudioFileResource();
  swift_allocObject();
  v18 = AudioFileResource.init(assetRef:url:name:configuration:legacyInputMode:)(v27, v17, v29, v30, v31, v40);
  RERelease();
  v24(v26, v25);
  swift_task_dealloc();
  v19 = swift_task_dealloc();
  if (!v28)
    v19 = v18;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 16);
  swift_release();
  RERelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AudioFileResource.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v34 = a1;
  v3 = type metadata accessor for Mirror.AncestorRepresentation();
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v31 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v5);
  v30 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21BE50950;
  *(_QWORD *)(v7 + 32) = 1701667182;
  *(_QWORD *)(v7 + 40) = 0xE400000000000000;
  v8 = *(_QWORD *)(v1 + 24);
  v29 = *(_QWORD *)(v1 + 32);
  v9 = v29;
  v10 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 56) = v9;
  *(_QWORD *)(v7 + 72) = v10;
  strcpy((char *)(v7 + 80), "configuration");
  *(_WORD *)(v7 + 94) = -4864;
  v11 = *(_BYTE *)(v1 + 40);
  v12 = *(_BYTE *)(v1 + 41);
  v13 = *(_BYTE *)(v1 + 42);
  v14 = *(_QWORD *)(v1 + 48);
  v15 = *(_BYTE *)(v1 + 56);
  v16 = *(_QWORD *)(v2 + 64);
  v17 = *(_BYTE *)(v2 + 72);
  v18 = *(_QWORD *)(v2 + 88);
  v28 = *(_QWORD *)(v2 + 80);
  v19 = *(_DWORD *)(v2 + 96);
  v26 = *(unsigned __int8 *)(v2 + 100);
  v27 = v19;
  *(_QWORD *)(v7 + 120) = &type metadata for AudioFileResource.Configuration;
  v20 = swift_allocObject();
  *(_QWORD *)(v7 + 96) = v20;
  *(_BYTE *)(v20 + 16) = v11;
  *(_BYTE *)(v20 + 17) = v12;
  *(_BYTE *)(v20 + 18) = v13;
  *(_QWORD *)(v20 + 24) = v14;
  *(_BYTE *)(v20 + 32) = v15;
  *(_QWORD *)(v20 + 40) = v16;
  *(_BYTE *)(v20 + 48) = v17;
  *(_QWORD *)(v20 + 56) = v28;
  *(_QWORD *)(v20 + 64) = v18;
  *(_DWORD *)(v20 + 72) = v27;
  *(_BYTE *)(v20 + 76) = v26;
  *(_QWORD *)(v7 + 128) = 0x6E6F697461727564;
  *(_QWORD *)(v7 + 136) = 0xE800000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  REAudioFileAssetGetLengthInSeconds();
  v21 = static Duration.seconds(_:)();
  *(_QWORD *)(v7 + 168) = MEMORY[0x24BEE48B8];
  *(_QWORD *)(v7 + 144) = v21;
  *(_QWORD *)(v7 + 152) = v22;
  v23 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v30, 1, 1, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v31, *MEMORY[0x24BEE43C0], v33);
  type metadata accessor for AudioFileResource();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance AudioFileResource@<X0>(uint64_t a1@<X8>)
{
  return AudioFileResource.customMirror.getter(a1);
}

uint64_t specialized static AudioFileResource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  __int128 v19;
  char v20;
  unsigned __int8 v21;
  unsigned __int8 v22[8];
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  char v36;

  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
    return 1;
  AudioFileResource.CreateOptions.init(from:)((uint64_t)&v28);
  v2 = v28;
  v3 = v30;
  v4 = v31;
  v5 = v32;
  v6 = v33;
  v7 = v34;
  v8 = v35;
  v20 = v36;
  v21 = v29;
  AudioFileResource.CreateOptions.init(from:)((uint64_t)&v28);
  v9 = v28;
  v10 = v29;
  v11 = v30;
  v12 = v31;
  v13 = v32;
  v14 = v34;
  v15 = v35;
  v16 = v36;
  v19 = v33;
  v28 = v2;
  v29 = v21;
  v30 = v3;
  v31 = v4;
  v32 = v5;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v36 = v20;
  v22[0] = v9;
  v22[1] = v10;
  v22[2] = v11;
  v22[3] = v12;
  v23 = v13;
  v24 = v19;
  v25 = v14;
  v26 = v15;
  v27 = v16;
  v17 = specialized static AudioFileResource.CreateOptions.== infix(_:_:)(&v28, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
    return REAudioFileAssetIsEqual();
  else
    return 0;
}

uint64_t type metadata accessor for AudioFileResource()
{
  return objc_opt_self();
}

uint64_t sub_21BC877D4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AudioFileResource and conformance AudioResource()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource;
  if (!lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource)
  {
    v1 = type metadata accessor for AudioFileResource();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource and conformance AudioResource);
  }
  return result;
}

uint64_t sub_21BC87840@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetStreaming();
  *a1 = result ^ 1;
  return result;
}

uint64_t sub_21BC87874@<X0>(BOOL *a1@<X8>)
{
  uint64_t result;

  result = REAudioFileAssetGetLoopCount();
  *a1 = (_DWORD)result == -1;
  return result;
}

uint64_t sub_21BC878A8()
{
  return REAudioFileAssetSetLoopCount();
}

uint64_t method lookup function for AudioFileResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of AudioFileResource.loadingStrategy.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AudioFileResource.shouldLoop.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

unint64_t lazy protocol witness table accessor for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError;
  if (!lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AVAudioFormat.ValidationError, &type metadata for AVAudioFormat.ValidationError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AVAudioFormat.ValidationError and conformance AVAudioFormat.ValidationError);
  }
  return result;
}

uint64_t RKChangeSceneActionBasicTechnique.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionBasicTechnique()
{
  return type metadata accessor for RKChangeSceneActionBasicTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionBasicTechnique()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RKChangeSceneActionBasicTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionBasicTechnique)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionBasicTechnique()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for RKChangeSceneActionTechnique.switchScenes() in conformance RKChangeSceneActionBasicTechnique()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

BOOL static LowLevelMesh.VertexSemantic.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void LowLevelMesh.VertexSemantic.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int LowLevelMesh.VertexSemantic.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

_BYTE *LowLevelMesh.Attribute.init(semantic:format:layoutIndex:offset:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a4;
  *(_QWORD *)(a5 + 24) = a3;
  return result;
}

void LowLevelMesh.Attribute.semantic.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *LowLevelMesh.Attribute.semantic.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.semantic.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.format.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelMesh.Attribute.format.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.format.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.offset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LowLevelMesh.Attribute.offset.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.offset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Attribute.layoutIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t LowLevelMesh.Attribute.layoutIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*LowLevelMesh.Attribute.layoutIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::LowLevelMesh::Layout __swiftcall LowLevelMesh.Layout.init(bufferIndex:bufferOffset:bufferStride:)(Swift::Int bufferIndex, Swift::Int bufferOffset, Swift::Int bufferStride)
{
  Swift::Int *v3;
  RealityFoundation::LowLevelMesh::Layout result;

  *v3 = bufferIndex;
  v3[1] = bufferOffset;
  v3[2] = bufferStride;
  result.bufferStride = bufferStride;
  result.bufferOffset = bufferOffset;
  result.bufferIndex = bufferIndex;
  return result;
}

uint64_t LowLevelMesh.Layout.bufferIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LowLevelMesh.Layout.bufferIndex.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Layout.bufferOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelMesh.Layout.bufferOffset.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferOffset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Layout.bufferStride.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LowLevelMesh.Layout.bufferStride.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*LowLevelMesh.Layout.bufferStride.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.init(vertexCapacity:vertexAttributes:vertexLayouts:indexCapacity:indexType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v12;
  _QWORD *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64x2_t v25;
  int64x2_t *v26;
  unint64_t v27;
  int64x2_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v34;
  _QWORD *v35;

  v6 = a5;
  v7 = a4;
  v9 = a2;
  v10 = a1;
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v15 = v34;
    v16 = (uint64_t *)(a3 + 32);
    v17 = v34[2];
    do
    {
      v19 = *v16;
      v16 += 3;
      v18 = v19;
      v35 = v15;
      v20 = v15[3];
      v21 = v17 + 1;
      if (v17 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v17 + 1, 1);
        v15 = v35;
      }
      v15[2] = v21;
      v15[v17++ + 4] = v18;
      --v12;
    }
    while (v12);
    v6 = a5;
    v7 = a4;
    v10 = a1;
    v9 = a2;
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v21)
    {
      v22 = 0;
      goto LABEL_19;
    }
  }
  v22 = v15[4];
  v23 = v21 - 1;
  if (v21 != 1)
  {
    if (v23 >= 4)
    {
      v24 = v23 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v25 = vdupq_n_s64(v22);
      v26 = (int64x2_t *)(v15 + 7);
      v27 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v28 = v25;
      do
      {
        v25 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v25, v26[-1]), (int8x16_t)v25, (int8x16_t)v26[-1]);
        v28 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v28, *v26), (int8x16_t)v28, *(int8x16_t *)v26);
        v26 += 2;
        v27 -= 4;
      }
      while (v27);
      v29 = vbslq_s8((int8x16_t)vcgtq_s64(v25, v28), (int8x16_t)v25, (int8x16_t)v28);
      v30 = vextq_s8(v29, v29, 8uLL).u64[0];
      v22 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v29.i64[0], v30), *(int8x8_t *)v29.i8, (int8x8_t)v30);
      if (v23 == (v23 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_19;
    }
    else
    {
      v24 = 1;
    }
    do
    {
      if (v22 <= v15[v24 + 4])
        v22 = v15[v24 + 4];
      ++v24;
    }
    while (v21 != v24);
  }
LABEL_19:
  result = swift_bridgeObjectRelease();
  if (__OFADD__(v22, 1))
  {
    __break(1u);
  }
  else
  {
    *a6 = v22 + 1;
    a6[1] = v10;
    a6[2] = v9;
    a6[3] = a3;
    a6[4] = v7;
    a6[5] = v6;
  }
  return result;
}

uint64_t static LowLevelMesh.Descriptor.maxVertexBufferCount.getter()
{
  return 4;
}

uint64_t LowLevelMesh.Descriptor.vertexBufferCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LowLevelMesh.Descriptor.vertexCapacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelMesh.Descriptor.vertexCapacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.vertexCapacity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.vertexAttributes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LowLevelMesh.Descriptor.vertexAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.vertexAttributes.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.vertexLayouts.getter()
{
  return swift_bridgeObjectRetain();
}

void LowLevelMesh.Descriptor.vertexLayouts.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  LowLevelMesh.Descriptor.vertexLayouts.didset();
}

void LowLevelMesh.Descriptor.vertexLayouts.didset()
{
  int64_t *v0;
  int64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  unint64_t v14;
  int64x2_t v15;
  int8x16_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t *v19;
  int64_t v20;
  int64_t v21;
  _QWORD *v22;

  v1 = v0[3];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v11 = 0;
LABEL_20:
    *v0 = v11;
    return;
  }
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  v3 = v22[2];
  v4 = 32;
  do
  {
    v5 = *(_QWORD *)(v1 + v4);
    v6 = v22[3];
    if (v3 >= v6 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v3 + 1, 1);
    v22[2] = v3 + 1;
    v22[v3 + 4] = v5;
    v4 += 24;
    ++v3;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  v7 = v22[2];
  if (!v7)
  {
    v8 = 0;
    goto LABEL_19;
  }
  v8 = v22[4];
  v9 = v7 - 1;
  if (v7 == 1)
    goto LABEL_19;
  if (v7 >= 5)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v12 = vdupq_n_s64(v8);
    v13 = (int64x2_t *)(v22 + 7);
    v14 = v9 & 0xFFFFFFFFFFFFFFFCLL;
    v15 = v12;
    do
    {
      v12 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v12, v13[-1]), (int8x16_t)v12, (int8x16_t)v13[-1]);
      v15 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, *v13), (int8x16_t)v15, *(int8x16_t *)v13);
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    v16 = vbslq_s8((int8x16_t)vcgtq_s64(v12, v15), (int8x16_t)v12, (int8x16_t)v15);
    v17 = vextq_s8(v16, v16, 8uLL).u64[0];
    v8 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
    if (v9 == (v9 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
  else
  {
    v10 = 1;
  }
  v18 = v7 - v10;
  v19 = &v22[v10 + 4];
  do
  {
    v21 = *v19++;
    v20 = v21;
    if (v8 <= v21)
      v8 = v20;
    --v18;
  }
  while (v18);
LABEL_19:
  swift_release();
  v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
    goto LABEL_20;
  __break(1u);
}

void (*LowLevelMesh.Descriptor.vertexLayouts.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return LowLevelMesh.Descriptor.vertexLayouts.modify;
}

void LowLevelMesh.Descriptor.vertexLayouts.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    LowLevelMesh.Descriptor.vertexLayouts.didset();
}

uint64_t LowLevelMesh.Descriptor.indexCapacity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t LowLevelMesh.Descriptor.indexCapacity.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.indexCapacity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Descriptor.indexType.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t LowLevelMesh.Descriptor.indexType.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*LowLevelMesh.Descriptor.indexType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t LowLevelMesh.Part.init(indexOffset:indexCount:topology:materialIndex:bounds:)@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, __n128 *a5@<X8>, __n128 a6@<Q0>, __n128 a7@<Q1>)
{
  a5->n128_u64[0] = result;
  a5->n128_u64[1] = a2;
  a5[1].n128_u64[0] = a3;
  a5[1].n128_u64[1] = a4;
  a5[2] = a6;
  a5[3] = a7;
  return result;
}

uint64_t LowLevelMesh.Part.indexOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LowLevelMesh.Part.indexOffset.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.indexOffset.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.indexCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelMesh.Part.indexCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.indexCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.topology.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LowLevelMesh.Part.topology.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.topology.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.Part.materialIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t LowLevelMesh.Part.materialIndex.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*LowLevelMesh.Part.materialIndex.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 LowLevelMesh.Part.bounds.getter()
{
  __n128 *v0;

  return v0[2];
}

void LowLevelMesh.Part.bounds.setter(__n128 a1, __n128 a2)
{
  __n128 *v2;

  v2[2] = a1;
  v2[3] = a2;
}

uint64_t (*LowLevelMesh.Part.bounds.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelMesh.descriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 56);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t LowLevelMesh.indexCapacity.getter()
{
  return DRMeshGetIndexCapacity();
}

uint64_t LowLevelMesh.vertexCapacity.getter()
{
  return DRMeshGetVertexCapacity();
}

void (*LowLevelMesh.parts.modify(_QWORD *a1))(id *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  v3 = v2;
  return destroy for DirectionalLightComponent;
}

id LowLevelMesh.parts.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *a1 = v2;
  return v2;
}

uint64_t LowLevelMesh.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  LowLevelMesh.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelMesh.init(descriptor:)(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int8x16_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t *v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  void *v39;
  void *Mesh;
  id v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t result;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _QWORD v57[3];
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;

  v2 = v1;
  v61 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v4 = a1[3];
  v53 = *a1;
  v54 = a1[2];
  v5 = a1[4];
  v6 = a1[5];
  v7 = (void *)DRMeshDescriptorCreate();
  v51 = v5;
  DRMeshDescriptorSetIndexCapacity();
  v50 = v6;
  DRMeshDescriptorSetIndexType();
  v52 = v3;
  DRMeshDescriptorSetVertexCapacity();
  v8 = *(_QWORD *)(v4 + 16);
  v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v8)
  {
    v49 = v2;
    v57[0] = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = (_QWORD *)v57[0];
    v10 = *(_QWORD *)(v57[0] + 16);
    v11 = 32;
    v12 = v8;
    do
    {
      v13 = *(_QWORD *)(v4 + v11);
      v57[0] = v9;
      v14 = v9[3];
      if (v10 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v10 + 1, 1);
        v9 = (_QWORD *)v57[0];
      }
      v9[2] = v10 + 1;
      v9[v10 + 4] = v13;
      v11 += 24;
      ++v10;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    v2 = v49;
  }
  v15 = v9[2];
  if (!v15)
  {
    v16 = 0;
    goto LABEL_19;
  }
  v16 = v9[4];
  v17 = v15 - 1;
  if (v15 == 1)
    goto LABEL_19;
  if (v15 >= 5)
  {
    v18 = v17 & 0xFFFFFFFFFFFFFFFCLL | 1;
    v19 = vdupq_n_s64(v16);
    v20 = (int64x2_t *)(v9 + 7);
    v21 = v17 & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v19;
    do
    {
      v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v19, v20[-1]), (int8x16_t)v19, (int8x16_t)v20[-1]);
      v22 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v22, *v20), (int8x16_t)v22, *(int8x16_t *)v20);
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    v23 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v22), (int8x16_t)v19, (int8x16_t)v22);
    v24 = vextq_s8(v23, v23, 8uLL).u64[0];
    v16 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v23.i64[0], v24), *(int8x8_t *)v23.i8, (int8x8_t)v24);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
  else
  {
    v18 = 1;
  }
  v25 = v15 - v18;
  v26 = &v9[v18 + 4];
  do
  {
    v28 = *v26++;
    v27 = v28;
    if (v16 <= v28)
      v16 = v27;
    --v25;
  }
  while (v25);
LABEL_19:
  swift_bridgeObjectRelease();
  if (__OFADD__(v16, 1))
    __break(1u);
  DRMeshDescriptorSetVertexBufferCount();
  v29 = v54;
  DRMeshDescriptorSetVertexAttributeCount();
  DRMeshDescriptorSetVertexLayoutCount();
  v30 = *(_QWORD *)(v54 + 16);
  if (v30)
  {
    swift_bridgeObjectRetain();
    v31 = 0;
    v32 = (_QWORD *)(v54 + 56);
    while ((*v32 & 0x8000000000000000) == 0 && (*(v32 - 1) & 0x8000000000000000) == 0)
    {
      v33 = v31 + 1;
      v32 += 4;
      DRMeshDescriptorSetVertexAttributeFormat();
      v31 = v33;
      if (v30 == v33)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    goto LABEL_44;
  }
LABEL_26:
  v34 = *(_QWORD *)(v4 + 16);
  if (v34)
  {
    swift_bridgeObjectRetain();
    v35 = 0;
    v36 = (_QWORD *)(v4 + 48);
    while ((*(v36 - 2) & 0x8000000000000000) == 0
         && (*(v36 - 1) & 0x8000000000000000) == 0
         && (*v36 & 0x8000000000000000) == 0)
    {
      v37 = v35 + 1;
      v36 += 3;
      DRMeshDescriptorSetVertexLayout();
      v35 = v37;
      if (v34 == v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
    }
    goto LABEL_44;
  }
LABEL_33:
  v60 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v38 = (id)REServiceLocatorGetDirectResourceService();
  if (v38)
  {
    v39 = v38;
    Mesh = (void *)DRContextCreateMesh();

  }
  else
  {
    v44 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    outlined init with copy of __RenderService?(v44, (uint64_t)&v55);
    if (!v56)
    {
      __break(1u);
      goto LABEL_43;
    }
    outlined init with take of BindableDataInternal(&v55, (uint64_t)v57);
    v45 = v58;
    v46 = v59;
    __swift_project_boxed_opaque_existential_1(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    v47 = (id)RERenderManagerGetRenderDevice();
    Mesh = (void *)DRMeshCreateUnmanaged();
    swift_unknownObjectRelease();
    v29 = v54;
    if (v60)
    {
      v41 = v60;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *v42 = v41;
      v43 = v41;
      swift_willThrow();

      type metadata accessor for LowLevelMesh();
      swift_deallocPartialClassInstance();
      return (uint64_t)v2;
    }
  }
  v2[3] = v53;
  v2[4] = v52;
  v2[5] = v29;
  v2[6] = v4;
  v2[7] = v51;
  v2[8] = v50;
  if (Mesh)
  {

    v2[2] = Mesh;
    return (uint64_t)v2;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id LowLevelMesh.read(bufferIndex:using:)()
{
  return (id)DRMeshReadVerticesUsing();
}

id LowLevelMesh.replace(bufferIndex:using:)()
{
  return (id)DRMeshReplaceVerticesUsing();
}

id LowLevelMesh.readIndices(using:)()
{
  return (id)DRMeshReadIndicesUsing();
}

id LowLevelMesh.replaceIndices(using:)()
{
  return (id)DRMeshReplaceIndicesUsing();
}

uint64_t LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v13[6];

  v6 = *(void **)(v3 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v8 + 24) = v7;
  v13[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v13[5] = v8;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ();
  v13[3] = &block_descriptor_29;
  v9 = _Block_copy(v13);
  v10 = v6;
  swift_retain();
  swift_release();
  DRMeshReadVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v13[6];

  v6 = *(void **)(v3 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v8 + 24) = v7;
  v13[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v13[5] = v8;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v13[3] = &block_descriptor_12_2;
  v9 = _Block_copy(v13);
  v10 = v6;
  swift_retain();
  swift_release();
  DRMeshUpdateVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.replaceUnsafeMutableBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v13[6];

  v6 = *(void **)(v3 + 16);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v8 + 24) = v7;
  v13[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v13[5] = v8;
  v13[0] = MEMORY[0x24BDAC760];
  v13[1] = 1107296256;
  v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v13[3] = &block_descriptor_22_0;
  v9 = _Block_copy(v13);
  v10 = v6;
  swift_retain();
  swift_release();
  DRMeshReplaceVertices();

  _Block_release(v9);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.withUnsafeIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_32;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRMeshReadIndices();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.withUnsafeMutableIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_42_0;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRMeshUpdateIndices();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.replaceUnsafeMutableIndices(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t result;
  _QWORD v11[6];

  v5 = *(void **)(v2 + 16);
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:);
  *(_QWORD *)(v7 + 24) = v6;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned UInt) -> ();
  v11[3] = &block_descriptor_52;
  v8 = _Block_copy(v11);
  v9 = v5;
  swift_retain();
  swift_release();
  DRMeshReplaceIndices();

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t LowLevelMesh.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t LowLevelMesh.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t LowLevelMesh.PartsCollection.startIndex.getter()
{
  return 0;
}

uint64_t LowLevelMesh.PartsCollection.count.getter()
{
  return DRMeshGetPartCount();
}

Swift::Int __swiftcall LowLevelMesh.PartsCollection.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

__n128 LowLevelMesh.PartsCollection.subscript.getter@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;

  DRMeshGetPartAt();
  result = (__n128)xmmword_21BE52460;
  *a1 = 0uLL;
  a1[1] = xmmword_21BE5F820;
  a1[2] = xmmword_21BE52460;
  a1[3] = xmmword_21BE52470;
  return result;
}

__n128 key path getter for LowLevelMesh.PartsCollection.subscript(_:) : LowLevelMesh.PartsCollection@<Q0>(_OWORD *a1@<X8>)
{
  __n128 result;

  DRMeshGetPartAt();
  result = (__n128)xmmword_21BE52460;
  *a1 = 0uLL;
  a1[1] = xmmword_21BE5F820;
  a1[2] = xmmword_21BE52460;
  a1[3] = xmmword_21BE52470;
  return result;
}

uint64_t LowLevelMesh.PartsCollection.subscript.setter(_QWORD *a1)
{
  uint64_t result;

  if ((*a1 & 0x8000000000000000) == 0 && (a1[1] & 0x8000000000000000) == 0 && (a1[3] & 0x8000000000000000) == 0)
    return DRMeshSetPartAt();
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*LowLevelMesh.PartsCollection.subscript.modify(_QWORD *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v5 = malloc(0x90uLL);
  *a1 = v5;
  v5[9] = 0;
  v5[8] = 0;
  v5[16] = a2;
  v5[17] = v2;
  *((_OWORD *)v5 + 5) = xmmword_21BE5F820;
  *((_OWORD *)v5 + 6) = xmmword_21BE52460;
  *((_OWORD *)v5 + 7) = xmmword_21BE52470;
  DRMeshGetPartAt();
  v6 = *((_OWORD *)v5 + 6);
  v7 = *((_OWORD *)v5 + 7);
  v8 = *((_OWORD *)v5 + 5);
  *(_OWORD *)v5 = *((_OWORD *)v5 + 4);
  *((_OWORD *)v5 + 1) = v8;
  *((_OWORD *)v5 + 2) = v6;
  *((_OWORD *)v5 + 3) = v7;
  return LowLevelMesh.PartsCollection.subscript.modify;
}

void LowLevelMesh.PartsCollection.subscript.modify(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)a1;
  if ((**(_QWORD **)a1 & 0x8000000000000000) != 0
    || (*(_QWORD *)(*(_QWORD *)a1 + 8) & 0x8000000000000000) != 0
    || (*(_QWORD *)(*(_QWORD *)a1 + 24) & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    DRMeshSetPartAt();
    free(v1);
  }
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance LowLevelMesh.PartsCollection(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = v1;
  v5[3] = v2;
  return LowLevelMesh.PartsCollection.subscript.setter(v5);
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance LowLevelMesh.PartsCollection(_QWORD *a1, uint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = LowLevelMesh.PartsCollection.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void protocol witness for MutableCollection.subscript.setter in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  id v3;

  v3 = (id)a1[2];
  specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v2, *a2, a2[1], *a1, a1[1]);

}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t (*a1)(__int128 *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  result = DRMeshGetPartCount();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = DRMeshGetPartCount();
  if (a3 < 0 || result < a3)
    goto LABEL_17;
  v7 = a3 - a1;
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= a2)
      goto LABEL_12;
    return 0;
  }
  if (v7 <= 0 && v7 > a2)
    return 0;
LABEL_12:
  v9 = __OFADD__(a1, a2);
  v8 = a1 + a2;
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  result = DRMeshGetPartCount();
  if ((v8 & 0x8000000000000000) == 0 && result >= v8)
    return v8;
LABEL_19:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = DRMeshGetPartCount();
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance LowLevelMesh.PartsCollection(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = LowLevelMesh.PartsCollection.subscript.read(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*LowLevelMesh.PartsCollection.subscript.read(_QWORD *a1))(void **a1)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v2 = malloc(0x80uLL);
  v2[9] = 0;
  v2[8] = 0;
  *a1 = v2;
  *((_OWORD *)v2 + 5) = xmmword_21BE5F820;
  *((_OWORD *)v2 + 6) = xmmword_21BE52460;
  *((_OWORD *)v2 + 7) = xmmword_21BE52470;
  DRMeshGetPartAt();
  v3 = *((_OWORD *)v2 + 6);
  v4 = *((_OWORD *)v2 + 7);
  v5 = *((_OWORD *)v2 + 5);
  *(_OWORD *)v2 = *((_OWORD *)v2 + 4);
  *((_OWORD *)v2 + 1) = v5;
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = v4;
  return LowLevelMesh.PartsCollection.subscript.read;
}

void LowLevelMesh.PartsCollection.subscript.read(void **a1)
{
  free(*a1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  id *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  id v7;

  v5 = *a1;
  v4 = a1[1];
  v7 = *v2;
  result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= v4)
  {
    a2[1] = v4;
    a2[2] = v7;
    *a2 = v5;
    return (uint64_t)v7;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance LowLevelMesh.PartsCollection@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *a1 = 0;
    a1[1] = result;
  }
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance LowLevelMesh.PartsCollection()
{
  return DRMeshGetPartCount() == 0;
}

_QWORD *protocol witness for BidirectionalCollection.index(before:) in conformance LowLevelMesh.PartsCollection@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)DRMeshGetPartCount();
    if ((v3 & 0x8000000000000000) == 0 && v3 < (uint64_t)result)
    {
      *a2 = v3;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance LowLevelMesh.PartsCollection(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;

  v1 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    result = (uint64_t *)DRMeshGetPartCount();
    if ((v1 & 0x8000000000000000) == 0 && v1 < (uint64_t)result)
    {
      *v2 = v1;
      return result;
    }
  }
  __break(1u);
  return result;
}

_QWORD *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance LowLevelMesh.PartsCollection@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;

  v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    result = (_QWORD *)DRMeshGetPartCount();
    if ((v4 & 0x8000000000000000) == 0 && (uint64_t)result >= v4)
    {
      *a3 = v4;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance LowLevelMesh.PartsCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance LowLevelMesh.PartsCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = DRMeshGetPartCount();
  if (v2 < 0 || result < v2)
  {
    __break(1u);
  }
  else
  {
    result = DRMeshGetPartCount();
    if ((v3 & 0x8000000000000000) == 0 && result >= v3)
      return v3 - v2;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance LowLevelMesh.PartsCollection()
{
  return DRMeshGetPartCount();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance LowLevelMesh.PartsCollection()
{
  void **v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  v3 = v2;

  return v3;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance LowLevelMesh.PartsCollection(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t LowLevelMesh.PartsCollection.append(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[3];
  if (__OFADD__(DRMeshGetPartCount(), 1))
  {
    __break(1u);
    goto LABEL_8;
  }
  DRMeshSetPartCount();
  if (__OFSUB__(DRMeshGetPartCount(), 1))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v1 & 0x8000000000000000) == 0 && (v2 & 0x8000000000000000) == 0 && (v3 & 0x8000000000000000) == 0)
    return DRMeshSetPartAt();
LABEL_9:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t LowLevelMesh.PartsCollection.append<A>(contentsOf:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t PartCount;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v0 = type metadata accessor for EnumeratedSequence();
  MEMORY[0x24BDAC7A8](v0);
  v1 = type metadata accessor for EnumeratedSequence.Iterator();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v12 - v3;
  PartCount = DRMeshGetPartCount();
  v5 = dispatch thunk of Sequence.underestimatedCount.getter();
  if (!__OFADD__(DRMeshGetPartCount(), v5))
  {
    v12 = v2;
    DRMeshSetPartCount();
    Sequence.enumerated()();
    EnumeratedSequence.makeIterator()();
    v14 = v4;
    v15 = v1;
    EnumeratedSequence.Iterator.next()();
    if ((v20 & 1) != 0)
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v15);
    v6 = v16;
    v7 = v17;
    v8 = v18;
    v9 = v19;
    while (!__OFADD__(PartCount, v6))
    {
      v10 = PartCount + v6;
      if (v10 >= DRMeshGetPartCount())
      {
        if (__OFADD__(DRMeshGetPartCount(), 1))
          goto LABEL_17;
        DRMeshSetPartCount();
        if (__OFSUB__(DRMeshGetPartCount(), 1))
          goto LABEL_18;
        if (v7 < 0 || v8 < 0)
          goto LABEL_20;
      }
      else if (v7 < 0 || v8 < 0)
      {
        goto LABEL_20;
      }
      if (v9 < 0)
        goto LABEL_20;
      DRMeshSetPartAt();
      EnumeratedSequence.Iterator.next()();
      v6 = v16;
      v7 = v17;
      v8 = v18;
      v9 = v19;
      if (v20 == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v15);
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  __break(1u);
LABEL_20:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall LowLevelMesh.PartsCollection.removeAll()()
{
  DRMeshSetPartCount();
}

uint64_t LowLevelMesh.PartsCollection.replaceAll<A>(_:)()
{
  DRMeshSetPartCount();
  return LowLevelMesh.PartsCollection.append<A>(contentsOf:)();
}

uint64_t MeshResource.lowLevelMesh.getter()
{
  uint64_t v0;
  uint64_t result;
  id v2;
  void *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  uint64_t VertexBufferCount;
  uint64_t VertexCapacity;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t IndexCapacity;
  uint64_t IndexType;

  result = *(_QWORD *)(v0 + 16);
  if (result)
  {
    v2 = (id)REMeshAssetGetDirectMesh();
    if (!v2)
      return 0;
    v3 = v2;
    type metadata accessor for LowLevelMesh();
    v4 = (_QWORD *)swift_allocObject();
    v4[2] = v3;
    v5 = v3;
    v6 = (void *)DRMeshCopyDescriptor();
    VertexBufferCount = DRMeshDescriptorGetVertexBufferCount();
    VertexCapacity = DRMeshDescriptorGetVertexCapacity();
    result = DRMeshDescriptorGetVertexAttributeCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v9 = result;
      v10 = v6;
      v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC9AttributeVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de63E16vertexAttributes33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C9I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(0, v9);

      result = DRMeshDescriptorGetVertexLayoutCount();
      if ((result & 0x8000000000000000) == 0)
      {
        v12 = result;
        v13 = v10;
        v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC6LayoutVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de60E13vertexLayouts33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C6I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(0, v12);

        IndexCapacity = DRMeshDescriptorGetIndexCapacity();
        IndexType = DRMeshDescriptorGetIndexType();

        v4[3] = VertexBufferCount;
        v4[4] = VertexCapacity;
        v4[5] = v11;
        v4[6] = v14;
        v4[7] = IndexCapacity;
        v4[8] = IndexType;
        return (uint64_t)v4;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LowLevelMesh()
{
  return objc_opt_self();
}

uint64_t sub_21BC8A3A4()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A3B8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t sub_21BC8A3E0()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A3F0()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A400()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A410()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A420()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A430()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A440()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A450()
{
  return swift_deallocObject();
}

uint64_t sub_21BC8A460()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LowLevelMesh.withUnsafeBytes(bufferIndex:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(a1, a1 + a2);
}

uint64_t sub_21BC8A494()
{
  return swift_deallocObject();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC9AttributeVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de63E16vertexAttributes33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C9I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v5 = a1;
  v14 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
LABEL_20:
    __break(1u);
  v3 = v14;
  if (a2 <= v5)
    v6 = v5;
  else
    v6 = a2;
  v12 = v6;
  v7 = v5;
  v13 = v5;
  while (1)
  {
    if (a2 == v7)
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (v5 < 0)
      break;
    DRMeshDescriptorGetVertexAttributeFormat();
    v9 = *(_QWORD *)(v14 + 16);
    v8 = *(_QWORD *)(v14 + 24);
    if (v9 >= v8 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    *(_QWORD *)(v14 + 16) = v9 + 1;
    v10 = v14 + 32 * v9;
    *(_BYTE *)(v10 + 32) = unk_21BE6CCE4;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = 0;
    v5 = v13;
    if (a2 < v13)
      goto LABEL_17;
    if (v12 == v7)
      goto LABEL_18;
    if (a2 == ++v7)
      return v3;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation12LowLevelMeshC6LayoutVs5NeverOTg5027_sSo18DRMeshDescriptor_ta17de60E13vertexLayouts33_C756CB0E2E227DD8D28F0A9CF825D987LLSayAC12fgh2C6I13VGvgAISiXEfU_So0mN2_taTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v2 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v13 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v2 < 0)
LABEL_20:
    __break(1u);
  v3 = v13;
  if (a2 <= a1)
    v6 = a1;
  else
    v6 = a2;
  v12 = v6;
  v7 = a1;
  while (1)
  {
    if (a2 == v7)
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
    if (a1 < 0)
      break;
    DRMeshDescriptorGetVertexLayout();
    v9 = *(_QWORD *)(v13 + 16);
    v8 = *(_QWORD *)(v13 + 24);
    if (v9 >= v8 >> 1)
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
    *(_QWORD *)(v13 + 16) = v9 + 1;
    v10 = (_QWORD *)(v13 + 24 * v9);
    v10[4] = 0;
    v10[5] = 0;
    v10[6] = 0;
    if (a2 < a1)
      goto LABEL_17;
    if (v12 == v7)
      goto LABEL_18;
    if (a2 == ++v7)
      return v3;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.VertexSemantic, &type metadata for LowLevelMesh.VertexSemantic);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.VertexSemantic and conformance LowLevelMesh.VertexSemantic);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.PartsCollection, &type metadata for LowLevelMesh.PartsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.PartsCollection, &type metadata for LowLevelMesh.PartsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.PartsCollection, &type metadata for LowLevelMesh.PartsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.PartsCollection, &type metadata for LowLevelMesh.PartsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection;
  if (!lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for LowLevelMesh.PartsCollection, &type metadata for LowLevelMesh.PartsCollection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection, MEMORY[0x24BEE4220]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD0]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection, MEMORY[0x24BEE4230]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BD8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<LowLevelMesh.PartsCollection>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>, MEMORY[0x24BEE1BA8]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x24BEE17A8];
    v7[1] = v6;
    result = MEMORY[0x220772E3C](a2, v5, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>, (uint64_t (*)(void))lazy protocol witness table accessor for type LowLevelMesh.PartsCollection and conformance LowLevelMesh.PartsCollection, MEMORY[0x24BEE4218]);
}

uint64_t lazy protocol witness table accessor for type Slice<LowLevelMesh.PartsCollection> and conformance <> Slice<A>(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<LowLevelMesh.PartsCollection>);
    v8 = a2();
    result = MEMORY[0x220772E3C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in LowLevelMesh.PartsCollection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<LowLevelMesh.PartsCollection> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<LowLevelMesh.PartsCollection>, MEMORY[0x24BEE2C18]);
}

uint64_t sub_21BC8AC74@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 24);
  return swift_bridgeObjectRetain();
}

void sub_21BC8AC80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 24) = v3;
  LowLevelMesh.Descriptor.vertexLayouts.didset();
}

id sub_21BC8ACC4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;

  v2 = *(void **)(*(_QWORD *)a1 + 16);
  *a2 = v2;
  return v2;
}

double sub_21BC8ACD8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = key path getter for LowLevelMesh.PartsCollection.subscript(_:) : LowLevelMesh.PartsCollection(a1).n128_u64[0];
  return result;
}

uint64_t sub_21BC8AD1C(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[4];

  v1 = a1[2];
  v2 = a1[3];
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  v5[2] = v1;
  v5[3] = v2;
  return LowLevelMesh.PartsCollection.subscript.setter(v5);
}

uint64_t sub_21BC8AD5C()
{
  return 0;
}

uint64_t method lookup function for LowLevelMesh()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LowLevelMesh.indexCapacity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of LowLevelMesh.vertexCapacity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of LowLevelMesh.parts.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of LowLevelMesh.__allocating_init(descriptor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of LowLevelMesh.read(bufferIndex:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of LowLevelMesh.replace(bufferIndex:using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of LowLevelMesh.readIndices(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceIndices(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeBytes(bufferIndex:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeMutableBytes(bufferIndex:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceUnsafeMutableBytes(bufferIndex:_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeIndices(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of LowLevelMesh.withUnsafeMutableIndices(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of LowLevelMesh.replaceUnsafeMutableIndices(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t storeEnumTagSinglePayload for LowLevelMesh.VertexSemantic(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_21BC8AE90 + 4 * byte_21BE6C8D5[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_21BC8AEC4 + 4 * byte_21BE6C8D0[v4]))();
}

uint64_t sub_21BC8AEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC8AECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC8AED4);
  return result;
}

uint64_t sub_21BC8AEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC8AEE8);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_21BC8AEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC8AEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LowLevelMesh.VertexSemantic()
{
  return &type metadata for LowLevelMesh.VertexSemantic;
}

uint64_t getEnumTagSinglePayload for LowLevelMesh.Attribute(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && a1[32])
    return (*(_DWORD *)a1 + 243);
  v3 = *a1;
  v4 = v3 >= 0xE;
  v5 = v3 - 14;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LowLevelMesh.Attribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 243;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 13;
  }
  return result;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Attribute()
{
  return &type metadata for LowLevelMesh.Attribute;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Layout()
{
  return &type metadata for LowLevelMesh.Layout;
}

uint64_t destroy for LowLevelMesh.Descriptor()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LowLevelMesh.Descriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LowLevelMesh.Descriptor(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

_OWORD *assignWithTake for LowLevelMesh.Descriptor(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Descriptor()
{
  return &type metadata for LowLevelMesh.Descriptor;
}

ValueMetadata *type metadata accessor for LowLevelMesh.Part()
{
  return &type metadata for LowLevelMesh.Part;
}

ValueMetadata *type metadata accessor for LowLevelMesh.PartsCollection()
{
  return &type metadata for LowLevelMesh.PartsCollection;
}

void one-time initialization function for basicBlinkAnimationData()
{
  static EmphasizeAnimations.basicBlinkAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for basicBlinkAnimationData;
}

void one-time initialization function for playfulBlinkAnimationData()
{
  static EmphasizeAnimations.playfulBlinkAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for playfulBlinkAnimationData;
}

void one-time initialization function for wildBlinkAnimationData()
{
  static EmphasizeAnimations.wildBlinkAnimationData = (uint64_t)&outlined read-only object #0 of one-time initialization function for wildBlinkAnimationData;
}

_QWORD *specialized static EmphasizeAnimations.createEmphasizeBlinkAnimation(style:)(_BYTE *a1)
{
  uint64_t v1;
  _QWORD *v3;

  if (!*a1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 133, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for basicBlinkAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  if (*a1 == 1)
  {
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 168, 0, MEMORY[0x24BEE4AF8]);
    if (one-time initialization token for playfulBlinkAnimationData == -1)
      goto LABEL_8;
    goto LABEL_9;
  }
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 226, 0, MEMORY[0x24BEE4AF8]);
  if (one-time initialization token for wildBlinkAnimationData != -1)
LABEL_9:
    swift_once();
LABEL_8:
  v1 = swift_bridgeObjectRetain();
  specialized static EmphasizeAnimations.makeTransforms(_:_:)(v1, &v3);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t VirtualEnvironmentProbeComponent.Probe.environment.getter()
{
  return swift_retain();
}

uint64_t VirtualEnvironmentProbeComponent.Probe.environment.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*VirtualEnvironmentProbeComponent.Probe.environment.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float VirtualEnvironmentProbeComponent.Probe.intensityExponent.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void VirtualEnvironmentProbeComponent.Probe.intensityExponent.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*VirtualEnvironmentProbeComponent.Probe.intensityExponent.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t VirtualEnvironmentProbeComponent.Probe.init(environment:intensityExponent:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(_QWORD *)a2 = result;
  *(float *)(a2 + 8) = a3;
  return result;
}

uint64_t VirtualEnvironmentProbeComponent.source.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of VirtualEnvironmentProbeComponent.Source(v2, v3, v4);
}

__n128 VirtualEnvironmentProbeComponent.source.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  outlined consume of VirtualEnvironmentProbeComponent.Source(*v1, v1[1], v1[2]);
  result = v5;
  *(__n128 *)v1 = v5;
  v1[2] = v2;
  v1[3] = v3;
  return result;
}

uint64_t (*VirtualEnvironmentProbeComponent.source.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 VirtualEnvironmentProbeComponent.init(source:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t static VirtualEnvironmentProbeComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t Resource;
  uint64_t SkyboxTexture;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  result = REVirtualEnvironmentProbeComponentGetResourceCount();
  if (result != 1)
  {
    v3 = result;
    if (!result)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_OWORD *)(a1 + 16) = xmmword_21BE6CD00;
      return result;
    }
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v8 = 0;
      v9 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v10 = (char *)MEMORY[0x24BEE4AF8];
      do
      {
        Resource = REVirtualEnvironmentProbeComponentGetResource();
        SkyboxTexture = REIBLAssetGetSkyboxTexture();
        type metadata accessor for EnvironmentResource();
        v13 = swift_allocObject();
        *(_QWORD *)(v13 + 24) = 0;
        *(_QWORD *)(v13 + 16) = Resource;
        swift_beginAccess();
        *(_QWORD *)(v13 + 24) = SkyboxTexture;
        RERetain();
        REAssetSetSwiftObject();
        if (SkyboxTexture)
        {
          RERetain();
          REAssetSetSwiftObject();
        }
        REVirtualEnvironmentProbeComponentGetIntensityExponent();
        v15 = v14;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        v17 = v9[2];
        v16 = v9[3];
        if (v17 >= v16 >> 1)
          v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
        v9[2] = v17 + 1;
        v18 = &v9[2 * v17];
        v18[4] = v13;
        *((_DWORD *)v18 + 10) = v15;
        REVirtualEnvironmentProbeComponentGetRelativeWeight();
        v20 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
        v22 = *((_QWORD *)v10 + 2);
        v21 = *((_QWORD *)v10 + 3);
        if (v22 >= v21 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v10);
        ++v8;
        *((_QWORD *)v10 + 2) = v22 + 1;
        *(_DWORD *)&v10[4 * v22 + 32] = v20;
        result = swift_release();
      }
      while (v3 != v8);
      v23 = *((_QWORD *)v10 + 2);
      if (v23)
      {
        if (v23 != 1)
        {
          v24 = *((float *)v10 + 9);
          v25 = *((float *)v10 + 8) + v24;
          v26 = v9[2];
          if (v25 <= 0.0)
          {
            if (v26)
            {
              if (v26 != 1)
              {
                v32 = *((unsigned int *)v9 + 10);
                v33 = v9[4];
                v34 = v9[6];
                v35 = *((unsigned int *)v9 + 14);
                swift_retain();
                swift_retain();
                swift_bridgeObjectRelease();
                result = swift_bridgeObjectRelease();
                *(_QWORD *)a1 = v33;
                *(_QWORD *)(a1 + 8) = v32;
                *(_QWORD *)(a1 + 16) = v34 | 0x4000000000000000;
                *(_QWORD *)(a1 + 24) = v35;
                return result;
              }
              goto LABEL_35;
            }
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            return result;
          }
          if (v26)
          {
            if (v26 != 1)
            {
              v27 = *((unsigned int *)v9 + 10);
              v28 = v9[4];
              v29 = v9[6];
              v30 = *((unsigned int *)v9 + 14);
              *(float *)&v31 = v24 / v25;
              swift_retain();
              swift_retain();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              *(_QWORD *)a1 = v28;
              *(_QWORD *)(a1 + 8) = v27;
              *(_QWORD *)(a1 + 16) = v29 | 0x4000000000000000;
              *(_QWORD *)(a1 + 24) = v30 | ((unint64_t)v31 << 32);
              return result;
            }
            goto LABEL_33;
          }
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
          goto LABEL_34;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = REVirtualEnvironmentProbeComponentGetResource();
  v5 = REIBLAssetGetSkyboxTexture();
  type metadata accessor for EnvironmentResource();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = v4;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = v5;
  RERetain();
  REAssetSetSwiftObject();
  if (v5)
  {
    RERetain();
    REAssetSetSwiftObject();
  }
  result = REVirtualEnvironmentProbeComponentGetIntensityExponent();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t VirtualEnvironmentProbeComponent.__toCore(_:)()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  REVirtualEnvironmentProbeComponentClearResources();
  if (v3 >> 62)
  {
    if (v3 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      REVirtualEnvironmentProbeComponentAddResource();
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      REVirtualEnvironmentProbeComponentAddResource();
      REVirtualEnvironmentProbeComponentSetIntensityExponent();
      REVirtualEnvironmentProbeComponentSetRelativeWeight();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_retain();
    REVirtualEnvironmentProbeComponentAddResource();
    REVirtualEnvironmentProbeComponentSetIntensityExponent();
    REVirtualEnvironmentProbeComponentSetRelativeWeight();
    outlined consume of VirtualEnvironmentProbeComponent.Source(v2, v1, v3);
  }
  return RENetworkMarkComponentDirty();
}

void static VirtualEnvironmentProbeComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5002;
}

void protocol witness for static Component.__coreComponentType.getter in conformance VirtualEnvironmentProbeComponent(_DWORD *a1@<X8>)
{
  *a1 = 5002;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent()
{
  return &type metadata for VirtualEnvironmentProbeComponent;
}

uint64_t destroy for VirtualEnvironmentProbeComponent.Source(uint64_t a1)
{
  return outlined consume of VirtualEnvironmentProbeComponent.Source(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *initializeWithCopy for VirtualEnvironmentProbeComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of VirtualEnvironmentProbeComponent.Source(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for VirtualEnvironmentProbeComponent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  outlined copy of VirtualEnvironmentProbeComponent.Source(*a2, v4, v5);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of VirtualEnvironmentProbeComponent.Source(v7, v8, v9);
  return a1;
}

uint64_t *assignWithTake for VirtualEnvironmentProbeComponent(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v6;
  outlined consume of VirtualEnvironmentProbeComponent.Source(v3, v5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VirtualEnvironmentProbeComponent(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7 | (*(_QWORD *)(a1 + 8) >> 25) & 0xFFFFFF80;
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for VirtualEnvironmentProbeComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (-a2 | ((unint64_t)-a2 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((unint64_t)-a2 << 25) & 0x1FFFFFF00000000;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTag for VirtualEnvironmentProbeComponent.Source(_QWORD *a1)
{
  uint64_t v1;

  v1 = a1[2] >> 62;
  if (v1 <= 1)
    return v1;
  else
    return (*a1 >> 3) + 2;
}

uint64_t destructiveProjectEnumData for VirtualEnvironmentProbeComponent.Source(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

int8x16_t destructiveInjectEnumTag for VirtualEnvironmentProbeComponent.Source(uint64_t a1, uint64_t a2)
{
  int8x16_t result;
  uint64_t v3;

  if (a2 < 2)
  {
    v3 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    result = vandq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_21BE6CD10);
    *(int8x16_t *)a1 = result;
    *(_QWORD *)(a1 + 16) = v3;
  }
  else
  {
    *(_QWORD *)a1 = 8 * (a2 - 2);
    result.i64[0] = 0;
    *(_OWORD *)(a1 + 8) = xmmword_21BE6CD20;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent.Source()
{
  return &type metadata for VirtualEnvironmentProbeComponent.Source;
}

uint64_t assignWithCopy for VirtualEnvironmentProbeComponent.Probe(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for VirtualEnvironmentProbeComponent.Probe(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for VirtualEnvironmentProbeComponent.Probe()
{
  return &type metadata for VirtualEnvironmentProbeComponent.Probe;
}

uint64_t __RKEntityFadeAction.__allocating_init(targetEntity:targetOpacity:duration:)(uint64_t a1, float a2, float a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(float *)(v6 + 108) = a2;
  *(float *)(v6 + 112) = a3;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityFadeAction.init(targetEntity:targetOpacity:duration:)(uint64_t a1, float a2, float a3)
{
  uint64_t v3;

  *(float *)(v3 + 108) = a2;
  *(float *)(v3 + 112) = a3;
  return __RKEntityAction.init(targetEntity:)(a1);
}

uint64_t __RKEntityFadeAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v14 = StaticString.description.getter();
  v15 = v2;
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v5 = v14;
  v4 = v15;
  v6 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(_BYTE *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_BYTE *)(v1 + 104);
    v9 = 1;
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    v12 = v7;
    LOBYTE(v13) = v8;
    __RKEntityAction.state.didset((uint64_t)&v12);
    v12 = v5;
    v13 = v4;
    v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v12);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t __RKEntityFadeAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_beginAccess();
  v3 = type metadata accessor for __RKEntityFadeAction();
  *(_QWORD *)(swift_allocObject() + 108) = *(_QWORD *)(v1 + 108);
  v4 = swift_retain();
  result = __RKEntityAction.init(targetEntity:)(v4);
  a1[3] = v3;
  *a1 = result;
  return result;
}

uint64_t __RKEntityFadeAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    type metadata accessor for __RKEntityFadeAction();
    *(_QWORD *)(swift_allocObject() + 108) = *(_QWORD *)(v1 + 108);
    v6 = swift_retain();
    return __RKEntityAction.init(targetEntity:)(v6);
  }
  else
  {
    type metadata accessor for __RKEntityFadeAction();
    *(_QWORD *)(swift_allocObject() + 108) = *(_QWORD *)(v1 + 108);
    v4 = swift_retain();
    __RKEntityAction.init(targetEntity:)(v4);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v7;
    else
      return 0;
  }
}

void __RKEntityFadeAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityFadeAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKFadeSceneAction.__allocating_init(targetOpacity:duration:)(float a1, float a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(float *)(v4 + 108) = a1;
  *(float *)(v4 + 112) = a2;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKFadeSceneAction.init(targetOpacity:duration:)(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 108) = a1;
  *(float *)(v2 + 112) = a2;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKFadeSceneAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v14 = StaticString.description.getter();
  v15 = v2;
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v5 = v14;
  v4 = v15;
  v6 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(_BYTE *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_BYTE *)(v1 + 104);
    v9 = 1;
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    v12 = v7;
    LOBYTE(v13) = v8;
    __RKEntityAction.state.didset((uint64_t)&v12);
    v12 = v5;
    v13 = v4;
    v10 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v10, &v12);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t __RKFadeSceneAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for __RKFadeSceneAction();
  *(_QWORD *)(swift_allocObject() + 108) = *(_QWORD *)(v1 + 108);
  result = __RKEntityAction.init(targetEntity:)(0);
  a1[3] = v3;
  *a1 = result;
  return result;
}

void __RKFadeSceneAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKFadeSceneAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityFadeAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t __RKEntityFadeAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityFadeAction()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKFadeSceneAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityFadeAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityFadeAction.__allocating_init(targetEntity:targetOpacity:duration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t method lookup function for __RKFadeSceneAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKFadeSceneAction.__allocating_init(targetOpacity:duration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t _finalizeUninitializedArray<A>(_:)(uint64_t a1)
{
  type metadata accessor for Array();
  return a1;
}

Swift::Bool __swiftcall Entity.ComponentSet.hasMesh()()
{
  return Entity.ComponentSet.hasMesh()((void (*)(void))MEMORY[0x24BE23300]);
}

Swift::Bool __swiftcall Entity.ComponentSet.hasRectAreaLight()()
{
  return Entity.ComponentSet.hasMesh()((void (*)(void))MEMORY[0x24BE23E10]);
}

Swift::Bool __swiftcall Entity.ComponentSet.hasVideo()()
{
  return Entity.ComponentSet.hasMesh()((void (*)(void))MEMORY[0x24BE26050]);
}

BOOL Entity.ComponentSet.hasMesh()(void (*a1)(void))
{
  a1();
  return REEntityGetComponentByClass() != 0;
}

uint64_t Entity.MetricUtilitiesBase.entity.getter()
{
  return swift_retain();
}

uint64_t Entity.MetricUtilitiesBase.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t Entity.metrics.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_retain();
}

uint64_t Entity.MetricUtilitiesBase.meshAsset.getter()
{
  uint64_t result;

  REMeshComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
    return REMeshComponentGetMesh();
  return result;
}

uint64_t Entity.MetricUtilitiesBase.animationJointCounts.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t SkeletalJointCount;
  uint64_t v26;

  v24 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v21 - v4;
  v26 = *v1;
  v6 = Entity.MetricUtilitiesBase.skeletalAnimationNames.getter();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  result = Dictionary.init(dictionaryLiteral:)();
  v8 = 0;
  v26 = result;
  v9 = *(_QWORD *)(v6 + 64);
  v22 = v6 + 64;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v23 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_5;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v23)
      goto LABEL_21;
    v19 = *(_QWORD *)(v22 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v23)
        goto LABEL_21;
      v19 = *(_QWORD *)(v22 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v23)
          goto LABEL_21;
        v19 = *(_QWORD *)(v22 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_20:
    v12 = (v19 - 1) & v19;
    v14 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_5:
    v15 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14);
    swift_bridgeObjectRetain();
    RETimelineDefinitionCreateFromTimeline();
    SkeletalJointCount = RETimelineDefinitionGetSkeletalJointCount();
    v16 = *(_QWORD *)(v24 + 24);
    v17 = lazy protocol witness table accessor for type Int and conformance Int();
    MEMORY[0x2207695CC](&SkeletalJointCount, MEMORY[0x24BEE1768], v17, v2, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v5, 0, 1, v2);
    SkeletalJointCount = v15;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    result = RERelease();
  }
  v20 = v18 + 3;
  if (v20 >= v23)
  {
LABEL_21:
    swift_release();
    return v26;
  }
  v19 = *(_QWORD *)(v22 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v23)
      goto LABEL_21;
    v19 = *(_QWORD *)(v22 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationNames.getter()
{
  uint64_t ComponentByClass;
  _QWORD *v1;
  uint64_t EntryCount;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t EntryAsset;
  Swift::UInt v7;
  id v8;
  Swift::String v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;

  REAnimationLibraryComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  v1 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (!ComponentByClass)
    return (uint64_t)v1;
  if (!REAnimationLibraryComponentGetAnimationLibraryAsset())
    return (uint64_t)v1;
  REAssetGetAssetManager();
  if (!REAnimationLibraryDefinitionCreateFromAnimationLibraryAsset())
    return (uint64_t)v1;
  EntryCount = REAnimationLibraryDefinitionGetEntryCount();
  if (EntryCount < 0)
    goto LABEL_35;
  v3 = EntryCount;
  if (!EntryCount)
  {
LABEL_31:
    RERelease();
    return (uint64_t)v1;
  }
  v4 = 0;
  while (1)
  {
    EntryAsset = REAnimationLibraryDefinitionGetEntryAsset();
    if (!EntryAsset)
      goto LABEL_10;
    v7 = EntryAsset;
    v8 = (id)REAssetGetType();
    v9 = String.init(_:)(v8);
    if (v9._countAndFlagsBits == 0x656E696C656D6954 && v9._object == (void *)0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
        goto LABEL_10;
    }
    RETimelineDefinitionCreateFromTimeline();
    if (RETimelineDefinitionGetTimelineType() == 19)
      break;
LABEL_9:
    RERelease();
LABEL_10:
    if (v3 == ++v4)
      goto LABEL_31;
  }
  v12 = v3;
  RETimelineDefinitionGetName();
  v13 = String.init(cString:)();
  v15 = v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  v19 = v1[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (!__OFADD__(v19, v20))
  {
    v22 = v17;
    if (v1[3] < v21)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_36;
      v18 = v23;
      if ((v22 & 1) == 0)
        goto LABEL_27;
LABEL_7:
      v5 = (uint64_t *)(v1[7] + 16 * v18);
      swift_bridgeObjectRelease();
      *v5 = v13;
      v5[1] = v15;
LABEL_8:
      swift_bridgeObjectRelease();
      v3 = v12;
      goto LABEL_9;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v17 & 1) != 0)
        goto LABEL_7;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v22 & 1) != 0)
        goto LABEL_7;
    }
LABEL_27:
    v1[(v18 >> 6) + 8] |= 1 << v18;
    *(_QWORD *)(v1[6] + 8 * v18) = v7;
    v25 = (uint64_t *)(v1[7] + 16 * v18);
    *v25 = v13;
    v25[1] = v15;
    v26 = v1[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_34;
    v1[2] = v28;
    goto LABEL_8;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.averageSkinInfluenceCount.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;

  result = Entity.MetricUtilitiesBase.meshAsset.getter();
  if (result)
  {
    result = REMeshAssetGetModelCount();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      v1 = result;
      if (result)
      {
        v2 = 0;
        v3 = 0.0;
        do
        {
          v4 = v2 + 1;
          result = REMeshAssetGetAverageInfluenceCount();
          v3 = v3 + v5;
          v2 = v4;
        }
        while (v1 != v4);
      }
    }
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.influenceCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  char v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v1;
  v7 = v15;
  Entity.MetricUtilitiesBase.averageSkinInfluenceCount.getter();
  v9 = v8;
  v15 = v7;
  Entity.MetricUtilitiesBase.meshVertexCount.getter(a1);
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    v11 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v12 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if ((v11 & 1) != 0)
      v10 = (float)v12;
    else
      v10 = (float)(unint64_t)v12;
  }
  else
  {
    lazy protocol witness table accessor for type Float and conformance Float();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    static BinaryFloatingPoint<>._convert<A>(from:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v10 = *(float *)&v15;
  }
  *(float *)&v15 = v9 * v10;
  lazy protocol witness table accessor for type Float and conformance Float();
  return dispatch thunk of BinaryFloatingPoint.init<A>(_:)();
}

uint64_t Entity.MetricUtilitiesBase.meshVertexCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v15 - v6;
  v16 = *v1;
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    result = REMeshAssetGetModelCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v10 = result;
      if (!result)
      {
LABEL_7:
        HIDWORD(v15) = v9;
        v13 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        return MEMORY[0x2207695CC]((char *)&v15 + 4, MEMORY[0x24BEE44F0], v13, v2, v3);
      }
      v11 = 0;
      while (1)
      {
        result = REMeshAssetGetModelVertexCount();
        v12 = __CFADD__(v9, (_DWORD)result);
        v9 += result;
        if (v12)
          break;
        if (v10 == ++v11)
          goto LABEL_7;
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v7, v2, v4);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.shapeTargetCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t AssociatedConformanceWitness;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v17 - v6;
  v18 = *v1;
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    result = REMeshAssetGetModelCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v10 = result;
      if (!result)
      {
LABEL_13:
        v18 = v9;
        v15 = lazy protocol witness table accessor for type Int and conformance Int();
        return MEMORY[0x2207695CC](&v18, MEMORY[0x24BEE1768], v15, v2, v3);
      }
      v11 = 0;
      while (v11 != v10)
      {
        result = REMeshAssetGetBlendShapeGroupCount();
        if (result < 0)
          goto LABEL_18;
        v12 = result;
        if (result)
        {
          v13 = 0;
          while (1)
          {
            result = REMeshAssetGetBlendShapeGroupDefinitionCount();
            v14 = __OFADD__(v9, result);
            v9 += result;
            if (v14)
              break;
            if (v12 == ++v13)
              goto LABEL_5;
          }
          __break(1u);
          break;
        }
LABEL_5:
        if (++v11 == v10)
          goto LABEL_13;
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v7, v2, v4);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(a1, (void (*)(void))Entity.MetricUtilitiesBase.animationJointCounts.getter, MEMORY[0x24BEE0370]);
}

uint64_t Entity.MetricUtilitiesBase.skeletonJointCount.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v15 - v6;
  v16 = *v1;
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    result = REMeshAssetGetTotalSkeletonCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v9 = 0;
      v10 = result;
      if (!result)
      {
LABEL_7:
        v16 = v9;
        v13 = lazy protocol witness table accessor for type Int and conformance Int();
        return MEMORY[0x2207695CC](&v16, MEMORY[0x24BEE1768], v13, v2, v3);
      }
      v11 = 0;
      while (1)
      {
        result = REMeshAssetGetSkeletonJointCount();
        v12 = __OFADD__(v9, result);
        v9 += result;
        if (v12)
          break;
        if (v10 == ++v11)
          goto LABEL_7;
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v7, v2, v4);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.transformAnimationCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt TransformQueryResultAnimationAsset;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t AssociatedConformanceWitness;
  Swift::UInt v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v16 - v5;
  REAnimationLibraryComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v7 = MEMORY[0x24BEE4B08];
    v17 = MEMORY[0x24BEE4B08];
    if (!REAnimationLibraryComponentCreateQueryAllTransformAnimations())
    {
LABEL_9:
      v13 = *(_QWORD *)(v7 + 16);
      swift_bridgeObjectRelease();
      v16 = v13;
      v14 = lazy protocol witness table accessor for type Int and conformance Int();
      return MEMORY[0x2207695CC](&v16, MEMORY[0x24BEE1768], v14, v1, v2);
    }
    result = REAnimationLibraryComponentGetTransformQueryResultCount();
    if ((result & 0x8000000000000000) == 0)
    {
      v9 = result;
      if (result)
      {
        v10 = 0;
        do
        {
          v11 = v10 + 1;
          TransformQueryResultAnimationAsset = REAnimationLibraryComponentGetTransformQueryResultAnimationAsset();
          specialized Set._Variant.insert(_:)(&v16, TransformQueryResultAnimationAsset);
          v10 = v11;
        }
        while (v9 != v11);
        v7 = v17;
      }
      RERelease();
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v6, v1, v3);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.audioAssets.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char v79;
  uint64_t v80;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v47 - v4;
  v63 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v62 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16);
  v65 = v2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v60 = type metadata accessor for Optional();
  v59 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v9 = (char *)&v47 - v8;
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v11);
  v57 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)&v47 - v14;
  v15 = (_QWORD *)swift_slowAlloc();
  *v15 = 0;
  v49 = v15;
  v16 = (void *)REAudioPlayerComponentCopySizeOfAudioPlayerComponentFromEntity();
  *(_QWORD *)&v76 = 0;
  v17 = MEMORY[0x24BEE4AD8];
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  v18 = v76;
  if (!(_QWORD)v76)
    v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  result = Dictionary.init(dictionaryLiteral:)();
  v80 = result;
  v20 = *(_QWORD *)(v18 + 64);
  v50 = v18 + 64;
  v21 = 1 << *(_BYTE *)(v18 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v24 = (unint64_t)(v21 + 63) >> 6;
  v25 = (char *)v74 + 8;
  v68 = &v79;
  v48 = v24 - 1;
  v26 = v17 + 8;
  v27 = 0;
  v66 = v26;
  v58 = v10;
  v55 = v18;
  v54 = v9;
  v53 = v24;
  v52 = (char *)v74 + 8;
  v51 = AssociatedTypeWitness;
  if (!v23)
    goto LABEL_10;
LABEL_8:
  v28 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  v29 = v28 | (v27 << 6);
  while (2)
  {
    outlined init with copy of AnyHashable(*(_QWORD *)(v18 + 48) + 40 * v29, (uint64_t)&v72);
    outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v29, (uint64_t)v25);
    while (1)
    {
      outlined init with take of (key: AnyHashable, value: Any)?((uint64_t)&v72, (uint64_t)&v76);
      if (!*((_QWORD *)&v77 + 1))
      {
        swift_release();
        v46 = v80;
        MEMORY[0x220772F44](v49, -1, -1);
        return v46;
      }
      outlined init with take of Any(v68, v71);
      v72 = v76;
      v73 = v77;
      *(_QWORD *)&v74[0] = v78;
      if ((swift_dynamicCast() & 1) != 0)
      {
        v67 = v27;
        v33 = v69;
        v34 = v70;
        outlined init with copy of Any((uint64_t)v71, (uint64_t)&v72);
        v35 = swift_dynamicCast();
        v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
        if ((v35 & 1) != 0)
        {
          v36(v9, 0, 1, AssociatedTypeWitness);
          v37 = v56;
          (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v56, v9, AssociatedTypeWitness);
          v38 = v57;
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v57, v37, AssociatedTypeWitness);
          v39 = v62;
          v40 = v65;
          MEMORY[0x220769D1C](v38, v65, v61);
          v41 = v63;
          v42 = v64;
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v64, v39, v40);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
          *(_QWORD *)&v72 = v33;
          *((_QWORD *)&v72 + 1) = v34;
          type metadata accessor for Dictionary();
          AssociatedTypeWitness = v51;
          v9 = v54;
          Dictionary.subscript.setter();
          v43 = *(void (**)(char *, uint64_t))(v41 + 8);
          v24 = v53;
          v44 = v39;
          v10 = v58;
          v25 = v52;
          v43(v44, v40);
          v45 = v37;
          v18 = v55;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v45, AssociatedTypeWitness);
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        }
        else
        {
          v36(v9, 1, 1, AssociatedTypeWitness);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          result = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v9, v60);
        }
        v27 = v67;
        if (v23)
          goto LABEL_8;
      }
      else
      {
        result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        if (v23)
          goto LABEL_8;
      }
LABEL_10:
      v30 = v27 + 1;
      if (__OFADD__(v27, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      if (v30 < v24)
      {
        v31 = *(_QWORD *)(v50 + 8 * v30);
        if (v31)
          goto LABEL_13;
        v32 = v27 + 2;
        ++v27;
        if (v30 + 1 < v24)
        {
          v31 = *(_QWORD *)(v50 + 8 * v32);
          if (v31)
            goto LABEL_16;
          v27 = v30 + 1;
          if (v30 + 2 < v24)
          {
            v31 = *(_QWORD *)(v50 + 8 * (v30 + 2));
            if (v31)
            {
              v30 += 2;
              goto LABEL_13;
            }
            v32 = v30 + 3;
            v27 = v30 + 2;
            if (v30 + 3 < v24)
              break;
          }
        }
      }
LABEL_27:
      v23 = 0;
      v75 = 0;
      memset(v74, 0, sizeof(v74));
      v72 = 0u;
      v73 = 0u;
    }
    v31 = *(_QWORD *)(v50 + 8 * v32);
    if (v31)
    {
LABEL_16:
      v30 = v32;
LABEL_13:
      v23 = (v31 - 1) & v31;
      v29 = __clz(__rbit64(v31)) + (v30 << 6);
      v27 = v30;
      continue;
    }
    break;
  }
  while (1)
  {
    v30 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v30 >= v24)
    {
      v27 = v48;
      goto LABEL_27;
    }
    v31 = *(_QWORD *)(v50 + 8 * v30);
    ++v32;
    if (v31)
      goto LABEL_13;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.audioFileCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.audioFileCount.getter(a1, MEMORY[0x24BE20E40]);
}

uint64_t Entity.MetricUtilitiesBase.audioMemory.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.audioFileCount.getter(a1, MEMORY[0x24BE20E50]);
}

uint64_t Entity.MetricUtilitiesBase.audioFileCount.getter(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v8 = (char *)&v12 - v7;
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v13 = a2();
    v9 = lazy protocol witness table accessor for type Int and conformance Int();
    return MEMORY[0x2207695CC](&v13, MEMORY[0x24BEE1768], v9, v3, v4);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v8, v3, v5);
  }
}

uint64_t Entity.MetricUtilitiesBase.meshMemory.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  char *v7;
  uint64_t SceneNullable;
  uint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v7 = (char *)&v14 - v6;
  v15 = *v1;
  if (Entity.MetricUtilitiesBase.meshAsset.getter())
  {
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v9 = SceneNullable;
      v10 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v10)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v9);
      }
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        v15 = REAssetComputeEstimatedMemorySize();
        v11 = lazy protocol witness table accessor for type Int and conformance Int();
        MEMORY[0x2207695CC](&v15, MEMORY[0x24BEE1768], v11, v2, v3);
        return swift_release();
      }
      swift_release();
    }
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  return MEMORY[0x220769D1C](v7, v2, v4);
}

uint64_t Entity.MetricUtilitiesBase.meshTriangleCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  int v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v11 - v5;
  REMeshComponentGetComponentType();
  if (!REEntityGetComponentByClass() || (v7 = MEMORY[0x22076E7D4](), v7 < 0))
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v6, v1, v3);
  }
  else
  {
    v12 = v7;
    v8 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    return MEMORY[0x2207695CC](&v12, MEMORY[0x24BEE3F88], v8, v1, v2);
  }
}

uint64_t specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter()
{
  uint64_t result;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int ValidPassTechniqueMapping;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;

  REMaterialParameterBlockArrayComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    result = swift_release();
    v2 = 0;
    v3 = v1 + 64;
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v6 = v5 & *(_QWORD *)(v1 + 64);
    v14 = (unint64_t)(v4 + 63) >> 6;
    while (1)
    {
      if (v6)
      {
        v6 &= v6 - 1;
      }
      else
      {
        v8 = v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_41;
        if (v8 >= v14)
        {
LABEL_38:
          swift_release();
          return 0;
        }
        v9 = *(_QWORD *)(v3 + 8 * v8);
        ++v2;
        if (!v9)
        {
          v2 = v8 + 1;
          if (v8 + 1 >= v14)
            goto LABEL_38;
          v9 = *(_QWORD *)(v3 + 8 * v2);
          if (!v9)
          {
            v2 = v8 + 2;
            if (v8 + 2 >= v14)
              goto LABEL_38;
            v9 = *(_QWORD *)(v3 + 8 * v2);
            if (!v9)
            {
              v2 = v8 + 3;
              if (v8 + 3 >= v14)
                goto LABEL_38;
              v9 = *(_QWORD *)(v3 + 8 * v2);
              if (!v9)
              {
                v2 = v8 + 4;
                if (v8 + 4 >= v14)
                  goto LABEL_38;
                v9 = *(_QWORD *)(v3 + 8 * v2);
                if (!v9)
                {
                  v2 = v8 + 5;
                  if (v8 + 5 >= v14)
                    goto LABEL_38;
                  v9 = *(_QWORD *)(v3 + 8 * v2);
                  if (!v9)
                  {
                    v10 = v8 + 6;
                    if (v10 >= v14)
                      goto LABEL_38;
                    v9 = *(_QWORD *)(v3 + 8 * v10);
                    if (!v9)
                    {
                      while (1)
                      {
                        v2 = v10 + 1;
                        if (__OFADD__(v10, 1))
                          goto LABEL_42;
                        if (v2 >= v14)
                          goto LABEL_38;
                        v9 = *(_QWORD *)(v3 + 8 * v2);
                        ++v10;
                        if (v9)
                          goto LABEL_27;
                      }
                    }
                    v2 = v10;
                  }
                }
              }
            }
          }
        }
LABEL_27:
        v6 = (v9 - 1) & v9;
      }
      v11 = (_QWORD *)swift_slowAlloc();
      *v11 = 0;
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        break;
      v12 = result;
      if (result)
      {
        v13 = 0;
        while (v12 != v13)
        {
          result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if ((_DWORD)result)
          {
            REMaterialAssetGetMaterialDefinition();
            result = REMaterialDefinitionAssetHasTechniqueWithHash();
            if ((_DWORD)result)
            {
              MEMORY[0x220772F44](v11, -1, -1);
              goto LABEL_36;
            }
          }
          if (v12 == ++v13)
            goto LABEL_5;
        }
        __break(1u);
        break;
      }
LABEL_5:
      ValidPassTechniqueMapping = REMaterialAssetGetValidPassTechniqueMapping();
      result = MEMORY[0x220772F44](v11, -1, -1);
      if (ValidPassTechniqueMapping)
      {
LABEL_36:
        swift_release();
        return 1;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter()
{
  uint64_t result;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int ValidPassTechniqueMapping;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;

  REMaterialParameterBlockArrayComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    result = swift_release();
    v2 = 0;
    v3 = v1 + 64;
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v6 = v5 & *(_QWORD *)(v1 + 64);
    v14 = (unint64_t)(v4 + 63) >> 6;
    while (1)
    {
      if (v6)
      {
        v6 &= v6 - 1;
      }
      else
      {
        v8 = v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_39;
        if (v8 >= v14)
        {
LABEL_36:
          swift_release();
          return 0;
        }
        v9 = *(_QWORD *)(v3 + 8 * v8);
        ++v2;
        if (!v9)
        {
          v2 = v8 + 1;
          if (v8 + 1 >= v14)
            goto LABEL_36;
          v9 = *(_QWORD *)(v3 + 8 * v2);
          if (!v9)
          {
            v2 = v8 + 2;
            if (v8 + 2 >= v14)
              goto LABEL_36;
            v9 = *(_QWORD *)(v3 + 8 * v2);
            if (!v9)
            {
              v2 = v8 + 3;
              if (v8 + 3 >= v14)
                goto LABEL_36;
              v9 = *(_QWORD *)(v3 + 8 * v2);
              if (!v9)
              {
                v2 = v8 + 4;
                if (v8 + 4 >= v14)
                  goto LABEL_36;
                v9 = *(_QWORD *)(v3 + 8 * v2);
                if (!v9)
                {
                  v10 = v8 + 5;
                  if (v10 >= v14)
                    goto LABEL_36;
                  v9 = *(_QWORD *)(v3 + 8 * v10);
                  if (!v9)
                  {
                    while (1)
                    {
                      v2 = v10 + 1;
                      if (__OFADD__(v10, 1))
                        goto LABEL_40;
                      if (v2 >= v14)
                        goto LABEL_36;
                      v9 = *(_QWORD *)(v3 + 8 * v2);
                      ++v10;
                      if (v9)
                        goto LABEL_25;
                    }
                  }
                  v2 = v10;
                }
              }
            }
          }
        }
LABEL_25:
        v6 = (v9 - 1) & v9;
      }
      v11 = (_QWORD *)swift_slowAlloc();
      *v11 = 0;
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        break;
      v12 = result;
      if (result)
      {
        v13 = 0;
        while (v12 != v13)
        {
          result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if ((_DWORD)result)
          {
            REMaterialAssetGetMaterialDefinition();
            result = REMaterialDefinitionAssetHasTechniqueWithHash();
            if ((_DWORD)result)
            {
              MEMORY[0x220772F44](v11, -1, -1);
              goto LABEL_34;
            }
          }
          if (v12 == ++v13)
            goto LABEL_5;
        }
        __break(1u);
        break;
      }
LABEL_5:
      ValidPassTechniqueMapping = REMaterialAssetGetValidPassTechniqueMapping();
      result = MEMORY[0x220772F44](v11, -1, -1);
      if (ValidPassTechniqueMapping)
      {
LABEL_34:
        swift_release();
        return 1;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
  }
  return result;
}

uint64_t specialized Entity.MetricUtilitiesBase.materialCounts.getter()
{
  uint64_t ComponentByClass;
  _QWORD *v1;
  uint64_t MaterialCount;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt MaterialAtIndex;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  char isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;

  REMeshComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  v1 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  if (!ComponentByClass)
    return (uint64_t)v1;
  REMeshComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    return (uint64_t)v1;
  MaterialCount = REMeshComponentGetMaterialCount();
  if (MaterialCount < (uint64_t)0xFFFFFFFF80000000)
    goto LABEL_32;
  if (MaterialCount > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
  }
  else if ((MaterialCount & 0x8000000000000000) == 0)
  {
    if (MaterialCount)
    {
      v3 = 0;
      v4 = MaterialCount;
      while (1)
      {
        MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
        if (!MaterialAtIndex)
          goto LABEL_10;
        v6 = MaterialAtIndex;
        v7 = v1[2];
        if (v7)
        {
          v8 = specialized __RawDictionaryStorage.find<A>(_:)(MaterialAtIndex);
          if ((v9 & 1) != 0)
            LODWORD(v7) = *(_DWORD *)(v1[7] + 4 * v8);
          else
            LODWORD(v7) = 0;
        }
        v10 = v7 + 1;
        if (__OFADD__((_DWORD)v7, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v13 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
        v14 = v1[2];
        v15 = (v12 & 1) == 0;
        v16 = v14 + v15;
        if (__OFADD__(v14, v15))
          goto LABEL_30;
        v17 = v12;
        if (v1[3] >= v16)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v12 & 1) == 0)
              goto LABEL_24;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v17 & 1) == 0)
              goto LABEL_24;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
          v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
          if ((v17 & 1) != (v19 & 1))
            goto LABEL_35;
          v13 = v18;
          if ((v17 & 1) == 0)
          {
LABEL_24:
            v1[(v13 >> 6) + 8] |= 1 << v13;
            *(_QWORD *)(v1[6] + 8 * v13) = v6;
            *(_DWORD *)(v1[7] + 4 * v13) = v10;
            v20 = v1[2];
            v21 = __OFADD__(v20, 1);
            v22 = v20 + 1;
            if (v21)
              goto LABEL_31;
            v1[2] = v22;
            goto LABEL_9;
          }
        }
        *(_DWORD *)(v1[7] + 4 * v13) = v10;
LABEL_9:
        swift_bridgeObjectRelease();
LABEL_10:
        if (v4 == ++v3)
          return (uint64_t)v1;
      }
    }
    return (uint64_t)v1;
  }
  __break(1u);
LABEL_35:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.MetricUtilitiesBase.materialCounts.getter(uint64_t a1)
{
  int64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  void (*v38)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v39;
  void (*v40)(_BYTE *, uint64_t);
  _BYTE *v41;
  uint64_t result;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  void (*v70)(_BYTE *, uint64_t);
  uint64_t MaterialAtIndex;
  int64_t v72;
  char v73;
  uint64_t v74;
  _BYTE *v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedConformanceWitness;
  _BYTE *v80;
  uint64_t v81;
  BOOL v82;
  _BYTE v83[12];
  int v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  _BYTE *v92;
  _BYTE *v93;
  _BYTE *v94;
  _BYTE *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t AssociatedTypeWitness;
  uint64_t v103;
  int64_t v104;
  uint64_t v105;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional();
  v86 = *(_QWORD *)(v4 - 8);
  v87 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v100 = &v83[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v97 = &v83[-v7];
  v8 = *(_QWORD *)(a1 + 24);
  v96 = *(_QWORD *)(v8 + 24);
  v9 = *(_BYTE **)(v96 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = &v83[-v10];
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v95 = &v83[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v15);
  v94 = &v83[-v16];
  MEMORY[0x24BDAC7A8](v17);
  v85 = &v83[-v18];
  MEMORY[0x24BDAC7A8](v19);
  v89 = &v83[-v20];
  MEMORY[0x24BDAC7A8](v21);
  v92 = &v83[-v22];
  MEMORY[0x24BDAC7A8](v23);
  v91 = &v83[-v24];
  MEMORY[0x24BDAC7A8](v25);
  v99 = &v83[-v26];
  MEMORY[0x24BDAC7A8](v27);
  v90 = &v83[-v28];
  MEMORY[0x24BDAC7A8](v29);
  v31 = &v83[-v30];
  MEMORY[0x24BDAC7A8](v32);
  v34 = &v83[-v33];
  v35 = *v1;
  REMeshComponentGetComponentType();
  if (!REEntityGetComponentByClass())
  {
    swift_getTupleTypeMetadata2();
    static Array._allocateUninitialized(_:)();
    return Dictionary.init(dictionaryLiteral:)();
  }
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  v36 = Dictionary.init(dictionaryLiteral:)();
  v104 = v35;
  v105 = v36;
  Entity.MetricUtilitiesBase.materialAssignmentCount.getter(a1);
  v37 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v38 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v38(v31, v34, v3);
  v98 = v3;
  if ((v37 & 1) == 0)
  {
    v40 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
    v43 = v31;
LABEL_9:
    v40(v43, v3);
    goto LABEL_10;
  }
  v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v40 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v40(v31, v3);
  if (v39 <= 64)
  {
LABEL_10:
    v44 = v91;
    goto LABEL_11;
  }
  v41 = v90;
  v38(v90, v34, v3);
  v104 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_42:
      v77 = dispatch thunk of BinaryInteger._lowWord.getter();
      result = ((uint64_t (*)(_BYTE *, uint64_t))v40)(v41, v3);
      v44 = v91;
      if (v77 < v104)
        goto LABEL_51;
      goto LABEL_11;
    }
    lazy protocol witness table accessor for type Int and conformance Int();
    v75 = v99;
    goto LABEL_37;
  }
  v73 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v74 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v73 & 1) == 0)
  {
    if (v74 < 64)
    {
      v41 = v90;
      v3 = v98;
      goto LABEL_42;
    }
    v43 = v90;
    v3 = v98;
    goto LABEL_9;
  }
  if (v74 > 64)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    v3 = v98;
    v75 = v99;
LABEL_37:
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v76 = dispatch thunk of static Comparable.< infix(_:_:)();
    v40(v75, v3);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v40)(v90, v3);
    v44 = v91;
    if ((v76 & 1) != 0)
      goto LABEL_51;
    goto LABEL_11;
  }
  v3 = v98;
  v78 = AssociatedTypeWitness;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x220769E3C](&unk_21BE6CF18, 256, v78, AssociatedConformanceWitness);
  v80 = v99;
  MEMORY[0x220769D1C](v11, v3, v9);
  v84 = dispatch thunk of static Comparable.< infix(_:_:)();
  v40(v80, v3);
  v50 = (uint64_t)v85;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v85, v90, v3);
  if ((v84 & 1) != 0)
  {
LABEL_50:
    result = ((uint64_t (*)(uint64_t, uint64_t))v40)(v50, v3);
LABEL_51:
    __break(1u);
    return result;
  }
  v90 = (_BYTE *)v104;
  v81 = dispatch thunk of BinaryInteger._lowWord.getter();
  result = ((uint64_t (*)(uint64_t, uint64_t))v40)(v50, v3);
  v82 = v81 < (uint64_t)v90;
  v44 = v91;
  if (v82)
    goto LABEL_51;
LABEL_11:
  v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v38(v44, v34, v3);
  v93 = v11;
  if (v45 < 65)
  {
    v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v40(v44, v3);
    if (v52 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v40(v44, v3);
  }
  v38(v92, v34, v3);
  v104 = 0x7FFFFFFFFFFFFFFFLL;
  v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v46 & 1) != 0)
  {
    if (v47 > 64)
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v3 = v98;
      v48 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v49 = v92;
      v50 = dispatch thunk of static Comparable.< infix(_:_:)();
      v40(v48, v3);
      v51 = v49;
      goto LABEL_22;
    }
LABEL_20:
    v53 = v92;
    v3 = v98;
    dispatch thunk of BinaryInteger._lowWord.getter();
    v40(v53, v3);
    goto LABEL_23;
  }
  if (v47 <= 63)
    goto LABEL_20;
  v103 = 0x7FFFFFFFFFFFFFFFLL;
  v3 = v98;
  v54 = v99;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v99, v92, v98);
  lazy protocol witness table accessor for type Int and conformance Int();
  v55 = v89;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  v50 = dispatch thunk of static Comparable.< infix(_:_:)();
  v40(v55, v3);
  v51 = v54;
LABEL_22:
  v40(v51, v3);
  if ((v50 & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_23:
  v50 = (uint64_t)v34;
  v56 = dispatch thunk of BinaryInteger._lowWord.getter();
  v40(v34, v3);
  if (v56 < 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  v91 = v9;
  v92 = (_BYTE *)v8;
  v57 = v100;
  if (v56)
  {
    v58 = 0;
    v59 = MEMORY[0x24BEE27D0];
    v60 = MEMORY[0x24BEE27D8];
    v89 = (_BYTE *)v56;
    v90 = v40;
    v88 = v12;
    v61 = v98;
    do
    {
      MaterialAtIndex = REMeshComponentGetMaterialAtIndex();
      if (MaterialAtIndex)
      {
        v72 = MaterialAtIndex;
        v104 = MaterialAtIndex;
        MEMORY[0x220768B94](&v104, v105, v59, v61, v60);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v57, 1, v61) == 1)
        {
          v62 = v91;
          swift_getAssociatedConformanceWitness();
          v63 = v93;
          MEMORY[0x220769E3C](&unk_21BE6CF18, 256);
          v64 = v95;
          MEMORY[0x220769D1C](v63, v61, v62);
          (*(void (**)(_BYTE *, uint64_t))(v86 + 8))(v57, v87);
        }
        else
        {
          v64 = v95;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v95, v57, v61);
          v62 = v91;
          v63 = v93;
        }
        v65 = v94;
        MEMORY[0x2207695CC](v64, v61, v92, v61, v92);
        v66 = AssociatedTypeWitness;
        v67 = swift_getAssociatedConformanceWitness();
        MEMORY[0x220769E3C](&unk_21BE61D38, 512, v66, v67);
        v68 = v99;
        MEMORY[0x220769D1C](v63, v61, v62);
        v69 = v97;
        MEMORY[0x22076995C](v65, v68, v61, *(_QWORD *)(v96 + 8));
        v70 = (void (*)(_BYTE *, uint64_t))v90;
        ((void (*)(_BYTE *, uint64_t))v90)(v68, v61);
        v70(v65, v61);
        v12 = v88;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v69, 0, 1, v61);
        v104 = v72;
        v59 = MEMORY[0x24BEE27D0];
        v60 = MEMORY[0x24BEE27D8];
        type metadata accessor for Dictionary();
        Dictionary.subscript.setter();
        v57 = v100;
        v56 = (uint64_t)v89;
      }
      ++v58;
    }
    while (v56 != v58);
  }
  return v105;
}

uint64_t Entity.MetricUtilitiesBase.isShadowCaster.getter()
{
  _BYTE *v0;
  char v1;

  RERenderOptionsComponentGetComponentType();
  if (!REEntityGetComponentByClass())
    goto LABEL_5;
  v0 = (_BYTE *)swift_slowAlloc();
  *v0 = 1;
  if (!RERenderOptionsComponentGetCastsShadowsOverride() || (*v0 & 1) != 0)
  {
    MEMORY[0x220772F44](v0, -1, -1);
LABEL_5:
    swift_retain();
    v1 = specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter();
    swift_release();
    return v1 & 1;
  }
  MEMORY[0x220772F44](v0, -1, -1);
  return 0;
}

uint64_t specialized Entity.MetricUtilitiesBase.isShadowReceiver.getter()
{
  uint64_t result;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;

  REMaterialParameterBlockArrayComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    result = swift_release();
    v2 = 0;
    v14 = v1 + 64;
    v3 = 1 << *(_BYTE *)(v1 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v5 = v4 & *(_QWORD *)(v1 + 64);
    v15 = (unint64_t)(v3 + 63) >> 6;
    while (1)
    {
      if (v5)
      {
        v5 &= v5 - 1;
      }
      else
      {
        v6 = v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_55;
        if (v6 >= v15)
        {
LABEL_50:
          swift_release();
          return 0;
        }
        v7 = *(_QWORD *)(v14 + 8 * v6);
        ++v2;
        if (!v7)
        {
          v2 = v6 + 1;
          if (v6 + 1 >= v15)
            goto LABEL_50;
          v7 = *(_QWORD *)(v14 + 8 * v2);
          if (!v7)
          {
            v2 = v6 + 2;
            if (v6 + 2 >= v15)
              goto LABEL_50;
            v7 = *(_QWORD *)(v14 + 8 * v2);
            if (!v7)
            {
              v2 = v6 + 3;
              if (v6 + 3 >= v15)
                goto LABEL_50;
              v7 = *(_QWORD *)(v14 + 8 * v2);
              if (!v7)
              {
                v2 = v6 + 4;
                if (v6 + 4 >= v15)
                  goto LABEL_50;
                v7 = *(_QWORD *)(v14 + 8 * v2);
                if (!v7)
                {
                  v2 = v6 + 5;
                  if (v6 + 5 >= v15)
                    goto LABEL_50;
                  v7 = *(_QWORD *)(v14 + 8 * v2);
                  if (!v7)
                  {
                    v8 = v6 + 6;
                    if (v8 >= v15)
                      goto LABEL_50;
                    v7 = *(_QWORD *)(v14 + 8 * v8);
                    if (!v7)
                    {
                      while (1)
                      {
                        v2 = v8 + 1;
                        if (__OFADD__(v8, 1))
                          goto LABEL_56;
                        if (v2 >= v15)
                          goto LABEL_50;
                        v7 = *(_QWORD *)(v14 + 8 * v2);
                        ++v8;
                        if (v7)
                          goto LABEL_27;
                      }
                    }
                    v2 = v8;
                  }
                }
              }
            }
          }
        }
LABEL_27:
        v5 = (v7 - 1) & v7;
      }
      v9 = (_QWORD *)swift_slowAlloc();
      *v9 = 0;
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        goto LABEL_53;
      v10 = result;
      if (result)
        break;
LABEL_36:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
LABEL_48:
        MEMORY[0x220772F44](v9, -1, -1);
        swift_release();
        return 1;
      }
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        goto LABEL_54;
      v12 = result;
      if (result)
      {
        v13 = 0;
        while (v12 != v13)
        {
          result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if ((_DWORD)result)
          {
            result = REMaterialAssetTechniqueHasVariation();
            if ((_DWORD)result)
              goto LABEL_48;
          }
          if (v12 == ++v13)
            goto LABEL_46;
        }
        goto LABEL_52;
      }
LABEL_46:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
        goto LABEL_48;
      }
      result = MEMORY[0x220772F44](v9, -1, -1);
    }
    v11 = 0;
    while (v10 != v11)
    {
      result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
      if ((_DWORD)result)
      {
        result = REMaterialAssetTechniqueHasVariation();
        if ((_DWORD)result)
          goto LABEL_48;
      }
      if (v10 == ++v11)
        goto LABEL_36;
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.isShadowReceiver.getter()
{
  uint64_t result;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;

  REMaterialParameterBlockArrayComponentGetComponentType();
  result = REEntityGetComponentByClass();
  if (result)
  {
    swift_retain();
    v1 = specialized Entity.MetricUtilitiesBase.materialCounts.getter();
    result = swift_release();
    v2 = 0;
    v14 = v1 + 64;
    v3 = 1 << *(_BYTE *)(v1 + 32);
    v4 = -1;
    if (v3 < 64)
      v4 = ~(-1 << v3);
    v5 = v4 & *(_QWORD *)(v1 + 64);
    v15 = (unint64_t)(v3 + 63) >> 6;
    while (1)
    {
      if (v5)
      {
        v5 &= v5 - 1;
      }
      else
      {
        v6 = v2 + 1;
        if (__OFADD__(v2, 1))
          goto LABEL_53;
        if (v6 >= v15)
        {
LABEL_48:
          swift_release();
          return 0;
        }
        v7 = *(_QWORD *)(v14 + 8 * v6);
        ++v2;
        if (!v7)
        {
          v2 = v6 + 1;
          if (v6 + 1 >= v15)
            goto LABEL_48;
          v7 = *(_QWORD *)(v14 + 8 * v2);
          if (!v7)
          {
            v2 = v6 + 2;
            if (v6 + 2 >= v15)
              goto LABEL_48;
            v7 = *(_QWORD *)(v14 + 8 * v2);
            if (!v7)
            {
              v2 = v6 + 3;
              if (v6 + 3 >= v15)
                goto LABEL_48;
              v7 = *(_QWORD *)(v14 + 8 * v2);
              if (!v7)
              {
                v2 = v6 + 4;
                if (v6 + 4 >= v15)
                  goto LABEL_48;
                v7 = *(_QWORD *)(v14 + 8 * v2);
                if (!v7)
                {
                  v8 = v6 + 5;
                  if (v8 >= v15)
                    goto LABEL_48;
                  v7 = *(_QWORD *)(v14 + 8 * v8);
                  if (!v7)
                  {
                    while (1)
                    {
                      v2 = v8 + 1;
                      if (__OFADD__(v8, 1))
                        goto LABEL_54;
                      if (v2 >= v15)
                        goto LABEL_48;
                      v7 = *(_QWORD *)(v14 + 8 * v2);
                      ++v8;
                      if (v7)
                        goto LABEL_25;
                    }
                  }
                  v2 = v8;
                }
              }
            }
          }
        }
LABEL_25:
        v5 = (v7 - 1) & v7;
      }
      v9 = (_QWORD *)swift_slowAlloc();
      *v9 = 0;
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        goto LABEL_51;
      v10 = result;
      if (result)
        break;
LABEL_34:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
LABEL_46:
        MEMORY[0x220772F44](v9, -1, -1);
        swift_release();
        return 1;
      }
      result = REMaterialParameterBlockArrayComponentSize();
      if (result < 0)
        goto LABEL_52;
      v12 = result;
      if (result)
      {
        v13 = 0;
        while (v12 != v13)
        {
          result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
          if ((_DWORD)result)
          {
            result = REMaterialAssetTechniqueHasVariation();
            if ((_DWORD)result)
              goto LABEL_46;
          }
          if (v12 == ++v13)
            goto LABEL_44;
        }
        goto LABEL_50;
      }
LABEL_44:
      if (REMaterialAssetGetValidPassTechniqueMapping()
        && REMaterialAssetTechniqueHasVariation())
      {
        goto LABEL_46;
      }
      result = MEMORY[0x220772F44](v9, -1, -1);
    }
    v11 = 0;
    while (v10 != v11)
    {
      result = REMaterialParameterBlockArrayComponentGetHashedPassTechniqueMappingAtIndex();
      if ((_DWORD)result)
      {
        result = REMaterialAssetTechniqueHasVariation();
        if ((_DWORD)result)
          goto LABEL_46;
      }
      if (v10 == ++v11)
        goto LABEL_34;
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.shadowCasterCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  char v7;
  uint64_t AssociatedConformanceWitness;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v12 - v4;
  swift_retain();
  RERenderOptionsComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    v6 = (_BYTE *)swift_slowAlloc();
    *v6 = 1;
    if (RERenderOptionsComponentGetCastsShadowsOverride() && (*v6 & 1) == 0)
    {
      MEMORY[0x220772F44](v6, -1, -1);
      swift_release();
      goto LABEL_8;
    }
    MEMORY[0x220772F44](v6, -1, -1);
  }
  swift_retain();
  v7 = specialized Entity.MetricUtilitiesBase.hasTechniqueMappedToShadowPass.getter();
  swift_release_n();
  if ((v7 & 1) == 0)
  {
LABEL_8:
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    v9 = &unk_21BE6CF18;
    v10 = 256;
    goto LABEL_9;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v9 = &unk_21BE61D38;
  v10 = 512;
LABEL_9:
  MEMORY[0x220769E3C](v9, v10, AssociatedTypeWitness, AssociatedConformanceWitness);
  return MEMORY[0x220769D1C](v5, v1, v2);
}

uint64_t Entity.MetricUtilitiesBase.shadowClusterID.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v11 - v5;
  v7 = (uint64_t *)swift_slowAlloc();
  *v7 = 0;
  if ((REEntityGetProjectiveShadowClusterID() & 1) != 0)
  {
    v12 = *v7;
    v8 = lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    MEMORY[0x2207695CC](&v12, MEMORY[0x24BEE4568], v8, v1, v2);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    MEMORY[0x220769D1C](v6, v1, v3);
  }
  return MEMORY[0x220772F44](v7, -1, -1);
}

uint64_t Entity.MetricUtilitiesBase.shadowClusterIDs.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *v1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Entity]);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  v6 = v5;
  v7 = *(int *)(TupleTypeMetadata2 + 48);
  Entity.MetricUtilitiesBase.shadowClusterID.getter(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_21BE50AD0;
  *(_QWORD *)(v8 + 32) = v3;
  v10 = v8;
  specialized Array._endMutation()();
  *(_QWORD *)(v6 + v7) = v10;
  type metadata accessor for Array();
  swift_retain();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Entity.MetricUtilitiesBase.shadowReceiverCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t AssociatedConformanceWitness;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v5 = (char *)&v11 - v4;
  swift_retain();
  v6 = specialized Entity.MetricUtilitiesBase.isShadowReceiver.getter();
  swift_release();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  if ((v6 & 1) != 0)
  {
    v8 = &unk_21BE61D38;
    v9 = 512;
  }
  else
  {
    v8 = &unk_21BE6CF18;
    v9 = 256;
  }
  MEMORY[0x220769E3C](v8, v9, AssociatedTypeWitness, AssociatedConformanceWitness);
  return MEMORY[0x220769D1C](v5, v1, v2);
}

uint64_t Entity.MetricUtilitiesBase.materialAssignmentCount.getter(uint64_t a1)
{
  uint64_t ComponentByClass;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  REMeshComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
    ComponentByClass = REMeshComponentGetMaterialCount();
  v7 = ComponentByClass;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x2207695CC](&v7, MEMORY[0x24BEE1768], v5, v3, v4);
}

uint64_t Entity.MetricUtilitiesBase.uniqueMaterialCount.getter(uint64_t a1)
{
  return Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(a1, (void (*)(void))Entity.MetricUtilitiesBase.materialCounts.getter, MEMORY[0x24BEE02D8]);
}

uint64_t Entity.MetricUtilitiesBase.skeletalAnimationCount.getter(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 16);
  a2();
  v6 = a3();
  swift_bridgeObjectRelease();
  v10 = v6;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x2207695CC](&v10, MEMORY[0x24BEE1768], v8, v5, v7);
}

unint64_t Entity.MetricUtilitiesBase.rawCollisionShapeType.getter()
{
  unsigned int Type;
  unsigned __int8 v1;
  uint64_t v2;

  REColliderComponentGetComponentType();
  if (REEntityGetComponentByClass() && REColliderComponentGetCollisionObject())
  {
    RECollisionObjectGetShape();
    Type = RECollisionShapeGetType();
    v1 = 0;
    v2 = Type;
  }
  else
  {
    v2 = 0;
    v1 = 1;
  }
  return v2 | ((unint64_t)v1 << 32);
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.assetId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.memorySize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.resolution.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t TupleTypeMetadata2;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, __n128);
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v21;

  v7 = *(_QWORD *)(a3 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v9 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v11 = (char *)&v21 - v10;
  v12 = v3 + *(int *)(a3 + 40);
  v14 = *(int *)(v13 + 48);
  v15 = &v11[v14];
  v16 = v12 + v14;
  v17 = *(_QWORD *)(v7 - 8);
  v18 = *(void (**)(char *, __n128))(v17 + 16);
  v18(v11, v9);
  ((void (*)(char *, uint64_t, uint64_t))v18)(v15, v16, v7);
  v19 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
  v19(a1, v11, v7);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a2, v15, v7);
}

void Entity.MetricUtilitiesBase.TextureMetrics.init(coreMetrics:textureIdx:)(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t NthTextureByteSize;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;

  v8 = (id)REEntityTextureMetricsCopyNthTextureAssetId();
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  *a4 = v9;
  a4[1] = v11;
  NthTextureByteSize = REEntityTextureMetricsGetNthTextureByteSize();
  if (NthTextureByteSize < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    a4[2] = NthTextureByteSize;
    REEntityTextureMetricsGetNthTextureDimensions();
    v18 = v13;
    v20 = v14;
    type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(0, a2, a3, v15);
    v16 = lazy protocol witness table accessor for type Int32 and conformance Int32();
    v17 = MEMORY[0x24BEE3F88];
    MEMORY[0x2207695CC](&v20, MEMORY[0x24BEE3F88], v16, a2, a3);
    v19 = v18;
    swift_getTupleTypeMetadata2();
    MEMORY[0x2207695CC](&v19, v17, v16, a2, a3);

  }
}

uint64_t static Entity.MetricUtilitiesBase.TextureMetrics.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t Entity.MetricUtilitiesBase.TextureMetrics.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Int Entity.MetricUtilitiesBase.TextureMetrics.hashValue.getter()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Entity.MetricUtilitiesBase<A>.TextureMetrics()
{
  Hasher.init(_seed:)();
  Entity.MetricUtilitiesBase.TextureMetrics.hash(into:)();
  return Hasher._finalize()();
}

uint64_t Entity.MetricUtilitiesBase.textureMetrics.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(0, v5, v4, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v20 - v11;
  v13 = (void *)REEntityCopyTextureMetrics();
  v14 = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.MetricUtilitiesBase<A>.TextureMetrics, v6);
  v15 = Set.init()();
  v23 = v15;
  result = REEntityTextureMetricsGetTexturesCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result)
    {
      v17 = 0;
      v21 = v13;
      v22 = v14;
      do
      {
        v18 = result;
        v19 = v21;
        Entity.MetricUtilitiesBase.TextureMetrics.init(coreMetrics:textureIdx:)(v19, v5, v4, v9);
        type metadata accessor for Set();
        Set.insert(_:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
        result = v18;
        ++v17;
      }
      while (v18 != v17);

      return v23;
    }
    else
    {

    }
    return v15;
  }
  return result;
}

uint64_t Entity.MetricUtilitiesBase.textureCount.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 16);
  v13 = *v4;
  Entity.MetricUtilitiesBase.textureMetrics.getter(a1, a2, a3, a4);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(0, v6, v7, v8);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.MetricUtilitiesBase<A>.TextureMetrics, v9);
  v10 = Set.count.getter();
  swift_bridgeObjectRelease();
  v13 = v10;
  v11 = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x2207695CC](&v13, MEMORY[0x24BEE1768], v11, v6, v7);
}

uint64_t Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v10 = *v4;
  Entity.MetricUtilitiesBase.textureMetrics.getter(a1, a2, a3, a4);
  v7 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(255, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v6);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.MetricUtilitiesBase<A>.TextureMetrics, v7);
  v8 = type metadata accessor for Set();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : UInt64]);
  MEMORY[0x220772E3C](MEMORY[0x24BEE1718], v8);
  Sequence.reduce<A>(into:_:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v5, v3, v4, isUniquelyReferenced_nonNull_native);
  *a1 = v8;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = *v4;
  Entity.MetricUtilitiesBase.textureMetrics.getter(a1, a2, a3, a4);
  v6 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  Dictionary.init()();
  v8 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(255, v6, *(_QWORD *)(a1 + 24), v7);
  MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.MetricUtilitiesBase<A>.TextureMetrics, v8);
  v9 = type metadata accessor for Set();
  type metadata accessor for Dictionary();
  MEMORY[0x220772E3C](MEMORY[0x24BEE1718], v9);
  Sequence.reduce<A>(into:_:)();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v8 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - v9;
  v12 = *(_QWORD *)a2;
  v11 = *((_QWORD *)a2 + 1);
  v14 = type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(0, a3, a4, v13);
  v15 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v10, &a2[*(int *)(v14 + 40)], TupleTypeMetadata2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, TupleTypeMetadata2);
  v17[0] = v12;
  v17[1] = v11;
  type metadata accessor for Dictionary();
  swift_bridgeObjectRetain();
  return Dictionary.subscript.setter();
}

uint64_t Entity.MetricUtilitiesBase.videoItemCount.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t FileAssetCount;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v6 = (char *)&v10 - v5;
  REVideoComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    REVideoComponentGetVideoAsset();
    FileAssetCount = REVideoAssetGetFileAssetCount();
    v7 = lazy protocol witness table accessor for type Int and conformance Int();
    return MEMORY[0x2207695CC](&FileAssetCount, MEMORY[0x24BEE1768], v7, v1, v2);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x220769E3C](&unk_21BE6CF18, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    return MEMORY[0x220769D1C](v6, v1, v3);
  }
}

unint64_t lazy protocol witness table accessor for type Float and conformance Float()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Float and conformance Float;
  if (!lazy protocol witness table cache variable for type Float and conformance Float)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE14F0], MEMORY[0x24BEE14E8]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Float and conformance Float);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t outlined init with take of (key: AnyHashable, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: AnyHashable, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE3FC8], MEMORY[0x24BEE3F88]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE45A0], MEMORY[0x24BEE4568]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

uint64_t type metadata accessor for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Entity.MetricUtilitiesBase.TextureMetrics);
}

uint64_t partial apply for closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(uint64_t *a1, uint64_t *a2)
{
  return closure #1 in Entity.MetricUtilitiesBase.textureMemorySizes.getter(a1, a2);
}

uint64_t partial apply for closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(uint64_t a1, char *a2)
{
  uint64_t v2;

  return closure #1 in Entity.MetricUtilitiesBase.textureResolutions.getter(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void base witness table accessor for Equatable in Entity.MetricUtilitiesBase<A>.TextureMetrics()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t type metadata accessor for Entity.MetricUtilitiesBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Entity.MetricUtilitiesBase);
}

uint64_t type metadata completion function for Entity.MetricUtilitiesBase.TextureMetrics()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  char *v5;

  v3 = &unk_21BE6CEF0;
  v4 = MEMORY[0x24BEE0178] + 64;
  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v5 = &v2;
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + v6;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + v6) & ~v6) + v7 + ((v6 + 24) & (unint64_t)~v6) > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v12 = ~v6;
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    v14 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v15 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v14 = *v15;
    v16 = ((unint64_t)v14 + v6 + 8) & ~v6;
    v17 = ((unint64_t)v15 + v6 + 8) & ~v6;
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v18(v16, v17, v4);
    v18((v8 + v16) & v12, (v8 + v17) & v12, v4);
  }
  return a1;
}

uint64_t destroy for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v9)(unint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
  v9 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v9(v7, v4);
  return ((uint64_t (*)(unint64_t, uint64_t))v9)((*(_QWORD *)(v5 + 64) + v6 + v7) & ~v6, v4);
}

_QWORD *initializeWithCopy for Entity.MetricUtilitiesBase.TextureMetrics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 8) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 8) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  v12((*(_QWORD *)(v8 + 64) + v9 + v10) & ~v9, (*(_QWORD *)(v8 + 64) + v9 + v11) & ~v9, v7);
  return a1;
}

_QWORD *assignWithCopy for Entity.MetricUtilitiesBase.TextureMetrics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)v6 + v10 + 8) & ~v10;
  v12 = ((unint64_t)v7 + v10 + 8) & ~v10;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  v13(v11, v12, v8);
  v13((*(_QWORD *)(v9 + 64) + v10 + v11) & ~v10, (*(_QWORD *)(v9 + 64) + v10 + v12) & ~v10, v8);
  return a1;
}

_OWORD *initializeWithTake for Entity.MetricUtilitiesBase.TextureMetrics(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  *a1 = *a2;
  v4 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)v4 + v8 + 8) & ~v8;
  v10 = ((unint64_t)v5 + v8 + 8) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v11(v9, v10, v6);
  v11((*(_QWORD *)(v7 + 64) + v8 + v9) & ~v8, (*(_QWORD *)(v7 + 64) + v8 + v10) & ~v8, v6);
  return a1;
}

_QWORD *assignWithTake for Entity.MetricUtilitiesBase.TextureMetrics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)v7 + v11 + 8) & ~v11;
  v13 = ((unint64_t)v8 + v11 + 8) & ~v11;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40);
  v14(v12, v13, v9);
  v14((*(_QWORD *)(v10 + 64) + v11 + v12) & ~v11, (*(_QWORD *)(v10 + 64) + v11 + v13) & ~v11, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.MetricUtilitiesBase.TextureMetrics(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((*(_QWORD *)(v4 + 64) + v7) & ~v7) + *(_QWORD *)(v4 + 64) + ((v7 + 24) & ~v7);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_21BC90FD4 + 4 * byte_21BE6CE10[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for Entity.MetricUtilitiesBase.TextureMetrics(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64)
     + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X14 }
}

void sub_21BC912C0()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
  JUMPOUT(0x21BC912ACLL);
}

void sub_21BC912C8()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
  JUMPOUT(0x21BC912ACLL);
}

void sub_21BC912D8()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
  JUMPOUT(0x21BC912ACLL);
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;

  result = specialized _NativeDictionary.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_8;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 0;
  v5 = specialized Dictionary.Keys.subscript.getter(result, v3, 0, a1);
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Entity.ConfigurationCatalog.Configuration.init(id:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Entity.ConfigurationCatalog.Configuration.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v12 = (_QWORD *)specialized Sequence.compactMap<A>(_:)(a3);
  v13 = v12;
  if (!v12[2])
  {
    swift_bridgeObjectRelease();
    if (a5)
    {
      if (!*(_QWORD *)(a3 + 16))
        goto LABEL_13;
    }
    else
    {
      v24 = specialized Collection.first.getter(a3);
      if (!v25)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_OWORD *)v31 = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_QWORD *)(v31 + 32) = 0;
        v32 = 12;
        goto LABEL_14;
      }
      a4 = v24;
      a5 = v25;
      if (!*(_QWORD *)(a3 + 16))
      {
LABEL_13:
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_QWORD *)v31 = a4;
        *(_QWORD *)(v31 + 8) = a5;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0;
        *(_QWORD *)(v31 + 16) = 0;
        v32 = 10;
LABEL_14:
        *(_BYTE *)(v31 + 40) = v32;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v26 = specialized __RawDictionaryStorage.find<A>(_:)(a4, a5);
    if ((v27 & 1) != 0)
    {
      v28 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v26);
      v30 = *v28;
      v29 = v28[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      *a6 = v30;
      a6[1] = v29;
      a6[2] = a1;
      a6[3] = a2;
      a6[4] = a3;
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v15 = v12[4];
  v14 = v12[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v13[2];
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRetain();
    v17 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if ((v18 & 1) != 0)
    {
      v19 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v17);
      v21 = *v19;
      v20 = v19[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
      swift_allocError();
      *(_QWORD *)v22 = v16;
      *(_QWORD *)(v22 + 8) = v15;
      *(_QWORD *)(v22 + 16) = v14;
      *(_QWORD *)(v22 + 24) = v21;
      *(_QWORD *)(v22 + 32) = v20;
      *(_BYTE *)(v22 + 40) = 7;
      return swift_willThrow();
    }
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.configurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.defaultConfiguration.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  Swift::Int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;

  v7 = v6;
  v50 = (_QWORD *)MEMORY[0x24BEE4B00];
  v13 = *(_QWORD *)(a3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.Configuration]);
  Dictionary.reserveCapacity(_:)(v13);
  v14 = v50;
  v15 = *(_QWORD *)(a3 + 16);
  if (!v15)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    result = Entity.ConfigurationCatalog.ConfigurationSet.init(id:configurations:defaultConfigurationId:)(a1, a2, (uint64_t)v14, a4, a5, &v47);
    if (!v7)
    {
      v38 = v48;
      v39 = v49;
      *(_OWORD *)a6 = v47;
      *(_QWORD *)(a6 + 16) = v38;
      *(_OWORD *)(a6 + 24) = v39;
    }
    return result;
  }
  v41 = a4;
  v42 = v6;
  v43 = a6;
  v44 = a2;
  v45 = a5;
  swift_bridgeObjectRetain();
  v16 = (uint64_t *)(a3 + 40);
  while (1)
  {
    v18 = *(v16 - 1);
    v19 = *v16;
    v20 = v14[2];
    swift_bridgeObjectRetain();
    if (v20)
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      v22 = v21;
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_QWORD *)v40 = v18;
        *(_QWORD *)(v40 + 8) = v19;
        *(_QWORD *)(v40 + 24) = 0;
        *(_QWORD *)(v40 + 32) = 0;
        *(_QWORD *)(v40 + 16) = 0;
        *(_BYTE *)(v40 + 40) = 5;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v47 = v14;
    v25 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
    v26 = v14[2];
    v27 = (v24 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v29 = v24;
    if (v14[3] >= v28)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v14 = (_QWORD *)v47;
        if ((v24 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v14 = (_QWORD *)v47;
        if ((v29 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, isUniquelyReferenced_nonNull_native);
      v30 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      if ((v29 & 1) != (v31 & 1))
        goto LABEL_25;
      v25 = v30;
      v14 = (_QWORD *)v47;
      if ((v29 & 1) != 0)
      {
LABEL_3:
        v17 = (uint64_t *)(v14[7] + 16 * v25);
        swift_bridgeObjectRelease();
        *v17 = v18;
        v17[1] = v19;
        goto LABEL_4;
      }
    }
    v14[(v25 >> 6) + 8] |= 1 << v25;
    v32 = (uint64_t *)(v14[6] + 16 * v25);
    *v32 = v18;
    v32[1] = v19;
    v33 = (uint64_t *)(v14[7] + 16 * v25);
    *v33 = v18;
    v33[1] = v19;
    v34 = v14[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_24;
    v14[2] = v36;
    swift_bridgeObjectRetain();
LABEL_4:
    v16 += 2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v15)
    {
      swift_bridgeObjectRelease();
      a2 = v44;
      a5 = v45;
      v7 = v42;
      a6 = v43;
      a4 = v41;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance Entity.ConfigurationCatalog.ConfigurationSet@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationSetCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCollectionCache.init(sourcePath:configurationSetCaches:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = a3;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  if (a3 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    v33 = v3;
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    v33 = v3;
    if (v5)
    {
LABEL_3:
      v36 = v4 & 0xC000000000000001;
      v3 = (_QWORD *)MEMORY[0x24BEE4B00];
      v6 = 4;
      v34 = v5;
      v35 = v4;
      while (1)
      {
        v8 = v6 - 4;
        if (v36)
        {
          v9 = MEMORY[0x220769770](v6 - 4, v4);
          v10 = v6 - 3;
          if (__OFADD__(v8, 1))
            goto LABEL_26;
        }
        else
        {
          v9 = *(_QWORD *)(v4 + 8 * v6);
          swift_retain();
          v10 = v6 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        v11 = *(_QWORD *)(v9 + 40);
        if (v3[2])
        {
          v12 = *(_QWORD *)(v9 + 32);
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v12, v11);
          v14 = v13;
          swift_bridgeObjectRelease();
          if ((v14 & 1) != 0)
          {
            v29 = *(_QWORD *)(v9 + 32);
            v28 = *(_QWORD *)(v9 + 40);
            lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
            swift_allocError();
            *(_QWORD *)v30 = v29;
            *(_QWORD *)(v30 + 8) = v28;
            *(_QWORD *)(v30 + 24) = 0;
            *(_QWORD *)(v30 + 32) = 0;
            *(_QWORD *)(v30 + 16) = 0;
            *(_BYTE *)(v30 + 40) = 6;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            v31 = v33;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_deallocPartialClassInstance();
            return (uint64_t)v31;
          }
          v11 = *(_QWORD *)(v9 + 40);
        }
        v4 = *(_QWORD *)(v9 + 32);
        swift_bridgeObjectRetain();
        swift_retain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v11);
        v18 = v3[2];
        v19 = (v16 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          goto LABEL_27;
        v21 = v16;
        if (v3[3] >= v20)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v16 & 1) != 0)
              goto LABEL_4;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v21 & 1) != 0)
              goto LABEL_4;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
          v22 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v11);
          if ((v21 & 1) != (v23 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v17 = v22;
          if ((v21 & 1) != 0)
          {
LABEL_4:
            v7 = v3[7];
            swift_release();
            *(_QWORD *)(v7 + 8 * v17) = v9;
            goto LABEL_5;
          }
        }
        v3[(v17 >> 6) + 8] |= 1 << v17;
        v24 = (uint64_t *)(v3[6] + 16 * v17);
        *v24 = v4;
        v24[1] = v11;
        *(_QWORD *)(v3[7] + 8 * v17) = v9;
        v25 = v3[2];
        v26 = __OFADD__(v25, 1);
        v27 = v25 + 1;
        if (v26)
          goto LABEL_28;
        v3[2] = v27;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v6;
        v4 = v35;
        if (v10 == v34)
          goto LABEL_31;
      }
    }
  }
  v3 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_31:
  swift_bridgeObjectRelease_n();
  v31 = v33;
  v33[5] = v3;
  return (uint64_t)v31;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCollectionCache.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationMapCache.init(configurationCollectionCaches:)(unint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v2 = a1;
  v1[2] = a1;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v31 = v1;
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    v31 = v1;
    if (v3)
    {
LABEL_3:
      v34 = v2 & 0xC000000000000001;
      v1 = (_QWORD *)MEMORY[0x24BEE4B00];
      v4 = 4;
      v32 = v3;
      v33 = v2;
      while (1)
      {
        v6 = v4 - 4;
        if (v34)
        {
          v7 = MEMORY[0x220769770](v4 - 4, v2);
          v8 = v4 - 3;
          if (__OFADD__(v6, 1))
            goto LABEL_26;
        }
        else
        {
          v7 = *(_QWORD *)(v2 + 8 * v4);
          swift_retain();
          v8 = v4 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
        v9 = *(_QWORD *)(v7 + 24);
        if (v1[2])
        {
          v10 = *(_QWORD *)(v7 + 16);
          swift_bridgeObjectRetain();
          specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
          v12 = v11;
          swift_bridgeObjectRelease();
          if ((v12 & 1) != 0)
          {
            v27 = *(_QWORD *)(v7 + 16);
            v26 = *(_QWORD *)(v7 + 24);
            lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
            swift_allocError();
            *(_QWORD *)v28 = v27;
            *(_QWORD *)(v28 + 8) = v26;
            *(_QWORD *)(v28 + 24) = 0;
            *(_QWORD *)(v28 + 32) = 0;
            *(_QWORD *)(v28 + 16) = 0;
            *(_BYTE *)(v28 + 40) = 9;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            v29 = v31;
            swift_bridgeObjectRelease();
            swift_deallocPartialClassInstance();
            return (uint64_t)v29;
          }
          v9 = *(_QWORD *)(v7 + 24);
        }
        v2 = *(_QWORD *)(v7 + 16);
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v15 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v9);
        v16 = v1[2];
        v17 = (v14 & 1) == 0;
        v18 = v16 + v17;
        if (__OFADD__(v16, v17))
          goto LABEL_27;
        v19 = v14;
        if (v1[3] >= v18)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v14 & 1) != 0)
              goto LABEL_4;
          }
          else
          {
            specialized _NativeDictionary.copy()();
            if ((v19 & 1) != 0)
              goto LABEL_4;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
          v20 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v9);
          if ((v19 & 1) != (v21 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          v15 = v20;
          if ((v19 & 1) != 0)
          {
LABEL_4:
            v5 = v1[7];
            swift_release();
            *(_QWORD *)(v5 + 8 * v15) = v7;
            goto LABEL_5;
          }
        }
        v1[(v15 >> 6) + 8] |= 1 << v15;
        v22 = (uint64_t *)(v1[6] + 16 * v15);
        *v22 = v2;
        v22[1] = v9;
        *(_QWORD *)(v1[7] + 8 * v15) = v7;
        v23 = v1[2];
        v24 = __OFADD__(v23, 1);
        v25 = v23 + 1;
        if (v24)
          goto LABEL_28;
        v1[2] = v25;
        swift_bridgeObjectRetain();
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ++v4;
        v2 = v33;
        if (v8 == v32)
          goto LABEL_31;
      }
    }
  }
  v1 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_31:
  swift_bridgeObjectRelease_n();
  v29 = v31;
  v31[3] = v1;
  return (uint64_t)v29;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.init(entity:configurationSpecifications:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.entity.getter()
{
  return swift_retain();
}

uint64_t Entity.ConfigurationCatalog.ConfigurationCombination.configurationSpecifications.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Entity.ConfigurationCatalog.init(configurationSets:combinations:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
  swift_allocObject();
  result = Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)(a1, a2);
  if (!v3)
  {
    *a3 = 0;
    a3[1] = result;
    a3[2] = &protocol witness table for Entity.ConfigurationCatalog.CachedEntityReader;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  Swift::Int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  _QWORD *v39;

  v4 = v3;
  v39 = (_QWORD *)MEMORY[0x24BEE4B00];
  v8 = *(_QWORD *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSet]);
  Dictionary.reserveCapacity(_:)(v8);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    type metadata accessor for Entity.ConfigurationCatalog.CachedEntityReader();
    swift_allocObject();
    result = Entity.ConfigurationCatalog.CachedEntityReader.init(configurationSets:combinations:)((uint64_t)v39, a2);
    if (!v4)
    {
      *a3 = 0;
      a3[1] = result;
      a3[2] = &protocol witness table for Entity.ConfigurationCatalog.CachedEntityReader;
    }
    return result;
  }
  v35 = v3;
  v36 = a2;
  swift_bridgeObjectRetain();
  v10 = (_OWORD *)(a1 + 56);
  while (1)
  {
    v13 = *((_QWORD *)v10 - 3);
    v12 = *((_QWORD *)v10 - 2);
    v14 = *((_QWORD *)v10 - 1);
    v38 = *v10;
    v15 = v39[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15)
    {
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v14, v38);
      v17 = v16;
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
      {
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_QWORD *)v34 = v14;
        *(_QWORD *)(v34 + 8) = v38;
        *(_QWORD *)(v34 + 24) = 0;
        *(_QWORD *)(v34 + 32) = 0;
        *(_QWORD *)(v34 + 16) = 0;
        *(_BYTE *)(v34 + 40) = 6;
        swift_bridgeObjectRetain();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
    v37 = v9;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v19 = v14;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v14, v38);
    v22 = v39[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v39[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v20 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v25 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      v26 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v38);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_25;
      v21 = v26;
      if ((v25 & 1) != 0)
      {
LABEL_3:
        v11 = v39[7] + 40 * v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v11 = v13;
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)(v11 + 16) = v19;
        *(_OWORD *)(v11 + 24) = v38;
        goto LABEL_4;
      }
    }
    v39[(v21 >> 6) + 8] |= 1 << v21;
    v28 = (uint64_t *)(v39[6] + 16 * v21);
    *v28 = v19;
    v28[1] = v38;
    v29 = v39[7] + 40 * v21;
    *(_QWORD *)v29 = v13;
    *(_QWORD *)(v29 + 8) = v12;
    *(_QWORD *)(v29 + 16) = v19;
    *(_OWORD *)(v29 + 24) = v38;
    v30 = v39[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_24;
    v39[2] = v32;
    swift_bridgeObjectRetain();
LABEL_4:
    v10 = (_OWORD *)((char *)v10 + 40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v37 - 1;
    if (v37 == 1)
    {
      swift_bridgeObjectRelease();
      a2 = v36;
      v4 = v35;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.write(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 1000) = a1;
  *(_OWORD *)(v2 + 1008) = *(_OWORD *)(v1 + 8);
  type metadata accessor for MainActor();
  *(_QWORD *)(v2 + 1024) = static MainActor.shared.getter();
  *(_QWORD *)(v2 + 1032) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v2 + 1040) = v3;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 1144) = a1;
  *(_QWORD *)(v3 + 1152) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?(v3 + 664, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of BodyTrackingComponent?(v3 + 664, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.write(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char *v57;
  char v58;
  char v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int8x16_t *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;

  v1 = *(_QWORD *)(v0 + 1016);
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 1048) = ObjectType;
  v3 = (*(uint64_t (**)(void))(v1 + 8))();
  v5 = v4;
  *(_QWORD *)(v0 + 1056) = v3;
  *(_QWORD *)(v0 + 1064) = v4;
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1) + 24);
  swift_bridgeObjectRetain();
  swift_release();
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_14;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v5);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_QWORD *)v18 = v3;
    *(_QWORD *)(v18 + 8) = v5;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 32) = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 40) = 0;
    swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  *(_QWORD *)(v0 + 1072) = v9;
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v0 + 1080) = v10;
  *(_QWORD *)(v0 + 968) = MEMORY[0x24BEE4AF8];
  if (v10 >> 62)
    goto LABEL_16;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain_n();
  v69 = (_QWORD *)v0;
  if (v11)
  {
    while (v11 >= 1)
    {
      v13 = 0;
      v14 = 1;
      while (1)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          v15 = MEMORY[0x220769770](v13, v10);
        }
        else
        {
          v15 = *(_QWORD *)(v10 + 8 * v13 + 32);
          swift_retain();
        }
        v16 = *(_QWORD *)(v15 + 48);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        v0 = *(_QWORD *)(v16 + 16);
        swift_bridgeObjectRelease();
        v17 = v14 * v0;
        if ((unsigned __int128)(v14 * (__int128)v0) >> 64 != (v14 * v0) >> 63)
          break;
        ++v13;
        v14 *= v0;
        if (v11 == v13)
          goto LABEL_18;
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain_n();
      result = _CocoaArrayWrapper.endIndex.getter();
      v11 = result;
      v69 = (_QWORD *)v0;
      if (!result)
        goto LABEL_17;
    }
    __break(1u);
    goto LABEL_88;
  }
LABEL_17:
  v17 = 1;
LABEL_18:
  v19 = (uint64_t)v69;
  swift_bridgeObjectRelease();
  specialized Array._reserveCapacityImpl(minimumCapacity:growForAppend:)(v17, 0);
  specialized Array._endMutation()();
  v69[122] = MEMORY[0x24BEE4B08];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
  Set.reserveCapacity(_:)(v17);
  v69[123] = MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String]]);
  Dictionary.reserveCapacity(_:)(v17);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v69[136] = v20;
  v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v20)
  {
    v73 = (_QWORD *)MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
LABEL_88:
      __break(1u);
      return result;
    }
    v22 = 0;
    v23 = v73;
    v24 = v10 & 0xC000000000000001;
    v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if (v24)
      {
        MEMORY[0x220769770](v22, v10);
        swift_unknownObjectRelease();
      }
      v26 = v73[2];
      v25 = v73[3];
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v21 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      ++v22;
      v73[2] = v26 + 1;
      v73[v26 + 4] = 0;
    }
    while (v20 != v22);
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
    v27 = 0;
    do
    {
      if (v24)
      {
        MEMORY[0x220769770](v27, v10);
        swift_unknownObjectRelease();
      }
      v29 = v21[2];
      v28 = v21[3];
      if (v29 >= v28 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      ++v27;
      v21[2] = v29 + 1;
      v30 = &v21[2 * v29];
      v30[4] = 0;
      v30[5] = 0xE000000000000000;
    }
    while (v20 != v27);
  }
  else
  {
    v23 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_86;
  while (1)
  {
    v71 = v21;
    *(_QWORD *)(v19 + 1096) = v23;
    *(_QWORD *)(v19 + 1104) = 0;
    v31 = *(_QWORD *)(v19 + 1088);
    if (!v31)
      break;
    v32 = 0;
    v72 = (_QWORD *)(v19 + 992);
    v21 = (_QWORD *)MEMORY[0x24BEE4B00];
    v68 = 1;
LABEL_40:
    if ((uint64_t)v32 > v31)
      v31 = v32;
    v67 = v31;
    v33 = 16 * v32;
    while (v67 != v32)
    {
      v34 = *(_QWORD *)(v19 + 1080);
      if ((v34 & 0xC000000000000001) != 0)
      {
        v23 = (_QWORD *)MEMORY[0x220769770](v32);
      }
      else
      {
        if (v32 >= *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_85;
        v23 = *(_QWORD **)(v34 + 8 * v32 + 32);
        swift_retain();
      }
      v35 = *(_QWORD *)(v19 + 1096);
      if (v32 >= *(_QWORD *)(v35 + 16))
        goto LABEL_79;
      v36 = *(_QWORD *)(v35 + 8 * v32 + 32);
      if ((v36 & 0x8000000000000000) != 0)
        goto LABEL_80;
      v37 = v23[7];
      if (v36 >= *(_QWORD *)(v37 + 16))
        goto LABEL_81;
      v70 = v33;
      v38 = v37 + 16 * v36;
      v40 = *(_QWORD *)(v38 + 32);
      v39 = *(_QWORD *)(v38 + 40);
      v19 = v23[4];
      v41 = v23[5];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v72 = v21;
      v44 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v41);
      v45 = v21[2];
      v46 = (v43 & 1) == 0;
      v47 = v45 + v46;
      if (__OFADD__(v45, v46))
        goto LABEL_82;
      v48 = v43;
      if (v21[3] >= v47)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
        v49 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v41);
        if ((v48 & 1) != (v50 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v44 = v49;
      }
      v21 = (_QWORD *)*v72;
      if ((v48 & 1) != 0)
      {
        v51 = (_QWORD *)(v21[7] + 16 * v44);
        swift_bridgeObjectRelease();
        *v51 = v40;
        v51[1] = v39;
      }
      else
      {
        v21[(v44 >> 6) + 8] |= 1 << v44;
        v52 = (uint64_t *)(v21[6] + 16 * v44);
        *v52 = v19;
        v52[1] = v41;
        v53 = (_QWORD *)(v21[7] + 16 * v44);
        *v53 = v40;
        v53[1] = v39;
        v54 = v21[2];
        v55 = __OFADD__(v54, 1);
        v56 = v54 + 1;
        if (v55)
          goto LABEL_84;
        v21[2] = v56;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v19 = (uint64_t)v69;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v71 = specialized _ArrayBuffer._consumeAndCreateNew()(v71);
      if (v32 >= v71[2])
        goto LABEL_83;
      v57 = (char *)v71 + v70;
      *((_QWORD *)v57 + 4) = v40;
      *((_QWORD *)v57 + 5) = v39;
      swift_bridgeObjectRelease();
      if ((v68 & 1) != 0)
      {
        if (v23[2] == v40 && v23[3] == v39)
        {
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_release();
          if ((v58 & 1) == 0)
          {
            v68 = 0;
            v59 = 0;
            v31 = v69[136];
            if (v31 - 1 == v32++)
              goto LABEL_76;
            goto LABEL_40;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      ++v32;
      v33 = v70 + 16;
      if (v32 == v69[136])
      {
        v59 = v68;
        goto LABEL_76;
      }
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
  }
  v59 = 1;
  v21 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_76:
  *(_QWORD *)(v19 + 1120) = v71;
  *(_BYTE *)(v19 + 499) = v59 & 1;
  *(_QWORD *)(v19 + 1112) = v21;
  v61 = *(_QWORD *)(v19 + 1064);
  v62 = *(_QWORD *)(v19 + 1056);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
  v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v63 + 32) = v62;
  *(_QWORD *)(v63 + 40) = v61;
  *(_QWORD *)(v63 + 48) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v64 = specialized Dictionary.init(dictionaryLiteral:)(v63);
  *(_QWORD *)(v19 + 1128) = v64;
  *(_QWORD *)(v19 + 664) = 1;
  *(_OWORD *)(v19 + 672) = 0u;
  *(_OWORD *)(v19 + 688) = 0u;
  *(_OWORD *)(v19 + 704) = 0u;
  *(_OWORD *)(v19 + 720) = 0u;
  *(_OWORD *)(v19 + 736) = 0u;
  v65 = (int8x16_t *)swift_task_alloc();
  *(_QWORD *)(v19 + 1136) = v65;
  v65->i64[0] = v19;
  v65->i64[1] = (uint64_t)Entity.ConfigurationCatalog.write(to:);
  v66 = *(_QWORD *)(v19 + 1048);
  v65[8] = vextq_s8(*(int8x16_t *)(v19 + 1008), *(int8x16_t *)(v19 + 1008), 8uLL);
  v65[7].i64[0] = v19 + 664;
  v65[7].i64[1] = v66;
  v65[6].i64[1] = v64;
  return swift_task_switch();
}

{
  uint64_t v0;
  Swift::Int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  Swift::Int v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t *v83;
  uint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int8x16_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  _QWORD *v111;
  uint64_t v112;

  v103 = v0 + 816;
  v104 = v0 + 856;
  v108 = v0 + 976;
  v110 = (uint64_t *)(v0 + 992);
  REEntityGetName();
  v1 = String.init(cString:)();
  v3 = v2;
  v4 = *(_QWORD *)(v0 + 1104);
  do
  {
    v8 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v8 = v1 & 0xFFFFFFFFFFFFLL;
    if (v8)
    {
      v111 = (_QWORD *)v4;
      v9 = *(_QWORD *)v108;
      if (!*(_QWORD *)(*(_QWORD *)v108 + 16))
        goto LABEL_23;
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(v9 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_22;
      v13 = *(_QWORD *)(v9 + 48);
      v14 = (_QWORD *)(v13 + 16 * v12);
      v15 = *v14 == v1 && v14[1] == v3;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v16 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v16;
          if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            break;
          v17 = (_QWORD *)(v13 + 16 * v12);
          v18 = *v17 == v1 && v17[1] == v3;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_2;
        }
LABEL_22:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_23:
        v19 = *(unsigned __int8 *)(v0 + 499);
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)((Swift::Int *)(v0 + 936), v1, v3);
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        REEntitySetName();
        swift_release();
        RENetworkMarkEntityMetadataDirty();
        v6 = *(_QWORD *)(v0 + 968);
        v4 = (unint64_t)v6 >> 62;
        if (v19 == 1)
        {
          result = swift_retain();
          v21 = 0;
          if (v4)
            goto LABEL_116;
        }
        else
        {
          if (v4)
            goto LABEL_115;
          v21 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
          result = swift_retain();
        }
        goto LABEL_28;
      }
LABEL_2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = (uint64_t)v111;
    }
    *(_QWORD *)(v0 + 920) = 0x5F656E656353;
    *(_QWORD *)(v0 + 928) = 0xE600000000000000;
    *(_QWORD *)(v0 + 960) = v4;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v6 = v0 + 920;
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v0 + 920);
    v3 = *(_QWORD *)(v0 + 928);
    v7 = __OFADD__(v4++, 1);
  }
  while (!v7);
  __break(1u);
  while (1)
  {
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    do
    {
      __break(1u);
LABEL_115:
      swift_retain();
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v4)
      {
LABEL_116:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        result = swift_bridgeObjectRelease();
        if (v4 < v21)
        {
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
          return result;
        }
      }
      else
      {
LABEL_28:
        v4 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v4 < v21)
          goto LABEL_117;
      }
    }
    while (v21 < 0);
    v4 = *(_QWORD *)(v0 + 1120);
    v22 = *(_QWORD *)(v0 + 1096);
    specialized Array.replaceSubrange<A>(_:with:)(v21, v21, *(_QWORD *)(v0 + 1144));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = *(_QWORD *)(v0 + 984);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v112 = v23;
    *(_QWORD *)(v0 + 984) = 0x8000000000000000;
    v6 = (uint64_t)&v112;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v1, v3, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v0 + 984) = v112;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = *(_QWORD *)(v22 + 16);
    if (!v25)
      break;
    v26 = v25 + 3;
    while (1)
    {
      v27 = *(_QWORD *)(v0 + 1096);
      if ((unint64_t)(v26 - 4) >= *(_QWORD *)(v27 + 16))
        break;
      v28 = *(_QWORD *)(v27 + 8 * v26);
      v1 = v28 + 1;
      if (__OFADD__(v28, 1))
        goto LABEL_103;
      v29 = *(_QWORD *)(v0 + 1080);
      if ((v29 & 0xC000000000000001) != 0)
      {
        v30 = MEMORY[0x220769770]();
      }
      else
      {
        if ((unint64_t)(v26 - 4) >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_111;
        v30 = *(_QWORD *)(v29 + 8 * v26);
        swift_retain();
      }
      v31 = v26 - 3;
      v4 = *(_QWORD *)(v30 + 40);
      v32 = *(_QWORD *)(v30 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v6 = *(_QWORD *)(v32 + 16);
      result = swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(*(_QWORD *)(v0 + 1096) + 16);
      if (v1 < v6)
      {
        if (v31 > v33)
          goto LABEL_118;
        *(_QWORD *)(v27 + 8 * v26) = v1;
        swift_bridgeObjectRelease();
        swift_release();
        v4 = *(_QWORD *)(v0 + 1120);
        v6 = *(_QWORD *)(v0 + 1112);
        *(_QWORD *)(v0 + 1104) = v111;
        v64 = *(_QWORD *)(v0 + 1088);
        if (!v64)
        {
          v90 = 1;
LABEL_98:
          *(_QWORD *)(v0 + 1120) = v4;
          *(_BYTE *)(v0 + 499) = v90 & 1;
          *(_QWORD *)(v0 + 1112) = v6;
          v97 = *(_QWORD *)(v0 + 1064);
          v98 = *(_QWORD *)(v0 + 1056);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
          v99 = swift_allocObject();
          *(_OWORD *)(v99 + 16) = xmmword_21BE411F0;
          *(_QWORD *)(v99 + 32) = v98;
          *(_QWORD *)(v99 + 40) = v97;
          *(_QWORD *)(v99 + 48) = v6;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v100 = specialized Dictionary.init(dictionaryLiteral:)(v99);
          *(_QWORD *)(v0 + 1128) = v100;
          *(_QWORD *)(v0 + 664) = 1;
          *(_OWORD *)(v0 + 672) = 0u;
          *(_OWORD *)(v0 + 688) = 0u;
          *(_OWORD *)(v0 + 704) = 0u;
          *(_OWORD *)(v0 + 720) = 0u;
          *(_OWORD *)(v0 + 736) = 0u;
          v101 = (int8x16_t *)swift_task_alloc();
          *(_QWORD *)(v0 + 1136) = v101;
          v101->i64[0] = v0;
          v101->i64[1] = (uint64_t)Entity.ConfigurationCatalog.write(to:);
          v102 = *(_QWORD *)(v0 + 1048);
          v101[8] = vextq_s8(*(int8x16_t *)(v0 + 1008), *(int8x16_t *)(v0 + 1008), 8uLL);
          v101[7].i64[0] = v0 + 664;
          v101[7].i64[1] = v102;
          v101[6].i64[1] = v100;
          return swift_task_switch();
        }
        v65 = 0;
        v106 = 1;
LABEL_60:
        if ((uint64_t)v65 > v64)
          v64 = v65;
        v105 = v64;
        v66 = 16 * v65;
        while (v105 != v65)
        {
          v67 = *(_QWORD *)(v0 + 1080);
          if ((v67 & 0xC000000000000001) != 0)
          {
            v68 = (_QWORD *)MEMORY[0x220769770](v65);
          }
          else
          {
            if (v65 >= *(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_113;
            v68 = (_QWORD *)swift_retain();
          }
          v69 = *(_QWORD *)(v0 + 1096);
          if (v65 >= *(_QWORD *)(v69 + 16))
            goto LABEL_106;
          v70 = *(_QWORD *)(v69 + 8 * v65 + 32);
          if ((v70 & 0x8000000000000000) != 0)
            goto LABEL_107;
          v71 = v68[7];
          if (v70 >= *(_QWORD *)(v71 + 16))
            goto LABEL_108;
          v107 = v68;
          v109 = v66;
          v111 = (_QWORD *)v4;
          v72 = v71 + 16 * v70;
          v3 = *(_QWORD *)(v72 + 32);
          v73 = *(_QWORD *)(v72 + 40);
          v74 = v68[4];
          v75 = v68[5];
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          v76 = swift_isUniquelyReferenced_nonNull_native();
          *v110 = v6;
          v4 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
          v78 = *(_QWORD *)(v6 + 16);
          v79 = (v77 & 1) == 0;
          v80 = v78 + v79;
          if (__OFADD__(v78, v79))
            goto LABEL_109;
          v1 = v77;
          if (*(_QWORD *)(v6 + 24) >= v80)
          {
            if ((v76 & 1) == 0)
              specialized _NativeDictionary.copy()();
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v80, v76);
            v81 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
            if ((v1 & 1) != (v82 & 1))
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            v4 = v81;
          }
          v6 = *v110;
          if ((v1 & 1) != 0)
          {
            v83 = (unint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v4);
            swift_bridgeObjectRelease();
            *v83 = v3;
            v83[1] = v73;
          }
          else
          {
            *(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6) + 64) |= 1 << v4;
            v84 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v4);
            *v84 = v74;
            v84[1] = v75;
            v85 = (unint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v4);
            *v85 = v3;
            v85[1] = v73;
            v86 = *(_QWORD *)(v6 + 16);
            v7 = __OFADD__(v86, 1);
            v87 = v86 + 1;
            if (v7)
              goto LABEL_112;
            *(_QWORD *)(v6 + 16) = v87;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v4 = (uint64_t)v111;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v111);
          if (v65 >= *(_QWORD *)(v4 + 16))
            goto LABEL_110;
          v88 = v4 + v109;
          *(_QWORD *)(v88 + 32) = v3;
          *(_QWORD *)(v88 + 40) = v73;
          swift_bridgeObjectRelease();
          if ((v106 & 1) != 0)
          {
            if (v107[2] == v3 && v107[3] == v73)
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_release();
              if ((v89 & 1) == 0)
              {
                v106 = 0;
                v90 = 0;
                v64 = *(_QWORD *)(v0 + 1088);
                v15 = v64 - 1 == v65++;
                if (v15)
                  goto LABEL_98;
                goto LABEL_60;
              }
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_release();
          }
          ++v65;
          v66 = v109 + 16;
          if (v65 == *(_QWORD *)(v0 + 1088))
          {
            v90 = v106;
            goto LABEL_98;
          }
        }
        goto LABEL_105;
      }
      if (v31 > v33)
        goto LABEL_104;
      *(_QWORD *)(v27 + 8 * v26--) = 0;
      if (v31 <= 1)
        goto LABEL_41;
    }
  }
LABEL_41:
  swift_release();
  v34 = *(_QWORD *)(v0 + 1088);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v35, v103);
  v36 = *(_QWORD *)(v0 + 968);
  *(_QWORD *)(v0 + 952) = MEMORY[0x24BEE4B00];
  v37 = swift_task_alloc();
  *(_QWORD *)(v37 + 16) = v103;
  *(_QWORD *)(v37 + 24) = v0 + 952;
  swift_bridgeObjectRetain();
  v38 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, uint64_t *))partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:), v37, v36);
  swift_task_dealloc();
  v39 = *(_QWORD *)(v0 + 952);
  outlined init with copy of __REAssetService(v103, v104);
  __REAssetBundle.init(sceneAssets:assetService:assetMapSceneDescriptorsByAsset:header:)(v38, v104, v39, 0, (uint64_t *)(v0 + 752));
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 1216) = 0;
  *(_BYTE *)(v0 + 498) = 1;
  *(_BYTE *)(v0 + 1208) = 0;
  v40 = *(_QWORD *)(v0 + 984);
  *(_QWORD *)(v0 + 1160) = v40;
  if (v34)
  {
    v41 = *(_QWORD *)(v0 + 1088);
    v42 = MEMORY[0x24BEE4AF8];
    v112 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41, 0);
    v43 = 0;
    v44 = v112;
    do
    {
      v45 = *(_QWORD *)(v0 + 1080);
      if ((v45 & 0xC000000000000001) != 0)
      {
        v46 = MEMORY[0x220769770](v43);
      }
      else
      {
        v46 = *(_QWORD *)(v45 + 8 * v43 + 32);
        swift_retain();
      }
      v48 = *(_QWORD *)(v46 + 32);
      v47 = *(_QWORD *)(v46 + 40);
      swift_bridgeObjectRetain();
      swift_release();
      v112 = v44;
      v50 = *(_QWORD *)(v44 + 16);
      v49 = *(_QWORD *)(v44 + 24);
      if (v50 >= v49 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
        v44 = v112;
      }
      v51 = *(_QWORD *)(v0 + 1088);
      ++v43;
      *(_QWORD *)(v44 + 16) = v50 + 1;
      v52 = v44 + 16 * v50;
      *(_QWORD *)(v52 + 32) = v48;
      *(_QWORD *)(v52 + 40) = v47;
    }
    while (v43 != v51);
    v53 = *(_QWORD *)(v0 + 1088);
    v112 = v42;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
    v54 = 0;
    v55 = v112;
    do
    {
      v56 = *(_QWORD *)(v0 + 1080);
      if ((v56 & 0xC000000000000001) != 0)
      {
        v57 = MEMORY[0x220769770](v54);
      }
      else
      {
        v57 = *(_QWORD *)(v56 + 8 * v54 + 32);
        swift_retain();
      }
      v59 = *(_QWORD *)(v57 + 16);
      v58 = *(_QWORD *)(v57 + 24);
      swift_bridgeObjectRetain();
      swift_release();
      v112 = v55;
      v61 = *(_QWORD *)(v55 + 16);
      v60 = *(_QWORD *)(v55 + 24);
      if (v61 >= v60 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
        v55 = v112;
      }
      v62 = *(_QWORD *)(v0 + 1088);
      ++v54;
      *(_QWORD *)(v55 + 16) = v61 + 1;
      v63 = v55 + 16 * v61;
      *(_QWORD *)(v63 + 32) = v59;
      *(_QWORD *)(v63 + 40) = v58;
    }
    while (v54 != v62);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x24BEE4AF8];
    v55 = MEMORY[0x24BEE4AF8];
  }
  *(_QWORD *)(v0 + 1176) = v55;
  *(_QWORD *)(v0 + 1168) = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 176) = 1;
  *(_QWORD *)(v0 + 184) = 1;
  *(_BYTE *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = 0;
  *(_DWORD *)(v0 + 208) = 16777217;
  *(_OWORD *)(v0 + 216) = xmmword_21BE66FF0;
  *(_QWORD *)(v0 + 232) = 0;
  *(_BYTE *)(v0 + 244) = 0;
  *(_DWORD *)(v0 + 240) = 0;
  *(_QWORD *)(v0 + 248) = 12;
  *(_BYTE *)(v0 + 256) = 0;
  *(_BYTE *)(v0 + 257) = 0;
  *(_QWORD *)(v0 + 264) = v44;
  *(_QWORD *)(v0 + 272) = v55;
  *(_QWORD *)(v0 + 280) = v40;
  *(_OWORD *)(v0 + 288) = 0u;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_QWORD *)(v0 + 320) = 0;
  *(_BYTE *)(v0 + 328) = 1;
  v91 = *(_OWORD *)(v0 + 224);
  v92 = *(_OWORD *)(v0 + 256);
  v93 = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v0 + 96) = v92;
  v94 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 64) = v91;
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 32) = v94;
  v95 = *(_OWORD *)(v0 + 288);
  v96 = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v0 + 153) = *(_OWORD *)(v0 + 313);
  *(_OWORD *)(v0 + 128) = v95;
  *(_OWORD *)(v0 + 144) = v96;
  *(_OWORD *)(v0 + 112) = v93;
  outlined retain of __REAssetBundle.ExportOptions(v0 + 176);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = v0[125];
  v2 = (_QWORD *)swift_task_alloc();
  v0[148] = v2;
  v2[2] = v0 + 94;
  v2[3] = v1;
  v2[4] = v0 + 2;
  v3 = (_QWORD *)swift_task_alloc();
  v0[149] = v3;
  *v3 = v0;
  v3[1] = Entity.ConfigurationCatalog.write(to:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 1200) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;

  v3 = *(_OWORD *)(v0 + 1168);
  v1 = *(_QWORD *)(v0 + 1160);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle(v0 + 752);
  __swift_destroy_boxed_opaque_existential_1(v0 + 816);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 336) = 1;
  *(_DWORD *)(v0 + 337) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 340) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v0 + 344) = 1;
  *(_BYTE *)(v0 + 352) = *(_BYTE *)(v0 + 1216);
  *(_DWORD *)(v0 + 353) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 356) = *(_DWORD *)(v0 + 332);
  *(_QWORD *)(v0 + 360) = 0;
  *(_WORD *)(v0 + 368) = 1;
  *(_BYTE *)(v0 + 370) = 0;
  *(_BYTE *)(v0 + 371) = *(_BYTE *)(v0 + 498);
  *(_QWORD *)(v0 + 376) = 0;
  *(_OWORD *)(v0 + 384) = xmmword_21BE6CF20;
  *(_BYTE *)(v0 + 404) = 0;
  *(_DWORD *)(v0 + 400) = 0;
  *(_WORD *)(v0 + 405) = *(_WORD *)(v0 + 489);
  *(_BYTE *)(v0 + 407) = *(_BYTE *)(v0 + 491);
  *(_QWORD *)(v0 + 408) = 12;
  *(_BYTE *)(v0 + 416) = *(_BYTE *)(v0 + 1208);
  *(_BYTE *)(v0 + 417) = 0;
  *(_DWORD *)(v0 + 418) = *(_DWORD *)(v0 + 492);
  *(_WORD *)(v0 + 422) = *(_WORD *)(v0 + 496);
  *(_OWORD *)(v0 + 424) = v3;
  *(_QWORD *)(v0 + 440) = v1;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(_QWORD *)(v0 + 480) = 0;
  *(_BYTE *)(v0 + 488) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 336);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined release of __REAssetBundle.ExportOptions(v0 + 176);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;

  v3 = *(_OWORD *)(v0 + 1168);
  v1 = *(_QWORD *)(v0 + 1160);
  swift_release();
  swift_release();
  outlined destroy of __REAssetBundle(v0 + 752);
  __swift_destroy_boxed_opaque_existential_1(v0 + 816);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 504) = 1;
  *(_DWORD *)(v0 + 505) = *(_DWORD *)(v0 + 169);
  *(_DWORD *)(v0 + 508) = *(_DWORD *)(v0 + 172);
  *(_QWORD *)(v0 + 512) = 1;
  *(_BYTE *)(v0 + 520) = *(_BYTE *)(v0 + 1216);
  *(_DWORD *)(v0 + 521) = *(_DWORD *)(v0 + 329);
  *(_DWORD *)(v0 + 524) = *(_DWORD *)(v0 + 332);
  *(_QWORD *)(v0 + 528) = 0;
  *(_WORD *)(v0 + 536) = 1;
  *(_BYTE *)(v0 + 538) = 0;
  *(_BYTE *)(v0 + 539) = *(_BYTE *)(v0 + 498);
  *(_OWORD *)(v0 + 544) = xmmword_21BE66FF0;
  *(_QWORD *)(v0 + 560) = 0;
  *(_BYTE *)(v0 + 572) = 0;
  *(_DWORD *)(v0 + 568) = 0;
  *(_WORD *)(v0 + 573) = *(_WORD *)(v0 + 489);
  *(_BYTE *)(v0 + 575) = *(_BYTE *)(v0 + 491);
  *(_QWORD *)(v0 + 576) = 12;
  *(_BYTE *)(v0 + 584) = *(_BYTE *)(v0 + 1208);
  *(_BYTE *)(v0 + 585) = 0;
  *(_DWORD *)(v0 + 586) = *(_DWORD *)(v0 + 492);
  *(_WORD *)(v0 + 590) = *(_WORD *)(v0 + 496);
  *(_OWORD *)(v0 + 592) = v3;
  *(_QWORD *)(v0 + 608) = v1;
  *(_OWORD *)(v0 + 616) = 0u;
  *(_OWORD *)(v0 + 632) = 0u;
  *(_QWORD *)(v0 + 648) = 0;
  *(_BYTE *)(v0 + 656) = 1;
  outlined release of __REAssetBundle.ExportOptions(v0 + 504);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:)()
{
  uint64_t v0;
  int v1;

  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 112), v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 16) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
LABEL_5:
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 152) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  v1 = *(unsigned __int8 *)(v0 + 32);
  outlined destroy of Entity.ConfigurationCatalog.LoadOptions((_QWORD *)(v0 + 16));
  if (v1 != 1)
    goto LABEL_5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 144) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  swift_release();
  type metadata accessor for AnchorEntity();
  v1 = v0[16];
  swift_allocObject();
  v2 = Entity.init()();
  v0[20] = v2;
  v5 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 24) + *(_QWORD *)(v1 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  v0[21] = v3;
  *v3 = v0;
  v3[1] = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
  return v5(v2, v0[13], v0[14], v0[15], v0[16]);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  swift_release();
  type metadata accessor for Entity();
  v1 = v0[16];
  swift_allocObject();
  v2 = Entity.init()();
  v0[20] = v2;
  v5 = (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(**(int **)(v1 + 24) + *(_QWORD *)(v1 + 24));
  v3 = (_QWORD *)swift_task_alloc();
  v0[21] = v3;
  *v3 = v0;
  v3[1] = Entity.ConfigurationCatalog.FormatReader.loadEntity(withConfigurations:loadOptions:);
  return v5(v2, v0[13], v0[14], v0[15], v0[16]);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 176) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 160));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t key path getter for Entity.ConfigurationCatalog.LoadOptions.preImportCallback : Entity.ConfigurationCatalog.LoadOptions@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD *);

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@error @owned Error);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = v5;
  return outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
}

uint64_t key path setter for Entity.ConfigurationCatalog.LoadOptions.preImportCallback : Entity.ConfigurationCatalog.LoadOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t result;

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Swift.AnyObject) -> (@out (), @error @owned Error);
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  v7 = *a2;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(v3);
  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(v7);
  *a2 = (uint64_t)v6;
  a2[1] = v5;
  return result;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.preImportCallback.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed SynchronizationComponent.OwnershipTransferCompletionResult) -> ())?(*v0);
  return v1;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.preImportCallback.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  result = outlined consume of (@escaping @callee_guaranteed () -> ())?(*v2);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.preImportCallback.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.requestAnchor.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.requestAnchor.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.requestAnchor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of (Int, URL)(v1 + 24, a1, &demangling cache variable for type metadata for Entity.__LoadOptions?);
}

uint64_t Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of Entity.__LoadOptions?(a1, v1 + 24);
}

uint64_t (*Entity.ConfigurationCatalog.LoadOptions.entityLoadOptions.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double Entity.ConfigurationCatalog.LoadOptions.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

uint64_t static Entity.ConfigurationCatalog.resolveRealityFileURL(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Information;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v15 - v8;
  type metadata accessor for RealityFileLoadInformationResolver();
  static RealityFileLoadInformationResolver.resolve(url:)(a1, (uint64_t)v9);
  outlined init with take of RealityFileLoadInformation?((uint64_t)v9, (uint64_t)v6);
  Information = type metadata accessor for RealityFileLoadInformation(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(Information - 8) + 48))(v6, 1, Information) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for RealityFileLoadInformation?);
    v11 = type metadata accessor for URL();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
  else
  {
    v13 = type metadata accessor for URL();
    v14 = *(_QWORD *)(v13 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a2, v6, v13);
    outlined destroy of RealityFileLoadInformation((uint64_t)v6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[14] = a2;
  v3[15] = a3;
  v3[13] = a1;
  v4 = type metadata accessor for URL();
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[15];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[17] + 16))(v0[18], v0[14], v0[16]);
  outlined init with copy of (Int, URL)(v1, (uint64_t)(v0 + 2), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  type metadata accessor for Entity.ConfigurationCatalog.RealityFileConfigurationReader();
  swift_allocObject();
  v2 = (_QWORD *)swift_task_alloc();
  v0[19] = v2;
  *v2 = v0;
  v2[1] = Entity.ConfigurationCatalog.init(realityFileUrl:options:);
  return Entity.ConfigurationCatalog.RealityFileConfigurationReader.init(contentsOf:options:)(v0[18], (uint64_t)(v0 + 2));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD **)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  outlined destroy of BodyTrackingComponent?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v4, v3);
  *v5 = 0;
  v5[1] = v1;
  v5[2] = &protocol witness table for Entity.ConfigurationCatalog.RealityFileConfigurationReader;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  outlined destroy of BodyTrackingComponent?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.init(realityFileUrl:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 168) = a1;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[15] = a3;
  v4[16] = a4;
  v4[13] = a1;
  v4[14] = a2;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(void **)(v0 + 112);
  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 128), v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  type metadata accessor for Entity.ConfigurationCatalog.USDConfigurationReader();
  swift_allocObject();
  v3 = v2;
  swift_unknownObjectRetain();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v4;
  *v4 = v0;
  v4[1] = Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:);
  return Entity.ConfigurationCatalog.USDConfigurationReader.init(importSession:importSessionSwiftObject:options:)(*(void **)(v0 + 112), v1, v0 + 16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD **)(v0 + 104);

  outlined destroy of BodyTrackingComponent?(v2, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  *v4 = v3;
  v4[1] = v1;
  v4[2] = &protocol witness table for Entity.ConfigurationCatalog.USDConfigurationReader;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(void **)(v0 + 112);
  swift_unknownObjectRelease();

  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.init(importSession:importSessionSwiftObject:options:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 144) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 152) = a1;
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.configurationSets.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 16);
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  v6 = *(_QWORD *)(v3 + 24);
  if (!*(_QWORD *)(v6 + 16) || (v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5), (v8 & 1) == 0))
  {
    swift_release();
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4B00];
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v7);
  swift_retain();
  swift_bridgeObjectRelease();
  v42 = (_QWORD *)MEMORY[0x24BEE4B00];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 40) + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Entity.ConfigurationCatalog.ConfigurationSet]);
  Dictionary.reserveCapacity(_:)(v10);
  v11 = *(_QWORD *)(v9 + 32);
  if (v11 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain_n();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_5;
    goto LABEL_30;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    v13 = v42;
LABEL_31:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_5:
  v38 = v11;
  v39 = v11 & 0xC000000000000001;
  v13 = v42;
  v14 = 4;
  v37 = v12;
  while (1)
  {
    v16 = v14 - 4;
    if (v39)
    {
      v17 = (_QWORD *)MEMORY[0x220769770](v14 - 4, v11);
      v18 = v14 - 3;
      if (__OFADD__(v16, 1))
        goto LABEL_26;
    }
    else
    {
      v17 = *(_QWORD **)(v11 + 8 * v14);
      swift_retain();
      v18 = v14 - 3;
      if (__OFADD__(v16, 1))
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    v40 = v18;
    v19 = v17[4];
    v11 = v17[5];
    v20 = v17[3];
    v41 = v17[2];
    v21 = v17[6];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
    v25 = v42[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      goto LABEL_27;
    v28 = v23;
    if (v42[3] < v27)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v28 & 1) != 0)
      {
LABEL_6:
        v15 = (_QWORD *)(v42[7] + 40 * v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v15 = v41;
        v15[1] = v20;
        v15[2] = v19;
        v15[3] = v11;
        v15[4] = v21;
        goto LABEL_7;
      }
    }
LABEL_20:
    v42[(v24 >> 6) + 8] |= 1 << v24;
    v31 = (uint64_t *)(v42[6] + 16 * v24);
    *v31 = v19;
    v31[1] = v11;
    v32 = (_QWORD *)(v42[7] + 40 * v24);
    *v32 = v41;
    v32[1] = v20;
    v32[2] = v19;
    v32[3] = v11;
    v32[4] = v21;
    v33 = v42[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_28;
    v42[2] = v35;
    swift_bridgeObjectRetain();
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v14;
    v11 = v38;
    if (v40 == v37)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v27, isUniquelyReferenced_nonNull_native);
  v29 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v11);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    if ((v28 & 1) != 0)
      goto LABEL_6;
    goto LABEL_20;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = a2;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)v2;
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(v2 + 8);
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:)()
{
  uint64_t v0;
  int v1;

  outlined init with copy of (Int, URL)(*(_QWORD *)(v0 + 136), v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  if (*(_QWORD *)(v0 + 16) == 1)
  {
    outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
LABEL_5:
    type metadata accessor for MainActor();
    *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
  v1 = *(unsigned __int8 *)(v0 + 32);
  outlined destroy of Entity.ConfigurationCatalog.LoadOptions((_QWORD *)(v0 + 16));
  if (v1 != 1)
    goto LABEL_5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 168) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;

  swift_release();
  type metadata accessor for AnchorEntity();
  v1 = *(_QWORD *)(v0 + 144);
  swift_allocObject();
  v7 = *(_OWORD *)(v0 + 152);
  v2 = Entity.init()();
  *(_QWORD *)(v0 + 184) = v2;
  *(_QWORD *)(v0 + 104) = v1;
  *(_OWORD *)(v0 + 112) = v7;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
  v5 = *(_OWORD *)(v0 + 112);
  v4 = *(_OWORD *)(v0 + 128);
  *(_QWORD *)(v3 + 184) = v2;
  *(_OWORD *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 208) = v5;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;

  swift_release();
  type metadata accessor for Entity();
  v1 = *(_QWORD *)(v0 + 144);
  swift_allocObject();
  v7 = *(_OWORD *)(v0 + 152);
  v2 = Entity.init()();
  *(_QWORD *)(v0 + 184) = v2;
  *(_QWORD *)(v0 + 104) = v1;
  *(_OWORD *)(v0 + 112) = v7;
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = Entity.ConfigurationCatalog.loadEntity(withConfigurations:loadOptions:);
  v5 = *(_OWORD *)(v0 + 112);
  v4 = *(_OWORD *)(v0 + 128);
  *(_QWORD *)(v3 + 184) = v2;
  *(_OWORD *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 208) = v5;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 200) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 184));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 192) = a2;
  *(_QWORD *)(v4 + 200) = a3;
  *(_QWORD *)(v4 + 184) = a1;
  *(_OWORD *)(v4 + 208) = *(_OWORD *)(v3 + 8);
  return swift_task_switch();
}

uint64_t Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 216);
  ObjectType = swift_getObjectType();
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(ObjectType, v1);
  *(_QWORD *)(v0 + 224) = v3;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(ObjectType, v1);
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v6);
    if ((v9 & 1) != 0)
    {
      v36 = v4;
      v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v8);
      *(_QWORD *)(v0 + 232) = v10;
      swift_retain();
      swift_bridgeObjectRelease();
      v11 = *(_QWORD *)(v10 + 32);
      swift_bridgeObjectRetain();
      v12 = swift_bridgeObjectRetain();
      v13 = specialized Set.init<A>(_:)(v12);
      v14 = MEMORY[0x24BEE4B00];
      *(_QWORD *)(v0 + 160) = v13;
      *(_QWORD *)(v0 + 168) = v14;
      if (v11 >> 62)
      {
        swift_bridgeObjectRetain();
        v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v16 = *(_QWORD **)(v0 + 192);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
      Dictionary.reserveCapacity(_:)(v15);
      swift_bridgeObjectRetain();
      v17 = (_QWORD *)swift_bridgeObjectRetain();
      v18 = specialized Sequence.reduce<A>(into:_:)(v17, v11, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 168) = v18;
      v19 = *(_QWORD *)(v0 + 160);
      *(_QWORD *)(v0 + 240) = v19;
      if (*(_QWORD *)(v19 + 16))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 176) = v19;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
        lazy protocol witness table accessor for type Set<String> and conformance Set<A>();
        lazy protocol witness table accessor for type String and conformance String();
        v20 = Sequence<>.joined(separator:)();
        v22 = v21;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
        swift_allocError();
        *(_QWORD *)v23 = v20;
        *(_QWORD *)(v23 + 8) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        *(_BYTE *)(v23 + 40) = 2;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v32 = *(_QWORD *)(v0 + 216);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
      *(_QWORD *)(inited + 32) = v36;
      *(_QWORD *)(inited + 40) = v6;
      *(_QWORD *)(inited + 48) = v18;
      v34 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      *(_QWORD *)(v0 + 248) = v34;
      v37 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v32 + 24)
                                                                                         + *(_QWORD *)(v32 + 24));
      v35 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 256) = v35;
      *v35 = v0;
      v35[1] = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
      v28 = *(_QWORD *)(v0 + 216);
      v31 = *(_QWORD *)(v0 + 200);
      v29 = *(_QWORD *)(v0 + 184);
      v30 = v34;
      return v37(v29, v30, v31, ObjectType, v28);
    }
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 192) + 16))
  {
    lazy protocol witness table accessor for type Entity.ConfigurationCatalog.ConfigurableEntityError and conformance Entity.ConfigurationCatalog.ConfigurableEntityError();
    swift_allocError();
    *(_QWORD *)v24 = v4;
    *(_QWORD *)(v24 + 8) = v6;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 16) = 0;
    *(_BYTE *)(v24 + 40) = 0;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v26 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = 1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  v37 = (uint64_t (*)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v26 + 24)
                                                                                     + *(_QWORD *)(v26 + 24));
  v27 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 272) = v27;
  *v27 = v0;
  v27[1] = Entity.ConfigurationCatalog.loadEntity(into:withConfigurations:loadOptions:);
  v28 = *(_QWORD *)(v0 + 216);
  v29 = *(_QWORD *)(v0 + 184);
  v30 = 0;
  v31 = v0 + 16;
  return v37(v29, v30, v31, ObjectType, v28);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 16, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Entity.ConfigurationCatalog.ConfigurableEntityError.errorDescription.getter()
{
  __int128 *v0;
  __int128 v1;

  outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(v0, &v1);
  __asm { BR              X10 }
}

uint64_t sub_21BC958A8()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v3;

  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  String.append(_:)(v3);
  v1._countAndFlagsBits = 11815;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  return v0 + 27;
}

void sub_21BC95C74()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(129);
  v1._countAndFlagsBits = v0 + 29;
  v1._object = (void *)0x800000021BE8DBB0;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v0 + 59;
  v3._object = (void *)0x800000021BE8DBE0;
  String.append(_:)(v3);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  JUMPOUT(0x21BC95C50);
}

void protocol witness for LocalizedError.errorDescription.getter in conformance Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  __int128 *v0;
  _OWORD v1[3];

  outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(v0, v1);
  Entity.ConfigurationCatalog.ConfigurableEntityError.errorDescription.getter();
}

uint64_t Entity.init(from:configurations:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 128) = a2;
  *(_QWORD *)(v3 + 136) = v2;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)a1;
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(a1 + 8);
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 168) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 176) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 184) = v4;
  return swift_task_switch();
}

uint64_t Entity.init(from:configurations:)()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 16) = 1;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = Entity.init(from:configurations:);
  return Entity.init(from:configurations:loadOptions:)((uint64_t *)(v0 + 104), *(_QWORD *)(v0 + 128), v0 + 16);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 208));
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Entity.init(from:configurations:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 200) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 208) = a1;
  return swift_task_switch();
}

uint64_t Entity.init(from:configurations:loadOptions:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a3;
  v5 = *a1;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a1 + 1);
  type metadata accessor for MainActor();
  *(_QWORD *)(v4 + 88) = static MainActor.shared.getter();
  *(_QWORD *)(v4 + 96) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v4 + 104) = v6;
  return swift_task_switch();
}

uint64_t Entity.init(from:configurations:loadOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 40);
  v8 = *(_OWORD *)(v0 + 72);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 56) + 232))();
  *(_QWORD *)(v0 + 112) = v3;
  *(_QWORD *)(v0 + 16) = v1;
  *(_OWORD *)(v0 + 24) = v8;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 40);
    swift_retain();
  }
  else
  {
    swift_retain();
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  }
  *(_QWORD *)(v0 + 120) = v4;
  v5 = swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v5;
  *(_QWORD *)v5 = v0;
  *(_QWORD *)(v5 + 8) = Entity.init(from:configurations:loadOptions:);
  v6 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v5 + 192) = v4;
  *(_QWORD *)(v5 + 200) = v6;
  *(_QWORD *)(v5 + 184) = v3;
  *(_OWORD *)(v5 + 208) = *(_OWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v1, &demangling cache variable for type metadata for Entity.ConfigurationCatalog.LoadOptions?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Entity.load(from:configurations:loadOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 40) = a2;
  *(_QWORD *)(v3 + 48) = a3;
  *(_QWORD *)(v3 + 56) = *(_QWORD *)a1;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(a1 + 8);
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 80) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 88) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 96) = v4;
  return swift_task_switch();
}

uint64_t static Entity.load(from:configurations:loadOptions:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 24) = *(_OWORD *)(v0 + 64);
  if (v1)
    v2 = v1;
  else
    v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 104) = v2;
  swift_bridgeObjectRetain();
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v3;
  *(_QWORD *)v3 = v0;
  *(_QWORD *)(v3 + 8) = static Entity.load(from:configurations:loadOptions:);
  v4 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v3 + 128) = v2;
  *(_QWORD *)(v3 + 136) = v4;
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 152) = *(_OWORD *)(v0 + 24);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Entity.load(from:configurations:loadOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 128) = a1;
  }
  return swift_task_switch();
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void partial apply for closure #1 in static __REAssetBundle.__init(elements:assetService:)(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  closure #1 in static __REAssetBundle.__init(elements:assetService:)(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in static Entity.WriteHelper.write(bundle:to:with:)(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_OWORD **)(v1 + 32));
}

uint64_t outlined assign with take of Entity.__LoadOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Entity.__LoadOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of RealityFileLoadInformation?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RealityFileLoadInformation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RealityFileLoadInformation(uint64_t a1)
{
  uint64_t Information;

  Information = type metadata accessor for RealityFileLoadInformation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(Information - 8) + 8))(a1, Information);
  return a1;
}

uint64_t destroy for Entity.ConfigurationCatalog()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Entity.ConfigurationCatalog(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = v4;
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog()
{
  return &type metadata for Entity.ConfigurationCatalog;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.Configuration()
{
  return &type metadata for Entity.ConfigurationCatalog.Configuration;
}

uint64_t destroy for Entity.ConfigurationCatalog.ConfigurationSet()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Entity.ConfigurationCatalog.ConfigurationSet(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Entity.ConfigurationCatalog.ConfigurationSet(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.ConfigurationSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSet()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurationSet;
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationSetCache()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCollectionCache()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for Entity.ConfigurationCatalog.ConfigurationMapCache()
{
  return objc_opt_self();
}

_QWORD *initializeBufferWithCopyOfBuffer for Entity.ConfigurationCatalog.ConfigurationCombination(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Entity.ConfigurationCatalog.ConfigurationCombination(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Entity.ConfigurationCatalog.ConfigurationCombination(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurationCombination()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurationCombination;
}

_QWORD *destroy for Entity.ConfigurationCatalog.LoadOptions(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = result;
  if (*result)
    result = (_QWORD *)swift_release();
  v2 = v1[6];
  if (v2)
  {
    if (v2 == 1)
      return result;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v1 + 3));
  }
  return (_QWORD *)swift_release();
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = (_OWORD *)(a1 + 24);
  v6 = (_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 48);
  if (!v7)
  {
    v10 = *(_OWORD *)(a2 + 40);
    *v5 = *v6;
    *(_OWORD *)(a1 + 40) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
LABEL_9:
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_retain();
    return a1;
  }
  if (v7 != 1)
  {
    v11 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    goto LABEL_9;
  }
  v8 = *(_OWORD *)(a2 + 40);
  *v5 = *v6;
  *(_OWORD *)(a1 + 40) = v8;
  v9 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v9;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = (_OWORD *)(a1 + 24);
  v8 = (__int128 *)(a2 + 3);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = a2[6];
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      outlined destroy of Entity.__LoadOptions(a1 + 24);
      v14 = *(_OWORD *)(a2 + 9);
      v16 = *v8;
      v15 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 72) = v14;
      *v7 = v16;
      *(_OWORD *)(a1 + 40) = v15;
      return a1;
    }
    if (v9)
    {
      if (v10)
      {
        __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), a2 + 3);
LABEL_24:
        *(_QWORD *)(a1 + 64) = a2[8];
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_QWORD *)(a1 + 80) = a2[10];
        swift_retain();
        swift_release();
        return a1;
      }
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else if (v10)
    {
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = a2[7];
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, (uint64_t)(a2 + 3));
      goto LABEL_24;
    }
    v19 = *v8;
    v20 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *v7 = v19;
    *(_OWORD *)(a1 + 40) = v20;
    goto LABEL_24;
  }
  if (!v10)
  {
    v17 = *v8;
    v18 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *v7 = v17;
    *(_OWORD *)(a1 + 40) = v18;
LABEL_19:
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_QWORD *)(a1 + 80) = a2[10];
    swift_retain();
    return a1;
  }
  if (v10 != 1)
  {
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = a2[7];
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 24, (uint64_t)(a2 + 3));
    goto LABEL_19;
  }
  v11 = *v8;
  v12 = *(_OWORD *)(a2 + 5);
  v13 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = v13;
  *v7 = v11;
  *(_OWORD *)(a1 + 40) = v12;
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.LoadOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    v6 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v7 = (_OWORD *)(a1 + 24);
  v8 = a2 + 3;
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 == 1)
  {
LABEL_11:
    v10 = *(_OWORD *)(a2 + 5);
    *v7 = *v8;
    *(_OWORD *)(a1 + 40) = v10;
    v11 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 72) = v11;
    return a1;
  }
  if (a2[6] == 1)
  {
    outlined destroy of Entity.__LoadOptions(a1 + 24);
    goto LABEL_11;
  }
  if (v9)
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  v12 = *(_OWORD *)(a2 + 5);
  *v7 = *v8;
  *(_OWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.LoadOptions(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 88))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.LoadOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 88) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.LoadOptions()
{
  return &type metadata for Entity.ConfigurationCatalog.LoadOptions;
}

uint64_t outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 0xAu)
  {
    if (((1 << a6) & 0x67F) == 0)
      swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1)
{
  return outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 0xAu)
  {
    if (((1 << a6) & 0x67F) == 0)
      swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of Entity.ConfigurationCatalog.ConfigurableEntityError(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 32) = v3;
  v11 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of Entity.ConfigurationCatalog.ConfigurableEntityError(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 244);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 0xC)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 244;
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xF4)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 0xBu)
    return *(unsigned __int8 *)(a1 + 40);
  else
    return (*(_DWORD *)a1 + 12);
}

uint64_t destructiveInjectEnumTag for Entity.ConfigurationCatalog.ConfigurableEntityError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(_QWORD *)result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 12;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Entity.ConfigurationCatalog.ConfigurableEntityError()
{
  return &type metadata for Entity.ConfigurationCatalog.ConfigurableEntityError;
}

_OWORD *outlined init with take of Entity.ConfigurationCatalog.ConfigurableEntityError(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(__int128 *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t sub_21BC97174()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Swift.AnyObject) -> (@out (), @error @owned Error)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@error @owned Error)(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t specialized Dictionary.Keys.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.reduce<A>(into:_:)(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  v4 = a2;
  if (a2 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6)
      goto LABEL_3;
LABEL_29:
    swift_bridgeObjectRelease();
    return (uint64_t)a1;
  }
  v6 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
    goto LABEL_29;
LABEL_3:
  v34 = v4;
  v35 = v4 & 0xC000000000000001;
  v7 = 4;
  v32 = v6;
  v33 = a3;
  while (1)
  {
    v9 = v7 - 4;
    if (v35)
    {
      v10 = (_QWORD *)MEMORY[0x220769770](v7 - 4, v4);
      v11 = v7 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_25;
    }
    else
    {
      v10 = *(_QWORD **)(v4 + 8 * v7);
      swift_retain();
      v11 = v7 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    v36 = v11;
    v12 = v10[4];
    v13 = v10[5];
    v14 = a3[2];
    swift_bridgeObjectRetain();
    if (v14)
    {
      swift_bridgeObjectRetain();
      v15 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
      if ((v16 & 1) != 0)
      {
        v17 = (uint64_t *)(a3[7] + 16 * v15);
        v37 = v17[1];
        v38 = *v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    v37 = v10[3];
    v38 = v10[2];
    swift_bridgeObjectRetain();
LABEL_16:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v39 = a1;
    a3 = a1;
    v4 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
    v20 = a1[2];
    v21 = (v19 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_26;
    v23 = v19;
    if (a1[3] < v22)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      a3 = &v39;
      specialized _NativeDictionary.copy()();
    }
LABEL_22:
    a1 = v39;
    if ((v23 & 1) != 0)
    {
      v8 = (_QWORD *)(v39[7] + 16 * v4);
      swift_bridgeObjectRelease();
      *v8 = v38;
      v8[1] = v37;
    }
    else
    {
      v39[(v4 >> 6) + 8] |= 1 << v4;
      v26 = (uint64_t *)(a1[6] + 16 * v4);
      *v26 = v12;
      v26[1] = v13;
      v27 = (_QWORD *)(a1[7] + 16 * v4);
      *v27 = v38;
      v27[1] = v37;
      v28 = a1[2];
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
        goto LABEL_27;
      a1[2] = v30;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    specialized Set._Variant.remove(_:)(v12, v13);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ++v7;
    a3 = v33;
    v4 = v34;
    if (v36 == v32)
      goto LABEL_29;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  a3 = v39;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v13);
  if ((v23 & 1) == (v25 & 1))
  {
    v4 = v24;
    goto LABEL_22;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance Set<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Set<String> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance Set<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE1718], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance Set<A>);
  }
  return result;
}

uint64_t TextureResource.Contents.init(mipmapLevels:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static TextureResource.Contents.Slice.slice(data:bytesPerRow:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_21BC975B0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  v1[1] = v2;
  v1[2] = 0;
  v1[3] = BYTE6(v2);
  v1[4] = v0;
  v1[5] = 0;
}

uint64_t static TextureResource.Contents.Slice.slice(unsafeBuffer:offset:size:bytesPerRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = a1;
  a5[1] = 0x2000000000000000;
  a5[2] = a2;
  a5[3] = a3;
  a5[4] = a4;
  a5[5] = 0;
  return swift_unknownObjectRetain();
}

uint64_t TextureResource.init(dimensions:format:contents:)(_OWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(v3 + 16) = *a1;
  *(_BYTE *)(v3 + 104) = *(_BYTE *)a2;
  *(_BYTE *)(v3 + 105) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v3 + 106) = *(_BYTE *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v3 + 107) = *(_BYTE *)(a2 + 18);
  v5 = *a3;
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 48) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 56) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 64) = v6;
  return swift_task_switch();
}

uint64_t TextureResource.init(dimensions:format:contents:)()
{
  uint64_t v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  char v11[8];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v1 = *(_BYTE *)(v0 + 107);
  v2 = *(_BYTE *)(v0 + 106);
  v3 = *(_BYTE *)(v0 + 105);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_BYTE *)(v0 + 104);
  v10 = *(_OWORD *)(v0 + 16);
  v11[0] = v6;
  v12 = v4;
  v13 = v3;
  v14 = v2;
  v15 = v1;
  v16 = v5;
  v7 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v10, 0, 2, v11, &v16);
  *(_QWORD *)(v0 + 72) = v7;
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v8;
  *v8 = v0;
  v8[1] = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  type metadata accessor for TextureResource();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_release();
  RERelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  char v12[8];
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 115);
  v4 = *(_BYTE *)(v0 + 114);
  v5 = *(_BYTE *)(v0 + 113);
  v6 = *(_BYTE *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 16);
  v12[0] = v6;
  v13 = v1;
  v14 = v5;
  v15 = v4;
  v16 = v3;
  v17 = v2;
  v8 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v11, v7, 3, v12, &v17);
  *(_QWORD *)(v0 + 80) = v8;
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v9;
  *v9 = v0;
  v9[1] = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10[2];
  char v11[8];
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 99);
  v4 = *(_BYTE *)(v0 + 98);
  v5 = *(_BYTE *)(v0 + 97);
  v6 = *(_BYTE *)(v0 + 96);
  v10[0] = *(_QWORD *)(v0 + 16);
  v10[1] = v10[0];
  v11[0] = v6;
  v12 = v1;
  v13 = v5;
  v14 = v4;
  v15 = v3;
  v16 = v2;
  v7 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(v10, 6, 5, v11, &v16);
  *(_QWORD *)(v0 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v8;
  *v8 = v0;
  v8[1] = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release();
  type metadata accessor for TextureResource();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_release();
  RERelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  char v12[8];
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 115);
  v4 = *(_BYTE *)(v0 + 114);
  v5 = *(_BYTE *)(v0 + 113);
  v6 = *(_BYTE *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 32);
  v11 = *(_OWORD *)(v0 + 16);
  v12[0] = v6;
  v13 = v1;
  v14 = v5;
  v15 = v4;
  v16 = v3;
  v17 = v2;
  v8 = specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v11, v7, 7, v12, &v17);
  *(_QWORD *)(v0 + 80) = v8;
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v9;
  *v9 = v0;
  v9[1] = TextureResource.init(dimensions:format:contents:);
  return specialized static TextureResource.createAssetAsync(_:)(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  swift_release();
  type metadata accessor for TextureResource();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  RERelease();
  RERelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;

  swift_release();
  RERelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 96) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 88) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

uint64_t TextureResource.init(dimensions:format:contents:)(__int128 *a1, char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = a2[16];
  v8 = a2[17];
  v9 = a2[18];
  v10 = *a3;
  v17 = *a1;
  LOBYTE(v18[0]) = v5;
  v18[1] = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v16 = v10;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v17, 0, 2, (char *)v18, &v16);
  swift_bridgeObjectRelease();
  if (v3)
    return v4;
  v18[0] = 0;
  result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    v12 = result;
    type metadata accessor for TextureResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v12;
    *(_QWORD *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    v18[0] = v4;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v13)
      swift_release();
    RERelease();
    RERelease();
    swift_release();
    return v4;
  }
  v14 = v18[0];
  if (v18[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v15 = v14;
    swift_willThrow();
    RERelease();
    return v4;
  }
  __break(1u);
  return result;
}

{
  return TextureResource.init(dimensions:format:contents:)(a1, a2, a3, 3);
}

{
  return TextureResource.init(dimensions:format:contents:)(a1, a2, a3, 7);
}

void closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD aBlock[6];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in static TextureResource.createAssetAsync(_:);
  aBlock[5] = v7;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer?, @guaranteed CFErrorRef?) -> ();
  aBlock[3] = &block_descriptor_30;
  v8 = _Block_copy(aBlock);
  swift_release();
  RETextureBuilderCreateAssetAsync();
  _Block_release(v8);
}

uint64_t closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1, void *a2)
{
  uint64_t result;
  _QWORD *v4;
  id v5;

  if (a1)
  {
    RERetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
    return CheckedContinuation.resume(returning:)();
  }
  else if (a2)
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v4 = a2;
    v5 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v3 + 112) = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  *(_BYTE *)(v3 + 113) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v3 + 114) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(v3 + 115) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(v3 + 48) = *a3;
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 72) = v6;
  return swift_task_switch();
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v3 + 112) = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 40) = v5;
  *(_BYTE *)(v3 + 113) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v3 + 114) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(v3 + 115) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(v3 + 48) = *a3;
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 72) = v6;
  return swift_task_switch();
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *(_BYTE *)(v3 + 96) = *(_BYTE *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 16) = v4;
  *(_QWORD *)(v3 + 24) = v5;
  *(_BYTE *)(v3 + 97) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(v3 + 98) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(v3 + 99) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(v3 + 32) = *a3;
  type metadata accessor for MainActor();
  *(_QWORD *)(v3 + 40) = static MainActor.shared.getter();
  *(_QWORD *)(v3 + 48) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v3 + 56) = v6;
  return swift_task_switch();
}

uint64_t TextureResource.init(dimensions:format:contents:)(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17[2];
  _QWORD v18[2];
  char v19;
  char v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 1);
  v7 = a2[16];
  v8 = a2[17];
  v9 = a2[18];
  v10 = *a3;
  v17[0] = *a1;
  v17[1] = v17[0];
  LOBYTE(v18[0]) = v5;
  v18[1] = v6;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v16 = v10;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(v17, 6, 5, (char *)v18, &v16);
  swift_bridgeObjectRelease();
  if (v3)
    return v4;
  v18[0] = 0;
  result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    v12 = result;
    type metadata accessor for TextureResource();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v12;
    *(_QWORD *)(v4 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    v18[0] = v4;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v13)
      swift_release();
    RERelease();
    RERelease();
    swift_release();
    return v4;
  }
  v14 = v18[0];
  if (v18[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v15 = v14;
    swift_willThrow();
    RERelease();
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t TextureResource.init(dimensions:format:contents:)(__int128 *a1, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  char v21;
  char v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)a1 + 2);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = a2[16];
  v10 = a2[17];
  v11 = a2[18];
  v12 = *a3;
  v19 = *a1;
  LOBYTE(v20[0]) = v7;
  v20[1] = v8;
  v21 = v9;
  v22 = v10;
  v23 = v11;
  v18 = v12;
  specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)((uint64_t *)&v19, v6, a4, (char *)v20, &v18);
  swift_bridgeObjectRelease();
  if (v4)
    return v5;
  v20[0] = 0;
  result = RETextureBuilderCreateAssetSync();
  if (result)
  {
    v14 = result;
    type metadata accessor for TextureResource();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v14;
    *(_QWORD *)(v5 + 24) = 0;
    RERetain();
    REAssetSetSwiftObject();
    v20[0] = v5;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    if (v15)
      swift_release();
    RERelease();
    RERelease();
    swift_release();
    return v5;
  }
  v16 = v20[0];
  if (v20[0])
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v17 = v16;
    swift_willThrow();
    RERelease();
    return v5;
  }
  __break(1u);
  return result;
}

uint64_t static TextureResource.Dimensions2D.dimensions(width:height:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t static TextureResource.DimensionsCube.dimensions(faceSize:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t static TextureResource.Dimensions3D.dimensions(width:height:depth:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void static TextureResource.Format.color(_:pixelFormat:)(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 2;
  *(_QWORD *)(a2 + 8) = a1;
  *(_WORD *)(a2 + 16) = 1;
  *(_BYTE *)(a2 + 18) = 2;
}

char *static TextureResource.Format.normal(_:pixelFormat:)@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;

  v3 = *result;
  *(_BYTE *)a3 = 4;
  *(_QWORD *)(a3 + 8) = a2;
  *(_WORD *)(a3 + 16) = 256;
  *(_BYTE *)(a3 + 18) = v3;
  return result;
}

uint64_t static TextureResource.Format.raw(pixelFormat:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = result;
  *(_WORD *)(a2 + 16) = 256;
  *(_BYTE *)(a2 + 18) = 2;
  return result;
}

void static TextureResource.Contents.MipmapLevel.mip(data:bytesPerRow:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21BE411F0;
  __asm { BR              X10 }
}

void sub_21BC9892C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v4[4] = v3;
  v4[5] = v2;
  v4[6] = 0;
  v4[7] = BYTE6(v2);
  v4[8] = v0;
  v4[9] = 0;
  *v1 = v4;
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(buffer:offset:size:bytesPerRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = 0x2000000000000000;
  *(_QWORD *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 56) = a3;
  *(_QWORD *)(v10 + 64) = a4;
  *(_QWORD *)(v10 + 72) = 0;
  *a5 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(slices:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_bridgeObjectRetain();
}

void static TextureResource.Contents.MipmapLevel.mip(data:bytesPerRow:bytesPerImage:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21BE411F0;
  __asm { BR              X10 }
}

void sub_21BC98A94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v5[4] = v4;
  v5[5] = v3;
  v5[6] = 0;
  v5[7] = BYTE6(v3);
  v5[8] = v1;
  v5[9] = v0;
  *v2 = v5;
}

uint64_t static TextureResource.Contents.MipmapLevel.mip(unsafeBuffer:offset:size:bytesPerRow:bytesPerImage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TextureResource.Contents.Slice>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_21BE411F0;
  *(_QWORD *)(v12 + 32) = a1;
  *(_QWORD *)(v12 + 40) = 0x2000000000000000;
  *(_QWORD *)(v12 + 48) = a2;
  *(_QWORD *)(v12 + 56) = a3;
  *(_QWORD *)(v12 + 64) = a4;
  *(_QWORD *)(v12 + 72) = a5;
  *a6 = v12;
  return swift_unknownObjectRetain();
}

id closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  if (a5 < -64)
    goto LABEL_2;
  if (a5 <= 64)
  {
    if (a5 < 0)
    {
      if ((unint64_t)a5 <= 0xFFFFFFFFFFFFFFC0)
      {
LABEL_2:
        v15 = 1;
        v16 = 1;
        v17 = 1;
        goto LABEL_21;
      }
      v27 = -a5;
      if (a3 << -(char)a5 <= 1)
        v17 = 1;
      else
        v17 = a3 << -(char)a5;
      if (a4 << v27 <= 1)
        v16 = 1;
      else
        v16 = a4 << v27;
      v18 = a6 << v27;
    }
    else
    {
      if (a3 >> a5 <= 1)
        v19 = 1;
      else
        v19 = a3 >> a5;
      if (a4 >> a5 <= 1)
        v20 = 1;
      else
        v20 = a4 >> a5;
      v18 = a6 >> a5;
      if ((unint64_t)a5 < 0x40)
      {
        v16 = v20;
      }
      else
      {
        v18 = a6 >> 63;
        v16 = 1;
      }
      if ((unint64_t)a5 >= 0x40)
        v17 = 1;
      else
        v17 = v19;
    }
  }
  else
  {
    v18 = a6 >> 63;
    v16 = 1;
    v17 = 1;
  }
  if (v18 <= 1)
    v15 = 1;
  else
    v15 = v18;
LABEL_21:
  MTLSizeMake(v17, v16, v15, &v31);
  v28 = v31;
  v21 = v32;
  v22 = *(_QWORD *)(a9 + 32);
  v23 = *(_QWORD *)(a9 + 40);
  MTLOriginMake(&v31);
  v24 = v32;
  v25 = v31;
  v31 = v28;
  v32 = v21;
  v29 = v25;
  v30 = v24;
  return objc_msgSend(a1, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a7, a8, v22, v23, &v31, a2, a10, a5, &v29);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

BOOL static TextureResource.Dimensions2D.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void TextureResource.Dimensions2D.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int TextureResource.Dimensions2D.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextureResource.Dimensions2D(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TextureResource.Dimensions2D()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TextureResource.Dimensions2D()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Dimensions2D()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL static TextureResource.DimensionsCube.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void TextureResource.DimensionsCube.hash(into:)()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TextureResource.DimensionsCube.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static TextureResource.Dimensions2DArray.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void TextureResource.Dimensions2DArray.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int TextureResource.Dimensions2DArray.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Dimensions2DArray()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt v3;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void TextureResource.Format.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt8 v2;
  unsigned __int8 v3;
  int v4;

  v1 = *((_QWORD *)v0 + 1);
  v2 = v0[16];
  v3 = v0[17];
  v4 = v0[18];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  if ((v3 & 1) != 0)
    v2 = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
  if (v4 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4 & 1);
  }
}

Swift::Int TextureResource.Format.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  unsigned __int8 v4;
  int v5;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = v0[18];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if ((v4 & 1) != 0)
    v3 = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TextureResource.Format()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  Swift::UInt8 v3;
  unsigned __int8 v4;
  int v5;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 1);
  v3 = v0[16];
  v4 = v0[17];
  v5 = v0[18];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if ((v4 & 1) != 0)
    v3 = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
  if (v5 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 & 1);
  }
  return Hasher._finalize()();
}

uint64_t static TextureResource.Format.ColorSpace.== infix(_:_:)()
{
  return 1;
}

void TextureResource.Format.ColorSpace.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int TextureResource.Format.ColorSpace.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

BOOL static TextureResource.Format.NormalEncoding.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void TextureResource.Format.NormalEncoding.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TextureResource.Format.NormalEncoding.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t specialized static TextureResource.Format.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  char v3;
  int v4;

  if (*a1 != *a2 || *((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
    return 0;
  v2 = a1[18];
  v3 = a2[17];
  v4 = a2[18];
  if ((a1[17] & 1) == 0)
  {
    if (a1[16] != a2[16])
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
LABEL_9:
    if (v2 == 2)
    {
      if (v4 != 2)
        return 0;
    }
    else if (v4 == 2 || ((v4 ^ v2) & 1) != 0)
    {
      return 0;
    }
    return 1;
  }
  if (a2[17])
    goto LABEL_9;
  return 0;
}

uint64_t specialized static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id (*v10)(void *, uint64_t);
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  char isEscapingClosureAtFileLocation;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[21];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *a3;
  v34 = a4[1];
  v35 = *a4;
  aBlock[20] = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v7 = RETextureBuilderCreateWithDescriptor();
  if (v7)
  {
    RETextureBuilderSetSemantic();
    v8 = v7;
    if ((v5 & 1) == 0)
      RETextureBuilderSetColorGamut();
    v9 = v6 + 32;
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = 0;
    v32 = v6;
LABEL_5:
    v12 = *(_QWORD *)(v6 + 16);
    if (v11 <= v12)
      v13 = *(_QWORD *)(v6 + 16);
    else
      v13 = v11;
    do
    {
      if (v12 == v11)
      {
        swift_bridgeObjectRelease();
        outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
        return v8;
      }
      if (v13 == v11)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x21BC9AC74);
      }
      v14 = *(_QWORD *)(v9 + 8 * v11++);
      v15 = *(_QWORD *)(v14 + 16);
    }
    while (!v15);
    swift_bridgeObjectRetain();
    v16 = 0;
    v33 = v15;
    v17 = 32;
    while (1)
    {
      v37 = v17;
      v38 = v16;
      v18 = *(_OWORD *)(v14 + v17);
      v19 = *(_OWORD *)(v14 + v17 + 32);
      v41 = *(_OWORD *)(v14 + v17 + 16);
      v42 = v19;
      v40 = v18;
      outlined init with take of TextureResource.CopySourceBuffer(&v40, &v43);
      outlined init with take of TextureResource.CopySourceBuffer(&v43, &v44);
      v20 = *((_QWORD *)&v44 + 1);
      *((_QWORD *)&v44 + 1) &= ~0x2000000000000000uLL;
      if ((v20 & 0x2000000000000000) == 0)
        __asm { BR              X9 }
      v21 = (void *)v44;
      outlined retain of TextureResource.Contents.Slice((uint64_t)&v40);
      outlined retain of TextureResource.Contents.Slice((uint64_t)&v40);
      v22 = v41;
      if (__OFADD__((_QWORD)v41, *((_QWORD *)&v41 + 1)))
        goto LABEL_24;
      v23 = v41 + *((_QWORD *)&v41 + 1);
      if ((uint64_t)objc_msgSend(v21, sel_length) < v23)
        break;
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v35;
      *(_QWORD *)(v24 + 24) = v34;
      *(_QWORD *)(v24 + 32) = v11 - 1;
      *(_QWORD *)(v24 + 40) = a5;
      *(_QWORD *)(v24 + 48) = v21;
      *(_QWORD *)(v24 + 56) = v22;
      v25 = v41;
      *(_OWORD *)(v24 + 64) = v40;
      *(_OWORD *)(v24 + 80) = v25;
      *(_OWORD *)(v24 + 96) = v42;
      *(_QWORD *)(v24 + 112) = v16;
      outlined retain of TextureResource.Contents.Slice((uint64_t)&v40);
      swift_unknownObjectRetain();
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
      v26 = swift_allocObject();
      v10 = partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:);
      *(_QWORD *)(v26 + 16) = partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:);
      *(_QWORD *)(v26 + 24) = v24;
      aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed MTLBlitCommandEncoder, @guaranteed MTLTexture) -> ();
      aBlock[3] = &block_descriptor_20;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      RETextureBuilderEncodeBlitCommands();
      swift_unknownObjectRelease();
      outlined release of TextureResource.Contents.Slice((uint64_t)&v40);
      _Block_release(v27);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        goto LABEL_25;
      ++v16;
      v17 = v37 + 48;
      if (v33 == v38 + 1)
      {
        swift_bridgeObjectRelease();
        v6 = v32;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(_OWORD *)v29 = xmmword_21BE51290;
    *(_BYTE *)(v29 + 16) = 2;
    swift_willThrow();
    swift_unknownObjectRelease();
    outlined release of TextureResource.Contents.Slice((uint64_t)&v40);
    outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v10);
  }
  else
  {
    v8 = 0;
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(_QWORD *)v30 = 0xD000000000000029;
    *(_QWORD *)(v30 + 8) = 0x800000021BE8DFF0;
    *(_BYTE *)(v30 + 16) = 1;
    swift_willThrow();
  }
  return v8;
}

uint64_t specialized static TextureResource.makeTextureBuilder(dimensions:depthOrSliceCount:textureType:format:contents:)(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t *a5)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35[2];
  _BYTE v36[8];
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;

  v7 = *a1;
  v34 = a1[1];
  v8 = *((_QWORD *)a4 + 1);
  v32 = a4[16];
  v33 = *a4;
  v31 = a4[17];
  v9 = a4[18];
  v10 = *a5;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD740]), sel_init);
  v12 = v11;
  switch(a3)
  {
    case 2:
      v13 = objc_msgSend((id)objc_opt_self(), sel_texture2DDescriptorWithPixelFormat_width_height_mipmapped_, v8, v7, v34, 1);
      goto LABEL_22;
    case 3:
    case 7:
      v13 = v11;
      objc_msgSend(v13, sel_setPixelFormat_, v8);
      if (a3 == 7)
      {
        objc_msgSend(v13, sel_setDepth_, a2);
        v14 = *(_QWORD *)(v10 + 16);
        if (v14)
        {
          for (i = 0; i != v14; ++i)
          {
            v16 = *(_QWORD *)(v10 + 32 + 8 * i);
            v17 = *(_QWORD *)(v16 + 16);
            if (v17)
            {
              v18 = (unint64_t *)(v16 + 40);
              do
              {
                if (!v18[4])
                {
                  a2 = *(v18 - 1);
                  v27 = *v18;
                  outlined copy of TextureResource.CopySourceBuffer(a2, *v18);

                  lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
                  swift_allocError();
                  *(_OWORD *)v28 = xmmword_21BE512A0;
                  *(_BYTE *)(v28 + 16) = 2;
                  swift_willThrow();

                  outlined consume of TextureResource.CopySourceBuffer(a2, v27);
                  return a2;
                }
                v18 += 6;
                --v17;
              }
              while (v17);
            }
          }
        }
      }
      else
      {
        objc_msgSend(v13, sel_setArrayLength_, a2);
        v21 = *(_QWORD *)(v10 + 16);
        if (v21)
        {
          v22 = v10 + 32;
          do
          {
            if (*(_QWORD *)(*(_QWORD *)v22 + 16) != a2)
            {

              goto LABEL_35;
            }
            v22 += 8;
            --v21;
          }
          while (v21);
        }
      }
      objc_msgSend(v13, sel_setTextureType_, a3);
      objc_msgSend(v13, sel_setWidth_, v7);
      objc_msgSend(v13, sel_setHeight_, v34);
LABEL_22:

      goto LABEL_23;
    case 5:
      v13 = objc_msgSend((id)objc_opt_self(), sel_textureCubeDescriptorWithPixelFormat_size_mipmapped_, v8, v7, 1);

      v19 = *(_QWORD *)(v10 + 16);
      if (!v19)
        goto LABEL_23;
      v20 = v10 + 32;
      break;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x21BC9B138);
  }
  do
  {
    if (*(_QWORD *)(*(_QWORD *)v20 + 16) != 6)
    {
LABEL_35:
      lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
      swift_allocError();
      *(_OWORD *)v29 = xmmword_21BE41200;
      *(_BYTE *)(v29 + 16) = 2;
      goto LABEL_36;
    }
    v20 += 8;
    --v19;
  }
  while (v19);
LABEL_23:
  objc_msgSend(v13, sel_setUsage_, 17);
  objc_msgSend(v13, sel_setStorageMode_, 2);
  if ((v9 & 1) != 0)
    v23 = 17040133;
  else
    v23 = 84148994;
  objc_msgSend(v13, sel_setSwizzle_, v23);
  v24 = *(_QWORD *)(v10 + 16);
  objc_msgSend(v13, sel_setMipmapLevelCount_, v24);
  if (!v24 || (uint64_t)objc_msgSend(v13, sel_mipmapLevelCount) < v24)
  {
    lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError();
    swift_allocError();
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_BYTE *)(v25 + 16) = 2;
LABEL_36:
    swift_willThrow();

    return a2;
  }
  v36[0] = v33;
  v37 = v8;
  v38 = v32;
  v39 = v31;
  v40 = v9;
  v41 = v10;
  if (a3 == 7)
    v26 = a2;
  else
    v26 = 0;
  v35[0] = v7;
  v35[1] = v34;
  a2 = specialized static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)((uint64_t)v13, (uint64_t)v36, &v41, v35, v26);

  return a2;
}

uint64_t specialized static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[3] = a1;
  v1[4] = type metadata accessor for MainActor();
  v1[5] = static MainActor.shared.getter();
  v1[6] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[7] = v2;
  return swift_task_switch();
}

uint64_t specialized static TextureResource.createAssetAsync(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v0[8] = static MainActor.shared.getter();
  v2 = swift_task_alloc();
  v0[9] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[10] = v3;
  *v3 = v0;
  v3[1] = specialized static TextureResource.createAssetAsync(_:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_release();
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Dimensions2D, &type metadata for TextureResource.Dimensions2D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions2D and conformance TextureResource.Dimensions2D);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Dimensions2DArray, &type metadata for TextureResource.Dimensions2DArray);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions2DArray and conformance TextureResource.Dimensions2DArray);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube;
  if (!lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.DimensionsCube, &type metadata for TextureResource.DimensionsCube);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.DimensionsCube and conformance TextureResource.DimensionsCube);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D;
  if (!lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Dimensions3D, &type metadata for TextureResource.Dimensions3D);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Dimensions3D and conformance TextureResource.Dimensions3D);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format and conformance TextureResource.Format()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format;
  if (!lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Format, &type metadata for TextureResource.Format);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format and conformance TextureResource.Format);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace;
  if (!lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Format.ColorSpace, &type metadata for TextureResource.Format.ColorSpace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format.ColorSpace and conformance TextureResource.Format.ColorSpace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding;
  if (!lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.Format.NormalEncoding, &type metadata for TextureResource.Format.NormalEncoding);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.Format.NormalEncoding and conformance TextureResource.Format.NormalEncoding);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions2DArray()
{
  return &type metadata for TextureResource.Dimensions2DArray;
}

ValueMetadata *type metadata accessor for TextureResource.DimensionsCube()
{
  return &type metadata for TextureResource.DimensionsCube;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions3D()
{
  return &type metadata for TextureResource.Dimensions3D;
}

ValueMetadata *type metadata accessor for TextureResource.Dimensions2D()
{
  return &type metadata for TextureResource.Dimensions2D;
}

__n128 __swift_memcpy19_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TextureResource.Format(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 19))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 18) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 18);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 18) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureResource.Format(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 19) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 19) = 0;
    if (a2)
      *(_BYTE *)(result + 18) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format()
{
  return &type metadata for TextureResource.Format;
}

ValueMetadata *type metadata accessor for TextureResource.Contents()
{
  return &type metadata for TextureResource.Contents;
}

ValueMetadata *type metadata accessor for TextureResource.Contents.MipmapLevel()
{
  return &type metadata for TextureResource.Contents.MipmapLevel;
}

uint64_t outlined copy of TextureResource.CopySourceBuffer(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_unknownObjectRetain();
  else
    return outlined copy of Data._Representation(a1, a2);
}

uint64_t outlined consume of TextureResource.CopySourceBuffer(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0)
    return swift_unknownObjectRelease();
  else
    return outlined consume of Data._Representation(a1, a2);
}

uint64_t initializeWithCopy for TextureResource.Contents.Slice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  outlined copy of TextureResource.CopySourceBuffer(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t *assignWithCopy for TextureResource.Contents.Slice(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of TextureResource.CopySourceBuffer(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for TextureResource.Contents.Slice(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  outlined consume of TextureResource.CopySourceBuffer(v4, v5);
  v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.Contents.Slice(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Contents.Slice(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 3;
    if (a3 >= 3)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Contents.Slice()
{
  return &type metadata for TextureResource.Contents.Slice;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Format.ColorSpace(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC9B83C + 4 * byte_21BE6D190[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC9B85C + 4 * byte_21BE6D195[v4]))();
}

_BYTE *sub_21BC9B83C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC9B85C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9B864(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9B86C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9B874(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9B87C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format.ColorSpace()
{
  return &type metadata for TextureResource.Format.ColorSpace;
}

uint64_t storeEnumTagSinglePayload for TextureResource.Format.NormalEncoding(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC9B8E4 + 4 * byte_21BE6D19F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC9B918 + 4 * byte_21BE6D19A[v4]))();
}

uint64_t sub_21BC9B918(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC9B920(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC9B928);
  return result;
}

uint64_t sub_21BC9B934(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC9B93CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC9B940(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC9B948(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.Format.NormalEncoding()
{
  return &type metadata for TextureResource.Format.NormalEncoding;
}

uint64_t *initializeBufferWithCopyOfBuffer for TextureResource.CopySourceBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for TextureResource.CopySourceBuffer(uint64_t a1)
{
  return outlined consume of TextureResource.CopySourceBuffer(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for TextureResource.CopySourceBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  outlined copy of TextureResource.CopySourceBuffer(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of TextureResource.CopySourceBuffer(v5, v6);
  return a1;
}

uint64_t *assignWithTake for TextureResource.CopySourceBuffer(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of TextureResource.CopySourceBuffer(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextureResource.CopySourceBuffer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 3 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 3);
  v3 = ((2 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(_QWORD *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TextureResource.CopySourceBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 3)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t getEnumTag for TextureResource.CopySourceBuffer(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 8) >> 61) & 1;
}

uint64_t destructiveProjectEnumData for TextureResource.CopySourceBuffer(uint64_t result)
{
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t destructiveInjectEnumTag for TextureResource.CopySourceBuffer(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for TextureResource.CopySourceBuffer()
{
  return &type metadata for TextureResource.CopySourceBuffer;
}

void partial apply for closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1)
{
  closure #1 in static TextureResource.createAssetAsync(_:)(a1);
}

uint64_t sub_21BC9BB10()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(uint64_t a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<OpaquePointer, Error>);
  return closure #1 in closure #1 in static TextureResource.createAssetAsync(_:)(a1, a2);
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type TextureResource.CreateError and conformance TextureResource.CreateError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError;
  if (!lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.CreateError, &unk_24DFC52A8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.CreateError and conformance TextureResource.CreateError);
  }
  return result;
}

_OWORD *outlined init with take of TextureResource.CopySourceBuffer(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  return a2;
}

uint64_t outlined retain of TextureResource.Contents.Slice(uint64_t a1)
{
  outlined copy of TextureResource.CopySourceBuffer(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t outlined release of TextureResource.Contents.Slice(uint64_t a1)
{
  outlined consume of TextureResource.CopySourceBuffer(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_21BC9BC88()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined consume of TextureResource.CopySourceBuffer(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject();
}

id partial apply for closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(void *a1, uint64_t a2)
{
  uint64_t *v2;

  return closure #2 in static TextureResource.createTextureBuilder(descriptor:format:contents:dimensions:depth:)(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], (uint64_t)(v2 + 8), v2[14]);
}

uint64_t sub_21BC9BCE8()
{
  return swift_deallocObject();
}

uint64_t MTLSizeMake@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void MTLOriginMake(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id outlined copy of TextureResource.CreateError(id result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return (id)swift_bridgeObjectRetain();
  if (!a3)
    return result;
  return result;
}

void destroy for TextureResource.CreateError(uint64_t a1)
{
  outlined consume of TextureResource.CreateError(*(void **)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void outlined consume of TextureResource.CreateError(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!a3)
  {

  }
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TextureResource.CreateError(*(id *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  void *v6;
  uint64_t v7;
  char v8;

  v3 = *(id *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of TextureResource.CreateError(*(id *)a2, v4, v5);
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of TextureResource.CreateError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for TextureResource.CreateError(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(void **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of TextureResource.CreateError(v4, v5, v6);
  return a1;
}

void *type metadata accessor for TextureResource.CreateError()
{
  return &unk_24DFC52A8;
}

void static ChannelAudioComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 3008;
}

double ChannelAudioComponent.gain.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void ChannelAudioComponent.gain.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*ChannelAudioComponent.gain.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::ChannelAudioComponent __swiftcall ChannelAudioComponent.init(gain:)(RealityFoundation::ChannelAudioComponent gain)
{
  RealityFoundation::ChannelAudioComponent *v1;

  v1->gain = gain.gain;
  return gain;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ChannelAudioComponent.CodingKeys()
{
  return 1852399975;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ChannelAudioComponent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 1852399975 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ChannelAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ChannelAudioComponent.CodingKeys()
{
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t Entity.channelAudio.getter@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

uint64_t key path getter for Entity.channelAudio : Entity@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;
  uint64_t v4;
  char v5;

  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)&v4);
  result = swift_release();
  v3 = v5;
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v3;
  return result;
}

uint64_t key path setter for Entity.channelAudio : Entity(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

uint64_t Entity.channelAudio.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

uint64_t (*Entity.channelAudio.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t Component;
  float v4;
  float v5;
  double v6;

  *(_QWORD *)(a1 + 16) = v1;
  swift_retain();
  Component = REEntityGetComponent();
  if (Component)
  {
    REChannelAudioComponentGetDecibelGain();
    v5 = v4;
    swift_release();
    v6 = v5;
  }
  else
  {
    swift_release();
    v6 = 0.0;
  }
  *(double *)a1 = v6;
  *(_BYTE *)(a1 + 8) = Component == 0;
  return Entity.channelAudio.modify;
}

uint64_t Entity.channelAudio.modify(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v1, v2);
  return swift_release();
}

double static ChannelAudioComponent.__fromCore(_:)@<D0>(double *a1@<X8>)
{
  float v2;
  double result;

  REChannelAudioComponentGetDecibelGain();
  result = v2;
  *a1 = result;
  return result;
}

uint64_t ChannelAudioComponent.__toCore(_:)()
{
  REChannelAudioComponentSetDecibelGain();
  return RENetworkMarkComponentDirty();
}

double protocol witness for static Component.__fromCore(_:) in conformance ChannelAudioComponent@<D0>(double *a1@<X8>)
{
  float v2;
  double result;

  REChannelAudioComponentGetDecibelGain();
  result = v2;
  *a1 = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance ChannelAudioComponent()
{
  REChannelAudioComponentSetDecibelGain();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance ChannelAudioComponent(_DWORD *a1@<X8>)
{
  *a1 = 3008;
}

BOOL static ChannelAudioComponent.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

void ChannelAudioComponent.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t ChannelAudioComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ChannelAudioComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int ChannelAudioComponent.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t ChannelAudioComponent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ChannelAudioComponent.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ChannelAudioComponent()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ChannelAudioComponent()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ChannelAudioComponent()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ChannelAudioComponent@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ChannelAudioComponent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ChannelAudioComponent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ChannelAudioComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ChannelAudioComponent.CodingKeys, &unk_24DFC5438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ChannelAudioComponent.CodingKeys, &unk_24DFC5438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ChannelAudioComponent.CodingKeys, &unk_24DFC5438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ChannelAudioComponent.CodingKeys, &unk_24DFC5438);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent.CodingKeys and conformance ChannelAudioComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ChannelAudioComponent and conformance ChannelAudioComponent()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent;
  if (!lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ChannelAudioComponent, &type metadata for ChannelAudioComponent);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChannelAudioComponent and conformance ChannelAudioComponent);
  }
  return result;
}

ValueMetadata *type metadata accessor for ChannelAudioComponent()
{
  return &type metadata for ChannelAudioComponent;
}

uint64_t storeEnumTagSinglePayload for ChannelAudioComponent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC9C760 + 4 * byte_21BE6D590[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC9C780 + 4 * byte_21BE6D595[v4]))();
}

_BYTE *sub_21BC9C760(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC9C780(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9C788(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9C790(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9C798(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9C7A0(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for ChannelAudioComponent.CodingKeys()
{
  return &unk_24DFC5438;
}

void static ActionEntityResolution.sourceEntity.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t ActionEntityResolution.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  uint64_t v16;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
    v5 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    if (v5 == 1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
      v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      v10 = v13;
      v11 = 1;
      goto LABEL_11;
    }
    if (!v5)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
      v7 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      v9 = specialized static InternalBindPath.decomposeStringBySeparator(_:separator:escapeCharacter:)(v7, v8, 46, 0xE100000000000000, 92, 0xE100000000000000);
      static InternalBindPath.entityPathFromParts(_:)((uint64_t *)(v9 + 32), 0, (2 * *(_QWORD *)(v9 + 16)) | 1, (unint64_t)&v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = 0;
      v11 = 0;
      v12 = v14;
LABEL_11:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      *(_QWORD *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v10;
      *(_BYTE *)(a2 + 16) = v11;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
    lazy protocol witness table accessor for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError();
    swift_allocError();
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t ActionEntityResolution.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD v6[2];
  char v7;
  _BYTE v8[24];
  uint64_t v9;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if ((v4 & 1) != 0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v2)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
  }
  else
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
    swift_bridgeObjectRetain();
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (v2)
    {
      outlined consume of ActionEntityResolution();
    }
    else
    {
      v6[0] = v3;
      v6[1] = 0;
      v7 = 2;
      specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)v6);
      outlined consume of ActionEntityResolution();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v8, v9);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ActionEntityResolution@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ActionEntityResolution.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ActionEntityResolution(_QWORD *a1)
{
  return ActionEntityResolution.encode(to:)(a1);
}

uint64_t specialized static ActionEntityResolution.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = *a2;
  if ((a1[2] & 1) != 0)
  {
    if ((a2[2] & 1) != 0)
    {
      if (*a1 == v2 && a1[1] == a2[1])
        v4 = 1;
      else
        v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined copy of ActionEntityResolution();
      outlined copy of ActionEntityResolution();
      outlined consume of ActionEntityResolution();
      outlined consume of ActionEntityResolution();
      return v4 & 1;
    }
LABEL_9:
    outlined copy of ActionEntityResolution();
    outlined copy of ActionEntityResolution();
    outlined consume of ActionEntityResolution();
    outlined consume of ActionEntityResolution();
    v4 = 0;
    return v4 & 1;
  }
  if ((a2[2] & 1) != 0)
    goto LABEL_9;
  v12 = *a1;
  v13 = 0;
  v14 = 2;
  outlined copy of ActionEntityResolution();
  outlined copy of ActionEntityResolution();
  v4 = 1;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v12);
  v6 = v5;
  v8 = v7;
  v12 = v2;
  v13 = 0;
  v14 = 2;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v12);
  if (v6 != v10 || v8 != v9)
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  outlined consume of ActionEntityResolution();
  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

unint64_t lazy protocol witness table accessor for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEntityResolution.CodingError, &type metadata for ActionEntityResolution.CodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError;
  if (!lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for ActionEntityResolution.CodingError, &type metadata for ActionEntityResolution.CodingError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionEntityResolution.CodingError and conformance ActionEntityResolution.CodingError);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ActionEntityResolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ActionEntityResolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = *((_BYTE *)a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of ActionEntityResolution();
  return a1;
}

uint64_t assignWithTake for ActionEntityResolution(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of ActionEntityResolution();
  return a1;
}

ValueMetadata *type metadata accessor for ActionEntityResolution()
{
  return &type metadata for ActionEntityResolution;
}

uint64_t storeEnumTagSinglePayload for ActionEntityResolution.CodingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BC9CF5C + 4 * byte_21BE6D7A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BC9CF7C + 4 * byte_21BE6D7A5[v4]))();
}

_BYTE *sub_21BC9CF5C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BC9CF7C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9CF84(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9CF8C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BC9CF94(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BC9CF9C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActionEntityResolution.CodingError()
{
  return &type metadata for ActionEntityResolution.CodingError;
}

void static OrthographicCameraComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 55;
}

BOOL CameraFieldOfViewOrientation.__toCore()()
{
  _BYTE *v0;

  return (*v0 & 1) == 0;
}

uint64_t static CameraFieldOfViewOrientation.__fromCore(from:)@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (_DWORD)result == 0;
  return result;
}

BOOL static CameraFieldOfViewOrientation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CameraFieldOfViewOrientation.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int CameraFieldOfViewOrientation.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

float OrthographicCameraComponent.near.getter()
{
  uint64_t v0;

  return *(float *)v0;
}

void OrthographicCameraComponent.near.setter(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t (*OrthographicCameraComponent.near.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrthographicCameraComponent.far.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 4);
}

void OrthographicCameraComponent.far.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 4) = a1;
}

uint64_t (*OrthographicCameraComponent.far.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float OrthographicCameraComponent.scale.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 8);
}

void OrthographicCameraComponent.scale.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 8) = a1;
}

uint64_t (*OrthographicCameraComponent.scale.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void OrthographicCameraComponent.scaleDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 12);
}

_BYTE *OrthographicCameraComponent.scaleDirection.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = *result;
  return result;
}

uint64_t (*OrthographicCameraComponent.scaleDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void __swiftcall OrthographicCameraComponent.init()(RealityFoundation::OrthographicCameraComponent *__return_ptr retstr)
{
  *(_QWORD *)&retstr->near = 0x447A00003C23D70ALL;
  retstr->scale = 1.0;
  retstr->scaleDirection = RealityFoundation_CameraFieldOfViewOrientation_vertical;
}

uint64_t static OrthographicCameraComponent.__fromCore(_:)@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  REOrthographicCameraComponentGetNear();
  v3 = v2;
  REOrthographicCameraComponentGetFar();
  v5 = v4;
  REOrthographicCameraComponentGetScale();
  v7 = v6;
  result = REOrthographicCameraComponentGetScaleDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 12) = (_DWORD)result == 0;
  return result;
}

uint64_t OrthographicCameraComponent.__toCore(_:)()
{
  REOrthographicCameraComponentSetNear();
  REOrthographicCameraComponentSetFar();
  REOrthographicCameraComponentSetScale();
  REOrthographicCameraComponentSetScaleDirection();
  return RENetworkMarkComponentDirty();
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance OrthographicCameraComponent@<X0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  REOrthographicCameraComponentGetNear();
  v3 = v2;
  REOrthographicCameraComponentGetFar();
  v5 = v4;
  REOrthographicCameraComponentGetScale();
  v7 = v6;
  result = REOrthographicCameraComponentGetScaleDirection();
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 12) = (_DWORD)result == 0;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance OrthographicCameraComponent()
{
  REOrthographicCameraComponentSetNear();
  REOrthographicCameraComponentSetFar();
  REOrthographicCameraComponentSetScale();
  REOrthographicCameraComponentSetScaleDirection();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance OrthographicCameraComponent(_DWORD *a1@<X8>)
{
  *a1 = 55;
}

uint64_t specialized static OrthographicCameraComponent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(float *)a1 == *(float *)a2
    && *(float *)(a1 + 4) == *(float *)(a2 + 4)
    && *(float *)(a1 + 8) == *(float *)(a2 + 8))
  {
    return (*(unsigned __int8 *)(a2 + 12) ^ *(unsigned __int8 *)(a1 + 12) ^ 1) & 1;
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation;
  if (!lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CameraFieldOfViewOrientation, &type metadata for CameraFieldOfViewOrientation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CameraFieldOfViewOrientation and conformance CameraFieldOfViewOrientation);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CameraFieldOfViewOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BC9D3E8 + 4 * byte_21BE6D915[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BC9D41C + 4 * byte_21BE6D910[v4]))();
}

uint64_t sub_21BC9D41C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC9D424(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BC9D42CLL);
  return result;
}

uint64_t sub_21BC9D438(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BC9D440);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BC9D444(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BC9D44C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CameraFieldOfViewOrientation()
{
  return &type metadata for CameraFieldOfViewOrientation;
}

uint64_t getEnumTagSinglePayload for OrthographicCameraComponent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 13))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OrthographicCameraComponent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 13) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for OrthographicCameraComponent()
{
  return &type metadata for OrthographicCameraComponent;
}

uint64_t HasPhysicsBody.addForce(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _BYTE *v10;
  __int128 v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _BYTE v18[176];
  _BYTE v19[176];
  _BYTE v20[96];
  __int128 v21;
  _BYTE v22[176];
  _BYTE v23[176];

  if (a1)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_8;
    v4 = SceneNullable;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6)
LABEL_8:
      v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  v15 = v8;
  v16 = v7;
  v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    v10 = v19;
  }
  else
  {
    *(float32x2_t *)&v11 = vadd_f32((float32x2_t)simd_float4x4.transform(force:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2) = v12 + *((float *)&v21 + 2);
    HIDWORD(v11) = 0;
    v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.addForce(_:at:relativeTo:)(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t result;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  __int128 v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  float32x4_t v50;
  _BYTE v52[85];
  _BYTE v53[16];
  int v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  float32x4_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  _BYTE v73[85];
  _BYTE v74[16];
  int v75;
  __int128 v76;
  __n128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  float32x4_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char v92;
  uint64_t v93;

  HasPhysicsBody.physicsBody.getter((uint64_t)v53);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v73);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v74);
  result = _s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v74);
  if ((_DWORD)result != 1)
  {
    v7 = v74[0];
    v8 = v75;
    v47 = v76;
    v48 = v77;
    v46 = v78;
    v9 = v79;
    v10 = v80;
    v11 = v81;
    v42 = v83;
    v43 = v82;
    v40 = v85;
    v41 = v84;
    v38 = v87;
    v39 = v86;
    v35 = v88;
    v36 = v89;
    v44 = v91;
    v45 = v90;
    v37 = v92;
    v12 = v93;
    if (a1)
    {
      swift_retain();
      outlined retain of PhysicsBodyComponent?((uint64_t)v73);
      SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable)
        goto LABEL_9;
      v14 = SceneNullable;
      v15 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v15)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v14);
      }
      v16 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v16)
LABEL_9:
        v16 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v53);
      swift_retain();
      v16 = 0;
    }
    *(double *)v17.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v16);
    v33 = v18;
    v34 = v17;
    v31 = v20;
    v32 = v19;
    *(__n64 *)v21.f32 = simd_float4x4.transform(force:)(a3, v17, v18, v19);
    v50 = v21;
    HasTransform.convert(position:to:)(v16, a2, (uint64_t)&protocol witness table for Entity, v48);
    v30 = v22;
    *(float32x2_t *)v23.f32 = simd_float4x4.transform(position:)(a4, v34, v33, v32, v31);
    v24 = vsubq_f32(v23, v30);
    v25 = vaddq_f32(v35, v50);
    v25.i32[3] = 0;
    v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v24)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v27.i32[0] = vextq_s8(v26, v26, 8uLL).u32[0];
    v27.i32[1] = v26.i32[0];
    *(float32x2_t *)&v28 = vadd_f32(*(float32x2_t *)&v36, v27);
    *((float *)&v28 + 2) = *((float *)&v36 + 2) + *(float *)&v26.i32[1];
    HIDWORD(v28) = 0;
    v53[0] = v7;
    v54 = v8;
    v55 = v47;
    v56 = v48;
    v57 = v46;
    v58 = v9;
    v59 = v10;
    v60 = v11;
    v61 = v43;
    v62 = v42;
    v63 = v41;
    v64 = v40;
    v65 = v39;
    v66 = v38;
    v67 = v25;
    v68 = v28;
    v69 = v45;
    v70 = v44;
    v71 = v37;
    v72 = v12;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v53, v29);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v52);
    HasPhysicsBody.physicsBody.setter((uint64_t)v52);
    swift_release();
    return outlined release of PhysicsBodyComponent?((uint64_t)v73);
  }
  return result;
}

uint64_t HasPhysicsBody.addTorque(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _BYTE *v10;
  __int128 v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _BYTE v18[176];
  _BYTE v19[176];
  _BYTE v20[112];
  __int128 v21;
  _BYTE v22[176];
  _BYTE v23[176];

  if (a1)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_8;
    v4 = SceneNullable;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6)
LABEL_8:
      v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  v15 = v8;
  v16 = v7;
  v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    v10 = v19;
  }
  else
  {
    *(float32x2_t *)&v11 = vadd_f32((float32x2_t)simd_float4x4.transform(torque:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2) = v12 + *((float *)&v21 + 2);
    HIDWORD(v11) = 0;
    v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

Swift::Void __swiftcall HasPhysicsBody.clearForcesAndTorques()()
{
  uint64_t v0;
  _BYTE v1[85];
  _BYTE v2[16];
  int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  _BYTE v22[176];
  _BYTE v23[176];
  _BYTE v24[16];
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  char v40;
  uint64_t v41;

  HasPhysicsBody.physicsBody.getter((uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v23, (uint64_t)v24);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v24) != 1)
  {
    v2[0] = v24[0];
    v3 = v25;
    v4 = v26;
    v5 = v27;
    v6 = v28;
    v7 = v29;
    v8 = v30;
    v9 = v31;
    v10 = v32;
    v11 = v33;
    v12 = v34;
    v13 = v35;
    v14 = v36;
    v15 = v37;
    v16 = 0u;
    v17 = 0u;
    v18 = v38;
    v19 = v39;
    v20 = v40;
    v21 = v41;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v2, v0);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v2, (uint64_t)v1);
    swift_retain();
    HasPhysicsBody.physicsBody.setter((uint64_t)v1);
    RERigidBodyComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      if (RERigidBodyComponentGetRigidBody())
        RERigidBodyClearForces();
    }
    outlined release of PhysicsBodyComponent?((uint64_t)v23);
  }
}

uint64_t HasPhysicsBody.applyLinearImpulse(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _BYTE *v10;
  __int128 v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _BYTE v18[176];
  _BYTE v19[176];
  _BYTE v20[128];
  __int128 v21;
  _BYTE v22[176];
  _BYTE v23[176];

  if (a1)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_8;
    v4 = SceneNullable;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6)
LABEL_8:
      v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  v15 = v8;
  v16 = v7;
  v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    v10 = v19;
  }
  else
  {
    *(float32x2_t *)&v11 = vadd_f32((float32x2_t)simd_float4x4.transform(force:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2) = v12 + *((float *)&v21 + 2);
    HIDWORD(v11) = 0;
    v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.applyAngularImpulse(_:relativeTo:)(uint64_t a1, float32x4_t a2)
{
  uint64_t SceneNullable;
  uint64_t v4;
  id v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _BYTE *v10;
  __int128 v11;
  float v12;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  _BYTE v18[176];
  _BYTE v19[176];
  _BYTE v20[144];
  __int128 v21;
  _BYTE v22[176];
  _BYTE v23[176];

  if (a1)
  {
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (!SceneNullable)
      goto LABEL_8;
    v4 = SceneNullable;
    v5 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v5)
    {
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      Scene.init(coreScene:)(v4);
    }
    v6 = Scene.physicsOrigin.getter();
    swift_release();
    if (!v6)
LABEL_8:
      v6 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
    swift_release();
  }
  else
  {
    v6 = 0;
  }
  *(double *)v7.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v6);
  v15 = v8;
  v16 = v7;
  v14 = v9;
  HasPhysicsBody.physicsBody.getter((uint64_t)v20);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v22);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v23);
  if (_s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v23) == 1)
  {
    outlined init with take of PhysicsBodyComponent?((uint64_t)v22, (uint64_t)v19);
    v10 = v19;
  }
  else
  {
    *(float32x2_t *)&v11 = vadd_f32((float32x2_t)simd_float4x4.transform(torque:)(a2, v16, v15, v14).n64_u64[0], *(float32x2_t *)&v21);
    *((float *)&v11 + 2) = v12 + *((float *)&v21 + 2);
    HIDWORD(v11) = 0;
    v21 = v11;
    outlined init with take of PhysicsBodyComponent?((uint64_t)v20, (uint64_t)v19);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v19, (uint64_t)v18);
    v10 = v18;
  }
  HasPhysicsBody.physicsBody.setter((uint64_t)v10);
  return swift_release();
}

uint64_t HasPhysicsBody.applyImpulse(_:at:relativeTo:)(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t result;
  char v7;
  int v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t SceneNullable;
  uint64_t v14;
  id v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x2_t v27;
  __int128 v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __n128 v48;
  float32x4_t v50;
  _BYTE v52[85];
  _BYTE v53[16];
  int v54;
  __int128 v55;
  __n128 v56;
  __int128 v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  __int128 v67;
  __int128 v68;
  float32x4_t v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  _BYTE v73[85];
  _BYTE v74[16];
  int v75;
  __int128 v76;
  __n128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  char v81;
  char v82;
  char v83;
  char v84;
  char v85;
  char v86;
  char v87;
  __int128 v88;
  __int128 v89;
  float32x4_t v90;
  __int128 v91;
  char v92;
  uint64_t v93;

  HasPhysicsBody.physicsBody.getter((uint64_t)v53);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v73);
  outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v74);
  result = _s10RealityKit20PhysicsBodyComponentVSgWOg((uint64_t)v74);
  if ((_DWORD)result != 1)
  {
    v7 = v74[0];
    v8 = v75;
    v47 = v76;
    v48 = v77;
    v9 = v79;
    v10 = v80;
    v11 = v81;
    v42 = v83;
    v43 = v82;
    v40 = v85;
    v41 = v84;
    v38 = v87;
    v39 = v86;
    v45 = v88;
    v46 = v78;
    v44 = v89;
    v35 = v90;
    v36 = v91;
    v37 = v92;
    v12 = v93;
    if (a1)
    {
      swift_retain();
      outlined retain of PhysicsBodyComponent?((uint64_t)v73);
      SceneNullable = REEntityGetSceneNullable();
      if (!SceneNullable)
        goto LABEL_9;
      v14 = SceneNullable;
      v15 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v15)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v14);
      }
      v16 = Scene.physicsOrigin.getter();
      swift_release();
      if (!v16)
LABEL_9:
        v16 = specialized static PhysicsSimulationComponent.nearestSimulationEntity(for:)();
      swift_release();
    }
    else
    {
      outlined init with take of PhysicsBodyComponent?((uint64_t)v73, (uint64_t)v53);
      swift_retain();
      v16 = 0;
    }
    *(double *)v17.i64 = specialized static HasTransform.conversionMatrix<A, B>(from:to:)(a1, v16);
    v33 = v18;
    v34 = v17;
    v31 = v20;
    v32 = v19;
    *(__n64 *)v21.f32 = simd_float4x4.transform(force:)(a3, v17, v18, v19);
    v50 = v21;
    HasTransform.convert(position:to:)(v16, a2, (uint64_t)&protocol witness table for Entity, v48);
    v30 = v22;
    *(float32x2_t *)v23.f32 = simd_float4x4.transform(position:)(a4, v34, v33, v32, v31);
    v24 = vsubq_f32(v23, v30);
    v25 = vaddq_f32(v35, v50);
    v25.i32[3] = 0;
    v26 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v50, (int32x4_t)v50), (int8x16_t)v50, 0xCuLL), vnegq_f32(v24)), v50, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    v27.i32[0] = vextq_s8(v26, v26, 8uLL).u32[0];
    v27.i32[1] = v26.i32[0];
    *(float32x2_t *)&v28 = vadd_f32(*(float32x2_t *)&v36, v27);
    *((float *)&v28 + 2) = *((float *)&v36 + 2) + *(float *)&v26.i32[1];
    HIDWORD(v28) = 0;
    v53[0] = v7;
    v54 = v8;
    v55 = v47;
    v56 = v48;
    v57 = v46;
    v58 = v9;
    v59 = v10;
    v60 = v11;
    v61 = v43;
    v62 = v42;
    v63 = v41;
    v64 = v40;
    v65 = v39;
    v66 = v38;
    v67 = v45;
    v68 = v44;
    v69 = v25;
    v70 = v28;
    v71 = v37;
    v72 = v12;
    destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError(v53, v29);
    outlined init with take of PhysicsBodyComponent?((uint64_t)v53, (uint64_t)v52);
    HasPhysicsBody.physicsBody.setter((uint64_t)v52);
    swift_release();
    return outlined release of PhysicsBodyComponent?((uint64_t)v73);
  }
  return result;
}

Swift::Bool __swiftcall RKChangeSceneActionRuntimeTechnique.switchScenes()()
{
  if ((RKChangeSceneActionRuntimeTechnique.removeAllScenes()() & 1) != 0)
    return RKChangeSceneActionRuntimeTechnique.loadNextScene()();
  else
    return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.removeAllScenes()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  os_log_type_t v7;
  _BYTE v9[32];
  uint64_t v10[2];

  v10[0] = StaticString.description.getter();
  v10[1] = v1;
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  if (!*(_QWORD *)(v0 + 16))
  {
    v6 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v6, v10);
    swift_bridgeObjectRelease();
LABEL_6:
    v4 = 0;
    return v4 & 1;
  }
  swift_retain();
  if ((RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()() & 1) == 0)
  {
    v7 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v7, v10);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_6;
  }
  v3 = RKChangeSceneActionRuntimeTechnique.unloadScene()();
  v4 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v9[16] = v4 & 1;
  v5 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v5, v10, partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes(), v9);
  swift_bridgeObjectRelease();
  swift_release();
  return v4 & 1;
}

uint64_t implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()(char a1)
{
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;

  _StringGuts.grow(_:)(26);
  v2._object = (void *)0x800000021BE8E2A0;
  v2._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v2);
  if ((a1 & 1) != 0)
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t Parent;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _BYTE v29[16];
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  uint64_t *v34;
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = StaticString.description.getter();
  v37 = v1;
  v2._countAndFlagsBits = 8250;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v4 = v36;
  v3 = v37;
  v41 = *(_QWORD *)(v0 + 16);
  v34 = &v41;
  v31 = v41;
  v32 = v0;
  swift_retain();
  v5 = static os_log_type_t.debug.getter();
  v6 = specialized InteractionsLogger.log(_:_:)(v5, &v36, partial apply for implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v33);
  if (!v41)
  {
LABEL_30:
    MEMORY[0x24BDAC7A8](v6);
    v30 = &v41;
    v36 = v4;
    v37 = v3;
    v22 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v22, &v36, partial apply for implicit closure #4 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    v23 = v41;
    if (v41)
      goto LABEL_35;
    v24 = v31 ? specialized HasHierarchy.parent.getter() : 0;
    v41 = v24;
    MEMORY[0x24BDAC7A8](v24);
    v30 = &v41;
    v36 = v4;
    v37 = v3;
    v25 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v25, &v36, partial apply for implicit closure #5 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    v23 = v41;
    if (v41)
    {
LABEL_35:
      *(_QWORD *)(v32 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity) = v23;
      swift_retain_n();
      v26 = swift_release();
      MEMORY[0x24BDAC7A8](v26);
      v30 = &v41;
      v36 = v4;
      v37 = v3;
      v27 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v27, &v36, partial apply for implicit closure #7 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return 1;
    }
    else
    {
      v36 = v4;
      v37 = v3;
      v28 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v28, &v36);
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  while (1)
  {
    swift_beginAccess();
    v10 = (void *)swift_retain();
    v11 = objc_getAssociatedObject(v10, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
    swift_endAccess();
    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v35, 0, sizeof(v35));
    }
    outlined init with take of Any?((uint64_t)v35, (uint64_t)&v36);
    if (!v38)
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_13:
      v39 = 0;
      v40 = 0;
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_13;
    v12 = v40;
    swift_bridgeObjectRelease();
    if (v12)
      goto LABEL_29;
LABEL_14:
    Parent = REEntityGetParent();
    if (!Parent)
    {
LABEL_29:
      v6 = swift_release();
      goto LABEL_30;
    }
    v14 = Parent;
    if ((id)REEntityGetSwiftObject())
    {
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
      break;
    v16 = specialized static Entity.entityInfoType(_:)();
    if (v16)
    {
      v17 = (*(uint64_t (**)(void))(v16 + 232))();
      MEMORY[0x22076D160](*(_QWORD *)(v17 + 16), 0);
      *(_QWORD *)(v17 + 16) = v14;
      MEMORY[0x22076D160](v14, v17);
    }
    else
    {
      makeEntity(for:)(v14);
    }
    swift_release();
LABEL_22:
    v18 = REEntityGetParent();
    if (v18)
    {
      v19 = v18;
      if ((id)REEntityGetSwiftObject())
      {
        type metadata accessor for Entity();
        v7 = swift_dynamicCastClassUnconditional();
      }
      else
      {
        result = REEntityIsBeingDestroyed();
        if ((result & 1) != 0)
          goto LABEL_39;
        v20 = specialized static Entity.entityInfoType(_:)();
        if (v20)
        {
          v7 = (*(uint64_t (**)(void))(v20 + 232))();
          v21 = *(_QWORD *)(v7 + 16);
          swift_retain();
          MEMORY[0x22076D160](v21, 0);
          *(_QWORD *)(v7 + 16) = v19;
          MEMORY[0x22076D160](v19, v7);
          swift_release();
        }
        else
        {
          v7 = makeEntity(for:)(v19);
        }
      }
    }
    else
    {
      v7 = 0;
    }
    v8 = swift_release();
    v41 = v7;
    MEMORY[0x24BDAC7A8](v8);
    v30 = &v41;
    v36 = v4;
    v37 = v3;
    v9 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v9, &v36, partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique(), v29);
    v6 = swift_release();
    if (!v41)
      goto LABEL_30;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(_QWORD *a1, Swift::Int a2, uint64_t a3, void *a4)
{
  Swift::String v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;

  _StringGuts.grow(_:)(a2);
  v7._countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  if (*a1)
  {
    _print_unlocked<A, B>(_:_:)();
    v8 = 0;
    v9 = 0xE000000000000000;
  }
  else
  {
    v9 = 0xE300000000000000;
    v8 = 7104878;
  }
  v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  String.append(_:)(v11);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.unloadScene()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t Object;
  unsigned __int8 *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  NSString *v19;
  Class v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity);
  if (!v1)
  {
    static os_log_type_t.error.getter();
    type metadata accessor for OS_os_log();
    v24 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    return v1 != 0;
  }
  swift_retain_n();
  if (REEntityGetChildCount() < 1)
  {
LABEL_38:
    swift_release_n();
    return v1 != 0;
  }
  v2 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v2 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_44;
    v4 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v5 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_43;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v7 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v8 = 1;
          else
            v8 = v7 == 0;
          if (v8)
          {
            result = swift_retain();
          }
          else
          {
            v9 = *v7;
            v10 = String.init(utf8String:)();
            if (v11)
              v12 = v10;
            else
              v12 = 0;
            if (v11)
              v13 = v11;
            else
              v13 = 0xE000000000000000;
            v7 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v9 == 42, v12, v13);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v7;
          }
          if (!v7)
            goto LABEL_45;
          swift_retain();
          v14 = String.init(utf8String:)();
          v16 = v15;
          swift_release();
          v17 = v16 ? v14 : 0;
          v18 = v16 ? v16 : 0xE000000000000000;
          v19 = (NSString *)MEMORY[0x220768C3C](v17, v18);
          swift_bridgeObjectRelease();
          v20 = NSClassFromString(v19);

          swift_release();
          if (v20)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v21 = swift_dynamicCastMetatype();
            if (v21)
            {
              v22 = (*(uint64_t (**)(void))(v21 + 232))();
              v23 = *(_QWORD *)(v22 + 16);
              swift_retain();
              MEMORY[0x22076D160](v23, 0);
              *(_QWORD *)(v22 + 16) = v4;
              MEMORY[0x22076D160](v4, v22);
              swift_release();
              goto LABEL_36;
            }
          }
        }
      }
      v5 = makeEntity(for:)(v4);
    }
    v22 = v5;
LABEL_36:
    result = REEntityGetChildCount();
    if (v2 >= result)
      goto LABEL_42;
    ++v2;
    MEMORY[0x22076D124](*(_QWORD *)(v22 + 16));
    swift_release();
    if (v2 >= REEntityGetChildCount())
      goto LABEL_38;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t RKChangeSceneActionRuntimeTechnique.loadNextScene()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t SceneNullable;
  uint64_t v15;
  id v16;
  id v17;
  Class isa;
  id v19;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  char *v28;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for noTargetSceneIdentifier != -1)
    swift_once();
  v4 = type metadata accessor for UUID();
  __swift_project_value_buffer(v4, (uint64_t)static __RKChangeSceneAction.noTargetSceneIdentifier);
  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v5 = static __RKActiveSceneManager.shared;
    swift_beginAccess();
    v5[2] = 0;
    swift_release();
    swift_beginAccess();
    v6 = v5[3];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v28 = v3;
      swift_bridgeObjectRetain();
      v8 = (uint64_t *)(v6 + 40);
      do
      {
        v9 = *v8;
        ObjectType = swift_getObjectType();
        v11 = v5[2];
        v12 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v9 + 8);
        swift_retain();
        swift_unknownObjectRetain();
        v12(v5, v11, ObjectType, v9);
        swift_unknownObjectRelease();
        swift_release();
        v8 += 2;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease();
      v3 = v28;
    }
    v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity);
    if (!v13)
      return 1;
    swift_retain();
    SceneNullable = REEntityGetSceneNullable();
    if (SceneNullable)
    {
      v15 = SceneNullable;
      v16 = (id)RESceneGetSwiftObject();
      type metadata accessor for Scene();
      if (v16)
      {
        swift_dynamicCastClassUnconditional();
      }
      else
      {
        swift_allocObject();
        Scene.init(coreScene:)(v15);
      }
      Scene.__interactionService.getter();
      swift_release();
      type metadata accessor for __RKEntityInteractionManager();
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v24 = v23;
        swift_beginAccess();
        v25 = *(_QWORD *)(v24 + 56);
        swift_retain();
        swift_unknownObjectRelease();
        v26 = type metadata accessor for AnchoringComponent.Target(0);
        v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
        v27(v3, 1, 1, v26);
        swift_retain();
        __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v13, 0, (uint64_t)v3);
        swift_release();
        outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for AnchoringComponent.Target?);
        specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
        if (v25)
        {
          v22 = 1;
          v27(v3, 1, 1, v26);
          swift_retain();
          __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(v13, 0, (uint64_t)v3);
          swift_release();
          swift_release_n();
          outlined destroy of BodyTrackingComponent?((uint64_t)v3, &demangling cache variable for type metadata for AnchoringComponent.Target?);
          return v22;
        }
        goto LABEL_25;
      }
      swift_unknownObjectRelease();
    }
    specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
LABEL_25:
    swift_release();
    return 1;
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  v17 = *((id *)static __RKSceneAssetLookupTable.shared + 2);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v19 = objc_msgSend(v17, sel_objectForKey_, isa);

  if (v19)
  {
    v20 = RKChangeSceneActionRuntimeTechnique.loadScene(_:)((uint64_t)v19);
    swift_release();
    return v20 & 1;
  }
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.loadScene(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t SceneNullable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  os_log_type_t v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  BOOL *v40;
  void *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  int v45;
  unint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  BOOL *v49;
  uint64_t v50;
  char *v51;
  os_log_type_t v52;
  uint64_t v53;
  os_log_type_t v54;
  void *v55;
  uint64_t v56;
  int EnableDefaultShadows;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  os_log_type_t v67;
  void *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t ObjectType;
  uint64_t v79;
  void (*v80)(_QWORD *, uint64_t, uint64_t, uint64_t);
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  id v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  BOOL *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for AnchoringComponent(0);
  v6 = *(_QWORD *)(v104 - 8);
  MEMORY[0x24BDAC7A8](v104);
  v8 = (BOOL *)&v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent.Target?);
  MEMORY[0x24BDAC7A8](v9);
  v105 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity;
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC17RealityFoundation35RKChangeSceneActionRuntimeTechnique_sceneSwitchEntity);
  v111 = 91;
  v112 = 0xE100000000000000;
  if (v12)
  {
    *(_QWORD *)&v109 = 0;
    *((_QWORD *)&v109 + 1) = 0xE000000000000000;
    v107 = v12;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v14 = *((_QWORD *)&v109 + 1);
    v13 = v109;
  }
  else
  {
    v14 = 0xE300000000000000;
    v13 = 7104878;
  }
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 8285;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8250;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  swift_release();
  v19 = v111;
  v20 = v112;
  v21 = *(_QWORD *)(v1 + v11);
  if (!v21)
  {
    v33 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v33, &v111);
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  v101 = v8;
  v102 = v1;
  swift_retain();
  Entity.__fetchLoadContext()();
  v22 = v111;
  v23 = v112;
  v24 = *(_QWORD *)(a1 + 16);
  RERetain();
  type metadata accessor for __SceneResource();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = v24;
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    v106 = 0;
    if (v23)
      goto LABEL_17;
LABEL_11:
    v111 = v19;
    v112 = v20;
    v34 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v34, &v111);
    swift_release();
    swift_setDeallocating();
    RERelease();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v27 = SceneNullable;
  v103 = v5;
  v28 = v22;
  v29 = v21;
  v30 = v19;
  v31 = v20;
  v32 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v32)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v27);
  }
  Scene.__interactionService.getter();
  swift_release();
  type metadata accessor for __RKEntityInteractionManager();
  v35 = swift_dynamicCastClass();
  if (v35)
  {
    v36 = v35;
    swift_beginAccess();
    v106 = *(_QWORD *)(v36 + 56);
    swift_retain();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    v106 = 0;
  }
  v20 = v31;
  v19 = v30;
  v21 = v29;
  v22 = v28;
  v5 = v103;
  if (!v23)
    goto LABEL_11;
LABEL_17:
  v37 = __SceneResource.makeAnchorEntity(fileName:)(v22, v23);
  v39 = v22;
  v40 = (BOOL *)v37;
  v100 = inited;
  v103 = (char *)v20;
  v99 = v39;
  v111 = v39;
  v112 = v23;
  swift_bridgeObjectRetain_n();
  v41 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  swift_beginAccess();
  objc_setAssociatedObject(v40, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v41, (void *)0x301);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v42 = type metadata accessor for AnchoringComponent.Target(0);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56);
  v44 = (uint64_t)v105;
  v43(v105, 1, 1, v42);
  swift_retain();
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v5);
  v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v104);
  if (v45 == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for AnchoringComponent?);
    swift_release();
    v46 = (unint64_t)v103;
    v111 = v19;
    v112 = (unint64_t)v103;
    v47 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v47, &v111);
  }
  else
  {
    v48 = (uint64_t)v101;
    outlined init with take of __RKEntityActionSpecification((uint64_t)v5, (uint64_t)v101, type metadata accessor for AnchoringComponent);
    swift_release();
    v111 = v19;
    v49 = v40;
    v50 = v19;
    v51 = v103;
    v112 = (unint64_t)v103;
    v52 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v52, &v111);
    outlined destroy of BodyTrackingComponent?(v44, &demangling cache variable for type metadata for AnchoringComponent.Target?);
    outlined init with take of __RKEntityActionSpecification(v48, v44, type metadata accessor for AnchoringComponent.Target);
    v43((char *)v44, 0, 1, v42);
    v46 = (unint64_t)v51;
    v19 = v50;
    v40 = v49;
  }
  v53 = specialized HasHierarchy.parent.getter();
  swift_release();
  if (v53)
  {
    v111 = v19;
    v112 = v46;
    v54 = static os_log_type_t.info.getter();
    specialized InteractionsLogger.log(_:_:)(v54, &v111);
    v40 = __SceneResource.makeRootEntity(withAnchoringComponent:hasAnchoringComponent:preferAnchorEntity:)(0, (BOOL *)&v111, 0);
    v104 = v19;
    v111 = v99;
    v112 = v23;
    swift_bridgeObjectRetain_n();
    v55 = (void *)_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v40, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v55, (void *)0x301);
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
  }
  else
  {
    v104 = v19;
    swift_bridgeObjectRelease();
  }
  v56 = type metadata accessor for Entity();
  swift_retain();
  RENetworkComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  specialized static Entity.enumerateCore(entity:recursive:block:)((uint64_t)v40, 1, v56);
  static UuidRemapHelper.remapIdentifiersAndInteractions(root:)((uint64_t)v40);
  swift_release();
  swift_retain();
  EnableDefaultShadows = REShadowsGetEnableDefaultShadows();
  v58 = v106;
  if (EnableDefaultShadows)
    MEMORY[0x22076F17C](*((_QWORD *)v40 + 2), 1);
  swift_release();
  swift_retain();
  Entity.generateCollisionShapes(recursive:)(1);
  swift_release();
  swift_retain();
  RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)();
  swift_release();
  v59 = specialized HasHierarchy.parent.getter();
  if (!v59)
  {
    type metadata accessor for AnchorEntity();
    v64 = swift_dynamicCastClass();
    if (v64)
    {
      v65 = (void *)v64;
      swift_retain();
      v66 = specialized HasHierarchy.parent.getter();
      swift_release();
      if (!v66)
      {
        v85 = swift_dynamicCastClass();
        if (v85)
        {
          v86 = (void *)v85;
          swift_retain();
          v87 = REEntityGetSceneNullable();
          if (v87)
          {
            v88 = v87;
            v89 = (uint64_t)v40;
            v90 = (id)RESceneGetSwiftObject();
            v102 = type metadata accessor for Scene();
            if (v90)
            {
              v91 = swift_dynamicCastClassUnconditional();
            }
            else
            {
              swift_allocObject();
              v91 = Scene.init(coreScene:)(v88);
            }
            v92 = v91;
            v111 = v104;
            v112 = v46;
            v93 = static os_log_type_t.error.getter();
            specialized InteractionsLogger.log(_:_:)(v93, &v111);
            if (v58)
            {
              swift_retain();
              __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v21, v89, v44);
              swift_release();
            }
            RESceneRemoveEntity();
            swift_retain();
            swift_retain();
            specialized Scene.AnchorCollection.append(_:)((uint64_t)v86, v92);
            swift_release();
            swift_release();
            swift_beginAccess();
            swift_retain();
            v94 = objc_getAssociatedObject(v65, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
            swift_endAccess();
            swift_release();
            if (v94)
            {
              _bridgeAnyObjectToAny(_:)();
              swift_unknownObjectRelease();
            }
            else
            {
              v109 = 0u;
              v110 = 0u;
            }
            outlined init with take of Any?((uint64_t)&v109, (uint64_t)&v111);
            if (v113)
            {
              type metadata accessor for __SceneResourceCache.Entry();
              if ((swift_dynamicCast() & 1) != 0)
              {
                __SceneResourceCache.Entry.attach(toEntity:)(v86);
                swift_release();
LABEL_76:
                swift_retain();
                v96 = REEntityGetSceneNullable();
                if (!v96)
                {
                  swift_release();
                  swift_release_n();
                  swift_release();
                  v72 = 0;
                  v40 = (BOOL *)v89;
                  goto LABEL_49;
                }
                v97 = v96;
                if ((id)RESceneGetSwiftObject())
                {
                  swift_release();
                  v40 = (BOOL *)v89;
                  swift_release_n();
                  swift_release();
                  goto LABEL_45;
                }
                swift_allocObject();
                v72 = Scene.init(coreScene:)(v97);
                swift_release();
                v40 = (BOOL *)v89;
                swift_release_n();
LABEL_48:
                swift_release();
                goto LABEL_49;
              }
            }
            else
            {
              outlined destroy of BodyTrackingComponent?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
            }
            v111 = v104;
            v112 = v46;
            v95 = static os_log_type_t.error.getter();
            specialized InteractionsLogger.log(_:_:)(v95, &v111);
            goto LABEL_76;
          }
          swift_release();
        }
      }
      swift_release();
    }
    v111 = v104;
    v112 = v46;
    v67 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v67, &v111);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of BodyTrackingComponent?(v44, &demangling cache variable for type metadata for AnchoringComponent.Target?);
    goto LABEL_9;
  }
  v60 = v59;
  v111 = v104;
  v112 = v46;
  v61 = static os_log_type_t.info.getter();
  specialized InteractionsLogger.log(_:_:)(v61, &v111);
  if (v58)
  {
    swift_retain();
    __RKRuntimeSceneCoordinator.willSwap(fromEntity:toEntity:anchoringTarget:)(v21, (uint64_t)v40, v44);
    swift_release();
  }
  specialized HasHierarchy.removeFromParent(preservingWorldTransform:)(0);
  v111 = v60;
  swift_retain();
  swift_retain();
  Entity.ChildCollection.doAppend(_:preservingWorldTransform:)((uint64_t)v40, 0);
  swift_release();
  swift_release();
  swift_beginAccess();
  v62 = (void *)swift_retain();
  v63 = objc_getAssociatedObject(v62, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  swift_release();
  if (v63)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v109 = 0u;
    v110 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v109, (uint64_t)&v111);
  if (v113)
  {
    type metadata accessor for __SceneResourceCache.Entry();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v68 = (void *)swift_retain();
      __SceneResourceCache.Entry.attach(toEntity:)(v68);
      swift_release();
      swift_release();
      goto LABEL_42;
    }
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v111 = v104;
  v112 = v46;
  v69 = static os_log_type_t.error.getter();
  specialized InteractionsLogger.log(_:_:)(v69, &v111);
LABEL_42:
  swift_retain();
  v70 = REEntityGetSceneNullable();
  if (!v70)
  {
    swift_release();
    swift_release();
    v72 = 0;
    goto LABEL_49;
  }
  v71 = v70;
  if (!(id)RESceneGetSwiftObject())
  {
    type metadata accessor for Scene();
    swift_allocObject();
    v72 = Scene.init(coreScene:)(v71);
    swift_release();
    goto LABEL_48;
  }
  swift_release();
  swift_release();
  type metadata accessor for Scene();
LABEL_45:
  v72 = swift_dynamicCastClassUnconditional();
LABEL_49:
  v101 = v40;
  if (one-time initialization token for shared != -1)
    swift_once();
  v73 = static __RKActiveSceneManager.shared;
  swift_beginAccess();
  v73[2] = v72;
  swift_retain_n();
  swift_release();
  swift_beginAccess();
  v74 = v73[3];
  v75 = *(_QWORD *)(v74 + 16);
  if (v75)
  {
    v102 = v72;
    swift_bridgeObjectRetain();
    v76 = (uint64_t *)(v74 + 40);
    do
    {
      v77 = *v76;
      ObjectType = swift_getObjectType();
      v79 = v73[2];
      v80 = *(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v77 + 8);
      swift_retain();
      swift_unknownObjectRetain();
      v80(v73, v79, ObjectType, v77);
      swift_unknownObjectRelease();
      swift_release();
      v76 += 2;
      --v75;
    }
    while (v75);
    swift_release();
    swift_bridgeObjectRelease();
    v58 = v106;
  }
  else
  {
    swift_release();
  }
  v81 = v103;
  v82 = (uint64_t)v105;
  v83 = (uint64_t)v101;
  if (v58)
  {
    swift_retain();
    __RKRuntimeSceneCoordinator.didSwap(fromEntity:toEntity:anchoringTarget:)(v21, v83, v82);
    swift_release();
  }
  v108[0] = v104;
  v108[1] = v81;
  v84 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v84, v108);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of BodyTrackingComponent?(v82, &demangling cache variable for type metadata for AnchoringComponent.Target?);
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x800000021BE8E0F0;
  v0._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v0);
  swift_getErrorValue();
  v1._countAndFlagsBits = Error.localizedDescription.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  REAnimationComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    result = REAnimationComponentGetEntryCount();
    if (result < 0)
      goto LABEL_47;
    v1 = result;
    if (result)
    {
      v2 = 0;
      do
      {
        v3 = v2 + 1;
        REAnimationComponentEntrySetRequest();
        v2 = v3;
      }
      while (v1 != v3);
    }
    REAnimationComponentStopAllAnimations();
    RENetworkMarkComponentDirty();
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
    return swift_release();
  v4 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v4 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_48;
    v5 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      v6 = swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_46;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (REEntityGetCustomComponent())
      {
        Object = RECustomComponentGetObject();
        if (Object)
        {
          v8 = *(unsigned __int8 **)Object;
          if (*(_QWORD *)(Object + 8))
            v9 = 1;
          else
            v9 = v8 == 0;
          if (v9)
          {
            result = swift_retain();
          }
          else
          {
            v10 = *v8;
            v11 = String.init(utf8String:)();
            if (v12)
              v13 = v11;
            else
              v13 = 0;
            if (v12)
              v14 = v12;
            else
              v14 = 0xE000000000000000;
            v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
            swift_bridgeObjectRelease();
            type metadata accessor for IntrospectionDataCleanupHelper();
            result = swift_allocObject();
            *(_QWORD *)(result + 16) = v8;
          }
          if (!v8)
            goto LABEL_49;
          swift_retain();
          v15 = String.init(utf8String:)();
          v17 = v16;
          swift_release();
          v18 = v17 ? v15 : 0;
          v19 = v17 ? v17 : 0xE000000000000000;
          v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
          swift_bridgeObjectRelease();
          v21 = NSClassFromString(v20);

          swift_release();
          if (v21)
          {
            swift_getObjCClassMetadata();
            type metadata accessor for Entity();
            v22 = swift_dynamicCastMetatype();
            if (v22)
            {
              v23 = (*(uint64_t (**)(void))(v22 + 232))();
              v24 = *(_QWORD *)(v23 + 16);
              swift_retain();
              MEMORY[0x22076D160](v24, 0);
              *(_QWORD *)(v23 + 16) = v5;
              MEMORY[0x22076D160](v5, v23);
              swift_release();
              goto LABEL_41;
            }
          }
        }
      }
      v6 = makeEntity(for:)(v5);
    }
    v23 = v6;
LABEL_41:
    result = REEntityGetChildCount();
    if (v4 >= result)
      goto LABEL_45;
    ++v4;
    RKChangeSceneActionRuntimeTechnique.stopAnimations(rootEntity:)(v23);
    swift_release();
    if (v4 >= REEntityGetChildCount())
      return swift_release();
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

uint64_t RKChangeSceneActionRuntimeTechnique.__ivar_destroyer()
{
  return swift_release();
}

uint64_t RKChangeSceneActionRuntimeTechnique.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + OBJC_IVAR____TtC17RealityFoundation33RKChangeSceneActionBasicTechnique_targetSceneIdentifier;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for RKChangeSceneActionRuntimeTechnique()
{
  return type metadata accessor for RKChangeSceneActionRuntimeTechnique();
}

uint64_t type metadata accessor for RKChangeSceneActionRuntimeTechnique()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RKChangeSceneActionRuntimeTechnique;
  if (!type metadata singleton initialization cache for RKChangeSceneActionRuntimeTechnique)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for RKChangeSceneActionRuntimeTechnique()
{
  return swift_updateClassMetadata2();
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)()
{
  return implicit closure #3 in RKChangeSceneActionRuntimeTechnique.loadScene(_:)();
}

uint64_t partial apply for implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;

  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(_QWORD **)(v0 + 16), 28, 0xD00000000000001ALL, (void *)0x800000021BE8E250);
}

uint64_t partial apply for implicit closure #4 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;

  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(_QWORD **)(v0 + 16), 26, 0xD000000000000018, (void *)0x800000021BE8E230);
}

uint64_t partial apply for implicit closure #7 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;

  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(_QWORD **)(v0 + 16), 35, 0xD000000000000021, (void *)0x800000021BE8E200);
}

uint64_t partial apply for implicit closure #5 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;

  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(_QWORD **)(v0 + 16), 41, 0xD000000000000027, (void *)0x800000021BE8E1D0);
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()()
{
  uint64_t v0;

  return implicit closure #1 in RKChangeSceneActionRuntimeTechnique.findSceneRootWithRootEntitySubTechnique()(*(_QWORD **)(v0 + 16), 27, 0xD000000000000019, (void *)0x800000021BE8E1B0);
}

uint64_t partial apply for implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()()
{
  uint64_t v0;

  return implicit closure #3 in RKChangeSceneActionRuntimeTechnique.removeAllScenes()(*(_BYTE *)(v0 + 16));
}

uint64_t SceneComponentCollection.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[8];
  _BYTE v12[32];
  _QWORD v13[4];

  v3 = v2;
  result = RESceneDereferenceComponentCollectionPosition();
  if (result)
  {
    v7 = *(_QWORD *)(v3 + 16);
    v8 = __OFADD__(v7, 1);
    v9 = v7 + 1;
    if (v8)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v3 + 16) = v9;
      v10 = *(_QWORD *)(a1 + 16);
      v13[3] = MEMORY[0x24BEE27D0];
      v13[0] = result;
      outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(a1 + 24) + 64))(v11, v10);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 0, 1, v10);
    }
  }
  else
  {
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(v3 + 8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 56))(a2, 1, 1);
  }
  return result;
}

uint64_t SceneComponentCollection.startIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SceneComponentCollection.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SceneComponentCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[8];
  _BYTE v8[32];
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *v2;
  if (a1 < 0)
    __break(1u);
  v11 = a1;
  v4 = RESceneDereferenceComponentCollectionPosition();
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v9[3] = MEMORY[0x24BEE27D0];
    v9[0] = v4;
    outlined init with copy of Any((uint64_t)v9, (uint64_t)v8);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(a2 + 24) + 64))(v7, v5);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::UInt __swiftcall SceneComponentCollection.index(after:)(Swift::UInt after)
{
  BOOL v1;
  Swift::UInt result;

  v1 = __CFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance SceneComponentCollection<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SceneComponentCollection.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance SceneComponentCollection<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = SceneComponentCollection.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance SceneComponentCollection<A>(_QWORD *a1, uint64_t *a2, uint64_t a3))(_QWORD *a1)
{
  _QWORD *v6;

  v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = SceneComponentCollection.subscript.read(v6, *a2, a3);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

void (*SceneComponentCollection.subscript.read(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = malloc(*(_QWORD *)(v6 + 64));
  SceneComponentCollection.subscript.getter(a2, a3);
  return SceneComponentCollection.subscript.read;
}

void SceneComponentCollection.subscript.read(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance SceneComponentCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x24BEE1B68], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07E0]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x24BEE08B8], (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x24BEE07F0]);
}

_QWORD *protocol witness for Collection.index(after:) in conformance SceneComponentCollection<A>@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result == -1)
    __break(1u);
  else
    *a2 = *result + 1;
  return result;
}

_QWORD *protocol witness for Collection.formIndex(after:) in conformance SceneComponentCollection<A>(_QWORD *result)
{
  if (*result == -1)
    __break(1u);
  else
    ++*result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance SceneComponentCollection<A>()
{
  return Sequence<>.makeIterator()();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance SceneComponentCollection<A>(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SceneComponentCollection<A>, a1);
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance SceneComponentCollection<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[2];
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v4;
  v8 = v3;
  v5 = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneComponentCollection<A>, a1);
  return specialized Collection._copyToContiguousArray()(v7, a1, v5);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance SceneComponentCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x220768E4C](a1, a2, a3, a4, a5);
}

uint64_t Scene.SceneComponentTypeTable.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t Scene.SceneComponentTypeTable.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t Scene.components.getter()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for Scene.SceneComponentTypeTable();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  swift_retain();
  return v1;
}

uint64_t type metadata accessor for Scene.SceneComponentTypeTable()
{
  return objc_opt_self();
}

void base witness table accessor for Sequence in SceneComponentCollection<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in SceneComponentCollection<A>()
{
  return MEMORY[0x24BEE1EA0];
}

void associated type witness table accessor for Collection.Indices : Collection in SceneComponentCollection<A>()
{
  JUMPOUT(0x220772E3CLL);
}

void associated type witness table accessor for Collection.SubSequence : Collection in SceneComponentCollection<A>()
{
  JUMPOUT(0x220772E3CLL);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in SceneComponentCollection<A>()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t getEnumTagSinglePayload for SceneComponentCollection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SceneComponentCollection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

uint64_t type metadata accessor for SceneComponentCollection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SceneComponentCollection);
}

uint64_t method lookup function for Scene.SceneComponentTypeTable()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  void (*v16)(char *, uint64_t);
  uint64_t v17;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v4 = type metadata accessor for Range();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - v9;
  v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v7, a2, v4);
  if ((v11 & 1) == 0)
  {
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v7, v4);
    result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }
  v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t (*v23)(char *, char *, uint64_t, uint64_t);

  v23 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v22 - v17;
  v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0)
LABEL_5:
    __break(1u);
  return result;
}

Swift::Int __swiftcall UniqueIDManager.generateNextUnassignedID()()
{
  uint64_t v0;
  _QWORD *v1;
  os_unfair_lock_s *v2;
  Swift::Int result;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;

  v1 = (_QWORD *)v0;
  v2 = *(os_unfair_lock_s **)(v0 + 16);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  result = swift_beginAccess();
  v5 = v1[3];
  for (i = v1[4]; *(_QWORD *)(v5 + 16); v5 = v1[3])
  {
    result = static Hasher._hash(seed:_:)();
    v6 = -1 << *(_BYTE *)(v5 + 32);
    v7 = result & ~v6;
    if (((*(_QWORD *)(v5 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      break;
    v8 = *(_QWORD *)(v5 + 48);
    if (*(_QWORD *)(v8 + 8 * v7) != i)
    {
      v9 = ~v6;
      do
      {
        v7 = (v7 + 1) & v9;
        if (((*(_QWORD *)(v5 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
          goto LABEL_9;
      }
      while (*(_QWORD *)(v8 + 8 * v7) != i);
    }
    v10 = v1[4];
    i = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    v1[4] = i;
  }
LABEL_9:
  v11 = v1[4];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
LABEL_13:
    __break(1u);
  }
  else
  {
    v1[4] = v13;
    result = specialized Set.contains(_:)(i, v5);
    if ((result & 1) == 0)
    {
      swift_beginAccess();
      specialized Set._Variant.insert(_:)(&v15, i);
      swift_endAccess();
      v14 = (os_unfair_lock_s *)v1[2];
      swift_retain();
      os_unfair_lock_unlock(v14 + 4);
      swift_release();
      return i;
    }
  }
  __break(1u);
  return result;
}

uint64_t UniqueIDManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UniqueIDManager()
{
  return objc_opt_self();
}

uint64_t HasCollision.collision.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_BYTE *, _QWORD);
  _BYTE v5[32];

  v2 = *a1;
  v3 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v5);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3(v5, 0);
}

uint64_t HasCollision.collision.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v4);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(a1);
  return swift_release();
}

uint64_t key path setter for HasCollision.collision : <A>A(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *((_QWORD *)a1 + 2);
  v3 = *a1;
  v4 = v1;
  swift_bridgeObjectRetain();
  return HasCollision.collision.setter((uint64_t *)&v3);
}

void (*HasCollision.collision.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v9;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v3 + 96))(&v9);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)(v7);
  swift_release();
  return HasCollision.collision.modify;
}

void HasCollision.collision.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[3];

  v2 = *a1;
  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5[0] = **a1;
  v5[1] = v3;
  v5[2] = v4;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    HasCollision.collision.setter(v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    HasCollision.collision.setter(v5);
  }
  free(v2);
}

double sub_21BCA14D4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v4;
  uint64_t v5;

  HasCollision.collision.getter(&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BCA1518()
{
  return 16;
}

__n128 sub_21BCA1524(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t REAudioGeneratorBlockConfigurationWrapper.__deallocating_deinit()
{
  REAudioGeneratorBlockConfigurationDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioGeneratorBlockConfigurationWrapper()
{
  return objc_opt_self();
}

uint64_t QuerySelectors.ComponentQueryResult.__allocating_init(entity:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t QuerySelectors.ComponentQueryResult.entity.getter()
{
  specialized QuerySelectors.ComponentQueryResult.entity.getter();
  return swift_retain();
}

uint64_t QuerySelectors.ComponentQueryResult.entity.setter(uint64_t a1)
{
  specialized QuerySelectors.ComponentQueryResult.entity.setter(a1);
  return swift_release();
}

uint64_t (*QuerySelectors.ComponentQueryResult.entity.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*result)(_QWORD *);

  a1[1] = v1;
  result = *(uint64_t (**)(_QWORD *))(v1 + 16);
  if (result)
  {
    *a1 = result;
    swift_retain();
    return QuerySelectors.ComponentQueryResult.entity.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t QuerySelectors.ComponentQueryResult.entity.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + 16) = *a1;
  return swift_release();
}

uint64_t QuerySelectors.ComponentQueryResult._entity.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t QuerySelectors.ComponentQueryResult.init(entity:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void QuerySelectors.ComponentQueryResult.component.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  ValueMetadata *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (**Description)(_QWORD, char *, ValueMetadata *);
  _QWORD v9[2];

  v3 = *v1;
  v4 = *(ValueMetadata **)(*v1 + 80);
  v5 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - v6;
  if (v1[2])
  {
    v9[1] = v1[2];
    Entity.ComponentSet.subscript.getter(v4, *(_QWORD *)(v3 + 88), (uint64_t)v7);
    Description = (void (**)(_QWORD, char *, ValueMetadata *))v4[-1].Description;
    if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))Description[6])(v7, 1, v4) != 1)
    {
      Description[4](a1, v7, v4);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t QuerySelectors.ComponentQueryResult.component.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  specialized QuerySelectors.ComponentQueryResult.component.setter(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 8))(a1);
}

void (*QuerySelectors.ComponentQueryResult.component.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  QuerySelectors.ComponentQueryResult.component.getter((uint64_t)v7);
  return QuerySelectors.ComponentQueryResult.component.modify;
}

void QuerySelectors.ComponentQueryResult.component.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    specialized QuerySelectors.ComponentQueryResult.component.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized QuerySelectors.ComponentQueryResult.component.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t QuerySelectors.ComponentQueryResult.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t QuerySelectors.ComponentQueryResult.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized QuerySelectors.ComponentQueryResult.entity.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (!result)
    __break(1u);
  return result;
}

uint64_t specialized QuerySelectors.ComponentQueryResult.entity.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  swift_retain();
  return swift_release();
}

void specialized QuerySelectors.ComponentQueryResult.component.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  ValueMetadata *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (**Description)(char *, _QWORD, ValueMetadata *, __n128);
  uint64_t v12;
  _QWORD v13[2];

  v3 = *v1;
  v4 = *(ValueMetadata **)(*v1 + 80);
  v5 = type metadata accessor for Optional();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v13 - v8;
  v10 = v1[2];
  if (v10)
  {
    Description = (void (**)(char *, _QWORD, ValueMetadata *, __n128))v4[-1].Description;
    Description[2](v9, a1, v4, v7);
    ((void (*)(char *, _QWORD, uint64_t, ValueMetadata *))Description[7])(v9, 0, 1, v4);
    v13[1] = v10;
    v12 = *(_QWORD *)(v3 + 88);
    swift_retain();
    specialized Entity.ComponentSet.subscript.setter((uint64_t)v9, (uint64_t)v4, v4, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_21BCA19E8@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized QuerySelectors.ComponentQueryResult.entity.getter();
  return swift_retain();
}

uint64_t sub_21BCA1A10()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized QuerySelectors.ComponentQueryResult.entity.setter(v0);
  return swift_release();
}

uint64_t sub_21BCA1A40()
{
  return 16;
}

__n128 sub_21BCA1A4C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_21BCA1A58(uint64_t a1@<X8>)
{
  QuerySelectors.ComponentQueryResult.component.getter(a1);
}

void sub_21BCA1A78(uint64_t a1)
{
  specialized QuerySelectors.ComponentQueryResult.component.setter(a1);
}

uint64_t sub_21BCA1A98()
{
  return 16;
}

__n128 sub_21BCA1AA4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for QuerySelectors.ComponentQueryResult()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for QuerySelectors.ComponentQueryResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QuerySelectors.ComponentQueryResult);
}

uint64_t method lookup function for QuerySelectors.ComponentQueryResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.entity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.__allocating_init(entity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of QuerySelectors.ComponentQueryResult.component.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t type metadata accessor for QuerySelectors.ComponentTypeSelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QuerySelectors.ComponentTypeSelector);
}

double BillboardComponent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_21BE41230;
  *(_BYTE *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = xmmword_21BE41240;
  *(_DWORD *)(a1 + 80) = 1065353216;
  return result;
}

uint64_t BillboardComponent.rotationAxis.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t BillboardComponent.rotationAxis.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)v3 = result;
  *(_QWORD *)(v3 + 8) = a2;
  *(_BYTE *)(v3 + 16) = a3 & 1;
  return result;
}

uint64_t (*BillboardComponent.rotationAxis.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t BillboardComponent.upDirection.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t BillboardComponent.upDirection.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = a2;
  *(_BYTE *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t (*BillboardComponent.upDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 BillboardComponent.forwardDirection.getter()
{
  __n128 *v0;

  return v0[4];
}

void BillboardComponent.forwardDirection.setter(__n128 a1)
{
  __n128 *v1;

  v1[4] = a1;
}

uint64_t (*BillboardComponent.forwardDirection.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float BillboardComponent.blendFactor.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 80);
}

void BillboardComponent.blendFactor.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 80) = a1;
}

uint64_t (*BillboardComponent.blendFactor.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double static BillboardComponent.rotateAroundAllAxes.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = xmmword_21BE41240;
  *(_DWORD *)(a1 + 80) = 1065353216;
  return result;
}

double static BillboardComponent.rotateAroundYAxis.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_OWORD *)a1 = xmmword_21BE41230;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = xmmword_21BE41240;
  *(_DWORD *)(a1 + 80) = 1065353216;
  return result;
}

__n128 protocol witness for static Component.__fromCore(_:) in conformance BillboardComponent@<Q0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  __n128 v4;
  int UseUpDirection;
  __int128 v6;
  int UseRotationAxis;
  char v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __n128 v12;

  REBillboardComponentGetBlendFactor();
  v3 = v2;
  REBillboardComponentGetForwardDirection();
  v12 = v4;
  UseUpDirection = REBillboardComponentGetUseUpDirection();
  v6 = 0uLL;
  if (UseUpDirection)
    REBillboardComponentGetUpDirection();
  v11 = v6;
  UseRotationAxis = REBillboardComponentGetUseRotationAxis();
  v8 = UseRotationAxis;
  v9 = 0uLL;
  if (UseRotationAxis)
    REBillboardComponentGetRotationAxis();
  *(_OWORD *)a1 = v9;
  *(_BYTE *)(a1 + 16) = v8 ^ 1;
  *(_OWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 48) = UseUpDirection ^ 1;
  result = v12;
  *(__n128 *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 80) = v3;
  return result;
}

__n128 static BillboardComponent.__fromCore(_:)@<Q0>(uint64_t a1@<X8>)
{
  int v2;
  int v3;
  __n128 v4;
  int UseUpDirection;
  __int128 v6;
  int UseRotationAxis;
  char v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __n128 v12;

  REBillboardComponentGetBlendFactor();
  v3 = v2;
  REBillboardComponentGetForwardDirection();
  v12 = v4;
  UseUpDirection = REBillboardComponentGetUseUpDirection();
  v6 = 0uLL;
  if (UseUpDirection)
    REBillboardComponentGetUpDirection();
  v11 = v6;
  UseRotationAxis = REBillboardComponentGetUseRotationAxis();
  v8 = UseRotationAxis;
  v9 = 0uLL;
  if (UseRotationAxis)
    REBillboardComponentGetRotationAxis();
  *(_OWORD *)a1 = v9;
  *(_BYTE *)(a1 + 16) = v8 ^ 1;
  *(_OWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 48) = UseUpDirection ^ 1;
  result = v12;
  *(__n128 *)(a1 + 64) = v12;
  *(_DWORD *)(a1 + 80) = v3;
  return result;
}

uint64_t BillboardComponent.__toCore(_:)()
{
  uint64_t v0;
  char v1;
  char v2;

  v1 = *(_BYTE *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 48);
  REBillboardComponentSetBlendFactor();
  REBillboardComponentSetForwardDirection();
  if ((v2 & 1) == 0)
  {
    REBillboardComponentSetUseUpDirection();
    REBillboardComponentSetUpDirection();
    if ((v1 & 1) == 0)
      goto LABEL_3;
LABEL_5:
    REBillboardComponentSetUseRotationAxis();
    return RENetworkMarkComponentDirty();
  }
  REBillboardComponentSetUseUpDirection();
  if ((v1 & 1) != 0)
    goto LABEL_5;
LABEL_3:
  REBillboardComponentSetUseRotationAxis();
  REBillboardComponentSetRotationAxis();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance BillboardComponent(_DWORD *a1@<X8>)
{
  *a1 = 5007;
}

void static BillboardComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 5007;
}

__n128 __swift_memcpy84_16(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for BillboardComponent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 84))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BillboardComponent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 80) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 84) = v3;
  return result;
}

ValueMetadata *type metadata accessor for BillboardComponent()
{
  return &type metadata for BillboardComponent;
}

uint64_t AudioFileResource.Configuration.init(from:)@<X0>(uint64_t a1@<X8>)
{
  char Streaming;
  int LoopCount;
  char RandomizeStart;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  char v17;
  double v18;
  char v19;
  char v20;
  int NormalizationMode;
  double v22;
  int CalibrationMode;
  uint64_t v24;

  if ((REAssetHandleIsLoaded() & 1) == 0)
  {
    if (one-time initialization token for audio != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.audio);
    v11 = static os_log_type_t.error.getter();
    v12 = Logger.logObject.getter();
    if (os_log_type_enabled(v12, v11))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_21B9AA000, v12, v11, "In order to construct an AudioFileResource.Configuration, the underlying CoreRE AudioFileAsset\nmust be at least partially loaded. Initializing AudioFileResource.Configuration with default\nvalues instead.", v13, 2u);
      MEMORY[0x220772F44](v13, -1, -1);
    }

    result = swift_bridgeObjectRelease();
    v7 = 0;
    v9 = 0;
    v15 = 0;
    RandomizeStart = 0;
    v16 = 0;
    v17 = 1;
    v18 = 0.0;
    v19 = -1;
    v20 = -1;
    goto LABEL_25;
  }
  Streaming = REAudioFileAssetGetStreaming();
  LoopCount = REAudioFileAssetGetLoopCount();
  RandomizeStart = REAudioFileAssetGetRandomizeStart();
  v5 = (id)REAudioFileAssetGetMixGroupName();
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v17 = Streaming ^ 1;
  NormalizationMode = REAudioFileAssetGetNormalizationMode();
  REAudioFileAssetGetTargetLUFS();
  if (NormalizationMode == 2)
  {
    v20 = 0;
  }
  else
  {
    v18 = 0.0;
    if (NormalizationMode != 1)
    {
      v20 = -1;
      goto LABEL_18;
    }
    if (v22 == *MEMORY[0x24BE26238])
    {
      v20 = 2;
      goto LABEL_18;
    }
    v20 = 1;
  }
  v18 = v22;
LABEL_18:
  v16 = LoopCount != 0;
  CalibrationMode = REAudioFileAssetGetCalibrationMode();
  result = REAudioFileAssetGetCalibrationLevel();
  switch(CalibrationMode)
  {
    case 0:
      v15 = 0;
      v19 = -1;
LABEL_25:
      *(_BYTE *)a1 = v17;
      *(_BYTE *)(a1 + 1) = v16;
      *(_BYTE *)(a1 + 2) = RandomizeStart;
      *(double *)(a1 + 8) = v18;
      *(_BYTE *)(a1 + 16) = v20;
      *(_QWORD *)(a1 + 24) = v15;
      *(_BYTE *)(a1 + 32) = v19;
      *(_QWORD *)(a1 + 40) = v7;
      *(_QWORD *)(a1 + 48) = v9;
      *(_DWORD *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 60) = 1;
      return result;
    case 1:
      v19 = 0;
LABEL_24:
      v15 = v24;
      goto LABEL_25;
    case 2:
      v19 = 1;
      goto LABEL_24;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_BYTE *AudioFileResource.Configuration.init(loadingStrategy:shouldLoop:shouldRandomizeStartTime:normalization:calibration:mixGroupName:)@<X0>(_BYTE *result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;

  v8 = *a4;
  v9 = *((_BYTE *)a4 + 8);
  v10 = *a5;
  v11 = *((_BYTE *)a5 + 8);
  *(_BYTE *)a8 = *result;
  *(_BYTE *)(a8 + 1) = a2;
  *(_BYTE *)(a8 + 2) = a3;
  *(_QWORD *)(a8 + 8) = v8;
  *(_BYTE *)(a8 + 16) = v9;
  *(_QWORD *)(a8 + 24) = v10;
  *(_BYTE *)(a8 + 32) = v11;
  *(_QWORD *)(a8 + 40) = a6;
  *(_QWORD *)(a8 + 48) = a7;
  *(_DWORD *)(a8 + 56) = 0;
  *(_BYTE *)(a8 + 60) = 1;
  return result;
}

void AudioFileResource.Configuration.loadingStrategy.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *AudioFileResource.Configuration.loadingStrategy.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.loadingStrategy.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.shouldLoop.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t AudioFileResource.Configuration.shouldLoop.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.shouldLoop.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.shouldRandomizeStartTime.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t AudioFileResource.Configuration.shouldRandomizeStartTime.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*AudioFileResource.Configuration.shouldRandomizeStartTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.normalization.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioFileResource.Configuration.normalization.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 8) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.normalization.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.calibration.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t AudioFileResource.Configuration.calibration.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 24) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.calibration.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t AudioFileResource.Configuration.mixGroupName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioFileResource.Configuration.mixGroupName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 40) = a1;
  *(_QWORD *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AudioFileResource.Configuration.mixGroupName.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unint64_t AudioFileResource.Configuration.layoutTagOverride.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 56) | ((unint64_t)*(unsigned __int8 *)(v0 + 60) << 32);
}

uint64_t AudioFileResource.Configuration.layoutTagOverride.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 56) = result;
  *(_BYTE *)(v1 + 60) = BYTE4(result) & 1;
  return result;
}

uint64_t (*AudioFileResource.Configuration.layoutTagOverride.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void AudioFileResource.Configuration.hash(into:)()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt64 v5;
  int v6;
  uint64_t v7;
  int v8;
  Swift::UInt v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt32 v12;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(unsigned __int8 *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(unsigned __int8 *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 48);
  v12 = *(_DWORD *)(v0 + 56);
  v8 = *(unsigned __int8 *)(v0 + 60);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v4 == 255)
  {
    Hasher._combine(_:)(0);
    if (v6 != 255)
      goto LABEL_16;
LABEL_12:
    Hasher._combine(_:)(0);
    if (!v7)
      goto LABEL_20;
    goto LABEL_13;
  }
  Hasher._combine(_:)(1u);
  if (v4)
  {
    if (v4 != 1)
    {
      Hasher._combine(_:)(0);
      if (v6 != 255)
        goto LABEL_16;
      goto LABEL_12;
    }
    v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  Hasher._combine(_:)(v9);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v3;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (v6 == 255)
    goto LABEL_12;
LABEL_16:
  Hasher._combine(_:)(1u);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v5;
  else
    v11 = 0;
  Hasher._combine(_:)((v6 & 1) != 0);
  Hasher._combine(_:)(v11);
  if (!v7)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    if (!v8)
      goto LABEL_21;
LABEL_14:
    Hasher._combine(_:)(0);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8)
    goto LABEL_14;
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
}

Swift::Int AudioFileResource.Configuration.hashValue.getter()
{
  Hasher.init(_seed:)();
  AudioFileResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioFileResource.Configuration()
{
  Hasher.init(_seed:)();
  AudioFileResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioFileResource.Configuration()
{
  Hasher.init(_seed:)();
  AudioFileResource.Configuration.hash(into:)();
  return Hasher._finalize()();
}

BOOL specialized static AudioFileResource.Configuration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  char v17;
  int v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  int v23;
  double v24;
  double v25;
  char v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  int v31;
  int v32;
  int v33;
  int v34;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a1 + 2);
  v28 = *(double *)(a1 + 8);
  v25 = *(double *)(a1 + 24);
  v32 = *(unsigned __int8 *)(a1 + 32);
  v33 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v6 = *(_DWORD *)(a1 + 56);
  v7 = *(_BYTE *)(a1 + 60);
  v8 = *(unsigned __int8 *)(a2 + 1);
  v9 = *(unsigned __int8 *)(a2 + 2);
  v30 = *(double *)(a2 + 8);
  v34 = *(unsigned __int8 *)(a2 + 16);
  v24 = *(double *)(a2 + 24);
  v10 = *(_BYTE *)a1 == 0;
  v31 = *(unsigned __int8 *)(a2 + 32);
  if (*(_BYTE *)a1)
    v11 = 0x64616F6C657270;
  else
    v11 = 0x6D6165727473;
  v27 = *(_QWORD *)(a2 + 40);
  v29 = *(_QWORD *)(a2 + 48);
  if (v10)
    v12 = 0xE600000000000000;
  else
    v12 = 0xE700000000000000;
  v23 = *(_DWORD *)(a2 + 56);
  if (*(_BYTE *)a2)
    v13 = 0x64616F6C657270;
  else
    v13 = 0x6D6165727473;
  if (*(_BYTE *)a2)
    v14 = 0xE700000000000000;
  else
    v14 = 0xE600000000000000;
  v26 = *(_BYTE *)(a2 + 60);
  if (v11 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n();
    result = 0;
    if (v2 != v8 || ((v3 ^ v9) & 1) != 0)
      return result;
  }
  else
  {
    v22 = v5;
    v16 = v4;
    v17 = v7;
    v18 = v6;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v19 & 1) == 0)
      return result;
    if (((v2 ^ v8) & 1) != 0)
      return result;
    v6 = v18;
    v7 = v17;
    v4 = v16;
    v5 = v22;
    if (((v3 ^ v9) & 1) != 0)
      return result;
  }
  if (v33 != 255)
  {
    if (v34 == 255)
      return 0;
    if (v33)
    {
      if (v33 != 1)
      {
        result = 0;
        if (v34 != 2 || v30 != 0.0)
          return result;
        goto LABEL_34;
      }
      result = 0;
      if (v34 != 1)
        return result;
    }
    else
    {
      result = 0;
      if (v34)
        return result;
    }
    if (v28 != v30)
      return result;
    goto LABEL_34;
  }
  if (v34 != 255)
    return 0;
LABEL_34:
  if (v32 == 255)
  {
    if (v31 != 255)
      return 0;
  }
  else
  {
    if (v31 == 255)
      return 0;
    if ((v32 & 1) != 0)
    {
      if ((v31 & 1) == 0)
        return 0;
    }
    else if ((v31 & 1) != 0)
    {
      return 0;
    }
    if (v25 != v24)
      return 0;
  }
  if (!v5)
  {
    if (v29)
      return 0;
LABEL_50:
    if ((v7 & 1) == 0)
    {
      v21 = v26;
      if (v6 != v23)
        v21 = 1;
      return (v21 & 1) == 0;
    }
    return (v26 & 1) != 0;
  }
  if (!v29)
    return 0;
  if (v4 == v27 && v5 == v29)
    goto LABEL_50;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v20 & 1) != 0)
    goto LABEL_50;
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration;
  if (!lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioFileResource.Configuration, &type metadata for AudioFileResource.Configuration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioFileResource.Configuration and conformance AudioFileResource.Configuration);
  }
  return result;
}

uint64_t initializeWithCopy for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v3;
  v4 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = v6;
  return a1;
}

uint64_t assignWithTake for AudioFileResource.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
  return a1;
}

ValueMetadata *type metadata accessor for AudioFileResource.Configuration()
{
  return &type metadata for AudioFileResource.Configuration;
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKEntityInteractionsComponent.Registration, __RKEntityInteractionsComponent.Registration.init(), (uint64_t *)&static __RKEntityInteractionsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityInteractionsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKSceneUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKSceneUUIDComponent.Registration, __RKSceneUUIDComponent.Registration.init(), (uint64_t *)&static __RKSceneUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKSceneUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKSceneUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __REAnchoring(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __REAnchoring.Registration, __REAnchoring.Registration.init(), (uint64_t *)&static __REAnchoring.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __REAnchoring(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __REAnchoring.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKEntityTagsComponent.Registration, __RKEntityTagsComponent.Registration.init(), (uint64_t *)&static __RKEntityTagsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityTagsComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityTagsComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKEntityUUIDComponent.Registration, __RKEntityUUIDComponent.Registration.init(), (uint64_t *)&static __RKEntityUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityUUIDComponent(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKEntityUUIDComponent.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKScenePhysics(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(a1, a2, (void (*)(_QWORD))type metadata accessor for __RKScenePhysics.Registration, __RKScenePhysics.Registration.init(), (uint64_t *)&static __RKScenePhysics.registration);
}

uint64_t protocol witness for static RegisterableComponent.register() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t (*a4)(void), uint64_t *a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v9;

  a3(0);
  swift_allocObject();
  result = a4();
  if (!v5)
  {
    v9 = result;
    swift_beginAccess();
    *a5 = v9;
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKScenePhysics(uint64_t a1, uint64_t a2)
{
  return protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(a1, a2, &static __RKScenePhysics.registration);
}

uint64_t protocol witness for static RegisterableComponent.unregister() in conformance __RKEntityInteractionsComponent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  swift_beginAccess();
  *a3 = 0;
  return swift_release();
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance QuerySelectors.ComponentTypeSelector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static QuerySelector.project(from:)(a1, a2);
}

uint64_t static QuerySelector.project(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)&v11 - v7, a1, AssociatedTypeWitness, v5);
  v8 = swift_getAssociatedTypeWitness();
  v9 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, v9 ^ 1u, 1, v8);
}

uint64_t static QuerySelectors.QueryTypeSelector.project(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a3, a1, a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a3, 0, 1, a2);
}

uint64_t protocol witness for static QuerySelector.project(from:) in conformance QuerySelectors.QueryTypeSelector<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static QuerySelectors.QueryTypeSelector.project(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

uint64_t dispatch thunk of static QuerySelector.project(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for QuerySelectors()
{
  return &type metadata for QuerySelectors;
}

uint64_t type metadata instantiation function for QuerySelectors.QueryTypeSelector()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for QuerySelectors.QueryTypeSelector(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for QuerySelectors.QueryTypeSelector);
}

BOOL static PhotogrammetryFileHelpers.isExistingDirectory(_:)()
{
  return specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesCheckpointDir(maxNumImagesBytes:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = (unsigned __int128)(a1 * (__int128)3) >> 64;
  result = 3 * a1;
  if (v1 != result >> 63)
    __break(1u);
  return result;
}

uint64_t static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(uint64_t a1)
{
  return specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(a1) & 1;
}

uint64_t static PhotogrammetryFileHelpers.bytesPerMegabyte.getter()
{
  return 1000000;
}

id one-time initialization function for byteFormatter()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1490]), sel_init);
  objc_msgSend(v0, sel_setAllowedUnits_, 0xFFFFLL);
  objc_msgSend(v0, sel_setAdaptive_, 1);
  objc_msgSend(v0, sel_setIncludesUnit_, 1);
  result = objc_msgSend(v0, sel_setCountStyle_, 0);
  static PhotogrammetryFileHelpers.byteFormatter = (uint64_t)v0;
  return result;
}

id static PhotogrammetryFileHelpers.byteFormatter.getter()
{
  if (one-time initialization token for byteFormatter != -1)
    swift_once();
  return (id)static PhotogrammetryFileHelpers.byteFormatter;
}

uint64_t one-time initialization function for maxNumImagesForMobileReconstruction()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for ObjectCaptureSession();
  v0 = type metadata accessor for ObjectCaptureSession.HardwareSpecs();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ObjectCaptureSession.hardwareSpecs.getter();
  v4 = ObjectCaptureSession.HardwareSpecs.maxNumImages.getter();
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction = v4;
  return result;
}

uint64_t one-time initialization function for requiredBytesForImagesCaptureDirectory()
{
  uint64_t result;

  if (one-time initialization token for maxNumImagesForMobileReconstruction != -1)
    result = swift_once();
  if ((unsigned __int128)(static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction * (__int128)5000000) >> 64 == (5000000 * static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction) >> 63)
    static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory = 5000000
                                                                            * static PhotogrammetryFileHelpers.maxNumImagesForMobileReconstruction;
  else
    __break(1u);
  return result;
}

uint64_t static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory.getter()
{
  if (one-time initialization token for requiredBytesForImagesCaptureDirectory != -1)
    swift_once();
  return static PhotogrammetryFileHelpers.requiredBytesForImagesCaptureDirectory;
}

void one-time initialization function for temporaryDirectory()
{
  uint64_t v0;
  id v1;
  id v2;

  v0 = type metadata accessor for URL();
  __swift_allocate_value_buffer(v0, static PhotogrammetryFileHelpers.temporaryDirectory);
  __swift_project_value_buffer(v0, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v2 = objc_msgSend(v1, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static PhotogrammetryFileHelpers.temporaryDirectory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for temporaryDirectory != -1)
    swift_once();
  v2 = type metadata accessor for URL();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static PhotogrammetryFileHelpers.temporaryDirectory);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static PhotogrammetryFileHelpers.getAvailableStorage(ofDir:)(uint64_t a1)
{
  if (one-time initialization token for freeStorageProvider != -1)
    swift_once();
  return specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(a1);
}

uint64_t one-time initialization function for freeStorageProvider()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for PhotogrammetryFileHelpers.SystemFreeStorageProvider();
  result = swift_allocObject();
  qword_2551A7220 = v0;
  unk_2551A7228 = &protocol witness table for PhotogrammetryFileHelpers.SystemFreeStorageProvider;
  static PhotogrammetryFileHelpers.freeStorageProvider = result;
  return result;
}

uint64_t specialized static PhotogrammetryFileHelpers.ensureDirectoryExists(directory:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char **p_name;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44[2];

  v44[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  p_name = &stru_24DFECFF8.name;
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    LOBYTE(v44[0]) = 0;
    v8 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v9 = a1;
    v10 = URL.path.getter();
    v11 = (void *)MEMORY[0x220768C3C](v10);
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v8, sel_fileExistsAtPath_isDirectory_, v11, v44);

    if (v12 && ((uint64_t)v44[0] & 1) != 0)
    {
      LOBYTE(v13) = 1;
      return v13 & 1;
    }
    a1 = v9;
    p_name = &stru_24DFECFF8.name;
  }
  if (one-time initialization token for logger != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)logger);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v42 = v15;
  v16 = v4;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v41 = v1;
    v20 = v19;
    v21 = (void *)swift_slowAlloc();
    v39 = v21;
    *(_DWORD *)v20 = 141558274;
    v43 = 1752392040;
    v44[0] = v21;
    v40 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2080;
    lazy protocol witness table accessor for type URL and conformance URL();
    v38 = v16;
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v6, v3);
    _os_log_impl(&dword_21B9AA000, v17, v18, "Creating directory: %{mask.hash}s...", (uint8_t *)v20, 0x16u);
    v24 = v39;
    swift_arrayDestroy();
    v25 = v24;
    p_name = (char **)(&stru_24DFECFF8 + 8);
    MEMORY[0x220772F44](v25, -1, -1);
    MEMORY[0x220772F44](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
  }

  v26 = objc_msgSend((id)objc_opt_self(), p_name[403]);
  URL._bridgeToObjectiveC()(v27);
  v29 = v28;
  v44[0] = 0;
  v13 = objc_msgSend(v26, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v28, 1, 0, v44);

  if (v13)
  {
    v30 = v44[0];
    LOBYTE(v13) = specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = (void *)swift_slowAlloc();
      *(_DWORD *)v33 = 136315138;
      v44[0] = v34;
      if ((v13 & 1) != 0)
        v35 = 0x2173736563637553;
      else
        v35 = 0x216572756C696146;
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, 0xE800000000000000, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v31, v32, "... %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v34, -1, -1);
      MEMORY[0x220772F44](v33, -1, -1);
    }

  }
  else
  {
    v36 = v44[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v13 & 1;
}

uint64_t specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  uint64_t inited;
  void *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  os_log_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v2 = type metadata accessor for URLResourceValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v54 - v11;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v54 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16);
  v17((char *)&v54 - v15, a1, v6, v14);
  if ((URL.isFileURL.getter() & 1) == 0)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)logger);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_21B9AA000, v22, v23, "Can't compute free storage of a non file URL!", v24, 2u);
      MEMORY[0x220772F44](v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
    return 0;
  }
  v59 = v2;
  v60 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  v19 = (void *)*MEMORY[0x24BDBCDB8];
  *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBCDB8];
  v20 = v19;
  specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for NSURLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  v25 = URLResourceValues.volumeAvailableCapacityForImportantUsage.getter();
  if ((v26 & 1) != 0)
  {
    v42 = v60;
    if (one-time initialization token for logger != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)logger);
    ((void (*)(char *, char *, uint64_t))v17)(v9, v16, v42);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.error.getter();
    v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      v47 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      v63[0] = v58;
      *(_DWORD *)v47 = 141558274;
      v61 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2080;
      v56 = v47 + 14;
      lazy protocol witness table accessor for type URL and conformance URL();
      LODWORD(v57) = v46;
      v48 = dispatch thunk of CustomStringConvertible.description.getter();
      v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v50 = *(void (**)(char *, uint64_t))(v7 + 8);
      v50(v9, v42);
      _os_log_impl(&dword_21B9AA000, v44, (os_log_type_t)v57, "Can't get storage capacity for %{mask.hash}s so assuming 0!", (uint8_t *)v47, 0x16u);
      v51 = v58;
      swift_arrayDestroy();
      MEMORY[0x220772F44](v51, -1, -1);
      MEMORY[0x220772F44](v47, -1, -1);

    }
    else
    {

      v50 = *(void (**)(char *, uint64_t))(v7 + 8);
      v50(v9, v42);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v59);
    v50(v16, v42);
    return 0;
  }
  v27 = v25;
  v28 = v60;
  if (one-time initialization token for logger != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)logger);
  ((void (*)(char *, char *, uint64_t))v17)(v12, v16, v28);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, (os_log_type_t)v31))
  {
    LODWORD(v56) = v31;
    v57 = v30;
    v32 = swift_slowAlloc();
    v55 = swift_slowAlloc();
    v63[0] = v55;
    *(_DWORD *)v32 = 141558530;
    v61 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 12) = 2080;
    v58 = v32 + 14;
    lazy protocol witness table accessor for type URL and conformance URL();
    v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v63);
    v54 = &v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v7 + 8);
    v35(v12, v28);
    *(_WORD *)(v32 + 22) = 2082;
    v58 = v32 + 24;
    if (one-time initialization token for byteFormatter != -1)
      swift_once();
    v36 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v27);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40 = v57;
    _os_log_impl(&dword_21B9AA000, v57, (os_log_type_t)v56, "Storage capacity for: %{mask.hash}s == %{public}s", (uint8_t *)v32, 0x20u);
    v41 = v55;
    swift_arrayDestroy();
    MEMORY[0x220772F44](v41, -1, -1);
    MEMORY[0x220772F44](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v59);
    v35(v16, v28);
  }
  else
  {

    v52 = *(void (**)(char *, uint64_t))(v7 + 8);
    v52(v12, v28);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v59);
    v52(v16, v28);
  }
  return v27;
}

BOOL specialized static PhotogrammetryFileHelpers.checkIfSufficientStorageSpace(requiredBytes:directory:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v47 = a1;
  v3 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v43 - v8;
  if (one-time initialization token for logger != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  v11 = __swift_project_value_buffer(v10, (uint64_t)logger);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v12(v9, a2, v3);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v43[0] = v12;
    v43[1] = v11;
    v44 = a2;
    v45 = v6;
    v15 = swift_slowAlloc();
    v16 = swift_slowAlloc();
    *(_DWORD *)v15 = 141558530;
    v48 = 1752392040;
    v49 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    lazy protocol witness table accessor for type URL and conformance URL();
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v46 = *(void (**)(char *, uint64_t))(v4 + 8);
    v46(v9, v3);
    *(_WORD *)(v15 + 22) = 2082;
    if (one-time initialization token for byteFormatter != -1)
      swift_once();
    v19 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v47);
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B9AA000, v13, v14, "Checking for reconstruction storage space at url=\"%{mask.hash}s\" Required bytes=%{public}s...", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x220772F44](v16, -1, -1);
    MEMORY[0x220772F44](v15, -1, -1);

    a2 = v44;
    v6 = v45;
    v12 = (void (*)(char *, uint64_t, uint64_t))v43[0];
  }
  else
  {
    v46 = *(void (**)(char *, uint64_t))(v4 + 8);
    v46(v9, v3);

  }
  if (one-time initialization token for freeStorageProvider != -1)
    swift_once();
  v23 = specialized PhotogrammetryFileHelpers.SystemFreeStorageProvider.freeStorageBytes(forDir:)(a2);
  if (v23 < v47)
  {
    v12(v6, a2, v3);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc();
      v35 = swift_slowAlloc();
      *(_DWORD *)v34 = 141558530;
      v48 = 1752392040;
      v49 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2080;
      lazy protocol witness table accessor for type URL and conformance URL();
      v36 = dispatch thunk of CustomStringConvertible.description.getter();
      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v46(v6, v3);
      *(_WORD *)(v34 + 22) = 2082;
      if (one-time initialization token for byteFormatter != -1)
        swift_once();
      v38 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v23);
      v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41 = v40;

      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v32, v33, "... Failed!  Not enough storage in %{mask.hash}s.  Only have: %{public}s.", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v35, -1, -1);
      MEMORY[0x220772F44](v34, -1, -1);
    }
    else
    {
      v46(v6, v3);
    }

  }
  else
  {
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v49 = v27;
      *(_DWORD *)v26 = 136446210;
      if (one-time initialization token for byteFormatter != -1)
        swift_once();
      v28 = objc_msgSend((id)static PhotogrammetryFileHelpers.byteFormatter, sel_stringFromByteCount_, v23);
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v31 = v30;

      v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B9AA000, v24, v25, "... Success.  Have storage space of %{public}s", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x220772F44](v27, -1, -1);
      MEMORY[0x220772F44](v26, -1, -1);
    }

  }
  return v23 >= v47;
}

BOOL specialized static PhotogrammetryFileHelpers.isEmptyDirectory(_:)()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v14;
  void *v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  if ((URL.isFileURL.getter() & 1) != 0)
  {
    LOBYTE(v16[0]) = 0;
    v0 = (void *)objc_opt_self();
    v1 = objc_msgSend(v0, sel_defaultManager);
    v2 = URL.path.getter();
    v3 = (void *)MEMORY[0x220768C3C](v2);
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v1, sel_fileExistsAtPath_isDirectory_, v3, v16);

    if (v4)
    {
      if (((uint64_t)v16[0] & 1) != 0)
      {
        v5 = objc_msgSend(v0, sel_defaultManager);
        v6 = URL.path.getter();
        v7 = (void *)MEMORY[0x220768C3C](v6);
        swift_bridgeObjectRelease();
        v16[0] = 0;
        v8 = objc_msgSend(v5, sel_contentsOfDirectoryAtPath_error_, v7, v16);

        v9 = v16[0];
        if (v8)
        {
          v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          v11 = v9;

          v12 = *(_QWORD *)(v10 + 16);
          swift_bridgeObjectRelease();
          return v12 == 0;
        }
        v14 = v16[0];
        v15 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  return 0;
}

BOOL specialized static PhotogrammetryFileHelpers.isExistingDirectory(_:)()
{
  return specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)();
}

BOOL specialized static PhotogrammetryFileHelpers.doesDirectoryExist(directory:)()
{
  id v0;
  uint64_t v1;
  void *v2;
  unsigned int v3;
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if ((URL.isFileURL.getter() & 1) == 0)
    return 0;
  v5 = 0;
  v0 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v1 = URL.path.getter();
  v2 = (void *)MEMORY[0x220768C3C](v1);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v0, sel_fileExistsAtPath_isDirectory_, v2, &v5);

  if (!v3)
    return 0;
  return v5 == 1;
}

ValueMetadata *type metadata accessor for PhotogrammetryFileHelpers()
{
  return &type metadata for PhotogrammetryFileHelpers;
}

uint64_t type metadata accessor for PhotogrammetryFileHelpers.SystemFreeStorageProvider()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x220772E3C](MEMORY[0x24BDCDB28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

uint64_t specialized HasHierarchy.parent.getter()
{
  uint64_t Parent;
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  Parent = REEntityGetParent();
  if (!Parent)
    return 0;
  v1 = Parent;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v5 = specialized static Entity.entityInfoType(_:)(v1);
    if (v5)
    {
      v3 = (*(uint64_t (**)(void))(v5 + 232))();
      v6 = *(_QWORD *)(v3 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v3 + 16) = v1;
      MEMORY[0x22076D160](v1, v3);
      swift_release();
      return v3;
    }
    return makeEntity(for:)(v1);
  }
  __break(1u);
  return result;
}

uint64_t Entity.anchor.getter()
{
  uint64_t v0;
  uint64_t Parent;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (swift_conformsToProtocol2())
    Parent = v0;
  else
    Parent = 0;
  if (Parent)
  {
    swift_retain();
    return Parent;
  }
  Parent = REEntityGetParent();
  if (!Parent)
    return Parent;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    v2 = swift_dynamicCastClassUnconditional();
LABEL_13:
    Parent = Entity.anchor.getter(v2);
    swift_release();
    return Parent;
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v4 = specialized static Entity.entityInfoType(_:)(Parent);
    if (v4)
    {
      v5 = (*(uint64_t (**)(void))(v4 + 232))();
      v6 = *(_QWORD *)(v5 + 16);
      swift_retain();
      MEMORY[0x22076D160](v6, 0);
      *(_QWORD *)(v5 + 16) = Parent;
      MEMORY[0x22076D160](Parent, v5);
      v2 = swift_release();
    }
    else
    {
      v2 = makeEntity(for:)(Parent);
    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t HasAnchoring.anchoring.setter(uint64_t a1)
{
  uint64_t v3;

  REAnchoringComponentGetComponentType();
  v3 = REEntityGetOrAddComponentByClass();
  AnchoringComponent.__toCore(_:)(&v3);
  HasAnchoring.removeActiveAnchor()();
  return outlined destroy of AnchoringComponent(a1);
}

uint64_t HasAnchoring.anchoring.getter@<X0>(uint64_t a1@<X8>)
{
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  return AnchoringComponent.init(from:)(a1);
}

uint64_t key path setter for HasAnchoring.anchoring : <A>A(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v7;

  v2 = type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)v4, v5);
  return HasAnchoring.anchoring.setter((uint64_t)v4);
}

Swift::Void __swiftcall HasAnchoring.removeActiveAnchor()()
{
  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass())
    REEntityRemoveComponent();
}

void (*HasAnchoring.anchoring.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v3;
  _QWORD *v7;
  size_t v8;
  void *v9;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  v8 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for AnchoringComponent(0) - 8) + 64);
  v7[3] = malloc(v8);
  v9 = malloc(v8);
  v7[4] = v9;
  REAnchoringComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  AnchoringComponent.init(from:)((uint64_t)v9);
  return HasAnchoring.anchoring.modify;
}

void HasAnchoring.anchoring.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of __RKEntityActionSpecification(*(_QWORD *)(*(_QWORD *)a1 + 32), (uint64_t)v3, type metadata accessor for AnchoringComponent);
    HasAnchoring.anchoring.setter((uint64_t)v3);
    outlined destroy of AnchoringComponent((uint64_t)v4);
  }
  else
  {
    HasAnchoring.anchoring.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t HasAnchoring.anchorIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  const unsigned __int8 *AnchorIdentifier;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  REAnchorComponentGetComponentType();
  if (REEntityGetComponentByClass()
    && (AnchorIdentifier = (const unsigned __int8 *)REAnchorComponentGetAnchorIdentifier(),
        !uuid_is_null(AnchorIdentifier)))
  {
    UUID.init(uuid:)();
    v3 = type metadata accessor for UUID();
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a1;
    v6 = 0;
  }
  else
  {
    v3 = type metadata accessor for UUID();
    v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56);
    v5 = a1;
    v6 = 1;
  }
  return v4(v5, v6, 1, v3);
}

void HasAnchoring.reanchor(_:preservingWorldTransform:)(uint64_t a1, char a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  id v17;
  void *v18;
  _BYTE v19[24];

  v5 = (int *)type metadata accessor for AnchoringComponent(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v19[-v9];
  outlined init with copy of __RKEntityActionSpecification(a1, (uint64_t)&v19[-v9], type metadata accessor for AnchoringComponent.Target);
  *(_QWORD *)&v10[v5[5]] = 1;
  *(_QWORD *)&v10[v5[6]] = 1;
  v11 = &v10[v5[7]];
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[64] = 1;
  if ((a2 & 1) != 0)
  {
    *(double *)&v12 = HasTransform.transformMatrix(relativeTo:)(0);
    *(_OWORD *)v11 = v12;
    *((_OWORD *)v11 + 1) = v13;
    *((_OWORD *)v11 + 2) = v14;
    *((_OWORD *)v11 + 3) = v15;
    v11[64] = 0;
  }
  outlined init with copy of __RKEntityActionSpecification((uint64_t)v10, (uint64_t)v7, type metadata accessor for AnchoringComponent);
  HasAnchoring.anchoring.setter((uint64_t)v7);
  swift_beginAccess();
  v16 = static RealityFusionSession.sharedSession;
  if (static RealityFusionSession.sharedSession)
  {
    swift_beginAccess();
    if (v16[2])
    {
      v17 = (id)RFServiceManagerGetAnchorManagementService();
      if (v17)
      {
        v18 = v17;
        if (!(*(uint64_t (**)(void))(*(_QWORD *)v2 + 120))())
        {
          outlined destroy of AnchoringComponent((uint64_t)v10);

          return;
        }
        RFAnchorManagementUpdateAnchoringInScene();
        swift_release();

      }
    }
  }
  outlined destroy of AnchoringComponent((uint64_t)v10);
}

uint64_t outlined destroy of AnchoringComponent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnchoringComponent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21BCA525C@<X0>(uint64_t a1@<X8>)
{
  return HasAnchoring.anchoring.getter(a1);
}

uint64_t sub_21BCA5280()
{
  return 16;
}

__n128 sub_21BCA528C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

double AnimationView.init(source:name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int8x16_t *a4@<X3>, int a5@<W4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  int v20;
  unsigned int v21;
  char v22;
  char v23;
  int32x2_t v24;
  int64x2_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  double result;
  __int128 v31;
  int8x16_t v32;
  char v33;
  char v34;
  char v35;
  _OWORD v36[9];
  uint64_t v37;

  v20 = a4[1].u8[0];
  v21 = v20 == 255;
  v22 = *a6;
  v23 = *a7;
  if (v20 == 255)
    LOBYTE(v20) = 0;
  v24 = vdup_n_s32(v21);
  v25.i64[0] = v24.u32[0];
  v25.i64[1] = v24.u32[1];
  v32 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), (int8x16_t)xmmword_21BE50F70, *a4);
  v33 = v20;
  v35 = v22;
  v34 = v23;
  TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)(a2, a3, v32.i64, a5, &v35, &v34, a8, a13 & 1, (uint64_t)v36, a10, a11, a12, a14, a15 & 1, a16, a17 & 1);
  outlined init with copy of __REAssetService(a1, (uint64_t)&v32);
  AnimationView.source.setter((uint64_t)&v32);
  __swift_destroy_boxed_opaque_existential_1(a1);
  v26 = v36[7];
  v27 = v36[8];
  v28 = v36[5];
  *(_OWORD *)(a9 + 96) = v36[6];
  *(_OWORD *)(a9 + 112) = v26;
  *(_OWORD *)(a9 + 128) = v27;
  *(_QWORD *)(a9 + 144) = v37;
  v29 = v36[3];
  *(_OWORD *)(a9 + 32) = v36[2];
  *(_OWORD *)(a9 + 48) = v29;
  *(_OWORD *)(a9 + 64) = v36[4];
  *(_OWORD *)(a9 + 80) = v28;
  result = *(double *)v36;
  v31 = v36[1];
  *(_OWORD *)a9 = v36[0];
  *(_OWORD *)(a9 + 16) = v31;
  return result;
}

uint64_t AnimationView.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_BYTE *)(v0 + 128);
  if (*(_QWORD *)(v0 + 104))
  {
    v4 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t key path getter for AnimationView.name : AnimationView@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  _OWORD v14[6];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = *(_OWORD *)(a1 + 112);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = v3;
  v17 = *(_OWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 144);
  v18 = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v14[2] = *(_OWORD *)(a1 + 32);
  v14[3] = v5;
  v6 = *(_OWORD *)(a1 + 80);
  v14[4] = *(_OWORD *)(a1 + 64);
  v14[5] = v6;
  v7 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v7;
  v8 = *((_QWORD *)&v15 + 1);
  v9 = v16;
  v10 = v17;
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = v15;
    outlined retain of TimelineClipProperties((uint64_t)v14);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
  }
  else if (*(_QWORD *)(v4 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
    RETimelineDefinitionGetName();
    v11 = String.init(cString:)();
    v8 = v12;
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    outlined copy of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
    swift_retain();
    v11 = 0;
    v8 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v9, *((uint64_t *)&v9 + 1), v10);
  swift_release();
  result = outlined release of TimelineClipProperties((uint64_t)v14);
  *a2 = v11;
  a2[1] = v8;
  return result;
}

uint64_t AnimationView.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*AnimationView.name.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;

  a1[2] = v1;
  v3 = *(_QWORD *)(v1 + 104);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  v6 = *(_BYTE *)(v1 + 128);
  if (v3)
  {
    v7 = *(_QWORD *)(v1 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v4, v5, v6);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    v7 = String.init(cString:)();
    v3 = v8;
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
    swift_retain();
    v7 = 0;
    v3 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v4, v5, v6);
  swift_release();
  *a1 = v7;
  a1[1] = v3;
  return AnimationView.name.modify;
}

uint64_t AnimationView.name.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[1];
  v3 = a1[2];
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 96) = v4;
    *(_QWORD *)(v3 + 104) = v2;
    return swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(v3 + 96) = v4;
    *(_QWORD *)(v3 + 104) = v2;
  }
  return result;
}

uint64_t AnimationView.blendLayer.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 136) != 1)
    return *(unsigned int *)(v0 + 132);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t AnimationView.blendLayer.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 132) = result;
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

uint64_t *(*AnimationView.blendLayer.modify(_QWORD *a1))(uint64_t *result)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if (*(_BYTE *)(v1 + 136) == 1)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16);
    if (v3)
      LODWORD(v3) = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    LODWORD(v3) = *(_DWORD *)(v1 + 132);
  }
  *v2 = v3;
  return AnimationView.blendLayer.modify;
}

uint64_t *AnimationView.blendLayer.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_DWORD *)(v1 + 132) = *((_DWORD *)result + 2);
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

uint64_t AnimationView.fillMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 138) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 137);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *AnimationView.fillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 137) = *result;
  return result;
}

unsigned __int8 *(*AnimationView.fillMode.modify(_QWORD *a1))(unsigned __int8 *result)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;

  *a1 = v1;
  v2 = a1 + 1;
  if ((*(_BYTE *)(v1 + 138) & 1) != 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16);
    if (v3)
      LOBYTE(v3) = RETimelineDefinitionGetFillMode();
  }
  else
  {
    LOBYTE(v3) = *(_BYTE *)(v1 + 137);
  }
  *v2 = v3;
  return AnimationView.fillMode.modify;
}

unsigned __int8 *AnimationView.fillMode.modify(unsigned __int8 *result)
{
  *(_WORD *)(*(_QWORD *)result + 137) = result[8];
  return result;
}

uint64_t AnimationView.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  __int128 v11;
  char v12;

  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(unsigned __int8 *)(v1 + 128);
  if (v5 == 255)
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v6 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v6, v7, (uint64_t)&v11);
      swift_bridgeObjectRelease();
      v8 = v11;
      v9 = v12;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v9 = 0;
      v8 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = v9;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  return swift_release();
}

uint64_t key path setter for AnimationView.bindTarget : AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t result;

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 112);
  v6 = *(_QWORD *)(a2 + 120);
  v7 = *(_BYTE *)(a1 + 16);
  v8 = *(_BYTE *)(a2 + 128);
  outlined copy of BindTarget(*(_QWORD *)a1, v4, v7);
  result = outlined consume of BindTarget?(v5, v6, v8);
  *(_QWORD *)(a2 + 112) = v3;
  *(_QWORD *)(a2 + 120) = v4;
  *(_BYTE *)(a2 + 128) = v7;
  return result;
}

uint64_t AnimationView.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v3;
  *(_BYTE *)(v1 + 128) = v4;
  return result;
}

uint64_t (*AnimationView.bindTarget.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  __int128 v12;
  char v13;

  *(_QWORD *)(a1 + 24) = v1;
  v3 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  v5 = *(unsigned __int8 *)(v1 + 128);
  v6 = *(_QWORD *)(v1 + 144);
  if (v5 == 255)
  {
    if (*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v7 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v7, v8, (uint64_t)&v12);
      swift_bridgeObjectRelease();
      v9 = v12;
      v10 = v13;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v4, 0xFFu);
      swift_retain();
      v10 = 0;
      v9 = xmmword_21BE50F70;
    }
    *(_OWORD *)a1 = v9;
    *(_BYTE *)(a1 + 16) = v10;
  }
  else
  {
    *(_QWORD *)a1 = v3;
    *(_QWORD *)(a1 + 8) = v4;
    *(_BYTE *)(a1 + 16) = v5;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v4, v5);
    swift_retain();
  }
  outlined copy of BindTarget?(v3, v4, v5);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v4, v5);
  swift_release();
  return AnimationView.bindTarget.modify;
}

uint64_t AnimationView.bindTarget.modify(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_QWORD *)(v2 + 112);
  v7 = *(_QWORD *)(v2 + 120);
  v8 = *(_BYTE *)(v2 + 128);
  if ((a2 & 1) != 0)
  {
    outlined copy of BindTarget(*(_QWORD *)a1, v3, v5);
    outlined consume of BindTarget?(v6, v7, v8);
    *(_QWORD *)(v2 + 112) = v4;
    *(_QWORD *)(v2 + 120) = v3;
    *(_BYTE *)(v2 + 128) = v5;
    return outlined consume of BindTarget(v4, v3, v5);
  }
  else
  {
    result = outlined consume of BindTarget?(*(_QWORD *)(v2 + 112), *(_QWORD *)(v2 + 120), *(_BYTE *)(v2 + 128));
    *(_QWORD *)(v2 + 112) = v4;
    *(_QWORD *)(v2 + 120) = v3;
    *(_BYTE *)(v2 + 128) = v5;
  }
  return result;
}

uint64_t AnimationView.trimStart.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipStart;
  _OWORD v8[9];
  uint64_t v9;

  v1 = *(_OWORD *)(v0 + 112);
  v8[6] = *(_OWORD *)(v0 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v8[4] = *(_OWORD *)(v0 + 64);
  v8[5] = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v8[0]) & 1) == 0)
    return *(_QWORD *)&v8[0];
  v5 = *(_QWORD *)(v9 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
    if (ClipStart)
    {
      v5 = *ClipStart;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimStart.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  *(_BYTE *)(v2 + 9) = 0;
  return result;
}

void (*AnimationView.trimStart.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipStart;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  v3[18] = *(_QWORD *)(v1 + 144);
  v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 9) & 1) == 0)
  {
    v10 = *v3;
    v11 = v3[1] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (!ClipStart)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipStart;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationView.trimStart.modify;
}

void AnimationView.trimStart.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)v2 = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 8) = v3;
  free((void *)v1);
}

uint64_t AnimationView.trimEnd.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipEnd;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = v0[7];
  v14 = v0[6];
  v15 = v1;
  v16 = v0[8];
  v17 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v10 = v0[2];
  v11 = v2;
  v3 = v0[5];
  v12 = v0[4];
  v13 = v3;
  v4 = v0[1];
  v8 = *v0;
  v9 = v4;
  if ((BYTE9(v4) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v17 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)&v8);
    ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
    if (ClipEnd)
    {
      v5 = *ClipEnd;
      outlined release of TimelineClipProperties((uint64_t)&v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)&v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimEnd.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  *(_BYTE *)(v2 + 25) = 0;
  return result;
}

void (*AnimationView.trimEnd.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipEnd;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  v3[18] = *(_QWORD *)(v1 + 144);
  v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 25) & 1) == 0)
  {
    v10 = v3[2];
    v11 = v3[3] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (!ClipEnd)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipEnd;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationView.trimEnd.modify;
}

void AnimationView.trimEnd.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 24) = v3;
  free((void *)v1);
}

uint64_t AnimationView.trimDuration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t *ClipDuration;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 96);
  v14 = v1;
  v15 = *(_OWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 32);
  v10 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v11 = *(_OWORD *)(v0 + 64);
  v12 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE9(v9) & 1) == 0)
    return v9;
  v5 = *(_QWORD *)(v16 + 16);
  if (v5)
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
    if (ClipDuration)
    {
      v5 = *ClipDuration;
      outlined release of TimelineClipProperties((uint64_t)v8);
    }
    else
    {
      outlined release of TimelineClipProperties((uint64_t)v8);
      return 0;
    }
  }
  return v5;
}

uint64_t AnimationView.trimDuration.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = result;
  *(_BYTE *)(v2 + 40) = a2 & 1;
  *(_BYTE *)(v2 + 41) = 0;
  return result;
}

void (*AnimationView.trimDuration.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t *ClipDuration;
  uint64_t v10;
  char v11;

  v3 = malloc(0xB0uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v3[21] = v1;
  v5 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v5;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  v3[18] = *(_QWORD *)(v1 + 144);
  v6 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v6;
  v7 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v7;
  v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v8;
  if ((*((_BYTE *)v3 + 41) & 1) == 0)
  {
    v10 = v3[4];
    v11 = v3[5] & 1;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(v3[18] + 16))
  {
LABEL_7:
    v10 = 0;
    v11 = 1;
    goto LABEL_8;
  }
  outlined retain of TimelineClipProperties((uint64_t)v3);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (!ClipDuration)
  {
    outlined release of TimelineClipProperties(v4);
    goto LABEL_7;
  }
  v10 = *ClipDuration;
  outlined release of TimelineClipProperties(v4);
  v11 = 0;
LABEL_8:
  *(_QWORD *)(v4 + 152) = v10;
  *(_BYTE *)(v4 + 160) = v11;
  return AnimationView.trimDuration.modify;
}

void AnimationView.trimDuration.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 168);
  v3 = *(_BYTE *)(v1 + 160);
  *(_QWORD *)(v2 + 32) = *(_QWORD *)(v1 + 152);
  *(_WORD *)(v2 + 40) = v3;
  free((void *)v1);
}

double AnimationView.offset.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[3];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v1 = *(_OWORD *)(v0 + 112);
  v12 = *(_OWORD *)(v0 + 96);
  v13 = v1;
  v14 = *(_OWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v9 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v10 = *(_OWORD *)(v0 + 64);
  v11 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v15 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipOffset();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.offset.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
  *(_BYTE *)(v1 + 56) = 0;
}

void (*AnimationView.offset.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  v3[18] = *(_QWORD *)(v1 + 144);
  v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[7] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipOffset();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[6];
  }
  *v5 = v10;
  return AnimationView.offset.modify;
}

void AnimationView.offset.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 48) = v1[19];
  *(_BYTE *)(v2 + 56) = 0;
  free(v1);
}

double AnimationView.delay.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  double v5;
  double v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((BYTE8(v9) & 1) == 0)
    return *(double *)&v9;
  v5 = 0.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.delay.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 64) = a1;
  *(_BYTE *)(v1 + 72) = 0;
}

void (*AnimationView.delay.modify(_QWORD *a1))(_QWORD **a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v3 = malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = v3 + 19;
  v3[20] = v1;
  v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  v3[18] = *(_QWORD *)(v1 + 144);
  v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[9] & 1) != 0)
  {
    v10 = 0;
    if (*(_QWORD *)(v3[18] + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipDelay();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = v3[8];
  }
  *v5 = v10;
  return AnimationView.delay.modify;
}

void AnimationView.delay.modify(_QWORD **a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = v1[20];
  *(_QWORD *)(v2 + 64) = v1[19];
  *(_BYTE *)(v2 + 72) = 0;
  free(v1);
}

float AnimationView.speed.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  float v5;
  float v6;
  _OWORD v8[4];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 112);
  v11 = *(_OWORD *)(v0 + 96);
  v12 = v1;
  v13 = *(_OWORD *)(v0 + 128);
  v14 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v8[2] = *(_OWORD *)(v0 + 32);
  v8[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v9 = *(_OWORD *)(v0 + 64);
  v10 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v8[0] = *(_OWORD *)v0;
  v8[1] = v4;
  if ((v10 & 1) == 0)
    return *((float *)&v9 + 3);
  v5 = 1.0;
  if (*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v8);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v5 = v6;
    }
    outlined release of TimelineClipProperties((uint64_t)v8);
  }
  return v5;
}

void AnimationView.speed.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
  *(_BYTE *)(v1 + 80) = 0;
}

void (*AnimationView.speed.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  float *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float v10;
  float v11;

  v3 = (char *)malloc(0xA8uLL);
  v4 = (uint64_t)v3;
  *a1 = v3;
  v5 = (float *)(v3 + 160);
  v6 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v3 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v3 + 7) = v6;
  *((_OWORD *)v3 + 8) = *(_OWORD *)(v1 + 128);
  *((_QWORD *)v3 + 18) = *(_QWORD *)(v1 + 144);
  *((_QWORD *)v3 + 19) = v1;
  v7 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v3 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v3 + 3) = v7;
  v8 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v3 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v3 + 5) = v8;
  v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v1;
  *((_OWORD *)v3 + 1) = v9;
  if ((v3[80] & 1) != 0)
  {
    v10 = 1.0;
    if (*(_QWORD *)(*((_QWORD *)v3 + 18) + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v3);
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        RETimelineDefinitionGetClipSpeed();
        v10 = v11;
      }
      outlined release of TimelineClipProperties(v4);
    }
  }
  else
  {
    v10 = *((float *)v3 + 19);
  }
  *v5 = v10;
  return AnimationView.speed.modify;
}

void AnimationView.speed.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = *(_QWORD *)(v1 + 152);
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v1 + 160);
  *(_BYTE *)(v2 + 80) = 0;
  free((void *)v1);
}

void AnimationView.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int ClipLoopBehavior;
  _OWORD v9[5];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 112);
  v11 = *(_OWORD *)(v1 + 96);
  v12 = v3;
  v13 = *(_OWORD *)(v1 + 128);
  v14 = *(_QWORD *)(v1 + 144);
  v4 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(v1 + 80);
  v9[4] = *(_OWORD *)(v1 + 64);
  v10 = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v6;
  LOBYTE(v7) = BYTE1(v10);
  if (BYTE1(v10) == 4)
  {
    v7 = *(_QWORD *)(v14 + 16);
    if (v7)
    {
      outlined retain of TimelineClipProperties((uint64_t)v9);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v7) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties((uint64_t)v9);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v7) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v7;
}

_BYTE *AnimationView.repeatMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 81) = *result;
  return result;
}

void (*AnimationView.repeatMode.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unsigned int ClipLoopBehavior;

  v2 = (unsigned __int8 *)malloc(0xA8uLL);
  v3 = (uint64_t)v2;
  *a1 = v2;
  v4 = *(_OWORD *)(v1 + 112);
  *((_OWORD *)v2 + 6) = *(_OWORD *)(v1 + 96);
  *((_OWORD *)v2 + 7) = v4;
  *((_OWORD *)v2 + 8) = *(_OWORD *)(v1 + 128);
  *((_QWORD *)v2 + 18) = *(_QWORD *)(v1 + 144);
  *((_QWORD *)v2 + 19) = v1;
  v5 = *(_OWORD *)(v1 + 48);
  *((_OWORD *)v2 + 2) = *(_OWORD *)(v1 + 32);
  *((_OWORD *)v2 + 3) = v5;
  v6 = *(_OWORD *)(v1 + 80);
  *((_OWORD *)v2 + 4) = *(_OWORD *)(v1 + 64);
  *((_OWORD *)v2 + 5) = v6;
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v2 = *(_OWORD *)v1;
  *((_OWORD *)v2 + 1) = v7;
  LODWORD(a1) = v2[81];
  if ((_DWORD)a1 == 4)
  {
    a1 = *(_QWORD **)(*((_QWORD *)v2 + 18) + 16);
    if (a1)
    {
      outlined retain of TimelineClipProperties((uint64_t)v2);
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(a1) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          outlined release of TimelineClipProperties(v3);
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(a1) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_BYTE *)(v3 + 160) = (_BYTE)a1;
  return AnimationView.repeatMode.modify;
}

void AnimationView.repeatMode.modify(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_BYTE *)(*(_QWORD *)(v1 + 152) + 81) = *(_BYTE *)(v1 + 160);
  free((void *)v1);
}

double AnimationView.source.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TimelineAsset;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double result;
  uint64_t ClipSourceRef;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 16))
      goto LABEL_3;
LABEL_9:
    swift_retain();
    goto LABEL_10;
  }
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16) || (ClipSourceRef = RETimelineDefinitionCreateClipSourceRef()) == 0)
  {
    type metadata accessor for TimelineDefinition();
    *(_QWORD *)(swift_allocObject() + 16) = 0;
    goto LABEL_9;
  }
  v15 = ClipSourceRef;
  type metadata accessor for TimelineDefinition();
  *(_QWORD *)(swift_allocObject() + 16) = v15;
  RERetain();
  RERelease();
LABEL_3:
  swift_retain();
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v16);
  v5 = v17;
  v6 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
  if (TimelineAsset)
  {
    v8 = TimelineAsset;
    RETimelineDefinitionGetName();
    v9 = String.init(cString:)();
    v11 = v10;
    type metadata accessor for AnimationResource();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v8;
    v12[3] = v9;
    v12[4] = v11;
    RERetain();
    REAssetSetSwiftObject();
    RERelease();
    swift_release();
    AnimationResource.definition.getter((uint64_t *)a1);
    swift_release();
    return result;
  }
LABEL_10:
  swift_release();
  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t key path getter for AnimationView.source : AnimationView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  _OWORD v9[9];
  uint64_t v10;

  v3 = *(_OWORD *)(a1 + 112);
  v9[6] = *(_OWORD *)(a1 + 96);
  v9[7] = v3;
  v9[8] = *(_OWORD *)(a1 + 128);
  v4 = *(_OWORD *)(a1 + 48);
  v9[2] = *(_OWORD *)(a1 + 32);
  v9[3] = v4;
  v5 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v5;
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v10 = *(_QWORD *)(a1 + 144);
  outlined retain of TimelineClipProperties((uint64_t)v9);
  TimelineClipProperties.source.getter();
  v7 = TimelineDefinition.resource.getter();
  swift_release();
  if (v7)
  {
    AnimationResource.definition.getter((uint64_t *)a2);
    swift_release();
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return outlined release of TimelineClipProperties((uint64_t)v9);
}

uint64_t AnimationView.source.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[40];

  outlined init with copy of AnimationDefinition?(a1, (uint64_t)&v7);
  if (v8)
  {
    outlined init with take of BindableDataInternal(&v7, (uint64_t)v9);
    v3 = specialized static AnimationResource.generate(with:)((uint64_t)v9);
    v4 = specialized TimelineDefinition.__allocating_init(_:)(v3);
    swift_release();
    *(_QWORD *)(v1 + 88) = v4;
    outlined destroy of AnimationDefinition?(a1);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    outlined destroy of AnimationDefinition?((uint64_t)&v7);
    type metadata accessor for TimelineDefinition();
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = 0;
    swift_release();
    *(_QWORD *)(v1 + 88) = v6;
    return outlined destroy of AnimationDefinition?(a1);
  }
}

void (*AnimationView.source.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t ClipSourceRef;
  uint64_t v5;
  _QWORD *v6;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  if (!*(_QWORD *)(v1 + 88))
  {
    if (*(_QWORD *)(*(_QWORD *)(v1 + 144) + 16) && (ClipSourceRef = RETimelineDefinitionCreateClipSourceRef()) != 0)
    {
      v5 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      *(_QWORD *)(swift_allocObject() + 16) = v5;
      RERetain();
      RERelease();
    }
    else
    {
      type metadata accessor for TimelineDefinition();
      *(_QWORD *)(swift_allocObject() + 16) = 0;
    }
  }
  swift_retain();
  v6 = TimelineDefinition.resource.getter();
  swift_release();
  if (v6)
  {
    AnimationResource.definition.getter(v3);
    swift_release();
  }
  else
  {
    v3[4] = 0;
    *(_OWORD *)v3 = 0u;
    *((_OWORD *)v3 + 1) = 0u;
  }
  return AnimationView.source.modify;
}

void AnimationView.source.modify(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of AnimationDefinition?(*a1, (uint64_t)v2 + 40);
    AnimationView.source.setter((uint64_t)v2 + 40);
    outlined destroy of AnimationDefinition?((uint64_t)v2);
  }
  else
  {
    AnimationView.source.setter(*a1);
  }
  free(v2);
}

uint64_t AnimationView.defaultDuration.getter()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ClipSourceRef;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v1 = v0[7];
  v26 = v0[6];
  v27 = v1;
  v28 = v0[8];
  v2 = *((_QWORD *)v0 + 18);
  v29 = v2;
  v3 = v0[3];
  v22 = v0[2];
  v23 = v3;
  v4 = v0[5];
  v24 = v0[4];
  v25 = v4;
  v5 = v0[1];
  v20 = *v0;
  v21 = v5;
  v6 = *((_QWORD *)&v25 + 1);
  v7 = v2;
  if (*((_QWORD *)&v25 + 1))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v2 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
    ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
    if (ClipSourceRef)
    {
      v9 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      *(_QWORD *)(swift_allocObject() + 16) = v9;
      RERetain();
      RERelease();
      goto LABEL_8;
    }
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)&v20);
  }
  type metadata accessor for TimelineDefinition();
  *(_QWORD *)(swift_allocObject() + 16) = 0;
LABEL_8:
  swift_retain();
  v10 = TimelineDefinition.resource.getter();
  swift_release();
  if (!v10)
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    outlined release of TimelineClipProperties((uint64_t)&v20);
    return outlined destroy of AnimationDefinition?((uint64_t)&v17);
  }
  AnimationResource.definition.getter((uint64_t *)&v17);
  swift_release();
  outlined release of TimelineClipProperties((uint64_t)&v20);
  if (!*((_QWORD *)&v18 + 1))
    return outlined destroy of AnimationDefinition?((uint64_t)&v17);
  result = outlined destroy of AnimationDefinition?((uint64_t)&v17);
  if ((BYTE9(v20) & 1) != 0)
  {
    if (*(_QWORD *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      RETimelineDefinitionGetClipStart();
      result = outlined release of TimelineClipProperties((uint64_t)&v20);
    }
  }
  if ((BYTE9(v21) & 1) != 0)
  {
    if (*(_QWORD *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      if (RETimelineDefinitionGetClipEnd())
        return outlined release of TimelineClipProperties((uint64_t)&v20);
      outlined release of TimelineClipProperties((uint64_t)&v20);
    }
  }
  else if ((BYTE8(v21) & 1) == 0)
  {
    return result;
  }
  if (!v6)
  {
    if (*(_QWORD *)(v7 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
      v12 = RETimelineDefinitionCreateClipSourceRef();
      if (v12)
      {
        v13 = v12;
        type metadata accessor for TimelineDefinition();
        *(_QWORD *)(swift_allocObject() + 16) = v13;
        RERetain();
        RERelease();
        goto LABEL_29;
      }
    }
    else
    {
      outlined retain of TimelineClipProperties((uint64_t)&v20);
    }
    type metadata accessor for TimelineDefinition();
    *(_QWORD *)(swift_allocObject() + 16) = 0;
    goto LABEL_29;
  }
  outlined retain of TimelineClipProperties((uint64_t)&v20);
LABEL_29:
  swift_retain();
  v14 = TimelineDefinition.resource.getter();
  swift_release();
  if (v14)
  {
    AnimationResource.definition.getter((uint64_t *)&v17);
    swift_release();
    result = outlined release of TimelineClipProperties((uint64_t)&v20);
    v15 = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v16 = v19;
      __swift_project_boxed_opaque_existential_1(&v17, *((uint64_t *)&v18 + 1));
      (*(void (**)(uint64_t, uint64_t))(v16 + 272))(v15, v16);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    }
  }
  else
  {
    result = outlined release of TimelineClipProperties((uint64_t)&v20);
  }
  __break(1u);
  return result;
}

double AnimationView.duration.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  double *ClipDuration;
  double v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = *(_OWORD *)(v0 + 112);
  v19 = *(_OWORD *)(v0 + 96);
  v20 = v1;
  v21 = *(_OWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v15 = *(_OWORD *)(v0 + 32);
  v16 = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v17 = *(_OWORD *)(v0 + 64);
  v18 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v14[0] = *(_OWORD *)v0;
  v14[1] = v4;
  v5 = v22;
  if ((BYTE9(v15) & 1) != 0)
  {
    if (*(_QWORD *)(v22 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)v14);
      ClipDuration = (double *)RETimelineDefinitionGetClipDuration();
      if (ClipDuration)
      {
        v7 = *ClipDuration;
        outlined release of TimelineClipProperties((uint64_t)v14);
        if ((BYTE8(v17) & 1) != 0)
          goto LABEL_12;
LABEL_8:
        v8 = *(double *)&v17;
        outlined retain of TimelineClipProperties((uint64_t)v14);
        if ((v18 & 1) == 0)
          goto LABEL_21;
        goto LABEL_16;
      }
      outlined release of TimelineClipProperties((uint64_t)v14);
    }
  }
  else if ((BYTE8(v15) & 1) == 0)
  {
    v7 = *(double *)&v15;
    if ((BYTE8(v17) & 1) == 0)
      goto LABEL_8;
    goto LABEL_12;
  }
  AnimationView.defaultDuration.getter();
  v7 = v9;
  if ((BYTE8(v17) & 1) == 0)
    goto LABEL_8;
LABEL_12:
  if (*(_QWORD *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    v8 = 0.0;
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipDelay();
      v8 = v10;
    }
    if ((v18 & 1) != 0)
      goto LABEL_16;
LABEL_21:
    v11 = *((float *)&v17 + 3);
    goto LABEL_22;
  }
  outlined retain of TimelineClipProperties((uint64_t)v14);
  v8 = 0.0;
  if ((v18 & 1) == 0)
    goto LABEL_21;
LABEL_16:
  v11 = 1.0;
  if (*(_QWORD *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v14);
    if (RETimelineDefinitionGetTimelineType() == 2)
    {
      RETimelineDefinitionGetClipSpeed();
      v11 = v12;
    }
    outlined release of TimelineClipProperties((uint64_t)v14);
  }
LABEL_22:
  outlined release of TimelineClipProperties((uint64_t)v14);
  return v8 + v7 / fabsf(v11);
}

uint64_t AnimationView.init(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  int v3;
  uint64_t RootTimeline;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  __int16 v16;
  __int16 v17;
  char v18;
  _BYTE v19[7];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  swift_retain_n();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
    {
LABEL_5:
      v6 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      *(_QWORD *)(v2 + 16) = v6;
      if (v6)
      {
        if (RETimelineDefinitionGetTimelineType() == 2)
        {
          result = swift_release();
          v7 = 0;
          v6 = 0;
          v8 = 0;
          v9 = 2;
          v10 = 1;
LABEL_11:
          *(_QWORD *)a1 = 0;
          *(_BYTE *)(a1 + 8) = 0;
          *(_BYTE *)(a1 + 9) = 1;
          *(_DWORD *)(a1 + 10) = v24;
          *(_WORD *)(a1 + 14) = v25;
          *(_QWORD *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 24) = 0;
          *(_BYTE *)(a1 + 25) = 1;
          *(_DWORD *)(a1 + 26) = v22;
          *(_WORD *)(a1 + 30) = v23;
          *(_QWORD *)(a1 + 32) = 0;
          *(_BYTE *)(a1 + 40) = 0;
          *(_BYTE *)(a1 + 41) = 1;
          *(_WORD *)(a1 + 46) = v21;
          *(_DWORD *)(a1 + 42) = v20;
          *(_QWORD *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 56) = 1;
          *(_DWORD *)(a1 + 57) = *(_DWORD *)v19;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)&v19[3];
          *(_QWORD *)(a1 + 64) = 0;
          *(_BYTE *)(a1 + 72) = 1;
          *(_WORD *)(a1 + 73) = v17;
          *(_BYTE *)(a1 + 75) = v18;
          *(_DWORD *)(a1 + 76) = 0;
          *(_BYTE *)(a1 + 80) = 1;
          *(_BYTE *)(a1 + 81) = 4;
          *(_WORD *)(a1 + 86) = v16;
          *(_DWORD *)(a1 + 82) = v15;
          *(_QWORD *)(a1 + 88) = v7;
          *(_QWORD *)(a1 + 96) = v6;
          *(_QWORD *)(a1 + 104) = v8;
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_BYTE *)(a1 + 128) = -1;
          *(_BYTE *)(a1 + 131) = v14;
          *(_WORD *)(a1 + 129) = v13;
          *(_DWORD *)(a1 + 132) = 0;
          *(_BYTE *)(a1 + 136) = v10;
          *(_BYTE *)(a1 + 137) = 0;
          *(_BYTE *)(a1 + 138) = v10;
          *(_BYTE *)(a1 + 139) = v9;
          *(_QWORD *)(a1 + 144) = v2;
          return result;
        }
        RETimelineDefinitionGetName();
        v6 = String.init(cString:)();
        v8 = v11;
      }
      else
      {
        v8 = 0xE000000000000000;
      }
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = 0;
      result = swift_release();
      v10 = 0;
      v9 = 0;
      v7 = v2;
      v2 = v12;
      goto LABEL_11;
    }
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
      goto LABEL_5;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AnimationView.generate()()
{
  uint64_t result;
  uint64_t v1;

  if ((TimelineClipProperties.isModified.getter() & 1) != 0)
  {
    result = TimelineClipProperties.createClip()();
    if (result)
      return result;
  }
  else
  {
    result = (uint64_t)TimelineDefinition.resource.getter();
    if (result)
      return result;
  }
  lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
  swift_allocError();
  *(_QWORD *)v1 = 0xD00000000000001CLL;
  *(_QWORD *)(v1 + 8) = 0x800000021BE822D0;
  *(_BYTE *)(v1 + 16) = 0;
  return swift_willThrow();
}

uint64_t protocol witness for AnimationDefinition.name.getter in conformance AnimationView()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_BYTE *)(v0 + 128);
  if (*(_QWORD *)(v0 + 104))
  {
    v4 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v1, v2, v3);
    swift_retain();
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16))
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
    swift_retain();
    RETimelineDefinitionGetName();
    v4 = String.init(cString:)();
  }
  else
  {
    outlined copy of BindTarget?(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 128));
    swift_retain();
    v4 = 0;
  }
  outlined consume of BindTarget?(v1, v2, v3);
  swift_release();
  return v4;
}

uint64_t protocol witness for AnimationDefinition.name.setter in conformance AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.name.modify in conformance AnimationView(uint64_t **a1))()
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)AnimationView.name.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance AnimationView()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 136) != 1)
    return *(unsigned int *)(v0 + 132);
  result = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16);
  if (result)
    return RETimelineDefinitionGetAnimationLayer();
  return result;
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance AnimationView(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 132) = result;
  *(_BYTE *)(v1 + 136) = 0;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.blendLayer.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.blendLayer.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.fillMode.getter in conformance AnimationView@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  if ((*(_BYTE *)(v1 + 138) & 1) != 0)
  {
    result = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(v1 + 137);
  }
  *a1 = result;
  return result;
}

unsigned __int8 *protocol witness for AnimationDefinition.fillMode.setter in conformance AnimationView(unsigned __int8 *result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 137) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.fillMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance AnimationView(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 112), *(_QWORD *)(v1 + 120), *(_BYTE *)(v1 + 128));
  *(_QWORD *)(v1 + 112) = v2;
  *(_QWORD *)(v1 + 120) = v3;
  *(_BYTE *)(v1 + 128) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.bindTarget.modify((uint64_t)v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimStart.getter in conformance AnimationView()
{
  return AnimationView.trimStart.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimStart.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.trimStart.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance AnimationView()
{
  return AnimationView.trimEnd.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimEnd.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.trimEnd.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance AnimationView()
{
  return AnimationView.trimDuration.getter();
}

uint64_t (*protocol witness for AnimationDefinition.trimDuration.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.trimDuration.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.offset.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.delay.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.speed.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance AnimationView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnimationView.repeatMode.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for AnimationDefinitionInternal.generate() in conformance AnimationView()
{
  return AnimationView.generate()();
}

uint64_t outlined init with copy of AnimationDefinition?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnimationDefinition?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnimationDefinition?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_21BCA7C3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 96) = v4;
  *(_QWORD *)(a2 + 104) = v3;
  return result;
}

uint64_t sub_21BCA7C7C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 136) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16);
    if (result)
      result = RETimelineDefinitionGetAnimationLayer();
  }
  else
  {
    result = *(unsigned int *)(a1 + 132);
  }
  *a2 = result;
  return result;
}

_DWORD *sub_21BCA7CC0(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 132) = *result;
  *(_BYTE *)(a2 + 136) = 0;
  return result;
}

uint64_t sub_21BCA7CD0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 138) == 1)
  {
    result = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 16);
    if (result)
      result = RETimelineDefinitionGetFillMode();
  }
  else
  {
    result = *(unsigned __int8 *)(a1 + 137);
  }
  *a2 = result;
  return result;
}

unsigned __int8 *sub_21BCA7D14(unsigned __int8 *result, uint64_t a2)
{
  *(_WORD *)(a2 + 137) = *result;
  return result;
}

double sub_21BCA7D24@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;
  __int128 v4;
  char v5;

  AnimationView.bindTarget.getter((uint64_t)&v4);
  v2 = v5;
  result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_21BCA7D68@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationView.trimStart.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BCA7D98(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_WORD *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_21BCA7DB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationView.trimEnd.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BCA7DE0(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)result;
  *(_WORD *)(a2 + 24) = v2;
  return result;
}

uint64_t sub_21BCA7DF8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = AnimationView.trimDuration.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_21BCA7E28(uint64_t result, uint64_t a2)
{
  unsigned __int8 v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)result;
  *(_WORD *)(a2 + 40) = v2;
  return result;
}

void sub_21BCA7E40(double *a1@<X8>)
{
  *a1 = AnimationView.offset.getter();
}

_QWORD *sub_21BCA7E68(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 48) = *result;
  *(_BYTE *)(a2 + 56) = 0;
  return result;
}

void sub_21BCA7E78(double *a1@<X8>)
{
  *a1 = AnimationView.delay.getter();
}

_QWORD *sub_21BCA7EA0(_QWORD *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 64) = *result;
  *(_BYTE *)(a2 + 72) = 0;
  return result;
}

void sub_21BCA7EB0(float *a1@<X8>)
{
  *a1 = AnimationView.speed.getter();
}

_DWORD *sub_21BCA7ED8(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)(a2 + 76) = *result;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

void sub_21BCA7EE8(_BYTE *a1@<X8>)
{
  char v2;

  AnimationView.repeatMode.getter(&v2);
  *a1 = v2;
}

_BYTE *sub_21BCA7F20(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 81) = *result;
  return result;
}

uint64_t sub_21BCA7F30(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of AnimationDefinition?(a1, (uint64_t)v2);
  return AnimationView.source.setter((uint64_t)v2);
}

uint64_t destroy for AnimationView(uint64_t a1)
{
  int v2;

  swift_release();
  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 128);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v2);
  return swift_release();
}

uint64_t initializeWithCopy for AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  v5 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v6 = *(unsigned __int8 *)(a2 + 128);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v6 == 255)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 112);
    v8 = *(_QWORD *)(a2 + 120);
    outlined copy of BindTarget(v7, v8, v6);
    *(_QWORD *)(a1 + 112) = v7;
    *(_QWORD *)(a1 + 120) = v8;
    *(_BYTE *)(a1 + 128) = v6;
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimationView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  int v21;

  v4 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 19);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  *(_DWORD *)(a1 + 76) = v8;
  *(_BYTE *)(a1 + 81) = *((_BYTE *)a2 + 81);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v9 = (__int128 *)(a1 + 112);
  v10 = (__int128 *)(a2 + 14);
  v11 = *((unsigned __int8 *)a2 + 128);
  if (*(unsigned __int8 *)(a1 + 128) == 255)
  {
    if (v11 == 255)
    {
      v20 = *v10;
      *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
      *v9 = v20;
    }
    else
    {
      v17 = a2[14];
      v18 = a2[15];
      outlined copy of BindTarget(v17, v18, *((_BYTE *)a2 + 128));
      *(_QWORD *)(a1 + 112) = v17;
      *(_QWORD *)(a1 + 120) = v18;
      *(_BYTE *)(a1 + 128) = v11;
    }
  }
  else if (v11 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
    v19 = *((_BYTE *)a2 + 128);
    *v9 = *v10;
    *(_BYTE *)(a1 + 128) = v19;
  }
  else
  {
    v12 = a2[14];
    v13 = a2[15];
    outlined copy of BindTarget(v12, v13, *((_BYTE *)a2 + 128));
    v14 = *(_QWORD *)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 120) = v13;
    v16 = *(_BYTE *)(a1 + 128);
    *(_BYTE *)(a1 + 128) = v11;
    outlined consume of BindTarget(v14, v15, v16);
  }
  v21 = *((_DWORD *)a2 + 33);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(_DWORD *)(a1 + 132) = v21;
  *(_WORD *)(a1 + 137) = *(_WORD *)((char *)a2 + 137);
  *(_BYTE *)(a1 + 139) = *((_BYTE *)a2 + 139);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AnimationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v5;
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a2 + 112);
  v7 = *(unsigned __int8 *)(a1 + 128);
  if (v7 == 255)
    goto LABEL_5;
  v8 = *(unsigned __int8 *)(a2 + 128);
  if (v8 == 255)
  {
    outlined destroy of BindTarget(a1 + 112);
LABEL_5:
    *(_OWORD *)(a1 + 112) = *v6;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *v6;
  *(_BYTE *)(a1 + 128) = v8;
  outlined consume of BindTarget(v9, v10, v7);
LABEL_6:
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_WORD *)(a1 + 137) = *(_WORD *)(a2 + 137);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnimationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 144) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AnimationView()
{
  return &type metadata for AnimationView;
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  _QWORD v12[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return outlined release of IKRig.Joint?(a4);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v10 = _StringObject.sharedUTF8.getter();
    closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(v10, a3, a4, a5, a6);
    return outlined release of IKRig.Joint?(a4);
  }
  v12[0] = a1;
  v12[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v12, a3, a4, a5, a6);
  return outlined release of IKRig.Joint?(a4);
}

uint64_t specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v12;
  _QWORD v14[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return outlined release of IKRig.Constraint(a4);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v12 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v12 = _StringObject.sharedUTF8.getter();
    closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(v12, a3, a4, a5, a6, a7);
    return outlined release of IKRig.Constraint(a4);
  }
  v14[0] = a1;
  v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v14, a3, a4, a5, a6, a7);
  return outlined release of IKRig.Constraint(a4);
}

uint64_t IKResource.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v2;
}

uint64_t IKResource.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  RERetain();
  REAssetSetSwiftObject();
  return v1;
}

uint64_t IKResource.deinit()
{
  uint64_t v0;

  REAssetSetSwiftObject();
  RERelease();
  return v0;
}

uint64_t IKResource.__deallocating_deinit()
{
  REAssetSetSwiftObject();
  RERelease();
  return swift_deallocClassInstance();
}

uint64_t IKResource.solverDefinitions.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = REIkRigAssetGetDefinitionCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v1 = result;
    swift_retain();
    v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation18IKSolverDefinitionVs5NeverOTg504_s17d49Foundation10IKResourceC17solverDefinitionsSayAA18fG13VGvgAFSiXEfU_AG0K0CTf1cn_nTf4ng_n(0, v1);
    swift_release();
    return v2;
  }
  return result;
}

uint64_t IKResource.__allocating_init(rig:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IKSolverDefinition>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  lazy protocol witness table accessor for type String and conformance String();
  v5 = StringProtocol.hash.getter();
  *(_QWORD *)(inited + 48) = a1[1];
  v6 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(inited + 56) = *((_OWORD *)a1 + 1);
  *(_QWORD *)(inited + 32) = v5;
  v7 = inited + 32;
  *(_QWORD *)(inited + 40) = v3;
  *(_OWORD *)(inited + 72) = v6;
  *(_OWORD *)(inited + 88) = xmmword_21BE41200;
  *(_BYTE *)(inited + 104) = 6;
  *(_OWORD *)(inited + 112) = xmmword_21BE41200;
  *(_BYTE *)(inited + 128) = 6;
  v8 = specialized static IKResource.createCoreAssetForDefinition(_:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (!v1)
  {
    type metadata accessor for IKResource();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v8;
    RERetain();
    REAssetSetSwiftObject();
  }
  return v7;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __int128 v7;
  int v8;
  __int128 v9;
  char v10;
  __int128 v11;
  __int128 v12;
  float32x2_t v13;
  uint64_t result;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];
  __int128 v18;
  __int128 v19;
  char v20;
  int v21;
  char v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  char v33;
  char v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  int v39;
  _BYTE v40[48];
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v17[0] = a2;
  v17[1] = a1;
  v7 = *(_OWORD *)(a3 + 48);
  v18 = *(_OWORD *)(a3 + 64);
  v19 = v7;
  v20 = *(_BYTE *)(a3 + 80);
  v21 = 65793;
  v22 = 1;
  v8 = 1065353216;
  v23 = 1065353216;
  v9 = *(_OWORD *)(a3 + 112);
  v24 = *(_OWORD *)(a3 + 96);
  v25 = v9;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  v31 = 0u;
  v32 = 0u;
  v36 = 0;
  v39 = 1008981770;
  outlined init with take of Transform?(a3 + 128, (uint64_t)v40, &demangling cache variable for type metadata for IKRig.Joint.LimitsDefinition?);
  outlined init with take of Transform?((uint64_t)v40, (uint64_t)&v41, &demangling cache variable for type metadata for IKRig.Joint.LimitsDefinition?);
  if ((v41 & 0xFF00000000) == 0x300000000)
  {
    v10 = 0;
    v11 = xmmword_21BE6E030;
    v12 = xmmword_21BE6E040;
  }
  else
  {
    v36 = BYTE4(v41);
    v13 = (float32x2_t)vdup_n_s32(0x42652EE2u);
    *(float32x2_t *)&v12 = vmul_f32(*(float32x2_t *)v42.f32, v13);
    *((_QWORD *)&v12 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(57.296, v42, 2));
    *(float32x2_t *)&v11 = vmul_f32(*(float32x2_t *)v43.f32, v13);
    *((_QWORD *)&v11 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(57.296, v43, 2));
    v10 = 1;
    v8 = v41;
  }
  v33 = v10;
  v34 = v10;
  v35 = v8;
  v37 = v12;
  v38 = v11;
  result = MEMORY[0x22076A3D0](a4, v17, a5);
  v15 = *a5;
  if (v15)
  {
    MEMORY[0x22076A2E0](a4);
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v16 = v15;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t *a6)
{
  char v10;
  int64_t v11;
  int16x8_t v12;
  char v13;
  int64_t v14;
  int16x8_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD v19[2];
  char v20;
  char v21;
  unsigned __int32 v22;
  unsigned __int32 v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[48];
  _BYTE v31[32];
  _BYTE v32[32];
  _BYTE v33[8];
  uint64_t v34;
  __int128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39[3];
  _BYTE v40[24];
  uint64_t v41;
  __int128 v42;
  __n128 v43[2];
  __n128 v44;
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19[0] = a2;
  v19[1] = a1;
  outlined init with take of Transform?(a3 + 80, (uint64_t)v31, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v33, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  if (v33[0] == 2)
  {
    v10 = 0;
    LODWORD(v11) = 0;
    v12 = 0uLL;
  }
  else
  {
    v11 = v34;
    v12.i64[1] = *((_QWORD *)&v35 + 1);
    if (v34 >= 0x7FFFFFFF)
      v11 = 0x7FFFFFFFLL;
    if (v11 <= (uint64_t)0xFFFFFFFF80000000)
      LODWORD(v11) = 0x80000000;
    v26 = v35;
    v28 = xmmword_21BE6E050;
    *a4 = fmaxf(fmaxf(*(float *)&v35, *((float *)&v35 + 2)), *((float *)&v35 + 1)) + *a4;
    v12.i64[0] = 0x100010001;
    v10 = 1;
  }
  v20 = v10;
  v22 = vmovn_s16(v12).u32[0];
  v24 = v11;
  outlined init with take of Transform?(a3 + 112, (uint64_t)v30, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  outlined init with take of Transform?((uint64_t)v30, (uint64_t)v40, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  if (v40[16] == 0xFF)
  {
    v13 = 0;
    LODWORD(v14) = 0;
    v15 = 0uLL;
  }
  else
  {
    v14 = v41;
    v15.i64[1] = *((_QWORD *)&v42 + 1);
    if (v41 >= 0x7FFFFFFF)
      v14 = 0x7FFFFFFFLL;
    if (v14 <= (uint64_t)0xFFFFFFFF80000000)
      LODWORD(v14) = 0x80000000;
    v27 = v42;
    v29 = xmmword_21BE6E060;
    *a4 = fmaxf(fmaxf(*(float *)&v42, *((float *)&v42 + 2)), *((float *)&v42 + 1)) + *a4;
    v15.i64[0] = 0x100010001;
    v13 = 1;
  }
  v21 = v13;
  v23 = vmovn_s16(v15).u32[0];
  v25 = v14;
  MEMORY[0x22076A3C4](a5, v19, a6);
  v16 = *a6;
  if (v16)
  {
    MEMORY[0x22076A2E0](a5);
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v17 = v16;
    return swift_willThrow();
  }
  outlined init with take of Transform?((uint64_t)v31, (uint64_t)v32, &demangling cache variable for type metadata for IKRig.Constraint.IKPositionDemand?);
  if (v32[0] != 2)
    CoreIKRigConstraintSetPositionAsPoleEnabled();
  result = outlined init with take of Transform?((uint64_t)v30, (uint64_t)&v36, &demangling cache variable for type metadata for IKRig.Constraint.IKOrientationDemand?);
  if (v37.n128_u8[0] != 0xFF)
  {
    v39[0] = v36;
    v39[1] = v37;
    v39[2] = v38;
    outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode(v39, v43);
    outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode(v43, &v44);
    if (!v45)
    {
      CoreIKGenericSolverRigSetLookAtEnabled();
      CoreIKGenericSolverRigSetUsesModelSpaceLookAtAxis();
      return CoreIKGenericSolverRigSetLookAtAxis();
    }
    if (v45 == 1)
    {
      CoreIKGenericSolverRigSetLookAtEnabled();
      CoreIKGenericSolverRigSetUsesLocalSpaceLookAtAxis();
      return CoreIKGenericSolverRigSetLookAtAxis();
    }
    return CoreIKGenericSolverRigSetLookAtEnabled();
  }
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5yt_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRyt_TG5SRyAGGytsAD_pIgyrzo_Tf1ncn_n038_ss11_StringGutsV11withCStringyxxSPys4F27VGKXEKlFxSRyAEGKXEfU_yt_Tg5SPyAGGxsAD_pRi_zRi0_zlyytIsgyrzo_Tf1nnc_n(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized static SIMD<>.random<A>(in:using:)(float a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[7];

  if ((~COERCE_INT(a2 - a1) & 0x7F800000) != 0)
  {
    v5[5] = v2;
    v5[6] = v3;
    v5[0] = 0;
    MEMORY[0x220772F5C](v5, 8);
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01)
    {
      v5[0] = 0;
      MEMORY[0x220772F5C](v5, 8);
    }
    do
    {
      v5[0] = 0;
      MEMORY[0x220772F5C](v5, 8);
    }
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01);
    do
    {
      v5[0] = 0;
      result = MEMORY[0x220772F5C](v5, 8);
    }
    while ((16777217 * LODWORD(v5[0])) < 0xFFFF01);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  Swift::String v16;
  Swift::UInt v17;
  void *v18;
  Swift::String v19;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v22;
  char v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v6 = result;
    v39 = a4;
    swift_bridgeObjectRetain();
    v7 = v4 - 1;
    for (i = 32; ; i += 176)
    {
      v9 = *(_OWORD *)(v6 + i + 128);
      v10 = *(_OWORD *)(v6 + i + 144);
      v11 = *(_OWORD *)(v6 + i + 96);
      v35 = *(_OWORD *)(v6 + i + 112);
      v36 = v9;
      v12 = *(_OWORD *)(v6 + i + 160);
      v37 = v10;
      v38 = v12;
      v13 = *(_OWORD *)(v6 + i + 80);
      v32 = *(_OWORD *)(v6 + i + 64);
      v33 = v13;
      v34 = v11;
      v14 = *(_OWORD *)(v6 + i + 16);
      v28 = *(Swift::String *)(v6 + i);
      v29 = v14;
      v15 = *(_OWORD *)(v6 + i + 48);
      v30 = *(_OWORD *)(v6 + i + 32);
      v31 = v15;
      v16 = v28;
      v27 = v28;
      outlined retain of String?((uint64_t)&v28);
      lazy protocol witness table accessor for type String and conformance String();
      v17 = StringProtocol.hash.getter();
      if ((specialized Set._Variant.insert(_:)((Swift::UInt *)&v27, v17) & 1) == 0)
      {
        v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v27._object = v18;
        v19._countAndFlagsBits = 2108704;
        v19._object = (void *)0xE300000000000000;
        String.append(_:)(v19);
        swift_bridgeObjectRetain();
        String.append(_:)(v16);
        outlined release of IKRig.Joint?((uint64_t)&v28);
        object = v27._object;
        countAndFlagsBits = v27._countAndFlagsBits;
        lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
        swift_allocError();
        *(_QWORD *)v22 = countAndFlagsBits;
        v23 = 1;
        goto LABEL_11;
      }
      if ((BYTE8(v29) & 1) == 0 && (specialized Set.contains(_:)(v29, *a3) & 1) == 0)
        break;
      outlined release of IKRig.Joint?((uint64_t)&v28);
      if (!v7)
        return swift_bridgeObjectRelease();
      --v7;
    }
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v27._object = v24;
    v25._countAndFlagsBits = 2108704;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    swift_bridgeObjectRetain();
    String.append(_:)(v16);
    outlined release of IKRig.Joint?((uint64_t)&v28);
    object = v27._object;
    v26 = v27._countAndFlagsBits;
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(_QWORD *)v22 = v26;
    v23 = 5;
LABEL_11:
    *(_QWORD *)(v22 + 8) = object;
    *(_BYTE *)(v22 + 16) = v23;
    swift_willThrow();
    outlined release of IKRig.Joint?((uint64_t)&v28);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  _OWORD v41[11];
  __int128 v42;
  _OWORD v43[10];
  _BYTE v44[16];
  uint64_t v45;
  char v46;
  uint64_t *v47;

  v47 = a5;
  v40 = a4;
  v6 = *(_QWORD *)(result + 16);
  if (!v6)
    return result;
  v7 = result;
  v36 = a3;
  v38 = v43;
  v8 = swift_bridgeObjectRetain();
  v9 = 32;
  v35 = MEMORY[0x24BEE4AE0] + 8;
  v37 = v8;
  while (1)
  {
    v10 = *(_OWORD *)(v7 + v9 + 144);
    v43[7] = *(_OWORD *)(v7 + v9 + 128);
    v43[8] = v10;
    v43[9] = *(_OWORD *)(v7 + v9 + 160);
    v11 = *(_OWORD *)(v7 + v9 + 80);
    v43[3] = *(_OWORD *)(v7 + v9 + 64);
    v43[4] = v11;
    v12 = *(_OWORD *)(v7 + v9 + 112);
    v43[5] = *(_OWORD *)(v7 + v9 + 96);
    v43[6] = v12;
    v13 = *(_OWORD *)(v7 + v9 + 16);
    v42 = *(_OWORD *)(v7 + v9);
    v43[0] = v13;
    v14 = *(_OWORD *)(v7 + v9 + 48);
    v43[1] = *(_OWORD *)(v7 + v9 + 32);
    v43[2] = v14;
    outlined init with take of Transform?((uint64_t)v38, (uint64_t)v44, &demangling cache variable for type metadata for IKRig.Joint.ID?);
    v15 = outlined init with take of Transform?((uint64_t)v44, (uint64_t)&v45, &demangling cache variable for type metadata for IKRig.Joint.ID?);
    if ((v46 & 1) != 0
      || (v16 = *(_QWORD *)(v36 + 24), !*(_QWORD *)(v16 + 16))
      || (v17 = *(_QWORD *)(v36 + 16), v15 = specialized __RawDictionaryStorage.find<A>(_:)(v45), (v18 & 1) == 0))
    {
      v30 = 0;
      v29 = 0xE000000000000000;
      goto LABEL_14;
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v15);
    if ((v19 & 0x8000000000000000) != 0)
      break;
    if (v19 >= *(_QWORD *)(v17 + 16))
      goto LABEL_32;
    v20 = (_OWORD *)(v17 + 176 * v19);
    v21 = v20[2];
    v22 = v20[4];
    v41[1] = v20[3];
    v41[2] = v22;
    v41[0] = v21;
    v23 = v20[5];
    v24 = v20[6];
    v25 = v20[8];
    v41[5] = v20[7];
    v41[6] = v25;
    v41[3] = v23;
    v41[4] = v24;
    v26 = v20[9];
    v27 = v20[10];
    v28 = v20[12];
    v41[9] = v20[11];
    v41[10] = v28;
    v41[7] = v26;
    v41[8] = v27;
    v29 = *((_QWORD *)&v41[0] + 1);
    v30 = *(_QWORD *)&v41[0];
    v15 = outlined retain of String?((uint64_t)v41);
LABEL_14:
    v39 = &v35;
    v32 = *((_QWORD *)&v42 + 1);
    v31 = v42;
    MEMORY[0x24BDAC7A8](v15);
    *(&v35 - 6) = v30;
    *(&v35 - 5) = v29;
    *(&v35 - 4) = (uint64_t)&v42;
    v33 = v47;
    *(&v35 - 3) = v40;
    *(&v35 - 2) = (uint64_t)v33;
    if ((v32 & 0x1000000000000000) != 0 || !(v32 & 0x2000000000000000 | v31 & 0x1000000000000000))
    {
      outlined retain of String?((uint64_t)&v42);
      outlined retain of String?((uint64_t)&v42);
      swift_bridgeObjectRetain();
      _StringGuts._slowWithCString<A>(_:)();
      if (v5)
        goto LABEL_29;
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v42);
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v42);
    }
    else
    {
      if ((v32 & 0x2000000000000000) == 0)
      {
        if ((v31 & 0x1000000000000000) != 0)
        {
          v34 = (v32 & 0xFFFFFFFFFFFFFFFLL) + 32;
          goto LABEL_19;
        }
        v34 = _StringObject.sharedUTF8.getter();
        if (v34)
        {
LABEL_19:
          outlined retain of String?((uint64_t)&v42);
          outlined retain of String?((uint64_t)&v42);
          outlined retain of String?((uint64_t)&v42);
          swift_bridgeObjectRetain();
          specialized String.withCString<A>(_:)(v30, v29, v34, (uint64_t)&v42, v40, v47);
          if (v5)
            goto LABEL_29;
          v7 = v37;
        }
        else
        {
          outlined retain of String?((uint64_t)&v42);
          outlined retain of String?((uint64_t)&v42);
          outlined retain of String?((uint64_t)&v42);
          swift_bridgeObjectRetain();
          specialized String.withCString<A>(_:)(v30, v29, 0, (uint64_t)&v42, v40, v47);
          if (v5)
            goto LABEL_29;
          v7 = v37;
        }
        swift_bridgeObjectRelease();
        outlined release of IKRig.Joint?((uint64_t)&v42);
        swift_bridgeObjectRelease();
        outlined release of IKRig.Joint?((uint64_t)&v42);
        goto LABEL_6;
      }
      *(_QWORD *)&v41[0] = v31;
      *((_QWORD *)&v41[0] + 1) = v32 & 0xFFFFFFFFFFFFFFLL;
      outlined retain of String?((uint64_t)&v42);
      outlined retain of String?((uint64_t)&v42);
      outlined retain of String?((uint64_t)&v42);
      swift_bridgeObjectRetain();
      specialized String.withCString<A>(_:)(v30, v29, (uint64_t)v41, (uint64_t)&v42, v40, v47);
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v42);
      swift_bridgeObjectRelease();
      outlined release of IKRig.Joint?((uint64_t)&v42);
      if (v5)
        return swift_bridgeObjectRelease();
    }
    v7 = v37;
LABEL_6:
    v9 += 176;
    if (!--v6)
      return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_29:
  swift_bridgeObjectRelease();
  outlined release of IKRig.Joint?((uint64_t)&v42);
  swift_bridgeObjectRelease();
  outlined release of IKRig.Joint?((uint64_t)&v42);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  Swift::String v14;
  Swift::String v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  void *object;
  uint64_t v24;
  char v25;
  void *v26;
  Swift::String v27;
  uint64_t countAndFlagsBits;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = a3;
  v5 = *(_QWORD *)(result + 16);
  if (v5)
  {
    v6 = result;
    swift_bridgeObjectRetain();
    v7 = v5 - 1;
    for (i = 32; ; i += 160)
    {
      v9 = *(_OWORD *)(v6 + i + 96);
      v10 = *(_OWORD *)(v6 + i + 128);
      v11 = *(_OWORD *)(v6 + i + 144);
      v38 = *(_OWORD *)(v6 + i + 112);
      v39 = v10;
      v40 = v11;
      v12 = *(_OWORD *)(v6 + i + 48);
      v33 = *(_OWORD *)(v6 + i + 32);
      v34 = v12;
      v13 = *(_OWORD *)(v6 + i + 80);
      v35 = *(_OWORD *)(v6 + i + 64);
      v36 = v13;
      v37 = v9;
      v14 = *(Swift::String *)(v6 + i + 16);
      v31 = *(Swift::String *)(v6 + i);
      v32 = v14;
      v15 = v31;
      v30 = v31;
      outlined retain of IKRig.Constraint((uint64_t)&v31);
      lazy protocol witness table accessor for type String and conformance String();
      v16 = StringProtocol.hash.getter();
      if ((specialized Set._Variant.insert(_:)((Swift::UInt *)&v30, v16) & 1) == 0)
        break;
      v17 = *a5;
      v30 = v32;
      swift_bridgeObjectRetain();
      v18 = StringProtocol.hash.getter();
      v19 = specialized Set.contains(_:)(v18, v17);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v30._object = v26;
        v27._countAndFlagsBits = 2108704;
        v27._object = (void *)0xE300000000000000;
        String.append(_:)(v27);
        swift_bridgeObjectRetain();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        object = v30._object;
        countAndFlagsBits = v30._countAndFlagsBits;
        lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
        swift_allocError();
        *(_QWORD *)v24 = countAndFlagsBits;
        v25 = 4;
        goto LABEL_9;
      }
      outlined release of IKRig.Constraint((uint64_t)&v31);
      if (!v7)
        return swift_bridgeObjectRelease();
      --v7;
    }
    v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    v30._object = v20;
    v21._countAndFlagsBits = 2108704;
    v21._object = (void *)0xE300000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRetain();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    object = v30._object;
    v22 = v30._countAndFlagsBits;
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(_QWORD *)v24 = v22;
    v25 = 3;
LABEL_9:
    *(_QWORD *)(v24 + 8) = object;
    *(_BYTE *)(v24 + 16) = v25;
    swift_willThrow();
    outlined release of IKRig.Constraint((uint64_t)&v31);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_17RealityFoundation18IKSolverDefinitionVs5NeverOTg504_s17d49Foundation10IKResourceC17solverDefinitionsSayAA18fG13VGvgAFSiXEfU_AG0K0CTf1cn_nTf4ng_n(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t DefinitionRig;
  float v7;
  float v8;
  Swift::OpaquePointer v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t DefinitionSolverID;
  __int128 v27;
  char v28;
  uint64_t v29;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v4 = a2;
  v5 = result;
  v29 = MEMORY[0x24BEE4AF8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if (v4 >= v5 && (v2 & 0x8000000000000000) == 0)
  {
    v3 = v29;
    v22 = v4;
    while (v4 != v5)
    {
      DefinitionSolverID = REIkRigAssetGetDefinitionSolverID();
      DefinitionRig = REIkRigAssetGetDefinitionRig();
      v25 = MEMORY[0x22076A40C]();
      v7 = MEMORY[0x22076A418](DefinitionRig);
      v8 = MEMORY[0x22076A400](DefinitionRig);
      v9._rawValue = (void *)MEMORY[0x24BEE4AF8];
      IKRig.JointCollection.init(_:)(MEMORY[0x24BEE4AF8], &v27);
      v24 = v27;
      IKRig.ConstraintsCollection.init(_:)(v9);
      v23 = v27;
      REIkRigAssetGetDefinitionSourceTarget();
      v10 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v10, v11, (uint64_t)&v27);
      swift_bridgeObjectRelease();
      v12 = v27;
      v13 = v28;
      REIkRigAssetGetDefinitionOutputTarget();
      v14 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v14, v15, (uint64_t)&v27);
      result = swift_bridgeObjectRelease();
      v16 = v27;
      v17 = v28;
      v29 = v3;
      v19 = *(_QWORD *)(v3 + 16);
      v18 = *(_QWORD *)(v3 + 24);
      if (v19 >= v18 >> 1)
      {
        v21 = v27;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v16 = v21;
        v3 = v29;
      }
      *(_QWORD *)(v3 + 16) = v19 + 1;
      v20 = v3 + 104 * v19;
      *(_QWORD *)(v20 + 32) = DefinitionSolverID;
      *(_QWORD *)(v20 + 40) = v25;
      *(float *)(v20 + 48) = v7;
      *(float *)(v20 + 52) = v8;
      *(_OWORD *)(v20 + 56) = v24;
      *(_OWORD *)(v20 + 72) = v23;
      *(_OWORD *)(v20 + 88) = v12;
      *(_BYTE *)(v20 + 104) = v13;
      *(_OWORD *)(v20 + 112) = v16;
      *(_BYTE *)(v20 + 128) = v17;
      ++v5;
      v4 = v22;
      if (v22 == v5)
        return v3;
    }
    __break(1u);
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized static IKResource.validateSolver(_:)(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v2 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 32);
  v12 = v2;
  v3 = *(_OWORD *)(a1 + 80);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = v3;
  v15 = *(_BYTE *)(a1 + 96);
  v4 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v4;
  v5 = *((_QWORD *)&v4 + 1);
  v7 = v11;
  v6 = v12;
  v16 = MEMORY[0x24BEE4B08];
  v9 = MEMORY[0x24BEE4B08];
  outlined retain of IKSolverDefinition((uint64_t)v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v5, v7, &v16, (uint64_t)v10);
  outlined release of IKSolverDefinition((uint64_t)v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    outlined retain of IKSolverDefinition((uint64_t)v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(*((uint64_t *)&v7 + 1), v6, (uint64_t)&v9, (uint64_t)v10, &v16);
    outlined release of IKSolverDefinition((uint64_t)v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized static IKResource.autotuneRig(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t ConstraintCount;
  int64_t JointCount;
  int64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t i;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  _QWORD *v25;

  v3 = CoreIKGenericSolverCreate();
  ConstraintCount = CoreIKGenericSolverGetConstraintCount();
  JointCount = CoreIKGenericSolverGetJointCount();
  if (JointCount < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = JointCount;
  if (JointCount)
  {
    v25 = (_QWORD *)MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, JointCount, 0);
    v7 = 0;
    v1 = v25;
    do
    {
      CoreIKGenericSolverGetTargetRestPose();
      v10 = v8;
      v12 = v25[2];
      v11 = v25[3];
      v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        v22 = v9;
        v23 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v9 = v22;
        v10 = v23;
      }
      HIDWORD(v10) = v24;
      ++v7;
      v25[2] = v13;
      v14 = &v25[4 * v12];
      *((_OWORD *)v14 + 2) = v10;
      *((_OWORD *)v14 + 3) = v9;
    }
    while (v6 != v7);
  }
  else
  {
    v1 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (!v13)
      goto LABEL_11;
  }
  v15 = 0.0;
  v16 = 4;
  do
  {
    v17 = vmulq_f32(*(float32x4_t *)&v1[v16], *(float32x4_t *)&v1[v16]);
    v15 = v15
        + sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
    v16 += 4;
    --v13;
  }
  while (v13);
LABEL_11:
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((ConstraintCount & 0x8000000000000000) == 0)
      goto LABEL_13;
LABEL_25:
    __break(1u);
    return result;
  }
LABEL_24:
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
  if (ConstraintCount < 0)
    goto LABEL_25;
LABEL_13:
  v19 = 0;
  do
  {
    if (ConstraintCount)
    {
      for (i = 0; i != ConstraintCount; ++i)
      {
        MEMORY[0x22076A340](v3, i);
        MEMORY[0x22076A2EC]();
        CoreIKGetConstraintTarget();
        specialized static SIMD<>.random<A>(in:using:)(-1.0, 1.0);
        CoreIKGenericConstraintSetTargetParameters();
        if (CoreIKGenericConstraintHasLookAtEnabled())
        {
          CoreIKGenericConstraintGetLookAtTarget();
          specialized static SIMD<>.random<A>(in:using:)(-2.0, 2.0);
          CoreIKGenericConstraintSetLookAtTarget();
        }
      }
    }
    ++v19;
    v21 = CoreIKGenericSolverSolve();
  }
  while (v19 != 15 && v21 != 2);
  swift_bridgeObjectRelease();
  MEMORY[0x22076A364](v3);
  MEMORY[0x22076A430](a1);
  return CoreIKGenericSolverDestroy();
}

uint64_t specialized closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  float v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[2];
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v68 = a3;
  v114 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v71 = *(_QWORD *)(a1 + 8);
  v72 = v9;
  v73 = *(_QWORD *)(a1 + 56);
  v74 = v8;
  v70 = *(_QWORD *)(a1 + 64);
  v10 = *(unsigned __int8 *)(a1 + 72);
  v12 = *(_QWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 88);
  v13 = *(unsigned __int8 *)(a1 + 96);
  if ((specialized Set._Variant.insert(_:)(&v90, v3) & 1) == 0)
  {
    lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError();
    swift_allocError();
    *(_QWORD *)v15 = v3;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    return swift_willThrow();
  }
  v90 = v3;
  v91 = v71;
  v92 = v4;
  v93 = v5;
  v94 = v7;
  v95 = v6;
  v96 = v74;
  v97 = v72;
  v98 = v73;
  v99 = v70;
  v100 = v10;
  v101 = v12;
  v102 = v11;
  v103 = v13;
  result = specialized static IKResource.validateSolver(_:)((uint64_t)&v90);
  if (!v69)
  {
    v62 = v13;
    v63 = v11;
    v64 = v12;
    v65 = v3;
    v67 = v10;
    v89 = 0;
    v16 = MEMORY[0x22076A3E8](0, &v89);
    v17 = v89;
    if (v89)
    {
LABEL_6:
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *v18 = v17;
      return swift_willThrow();
    }
    v19 = v16;
    v20 = v71;
    v77 = v71;
    v78 = v4;
    v79 = v5;
    v80 = v7;
    v81 = v6;
    v21 = v74;
    v82 = v74;
    v83 = v72;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v7, v6, (uint64_t)&v77, v19, &v89);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    v76 = 0.0;
    v22 = *(_QWORD *)(v74 + 16);
    if (!v22)
    {
      v48 = v73;
      v49 = v67;
      v50 = v65;
LABEL_33:
      MEMORY[0x22076A424](&v84, v19);
      LODWORD(v90) = v84;
      v51 = 0.05;
      if (v76 <= 10.0)
        v51 = 0.1;
      BYTE4(v90) = BYTE4(v84);
      LOWORD(v95) = v88;
      BYTE2(v95) = 1;
      v91 = __PAIR64__(HIDWORD(v85), LODWORD(v51));
      v52 = 0x7FFFFFFFLL;
      if (v20 < 0x7FFFFFFF)
        v52 = v20;
      if (v52 <= (uint64_t)0xFFFFFFFF80000000)
        LODWORD(v52) = 0x80000000;
      v93 = v52;
      v92 = v4;
      v94 = __PAIR64__(v5, v87);
      CoreIKRigUpdateSettings();
      MEMORY[0x22076A3F4](v19, &v89);
      v17 = v89;
      v53 = v70;
      if (!v89)
      {
        specialized static IKResource.autotuneRig(_:)(v19);
        v54 = v50;
        v55 = (void *)MEMORY[0x22076A2D4](v19);
        v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        v84 = v48;
        v85 = v53;
        v86 = v49;
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v84);
        v73 = v56;
        v84 = v64;
        v85 = v63;
        v86 = v62;
        specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v84);
        v72 = v57;
        v84 = 11635;
        v85 = 0xE200000000000000;
        v75 = v54;
        v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        v66 = v19;
        String.append(_:)(v58);
        swift_bridgeObjectRelease();
        v71 = v84;
        v59 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v74 = v59 + 32;
        v60 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        v73 = v60 + 32;
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        String.utf8CString.getter();
        swift_bridgeObjectRelease();
        REIkRigAssetBuilderAddRig();
        swift_release();
        swift_release();
        swift_release();
        return swift_release();
      }
      MEMORY[0x22076A2E0](v19);
      goto LABEL_6;
    }
    swift_bridgeObjectRetain_n();
    v23 = swift_bridgeObjectRetain();
    v24 = 0;
    v25 = 32;
    v61[1] = MEMORY[0x24BEE4AE0] + 8;
    v66 = v19;
    while (1)
    {
      if (v24 >= v22)
      {
        __break(1u);
        outlined release of IKRig.Constraint(v23);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      v26 = *(_OWORD *)(v21 + v25 + 16);
      v104 = *(_OWORD *)(v21 + v25);
      v105 = v26;
      v27 = *(_OWORD *)(v21 + v25 + 32);
      v28 = *(_OWORD *)(v21 + v25 + 48);
      v29 = *(_OWORD *)(v21 + v25 + 80);
      v108 = *(_OWORD *)(v21 + v25 + 64);
      v109 = v29;
      v106 = v27;
      v107 = v28;
      v30 = *(_OWORD *)(v21 + v25 + 96);
      v31 = *(_OWORD *)(v21 + v25 + 112);
      v32 = *(_OWORD *)(v21 + v25 + 144);
      v112 = *(_OWORD *)(v21 + v25 + 128);
      v113 = v32;
      v110 = v30;
      v111 = v31;
      v33 = v104;
      MEMORY[0x24BDAC7A8](v23);
      v61[-4] = v35;
      v61[-3] = v36;
      v61[-2] = v37;
      v61[-1] = &v89;
      v69 = v38;
      if ((*((_QWORD *)&v33 + 1) & 0x1000000000000000) != 0)
      {
LABEL_29:
        outlined retain of IKRig.Constraint((uint64_t)&v104);
        _StringGuts._slowWithCString<A>(_:)();
        v23 = outlined release of IKRig.Constraint((uint64_t)&v104);
        v19 = v66;
        v48 = v73;
        v21 = v74;
        goto LABEL_27;
      }
      v39 = *((_QWORD *)&v105 + 1);
      v40 = v105;
      if ((*((_QWORD *)&v33 + 1) & 0x2000000000000000) != 0)
      {
        v90 = v33;
        v91 = *((_QWORD *)&v33 + 1) & 0xFFFFFFFFFFFFFFLL;
        MEMORY[0x24BDAC7A8](v34);
        v61[-6] = &v90;
        v61[-5] = v45;
        v19 = v66;
        v61[-4] = v46;
        v61[-3] = v19;
        v61[-2] = &v89;
        if ((v39 & 0x1000000000000000) != 0)
          goto LABEL_31;
        if ((v39 & 0x2000000000000000) != 0)
        {
          v84 = v40;
          v85 = v39 & 0xFFFFFFFFFFFFFFLL;
          outlined retain of IKRig.Constraint((uint64_t)&v104);
          v44 = &v84;
          v47 = &v90;
        }
        else
        {
          if ((v40 & 0x1000000000000000) == 0)
          {
LABEL_31:
            outlined retain of IKRig.Constraint((uint64_t)&v104);
            _StringGuts._slowWithCString<A>(_:)();
            goto LABEL_26;
          }
          outlined retain of IKRig.Constraint((uint64_t)&v104);
          v47 = &v90;
          v44 = (uint64_t *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
      }
      else
      {
        if ((v33 & 0x1000000000000000) == 0)
          goto LABEL_29;
        MEMORY[0x24BDAC7A8](v34);
        v61[-6] = (*((_QWORD *)&v33 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32;
        v61[-5] = v41;
        v42 = v66;
        v61[-4] = v43;
        v61[-3] = v42;
        v61[-2] = &v89;
        if ((v39 & 0x1000000000000000) != 0)
        {
LABEL_30:
          outlined retain of IKRig.Constraint((uint64_t)&v104);
          _StringGuts._slowWithCString<A>(_:)();
          v19 = v66;
          goto LABEL_26;
        }
        if ((v39 & 0x2000000000000000) != 0)
        {
          v90 = v40;
          v91 = v39 & 0xFFFFFFFFFFFFFFLL;
          outlined retain of IKRig.Constraint((uint64_t)&v104);
          v44 = &v90;
        }
        else
        {
          if ((v40 & 0x1000000000000000) == 0)
            goto LABEL_30;
          outlined retain of IKRig.Constraint((uint64_t)&v104);
          v44 = (uint64_t *)((v39 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        v47 = (uint64_t *)((*((_QWORD *)&v33 + 1) & 0xFFFFFFFFFFFFFFFLL) + 32);
        v19 = v66;
      }
      closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)v44, (uint64_t)v47, (uint64_t)&v104, &v76, v19, &v89);
LABEL_26:
      v21 = v74;
      v23 = outlined release of IKRig.Constraint((uint64_t)&v104);
      v48 = v73;
LABEL_27:
      v49 = v67;
      ++v24;
      v22 = *(_QWORD *)(v21 + 16);
      v25 += 160;
      if (v24 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v50 = v65;
        v20 = v71;
        goto LABEL_33;
      }
    }
  }
  return result;
}

uint64_t specialized static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  v44 = *MEMORY[0x24BDAC8D0];
  v30 = MEMORY[0x24BEE4B08];
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v31);
  v5 = v33;
  v6 = v34;
  __swift_project_boxed_opaque_existential_1(&v31, v33);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
  v43 = 0;
  v7 = REIkRigAssetBuilderCreate();
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v25 = v7;
    v29 = v2;
    swift_bridgeObjectRetain();
    v9 = 0;
    v24 = a1;
    while (1)
    {
      v26 = v9;
      v27 = v8;
      v10 = a1 + v9;
      v12 = *(_QWORD *)(v10 + 56);
      v11 = *(_QWORD *)(v10 + 64);
      v13 = *(_QWORD *)(v10 + 72);
      v14 = *(_QWORD *)(v10 + 80);
      v16 = *(_QWORD *)(v10 + 88);
      v15 = *(_QWORD *)(v10 + 96);
      v17 = *(_BYTE *)(v10 + 104);
      v18 = *(_QWORD *)(v10 + 112);
      v28 = *(_QWORD *)(v10 + 120);
      v19 = *(_BYTE *)(v10 + 128);
      v31 = *(_OWORD *)(v10 + 32);
      v32 = *(_QWORD *)(v10 + 48);
      v33 = v12;
      v34 = v11;
      v35 = v13;
      v36 = v14;
      v37 = v16;
      v38 = v15;
      v39 = v17;
      v40 = v18;
      v41 = v28;
      v42 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of BindTarget(v16, v15, v17);
      outlined copy of BindTarget(v18, v28, v19);
      specialized closure #1 in static IKResource.createCoreAssetForDefinition(_:)((uint64_t)&v31, (uint64_t)&v30, v25);
      if (v29)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of BindTarget(v16, v15, v17);
      outlined consume of BindTarget(v18, v28, v19);
      v9 = v26 + 104;
      --v8;
      a1 = v24;
      if (v27 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of BindTarget(v16, v15, v17);
    outlined consume of BindTarget(v18, v28, v19);
    swift_bridgeObjectRelease();
    RERelease();
    goto LABEL_9;
  }
LABEL_6:
  result = REIkRigAssetCreate();
  v21 = v43;
  if (v43)
  {
    type metadata accessor for CFErrorRef(0);
    v13 = v22;
    lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
    swift_allocError();
    *v23 = v21;
    swift_willThrow();
    RERelease();
LABEL_9:
    swift_bridgeObjectRelease();
    return v13;
  }
  v13 = result;
  if (result)
  {
    RERelease();
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IKResource()
{
  return objc_opt_self();
}

uint64_t method lookup function for IKResource()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of IKResource.__coreAsset.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of IKResource.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of IKResource.solverDefinitions.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

unint64_t lazy protocol witness table accessor for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError;
  if (!lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for IKResource.IKDefinitionError, &type metadata for IKResource.IKDefinitionError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IKResource.IKDefinitionError and conformance IKResource.IKDefinitionError);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  float *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[2];
  v4 = (float *)v1[3];
  v6 = v1[4];
  v5 = (uint64_t *)v1[5];
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  outlined retain of IKRig.Constraint(v3);
  return specialized String.withCString<A>(_:)(v7, v8, a1, v3, v4, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1);
}

{
  uint64_t v1;

  return closure #1 in closure #1 in closure #2 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(float **)(v1 + 32), *(_QWORD *)(v1 + 40), *(uint64_t **)(v1 + 48));
}

__n128 *outlined init with take of IKRig.Constraint.IKOrientationDemand.Mode(__n128 *a1, __n128 *a2)
{
  __swift_memcpy17_16(a2, a1);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = (uint64_t *)v1[6];
  outlined retain of String?(v5);
  return specialized String.withCString<A>(_:)(v3, v4, a1, v5, v6, v7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #1 in static IKResource.createCoreAssetForDefinition(_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t **)(v1 + 40));
}

uint64_t outlined retain of IKSolverDefinition(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of BindTarget(v2, v3, v6);
  outlined copy of BindTarget(v4, v5, v7);
  return a1;
}

uint64_t outlined release of IKSolverDefinition(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 72);
  v7 = *(_BYTE *)(a1 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of BindTarget(v2, v3, v6);
  outlined consume of BindTarget(v4, v5, v7);
  return a1;
}

uint64_t outlined copy of IKResource.IKDefinitionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 5)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for IKResource.IKDefinitionError(uint64_t a1)
{
  return outlined consume of IKResource.IKDefinitionError(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of IKResource.IKDefinitionError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 <= 5)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IKResource.IKDefinitionError(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of IKResource.IKDefinitionError(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of IKResource.IKDefinitionError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IKResource.IKDefinitionError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of IKResource.IKDefinitionError(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for IKResource.IKDefinitionError()
{
  return &type metadata for IKResource.IKDefinitionError;
}

uint64_t one-time initialization function for VideoLogger()
{
  uint64_t v0;
  id v1;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, VideoLogger);
  __swift_project_value_buffer(v0, (uint64_t)VideoLogger);
  if (one-time initialization token for VideoLog != -1)
    swift_once();
  v1 = (id)VideoLog;
  return Logger.init(_:)();
}

uint64_t one-time initialization function for VideoLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  result = OS_os_log.init(subsystem:category:)();
  VideoLog = result;
  return result;
}

__n128 LowLevelTexture.descriptor.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(v1 + 40);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 56);
  v4 = *(_OWORD *)(v1 + 72);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 88);
  return result;
}

uint64_t LowLevelTexture.Descriptor.init(textureType:pixelFormat:width:height:depth:mipmapLevelCount:arrayLength:textureUsage:swizzle:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  *(_QWORD *)a9 = result;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a3;
  *(_QWORD *)(a9 + 24) = a4;
  *(_QWORD *)(a9 + 32) = a5;
  *(_QWORD *)(a9 + 40) = a6;
  *(_QWORD *)(a9 + 48) = a7;
  *(_QWORD *)(a9 + 56) = a8;
  *(_DWORD *)(a9 + 64) = a10;
  return result;
}

uint64_t LowLevelTexture.Descriptor.textureType.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t LowLevelTexture.Descriptor.textureType.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.textureType.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.pixelFormat.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t LowLevelTexture.Descriptor.pixelFormat.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.pixelFormat.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.width.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t LowLevelTexture.Descriptor.width.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.width.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.height.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t LowLevelTexture.Descriptor.height.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.height.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.depth.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t LowLevelTexture.Descriptor.depth.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.depth.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.mipmapLevelCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t LowLevelTexture.Descriptor.mipmapLevelCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.mipmapLevelCount.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.arrayLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t LowLevelTexture.Descriptor.arrayLength.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.arrayLength.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.textureUsage.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t LowLevelTexture.Descriptor.textureUsage.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.textureUsage.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.Descriptor.swizzle.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 64);
}

uint64_t LowLevelTexture.Descriptor.swizzle.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 64) = result;
  return result;
}

uint64_t (*LowLevelTexture.Descriptor.swizzle.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t LowLevelTexture.__allocating_init(descriptor:)(uint64_t *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  LowLevelTexture.init(descriptor:)(a1);
  return v2;
}

uint64_t LowLevelTexture.init(descriptor:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *Texture;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v1 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[6];
  v32 = *((_BYTE *)a1 + 64);
  v31 = *((_BYTE *)a1 + 65);
  v29 = a1[7];
  v30 = *((_BYTE *)a1 + 66);
  v8 = *((_BYTE *)a1 + 67);
  v9 = (void *)DRTextureDescriptorCreate();
  DRTextureDescriptorSetTextureType();
  v27 = v1;
  v10 = v4;
  DRTextureDescriptorSetPixelFormat();
  DRTextureDescriptorSetWidth();
  v26 = v3;
  DRTextureDescriptorSetHeight();
  v25 = v5;
  DRTextureDescriptorSetDepth();
  v24 = v6;
  DRTextureDescriptorSetMipmapLevelCount();
  if (v7 < 0)
    goto LABEL_12;
  DRTextureDescriptorSetArrayLength();
  v11 = v29;
  DRTextureDescriptorSetTextureUsage();
  DRTextureDescriptorSetSwizzle();
  v38 = 0;
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  v12 = (id)REServiceLocatorGetDirectResourceService();
  if (v12)
  {
    v13 = v12;
    Texture = (void *)DRContextCreateTexture();

LABEL_7:
    v17 = v28;
    *(_QWORD *)(v28 + 24) = v2;
    *(_QWORD *)(v28 + 32) = v27;
    *(_QWORD *)(v28 + 40) = v10;
    *(_QWORD *)(v28 + 48) = v26;
    *(_QWORD *)(v28 + 56) = v25;
    *(_QWORD *)(v28 + 64) = v24;
    *(_QWORD *)(v28 + 72) = v7;
    *(_QWORD *)(v28 + 80) = v11;
    *(_BYTE *)(v28 + 88) = v32;
    *(_BYTE *)(v28 + 89) = v31;
    *(_BYTE *)(v28 + 90) = v30;
    *(_BYTE *)(v28 + 91) = v8;
    if (Texture)
    {

      *(_QWORD *)(v28 + 16) = Texture;
      return v17;
    }
    goto LABEL_11;
  }
  v18 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of __RenderService?(v18, (uint64_t)&v33);
  if (v34)
  {
    outlined init with take of BindableDataInternal(&v33, (uint64_t)v35);
    v19 = v36;
    v20 = v37;
    __swift_project_boxed_opaque_existential_1(v35, v36);
    (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    v21 = (id)RERenderManagerGetRenderDevice();
    Texture = (void *)DRTextureCreateUnmanaged();
    swift_unknownObjectRelease();
    v11 = v29;
    v22 = v38;
    if (v38)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CFErrorRef and conformance CFErrorRef();
      swift_allocError();
      *v15 = v22;
      v16 = v22;
      swift_willThrow();

      type metadata accessor for LowLevelTexture();
      v17 = v28;
      swift_deallocPartialClassInstance();
      return v17;
    }
    goto LABEL_7;
  }
  __break(1u);
LABEL_11:
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id LowLevelTexture.read()()
{
  return (id)DRTextureReadTexture();
}

id LowLevelTexture.replace(using:)()
{
  return (id)DRTextureReplaceTexture();
}

uint64_t LowLevelTexture.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t LowLevelTexture.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t TextureResource.init(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[11] = a1;
  v2[12] = v1;
  type metadata accessor for MainActor();
  v2[13] = static MainActor.shared.getter();
  v2[14] = dispatch thunk of Actor.unownedExecutor.getter();
  v2[15] = v3;
  return swift_task_switch();
}

uint64_t TextureResource.init(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TextureAssetWithDirectTexture;
  uint64_t v5;
  _QWORD *v6;

  v1 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v1, (uint64_t)(v0 + 2));
  v2 = v0[5];
  v3 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  TextureAssetWithDirectTexture = REAssetServiceCreateTextureAssetWithDirectTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  type metadata accessor for TextureResource();
  v5 = swift_allocObject();
  v0[16] = v5;
  *(_QWORD *)(v5 + 16) = TextureAssetWithDirectTexture;
  *(_QWORD *)(v5 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  RERelease();
  v0[10] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v0[17] = v6;
  *v6 = v0;
  v6[1] = MeshResource.init(from:);
  return RequestLoadable.awaitForResourceSharing()(v0[12], (uint64_t)&protocol witness table for TextureResource);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TextureAssetWithDirectTexture;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v7);
  v1 = v8;
  v2 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  TextureAssetWithDirectTexture = REAssetServiceCreateTextureAssetWithDirectTexture();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  type metadata accessor for TextureResource();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = TextureAssetWithDirectTexture;
  *(_QWORD *)(v4 + 24) = 0;
  RERetain();
  REAssetSetSwiftObject();
  swift_retain();
  RERelease();
  v7[0] = v4;
  RequestLoadable.enforceResourceSharingBeforeECSCommits()();
  swift_release();
  if (v5)
    swift_release();
  swift_release();
  return v4;
}

uint64_t TextureResource.replace(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v4);
  v1 = v5;
  v2 = v6;
  __swift_project_boxed_opaque_existential_1(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return RETextureAssetReplaceAllWithDirectTexture();
}

uint64_t static TextureResource.generate(from:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;

  v1[2] = type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  type metadata accessor for TextureResource();
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v1[4] = v3;
  *v3 = v1;
  v3[1] = static MeshResource.generate(from:);
  return TextureResource.init(from:)(a1);
}

uint64_t static TextureResource.generate(from:)()
{
  type metadata accessor for TextureResource();
  swift_retain();
  return TextureResource.init(from:)();
}

uint64_t type metadata accessor for LowLevelTexture()
{
  return objc_opt_self();
}

uint64_t method lookup function for LowLevelTexture()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LowLevelTexture.__allocating_init(descriptor:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of LowLevelTexture.read()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of LowLevelTexture.replace(using:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

__n128 __swift_memcpy68_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

ValueMetadata *type metadata accessor for LowLevelTexture.Descriptor()
{
  return &type metadata for LowLevelTexture.Descriptor;
}

RealityKit::__RKEntityAudioActionType_optional __swiftcall __RKEntityAudioActionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKEntityAudioActionType.init(rawValue:);
  return (RealityKit::__RKEntityAudioActionType_optional)__RKEntityAudioActionType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityAudioActionType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6573756170;
  if (*v0 != 1)
    v1 = 1886352499;
  if (*v0)
    return v1;
  else
    return 2036427888;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKEntityAudioActionType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKEntityAudioActionType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKEntityAudioActionType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKEntityAudioActionType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKEntityAudioActionType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKEntityAudioActionType(Swift::String *a1)
{
  return __RKEntityAudioActionType.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKEntityAudioActionType(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x6573756170;
  if (v2 != 1)
  {
    v5 = 1886352499;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 2036427888;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKEntityAudioActionType()
{
  lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKEntityAudioActionType()
{
  lazy protocol witness table accessor for type __RKEntityAudioActionType and conformance __RKEntityAudioActionType();
  return RawRepresentable<>.encode(to:)();
}

RealityKit::__RKAudioSpatialModeSelection_optional __swiftcall __RKAudioSpatialModeSelection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of __RKAudioSpatialModeSelection.init(rawValue:);
  return (RealityKit::__RKAudioSpatialModeSelection_optional)__RKEntityAudioActionType.init(rawValue:)(rawValue, v2, v1);
}

uint64_t __RKEntityAudioActionType.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X2>, char *a3@<X8>)
{
  void *object;
  Swift::String v4;
  unint64_t v7;
  uint64_t result;
  char v9;

  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  v7 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease();
  v9 = 3;
  if (v7 < 3)
    v9 = v7;
  *a3 = v9;
  return result;
}

void *static __RKAudioSpatialModeSelection.allCases.getter()
{
  return &outlined read-only object #0 of static __RKAudioSpatialModeSelection.allCases.getter;
}

uint64_t __RKAudioSpatialModeSelection.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E6569626D61;
  if (*v0 != 1)
    v1 = 0x636973756DLL;
  if (*v0)
    return v1;
  else
    return 0x6F7320746E696F70;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance __RKAudioSpatialModeSelection(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __RKAudioSpatialModeSelection()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __RKAudioSpatialModeSelection()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __RKAudioSpatialModeSelection()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

RealityKit::__RKAudioSpatialModeSelection_optional protocol witness for RawRepresentable.init(rawValue:) in conformance __RKAudioSpatialModeSelection(Swift::String *a1)
{
  return __RKAudioSpatialModeSelection.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance __RKAudioSpatialModeSelection(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000065637275;
  v4 = 0xE700000000000000;
  v5 = 0x746E6569626D61;
  if (v2 != 1)
  {
    v5 = 0x636973756DLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6F7320746E696F70;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance __RKAudioSpatialModeSelection()
{
  lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance __RKAudioSpatialModeSelection()
{
  lazy protocol witness table accessor for type __RKAudioSpatialModeSelection and conformance __RKAudioSpatialModeSelection();
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance __RKAudioSpatialModeSelection(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance __RKAudioSpatialModeSelection;
}

uint64_t __RKEntityAudioAction.type.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 120) = v2;
  return result;
}

uint64_t (*__RKEntityAudioAction.type.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t key path setter for __RKEntityAudioAction.path : __RKEntityAudioAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v4 + 128) = v3;
  *(_QWORD *)(v4 + 136) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityAudioAction.path.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t __RKEntityAudioAction.path.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*__RKEntityAudioAction.path.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

double __RKEntityAudioAction.volume.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(double *)(v0 + 144);
}

uint64_t __RKEntityAudioAction.volume.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(double *)(v1 + 144) = a1;
  return result;
}

uint64_t (*__RKEntityAudioAction.volume.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAudioAction.loops.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 152);
}

uint64_t __RKEntityAudioAction.loops.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 152) = a1;
  return result;
}

uint64_t (*__RKEntityAudioAction.loops.modify())()
{
  swift_beginAccess();
  return static __RKSimulationSceneCoordinator.shared.modify;
}

uint64_t __RKEntityAudioAction.spatialMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 153);
  return result;
}

uint64_t __RKEntityAudioAction.spatialMode.setter(char *a1)
{
  uint64_t v1;
  char v2;
  uint64_t result;

  v2 = *a1;
  result = swift_beginAccess();
  *(_BYTE *)(v1 + 153) = v2;
  return result;
}

uint64_t (*__RKEntityAudioAction.spatialMode.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t __RKEntityAudioAction.__audioAssetRef.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t __RKEntityAudioAction.__allocating_init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, char *a6, char *a7, double a8)
{
  swift_allocObject();
  return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5, char *a6, char *a7, double a8)
{
  uint64_t v8;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ServiceLocator;
  uint64_t AssetHandle;

  v10 = *a2;
  v11 = *a6;
  v12 = *a7;
  *(_QWORD *)(v8 + 112) = 0x4024000000000000;
  *(_QWORD *)(v8 + 160) = 0;
  *(_BYTE *)(v8 + 168) = 1;
  *(_QWORD *)(v8 + 176) = 0;
  *(_BYTE *)(v8 + 120) = v10;
  *(_QWORD *)(v8 + 128) = a3;
  *(_QWORD *)(v8 + 136) = a4;
  *(double *)(v8 + 144) = a8;
  *(_BYTE *)(v8 + 152) = a5;
  *(_BYTE *)(v8 + 153) = v11;
  v13 = swift_retain();
  v14 = __RKEntityAction.init(targetEntity:)(v13);
  swift_beginAccess();
  *(_BYTE *)(v14 + 105) = v12;
  swift_beginAccess();
  swift_beginAccess();
  if (!*(_QWORD *)(v14 + 16))
  {
    swift_retain();
    goto LABEL_13;
  }
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (!REEntityGetSceneNullable()
    || !RESceneGetECSManagerNullable()
    || (ServiceLocator = REECSManagerGetServiceLocator(), !MEMORY[0x22076FD58](ServiceLocator)))
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_13:
    *(_QWORD *)(v14 + 176) = 0;
    goto LABEL_14;
  }
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v14 + 176) = AssetHandle;
  if (AssetHandle)
  {
    REAssetHandleLoadNow();
    if (!a1)
      goto LABEL_15;
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        if (REServiceLocatorGetAudioService())
          REAudioServiceStartAudioEngine();
      }
    }
  }
LABEL_14:
  swift_release();
LABEL_15:
  swift_release();
  return v14;
}

uint64_t __RKEntityAudioAction.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityAudioAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    if (REEntityGetSceneNullable())
    {
      if (RESceneGetECSManagerNullable())
      {
        REECSManagerGetServiceLocator();
        if (REServiceLocatorGetAudioService())
          REAudioServiceStopAudioEngine();
      }
    }
  }
  if (*(_QWORD *)(v0 + 176))
    RERelease();
  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityAudioAction.__deallocating_deinit()
{
  __RKEntityAudioAction.deinit();
  return swift_deallocClassInstance();
}

uint64_t __RKEntityAudioAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  Swift::Bool v27;
  uint64_t ComponentByClass;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  uint64_t v34;
  char v35;
  double v36;
  double v37;
  void *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t aBlock;
  unint64_t v58;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for DispatchTime();
  v51 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v52 = (char *)&v46 - v13;
  swift_beginAccess();
  v14 = *(_QWORD *)(v1 + 16);
  aBlock = 91;
  v58 = 0xE100000000000000;
  v55 = v6;
  v54 = v7;
  v53 = v9;
  if (v14)
  {
    v64 = 0;
    v65 = 0xE000000000000000;
    v63 = v14;
    swift_retain();
    _print_unlocked<A, B>(_:_:)();
    v15 = v64;
    v16 = v65;
  }
  else
  {
    v16 = 0xE300000000000000;
    v15 = 7104878;
  }
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 8285;
  v18._object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  swift_release();
  v21 = aBlock;
  v22 = v58;
  if (!*(_QWORD *)(v1 + 16))
  {
    v30 = static os_log_type_t.error.getter();
    specialized InteractionsLogger.log(_:_:)(v30, &aBlock);
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  v50 = v5;
  v23 = v3;
  v24 = v2;
  swift_beginAccess();
  v25 = *(_QWORD *)(v1 + 96);
  v26 = *(unsigned __int8 *)(v1 + 104);
  if (v26 == 1 && v25 == 1)
  {
    swift_beginAccess();
    if (*(_BYTE *)(v1 + 105))
    {
      if (*(_BYTE *)(v1 + 105) != 1)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        v27 = __RKEntityAudioAction.stop()();
        swift_release();
        return v27;
      }
      goto LABEL_20;
    }
  }
  v49 = v21;
  if (!*(_QWORD *)(v1 + 176))
  {
    swift_retain();
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v1 + 96);
    v32 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 4;
    *(_BYTE *)(v1 + 104) = 1;
    aBlock = v31;
    LOBYTE(v58) = v32;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
    swift_release();
    return 0;
  }
  *(_QWORD *)(v1 + 96) = 1;
  *(_BYTE *)(v1 + 104) = 1;
  aBlock = v25;
  LOBYTE(v58) = v26;
  swift_retain();
  __RKEntityAction.state.didset((uint64_t)&aBlock);
  REAudioPlayerComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (!ComponentByClass)
  {
    REAudioPlayerComponentGetComponentType();
    ComponentByClass = REEntityGetOrAddComponentByClass();
    REAudioPlayerComponentRegisterAsset();
    if ((*(_BYTE *)(v1 + 168) & 1) == 0)
    {
      if (*(_QWORD *)(v1 + 160))
      {
        swift_beginAccess();
        REAudioPlayerComponentSetLinearGainForToken();
      }
    }
  }
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 120))
  {
    if (*(_BYTE *)(v1 + 120) == 1)
    {
      v29 = v49;
      if ((*(_BYTE *)(v1 + 168) & 1) == 0)
        MEMORY[0x22076B8B8](ComponentByClass, *(_QWORD *)(v1 + 160));
    }
    else
    {
      v29 = v49;
      if ((*(_BYTE *)(v1 + 168) & 1) == 0)
        MEMORY[0x22076B990](ComponentByClass, *(_QWORD *)(v1 + 160));
    }
    goto LABEL_27;
  }
  v47 = v23;
  v48 = v24;
  *(_QWORD *)(v1 + 160) = REAudioPlayerComponentPrepareAsset();
  *(_BYTE *)(v1 + 168) = 0;
  swift_beginAccess();
  result = REAudioPlayerComponentSetLinearGainForToken();
  if ((*(_BYTE *)(v1 + 168) & 1) == 0)
  {
    REAudioPlayerComponentPlayToken();
    v34 = *(_QWORD *)(v1 + 96);
    v35 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    aBlock = v34;
    LOBYTE(v58) = v35;
    v46 = ComponentByClass;
    __RKEntityAction.state.didset((uint64_t)&aBlock);
    REAudioFileAssetGetLengthInSeconds();
    v37 = v36;
    type metadata accessor for OS_dispatch_queue();
    v38 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    v39 = v52;
    MEMORY[0x220768A98](v11, v37);
    v51 = *(_QWORD *)(v51 + 8);
    ((void (*)(char *, uint64_t))v51)(v11, v56);
    v40 = swift_allocObject();
    swift_weakInit();
    v61 = partial apply for closure #1 in __RKEntityAudioAction.perform(with:);
    v62 = v40;
    aBlock = MEMORY[0x24BDAC760];
    v58 = 1107296256;
    v59 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v60 = &block_descriptor_31;
    v41 = _Block_copy(&aBlock);
    swift_release();
    v42 = v53;
    static DispatchQoS.unspecified.getter();
    aBlock = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
    v43 = v50;
    v44 = v48;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x220769374](v39, v42, v43, v41);
    _Block_release(v41);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v42, v55);
    ((void (*)(char *, uint64_t))v51)(v39, v56);
    v29 = v49;
LABEL_27:
    RENetworkMarkComponentDirty();
    aBlock = v29;
    v58 = v22;
    v45 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v45, &aBlock);
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in __RKEntityAudioAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    swift_beginAccess();
    v2 = *(_QWORD *)(v1 + 96);
    v3 = *(_BYTE *)(v1 + 104);
    *(_QWORD *)(v1 + 96) = 2;
    *(_BYTE *)(v1 + 104) = 1;
    v4 = v2;
    v5 = v3;
    swift_retain();
    __RKEntityAction.state.didset((uint64_t)&v4);
    return swift_release_n();
  }
  return result;
}

uint64_t __RKEntityAudioAction.reversed()()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  char v9;
  char v10;
  char v11;

  swift_beginAccess();
  if (*(_BYTE *)(v0 + 120))
  {
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v1 & 1) != 0)
      v2 = 2;
    else
      v2 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v2 = 2;
  }
  swift_beginAccess();
  v3 = *(_QWORD *)(v0 + 16);
  v11 = v2;
  swift_beginAccess();
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  swift_beginAccess();
  v6 = *(double *)(v0 + 144);
  swift_beginAccess();
  v7 = *(_BYTE *)(v0 + 152);
  swift_beginAccess();
  v10 = *(_BYTE *)(v0 + 153);
  v9 = 1;
  type metadata accessor for __RKEntityAudioAction();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v3, &v11, v4, v5, v7, &v10, &v9, v6);
}

Swift::Bool __swiftcall __RKEntityAudioAction.stop()()
{
  uint64_t v0;
  Swift::Bool v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  swift_beginAccess();
  if (!*(_QWORD *)(v0 + 16))
    return 1;
  swift_retain();
  REAudioPlayerComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    MEMORY[0x22076B984]();
    RENetworkMarkComponentDirty();
    v1 = 1;
    swift_beginAccess();
    v2 = *(_QWORD *)(v0 + 96);
    v3 = *(_BYTE *)(v0 + 104);
    *(_QWORD *)(v0 + 96) = 3;
    *(_BYTE *)(v0 + 104) = 1;
    v7 = v2;
    v8 = v3;
    __RKEntityAction.state.didset((uint64_t)&v7);
    swift_release();
  }
  else
  {
    swift_beginAccess();
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_BYTE *)(v0 + 104);
    *(_QWORD *)(v0 + 96) = 4;
    *(_BYTE *)(v0 + 104) = 1;
    v7 = v4;
    v8 = v5;
    __RKEntityAction.state.didset((uint64_t)&v7);
    swift_release();
    return 0;
  }
  return v1;
}

Swift::Void __swiftcall __RKEntityAudioAction.preloadAssets()()
{
  uint64_t v0;
  uint64_t ServiceLocator;
  uint64_t AssetHandle;

  swift_beginAccess();
  swift_beginAccess();
  if (*(_QWORD *)(v0 + 16))
  {
    swift_bridgeObjectRetain();
    if (REEntityGetSceneNullable()
      && RESceneGetECSManagerNullable()
      && (ServiceLocator = REECSManagerGetServiceLocator(), MEMORY[0x22076FD58](ServiceLocator)))
    {
      String.utf8CString.getter();
      AssetHandle = REAssetManagerCreateAssetHandle();
      swift_bridgeObjectRelease();
      swift_release();
      if (AssetHandle)
      {
        if ((REAssetHandleIsLoaded() & 1) == 0)
          REAssetHandleLoadAsync();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t __RKEntityAudioAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  char v11;
  char v12;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  swift_beginAccess();
  v12 = *(_BYTE *)(v1 + 120);
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 128);
  v5 = *(_QWORD *)(v1 + 136);
  swift_beginAccess();
  v6 = *(double *)(v1 + 144);
  swift_beginAccess();
  v7 = *(_BYTE *)(v1 + 152);
  swift_beginAccess();
  v11 = *(_BYTE *)(v1 + 153);
  v10 = 1;
  v8 = type metadata accessor for __RKEntityAudioAction();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  result = __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v3, &v12, v4, v5, v7, &v11, &v10, v6);
  a1[3] = v8;
  *a1 = result;
  return result;
}

uint64_t __RKEntityAudioAction.clone(matching:newEntity:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14[4];

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 16);
  if (v3 && *(_QWORD *)(a1 + 16) == *(_QWORD *)(v3 + 16))
  {
    swift_beginAccess();
    v13 = *(_BYTE *)(v1 + 120);
    swift_beginAccess();
    v5 = *(_QWORD *)(v1 + 128);
    v6 = *(_QWORD *)(v1 + 136);
    swift_beginAccess();
    v7 = *(double *)(v1 + 144);
    swift_beginAccess();
    v8 = *(_BYTE *)(v1 + 152);
    swift_beginAccess();
    v11 = *(_BYTE *)(v1 + 153);
    v10 = 1;
    type metadata accessor for __RKEntityAudioAction();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v9 = swift_retain();
    return __RKEntityAudioAction.init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)(v9, &v13, v5, v6, v8, &v11, &v10, v7);
  }
  else
  {
    __RKEntityAudioAction.copy(with:)(v14);
    type metadata accessor for __RKEntityAction();
    if (swift_dynamicCast())
      return v12;
    else
      return 0;
  }
}

void __RKEntityAudioAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityAudioAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_21BCAD4FC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in __RKEntityAudioAction.perform(with:)()
{
  return closure #1 in __RKEntityAudioAction.perform(with:)();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t type metadata accessor for __RKEntityAudioAction()
{
  return objc_opt_self();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in __RKAudioSpatialModeSelection()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type [__RKAudioSpatialModeSelection] and conformance [A], &demangling cache variable for type metadata for [__RKAudioSpatialModeSelection], MEMORY[0x24BEE12E0]);
}

uint64_t sub_21BCAD61C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 120);
  return result;
}

uint64_t sub_21BCAD660(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 120) = v2;
  return result;
}

uint64_t sub_21BCAD6A0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  swift_beginAccess();
  v4 = *(_QWORD *)(v3 + 136);
  *a2 = *(_QWORD *)(v3 + 128);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

double sub_21BCAD6EC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  double result;

  v3 = *a1;
  swift_beginAccess();
  result = *(double *)(v3 + 144);
  *a2 = result;
  return result;
}

uint64_t sub_21BCAD730(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_QWORD *)(v3 + 144) = v2;
  return result;
}

uint64_t sub_21BCAD778@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 152);
  return result;
}

uint64_t sub_21BCAD7BC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 152) = v2;
  return result;
}

uint64_t sub_21BCAD7FC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 153);
  return result;
}

uint64_t sub_21BCAD840(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 153) = v2;
  return result;
}

ValueMetadata *type metadata accessor for __RKEntityAudioActionType()
{
  return &type metadata for __RKEntityAudioActionType;
}

uint64_t storeEnumTagSinglePayload for __RKEntityAudioActionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BCAD8E0 + 4 * byte_21BE6E1A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BCAD914 + 4 * asc_21BE6E1A0[v4]))();
}

uint64_t sub_21BCAD914(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCAD91C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCAD924);
  return result;
}

uint64_t sub_21BCAD930(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCAD938);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BCAD93C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCAD944(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for __RKAudioSpatialModeSelection()
{
  return &type metadata for __RKAudioSpatialModeSelection;
}

uint64_t method lookup function for __RKEntityAudioAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.type.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.path.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.volume.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.loops.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.spatialMode.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.__audioAssetRef.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of __RKEntityAudioAction.__allocating_init(targetEntity:type:path:volume:loops:spatialMode:multiplePerformBehavior:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 760))();
}

uint64_t __RKVisibilityShowMoveInAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityShowMoveInAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowMoveInAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 117, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 81, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 45, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityShowMoveInAnimation.createVisibilityShowMoveInAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static AudioResource.Normalization.dynamic.getter(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 2;
}

void AudioResource.Normalization.Kind.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt v4;
  Swift::UInt64 v5;

  if (a3)
  {
    if (a3 != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }
  Hasher._combine(_:)(v4);
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = a2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Normalization.Kind(uint64_t a1, uint64_t a2)
{
  double v2;
  int v3;

  v2 = *(double *)a2;
  v3 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a2 + 8))
      return 0;
    return *(double *)a1 == v2;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v3 != 1)
      return 0;
    return *(double *)a1 == v2;
  }
  return v3 == 2 && *(_QWORD *)&v2 == 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioResource.Normalization.Kind()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  AudioResource.Normalization.Kind.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Normalization.Kind(uint64_t a1)
{
  uint64_t v1;

  AudioResource.Normalization.Kind.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Normalization.Kind()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  AudioResource.Normalization.Kind.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

BOOL static AudioResource.Normalization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) != 1)
    return v4 == 2 && *(_QWORD *)&v3 == 0;
  return v4 == 1 && v2 == v3;
}

void AudioResource.Normalization.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8))
  {
    if (*(_BYTE *)(v0 + 8) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int AudioResource.Normalization.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AudioResource.Normalization(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8))
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  if (*(_BYTE *)(a1 + 8) != 1)
    return v4 == 2 && *(_QWORD *)&v3 == 0;
  return v4 == 1 && v2 == v3;
}

void protocol witness for Hashable.hash(into:) in conformance AudioResource.Normalization()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt v2;
  Swift::UInt64 v3;

  v1 = *(_QWORD *)v0;
  if (*(_BYTE *)(v0 + 8))
  {
    if (*(_BYTE *)(v0 + 8) != 1)
    {
      Hasher._combine(_:)(0);
      return;
    }
    v2 = 2;
  }
  else
  {
    v2 = 1;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioResource.Normalization()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt v3;
  Swift::UInt64 v4;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2)
  {
    if (v2 != 1)
    {
      Hasher._combine(_:)(0);
      return Hasher._finalize()();
    }
    v3 = 2;
  }
  else
  {
    v3 = 1;
  }
  Hasher._combine(_:)(v3);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AudioResource.Normalization and conformance AudioResource.Normalization()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization;
  if (!lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Normalization, &type metadata for AudioResource.Normalization);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Normalization and conformance AudioResource.Normalization);
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Normalization()
{
  return &type metadata for AudioResource.Normalization;
}

ValueMetadata *type metadata accessor for AudioResource.Normalization.Kind()
{
  return &type metadata for AudioResource.Normalization.Kind;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind;
  if (!lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Normalization.Kind, &type metadata for AudioResource.Normalization.Kind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Normalization.Kind and conformance AudioResource.Normalization.Kind);
  }
  return result;
}

uint64_t StateMachineParameter.init(name:bindTarget:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;

  v10 = *a3;
  v11 = a3[1];
  v12 = *((_BYTE *)a3 + 16);
  v13 = type metadata accessor for StateMachineParameter(0, a4, a5, a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6 + *(int *)(v13 + 40), 1, 1, a4);
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v10;
  *(_QWORD *)(a6 + 24) = v11;
  *(_BYTE *)(a6 + 32) = v12;
  return result;
}

uint64_t type metadata accessor for StateMachineParameter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for StateMachineParameter);
}

uint64_t StateMachineParameter.value(entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t *v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;

  v4 = v3;
  v46 = a3;
  v47 = a1;
  v42 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v43 = (uint64_t *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(v7 + 16);
  v8 = *(_QWORD *)(v7 + 24);
  v10 = *(_QWORD *)(v8 + 8);
  v12 = type metadata accessor for BindableValue(255, v9, v10, v11);
  v13 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v39 - v14;
  v16 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v39 - v20;
  v22 = *(unsigned __int8 *)(v4 + 32);
  if (v22 == 255)
    return static StateMachineUtils.getOrCreateEntityParameter<A>(entity:name:type:)(v47, *(_QWORD *)v4, *(_QWORD *)(v4 + 8), v9, v9, v8, v46);
  v40 = v19;
  v41 = v18;
  v23 = *(_QWORD *)(v4 + 16);
  v24 = *(_QWORD *)(v4 + 24);
  v48 = v47;
  v50 = v23;
  v51 = v24;
  v52 = v22;
  v44 = v23;
  v45 = v24;
  outlined copy of BindTarget?(v23, v24, v22);
  swift_retain();
  BindableValuesReference.subscript.getter(&v50, v9, v10, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v41);
    swift_release();
    v26 = v43;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v42 + 16))(v43, v4, a2);
    v50 = 0;
    v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v48 = v50;
    v49 = v51;
    v27._object = (void *)0x800000021BE8E630;
    v27._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v27);
    v28 = *v26;
    v29 = (void *)v26[1];
    swift_bridgeObjectRetain();
    v30._countAndFlagsBits = v28;
    v30._object = v29;
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = 0xD000000000000019;
    v31._object = (void *)0x800000021BE8E650;
    String.append(_:)(v31);
    v33 = v44;
    v32 = v45;
    v50 = v44;
    v51 = v45;
    v52 = v22;
    specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v50);
    v35 = v34;
    v37 = v36;
    outlined consume of BindTarget?(v33, v32, v22);
    v38._countAndFlagsBits = v35;
    v38._object = v37;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    outlined consume of BindTarget?(v44, v45, v22);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v15, v12);
    swift_release();
    BindableValue.value.getter(v12, v46);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v12);
  }
  return result;
}

uint64_t StateMachineParameter.setValue(entity:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  Swift::String v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;

  v65 = a2;
  v67 = a1;
  v58 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v59 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v6 + 16);
  v63 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v64 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 8);
  v12 = type metadata accessor for BindableValue(255, v7, v68, v11);
  v13 = type metadata accessor for Optional();
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v66 = (char *)&v56 - v17;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v56 - v19;
  v21 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v56 - v28;
  v30 = *(unsigned __int8 *)(v3 + 32);
  if (v30 != 255)
  {
    v15 = v27;
    v56 = v26;
    v57 = v3;
    v31 = *(_QWORD *)(v3 + 16);
    v32 = *(_QWORD *)(v3 + 24);
    v33 = v67;
    v69 = v67;
    v71 = v31;
    v72 = v32;
    v73 = v30;
    v60 = v31;
    v61 = v32;
    v62 = v30;
    outlined copy of BindTarget?(v31, v32, v30);
    swift_retain();
    v34 = v68;
    BindableValuesReference.subscript.getter(&v71, v7, v68, (uint64_t)v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v12) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v29, v20, v12);
      swift_release();
      v35 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v64, v65, v7);
      BindableValue.value.setter(v35, v12);
      v36 = (uint64_t)v66;
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v66, v29, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v36, 0, 1, v12);
      v71 = v60;
      v72 = v61;
      v73 = v62;
      v69 = v33;
      swift_retain();
      BindableValuesReference.subscript.setter(v36, (uint64_t)&v71, v7, v7, v34);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v29, v12);
    }
    goto LABEL_8;
  }
  v38 = *(_QWORD *)v3;
  v20 = *(char **)(v3 + 8);
  v39 = v67;
  static StateMachineUtils.createEntityParameterIfDoesNotExist<A>(entity:name:type:)(v67, *(_QWORD *)v3, (uint64_t)v20, v7, v7);
  v71 = v39;
  swift_retain();
  Entity.ParameterSet.subscript.getter(v38, v20, v7, v7, v68);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v15, 1, v12) == 1)
  {
    __break(1u);
LABEL_8:
    (*((void (**)(char *, uint64_t))v15 + 1))(v20, v56);
    swift_release();
    v42 = v59;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v58 + 16))(v59, v57, a3);
    v71 = 0;
    v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(51);
    v69 = v71;
    v70 = v72;
    v43._object = (void *)0x800000021BE8E630;
    v43._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v43);
    v44 = *v42;
    v45 = (void *)v42[1];
    swift_bridgeObjectRetain();
    v46._countAndFlagsBits = v44;
    v46._object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._countAndFlagsBits = 0xD000000000000019;
    v47._object = (void *)0x800000021BE8E650;
    String.append(_:)(v47);
    v49 = v60;
    v48 = v61;
    v71 = v60;
    v72 = v61;
    v50 = v62;
    v73 = v62;
    specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v71);
    v52 = v51;
    v54 = v53;
    outlined consume of BindTarget?(v49, v48, v50);
    v55._countAndFlagsBits = v52;
    v55._object = v54;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v15, v12);
  v40 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v64, v65, v7);
  BindableValue.value.setter(v40, v12);
  v41 = v66;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v66, v24, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v41, 0, 1, v12);
  v71 = v39;
  swift_retain();
  swift_bridgeObjectRetain();
  Entity.ParameterSet.subscript.setter(v41, v38, v20, v7, v7, v68);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v12);
}

uint64_t StateMachineParameter.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineParameter.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.bindTarget.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of BindTarget?(v2, v3, v4);
}

uint64_t StateMachineParameter.bindTarget.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget?(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 32) = v4;
  return result;
}

uint64_t (*StateMachineParameter.bindTarget.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.resetValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t StateMachineParameter.resetValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*StateMachineParameter.resetValue.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineParameter.id.getter()
{
  uint64_t v0;

  v0 = specialized StateMachineCommandParameter.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t dispatch thunk of StateMachineParameterProtocol.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StateMachineParameterProtocol.bindTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t type metadata completion function for StateMachineParameter()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StateMachineParameter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  const void *v22;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 33) & ~v7) + v8 > 0x18)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    v13 = ~v7;
    v14 = a2[1];
    *a1 = *a2;
    a1[1] = v14;
    v15 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    v16 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    v17 = *(unsigned __int8 *)(v16 + 16);
    swift_bridgeObjectRetain();
    if (v17 > 6)
    {
      v20 = *(_OWORD *)v16;
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      *(_OWORD *)v15 = v20;
    }
    else
    {
      v18 = *(_QWORD *)v16;
      v19 = *(_QWORD *)(v16 + 8);
      outlined copy of BindTarget(*(_QWORD *)v16, v19, v17);
      *(_QWORD *)v15 = v18;
      *(_QWORD *)(v15 + 8) = v19;
      v13 = ~v7;
      *(_BYTE *)(v15 + 16) = v17;
    }
    v21 = (void *)((v15 + v7 + 17) & v13);
    v22 = (const void *)((v16 + v7 + 17) & v13);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v22, 1, v4))
    {
      memcpy(v21, v22, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v21, v22, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v21, 0, 1, v4);
    }
  }
  return a1;
}

uint64_t destroy for StateMachineParameter(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 <= 6)
    outlined consume of BindTarget(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (v4 + *(unsigned __int8 *)(v7 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(v8, v6);
  return result;
}

_QWORD *initializeWithCopy for StateMachineParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  size_t v17;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (v8 > 6)
  {
    v11 = *(_OWORD *)v7;
    *(_BYTE *)(v6 + 16) = *(_BYTE *)(v7 + 16);
    *(_OWORD *)v6 = v11;
  }
  else
  {
    v9 = *(_QWORD *)v7;
    v10 = *(_QWORD *)(v7 + 8);
    outlined copy of BindTarget(*(_QWORD *)v7, v10, v8);
    *(_QWORD *)v6 = v9;
    *(_QWORD *)(v6 + 8) = v10;
    *(_BYTE *)(v6 + 16) = v8;
  }
  v12 = *(_QWORD *)(a3 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = (void *)((v6 + v14 + 17) & ~v14);
  v16 = (const void *)((v7 + v14 + 17) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v16, 1, v12))
  {
    if (*(_DWORD *)(v13 + 84))
      v17 = *(_QWORD *)(v13 + 64);
    else
      v17 = *(_QWORD *)(v13 + 64) + 1;
    memcpy(v15, v16, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v15, v16, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  return a1;
}

_QWORD *assignWithCopy for StateMachineParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  int v25;
  size_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(v6 + 16);
  v9 = *(unsigned __int8 *)(v7 + 16);
  if (v8 > 6)
  {
    if (v9 <= 6)
    {
      v15 = *(_QWORD *)v7;
      v16 = *(_QWORD *)(v7 + 8);
      outlined copy of BindTarget(*(_QWORD *)v7, v16, *(_BYTE *)(v7 + 16));
      *(_QWORD *)v6 = v15;
      *(_QWORD *)(v6 + 8) = v16;
      *(_BYTE *)(v6 + 16) = v9;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 <= 6)
    {
      v10 = *(_QWORD *)v7;
      v11 = *(_QWORD *)(v7 + 8);
      outlined copy of BindTarget(*(_QWORD *)v7, v11, *(_BYTE *)(v7 + 16));
      v12 = *(_QWORD *)v6;
      v13 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)v6 = v10;
      *(_QWORD *)(v6 + 8) = v11;
      v14 = *(_BYTE *)(v6 + 16);
      *(_BYTE *)(v6 + 16) = v9;
      outlined consume of BindTarget(v12, v13, v14);
      goto LABEL_8;
    }
    outlined consume of BindTarget(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), v8);
  }
  v17 = *(_OWORD *)v7;
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(v7 + 16);
  *(_OWORD *)v6 = v17;
LABEL_8:
  v18 = *(_QWORD *)(a3 + 16);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (void *)((v6 + v20 + 17) & ~v20);
  v22 = (void *)((v7 + v20 + 17) & ~v20);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  v24 = v23(v21, 1, v18);
  v25 = v23(v22, 1, v18);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v21, v22, v18);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v18);
      return a1;
    }
  }
  else
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v21, v22, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  }
  if (*(_DWORD *)(v19 + 84))
    v26 = *(_QWORD *)(v19 + 64);
  else
    v26 = *(_QWORD *)(v19 + 64) + 1;
  memcpy(v21, v22, v26);
  return a1;
}

_OWORD *initializeWithTake for StateMachineParameter(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  size_t v12;

  *a1 = *a2;
  v4 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_OWORD *)v5;
  *(_BYTE *)(v4 + 16) = *(_BYTE *)(v5 + 16);
  *(_OWORD *)v4 = v6;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (void *)((v4 + v9 + 17) & ~v9);
  v11 = (const void *)((v5 + v9 + 17) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    if (*(_DWORD *)(v8 + 84))
      v12 = *(_QWORD *)(v8 + 64);
    else
      v12 = *(_QWORD *)(v8 + 64) + 1;
    memcpy(v10, v11, v12);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
  }
  return a1;
}

_QWORD *assignWithTake for StateMachineParameter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(void *, uint64_t, uint64_t);
  int v20;
  int v21;
  size_t v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(unsigned __int8 *)(v7 + 16);
  if (v9 <= 6)
  {
    v10 = *(unsigned __int8 *)(v8 + 16);
    v11 = *(_QWORD *)v7;
    v12 = *(_QWORD *)(v7 + 8);
    if (v10 <= 6)
    {
      *(_OWORD *)v7 = *(_OWORD *)v8;
      *(_BYTE *)(v7 + 16) = v10;
      outlined consume of BindTarget(v11, v12, v9);
      goto LABEL_6;
    }
    outlined consume of BindTarget(v11, v12, v9);
  }
  v13 = *(_OWORD *)v8;
  *(_BYTE *)(v7 + 16) = *(_BYTE *)(v8 + 16);
  *(_OWORD *)v7 = v13;
LABEL_6:
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned __int8 *)(v15 + 80);
  v17 = (void *)((v7 + v16 + 17) & ~v16);
  v18 = (void *)((v8 + v16 + 17) & ~v16);
  v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  v20 = v19(v17, 1, v14);
  v21 = v19(v18, 1, v14);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v17, v18, v14);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v17, 0, 1, v14);
      return a1;
    }
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v17, v18, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  }
  if (*(_DWORD *)(v15 + 84))
    v22 = *(_QWORD *)(v15 + 64);
  else
    v22 = *(_QWORD *)(v15 + 64) + 1;
  memcpy(v17, v18, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for StateMachineParameter(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 33) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      if ((v6 & 0x80000000) != 0)
      {
        v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 17) & ~v9);
        if (v18 >= 2)
          return v18 - 1;
        else
          return 0;
      }
      else
      {
        v17 = *(_QWORD *)(a1 + 8);
        if (v17 >= 0xFFFFFFFF)
          LODWORD(v17) = -1;
        return (v17 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for StateMachineParameter(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_21BCAF804()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21BCAF80C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_21BCAF82C()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21BCAF834()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21BCAF844()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_transforms_v1.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_eyePositions_v1.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*_proto_StereoProjectiveTransformCameraComponent_v1._proto_eyeOrientations_v1.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:)@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v4;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
  v4 = (_OWORD *)swift_allocObject();
  *(_QWORD *)&result = 2;
  v4[1] = xmmword_21BE50940;
  v4[2] = *(_OWORD *)&zmmword_21BE41220[48];
  v4[3] = *(_OWORD *)&zmmword_21BE41220[48];
  *a2 = a1;
  a2[1] = &outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:);
  a2[2] = v4;
  return result;
}

uint64_t static _proto_StereoProjectiveTransformCameraComponent_v1.__fromCore(_:)@<X0>(_QWORD *a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t result;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  RECustomMatrixCameraComponentGetProjectionMatrix();
  v27 = v3;
  v29 = v2;
  v25 = v4;
  v23 = v5;
  RECustomMatrixCameraComponentGetProjectionMatrix();
  v21 = v7;
  v22 = v6;
  v19 = v9;
  v20 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_float4x4>);
  v10 = (_OWORD *)swift_allocObject();
  v10[1] = xmmword_21BE50940;
  v10[2] = v29;
  v10[3] = v27;
  v10[4] = v25;
  v10[5] = v23;
  v10[6] = v22;
  v10[7] = v21;
  v10[8] = v20;
  v10[9] = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<simd_quatf>);
  v11 = (_OWORD *)swift_allocObject();
  v11[1] = xmmword_21BE50940;
  v11[2] = *(_OWORD *)&zmmword_21BE41220[48];
  v11[3] = *(_OWORD *)&zmmword_21BE41220[48];
  *a1 = v10;
  RECustomMatrixCameraComponentGetLocalEyePose();
  v28 = v13;
  v30 = v12;
  RECustomMatrixCameraComponentGetLocalEyePose();
  v24 = v14;
  v26 = v15;
  v16 = outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:);
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    v18 = 2;
  }
  else
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(outlined read-only object #0 of _proto_StereoProjectiveTransformCameraComponent_v1.init(transforms:));
    v16 = (_OWORD *)result;
    v18 = *(_QWORD *)(result + 16);
    if (!v18)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  v16[2] = v30;
  if (v18 != 1)
  {
    v16[3] = v24;
    v11[2] = v28;
    v11[3] = v26;
    a1[1] = v16;
    a1[2] = v11;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _proto_StereoProjectiveTransformCameraComponent_v1.__toCore(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *v0;
  if (!*(_QWORD *)(*v0 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = v0[1];
  v2 = v0[2];
  result = RECustomMatrixCameraComponentSetProjectionFromMatrix();
  if (*(_QWORD *)(v1 + 16) < 2uLL)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  result = RECustomMatrixCameraComponentSetProjectionFromMatrix();
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  result = RECustomMatrixCameraComponentSetLocalEyePose();
  if (*(_QWORD *)(v3 + 16) < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (*(_QWORD *)(v2 + 16) >= 2uLL)
  {
    RECustomMatrixCameraComponentSetLocalEyePose();
    RECustomMatrixCameraComponentSetAutoFitFullScreenAspect();
    return RENetworkMarkComponentDirty();
  }
LABEL_13:
  __break(1u);
  return result;
}

void static _proto_StereoProjectiveTransformCameraComponent_v1.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 56;
}

BOOL static _proto_StereoProjectiveTransformCameraComponent_v1.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  specialized static Array<A>.== infix(_:_:)(*(float32x4_t **)a1, *(float32x4_t **)a2);
  return (v6 & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v4)
      && specialized static Array<A>.== infix(_:_:)(v3, v5);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  specialized static Array<A>.== infix(_:_:)(*(float32x4_t **)a1, *(float32x4_t **)a2);
  return (v6 & 1) != 0
      && specialized static Array<A>.== infix(_:_:)(v2, v4)
      && specialized static Array<A>.== infix(_:_:)(v3, v5);
}

uint64_t destroy for _proto_StereoProjectiveTransformCameraComponent_v1()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for _proto_StereoProjectiveTransformCameraComponent_v1(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for _proto_StereoProjectiveTransformCameraComponent_v1(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _proto_StereoProjectiveTransformCameraComponent_v1(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _proto_StereoProjectiveTransformCameraComponent_v1()
{
  return &type metadata for _proto_StereoProjectiveTransformCameraComponent_v1;
}

BOOL specialized static SystemDependency.== infix(_:_:)(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = a2[1];
  v4 = a1[1] >> 62;
  if (!(_DWORD)v4)
  {
    if (v3 >> 62)
      return 0;
    return *a1 == v2;
  }
  if ((_DWORD)v4 == 1)
  {
    if (v3 >> 62 != 1)
      return 0;
    return *a1 == v2;
  }
  return v3 >> 62 == 2 && v2 == 0 && v3 == 0x8000000000000000;
}

uint64_t getEnumTagSinglePayload for SystemDependency(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 16382);
  v3 = (((*(_QWORD *)(a1 + 8) >> 50) >> 12) | (4
                                                           * ((*(_QWORD *)(a1 + 8) >> 50) & 0xC00 | ((*(_QWORD *)(a1 + 8) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemDependency(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFD)
  {
    *(_QWORD *)result = a2 - 16382;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x3FFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

_QWORD *destructiveInjectEnumTag for SystemDependency(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  if (a2 < 2)
  {
    v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[1] = v2;
  }
  else
  {
    *result = 8 * (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemDependency()
{
  return &type metadata for SystemDependency;
}

void TimelineClipProperties.repeatMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int ClipLoopBehavior;

  LODWORD(v3) = *(unsigned __int8 *)(v1 + 81);
  if ((_DWORD)v3 == 4)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(v1 + 144) + 16);
    if (v3)
    {
      swift_retain();
      if (RETimelineDefinitionGetTimelineType() == 2)
      {
        ClipLoopBehavior = RETimelineDefinitionGetClipLoopBehavior();
        LOBYTE(v3) = ClipLoopBehavior;
        if (ClipLoopBehavior < 4)
        {
LABEL_7:
          swift_release();
          goto LABEL_8;
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      LOBYTE(v3) = 0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *a1 = v3;
}

uint64_t TimelineClipProperties.source.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ClipSourceRef;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 88))
  {
    v1 = *(_QWORD *)(v0 + 88);
  }
  else if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16)
         && (ClipSourceRef = RETimelineDefinitionCreateClipSourceRef()) != 0)
  {
    v3 = ClipSourceRef;
    type metadata accessor for TimelineDefinition();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = v3;
    RERetain();
    RERelease();
  }
  else
  {
    type metadata accessor for TimelineDefinition();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = 0;
  }
  swift_retain();
  return v1;
}

uint64_t TimelineClipProperties.init(name:bindTarget:blendLayer:repeatMode:fillMode:trimStart:trimEnd:trimDuration:offset:delay:speed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, char *a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, float a12@<S2>, uint64_t a13, char a14, uint64_t a15, char a16)
{
  int v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t result;
  char v28;

  v20 = *((unsigned __int8 *)a3 + 16);
  v21 = *a5;
  if (v20 == 255)
    v22 = 0;
  else
    v22 = *a3;
  if (v20 == 255)
    v23 = 0xE000000000000000;
  else
    v23 = a3[1];
  v28 = *a6;
  if (v20 == 255)
    v24 = 0;
  else
    v24 = *((_BYTE *)a3 + 16);
  v25 = a8 & 1;
  type metadata accessor for TimelineDefinition();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)a9 = a7;
  *(_BYTE *)(a9 + 8) = v25;
  *(_BYTE *)(a9 + 9) = 0;
  *(_QWORD *)(a9 + 16) = a13;
  *(_BYTE *)(a9 + 24) = a14 & 1;
  *(_BYTE *)(a9 + 25) = 0;
  *(_QWORD *)(a9 + 32) = a15;
  *(_BYTE *)(a9 + 40) = a16 & 1;
  *(_BYTE *)(a9 + 41) = 0;
  *(double *)(a9 + 48) = a10;
  *(_BYTE *)(a9 + 56) = 0;
  *(double *)(a9 + 64) = a11;
  *(_BYTE *)(a9 + 72) = 0;
  *(float *)(a9 + 76) = a12;
  *(_BYTE *)(a9 + 80) = 0;
  *(_BYTE *)(a9 + 81) = v21;
  *(_QWORD *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = a1;
  *(_QWORD *)(a9 + 104) = a2;
  *(_QWORD *)(a9 + 112) = v22;
  *(_QWORD *)(a9 + 120) = v23;
  *(_BYTE *)(a9 + 128) = v24;
  *(_DWORD *)(a9 + 132) = a4;
  *(_BYTE *)(a9 + 136) = 0;
  *(_BYTE *)(a9 + 137) = v28;
  *(_BYTE *)(a9 + 138) = 0;
  *(_BYTE *)(a9 + 139) = 0;
  *(_QWORD *)(a9 + 144) = result;
  return result;
}

Swift::Void __swiftcall TimelineBaseProperties.writeProperties(_:)(Swift::OpaquePointer a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;

  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(unsigned __int8 *)(v1 + 32);
  v28 = *(_BYTE *)(v1 + 40);
  v29 = *(unsigned __int8 *)(v1 + 42);
  v7 = *(unsigned __int8 *)(v1 + 43);
  v8 = *(_QWORD *)(v1 + 48);
  if (v4)
  {
    v9 = *(_QWORD *)v1;
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    v10 = v4;
  }
  else if (*(_QWORD *)(v8 + 16))
  {
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    RETimelineDefinitionGetName();
    v9 = String.init(cString:)();
    v10 = v11;
  }
  else
  {
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    v9 = 0;
    v10 = 0xE000000000000000;
  }
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  v12 = (void *)MEMORY[0x220768C3C](v9, v10);
  v13 = objc_msgSend(v12, sel_UTF8String);
  v14 = v12;
  swift_bridgeObjectRelease();
  if (!v13)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  MEMORY[0x220771168](a1._rawValue, v13);
  v27 = v7;
  if (v6 == 255)
  {
    if (*(_QWORD *)(v8 + 16))
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, 0xFFu);
      swift_retain();
      RETimelineDefinitionGetTargetPath();
      v18 = String.init(cString:)();
      static InternalBindPath.targetFromPath(_:)(v18, v19, (uint64_t)&v30);
      swift_bridgeObjectRelease();
      v15 = v30;
      v16 = v31;
      v17 = v32;
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined copy of BindTarget?(v3, v5, 0xFFu);
      swift_retain();
      v15 = 0;
      v17 = 0;
      v16 = 0xE000000000000000;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined copy of BindTarget?(v3, v5, v6);
    swift_retain();
    v15 = v3;
    v16 = v5;
    v17 = v6;
  }
  outlined copy of BindTarget?(v3, v5, v6);
  swift_bridgeObjectRelease();
  outlined consume of BindTarget?(v3, v5, v6);
  swift_release();
  v30 = v15;
  v31 = v16;
  v32 = v17;
  specialized static InternalBindPath.pathFromTarget(_:_:)((uint64_t)&v30);
  v21 = v20;
  v23 = v22;
  outlined consume of BindTarget(v15, v16, v17);
  v24 = (void *)MEMORY[0x220768C3C](v21, v23);
  v25 = objc_msgSend(v24, sel_UTF8String);
  v26 = v24;
  swift_bridgeObjectRelease();
  if (!v25)
    goto LABEL_24;
  RETimelineDefinitionSetTargetPath();
  if ((v28 & 1) != 0 && *(_QWORD *)(v8 + 16))
    RETimelineDefinitionGetAnimationLayer();
  RETimelineDefinitionSetAnimationLayer();
  if (v29 && *(_QWORD *)(v8 + 16))
    RETimelineDefinitionGetFillMode();
  RETimelineDefinitionSetFillMode();
  if (v27 == 2)
  {
    if (*(_QWORD *)(v8 + 16))
      RETimelineDefinitionIsAdditive();
  }
  RETimelineDefinitionSetAdditive();
}

BOOL TimelineClipProperties.isClipped.getter()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t ClipStart;
  uint64_t ClipEnd;
  uint64_t ClipDuration;
  double v9;
  double v10;
  double v11;
  double v12;
  float v13;
  float v14;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v1 = v0[7];
  v23 = v0[6];
  v24 = v1;
  v25 = v0[8];
  v26 = *((_QWORD *)v0 + 18);
  v2 = v0[3];
  v19 = v0[2];
  v20 = v2;
  v3 = v0[5];
  v21 = v0[4];
  v22 = v3;
  v4 = v0[1];
  v17 = *v0;
  v18 = v4;
  v5 = v26;
  if ((BYTE9(v17) & 1) != 0)
  {
    if (*(_QWORD *)(v26 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipStart = RETimelineDefinitionGetClipStart();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipStart)
        return 1;
    }
  }
  else if ((BYTE8(v17) & 1) == 0)
  {
    return 1;
  }
  if ((BYTE9(v18) & 1) != 0)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipEnd = RETimelineDefinitionGetClipEnd();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipEnd)
        return 1;
    }
  }
  else if ((BYTE8(v18) & 1) == 0)
  {
    return 1;
  }
  if ((BYTE9(v19) & 1) != 0)
  {
    if (*(_QWORD *)(v5 + 16))
    {
      outlined retain of TimelineClipProperties((uint64_t)&v17);
      ClipDuration = RETimelineDefinitionGetClipDuration();
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if (ClipDuration)
        return 1;
    }
  }
  else if ((BYTE8(v19) & 1) == 0)
  {
    return 1;
  }
  if ((BYTE8(v20) & 1) == 0)
  {
    if (*(double *)&v20 == 0.0)
      goto LABEL_22;
    return 1;
  }
  if (*(_QWORD *)(v5 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v17);
    if (RETimelineDefinitionGetTimelineType() != 2)
    {
      outlined release of TimelineClipProperties((uint64_t)&v17);
      if ((BYTE8(v21) & 1) != 0)
        goto LABEL_23;
LABEL_27:
      v12 = *(double *)&v21;
      goto LABEL_28;
    }
    RETimelineDefinitionGetClipOffset();
    v10 = v9;
    outlined release of TimelineClipProperties((uint64_t)&v17);
    if (v10 != 0.0)
      return 1;
  }
LABEL_22:
  if ((BYTE8(v21) & 1) == 0)
    goto LABEL_27;
LABEL_23:
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  outlined retain of TimelineClipProperties((uint64_t)&v17);
  if (RETimelineDefinitionGetTimelineType() != 2)
  {
    outlined release of TimelineClipProperties((uint64_t)&v17);
    if ((v22 & 1) != 0)
      goto LABEL_30;
LABEL_34:
    v14 = *((float *)&v21 + 3);
    goto LABEL_35;
  }
  RETimelineDefinitionGetClipDelay();
  v12 = v11;
  outlined release of TimelineClipProperties((uint64_t)&v17);
LABEL_28:
  if (v12 != 0.0)
    return 1;
LABEL_29:
  if ((v22 & 1) == 0)
    goto LABEL_34;
LABEL_30:
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  outlined retain of TimelineClipProperties((uint64_t)&v17);
  if (RETimelineDefinitionGetTimelineType() != 2)
  {
    outlined release of TimelineClipProperties((uint64_t)&v17);
    goto LABEL_38;
  }
  RETimelineDefinitionGetClipSpeed();
  v14 = v13;
  outlined release of TimelineClipProperties((uint64_t)&v17);
LABEL_35:
  if (v14 != 1.0)
    return 1;
LABEL_38:
  TimelineClipProperties.repeatMode.getter(&v16);
  return v16 != 0;
}

uint64_t TimelineClipProperties.createClip()()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ClipSourceRef;
  uint64_t v8;
  uint64_t v10;
  _OWORD v11[5];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v1 = *(_OWORD *)(v0 + 112);
  v13 = *(_OWORD *)(v0 + 96);
  v14 = v1;
  v15 = *(_OWORD *)(v0 + 128);
  v16 = *(_QWORD *)(v0 + 144);
  v2 = *(_OWORD *)(v0 + 48);
  v11[2] = *(_OWORD *)(v0 + 32);
  v11[3] = v2;
  v3 = *(_OWORD *)(v0 + 80);
  v11[4] = *(_OWORD *)(v0 + 64);
  v12 = v3;
  v4 = *(_OWORD *)(v0 + 16);
  v11[0] = *(_OWORD *)v0;
  v11[1] = v4;
  v5 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
    v6 = v5;
    goto LABEL_8;
  }
  if (*(_QWORD *)(v16 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
    ClipSourceRef = RETimelineDefinitionCreateClipSourceRef();
    if (ClipSourceRef)
    {
      v8 = ClipSourceRef;
      type metadata accessor for TimelineDefinition();
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v8;
      RERetain();
      RERelease();
      goto LABEL_8;
    }
  }
  else
  {
    outlined retain of TimelineClipProperties((uint64_t)v11);
  }
  type metadata accessor for TimelineDefinition();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = 0;
LABEL_8:
  swift_retain();
  outlined release of TimelineClipProperties((uint64_t)v11);
  if (*(_QWORD *)(v6 + 16))
  {
    closure #1 in TimelineClipProperties.createClip()((uint64_t)v11, &v10);
    swift_release();
    return v10;
  }
  else
  {
    swift_release();
    return 0;
  }
}

uint64_t TimelineClipProperties.isModified.getter()
{
  uint64_t v0;
  uint64_t result;
  BOOL v2;
  int v3;
  unsigned int v4;

  if (*(_BYTE *)(v0 + 9) != 1)
    return 1;
  result = 1;
  if (*(_BYTE *)(v0 + 25) == 1
    && *(_BYTE *)(v0 + 41)
    && *(_BYTE *)(v0 + 56)
    && *(_BYTE *)(v0 + 72)
    && *(_BYTE *)(v0 + 80)
    && *(_BYTE *)(v0 + 81) == 4
    && !*(_QWORD *)(v0 + 88))
  {
    if (*(_QWORD *)(v0 + 104))
      v2 = 0;
    else
      v2 = *(unsigned __int8 *)(v0 + 128) == 255;
    v3 = *(unsigned __int8 *)(v0 + 136) ^ 1;
    if (!v2)
      v3 = 1;
    v4 = v3 | *(unsigned __int8 *)(v0 + 138) ^ 1;
    if (*(_BYTE *)(v0 + 139) == 2)
      return v4;
    else
      return 1;
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation17BlendShapeWeightsV_Sfs5NeverOTB504_s17d12Foundation17fgH36V21__rk_animationInverseACvgS2fXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v2;
  uint64_t result;
  float *v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    result = v8;
    v4 = (float *)(a1 + 32);
    do
    {
      v5 = *v4;
      v9 = result;
      v7 = *(_QWORD *)(result + 16);
      v6 = *(_QWORD *)(result + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
        result = v9;
      }
      *(_QWORD *)(result + 16) = v7 + 1;
      *(float *)(result + 4 * v7 + 32) = -v5;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_0D3Kit9TransformVs5NeverOTB504_s17d12Foundation15fg35V21__rk_animationInverseACvg0A3Kit9I8VAGXEfU_Tf1cn_n(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  int v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v18 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    v2 = v18;
    if (one-time initialization token for identity != -1)
      swift_once();
    v4 = a1 + 64;
    do
    {
      RESRTInverse();
      v8 = v5;
      v10 = *(_QWORD *)(v18 + 16);
      v9 = *(_QWORD *)(v18 + 24);
      if (v10 >= v9 >> 1)
      {
        v14 = v7;
        v15 = v5;
        v13 = v6;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v6 = v13;
        v7 = v14;
        v8 = v15;
      }
      HIDWORD(v8) = v16;
      HIDWORD(v7) = v17;
      *(_QWORD *)(v18 + 16) = v10 + 1;
      v11 = (_OWORD *)(v18 + 48 * v10);
      v11[2] = v8;
      v11[3] = v6;
      v11[4] = v7;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void (*specialized MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t *v3;
  _QWORD *v7;
  void (*result)(uint64_t **, char);
  uint64_t v9;
  uint64_t v10;

  v7 = malloc(0x38uLL);
  *a1 = v7;
  v7[5] = a3;
  v7[6] = v3;
  v7[4] = a2;
  v9 = *v3;
  result = (void (*)(uint64_t **, char))v3[1];
  v10 = *((_QWORD *)result + 2);
  if (v10 < *v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v9 > a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 >= a3)
  {
    v7[2] = v9;
    v7[3] = result;
    *v7 = a2;
    v7[1] = a3;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_7:
  __break(1u);
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v6 = (*a1)[2];
  v5 = (*a1)[3];
  v7 = (_QWORD *)(*a1)[5];
  v8 = (*a1)[6];
  v9 = (_QWORD *)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v8, v9, v7, v3, v4, v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[6], v9, v7, v3, v4, v6, v5);
  }
  swift_bridgeObjectRelease();
  free(v2);
}

{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v2 = (id *)*a1;
  v3 = **a1;
  v4 = (*a1)[1];
  v5 = (*a1)[4];
  v6 = (*a1)[5];
  v7 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    v8 = (id)(*a1)[2];
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(v6, v7, v5, v3, v4);

  }
  else
  {
    specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)((*a1)[5], v7, v5, v3, v4);
  }

  free(v2);
}

{
  MutableCollection<>.subscript.modifyspecialized (a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

{
  MutableCollection<>.subscript.modifyspecialized (a1, a2, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t specialized MutableCollection<>.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  _QWORD *v7;
  void *v8;
  uint64_t result;
  id v10;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[4] = a3;
  v7[5] = v3;
  v7[3] = a2;
  v8 = *v3;
  result = DRMeshGetPartCount();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (a2 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (result >= a3)
  {
    v7[1] = a3;
    v7[2] = v8;
    *v7 = a2;
    v10 = v8;
    return (uint64_t)MutableCollection<>.subscript.modifyspecialized ;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(uint64_t **a1, char a2), uint64_t a2, uint64_t a3))(uint64_t **a1, char a2)
{
  void (**v3)(uint64_t **, char);
  void (*result)(uint64_t **, char);
  void (*v8)(uint64_t **, char);

  result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1 = result;
  *((_QWORD *)result + 4) = a3;
  *((_QWORD *)result + 5) = v3;
  *((_QWORD *)result + 3) = a2;
  if (a2 < 0 || (v8 = result, result = *v3, *((_QWORD *)*v3 + 2) < a3))
  {
    __break(1u);
  }
  else
  {
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 2) = result;
    *(_QWORD *)v8 = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

{
  void (**v3)(uint64_t **, char);
  void (*result)(uint64_t **, char);
  void (*v8)(uint64_t **, char);

  result = (void (*)(uint64_t **, char))malloc(0x30uLL);
  *a1 = result;
  *((_QWORD *)result + 4) = a3;
  *((_QWORD *)result + 5) = v3;
  *((_QWORD *)result + 3) = a2;
  if (a2 < 0 || (v8 = result, result = *v3, *((_QWORD *)*v3 + 2) < a3))
  {
    __break(1u);
  }
  else
  {
    *((_QWORD *)v8 + 1) = a3;
    *((_QWORD *)v8 + 2) = result;
    *(_QWORD *)v8 = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t **a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = **a1;
  v6 = (*a1)[1];
  v7 = (*a1)[4];
  v8 = (*a1)[5];
  v9 = (*a1)[2];
  v10 = (*a1)[3];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    a3(v8, v10, v7, v5, v6, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    a3((*a1)[5], v10, v7, v5, v6, v9);
  }
  swift_bridgeObjectRelease();
  free(v4);
}

uint64_t specialized MutableCollection.swapAt(_:_:)(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    DRMeshGetPartAt();
    DRMeshGetPartAt();
    DRMeshSetPartAt();
    return DRMeshSetPartAt();
  }
  return result;
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8[5];
  uint64_t v9[5];

  if (result != a2)
  {
    v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)(v3 + 8);
      v6 = v4[2];
      if (v6 > result)
      {
        v2 = a2;
        outlined init with copy of __REAssetService((uint64_t)&v4[5 * result + 4], (uint64_t)v9);
        if (v6 > v2)
        {
          outlined init with copy of __REAssetService((uint64_t)&v4[5 * v2 + 4], (uint64_t)v8);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 8) = v4;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_6;
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        *(_QWORD *)(v3 + 8) = v4;
LABEL_6:
        if (v4[2] <= v5)
        {
          __break(1u);
        }
        else
        {
          __swift_assign_boxed_opaque_existential_1(&v4[5 * v5 + 4], v8);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
          v5 = *(_QWORD *)(v3 + 8);
          result = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v3 + 8) = v5;
          if ((result & 1) != 0)
            goto LABEL_8;
        }
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((_QWORD *)v5);
        v5 = result;
        *(_QWORD *)(v3 + 8) = result;
LABEL_8:
        if (*(_QWORD *)(v5 + 16) <= v2)
        {
          __break(1u);
        }
        else
        {
          __swift_assign_boxed_opaque_existential_1((uint64_t *)(v5 + 40 * v2 + 32), v9);
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  if (result != a2)
  {
    v6 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *(_QWORD **)v3;
      if (*(_QWORD *)(*(_QWORD *)v3 + 16) > result)
      {
        v2 = a2;
        v5 = v4 + 4;
        v7 = (__int128 *)&v4[6 * result + 4];
        v17 = *v7;
        v15 = v7[2];
        v16 = v7[1];
        if (one-time initialization token for identity == -1)
        {
          if ((a2 & 0x8000000000000000) == 0)
            goto LABEL_6;
          goto LABEL_15;
        }
LABEL_14:
        swift_once();
        if ((v2 & 0x8000000000000000) == 0)
        {
LABEL_6:
          if (v4[2] > v2)
          {
            v8 = (__int128 *)&v5[6 * v2];
            v13 = v8[1];
            v14 = *v8;
            v12 = v8[2];
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) != 0)
              goto LABEL_8;
            goto LABEL_17;
          }
LABEL_16:
          __break(1u);
LABEL_17:
          result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
          v4 = (_QWORD *)result;
LABEL_8:
          v9 = v4[2];
          if (v9 <= v6)
          {
            __break(1u);
          }
          else
          {
            v10 = &v4[6 * v6 + 4];
            *v10 = v14;
            v10[1] = v13;
            v10[2] = v12;
            *(_QWORD *)v3 = v4;
            if (v9 > v2)
            {
              v11 = &v4[6 * v2 + 4];
              *v11 = v17;
              v11[1] = v16;
              v11[2] = v15;
              *(_QWORD *)v3 = v4;
              return result;
            }
          }
          __break(1u);
          return result;
        }
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_14;
  }
  return result;
}

{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  if (result != a2)
  {
    v7 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v4 = *v3;
      v8 = *(_QWORD *)(*v3 + 16);
      if (v8 > result)
      {
        v2 = a2;
        if (v8 > a2)
        {
          v5 = *(_DWORD *)(v4 + 32 + 4 * result);
          v6 = *(_DWORD *)(v4 + 32 + 4 * a2);
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) != 0)
            goto LABEL_6;
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        v4 = result;
LABEL_6:
        v9 = *(_QWORD *)(v4 + 16);
        if (v9 <= v7)
        {
          __break(1u);
        }
        else
        {
          *(_DWORD *)(v4 + 32 + 4 * v7) = v6;
          *v3 = v4;
          if (v9 > v2)
          {
            *(_DWORD *)(v4 + 32 + 4 * v2) = v5;
            *v3 = v4;
            return result;
          }
        }
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(unint64_t a1, unint64_t a2)
{
  double (*v2)();
  unint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  __objc2_class_ro *v8;
  float32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float32x4_t *v13;
  float32x4_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  float v25;
  __int128 v26;
  int32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _OWORD *v43;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t *v47;
  float32x4_t v48;
  uint64_t *v49;
  double (*v50)();
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  unint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x2_t v57;
  float v58;
  unint64_t v59;
  __int128 v60;
  int32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  _OWORD *v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  float32x4_t *v97;
  uint64_t v98;

  v3 = a2;
  v4 = a1;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 < v5)
    v5 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  v98 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v8 = &RKChangeSceneActionRuntimeTechnique;
  v9 = (float32x4_t *)&unk_21BE51000;
  v97 = (float32x4_t *)v4;
  if (v7)
  {
    v2 = *(double (**)())(v4 + 16);
    v10 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 != -1)
      goto LABEL_34;
    while (1)
    {
      v11 = *(_QWORD *)(v3 + 16);
      v12 = (float *)(v3 + 72);
      v13 = (float32x4_t *)(v4 + 64);
      v14 = v9[111];
      v9 = (float32x4_t *)v7;
      v15 = v3;
      v8 = &RKChangeSceneActionRuntimeTechnique;
      while (v9)
      {
        if (!v2)
          goto LABEL_30;
        if (!v11)
          goto LABEL_31;
        v17 = v13[-1];
        v16 = *v13;
        v18 = v13[-2];
        v19 = *(float32x4_t *)(v12 - 6);
        v20 = *(float32x2_t *)(v12 - 10);
        v21 = *(v12 - 8);
        v22 = *(v12 - 2);
        v23 = *(v12 - 1);
        v4 = *(_QWORD *)(v98 + 16);
        v24 = *(_QWORD *)(v98 + 24);
        v3 = v4 + 1;
        v25 = *v12;
        if (v4 >= v24 >> 1)
        {
          v94 = v15;
          v88 = *v13;
          v91 = v14;
          v82 = v13[-2];
          v85 = v13[-1];
          v80 = *(float32x4_t *)(v12 - 6);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v4 + 1, 1);
          v19 = v80;
          v18 = v82;
          v17 = v85;
          v16 = v88;
          v14 = v91;
          v8 = &RKChangeSceneActionRuntimeTechnique;
          v15 = v94;
        }
        *(float32x2_t *)&v26 = vmul_f32(*(float32x2_t *)v18.f32, v20);
        *((_QWORD *)&v26 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v21, v18, 2));
        v27 = (int32x4_t)vnegq_f32(v19);
        v28 = (int8x16_t)vtrn2q_s32((int32x4_t)v19, vtrn1q_s32((int32x4_t)v19, v27));
        v29 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v27, 8uLL), *(float32x2_t *)v17.f32, 1), (float32x4_t)vextq_s8(v28, v28, 8uLL), v17.f32[0]);
        v30 = (float32x4_t)vrev64q_s32((int32x4_t)v19);
        v30.i32[0] = v27.i32[1];
        v30.i32[3] = v27.i32[2];
        v31 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v19, v17, 3), v30, v17, 2), v29);
        v32 = vmulq_f32(v17, v14);
        v33 = (int32x4_t)vnegq_f32(v32);
        v34 = (int8x16_t)vtrn2q_s32((int32x4_t)v32, vtrn1q_s32((int32x4_t)v32, v33));
        v35 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v33, 8uLL), vmuls_lane_f32(v23, *(float32x2_t *)v18.f32, 1));
        v36 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
        v36.i32[0] = v33.i32[1];
        v36.i32[3] = v33.i32[2];
        v37 = vmlaq_n_f32(vmlaq_n_f32(v35, (float32x4_t)vextq_s8(v34, v34, 8uLL), v22 * v18.f32[0]), v36, vmuls_lane_f32(v25, v18, 2));
        v38 = (int32x4_t)vnegq_f32(v37);
        v39 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v38));
        v40 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v38, 8uLL), *(float32x2_t *)v17.f32, 1), (float32x4_t)vextq_s8(v39, v39, 8uLL), v17.f32[0]);
        v41 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
        v41.i32[0] = v38.i32[1];
        v41.i32[3] = v38.i32[2];
        v42 = vaddq_f32(v16, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v37, v17, 3), v41, v17, 2), v40));
        v42.i32[3] = 0;
        *(_QWORD *)(v98 + 16) = v3;
        v43 = (_OWORD *)(v98 + 48 * v4);
        v2 = (double (*)())((char *)v2 - 1);
        v43[2] = v26;
        v43[3] = v31;
        v43[4] = v42;
        --v11;
        v12 += 12;
        v13 += 3;
        v9 = (float32x4_t *)((char *)v9 - 1);
        if (!v9)
          goto LABEL_17;
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15 = v3;
LABEL_17:
  v9 = v97;
  v3 = v97[1].u64[0];
  if (v7 != v3)
  {
    v45 = 48 * v7 + 64;
    v46 = (float32x4_t *)(v15 + v45);
    v47 = (float32x4_t *)((char *)v97 + v45);
    v48 = (float32x4_t)xmmword_21BE516F0;
    v49 = &one-time initialization token for identity;
    v50 = one-time initialization function for identity;
    while (v7 < v3)
    {
      v51 = v47[-2];
      v52 = v47[-1];
      v53 = *v47;
      if (v8[4].ivars != (__objc2_ivar_list *)-1)
      {
        v4 = (unint64_t)v49;
        v2 = v50;
        v95 = v15;
        v89 = *v47;
        v92 = v48;
        v83 = v47[-2];
        v86 = v47[-1];
        swift_once();
        v51 = v83;
        v52 = v86;
        v53 = v89;
        v48 = v92;
        v50 = v2;
        v49 = (uint64_t *)v4;
        v8 = &RKChangeSceneActionRuntimeTechnique;
        v15 = v95;
      }
      v54 = *(_QWORD *)(v15 + 16);
      if (v7 != v54)
      {
        if (v7 >= v54)
          goto LABEL_33;
        v56 = v46[-1];
        v55 = *v46;
        v57 = *(float32x2_t *)v46[-2].f32;
        v58 = v46[-2].f32[2];
        v4 = *(_QWORD *)(v98 + 16);
        v59 = *(_QWORD *)(v98 + 24);
        v2 = (double (*)())(v4 + 1);
        if (v4 >= v59 >> 1)
        {
          v96 = v15;
          v90 = v53;
          v93 = v48;
          v84 = v51;
          v87 = v52;
          v79 = v46[-1];
          v81 = *v46;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v4 + 1, 1);
          v56 = v79;
          v55 = v81;
          v51 = v84;
          v52 = v87;
          v53 = v90;
          v48 = v93;
          v50 = one-time initialization function for identity;
          v49 = &one-time initialization token for identity;
          v8 = &RKChangeSceneActionRuntimeTechnique;
          v15 = v96;
        }
        ++v7;
        *(float32x2_t *)&v60 = vmul_f32(*(float32x2_t *)v51.f32, v57);
        *((_QWORD *)&v60 + 1) = COERCE_UNSIGNED_INT(vmuls_lane_f32(v58, v51, 2));
        v61 = (int32x4_t)vnegq_f32(v56);
        v62 = (int8x16_t)vtrn2q_s32((int32x4_t)v56, vtrn1q_s32((int32x4_t)v56, v61));
        v63 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v61, 8uLL), *(float32x2_t *)v52.f32, 1), (float32x4_t)vextq_s8(v62, v62, 8uLL), v52.f32[0]);
        v64 = (float32x4_t)vrev64q_s32((int32x4_t)v56);
        v64.i32[0] = v61.i32[1];
        v64.i32[3] = v61.i32[2];
        v65 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v56, v52, 3), v64, v52, 2), v63);
        v66 = vmulq_f32(v51, v55);
        v67 = vmulq_f32(v52, v48);
        v68 = (int32x4_t)vnegq_f32(v67);
        v69 = (int8x16_t)vtrn2q_s32((int32x4_t)v67, vtrn1q_s32((int32x4_t)v67, v68));
        v70 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v68, 8uLL), *(float32x2_t *)v66.f32, 1);
        v71 = (float32x4_t)vrev64q_s32((int32x4_t)v67);
        v71.i32[0] = v68.i32[1];
        v71.i32[3] = v68.i32[2];
        v72 = vmlaq_laneq_f32(vmlaq_n_f32(v70, (float32x4_t)vextq_s8(v69, v69, 8uLL), v66.f32[0]), v71, v66, 2);
        v73 = (int32x4_t)vnegq_f32(v72);
        v74 = (int8x16_t)vtrn2q_s32((int32x4_t)v72, vtrn1q_s32((int32x4_t)v72, v73));
        v75 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v73, 8uLL), *(float32x2_t *)v52.f32, 1), (float32x4_t)vextq_s8(v74, v74, 8uLL), v52.f32[0]);
        v76 = (float32x4_t)vrev64q_s32((int32x4_t)v72);
        v76.i32[0] = v73.i32[1];
        v76.i32[3] = v73.i32[2];
        v77 = vaddq_f32(v53, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v72, v52, 3), v76, v52, 2), v75));
        v77.i32[3] = 0;
        *(_QWORD *)(v98 + 16) = v2;
        v78 = (_OWORD *)(v98 + 48 * v4);
        v78[2] = v60;
        v78[3] = v65;
        v78[4] = v77;
        v46 += 3;
        v47 += 3;
        if (v3 != v7)
          continue;
      }
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v98;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n(float32x4_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  float32x4_t *v4;
  int64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  unint64_t v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  float32x4_t v15;
  float32x4_t v16;
  simd_quatf v17;
  float32x4_t v18;
  float32x4_t v19;
  unint64_t v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  unint64_t v29;
  simd_float4 v30;
  simd_float4 v31;
  simd_float4 v32;
  float32x4_t v33;
  float32x4_t v34;
  simd_quatf v35;
  float32x4_t v36;
  float32x4_t v37;
  unint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  float32x4_t *v42;
  unint64_t v43;
  simd_quatf v44;
  simd_quatf v45;
  float32x4_t v46;
  float32x4_t v47;
  simd_quatf v48;
  simd_quatf v49;
  simd_quatf v50;
  simd_quatf v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  simd_float4 v56;
  simd_float4 v57;
  simd_float4 v58;
  simd_float4 v59;
  simd_float4 v60;
  simd_float4 v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  simd_float4x4 v65;
  simd_float4x4 v66;
  simd_float4x4 v67;

  v3 = a2;
  v4 = a1;
  v5 = a1[1].i64[0];
  v6 = *(_QWORD *)(a2 + 16);
  if (v6 < v5)
    v5 = *(_QWORD *)(a2 + 16);
  if (v6)
    v7 = v5;
  else
    v7 = 0;
  v64 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
  v42 = v4;
  v43 = v3;
  v41 = v7;
  if (v7)
  {
    v2 = v4[1].u64[0];
    v8 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != -1)
      goto LABEL_37;
    while (1)
    {
      v9 = *(_QWORD *)(v3 + 16);
      v4 += 4;
      v10 = (float32x4_t *)(v3 + 64);
      v11 = v41;
      while (v11)
      {
        if (!v2)
          goto LABEL_33;
        if (!v9)
          goto LABEL_34;
        v44 = (simd_quatf)v4[-2];
        v46 = *v4;
        v48 = (simd_quatf)v10[-1];
        v52 = v10[-2];
        v53 = *v10;
        *(double *)v12.i64 = simd_matrix4x4(v4[-1]);
        v56 = v12;
        v58 = v13;
        v60 = v14;
        v62 = v15;
        simd_float4x4.scale(_:)((float32x4_t)v44);
        v65.columns[2] = v60;
        v65.columns[3] = (simd_float4)vaddq_f32(v46, v62);
        v65.columns[3].i32[3] = v62.i32[3];
        v65.columns[0] = v56;
        v65.columns[1] = v58;
        __invert_f4(v65);
        simd_matrix4x4((float32x4_t)v48);
        simd_float4x4.scale(_:)(v52);
        REMakeSRTFromMatrix();
        v19 = v16;
        v3 = *(_QWORD *)(v64 + 16);
        v20 = *(_QWORD *)(v64 + 24);
        if (v3 >= v20 >> 1)
        {
          v52 = v18;
          v53 = v16;
          v49 = v17;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v3 + 1, 1);
          v17 = v49;
          v18 = v52;
          v19 = v53;
        }
        v19.i32[3] = v55.i32[3];
        v18.i32[3] = v54.i32[3];
        *(_QWORD *)(v64 + 16) = v3 + 1;
        v21 = (_OWORD *)(v64 + 48 * v3);
        --v2;
        --v9;
        v4 += 3;
        v21[2] = v19;
        v21[3] = v17;
        v21[4] = v18;
        v10 += 3;
        if (!--v11)
          goto LABEL_17;
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_17:
  v3 = v41;
  v22 = v42[1].u64[0];
  if (v41 != v22)
  {
    if (v41 <= v22)
      v24 = v42[1].u64[0];
    else
      v24 = v41;
    v25 = 48 * v41 + 64;
    v26 = v43;
    v4 = (float32x4_t *)(v43 + v25);
    v27 = (float32x4_t *)((char *)v42 + v25);
    while (v24 != v3)
    {
      v28 = v27[-1];
      v54 = v27[-2];
      v55 = *v27;
      if (one-time initialization token for identity != -1)
      {
        v50 = (simd_quatf)v27[-1];
        swift_once();
        v28 = (float32x4_t)v50;
      }
      v29 = *(_QWORD *)(v26 + 16);
      if (v3 != v29)
      {
        if (v3 >= v29)
          goto LABEL_36;
        v45 = (simd_quatf)v4[-1];
        v47 = v4[-2];
        *(double *)v30.i64 = simd_matrix4x4(v28);
        v57 = v30;
        v59 = v31;
        v61 = v32;
        v63 = v33;
        simd_float4x4.scale(_:)(v54);
        v66.columns[2] = v61;
        v66.columns[3] = (simd_float4)vaddq_f32(v55, v63);
        v66.columns[3].i32[3] = v63.i32[3];
        v66.columns[0] = v57;
        v66.columns[1] = v59;
        v67 = __invert_f4(v66);
        v54.i32[3] = v67.columns[2].i32[3];
        v55.i32[3] = v67.columns[3].i32[3];
        simd_matrix4x4((float32x4_t)v45);
        simd_float4x4.scale(_:)(v47);
        REMakeSRTFromMatrix();
        v37 = v34;
        v39 = *(_QWORD *)(v64 + 16);
        v38 = *(_QWORD *)(v64 + 24);
        v2 = v39 + 1;
        if (v39 >= v38 >> 1)
        {
          v54 = v36;
          v55 = v34;
          v51 = v35;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
          v35 = v51;
          v36 = v54;
          v37 = v55;
        }
        ++v3;
        v37.i32[3] = v53.i32[3];
        v36.i32[3] = v52.i32[3];
        *(_QWORD *)(v64 + 16) = v2;
        v40 = (_OWORD *)(v64 + 48 * v39);
        v4 += 3;
        v40[2] = v37;
        v40[3] = v35;
        v40[4] = v36;
        v27 += 3;
        v26 = v43;
        if (v22 != v3)
          continue;
      }
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v64;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  float v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 < v4)
    v4 = *(_QWORD *)(a2 + 16);
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  v28 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v27 = a1;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = (float *)(a1 + 32);
    v9 = (float *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v12 = v6;
    v13 = a2;
    while (v7)
    {
      if (!v10)
        goto LABEL_26;
      v14 = *v8;
      v15 = *v9;
      v17 = *(_QWORD *)(v28 + 16);
      v16 = *(_QWORD *)(v28 + 24);
      if (v17 >= v16 >> 1)
      {
        v26 = v13;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v13 = v26;
      }
      ++v9;
      *(_QWORD *)(v28 + 16) = v17 + 1;
      *(float *)(v28 + 4 * v17 + 32) = v14 + v15;
      ++v8;
      --v10;
      --v7;
      if (!--v12)
        goto LABEL_15;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v13 = a2;
LABEL_15:
    v18 = *(_QWORD *)(v27 + 16);
    if (v6 == v18)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v28;
    }
    v19 = v13 + 32;
    while (v6 < v18)
    {
      v20 = *(_QWORD *)(v13 + 16);
      if (v6 == v20)
        goto LABEL_16;
      if (v6 >= v20)
        goto LABEL_28;
      v21 = *(float *)(v27 + 32 + 4 * v6);
      v22 = *(float *)(v19 + 4 * v6);
      v24 = *(_QWORD *)(v28 + 16);
      v23 = *(_QWORD *)(v28 + 24);
      if (v24 >= v23 >> 1)
      {
        v25 = v13;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v13 = v25;
      }
      ++v6;
      *(_QWORD *)(v28 + 16) = v24 + 1;
      *(float *)(v28 + 4 * v24 + 32) = v21 + v22;
      v18 = *(_QWORD *)(v27 + 16);
      if (v6 == v18)
        goto LABEL_16;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(uint64_t a1, uint64_t a2, float a3)
{
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v7 < v6)
    v6 = *(_QWORD *)(a2 + 16);
  if (v7)
    v8 = v6;
  else
    v8 = 0;
  v30 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
  v29 = a1;
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = (float *)(a1 + 32);
    v11 = (float *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v14 = v8;
    v15 = a2;
    while (v9)
    {
      if (!v12)
        goto LABEL_26;
      v16 = *v10;
      v17 = *v11;
      v19 = *(_QWORD *)(v30 + 16);
      v18 = *(_QWORD *)(v30 + 24);
      if (v19 >= v18 >> 1)
      {
        v28 = v15;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v15 = v28;
      }
      ++v11;
      *(_QWORD *)(v30 + 16) = v19 + 1;
      *(float *)(v30 + 4 * v19 + 32) = (float)(v16 * a3) + (float)((float)(1.0 - a3) * v17);
      ++v10;
      --v12;
      --v9;
      if (!--v14)
        goto LABEL_15;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
    v15 = a2;
LABEL_15:
    v20 = *(_QWORD *)(v29 + 16);
    if (v8 == v20)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v30;
    }
    v21 = v15 + 32;
    while (v8 < v20)
    {
      v22 = *(_QWORD *)(v15 + 16);
      if (v8 == v22)
        goto LABEL_16;
      if (v8 >= v22)
        goto LABEL_28;
      v23 = *(float *)(v29 + 32 + 4 * v8);
      v24 = *(float *)(v21 + 4 * v8);
      v26 = *(_QWORD *)(v30 + 16);
      v25 = *(_QWORD *)(v30 + 24);
      if (v26 >= v25 >> 1)
      {
        v27 = v15;
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v15 = v27;
      }
      ++v8;
      *(_QWORD *)(v30 + 16) = v26 + 1;
      *(float *)(v30 + 4 * v26 + 32) = (float)(v23 * a3) + (float)((float)(1.0 - a3) * v24);
      v20 = *(_QWORD *)(v29 + 16);
      if (v8 == v20)
        goto LABEL_16;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = a2;
  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 < v4)
    v4 = *(_QWORD *)(a2 + 16);
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  v40 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v36 = v3;
  v37 = v2;
  if (v6)
  {
    v7 = *(_QWORD *)(v3 + 16);
    v8 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8 != -1)
      goto LABEL_38;
    while (1)
    {
      v9 = *(_QWORD *)(v2 + 16);
      v10 = v3 + 64;
      v11 = v2 + 64;
      v2 = v6;
      while (v2)
      {
        if (!v7)
          goto LABEL_33;
        if (!v9)
          goto LABEL_34;
        RESRTLerp();
        v15 = v12;
        v3 = *(_QWORD *)(v40 + 16);
        v16 = *(_QWORD *)(v40 + 24);
        if (v3 >= v16 >> 1)
        {
          v32 = v14;
          v34 = v12;
          v30 = v13;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v3 + 1, 1);
          v13 = v30;
          v14 = v32;
          v15 = v34;
        }
        HIDWORD(v15) = v39;
        HIDWORD(v14) = v38;
        *(_QWORD *)(v40 + 16) = v3 + 1;
        v17 = (_OWORD *)(v40 + 48 * v3);
        --v7;
        --v9;
        v10 += 48;
        v17[2] = v15;
        v17[3] = v13;
        v17[4] = v14;
        v11 += 48;
        if (!--v2)
          goto LABEL_17;
      }
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      swift_once();
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_17:
  v18 = *(_QWORD *)(v36 + 16);
  if (v6 != v18)
  {
    v20 = 48 * v6 + 64;
    v7 = v36 + v20;
    v2 = v37;
    v21 = v37 + v20;
    while (v6 < v18)
    {
      if (one-time initialization token for identity == -1)
      {
        v3 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_36;
      }
      else
      {
        swift_once();
        v3 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_36;
      }
      v22 = *(_QWORD *)(v2 + 16);
      if (v6 == v22)
        goto LABEL_18;
      if (v6 >= v22)
        goto LABEL_37;
      RESRTLerp();
      v26 = v23;
      v28 = *(_QWORD *)(v40 + 16);
      v27 = *(_QWORD *)(v40 + 24);
      if (v28 >= v27 >> 1)
      {
        v33 = v25;
        v35 = v23;
        v31 = v24;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
        v24 = v31;
        v25 = v33;
        v26 = v35;
      }
      ++v6;
      v7 += 48;
      HIDWORD(v26) = v39;
      v21 += 48;
      HIDWORD(v25) = v38;
      *(_QWORD *)(v40 + 16) = v28 + 1;
      v29 = (_OWORD *)(v40 + 48 * v28);
      v29[2] = v26;
      v29[3] = v24;
      v29[4] = v25;
      v18 = *(_QWORD *)(v36 + 16);
      v2 = v37;
      if (v3 == v18)
        goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t AnimationFillMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void static AnimationFillMode.none.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void one-time initialization function for forwards()
{
  static AnimationFillMode.forwards = 1;
}

uint64_t AnimationFillMode.init(rawValue:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *static AnimationFillMode.forwards.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for forwards, &static AnimationFillMode.forwards, a1);
}

void one-time initialization function for backwards()
{
  static AnimationFillMode.backwards = 2;
}

_QWORD *static AnimationFillMode.backwards.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for backwards, &static AnimationFillMode.backwards, a1);
}

uint64_t one-time initialization function for both()
{
  int v0;
  char v1;
  uint64_t result;

  if (one-time initialization token for forwards != -1)
    result = swift_once();
  v0 = static AnimationFillMode.forwards;
  if (one-time initialization token for backwards != -1)
    result = swift_once();
  v1 = static AnimationFillMode.backwards;
  if ((static AnimationFillMode.backwards & ~v0) == 0)
    v1 = 0;
  static AnimationFillMode.both = v1 | v0;
  return result;
}

_QWORD *static AnimationFillMode.both.getter@<X0>(_BYTE *a1@<X8>)
{
  return static AnimationFillMode.forwards.getter(&one-time initialization token for both, &static AnimationFillMode.both, a1);
}

_QWORD *static AnimationFillMode.forwards.getter@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  if (*result != -1)
    result = (_QWORD *)swift_once();
  *a3 = *a2;
  return result;
}

void protocol witness for SetAlgebra.init() in conformance AnimationFillMode(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_BYTE *protocol witness for SetAlgebra.union(_:) in conformance AnimationFillMode@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.intersection(_:) in conformance AnimationFillMode@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance AnimationFillMode@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance AnimationFillMode(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance AnimationFillMode@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance AnimationFillMode@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formUnion(_:) in conformance AnimationFillMode(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formIntersection(_:) in conformance AnimationFillMode(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance AnimationFillMode(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *protocol witness for SetAlgebra.subtracting(_:) in conformance AnimationFillMode@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AnimationFillMode(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance AnimationFillMode(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AnimationFillMode(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance AnimationFillMode()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *protocol witness for SetAlgebra.subtract(_:) in conformance AnimationFillMode(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t AnimatableData.__rk_animationIdentity.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AnimatableData.__rk_animationIdentity.getter(a1, 38, 0xD000000000000023, 0x800000021BE8E670, a2);
}

uint64_t AnimatableData.__rk_animationInverse.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AnimatableData.__rk_animationIdentity.getter(a1, 37, 0xD000000000000022, 0x800000021BE8E6A0, a2);
}

uint64_t AnimatableData.__rk_animationIdentity.getter@<X0>(uint64_t a1@<X0>, Swift::Int a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(a2);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  specialized static AnimationLogger.logError(_:)(a3, a4);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a5, v5, a1);
}

uint64_t AnimatableData.__rk_combineForAnimation(with:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  specialized static AnimationLogger.logError(_:)(0xD000000000000025, 0x800000021BE8E6D0);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int64_t v5;
  uint64_t v6;
  float *v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v14 = MEMORY[0x24BEE4AF8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    v6 = v14;
    v8 = (float *)(a2 + 32);
    v9 = *(_QWORD *)(v14 + 16);
    do
    {
      v10 = *v8;
      v11 = *(_QWORD *)(v14 + 24);
      if (v9 >= v11 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v9 + 1, 1);
      *(_QWORD *)(v14 + 16) = v9 + 1;
      *(float *)(v14 + 4 * v9 + 32) = -v10;
      ++v8;
      ++v9;
      --v5;
    }
    while (v5);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n(v6, a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n();
  *a3 = v12;
  return result;
}

float32x2_t specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(float32x2_t a1, float32x2_t a2)
{
  return vadd_f32(vsub_f32(0, a2), a1);
}

{
  return vadd_f32(a1, vsub_f32(0, a2));
}

uint64_t AnimatableData.__rk_invertAndCombineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v6 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a2);
}

uint64_t AnimatableData.__rk_animationInterpolation(towards:t:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  specialized static AnimationLogger.logError(_:)(0xD000000000000028, 0x800000021BE8E700);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2, v2, a1);
}

float Float.__rk_animationIdentity.getter()
{
  return 0.0;
}

float protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Float@<S0>(float *a1@<X8>)
{
  float *v1;
  float result;

  result = -*v1;
  *a1 = result;
  return result;
}

float Float.__rk_animationInverse.getter(float a1)
{
  return -a1;
}

float protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;
  float result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

Swift::Float __swiftcall Float.__rk_combineForAnimation(with:)(Swift::Float with)
{
  float v1;

  return with + v1;
}

float protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float *v2;
  float result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

float protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Float@<S0>(float *a1@<X0>, float *a2@<X8>, double a3@<D0>)
{
  float *v3;
  float v4;
  float result;

  v4 = a3;
  result = (float)(*a1 * v4) + (float)((float)(1.0 - v4) * *v3);
  *a2 = result;
  return result;
}

Swift::Float __swiftcall Float.__rk_animationInterpolation(towards:t:)(Swift::Float towards, Swift::Double t)
{
  float v2;
  float v3;

  v3 = t;
  return (float)(v3 * towards) + (float)((float)(1.0 - v3) * v2);
}

double Double.__rk_animationIdentity.getter()
{
  return 0.0;
}

double protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Double@<D0>(double *a1@<X8>)
{
  double *v1;
  double result;

  result = -*v1;
  *a1 = result;
  return result;
}

double Double.__rk_animationInverse.getter(double a1)
{
  return -a1;
}

double protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 + *v2;
  *a2 = result;
  return result;
}

Swift::Double __swiftcall Double.__rk_combineForAnimation(with:)(Swift::Double with)
{
  double v1;

  return with + v1;
}

double protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double *v2;
  double result;

  result = *a1 - *v2;
  *a2 = result;
  return result;
}

double protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Double@<D0>(double *a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  double *v3;
  double result;

  result = *a1 * a3 + (1.0 - a3) * *v3;
  *a2 = result;
  return result;
}

Swift::Double __swiftcall Double.__rk_animationInterpolation(towards:t:)(Swift::Double towards, Swift::Double t)
{
  double v2;

  return towards * t + (1.0 - t) * v2;
}

double SIMD2<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

float32x2_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD2<A>@<D0>(float32x2_t *a1@<X8>)
{
  float32x2_t *v1;
  float32x2_t result;

  result = vsub_f32(0, *v1);
  *a1 = result;
  return result;
}

float32x2_t SIMD2<>.__rk_animationInverse.getter(float32x2_t a1)
{
  return vsub_f32(0, a1);
}

float32x2_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD2<A>@<D0>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t *v2;
  float32x2_t result;

  result = vadd_f32(*a1, *v2);
  *a2 = result;
  return result;
}

float32x2_t SIMD2<>.__rk_combineForAnimation(with:)(float32x2_t a1, float32x2_t a2)
{
  return vadd_f32(a1, a2);
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD2<A>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  float32x2_t *v2;

  *a2 = specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2);
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD2<A>(float32x2_t *a1@<X0>, float32x2_t *a2@<X8>, double a3@<D0>)
{
  float32x2_t *v3;

  *(float *)&a3 = a3;
  *a2 = simd_mix(*v3, *a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
}

float32x2_t SIMD2<>.__rk_animationInterpolation(towards:t:)(float32x2_t a1, double a2, float32x2_t a3)
{
  float v3;

  v3 = a2;
  return vmla_n_f32(a3, vsub_f32(a1, a3), v3);
}

void protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance <> SIMD3<A>(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double SIMD3<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

float protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD3<A>@<S0>(_OWORD *a1@<X8>)
{
  float32x2_t *v1;
  __int128 v2;

  *(float32x2_t *)&v2 = vsub_f32(0, *v1);
  *((_QWORD *)&v2 + 1) = COERCE_UNSIGNED_INT(0.0 - v1[1].f32[0]);
  *a1 = v2;
  return *(float *)&v2;
}

float32x2_t SIMD3<>.__rk_animationInverse.getter(float32x2_t a1)
{
  return vsub_f32(0, a1);
}

__n128 protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD3<A>@<Q0>(float32x2_t *a1@<X0>, __n128 *a2@<X8>)
{
  float32x2_t *v2;
  __n128 result;

  result.n128_u64[0] = (unint64_t)vadd_f32(*a1, *v2);
  result.n128_f32[2] = a1[1].f32[0] + v2[1].f32[0];
  result.n128_u32[3] = 0;
  *a2 = result;
  return result;
}

double SIMD3<>.__rk_combineForAnimation(with:)(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(a1, a2).u64[0];
  return result;
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD3<A>(float32x2_t *a1@<X0>, _OWORD *a2@<X8>)
{
  float32x2_t *v2;
  __int128 v4;

  *(float32x2_t *)&v4 = specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2);
  *a2 = v4;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD3<A>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  float32x4_t *v3;
  float32x4_t v5;
  __int128 v6;

  *(float *)&a3 = a3;
  v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0);
  v5.i32[3] = 0;
  *(double *)&v6 = simd_mix(*v3, *a1, v5);
  *a2 = v6;
}

double SIMD3<>.__rk_animationInterpolation(towards:t:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float v3;
  double result;

  v3 = a2;
  *(_QWORD *)&result = vmlaq_n_f32(a3, vsubq_f32(a1, a3), v3).u64[0];
  return result;
}

double SIMD4<>.__rk_animationIdentity.getter()
{
  return 0.0;
}

void protocol witness for AnimatableData.__rk_animationInverse.getter in conformance <> SIMD4<A>(_OWORD *a1@<X8>)
{
  float32x4_t *v1;
  __int128 v3;

  *(double *)&v3 = SIMD4<>.__rk_animationInverse.getter(*v1);
  *a1 = v3;
}

double SIMD4<>.__rk_animationInverse.getter(float32x4_t a1)
{
  double result;

  *(_QWORD *)&result = vsubq_f32((float32x4_t)0, a1).u64[0];
  return result;
}

float32x4_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance <> SIMD4<A>@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t *v2;
  float32x4_t result;

  result = vaddq_f32(*a1, *v2);
  *a2 = result;
  return result;
}

double SIMD4<>.__rk_combineForAnimation(with:)(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(a1, a2).u64[0];
  return result;
}

float32x4_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance <> SIMD4<A>@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t *v2;
  float32x4_t v5;
  float32x4_t result;

  *(double *)v5.i64 = SIMD4<>.__rk_animationInverse.getter(*v2);
  result = vaddq_f32(*a1, v5);
  *a2 = result;
  return result;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance <> SIMD4<A>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  float32x4_t *v3;
  __int128 v5;

  *(float *)&a3 = a3;
  *(double *)&v5 = simd_mix(*v3, *a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 0));
  *a2 = v5;
}

double SIMD4<>.__rk_animationInterpolation(towards:t:)(float32x4_t a1, double a2, float32x4_t a3)
{
  float v3;
  double result;

  v3 = a2;
  *(_QWORD *)&result = vmlaq_n_f32(a3, vsubq_f32(a1, a3), v3).u64[0];
  return result;
}

double protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance simd_quatf@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (one-time initialization token for identity != -1)
    swift_once();
  result = *(double *)&static simd_quatf.identity;
  *a1 = static simd_quatf.identity;
  return result;
}

double simd_quatf.__rk_animationIdentity.getter()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static simd_quatf.identity;
}

void protocol witness for AnimatableData.__rk_animationInverse.getter in conformance simd_quatf(_OWORD *a1@<X8>)
{
  float32x4_t *v1;
  __int128 v3;

  *(double *)&v3 = simd_inverse(*v1);
  *a1 = v3;
}

double simd_quatf.__rk_animationInverse.getter(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  float32x2_t v3;
  float32x2_t v4;
  double result;

  v1 = vmulq_f32(a1, (float32x4_t)xmmword_21BE516F0);
  v2 = (int8x16_t)vmulq_f32(a1, a1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  v3 = vrecpe_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrecps_f32((float32x2_t)v2.u32[0], v3));
  *(_QWORD *)&result = vmulq_n_f32(v1, vmul_f32(v4, vrecps_f32((float32x2_t)v2.u32[0], v4)).f32[0]).u64[0];
  return result;
}

void protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance simd_quatf(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  float32x4_t *v2;
  __int128 v4;

  *(double *)&v4 = simd_mul(*v2, *a1);
  *a2 = v4;
}

void protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance simd_quatf(simd_quatf *a1@<X0>, _OWORD *a2@<X8>)
{
  float32x4_t *v2;
  float32x4_t v4;
  __int128 v5;
  simd_quatf v6;

  v6 = *a1;
  *(double *)v4.i64 = simd_inverse(*v2);
  *(double *)&v5 = simd_mul(v4, (float32x4_t)v6);
  *a2 = v5;
}

void protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance simd_quatf(float32x4_t *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  float32x4_t *v3;
  float v5;
  __int128 v6;

  v5 = a3;
  simd_slerp(*v3, *a1, v5);
  *a2 = v6;
}

void __swiftcall simd_quatf.__rk_animationInterpolation(towards:t:)(simd_quatf *__return_ptr retstr, simd_quatf *towards, Swift::Double t)
{
  double v3;
  float32x4_t v4;
  float32x4_t v5;
  float v6;

  v5 = v4;
  v6 = v3;
  simd_slerp(v5, *(float32x4_t *)&t, v6);
}

double protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance Transform@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  if (one-time initialization token for identity != -1)
    swift_once();
  result = *(double *)&static Transform.identity;
  v3 = xmmword_2551B1050;
  v4 = xmmword_2551B1060;
  *a1 = static Transform.identity;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

double Transform.__rk_animationIdentity.getter()
{
  if (one-time initialization token for identity != -1)
    swift_once();
  return *(double *)&static Transform.identity;
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = RESRTInverse();
  if (one-time initialization token for identity != -1)
  {
    v7 = v4;
    v8 = v3;
    v6 = v5;
    result = swift_once();
    v5 = v6;
    v4 = v7;
    v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__n128 Transform.__rk_animationInverse.getter()
{
  __n128 result;
  __n128 v1;

  RESRTInverse();
  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

void protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance Transform(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v4 = specialized static Transform.* infix(_:_:)(*(float32x4_t *)v2, *(double *)(v2 + 16), *(double *)(v2 + 32), *a1);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
}

double Transform.__rk_combineForAnimation(with:)(float32x4_t a1, double a2, double a3, float32x4_t a4, double a5, double a6)
{
  return specialized static Transform.* infix(_:_:)(a4, a5, a6, a1);
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance Transform@<X0>(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  simd_float4 v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  float32x4_t v16;
  __int128 v17;
  float32x4_t v18;
  __int128 v19;
  float32x4_t v20;
  __int128 v21;
  simd_float4x4 v22;
  simd_float4x4 v23;
  simd_float4x4 v24;
  simd_float4x4 v25;

  v18 = a1[1];
  v20 = *a1;
  v16 = a1[2];
  *(double *)v22.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)(v2 + 32), *(float32x4_t *)(v2 + 16), COERCE_FLOAT(*(_OWORD *)v2));
  v23 = simd_inverse(v22);
  v14 = v23.columns[1];
  v15 = v23.columns[0];
  v12 = v23.columns[3];
  v13 = v23.columns[2];
  *(double *)v4.i64 = specialized simd_float4x4.init(translation:rotation:scale:)(*(double *)v16.i64, v18, v20.f32[0]);
  v25.columns[0] = v4;
  v25.columns[1] = v5;
  v25.columns[2] = v6;
  v25.columns[3] = v7;
  v24.columns[1] = v14;
  v24.columns[0] = v15;
  v24.columns[3] = v12;
  v24.columns[2] = v13;
  simd_mul(v24, v25);
  result = REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v19 = v10;
    v21 = v9;
    v17 = v11;
    result = swift_once();
    v11 = v17;
    v10 = v19;
    v9 = v21;
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  return result;
}

__n128 Transform.__rk_invertAndCombineForAnimation(with:)(float a1, float32x4_t a2, double a3, float a4, float32x4_t a5, double a6)
{
  __n128 result;
  __n128 v10;
  simd_float4x4 v11;

  *(double *)v11.columns[0].i64 = specialized simd_float4x4.init(translation:rotation:scale:)(a6, a5, a4);
  __invert_f4(v11);
  specialized simd_float4x4.init(translation:rotation:scale:)(a3, a2, a1);
  REMakeSRTFromMatrix();
  if (one-time initialization token for identity != -1)
  {
    v10 = result;
    swift_once();
    return v10;
  }
  return result;
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance Transform@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  result = RESRTLerp();
  if (one-time initialization token for identity != -1)
  {
    v7 = v4;
    v8 = v3;
    v6 = v5;
    result = swift_once();
    v5 = v6;
    v4 = v7;
    v3 = v8;
  }
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

__n128 Transform.__rk_animationInterpolation(towards:t:)()
{
  __n128 result;
  __n128 v1;

  RESRTLerp();
  if (one-time initialization token for identity != -1)
  {
    v1 = result;
    swift_once();
    return v1;
  }
  return result;
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.init()()
{
  _QWORD *v0;
  RealityFoundation::JointTransforms result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t JointTransforms.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = v4[2];
    v8 = 6 * v7;
    v9 = (__int128 *)(a1 + 64);
    do
    {
      v10 = *(v9 - 2);
      v11 = *(v9 - 1);
      v12 = *v9;
      v13 = v5[3];
      v14 = v7 + 1;
      if (v7 >= v13 >> 1)
      {
        v19 = *(v9 - 1);
        v20 = *(v9 - 2);
        v18 = *v9;
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v7 + 1, 1, v5);
        v12 = v18;
        v11 = v19;
        v10 = v20;
        v5 = v16;
      }
      v5[2] = v14;
      v15 = &v5[v8];
      v15[2] = v10;
      v15[3] = v11;
      v15[4] = v12;
      v8 += 6;
      v9 += 3;
      v7 = v14;
      --v6;
    }
    while (v6);
  }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t specialized JointTransforms.init<A>(_:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (__int128 *)(a1 + 64);
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v11 = *(v4 - 1);
      v12 = *(v4 - 2);
      v10 = *v4;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v7 = v5[2];
      v6 = v5[3];
      if (v7 >= v6 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v6 > 1), v7 + 1, 1, v5);
      v5[2] = v7 + 1;
      v8 = &v5[6 * v7];
      v8[2] = v12;
      v8[3] = v11;
      v8[4] = v10;
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t JointTransforms.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  __n128 v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v28 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v24 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v11 = (char *)&v23 - v10;
  v25 = v5;
  v26 = a1;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a2, v9);
  dispatch thunk of Sequence.makeIterator()();
  v27 = a2;
  swift_getAssociatedConformanceWitness();
  v29 = v11;
  v30 = AssociatedTypeWitness;
  dispatch thunk of IteratorProtocol.next()();
  if ((v37 & 1) != 0)
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v14 = v31;
    v15 = v32;
    v17 = v33;
    v16 = v34;
    v18 = v35;
    v19 = v36;
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      v21 = v12[2];
      v20 = v12[3];
      if (v21 >= v20 >> 1)
        v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v12);
      v12[2] = v21 + 1;
      v22 = &v12[6 * v21];
      v22[4] = v14;
      v22[5] = v15;
      v22[6] = v17;
      v22[7] = v16;
      v22[8] = v18;
      v22[9] = v19;
      dispatch thunk of IteratorProtocol.next()();
      v14 = v31;
      v15 = v32;
      v17 = v33;
      v16 = v34;
      v18 = v35;
      v19 = v36;
    }
    while ((v37 & 1) == 0);
  }
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v29, v30);
  *v28 = v12;
  return result;
}

__n128 JointTransforms.subscript.getter(unint64_t a1, __n128 result)
{
  uint64_t v2;
  __n128 v3;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(*(_QWORD *)v2 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = *(__n128 *)(*(_QWORD *)v2 + 48 * a1 + 32);
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    v3 = result;
    swift_once();
    return v3;
  }
  return result;
}

uint64_t key path getter for JointTransforms.subscript(_:) : JointTransforms@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>, __n128 a5@<Q1>, __n128 a6@<Q2>)
{
  unint64_t v7;
  __n128 *v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;

  v7 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v7 >= *(_QWORD *)(*(_QWORD *)result + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v8 = (__n128 *)(*(_QWORD *)result + 48 * v7);
  a4 = v8[2];
  a5 = v8[3];
  a6 = v8[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    v10 = a5;
    v11 = a4;
    v9 = a6;
    result = swift_once();
    a6 = v9;
    a5 = v10;
    a4 = v11;
  }
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a6;
  return result;
}

uint64_t key path setter for JointTransforms.subscript(_:) : JointTransforms(__int128 *a1, _QWORD **a2, unint64_t *a3)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *a3;
  v9 = a1[1];
  v10 = *a1;
  v8 = a1[2];
  v5 = *a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = (_QWORD *)result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < v5[2])
  {
    v7 = &v5[6 * v4];
    v7[2] = v10;
    v7[3] = v9;
    v7[4] = v8;
    *a2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t JointTransforms.subscript.setter(unint64_t a1, __n128 a2, __n128 a3, __n128 a4)
{
  _QWORD **v4;
  _QWORD *v6;
  uint64_t result;
  __n128 *v8;

  v6 = *v4;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = (_QWORD *)result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v6[2] > a1)
  {
    v8 = (__n128 *)&v6[6 * a1];
    v8[2] = a2;
    v8[3] = a3;
    v8[4] = a4;
    *v4 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

void (*JointTransforms.subscript.modify(_QWORD *a1, unint64_t a2))(__int128 **a1, char a2)
{
  _OWORD *v2;
  uint64_t v3;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = malloc(0x40uLL);
  *a1 = v6;
  v6[6] = a2;
  v6[7] = v3;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(_QWORD *)(*(_QWORD *)v3 + 16) <= a2)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v2 = v6;
  v10 = (_OWORD *)(*(_QWORD *)v3 + 48 * a2);
  v7 = v10[2];
  v8 = v10[3];
  v9 = v10[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    v13 = v8;
    v14 = v7;
    v12 = v9;
    swift_once();
    v9 = v12;
    v8 = v13;
    v7 = v14;
  }
  *v2 = v7;
  v2[1] = v8;
  v2[2] = v9;
  return JointTransforms.subscript.modify;
}

void JointTransforms.subscript.modify(__int128 **a1, char a2)
{
  __int128 *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = *a1;
  v9 = **a1;
  v10 = (*a1)[1];
  v11 = (*a1)[2];
  v4 = (_QWORD *)**((_QWORD **)*a1 + 7);
  LOBYTE(v5) = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
      v4 = v5;
    }
    v6 = *((_QWORD *)v3 + 6);
    if (v4[2] > v6)
      goto LABEL_9;
    __break(1u);
  }
  if ((v5 & 1) == 0)
    v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v6 = *((_QWORD *)v3 + 6);
  if (v4[2] > v6)
  {
LABEL_9:
    v7 = (_QWORD *)*((_QWORD *)v3 + 7);
    v8 = &v4[6 * v6];
    v8[2] = v9;
    v8[3] = v10;
    v8[4] = v11;
    *v7 = v4;
    free(v3);
    return;
  }
  __break(1u);
}

uint64_t JointTransforms.startIndex.getter()
{
  return 0;
}

uint64_t JointTransforms.endIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

Swift::Int __swiftcall JointTransforms.index(after:)(Swift::Int after)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFADD__(after, 1);
  result = after + 1;
  if (v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall JointTransforms.index(before:)(Swift::Int before)
{
  BOOL v1;
  Swift::Int result;

  v1 = __OFSUB__(before, 1);
  result = before - 1;
  if (v1)
    __break(1u);
  return result;
}

uint64_t static JointTransforms.== infix(_:_:)(uint64_t *a1, __n128 **a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;

  v2 = 0;
  v3 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(result + 16);
  v6 = result + 32;
  while (1)
  {
    v7 = 0.0;
    v8 = 0.0;
    v9 = *(_QWORD *)(a2 + 16);
    if (v3 == v4)
      goto LABEL_5;
    if (v3 >= v4)
      break;
    v9 = v3 + 1;
    v8 = *(float *)(a2 + 32 + 4 * v3);
LABEL_5:
    v10 = v5;
    result = v2 == v5;
    if (v2 != v5)
    {
      if (v2 >= v5)
        goto LABEL_13;
      v10 = v2 + 1;
      v7 = *(float *)(v6 + 4 * v2);
    }
    if (v3 != v4)
    {
      result = 0;
      if (v2 != v5)
      {
        v2 = v10;
        v3 = v9;
        if (v8 == v7)
          continue;
      }
    }
    return result;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.elementsEqual<A>(_:)(__n128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;

  v3 = a1[1].n128_i64[0];
  v26 = a2 + 32;
  v27 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v5 = 0;
  v6 = a1 + 4;
  while (1)
  {
    v7 = v27;
    if (v5 != v27)
      break;
    if (!v3)
    {
      v22 = 1;
      goto LABEL_19;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = v27;
LABEL_9:
    v16 = v6[-2];
    v17 = v6[-1];
    v18 = *v6;
    if (one-time initialization token for identity == -1)
    {
      if (v5 == v7)
        goto LABEL_17;
    }
    else
    {
      v24 = v6[-1];
      v25 = v6[-2];
      v23 = *v6;
      swift_once();
      v18 = v23;
      v17 = v24;
      v16 = v25;
      if (v5 == v27)
      {
LABEL_17:
        v22 = 0;
LABEL_19:
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    v19.n128_u64[0] = v13;
    v19.n128_u64[1] = v12;
    v20.n128_u64[0] = v11;
    v20.n128_u64[1] = v10;
    v21.n128_u64[0] = v9;
    v21.n128_u64[1] = v8;
    result = specialized static Transform.== infix(_:_:)(v19, v20, v21, v16, v17, v18);
    --v3;
    v6 += 3;
    v5 = v14;
    if ((result & 1) == 0)
      goto LABEL_16;
  }
  if (v5 < v27)
  {
    v15 = (unint64_t *)(v26 + 48 * v5);
    v13 = *v15;
    v12 = v15[1];
    v11 = v15[2];
    v10 = v15[3];
    v9 = v15[4];
    v8 = v15[5];
    if (one-time initialization token for identity == -1)
    {
      if (!v3)
        goto LABEL_16;
    }
    else
    {
      swift_once();
      v7 = v27;
      if (!v3)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        v22 = 0;
LABEL_20:
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    v14 = v5 + 1;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = specialized BidirectionalCollection.index(_:offsetBy:)(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance JointTransforms(uint64_t *a1, uint64_t *a2)
{
  return specialized BidirectionalCollection.distance(from:to:)(*a1, *a2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(__int128 *a1, unint64_t *a2)
{
  _QWORD **v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = a1[1];
  v9 = *a1;
  v7 = a1[2];
  v3 = *a2;
  v4 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v3 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  v4 = (_QWORD *)result;
  if ((v3 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v3 < v4[2])
  {
    v6 = &v4[6 * v3];
    v6[2] = v9;
    v6[3] = v8;
    v6[4] = v7;
    *v2 = v4;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance JointTransforms(_QWORD *a1, unint64_t *a2))()
{
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = JointTransforms.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance JointTransforms(void (***a1)(uint64_t **a1, char a2), uint64_t *a2))()
{
  void (**v4)(uint64_t **, char);

  v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

int64_t protocol witness for MutableCollection.partition(by:) in conformance JointTransforms@<X0>(uint64_t (*a1)(__int128 *)@<X0>, int64_t *a2@<X8>)
{
  uint64_t v2;
  int64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance JointTransforms(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JointTransforms(uint64_t *a1, __n128 **a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t protocol witness for AnimatableData.__rk_animationIdentity.getter in conformance JointTransforms@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (one-time initialization token for identity != -1)
    swift_once();
  v4 = specialized Array.init(repeating:count:)(*(_QWORD *)(v3 + 16), (__n128)static Transform.identity, (__n128)xmmword_2551B1050, (__n128)xmmword_2551B1060);
  return specialized JointTransforms.init<A>(_:)(v4, a1);
}

uint64_t JointTransforms.__rk_animationIdentity.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  if (one-time initialization token for identity != -1)
    swift_once();
  v4 = specialized Array.init(repeating:count:)(*(_QWORD *)(v3 + 16), (__n128)static Transform.identity, (__n128)xmmword_2551B1050, (__n128)xmmword_2551B1060);
  return specialized JointTransforms.init<A>(_:)(v4, a1);
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance JointTransforms@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation15JointTransformsV_0D3Kit9TransformVs5NeverOTB504_s17d12Foundation15fg35V21__rk_animationInverseACvg0A3Kit9I8VAGXEfU_Tf1cn_n(*v1);
  return specialized JointTransforms.init<A>(_:)(v3, a1);
}

uint64_t JointTransforms.__rk_animationInverse.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  _QWORD *v20;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (!v4)
    return specialized JointTransforms.init<A>(_:)((uint64_t)v5, a1);
  v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v5 = &v20;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  if ((unint64_t)(v4 - 1) >= *(_QWORD *)(v3 + 16))
  {
    __break(1u);
  }
  else
  {
    v5 = v20;
    if (one-time initialization token for identity == -1)
      goto LABEL_4;
  }
  swift_once();
LABEL_4:
  v6 = v3 + 64;
  do
  {
    RESRTInverse();
    v10 = v7;
    v20 = v5;
    v12 = v5[2];
    v11 = v5[3];
    if (v12 >= v11 >> 1)
    {
      v16 = v9;
      v17 = v7;
      v15 = v8;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      v8 = v15;
      v9 = v16;
      v10 = v17;
      v5 = v20;
    }
    HIDWORD(v10) = v18;
    HIDWORD(v9) = v19;
    v5[2] = v12 + 1;
    v13 = &v5[6 * v12];
    v13[2] = v10;
    v13[3] = v8;
    v13[4] = v9;
    v6 += 48;
    --v4;
  }
  while (v4);
  return specialized JointTransforms.init<A>(_:)((uint64_t)v5, a1);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_combineForAnimation(with:)(RealityFoundation::JointTransforms with)
{
  uint64_t *v1;

  return (RealityFoundation::JointTransforms)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreTransforms._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI75V24__rk_combineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, v1);
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_invertAndCombineForAnimation(with:)(RealityFoundation::JointTransforms with)
{
  uint64_t *v1;

  return (RealityFoundation::JointTransforms)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreTransforms._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_So5RESRTas5NeverOTB504_s17f12Foundation15hI84V33__rk_invertAndCombineForAnimation4withA2C_tFSo5RESRTa0A3Kit9TransformV_AJt_tXEfU_Tf1cn_n, v1);
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance JointTransforms@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(v5, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return specialized JointTransforms.init<A>(_:)(v6, a2);
}

RealityFoundation::JointTransforms __swiftcall JointTransforms.__rk_animationInterpolation(towards:t:)(RealityFoundation::JointTransforms towards, Swift::Double t)
{
  _QWORD *v2;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = v2;
  v5 = *(_QWORD *)towards.coreTransforms._rawValue;
  v6 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation15JointTransformsVAJG_0F3Kit9TransformVs5NeverOTB504_s17f12Foundation15hi55V27__rk_animationInterpolation7towards1tA2C_SdtF0A3Kit9K14VAI_AIt_tXEfU_SfTf1cn_n(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (RealityFoundation::JointTransforms)specialized JointTransforms.init<A>(_:)(v7, v4);
}

void (*protocol witness for Collection.subscript.read in conformance JointTransforms(_QWORD *a1, unint64_t *a2))(void **a1)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  _OWORD *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v10 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v10 >= *(_QWORD *)(*(_QWORD *)v3 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v2 = v6;
  v11 = (_OWORD *)(*(_QWORD *)v3 + 48 * v10);
  v7 = v11[2];
  v8 = v11[3];
  v9 = v11[4];
  if (one-time initialization token for identity != -1)
  {
LABEL_7:
    v14 = v8;
    v15 = v7;
    v13 = v9;
    swift_once();
    v9 = v13;
    v8 = v14;
    v7 = v15;
  }
  *v2 = v7;
  v2[1] = v8;
  v2[2] = v9;
  return LowLevelMesh.PartsCollection.subscript.read;
}

uint64_t protocol witness for Collection.indices.getter in conformance JointTransforms@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  a1[1] = 0;
  a1[2] = *(_QWORD *)(v2 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance JointTransforms()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance JointTransforms(_QWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance JointTransforms.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance JointTransforms.CodingKeys()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance JointTransforms.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance JointTransforms.CodingKeys@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance JointTransforms.CodingKeys, *a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance JointTransforms.CodingKeys(char *a1@<X8>)
{
  strcpy(a1, "coreTransforms");
  a1[15] = -18;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance JointTransforms.CodingKeys()
{
  return 0x6E61725465726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance JointTransforms.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for CodingKey.init(stringValue:) in conformance JointTransforms.CodingKeys, v3);
  result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance JointTransforms.CodingKeys()
{
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance JointTransforms.CodingKeys()
{
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t JointTransforms.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  _QWORD *v10;
  unint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<JointTransforms.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    v26 = v6;
    v17 = a2;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v9 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
    if ((v9 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v24, v25);
        lazy protocol witness table accessor for type Transform and conformance Transform();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        v19 = v22;
        v20 = v21;
        v18 = v23;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
        v13 = v10[2];
        v12 = v10[3];
        if (v13 >= v12 >> 1)
          v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v10);
        v10[2] = v13 + 1;
        v14 = &v10[6 * v13];
        v15 = v19;
        v14[2] = v20;
        v14[3] = v15;
        v14[4] = v18;
        __swift_project_boxed_opaque_existential_1(v24, v25);
      }
      while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0);
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    *v17 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t JointTransforms.encode(to:)(_QWORD *a1)
{
  ValueMetadata **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  ValueMetadata *v11;
  uint64_t Kind;
  uint64_t v13;
  uint64_t v14;
  ValueMetadata *v15;
  uint64_t v16;
  ValueMetadata v17;
  ValueMetadata v18;
  _QWORD v20[2];
  char *v21;
  uint64_t v22;
  ValueMetadata v23;
  ValueMetadata v24;
  ValueMetadata v25;
  _BYTE v26[24];
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<JointTransforms.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1;
  v11 = *v1;
  __swift_project_boxed_opaque_existential_1(v10, v9);
  lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  Kind = v11[1].Kind;
  if (Kind)
  {
    v21 = v8;
    v22 = v6;
    v28 = v5;
    v13 = one-time initialization token for identity;
    swift_bridgeObjectRetain();
    if (v13 != -1)
LABEL_12:
      swift_once();
    v14 = 0;
    v20[1] = v11;
    v15 = v11 + 4;
    v11 = &type metadata for Transform;
    while (1)
    {
      v16 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
      v18 = v15[-1];
      v17 = *v15;
      v23 = v15[-2];
      v24 = v18;
      v25 = v17;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v26, v27);
      lazy protocol witness table accessor for type Transform and conformance Transform();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v3)
        break;
      v15 += 3;
      ++v14;
      if (v16 == Kind)
      {
        swift_bridgeObjectRelease();
        v5 = v28;
        v8 = v21;
        v6 = v22;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v28);
  }
  else
  {
LABEL_8:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t protocol witness for Decodable.init(from:) in conformance JointTransforms@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return JointTransforms.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance JointTransforms(_QWORD *a1)
{
  return JointTransforms.encode(to:)(a1);
}

uint64_t BlendShapeWeights.init(arrayLiteral:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  char *v4;
  char *v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t result;

  v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, MEMORY[0x24BEE4AF8]);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (int *)(a1 + 32);
    v8 = *((_QWORD *)v4 + 2);
    do
    {
      v9 = *v7;
      v10 = *((_QWORD *)v5 + 3);
      if (v8 >= v10 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v8 + 1, 1, v5);
      *((_QWORD *)v5 + 2) = v8 + 1;
      *(_DWORD *)&v5[4 * v8 + 32] = v9;
      ++v7;
      ++v8;
      --v6;
    }
    while (v6);
  }
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t BlendShapeWeights.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t result;
  int v15;
  unint64_t v16;
  unint64_t v17;
  char **v18;
  int v19;
  char v20;

  v18 = a3;
  v5 = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v10 = MEMORY[0x24BDAC7A8](AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))(v7, a1, a2, v10);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v20 & 1) != 0)
  {
    v13 = (char *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v15 = v19;
    v13 = (char *)MEMORY[0x24BEE4AF8];
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v17 = *((_QWORD *)v13 + 2);
      v16 = *((_QWORD *)v13 + 3);
      if (v17 >= v16 >> 1)
        v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v17 + 1;
      *(_DWORD *)&v13[4 * v17 + 32] = v15;
      dispatch thunk of IteratorProtocol.next()();
      v15 = v19;
    }
    while ((v20 & 1) == 0);
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  *v18 = v13;
  return result;
}

unint64_t BlendShapeWeights.subscript.getter(unint64_t result)
{
  uint64_t v1;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (*(_QWORD *)(*(_QWORD *)v1 + 16) <= result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t key path setter for BlendShapeWeights.subscript(_:) : BlendShapeWeights(int *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t result;

  v4 = *a3;
  v5 = *a1;
  v6 = *a2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  v6 = result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < *(_QWORD *)(v6 + 16))
  {
    *(_DWORD *)(v6 + 4 * v4 + 32) = v5;
    *a2 = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.subscript.setter(unint64_t a1, float a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t result;

  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(_QWORD *)(v5 + 16) > a1)
  {
    *(float *)(v5 + 4 * a1 + 32) = a2;
    *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*BlendShapeWeights.subscript.modify(uint64_t (*result)(uint64_t *a1, char a2), unint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;

  *(_QWORD *)result = a2;
  *((_QWORD *)result + 1) = v2;
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(*(_QWORD *)v2 + 16) > a2)
  {
    *((_DWORD *)result + 4) = *(_DWORD *)(*(_QWORD *)v2 + 4 * a2 + 32);
    return BlendShapeWeights.subscript.modify;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.subscript.modify(uint64_t *a1, char a2)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *((_DWORD *)a1 + 4);
  v5 = (uint64_t *)a1[1];
  v6 = *v5;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((a2 & 1) != 0)
  {
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      v6 = result;
    }
    v8 = *a1;
    if (*(_QWORD *)(v6 + 16) > (unint64_t)*a1)
      goto LABEL_9;
    __break(1u);
  }
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    v6 = result;
  }
  v8 = *a1;
  if (*(_QWORD *)(v6 + 16) > (unint64_t)*a1)
  {
LABEL_9:
    *(_DWORD *)(v6 + 4 * v8 + 32) = v4;
    *v5 = v6;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t BlendShapeWeights.startIndex.getter()
{
  return 0;
}

uint64_t static BlendShapeWeights.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance BlendShapeWeights.CodingKeys()
{
  return 0x6769655765726F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance BlendShapeWeights.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6769655765726F63 && a2 == 0xEB00000000737468)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance BlendShapeWeights.CodingKeys()
{
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance BlendShapeWeights.CodingKeys()
{
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BlendShapeWeights(int *a1, unint64_t *a2)
{
  uint64_t *v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *a1;
  v4 = *a2;
  v5 = *v2;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) != 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  v5 = result;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if (v4 < *(_QWORD *)(v5 + 16))
  {
    *(_DWORD *)(v5 + 4 * v4 + 32) = v3;
    *v2 = v5;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BlendShapeWeights(uint64_t (**a1)(uint64_t *a1, char a2), unint64_t *a2))()
{
  uint64_t (*v4)(uint64_t *, char);

  v4 = (uint64_t (*)(uint64_t *, char))malloc(0x28uLL);
  *a1 = v4;
  *((_QWORD *)v4 + 4) = BlendShapeWeights.subscript.modify(v4, *a2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance BlendShapeWeights(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(a1, a2, a3, a4, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized _writeBackMutableSlice<A, B>(_:bounds:slice:));
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance JointTransforms(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v5;

  a5(v5, *a2, a2[1], *a1, a1[1], a1[2]);
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for MutableCollection.subscript.modify in conformance BlendShapeWeights(void (***a1)(uint64_t **a1, char a2), uint64_t *a2))()
{
  void (**v4)(uint64_t **, char);

  v4 = (void (**)(uint64_t **, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance BlendShapeWeights@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance BlendShapeWeights(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BlendShapeWeights(uint64_t *a1, uint64_t *a2)
{
  return specialized Sequence<>.elementsEqual<A>(_:)(*a2, *a1);
}

void BlendShapeWeights.__rk_animationIdentity.getter(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (v3)
  {
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v5 = v4;
    *(_QWORD *)(v4 + 16) = v3;
    *(_DWORD *)(v4 + 32) = 0;
    if (v3 != 1)
      bzero((void *)(v4 + 36), 4 * v3 - 4);
  }
  else
  {
    v5 = MEMORY[0x24BEE4AF8];
  }
  *a1 = v5;
}

uint64_t protocol witness for AnimatableData.__rk_animationInverse.getter in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF17RealityFoundation17BlendShapeWeightsV_Sfs5NeverOTB504_s17d12Foundation17fgH36V21__rk_animationInverseACvgS2fXEfU_Tf1cn_n(*v1);
  *a1 = result;
  return result;
}

void BlendShapeWeights.__rk_animationInverse.getter(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  float *v6;
  unint64_t v7;
  float v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (!v4)
  {
LABEL_7:
    *a1 = v5;
    return;
  }
  v10 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
  if ((unint64_t)(v4 - 1) < *(_QWORD *)(v3 + 16))
  {
    v5 = v10;
    v6 = (float *)(v3 + 32);
    v7 = *(_QWORD *)(v10 + 16);
    do
    {
      v8 = *v6;
      v11 = v5;
      v9 = *(_QWORD *)(v5 + 24);
      if (v7 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v7 + 1, 1);
        v5 = v11;
      }
      *(_QWORD *)(v5 + 16) = v7 + 1;
      *(float *)(v5 + 4 * v7 + 32) = -v8;
      ++v6;
      ++v7;
      --v4;
    }
    while (v4);
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n, a2);
}

uint64_t protocol witness for AnimatableData.__rk_combineForAnimation(with:) in conformance JointTransforms@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = a2(v7, v6, &v10);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

RealityFoundation::BlendShapeWeights __swiftcall BlendShapeWeights.__rk_combineForAnimation(with:)(RealityFoundation::BlendShapeWeights with)
{
  uint64_t *v1;

  return (RealityFoundation::BlendShapeWeights)JointTransforms.__rk_combineForAnimation(with:)((uint64_t *)with.coreWeights._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t *))_sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ52V24__rk_combineForAnimation4withA2C_tFS2f_Sft_tXEfU_Tf1cn_n, v1);
}

uint64_t JointTransforms.__rk_combineForAnimation(with:)@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  v7 = *v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = a2(v7, v6, &v10);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

uint64_t protocol witness for AnimatableData.__rk_invertAndCombineForAnimation(with:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return specialized AnimatableData.__rk_invertAndCombineForAnimation(with:)(*a1, *v2, a2);
}

uint64_t protocol witness for AnimatableData.__rk_animationInterpolation(towards:t:) in conformance BlendShapeWeights@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t result;

  v5 = *a1;
  v6 = *v3;
  v7 = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(v6, v5, v7);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v8;
  return result;
}

RealityFoundation::BlendShapeWeights __swiftcall BlendShapeWeights.__rk_animationInterpolation(towards:t:)(RealityFoundation::BlendShapeWeights towards, Swift::Double t)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  RealityFoundation::BlendShapeWeights result;

  v4 = v2;
  v5 = *(_QWORD *)towards.coreWeights._rawValue;
  v6 = *v3;
  v7 = t;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVy17RealityFoundation17BlendShapeWeightsVAJG_Sfs5NeverOTB504_s17f12Foundation17hiJ62V27__rk_animationInterpolation7towards1tA2C_SdtFS2f_Sft_tXEfU_SfTf1cn_n(v6, v5, v7);
  swift_bridgeObjectRelease();
  result.coreWeights._rawValue = (void *)swift_bridgeObjectRelease();
  *v4 = v8;
  return result;
}

_DWORD *protocol witness for Collection.subscript.read in conformance BlendShapeWeights(_DWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)v2 + 16))
  {
    *result = *(_DWORD *)(*(_QWORD *)v2 + 4 * v3 + 32);
    return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance JointTransforms@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  if (*result < 0 || (v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    a2[1] = v4;
    a2[2] = result;
    *a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BlendShapeWeights()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

_QWORD *protocol witness for Sequence._copyContents(initializing:) in conformance BlendShapeWeights(_QWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t *v3;

  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t BlendShapeWeights.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<BlendShapeWeights.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
  lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A], MEMORY[0x24BEE14F8], MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t BlendShapeWeights.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<BlendShapeWeights.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
    lazy protocol witness table accessor for type [Float] and conformance <A> [A](&lazy protocol witness table cache variable for type [Float] and conformance <A> [A], MEMORY[0x24BEE1520], MEMORY[0x24BEE12D0]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance BlendShapeWeights@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return BlendShapeWeights.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance BlendShapeWeights(_QWORD *a1)
{
  return BlendShapeWeights.encode(to:)(a1);
}

_QWORD *TimelineDefinition.resource.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t TimelineAsset;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD **)(v0 + 16);
  if (v1)
  {
    v2 = specialized static __ServiceLocator.shared.getter() + 120;
    swift_beginAccess();
    outlined init with copy of __REAssetService(v2, (uint64_t)v11);
    v3 = v12;
    v4 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    TimelineAsset = RETimelineDefinitionCreateTimelineAsset();
    if (TimelineAsset)
    {
      v6 = TimelineAsset;
      RETimelineDefinitionGetName();
      v7 = String.init(cString:)();
      v9 = v8;
      type metadata accessor for AnimationResource();
      v1 = (_QWORD *)swift_allocObject();
      v1[2] = v6;
      v1[3] = v7;
      v1[4] = v9;
      RERetain();
      REAssetSetSwiftObject();
      RERelease();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

Swift::Void __swiftcall TimelineClipProperties.writeProperties(_:)(Swift::OpaquePointer a1)
{
  __int128 *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t *ClipStart;
  uint64_t v8;
  uint64_t *ClipEnd;
  uint64_t v10;
  uint64_t *ClipDuration;
  uint64_t v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = v1[7];
  v30 = v1[6];
  v31 = v2;
  v32 = v1[8];
  v33 = *((_QWORD *)v1 + 18);
  v3 = v1[3];
  v26 = v1[2];
  v27 = v3;
  v4 = v1[5];
  v28 = v1[4];
  v29 = v4;
  v5 = v1[1];
  v24 = *v1;
  v25 = v5;
  v6 = v33;
  v14 = v30;
  v15 = v31;
  LOBYTE(v16) = v32;
  *(_QWORD *)((char *)&v16 + 4) = *(_QWORD *)((char *)&v32 + 4);
  *(_QWORD *)&v17 = v33;
  TimelineBaseProperties.writeProperties(_:)(a1);
  if ((BYTE9(v24) & 1) == 0)
  {
    if ((BYTE8(v24) & 1) != 0)
      goto LABEL_8;
    v8 = v24;
LABEL_7:
    *(_QWORD *)&v14 = v8;
    RETimelineDefinitionSetClipStart();
LABEL_8:
    if ((BYTE9(v25) & 1) != 0)
      goto LABEL_9;
LABEL_13:
    if ((BYTE8(v25) & 1) != 0)
      goto LABEL_16;
    v10 = v25;
LABEL_15:
    *(_QWORD *)&v14 = v10;
    RETimelineDefinitionSetClipEnd();
LABEL_16:
    if ((BYTE9(v26) & 1) != 0)
      goto LABEL_17;
LABEL_21:
    if ((BYTE8(v26) & 1) != 0)
      goto LABEL_24;
    v12 = v26;
LABEL_23:
    *(_QWORD *)&v14 = v12;
    RETimelineDefinitionSetClipDuration();
LABEL_24:
    if ((BYTE8(v27) & 1) == 0)
      goto LABEL_30;
    goto LABEL_25;
  }
  if (!*(_QWORD *)(v33 + 16))
    goto LABEL_8;
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipStart = (uint64_t *)RETimelineDefinitionGetClipStart();
  if (ClipStart)
  {
    v8 = *ClipStart;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_7;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE9(v25) & 1) == 0)
    goto LABEL_13;
LABEL_9:
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_16;
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipEnd = (uint64_t *)RETimelineDefinitionGetClipEnd();
  if (ClipEnd)
  {
    v10 = *ClipEnd;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_15;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE9(v26) & 1) == 0)
    goto LABEL_21;
LABEL_17:
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_24;
  outlined retain of TimelineClipProperties((uint64_t)&v24);
  ClipDuration = (uint64_t *)RETimelineDefinitionGetClipDuration();
  if (ClipDuration)
  {
    v12 = *ClipDuration;
    outlined release of TimelineClipProperties((uint64_t)&v24);
    goto LABEL_23;
  }
  outlined release of TimelineClipProperties((uint64_t)&v24);
  if ((BYTE8(v27) & 1) == 0)
    goto LABEL_30;
LABEL_25:
  if (*(_QWORD *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2)
      RETimelineDefinitionGetClipOffset();
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
LABEL_30:
  RETimelineDefinitionSetClipOffset();
  if ((BYTE8(v28) & 1) != 0 && *(_QWORD *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2)
      RETimelineDefinitionGetClipDelay();
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
  RETimelineDefinitionSetClipDelay();
  if ((v29 & 1) != 0 && *(_QWORD *)(v6 + 16))
  {
    outlined retain of TimelineClipProperties((uint64_t)&v24);
    if (RETimelineDefinitionGetTimelineType() == 2)
      RETimelineDefinitionGetClipSpeed();
    outlined release of TimelineClipProperties((uint64_t)&v24);
  }
  RETimelineDefinitionSetClipSpeed();
  v20 = v30;
  v21 = v31;
  v22 = v32;
  v23 = v33;
  v16 = v26;
  v17 = v27;
  v18 = v28;
  v19 = v29;
  v14 = v24;
  v15 = v25;
  TimelineClipProperties.repeatMode.getter(&v13);
  RETimelineDefinitionSetClipLoopBehavior();
}

uint64_t closure #1 in TimelineClipProperties.createClip()@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t TimelineClip;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)&v11);
  v5 = *((_QWORD *)&v12 + 1);
  v6 = v13;
  __swift_project_boxed_opaque_existential_1(&v11, *((uint64_t *)&v12 + 1));
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  v7 = *(_OWORD *)(a1 + 112);
  v11 = *(_OWORD *)(a1 + 96);
  v12 = v7;
  v13 = *(_OWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 144);
  if (*((_QWORD *)&v11 + 1) || !*(_QWORD *)(v14 + 16))
  {
    outlined retain of TimelineBaseProperties((uint64_t)&v11);
  }
  else
  {
    outlined retain of TimelineBaseProperties((uint64_t)&v11);
    RETimelineDefinitionGetName();
    String.init(cString:)();
  }
  swift_bridgeObjectRetain();
  outlined release of TimelineBaseProperties((uint64_t)&v11);
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  TimelineClip = RETimelineDefinitionCreateTimelineClip();
  swift_release();
  TimelineClipProperties.writeProperties(_:)((Swift::OpaquePointer)TimelineClip);
  type metadata accessor for TimelineDefinition();
  *(_QWORD *)(swift_initStackObject() + 16) = TimelineClip;
  RERetain();
  v9 = TimelineDefinition.resource.getter();
  swift_setDeallocating();
  RERelease();
  *a2 = v9;
  return RERelease();
}

uint64_t AnimationDefinition.trimmed(start:end:duration:)@<X0>(uint64_t a1@<X0>, char a2@<W3>, char a3@<W5>, uint64_t a4@<X6>, void (**a5)(_QWORD, _QWORD, _QWORD, _QWORD)@<X7>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v10 = a2 & 1;
  v11 = a3 & 1;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  if ((v13 & 1) != 0 && (_DWORD)v10 && (_DWORD)v11)
    return v19(a6, v16, a4);
  v23 = v15;
  v21 = v13 & 1;
  v24 = v21 | v10;
  v22 = v14;
  v19(v18, v16, a4);
  a5[14](a1, v21, a4, a5);
  a5[17](v22, v10, a4, a5);
  if (v24)
    a5[20](v23, v11, a4, a5);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(a6, v18, a4);
}

uint64_t AnimationDefinition.repeated(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4;
  double v8;
  char v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v4, a1);
  v8 = (*(double (**)(uint64_t, uint64_t))(a2 + 272))(a1, a2);
  (*(void (**)(double, _QWORD, uint64_t, uint64_t))(a2 + 160))(v8 * a4, 0, a1, a2);
  v10 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 256))(&v10, a1, a2);
}

uint64_t AnimationDefinition.repeated(count:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  double v8;
  char v10;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a4, v4, a2);
  v8 = (*(double (**)(uint64_t, uint64_t))(a3 + 272))(a2, a3);
  (*(void (**)(double, _QWORD, uint64_t, uint64_t))(a3 + 160))(v8 * (double)a1, 0, a2, a3);
  v10 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a3 + 256))(&v10, a2, a3);
}

uint64_t AnimationDefinition.repeatingForever()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v7;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a3, v3, a1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 160))(0x7FF0000000000000, 0, a1, a2);
  v7 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 256))(&v7, a1, a2);
}

uint64_t protocol witness for AnimationDefinition.blendLayer.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t protocol witness for AnimationDefinition.blendLayer.setter in conformance InvalidAnimationDefinition(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

void protocol witness for AnimationDefinition.fillMode.getter in conformance InvalidAnimationDefinition(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 20);
}

_BYTE *protocol witness for AnimationDefinition.fillMode.setter in conformance InvalidAnimationDefinition(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.fillMode.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for AnimationDefinition.bindTarget.getter in conformance InvalidAnimationDefinition@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 16) = v4;
  return outlined copy of BindTarget(v2, v3, v4);
}

uint64_t protocol witness for AnimationDefinition.bindTarget.setter in conformance InvalidAnimationDefinition(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of BindTarget(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
  *(_QWORD *)(v1 + 24) = v2;
  *(_QWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 40) = v4;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.bindTarget.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for AnimationDefinition.trimEnd.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t protocol witness for AnimationDefinition.trimEnd.setter in conformance InvalidAnimationDefinition(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = result;
  *(_BYTE *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t protocol witness for AnimationDefinition.trimDuration.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t protocol witness for AnimationDefinition.trimDuration.setter in conformance InvalidAnimationDefinition(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 80) = result;
  *(_BYTE *)(v2 + 88) = a2 & 1;
  return result;
}

double protocol witness for AnimationDefinition.offset.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(double *)(v0 + 96);
}

void protocol witness for AnimationDefinition.offset.setter in conformance InvalidAnimationDefinition(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 96) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.offset.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double protocol witness for AnimationDefinition.delay.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

void protocol witness for AnimationDefinition.delay.setter in conformance InvalidAnimationDefinition(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 104) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.delay.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float protocol witness for AnimationDefinition.speed.getter in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  return *(float *)(v0 + 112);
}

void protocol witness for AnimationDefinition.speed.setter in conformance InvalidAnimationDefinition(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 112) = a1;
}

uint64_t (*protocol witness for AnimationDefinition.speed.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void protocol witness for AnimationDefinition.repeatMode.getter in conformance InvalidAnimationDefinition(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 116);
}

_BYTE *protocol witness for AnimationDefinition.repeatMode.setter in conformance InvalidAnimationDefinition(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 116) = *result;
  return result;
}

uint64_t (*protocol witness for AnimationDefinition.repeatMode.modify in conformance InvalidAnimationDefinition())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double protocol witness for AnimationDefinition.duration.getter in conformance InvalidAnimationDefinition()
{
  return 0.0;
}

uint64_t protocol witness for AnimationDefinitionInternal.generate() in conformance InvalidAnimationDefinition()
{
  uint64_t v0;

  lazy protocol witness table accessor for type AnimationError and conformance AnimationError();
  swift_allocError();
  *(_QWORD *)v0 = 0xD00000000000001CLL;
  *(_QWORD *)(v0 + 8) = 0x800000021BE822D0;
  *(_BYTE *)(v0 + 16) = 0;
  return swift_willThrow();
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20[5];

  v13 = *(char **)(result + 8);
  v14 = *((_QWORD *)v13 + 2);
  if (v14 < *(_QWORD *)result)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = (uint64_t)a2;
  if (*(_QWORD *)result > (uint64_t)a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v11 = a3;
  if (v14 < (uint64_t)a3)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v7 = a4;
  if (a2 == a3)
    goto LABEL_23;
  v12 = a4 - a5;
  if (a4 == a5)
    goto LABEL_34;
  if ((uint64_t)a2 >= (uint64_t)a3)
    goto LABEL_35;
  v10 = a7;
  v9 = result;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    goto LABEL_36;
  while (2)
  {
    v15 = 0;
    *(_QWORD *)(v9 + 8) = v13;
    v16 = *(_QWORD *)(v10 + 16);
    if (v16 <= v7)
      v16 = v7;
    v13 = (char *)(v16 - v7);
    v10 += 40 * v7 + 32;
    v17 = (char *)v11 + ~v8;
    v18 = 40 * v8 + 32;
    while (1)
    {
      if ((uint64_t)&v15[v7] >= a5)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      if (v7 < 0)
        goto LABEL_26;
      if (v13 == v15)
        goto LABEL_27;
      outlined init with copy of __REAssetService(v10, (uint64_t)v20);
      v11 = *(_QWORD **)(v9 + 8);
      result = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v9 + 8) = v11;
      if ((result & 1) != 0)
      {
        if (v8 < 0)
          break;
        goto LABEL_16;
      }
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
      v11 = (_QWORD *)result;
      *(_QWORD *)(v9 + 8) = result;
      if (v8 < 0)
        break;
LABEL_16:
      if ((unint64_t)&v15[v8] >= v11[2])
        goto LABEL_28;
      __swift_assign_boxed_opaque_existential_1((_QWORD *)((char *)v11 + v18), v20);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      if (v17 == v15)
        goto LABEL_22;
      ++v15;
      v10 += 40;
      v18 += 40;
      if (!&v15[v12])
        goto LABEL_29;
    }
    __break(1u);
LABEL_22:
    v7 += (uint64_t)(v15 + 1);
LABEL_23:
    if (v7 != a5)
    {
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      v13 = (char *)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
      continue;
    }
    return result;
  }
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = DRMeshGetPartCount();
  if (result < 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a2 < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < a3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (a2 != a3)
  {
    if (a4 == a5)
      goto LABEL_19;
    do
    {
      if (a4 >= a5)
        goto LABEL_13;
      DRMeshGetPartAt();
      result = DRMeshSetPartAt();
      if (__OFADD__(a2, 1))
        goto LABEL_14;
      ++a4;
      if (a2 + 1 == a3)
        goto LABEL_5;
      ++a2;
    }
    while (a5 != a4);
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
LABEL_5:
  if (a4 != a5)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

uint64_t specialized _writeBackMutableSlice<A, B>(_:bounds:slice:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;

  if (a2 < 0 || (v8 = (_QWORD *)result, v10 = *(_QWORD **)result, *(_QWORD *)(*(_QWORD *)result + 16) < a3))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v6 = a5;
  v7 = a4;
  v9 = a2;
  if (a2 == a3)
    goto LABEL_20;
  v12 = a4 - a5;
  if (a4 == a5)
    goto LABEL_28;
  v13 = a2 - a3;
  if (a2 >= a3)
    goto LABEL_29;
  v11 = a6;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_30;
  while (1)
  {
    if (one-time initialization token for identity != -1)
      result = swift_once();
    v14 = 0;
    v15 = *(_QWORD *)(v11 + 16);
    if (v15 <= v7)
      v15 = v7;
    v16 = v15 - v7;
    v17 = (__int128 *)(v11 + 48 * v7 + 64);
    v18 = &v10[6 * v9 + 8];
    do
    {
      if (v7 + v14 >= v6)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      if (v7 < 0)
        goto LABEL_23;
      if (v16 == v14)
        goto LABEL_24;
      if ((unint64_t)(v9 + v14) >= v10[2])
        goto LABEL_25;
      v20 = *(v17 - 1);
      v19 = *v17;
      *(v18 - 2) = *(v17 - 2);
      *(v18 - 1) = v20;
      *v18 = v19;
      if (!(v13 + 1 + v14))
        goto LABEL_19;
      ++v14;
      v17 += 3;
      v18 += 3;
    }
    while (v12 + v14);
    __break(1u);
LABEL_19:
    *v8 = v10;
    v7 += v14 + 1;
LABEL_20:
    if (v7 == v6)
      return result;
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    v10 = (_QWORD *)result;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 < 0 || (v11 = a3, v8 = (_QWORD *)result, v10 = *(_QWORD *)result, *(_QWORD *)(*(_QWORD *)result + 16) < a3))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v6 = a5;
  v7 = a4;
  v9 = a2;
  if (a2 == a3)
    goto LABEL_18;
  v13 = a4 - a5;
  if (a4 == a5)
    goto LABEL_26;
  if (a2 >= a3)
    goto LABEL_27;
  v12 = a6;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
    goto LABEL_28;
  while (1)
  {
    v14 = 0;
    v15 = *(_QWORD *)(v12 + 16);
    if (v15 <= v7)
      v15 = v7;
    v16 = v15 - v7;
    do
    {
      if (v7 + v14 >= v6)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      if (v7 < 0)
        goto LABEL_21;
      if (v16 == v14)
        goto LABEL_22;
      if ((unint64_t)(v9 + v14) >= *(_QWORD *)(v10 + 16))
        goto LABEL_23;
      *(_DWORD *)(v10 + 4 * v9 + 32 + 4 * v14) = *(_DWORD *)(v12 + 4 * v7 + 32 + 4 * v14);
      if (~v9 + v11 == v14)
        goto LABEL_17;
      ++v14;
    }
    while (v13 + v14);
    __break(1u);
LABEL_17:
    *v8 = v10;
    v7 += v14 + 1;
LABEL_18:
    if (v7 == v6)
      return result;
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v10);
    v10 = result;
  }
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(unint64_t result)
{
  int64_t *v1;
  uint64_t v2;
  int64_t v3;
  int64_t v4;
  int64_t *v5;
  uint64_t (*v6)(_BYTE *);
  int64_t v7;
  int64_t v8;
  char v9;
  uint64_t i;
  int64_t v11;
  char v12;
  _BYTE v13[40];
  uint64_t v14;

  v3 = *v1;
  v4 = *(_QWORD *)(v1[1] + 16);
  if (*v1 >= v4)
  {
    return *v1;
  }
  else
  {
    v5 = v1;
    v6 = (uint64_t (*)(_BYTE *))result;
    v14 = -8;
    v7 = v3;
    while ((v3 & 0x8000000000000000) == 0)
    {
      v8 = v5[1];
      if ((unint64_t)v7 >= *(_QWORD *)(v8 + 16))
        goto LABEL_19;
      outlined init with copy of __REAssetService(v8 + 40 * v7 + 32, (uint64_t)v13);
      v9 = v6(v13);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      if (v2)
        return v7;
      if ((v9 & 1) != 0)
      {
        if (v7 >= v4 - 1)
          return v7;
        for (i = v14 + 40 * v4--; ; i -= 40)
        {
          v11 = v5[1];
          if (v4 >= *(_QWORD *)(v11 + 16))
            break;
          outlined init with copy of __REAssetService(v11 + i, (uint64_t)v13);
          v12 = v6(v13);
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
          if ((v12 & 1) == 0)
          {
            result = specialized MutableCollection.swapAt(_:_:)(v7, v4);
            goto LABEL_5;
          }
          if (v7 >= --v4)
            return v7;
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v7 >= v4)
        return v7;
    }
    __break(1u);
LABEL_19:
    __break(1u);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t (*v5)(int *);
  int64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  int v10;
  int v11;

  v3 = *(_QWORD *)(*v1 + 16);
  if (v3)
  {
    v4 = v1;
    v5 = (uint64_t (*)(int *))result;
    v6 = 0;
    while (1)
    {
      v7 = *v4;
      if ((unint64_t)v6 >= *(_QWORD *)(*v4 + 16))
        break;
      v11 = *(_DWORD *)(v7 + 4 * v6 + 32);
      result = v5(&v11);
      if (v2)
        return v6;
      if ((result & 1) != 0)
      {
        if (v6 >= v3 - 1)
          return v6;
        while (v3 - 1 < *(_QWORD *)(v7 + 16))
        {
          v10 = *(_DWORD *)(v7 + 28 + 4 * v3);
          result = v5(&v10);
          if ((result & 1) == 0)
          {
            v4 = v9;
            result = specialized MutableCollection.swapAt(_:_:)(v6, --v3);
            goto LABEL_5;
          }
          v8 = v3 - 2;
          --v3;
          if (v6 >= v8)
            return v6;
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v6 >= v3)
        return v6;
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(__int128 *))
{
  uint64_t v1;
  uint64_t PartCount;
  uint64_t v3;
  uint64_t v4;
  __int128 *v5;
  char *v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  __int128 *v13;
  char *v14;
  __int128 *v15;
  __int128 *v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  PartCount = DRMeshGetPartCount();
  if (PartCount < 1)
    return 0;
  v3 = PartCount;
  v4 = 0;
  v5 = &v25;
  v6 = (char *)&v25 + 8;
  v7 = &v26;
  v8 = xmmword_21BE5F820;
  v9 = xmmword_21BE52460;
  v10 = xmmword_21BE52470;
  v11 = &v27;
  do
  {
    v24 = 0uLL;
    v25 = v8;
    v26 = v9;
    v27 = v10;
    v12 = v4;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v11;
    DRMeshGetPartAt();
    v17 = a1(&v24);
    if (v1)
      break;
    if ((v17 & 1) != 0)
    {
      --v3;
      v18 = DRMeshGetPartCount();
      if (v3 < 0 || v3 >= v18)
LABEL_19:
        __break(1u);
      if (v12 >= v3)
        return v12;
      while (1)
      {
        v24 = 0uLL;
        v25 = xmmword_21BE5F820;
        v26 = xmmword_21BE52460;
        v27 = xmmword_21BE52470;
        DRMeshGetPartAt();
        v19 = a1(&v24);
        if ((v19 & 1) == 0)
          break;
        v20 = DRMeshGetPartCount();
        v21 = v3 - 1;
        if (v3 < 1 || v3 > v20)
        {
          __break(1u);
          goto LABEL_19;
        }
        --v3;
        if (v12 >= v21)
          return v12;
      }
      specialized MutableCollection.swapAt(_:_:)(v12, v3);
    }
    v4 = v12 + 1;
    v5 = v13;
    v6 = v14;
    v7 = v15;
    v9 = xmmword_21BE52460;
    v8 = xmmword_21BE5F820;
    v10 = xmmword_21BE52470;
    v11 = v16;
  }
  while (v12 + 1 < v3);
  return v4;
}

int64_t specialized MutableCollection<>._partitionImpl(by:)(uint64_t (*a1)(__int128 *))
{
  uint64_t *v1;
  uint64_t v2;
  int64_t v3;
  int64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  char v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = *(_QWORD *)(*v1 + 16);
  if (!v3)
    return 0;
  if (one-time initialization token for identity != -1)
LABEL_18:
    swift_once();
  v5 = 0;
  while (1)
  {
    v6 = *v1;
    if ((unint64_t)v5 >= *(_QWORD *)(*v1 + 16))
      goto LABEL_17;
    v7 = (_OWORD *)(v6 + 48 * v5);
    v8 = v7[3];
    v9 = v7[4];
    v15 = v7[2];
    v16 = v8;
    v17 = v9;
    v10 = a1(&v15);
    if (v2)
      return v5;
    if ((v10 & 1) != 0)
      break;
LABEL_6:
    if (++v5 >= v3)
      return v5;
  }
  if (v5 < v3 - 1)
  {
    v11 = (__int128 *)(v6 + 48 * v3--);
    while (v3 < *(_QWORD *)(v6 + 16))
    {
      v12 = *v11;
      v13 = v11[1];
      v15 = *(v11 - 1);
      v16 = v12;
      v17 = v13;
      if ((a1(&v15) & 1) == 0)
      {
        specialized MutableCollection.swapAt(_:_:)(v5, v3);
        goto LABEL_6;
      }
      --v3;
      v11 -= 3;
      if (v5 >= v3)
        return v5;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return v5;
}

float32x2_t simd_mix(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  return vmla_f32(a1, vsub_f32(a2, a1), a3);
}

double simd_mix(float32x4_t a1, float32x4_t a2, float32x4_t a3)
{
  double result;

  *(_QWORD *)&result = vmlaq_f32(a1, vsubq_f32(a2, a1), a3).u64[0];
  return result;
}

double simd_inverse(float32x4_t a1)
{
  float32x4_t v1;
  int8x16_t v2;
  float32x2_t v3;
  float32x2_t v4;
  double result;

  v1 = vmulq_f32(a1, (float32x4_t)xmmword_21BE516F0);
  v2 = (int8x16_t)vmulq_f32(a1, a1);
  *(float32x2_t *)v2.i8 = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
  v2.i32[0] = vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1)).u32[0];
  v3 = vrecpe_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrecps_f32((float32x2_t)v2.u32[0], v3));
  *(_QWORD *)&result = vmulq_n_f32(v1, vmul_f32(v4, vrecps_f32((float32x2_t)v2.u32[0], v4)).f32[0]).u64[0];
  return result;
}

double simd_mul(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2;
  int8x16_t v3;
  float32x4_t v4;
  float32x4_t v5;
  double result;

  v2 = (int32x4_t)vnegq_f32(a2);
  v3 = (int8x16_t)vtrn2q_s32((int32x4_t)a2, vtrn1q_s32((int32x4_t)a2, v2));
  v4 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)a2, (int8x16_t)v2, 8uLL), *(float32x2_t *)a1.f32, 1), (float32x4_t)vextq_s8(v3, v3, 8uLL), a1.f32[0]);
  v5 = (float32x4_t)vrev64q_s32((int32x4_t)a2);
  v5.i32[0] = v2.i32[1];
  v5.i32[3] = v2.i32[2];
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(a2, a1, 3), v5, a1, 2), v4).u64[0];
  return result;
}

uint64_t specialized BidirectionalCollection.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = a2 - a1;
  v3 = a2 < a1;
  if (a2 <= a1)
  {
    result = 0;
    if (!v3)
      return result;
    v7 = ~a2 + a1;
    v8 = a1 ^ 0x8000000000000000;
    if (v7 >= v8)
      v7 = v8;
    v9 = 0x8000000000000000;
    if (v7 < 0x8000000000000000)
      v9 = v7;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v8 == v9)
        goto LABEL_18;
      if (v4 == --result)
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = ~a1 + a2;
    while (v6 <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++result)
        return result;
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized TimelineDefinition.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t RootTimeline;
  uint64_t result;

  type metadata accessor for TimelineDefinition();
  v2 = swift_allocObject();
  if (!a1)
  {
    v4 = 0;
LABEL_8:
    *(_QWORD *)(v2 + 16) = v4;
    return v2;
  }
  swift_retain();
  v3 = REAssetHandleAssetType();
  if (v3 == 11)
  {
    RootTimeline = REAnimationSceneAssetGetRootTimeline();
    result = swift_release();
    if (RootTimeline)
      goto LABEL_7;
  }
  else
  {
    if (v3 == 5)
    {
      swift_release();
LABEL_7:
      v4 = RETimelineDefinitionCreateFromTimeline();
      swift_release();
      goto LABEL_8;
    }
    result = swift_release();
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (a2 < 0)
  {
    v4 = 0;
    while ((result ^ 0x8000000000000000) > ~a2)
    {
      if (--v4 <= a2)
      {
        result += v4;
        return result;
      }
    }
    goto LABEL_12;
  }
  if (a2)
  {
    v2 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v3 = a2 - 1;
    while (v2 > v3)
    {
      ++result;
      if (!--a2)
        return result;
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  if (a2 < 0)
  {
    v7 = 0;
    while (result - a3 + v7)
    {
      v8 = result + v7 - 1;
      if (__OFSUB__(result + v7, 1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
        return result;
      }
      if (--v7 <= a2)
        return v8;
    }
    return 0;
  }
  if (a2)
  {
    v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1))
      v3 = a2 - 1;
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL))
      v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3 + 1;
    if (v4 >= 5)
    {
      v9 = v4 & 3;
      if ((v4 & 3) == 0)
        v9 = 4;
      v5 = v4 - v9;
      v10 = 0uLL;
      v11 = (int64x2_t)(unint64_t)result;
      v12 = vdupq_n_s64(1uLL);
      v13 = v5;
      do
      {
        v11 = vaddq_s64(v11, v12);
        v10 = vaddq_s64(v10, v12);
        v13 -= 4;
      }
      while (v13);
      v6 = vaddvq_s64(vaddq_s64(v10, v11));
    }
    else
    {
      v5 = 0;
      v6 = result;
    }
    v14 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    v15 = v5 + result - a3;
    v16 = a2 - v5;
    result = v6;
    while (v15)
    {
      if (!v14)
        goto LABEL_27;
      ++result;
      ++v14;
      ++v15;
      if (!--v16)
        return result;
    }
    return 0;
  }
  return result;
}

double simd_mul(simd_float4x4 a1, simd_float4x4 a2)
{
  uint64_t v2;
  _OWORD v4[4];
  _OWORD v5[4];

  v2 = 0;
  v4[2] = a2.columns[2];
  v4[3] = a2.columns[3];
  memset(v5, 0, sizeof(v5));
  do
  {
    v5[v2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a1.columns[0], COERCE_FLOAT(v4[v2])), (float32x4_t)a1.columns[1], *(float32x2_t *)&v4[v2], 1), (float32x4_t)a1.columns[2], (float32x4_t)v4[v2], 2), (float32x4_t)a1.columns[3], (float32x4_t)v4[v2], 3);
    ++v2;
  }
  while (v2 != 4);
  return *(double *)v5;
}

unint64_t lazy protocol witness table accessor for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms.CodingKeys, &type metadata for JointTransforms.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms.CodingKeys, &type metadata for JointTransforms.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms.CodingKeys, &type metadata for JointTransforms.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys;
  if (!lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for JointTransforms.CodingKeys, &type metadata for JointTransforms.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JointTransforms.CodingKeys and conformance JointTransforms.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights.CodingKeys, &unk_24DFC6C38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights.CodingKeys, &unk_24DFC6C38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights.CodingKeys, &unk_24DFC6C38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys;
  if (!lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for BlendShapeWeights.CodingKeys, &unk_24DFC6C38);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BlendShapeWeights.CodingKeys and conformance BlendShapeWeights.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Float] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Float]);
    v8 = a2;
    result = MEMORY[0x220772E3C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnimationFillMode and conformance AnimationFillMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationFillMode, &type metadata for AnimationFillMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationFillMode, &type metadata for AnimationFillMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationFillMode, &type metadata for AnimationFillMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode;
  if (!lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationFillMode, &type metadata for AnimationFillMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationFillMode and conformance AnimationFillMode);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<JointTransforms> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<JointTransforms>, (uint64_t (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms, MEMORY[0x24BEE0658]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>, (uint64_t (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in JointTransforms()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>, (uint64_t (*)(void))lazy protocol witness table accessor for type JointTransforms and conformance JointTransforms, MEMORY[0x24BEE4220]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<JointTransforms> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<JointTransforms>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<JointTransforms> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<JointTransforms>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in JointTransforms()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<JointTransforms> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<JointTransforms>, MEMORY[0x24BEE2C18]);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeights> and conformance <> DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeights>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights, MEMORY[0x24BEE0658]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights, MEMORY[0x24BEE4218]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type DefaultIndices<PhysicsJoints> and conformance <> DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>, (uint64_t (*)(void))lazy protocol witness table accessor for type BlendShapeWeights and conformance BlendShapeWeights, MEMORY[0x24BEE4220]);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type DefaultIndices<BlendShapeWeights> and conformance DefaultIndices<A>, &demangling cache variable for type metadata for DefaultIndices<BlendShapeWeights>, MEMORY[0x24BEE0670]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type Slice<BlendShapeWeights> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<BlendShapeWeights>, MEMORY[0x24BEE4238]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BlendShapeWeights()
{
  return lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type IndexingIterator<BlendShapeWeights> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<BlendShapeWeights>, MEMORY[0x24BEE2C18]);
}

uint64_t sub_21BCB7E60()
{
  return 0;
}

uint64_t sub_21BCB7E70@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t v3;

  v3 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)(*(_QWORD *)result + 16))
  {
    *a3 = *(_DWORD *)(*(_QWORD *)result + 4 * v3 + 32);
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_21BCB7EA4()
{
  return 0;
}

ValueMetadata *type metadata accessor for AnimationFillMode()
{
  return &type metadata for AnimationFillMode;
}

uint64_t dispatch thunk of AnimatableData.__rk_animationIdentity.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnimatableData.__rk_animationInverse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AnimatableData.__rk_combineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnimatableData.__rk_invertAndCombineForAnimation(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of AnimatableData.__rk_animationInterpolation(towards:t:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

ValueMetadata *type metadata accessor for JointTransforms()
{
  return &type metadata for JointTransforms;
}

ValueMetadata *type metadata accessor for BlendShapeWeights()
{
  return &type metadata for BlendShapeWeights;
}

uint64_t type metadata accessor for TimelineDefinition()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of AnimationDefinition.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AnimationDefinition.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of AnimationDefinition.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AnimationDefinition.blendLayer.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of AnimationDefinition.fillMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of AnimationDefinition.bindTarget.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 112))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimStart.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 136))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimEnd.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 160))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnimationDefinition.trimDuration.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of AnimationDefinition.offset.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of AnimationDefinition.delay.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of AnimationDefinition.speed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 240))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 256))();
}

uint64_t dispatch thunk of AnimationDefinition.repeatMode.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 264))();
}

uint64_t dispatch thunk of AnimationDefinition.duration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t destroy for TimelineBaseProperties(uint64_t a1)
{
  int v2;

  swift_bridgeObjectRelease();
  v2 = *(unsigned __int8 *)(a1 + 32);
  if (v2 != 255)
    outlined consume of BindTarget(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v2);
  return swift_release();
}

uint64_t initializeWithCopy for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v5 == 255)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v6, v7, v5);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v7;
    *(_BYTE *)(a1 + 32) = v5;
  }
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  int v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (__int128 *)(a1 + 16);
  v5 = (__int128 *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 32) == 255)
  {
    if (v6 == 255)
    {
      v15 = *v5;
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *v4 = v15;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_QWORD *)(a2 + 24);
      outlined copy of BindTarget(v12, v13, *(_BYTE *)(a2 + 32));
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v13;
      *(_BYTE *)(a1 + 32) = v6;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
    v14 = *(_BYTE *)(a2 + 32);
    *v4 = *v5;
    *(_BYTE *)(a1 + 32) = v14;
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    outlined copy of BindTarget(v7, v8, *(_BYTE *)(a2 + 32));
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v11 = *(_BYTE *)(a1 + 32);
    *(_BYTE *)(a1 + 32) = v6;
    outlined consume of BindTarget(v9, v10, v11);
  }
  v16 = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_DWORD *)(a1 + 36) = v16;
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TimelineBaseProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 255)
    goto LABEL_5;
  v7 = *(unsigned __int8 *)(a2 + 32);
  if (v7 == 255)
  {
    outlined destroy of BindTarget(a1 + 16);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *v5;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *v5;
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of BindTarget(v8, v9, v6);
LABEL_6:
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimelineBaseProperties(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimelineBaseProperties(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimelineBaseProperties()
{
  return &type metadata for TimelineBaseProperties;
}

ValueMetadata *type metadata accessor for TimelineClipProperties()
{
  return &type metadata for TimelineClipProperties;
}

void *type metadata accessor for BlendShapeWeights.CodingKeys()
{
  return &unk_24DFC6C38;
}

uint64_t storeEnumTagSinglePayload for BlendShapeWeights.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BCB8478 + 4 * byte_21BE6E7F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BCB8498 + 4 * byte_21BE6E7F5[v4]))();
}

_BYTE *sub_21BCB8478(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BCB8498(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCB84A0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCB84A8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCB84B0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCB84B8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for JointTransforms.CodingKeys()
{
  return &type metadata for JointTransforms.CodingKeys;
}

uint64_t destroy for InvalidAnimationDefinition(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return outlined consume of BindTarget(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain();
  outlined copy of BindTarget(v5, v6, v7);
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  return a1;
}

uint64_t assignWithCopy for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  outlined copy of BindTarget(v4, v5, v6);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v9 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  outlined consume of BindTarget(v7, v8, v9);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  v11 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v12;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  return a1;
}

__n128 __swift_memcpy117_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 109) = *(_QWORD *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for InvalidAnimationDefinition(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  outlined consume of BindTarget(v6, v7, v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 116) = *(_BYTE *)(a2 + 116);
  return a1;
}

uint64_t getEnumTagSinglePayload for InvalidAnimationDefinition(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 117))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InvalidAnimationDefinition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 117) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 117) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InvalidAnimationDefinition()
{
  return &type metadata for InvalidAnimationDefinition;
}

uint64_t __REAssetBundle.__resource<A>(ofType:identifier:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssetHandle;
  uint64_t v8;
  int v9;

  v5 = v2[5];
  v6 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  if (!AssetHandle)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  type metadata accessor for __REAsset();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = AssetHandle;
  type metadata accessor for __RERenderGraphEmitter();
  if (swift_dynamicCastMetatype())
  {
    *(_QWORD *)(swift_allocObject() + 16) = v8;
    v9 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, v9 ^ 1u, 1, a1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
    return swift_release();
  }
}

uint64_t __REAssetBundle.resource<A>(ofType:identifier:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return __REAssetBundle.__resource<A>(ofType:identifier:)(a1, a2);
}

uint64_t __REAssetBundle.__renderGraphEmitter(identifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssetHandle;
  uint64_t result;
  uint64_t v5;

  v1 = v0[5];
  v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  result = 0;
  if (AssetHandle)
  {
    type metadata accessor for __REAsset();
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = AssetHandle;
    type metadata accessor for __RERenderGraphEmitter();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = v5;
  }
  return result;
}

uint64_t AnimationPlaybackController.time.setter()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentSetCurrentPlaybackTime();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.setParent(parent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass)
    {
      v5 = ComponentByClass;
      swift_beginAccess();
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v7 = *(_QWORD *)(Strong + 16);
        swift_release();
        MEMORY[0x22076AE5C](v5, *(_QWORD *)(v1 + 16), v7, *(_QWORD *)(a1 + 16));
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.__allocating_init(entity:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = swift_allocObject();
  swift_weakInit();
  *(_QWORD *)(v3 + 16) = a2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v3;
}

uint64_t AnimationPlaybackController.isPaused.getter()
{
  return AnimationPlaybackController.isPaused.getter((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE20550]);
}

uint64_t AnimationPlaybackController.isComplete.getter()
{
  return AnimationPlaybackController.isPaused.getter((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE20548]);
}

uint64_t AnimationPlaybackController.init(entity:identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_weakInit();
  *(_QWORD *)(v2 + 16) = a2;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v2;
}

uint64_t AnimationPlaybackController.hash(into:)()
{
  uint64_t v0;
  uint64_t result;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    Hasher._combine(_:)(*(_QWORD *)(result + 16));
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AnimationPlaybackController.pause()()
{
  AnimationPlaybackController.pause()((void (*)(void))MEMORY[0x24BE20568]);
}

Swift::Void __swiftcall AnimationPlaybackController.resume()()
{
  AnimationPlaybackController.pause()((void (*)(void))MEMORY[0x24BE20578]);
}

Swift::Void __swiftcall AnimationPlaybackController.stop()()
{
  AnimationPlaybackController.pause()((void (*)(void))MEMORY[0x24BE205B8]);
}

uint64_t AnimationPlaybackController.pause()(void (*a1)(void))
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      a1();
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

uint64_t AnimationPlaybackController.deinit()
{
  uint64_t v0;

  swift_weakDestroy();
  return v0;
}

uint64_t AnimationPlaybackController.__deallocating_deinit()
{
  swift_weakDestroy();
  return swift_deallocClassInstance();
}

Swift::Int AnimationPlaybackController.hashValue.getter()
{
  uint64_t v0;
  uint64_t Strong;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Hasher._combine(_:)(*(_QWORD *)(Strong + 16));
    swift_release();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AnimationPlaybackController()
{
  return AnimationPlaybackController.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AnimationPlaybackController()
{
  uint64_t v0;
  uint64_t result;

  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    Hasher._combine(_:)(*(_QWORD *)(result + 16));
    return swift_release();
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AnimationPlaybackController()
{
  uint64_t v0;
  uint64_t Strong;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(*(_QWORD *)v0 + 16));
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    Hasher._combine(_:)(*(_QWORD *)(Strong + 16));
    swift_release();
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AnimationPlaybackController(uint64_t *a1, uint64_t *a2)
{
  return specialized static AnimationPlaybackController.== infix(_:_:)(*a1, *a2);
}

uint64_t AnimationPlaybackController.isValid.getter()
{
  return AnimationPlaybackController.isPaused.getter((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE20560]);
}

uint64_t AnimationPlaybackController.isPlaying.getter()
{
  return AnimationPlaybackController.isPaused.getter(MEMORY[0x24BE20558]);
}

uint64_t AnimationPlaybackController.isStopped.getter()
{
  return AnimationPlaybackController.isPaused.getter((uint64_t (*)(uint64_t, _QWORD))MEMORY[0x24BE20548]);
}

uint64_t AnimationPlaybackController.isPaused.getter(uint64_t (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t ComponentByClass;
  uint64_t v4;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 0;
  REAnimationComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  if (ComponentByClass)
    v4 = a1(ComponentByClass, *(_QWORD *)(v1 + 16));
  else
    v4 = 0;
  swift_release();
  return v4;
}

float AnimationPlaybackController.speed.getter()
{
  return AnimationPlaybackController.speed.getter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20538]);
}

uint64_t AnimationPlaybackController.speed.setter(float a1)
{
  return AnimationPlaybackController.speed.setter(MEMORY[0x24BE205A8], a1);
}

void (*AnimationPlaybackController.speed.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  char *v3;
  float *v4;
  float v5;
  float v6;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = (float *)(v3 + 32);
  *((_QWORD *)v3 + 3) = v1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    v5 = 1.0;
    if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
    {
      REAnimationComponentGetPlaybackSpeed();
      v5 = v6;
    }
    swift_release();
  }
  else
  {
    v5 = 1.0;
  }
  *v4 = v5;
  return AnimationPlaybackController.speed.modify;
}

void AnimationPlaybackController.speed.modify(uint64_t a1, uint64_t a2)
{
  AnimationPlaybackController.speed.modify(a1, a2, MEMORY[0x24BE205A8]);
}

double AnimationPlaybackController.time.getter()
{
  double v0;
  double v1;

  swift_beginAccess();
  v0 = 0.0;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass() && (REAnimationComponentIsValid() & 1) != 0)
    {
      REAnimationComponentGetCurrentPlaybackTime();
      v0 = v1;
      swift_release();
      if ((~*(_QWORD *)&v0 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v0 & 0xFFFFFFFFFFFFFLL) != 0)
        return 0.0;
    }
    else
    {
      swift_release();
    }
  }
  return v0;
}

void (*AnimationPlaybackController.time.modify(_QWORD *a1))(void **a1)
{
  uint64_t v1;
  char *v3;
  double *v4;
  double v5;
  double v6;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = (double *)(v3 + 24);
  *((_QWORD *)v3 + 4) = v1;
  swift_beginAccess();
  v5 = 0.0;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass() && (REAnimationComponentIsValid() & 1) != 0)
    {
      REAnimationComponentGetCurrentPlaybackTime();
      v5 = v6;
      swift_release();
      if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL) != 0)
        v5 = 0.0;
    }
    else
    {
      swift_release();
    }
  }
  *v4 = v5;
  return AnimationPlaybackController.time.modify;
}

void AnimationPlaybackController.time.modify(void **a1)
{
  void *v1;

  v1 = *a1;
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentSetCurrentPlaybackTime();
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }
  free(v1);
}

float AnimationPlaybackController.blendFactor.getter()
{
  return AnimationPlaybackController.speed.getter((float (*)(uint64_t, _QWORD))MEMORY[0x24BE20510]);
}

float AnimationPlaybackController.speed.getter(float (*a1)(uint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t ComponentByClass;
  float v4;
  uint64_t v5;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 1.0;
  REAnimationComponentGetComponentType();
  ComponentByClass = REEntityGetComponentByClass();
  v4 = 1.0;
  if (ComponentByClass)
  {
    v5 = ComponentByClass;
    if (REAnimationComponentIsValid())
      v4 = a1(v5, *(_QWORD *)(v1 + 16));
  }
  swift_release();
  return v4;
}

uint64_t AnimationPlaybackController.blendFactor.setter(float a1)
{
  return AnimationPlaybackController.speed.setter(MEMORY[0x24BE20588], a1);
}

uint64_t AnimationPlaybackController.speed.setter(void (*a1)(float), float a2)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      a1(a2);
      RENetworkMarkComponentDirty();
    }
    return swift_release();
  }
  return result;
}

void (*AnimationPlaybackController.blendFactor.modify(_QWORD *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  char *v3;
  float *v4;
  float v5;
  float v6;

  v3 = (char *)malloc(0x28uLL);
  *a1 = v3;
  v4 = (float *)(v3 + 32);
  *((_QWORD *)v3 + 3) = v1;
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    v5 = 1.0;
    if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
    {
      REAnimationComponentGetBlendFactor();
      v5 = v6;
    }
    swift_release();
  }
  else
  {
    v5 = 1.0;
  }
  *v4 = v5;
  return AnimationPlaybackController.blendFactor.modify;
}

void AnimationPlaybackController.blendFactor.modify(uint64_t a1, uint64_t a2)
{
  AnimationPlaybackController.speed.modify(a1, a2, MEMORY[0x24BE20588]);
}

void AnimationPlaybackController.speed.modify(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, float))
{
  _QWORD *v4;
  float v5;
  uint64_t ComponentByClass;

  v4 = *(_QWORD **)a1;
  v5 = *(float *)(*(_QWORD *)a1 + 32);
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    ComponentByClass = REEntityGetComponentByClass();
    if (ComponentByClass)
    {
      a3(ComponentByClass, *(_QWORD *)(v4[3] + 16), v5);
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }
  free(v4);
}

double AnimationPlaybackController.duration.getter()
{
  double v0;
  double v1;

  swift_beginAccess();
  if (!swift_weakLoadStrong())
    return 0.0;
  REAnimationComponentGetComponentType();
  v0 = 0.0;
  if (REEntityGetComponentByClass() && REAnimationComponentIsValid())
  {
    REAnimationComponentGetDuration();
    v0 = v1;
  }
  swift_release();
  return v0;
}

CMTimebaseRef AnimationPlaybackController.clock.getter()
{
  const __CFAllocator *v0;
  OpaqueCMClock *v1;
  CMTimebaseRef v2;
  CMTimebaseRef result;
  OpaqueCMTimebase *v4;
  uint64_t ServiceLocator;
  id v6;
  CMTimebaseRef timebaseOut[2];

  timebaseOut[1] = *(CMTimebaseRef *)MEMORY[0x24BDAC8D0];
  timebaseOut[0] = 0;
  v0 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v1 = CMClockGetHostTimeClock();
  CMTimebaseCreateWithSourceClock(v0, v1, timebaseOut);

  v2 = timebaseOut[0];
  swift_beginAccess();
  result = (CMTimebaseRef)swift_weakLoadStrong();
  if (!result)
    goto LABEL_9;
  if (!REEntityGetComponent())
  {
    result = (CMTimebaseRef)swift_release();
LABEL_9:
    if (v2)
      return v2;
    __break(1u);
    goto LABEL_15;
  }
  if ((REAnimationComponentIsValid() & 1) == 0)
  {
    specialized static __ServiceLocator.shared.getter();
    swift_beginAccess();
    swift_unownedRetainStrong();
    swift_release();
    ServiceLocator = REEngineGetServiceLocator();
    result = (CMTimebaseRef)MEMORY[0x22076FD4C](ServiceLocator);
    if (result)
    {
      v6 = (id)REAnimationServiceGetRootTimebase();

      swift_release();
      return (CMTimebaseRef)v6;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = (CMTimebaseRef)(id)REAnimationComponentGetAnimationParentTimebase();
  v4 = result;
  if (!result)
  {
    if (v2)
    {
      v4 = v2;
      goto LABEL_7;
    }
LABEL_16:
    __break(1u);
    return result;
  }
LABEL_7:
  swift_release();

  return v4;
}

uint64_t AnimationPlaybackController.clock.setter()
{
  id v0;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (REEntityGetComponent() && REAnimationComponentIsValid())
    {
      type metadata accessor for CMTimebaseRef(0);
      swift_unknownObjectRetain();
      v0 = (id)swift_dynamicCastUnknownClassUnconditional();
      REAnimationComponentSetAnimationParentTimebase();

    }
    swift_release();
  }
  return swift_unknownObjectRelease();
}

uint64_t (*AnimationPlaybackController.clock.modify(CMTimebaseRef *a1))(uint64_t a1, char a2)
{
  OpaqueCMTimebase *v1;

  a1[1] = v1;
  *a1 = AnimationPlaybackController.clock.getter();
  return AnimationPlaybackController.clock.modify;
}

uint64_t AnimationPlaybackController.clock.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    return AnimationPlaybackController.clock.setter();
  swift_unknownObjectRetain();
  AnimationPlaybackController.clock.setter();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall AnimationPlaybackController.stop(blendOutDuration:)(Swift::Double blendOutDuration)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    REAnimationComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      REAnimationComponentStopAnimationWithTime();
      RENetworkMarkComponentDirty();
    }
    swift_release();
  }
}

BOOL specialized static AnimationPlaybackController.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_beginAccess();
  v3 = swift_weakLoadStrong();
  if (Strong)
  {
    if (v3)
    {
      v4 = *(_QWORD *)(Strong + 16);
      v5 = *(_QWORD *)(v3 + 16);
      swift_release();
      swift_release();
      return v4 == v5;
    }
    goto LABEL_6;
  }
  if (v3)
  {
LABEL_6:
    swift_release();
    return 0;
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type AnimationPlaybackController and conformance AnimationPlaybackController()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController;
  if (!lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController)
  {
    v1 = type metadata accessor for AnimationPlaybackController();
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AnimationPlaybackController, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationPlaybackController and conformance AnimationPlaybackController);
  }
  return result;
}

uint64_t type metadata accessor for AnimationPlaybackController()
{
  return objc_opt_self();
}

uint64_t sub_21BCB9DB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_21BCB9E00()
{
  swift_beginAccess();
  return swift_weakAssign();
}

void sub_21BCB9E4C(float *a1@<X8>)
{
  *a1 = AnimationPlaybackController.speed.getter();
}

uint64_t sub_21BCB9E74(float *a1)
{
  return AnimationPlaybackController.speed.setter(*a1);
}

void sub_21BCB9E98(double *a1@<X8>)
{
  *a1 = AnimationPlaybackController.time.getter();
}

uint64_t sub_21BCB9EC0()
{
  return AnimationPlaybackController.time.setter();
}

void sub_21BCB9EE4(float *a1@<X8>)
{
  *a1 = AnimationPlaybackController.blendFactor.getter();
}

uint64_t sub_21BCB9F0C(float *a1)
{
  return AnimationPlaybackController.blendFactor.setter(*a1);
}

CMTimebaseRef sub_21BCB9F30@<X0>(CMTimebaseRef *a1@<X8>)
{
  CMTimebaseRef result;

  result = AnimationPlaybackController.clock.getter();
  *a1 = result;
  return result;
}

uint64_t sub_21BCB9F58()
{
  swift_unknownObjectRetain();
  return AnimationPlaybackController.clock.setter();
}

uint64_t method lookup function for AnimationPlaybackController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnimationPlaybackController.__identifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AnimationPlaybackController.entity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AnimationPlaybackController.isPaused.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AnimationPlaybackController.isComplete.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AnimationPlaybackController.__allocating_init(entity:identifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of AnimationPlaybackController.hash(into:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of AnimationPlaybackController.pause()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of AnimationPlaybackController.resume()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of AnimationPlaybackController.stop()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of AnimationPlaybackController.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> RequestLoadable.enforceResourceSharingBeforeECSCommits()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t *boxed_opaque_existential_1;

  v3 = v1;
  v4 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
  *(_QWORD *)(inited + 56) = v4;
  *(_QWORD *)(inited + 64) = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(boxed_opaque_existential_1, v2, v4);
  specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
  swift_arrayDestroy();
}

uint64_t RequestLoadable.awaitForResourceSharing()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t RequestLoadable.awaitForResourceSharing()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
  v2 = swift_allocObject();
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21BE411F0;
  v7 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v2 + 56) = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v2 + 32));
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(boxed_opaque_existential_1, v1);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v5;
  *v5 = v0;
  v5[1] = RequestLoadable.awaitForResourceSharing();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void one-time initialization function for usdExtensions()
{
  static LoadUtilities.usdExtensions = (uint64_t)&outlined read-only object #0 of one-time initialization function for usdExtensions;
}

uint64_t static LoadUtilities.getURL(name:in:allowingExtensions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X3>, char *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  void (*v33)(char *, char *, uint64_t);
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);
  char *v35;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  id v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;

  v52 = a4;
  v55 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v50 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v50 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v50 - v18;
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v50 - v22;
  v53 = a1;
  v54 = a2;
  v24 = (void *)MEMORY[0x220768C3C](a1, a2, v21);
  v25 = objc_msgSend(v24, sel_pathExtension);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  v29 = v26;
  v30 = v52;
  LOBYTE(v25) = specialized Sequence<>.contains(_:)(v29, v28, v52);
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
  {
    v51 = v23;
    v31 = (void *)MEMORY[0x220768C3C](v53, v54);
    v32 = objc_msgSend(v55, sel_URLForResource_withExtension_, v31, 0);

    if (v32)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v33 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
      v33(v13, v19, v14);
      v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56);
      v34(v13, 0, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
      {
        v35 = v51;
        v33(v51, v13, v14);
        v33(a5, v35, v14);
        return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v34)(a5, 0, 1, v14);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
    v30 = v52;
  }
  v51 = a5;
  v37 = v30[2];
  if (v37)
  {
    swift_bridgeObjectRetain();
    v38 = v30 + 5;
    do
    {
      v41 = *(v38 - 1);
      v40 = *v38;
      swift_bridgeObjectRetain();
      v42 = (void *)MEMORY[0x220768C3C](v53, v54);
      v43 = (void *)MEMORY[0x220768C3C](v41, v40);
      swift_bridgeObjectRelease();
      v44 = objc_msgSend(v55, sel_URLForResource_withExtension_, v42, v43);

      if (v44)
      {
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        v45 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
        v45(v10, v19, v14);
        v39 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v39(v10, 0, 1, v14);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) != 1)
        {
          swift_bridgeObjectRelease();
          v46 = v50;
          v45(v50, v10, v14);
          v47 = v51;
          v45(v51, v46, v14);
          v48 = v47;
          v49 = 0;
          return v39(v48, v49, 1, v14);
        }
      }
      else
      {
        v39 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v39(v10, 1, 1, v14);
      }
      v38 += 2;
      outlined destroy of BodyTrackingComponent?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
      --v37;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    v39 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  }
  v48 = v51;
  v49 = 1;
  return v39(v48, v49, 1, v14);
}

uint64_t static LoadUtilities.getURL(name:in:typeExtension:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  v36 = a6;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - v16;
  v18 = (void *)MEMORY[0x220768C3C](a1, a2, v15);
  v19 = objc_msgSend(v18, sel_pathExtension);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  if (v20 == a4 && v22 == a5)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v29 = (void *)MEMORY[0x220768C3C](a1, a2);
    v30 = objc_msgSend(a3, sel_URLForResource_withExtension_, v29, 0);

    if (v30)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v31 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v17, 0, 1, v31);
    }
    else
    {
      v32 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v17, 1, 1, v32);
    }
    return outlined init with take of URL?((uint64_t)v17, v36);
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_9;
  v25 = (void *)MEMORY[0x220768C3C](a1, a2);
  v26 = (void *)MEMORY[0x220768C3C](a4, a5);
  v27 = objc_msgSend(a3, sel_URLForResource_withExtension_, v25, v26);

  if (v27)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v28 = type metadata accessor for URL();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v13, 0, 1, v28);
  }
  else
  {
    v33 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v13, 1, 1, v33);
  }
  v17 = v13;
  return outlined init with take of URL?((uint64_t)v17, v36);
}

uint64_t static LoadUtilities.getURLForRealityFile(withScene:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  NSURL *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  void **v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  Swift::String v59;
  Swift::String v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v85 = a2;
  v7 = type metadata accessor for URL();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v82 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)MEMORY[0x220768C3C](0x7974696C616572, 0xE700000000000000, v12);
  v15 = objc_msgSend(a3, sel_URLsForResourcesWithExtension_subdirectory_, v14, 0);

  if (!v15)
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a4, 1, 1, v24);
  }
  v84 = a1;
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  outlined init with copy of __REAssetService(v17 + 120, (uint64_t)&v88);
  v18 = v90;
  v19 = v91;
  __swift_project_boxed_opaque_existential_1(&v88, v90);
  v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 32);
  swift_retain();
  v81 = v20(v18, v19);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
  v78 = *(_QWORD *)(v16 + 16);
  if (!v78)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v82, 1, 1, v7);
LABEL_6:
    swift_release();
    swift_bridgeObjectRelease();
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a4, 1, 1, v25);
  }
  v22 = 0;
  v79 = v16 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v23 = v82;
  v75 = v8;
  v74 = v10;
  v73 = v17;
  v72 = v16;
  while (1)
  {
    if (v22 >= *(_QWORD *)(v16 + 16))
      goto LABEL_67;
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v26(v23, v79 + *(_QWORD *)(v8 + 72) * v22, v7);
    v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v76(v23, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v23, 1, v7) == 1)
      goto LABEL_6;
    v80 = v22;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v23, v7);
    URL._bridgeToObjectiveC()(v27);
    v29 = v28;
    v30 = RERealityFileMountFileAtURL();

    if (!v30)
      goto LABEL_9;
    v83 = v30;
    result = RERealityFileGetAssetDescriptorCount();
    if (result < 0)
      goto LABEL_68;
    v31 = result;
    v71 = (void (*)(uint64_t, char *, uint64_t))v26;
    if (result)
    {
      v32 = 0;
      v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v34 = v84;
      do
      {
        result = RERealityFileGetAssetDescriptorAtIndex();
        if (result)
        {
          result = RERealityFileAssetDescriptorAsSceneDescriptor();
          if (result)
          {
            v35 = result;
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
              v33 = (_QWORD *)result;
            }
            v37 = v33[2];
            v36 = v33[3];
            if (v37 >= v36 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v37 + 1, 1, v33);
              v33 = (_QWORD *)result;
            }
            v33[2] = v37 + 1;
            v33[v37 + 4] = v35;
          }
        }
        ++v32;
      }
      while (v31 != v32);
    }
    else
    {
      v33 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v34 = v84;
    }
    v38 = v33[2];
    if (v38)
      break;
    swift_bridgeObjectRelease();
LABEL_8:
    RERealityFileUnmount();
    v8 = v75;
    v10 = v74;
    v16 = v72;
LABEL_9:
    v22 = v80 + 1;
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v23 = v82;
    if (v22 == v78)
    {
      v76(v82, 1, 1, v7);
      goto LABEL_6;
    }
  }
  v69 = v7;
  v70 = a4;
  v39 = 0;
  v40 = v85;
  v68 = v38;
  v77 = v33 + 4;
  while (1)
  {
    if (v39 >= v33[2])
      goto LABEL_66;
    if (RESceneDescriptorGetSceneName())
    {
      v42 = String.init(cString:)();
      if (v42 != v34)
        goto LABEL_35;
    }
    else
    {
      v42 = 0;
      v41 = 0xE000000000000000;
      if (v34)
        goto LABEL_35;
    }
    if (v41 == v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = v70;
      v63 = v69;
      v61 = v40;
      goto LABEL_61;
    }
LABEL_35:
    v87 = v41;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v34 = v42;
      v61 = v87;
      goto LABEL_60;
    }
    if (one-time initialization token for usdExtensions != -1)
      swift_once();
    v43 = (_QWORD *)static LoadUtilities.usdExtensions;
    v86 = *(_QWORD *)(static LoadUtilities.usdExtensions + 16);
    if (v86)
      break;
    result = swift_bridgeObjectRelease();
LABEL_28:
    if (++v39 == v38)
    {
      swift_bridgeObjectRelease();
      a4 = v70;
      v7 = v69;
      goto LABEL_8;
    }
  }
  v45 = *(_QWORD *)(static LoadUtilities.usdExtensions + 32);
  v44 = *(void **)(static LoadUtilities.usdExtensions + 40);
  v88 = v34;
  v89 = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v46._countAndFlagsBits = 46;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  swift_bridgeObjectRetain();
  v47._countAndFlagsBits = v45;
  v47._object = v44;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = v88;
  v48 = v89;
  v50 = v87;
  if (v42 == v88 && v87 == v89)
    goto LABEL_57;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_58;
  swift_bridgeObjectRelease();
  if (v86 == 1)
  {
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v34 = v84;
    v40 = v85;
    goto LABEL_28;
  }
  result = v85;
  if (v43[2] < 2uLL)
    goto LABEL_69;
  v51 = v43[6];
  v52 = (void *)v43[7];
  v88 = v84;
  v89 = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53._countAndFlagsBits = 46;
  v53._object = (void *)0xE100000000000000;
  String.append(_:)(v53);
  swift_bridgeObjectRetain();
  v54._countAndFlagsBits = v51;
  v54._object = v52;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v49 = v88;
  v48 = v89;
  v50 = v87;
  if (v42 == v88 && v87 == v89)
  {
LABEL_57:
    v48 = v50;
    goto LABEL_59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_58:
    v42 = v49;
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34 = v42;
    v61 = v48;
LABEL_60:
    v62 = v70;
    v63 = v69;
LABEL_61:
    v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (URL, String));
    v65 = (uint64_t *)(v62 + *(int *)(v64 + 48));
    v66 = v74;
    v71(v62, v74, v63);
    *v65 = v34;
    v65[1] = v61;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v62, 0, 1, v64);
    RERealityFileUnmount();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v66, v63);
  }
  swift_bridgeObjectRelease();
  if (v86 == 2)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v34 = v84;
    v40 = v85;
    v38 = v68;
    goto LABEL_28;
  }
  v55 = (void **)(v43 + 9);
  v56 = 2;
  while (1)
  {
    result = v85;
    if (v56 >= v43[2])
      break;
    v58 = (uint64_t)*(v55 - 1);
    v57 = *v55;
    v88 = v84;
    v89 = v85;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = 46;
    v59._object = (void *)0xE100000000000000;
    String.append(_:)(v59);
    swift_bridgeObjectRetain();
    v60._countAndFlagsBits = v58;
    v60._object = v57;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v49 = v88;
    v48 = v89;
    v50 = v87;
    if (v42 == v88 && v87 == v89)
      goto LABEL_57;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_58;
    ++v56;
    swift_bridgeObjectRelease();
    v55 += 2;
    if (v86 == v56)
      goto LABEL_55;
  }
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

uint64_t NetworkSendBlockingCategory.supportsResourceSharingBeforeECSCommits.getter()
{
  char *v0;
  char v1;

  v1 = *v0;
  if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1)
    swift_once();
  return specialized Set.contains(_:)(v1, static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits);
}

RealityFoundation::NetworkSendBlockingCategory_optional __swiftcall NetworkSendBlockingCategory.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  RealityFoundation::NetworkSendBlockingCategory_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NetworkSendBlockingCategory.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  v7 = 10;
  if (v5 < 0xA)
    v7 = v5;
  *v4 = v7;
  return result;
}

void *static NetworkSendBlockingCategory.allCases.getter()
{
  return &outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter;
}

uint64_t NetworkSendBlockingCategory.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21BCBB2BC + 4 * byte_21BE6F420[*v0]))(0x6F6974616D696E61, 0xE90000000000006ELL);
}

uint64_t sub_21BCBB2BC()
{
  return 0x6F69647561;
}

uint64_t sub_21BCBB2D0()
{
  return 0x6D6E6F7269766E65;
}

uint64_t sub_21BCBB2F0()
{
  return 0x4D6E49746C697562;
}

unint64_t sub_21BCBB314()
{
  return 0xD000000000000013;
}

uint64_t sub_21BCBB330()
{
  return 1752393069;
}

uint64_t sub_21BCBB340()
{
  return 0x73636973796870;
}

uint64_t sub_21BCBB358()
{
  return 0x65727574786574;
}

uint64_t sub_21BCBB370()
{
  return 0x6F4C797469746E65;
}

uint64_t sub_21BCBB38C()
{
  return 0x6F65646976;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance NetworkSendBlockingCategory(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

RealityFoundation::NetworkSendBlockingCategory_optional protocol witness for RawRepresentable.init(rawValue:) in conformance NetworkSendBlockingCategory(Swift::String *a1)
{
  return NetworkSendBlockingCategory.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NetworkSendBlockingCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = NetworkSendBlockingCategory.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NetworkSendBlockingCategory()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NetworkSendBlockingCategory(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NetworkSendBlockingCategory()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance NetworkSendBlockingCategory(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter;
}

uint64_t one-time initialization function for $clientIsOptingOutOfFlickerMitigations()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<Bool>);
  swift_allocObject();
  result = TaskLocal.init(wrappedValue:)();
  static RequestLoadableUtilities.$clientIsOptingOutOfFlickerMitigations = result;
  return result;
}

uint64_t one-time initialization function for categoriesSupportingResourceSharingBeforeECSCommits()
{
  uint64_t result;

  result = closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits();
  static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  _OWORD v7[2];
  _OWORD v8[2];

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)MEMORY[0x220768C3C](0xD000000000000030, 0x800000021BE8E810);
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (!v2)
    goto LABEL_6;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v7, v8);
  outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
LABEL_6:
    specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter);
    v3 = specialized Set.init<A>(_:)(v4);
    swift_bridgeObjectRelease();
    return v3;
  }
  if (v6 == 1)
  {
    v3 = specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of static NetworkSendBlockingCategory.allCases.getter);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return MEMORY[0x24BEE4B08];
  }
  return v3;
}

void closure #1 in closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  Swift::String v3;

  v1 = *a1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  __asm { BR              X9 }
}

uint64_t sub_21BCBB6E0()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  void *v3;
  id v4;
  _OWORD v6[2];
  _OWORD v7[6];

  v2._countAndFlagsBits = 0x6F69647561;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3 = (void *)MEMORY[0x220768C3C](*(_QWORD *)&v7[0], *((_QWORD *)&v7[0] + 1));
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v0, sel_objectForKey_, v3);

  if (v4
    && (_bridgeAnyObjectToAny(_:)(),
        swift_unknownObjectRelease(),
        outlined init with take of Any(v6, v7),
        outlined init with take of Any(v7, v6),
        (swift_dynamicCast() & 1) != 0))
  {
    return *(unsigned __int8 *)(v1 - 33);
  }
  else
  {
    return 1;
  }
}

void closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _QWORD v5[6];
  _QWORD aBlock[6];

  aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  aBlock[5] = 0;
  v0 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_35_0;
  v1 = _Block_copy(aBlock);
  v2 = _Block_copy(v1);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v2;
  v5[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
  v5[5] = v3;
  v5[0] = v0;
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v5[3] = &block_descriptor_42_1;
  v4 = _Block_copy(v5);
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v4);
  _Block_release(v1);
}

uint64_t closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[6];
  _QWORD aBlock[7];
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v10, (uint64_t)v29);
  v11 = v30;
  v12 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12) & 1) != 0)
    v13 = 0;
  else
    v13 = 3;
  outlined init with copy of __REAssetService((uint64_t)v29, (uint64_t)aBlock);
  LOBYTE(v27[0]) = v13;
  v14 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(aBlock);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v15 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v16 + v15, (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(_QWORD *)(v16 + ((v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8)) = v14;
  aBlock[4] = partial apply for closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:);
  aBlock[5] = v16;
  v17 = MEMORY[0x24BDAC760];
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_32;
  v18 = _Block_copy(aBlock);
  v19 = _Block_copy(v18);
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v19;
  v27[4] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ();
  v27[5] = v20;
  v27[0] = v17;
  v27[1] = 1107296256;
  v27[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v27[3] = &block_descriptor_8_0;
  v21 = _Block_copy(v27);
  swift_retain_n();
  swift_release();
  REAssetLoadRequestSetCompletionHandler();
  _Block_release(v21);
  _Block_release(v18);
  swift_release();
  v22 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v6, 1, 1, v22);
  type metadata accessor for MainActor();
  swift_retain();
  swift_bridgeObjectRetain();
  v23 = static MainActor.shared.getter();
  v24 = (_QWORD *)swift_allocObject();
  v25 = MEMORY[0x24BEE6930];
  v24[2] = v23;
  v24[3] = v25;
  v24[4] = a2;
  v24[5] = v14;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:), (uint64_t)v24);
  swift_release();
  swift_release_n();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
}

void closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(char a1)
{
  __CFError *RequestCopyError;
  __CFError *v2;
  CFIndex Code;
  uint64_t v4;
  __CFError **v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[6];
  _QWORD aBlock[6];

  if ((a1 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
LABEL_12:
    aBlock[4] = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
    aBlock[5] = 0;
    v6 = MEMORY[0x24BDAC760];
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_15;
    v7 = _Block_copy(aBlock);
    v8 = _Block_copy(v7);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    v11[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
    v11[5] = v9;
    v11[0] = v6;
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    v11[3] = &block_descriptor_22_1;
    v10 = _Block_copy(v11);
    swift_release();
    REAssetLoadRequestSetCompletionHandler();
    _Block_release(v10);
    _Block_release(v7);
    return;
  }
  RequestCopyError = (__CFError *)REAssetLoadRequestCopyError();
  if (RequestCopyError)
  {
    v2 = RequestCopyError;
    Code = CFErrorGetCode(RequestCopyError);
    if (Code == 300 || Code == 200)
    {
      type metadata accessor for Entity.LoadError(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
      v4 = swift_allocError();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (Code != 100)
      {
        type metadata accessor for CFErrorRef(0);
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
        v4 = swift_allocError();
        *v5 = v2;
        goto LABEL_11;
      }
      type metadata accessor for CancellationError();
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
      v4 = swift_allocError();
      CancellationError.init()();
    }

LABEL_11:
    aBlock[0] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(throwing:)();
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for MainActor();
  v5[4] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (_QWORD *)(*(_QWORD *)(v0 + 16) + 32);
    swift_bridgeObjectRetain();
    do
    {
      v4 = *(_QWORD *)(v0 + 24);
      v5 = v3[3];
      v6 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v5, v6);
      v3 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t withUnsafeOptOutOfFlickerMitigations<A>(_:file:line:)()
{
  if (one-time initialization token for $clientIsOptingOutOfFlickerMitigations != -1)
    swift_once();
  return TaskLocal.withValue<A>(_:operation:file:line:)();
}

uint64_t LoadRequest<A>.Fulfiller.__deallocating_deinit()
{
  uint64_t v0;

  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t LoadRequest<A>.CancellableHolder.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of BodyTrackingComponent?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return swift_deallocClassInstance();
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = MEMORY[0x24BEE4AF8];
    while (v4 < *(_QWORD *)(a1 + 16))
    {
      v8 = *(_BYTE *)(a1 + v4 + 32);
      v11 = v8;
      closure #1 in closure #1 in variable initialization expression of static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits(&v11);
      if (v1)
      {
        swift_release();
        goto LABEL_14;
      }
      if ((v9 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v12 = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1);
          v5 = v12;
        }
        v7 = *(_QWORD *)(v5 + 16);
        v6 = *(_QWORD *)(v5 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          v5 = v12;
        }
        *(_QWORD *)(v5 + 16) = v7 + 1;
        *(_BYTE *)(v5 + v7 + 32) = v8;
      }
      if (v3 == ++v4)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (*v12)();
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD v28[6];
  _QWORD aBlock[3];
  void *v30;
  void (*v31)();
  uint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v4, (uint64_t)v33);
  v5 = v34;
  v6 = v35;
  __swift_project_boxed_opaque_existential_1(v33, v34);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 64))(v5, v6) & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {
      v27 = a1;
      v8 = a1 + 32;
      swift_bridgeObjectRetain();
      v9 = v7;
      while (1)
      {
        outlined init with copy of __REAssetService(v8, (uint64_t)aBlock);
        if (one-time initialization token for categoriesSupportingResourceSharingBeforeECSCommits != -1)
          swift_once();
        v10 = static RequestLoadableUtilities.categoriesSupportingResourceSharingBeforeECSCommits;
        v11 = v30;
        v12 = v31;
        __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v30);
        (*((void (**)(_QWORD *__return_ptr, void *, void (*)()))v12 + 1))(v28, v11, v12);
        v13 = specialized Set.contains(_:)(v28[0], v10);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
        if ((v13 & 1) == 0)
          break;
        v8 += 40;
        if (!--v9)
        {
          a1 = v27;
          swift_bridgeObjectRelease();
          v2 = v1;
          goto LABEL_10;
        }
      }
      a1 = v27;
      swift_bridgeObjectRelease();
      v14 = 0;
      v2 = v1;
    }
    else
    {
LABEL_10:
      if (one-time initialization token for $clientIsOptingOutOfFlickerMitigations != -1)
        swift_once();
      TaskLocal.get()();
      v14 = LOBYTE(aBlock[0]) ^ 1;
    }
    v15 = v14 & 1;
    outlined init with copy of __REAssetService((uint64_t)v33, (uint64_t)aBlock);
    LOBYTE(v28[0]) = v15;
    v16 = specialized __AssetLoadRequest.__allocating_init(assetService:resourceSharingScheduling:)(aBlock);
    if (!v2)
    {
      v17 = v16;
      v31 = partial apply for closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:);
      v32 = v16;
      v18 = MEMORY[0x24BDAC760];
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      v30 = &block_descriptor_25;
      v19 = _Block_copy(aBlock);
      v20 = _Block_copy(v19);
      v21 = swift_allocObject();
      *(_QWORD *)(v21 + 16) = v20;
      v28[4] = thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> ()partial apply;
      v28[5] = v21;
      v28[0] = v18;
      v28[1] = 1107296256;
      v28[2] = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
      v28[3] = &block_descriptor_32_0;
      v22 = _Block_copy(v28);
      swift_retain();
      swift_release();
      REAssetLoadRequestSetCompletionHandler();
      _Block_release(v22);
      _Block_release(v19);
      swift_release();
      if (v7)
      {
        v23 = (_QWORD *)(a1 + 32);
        swift_bridgeObjectRetain();
        do
        {
          v24 = v23[3];
          v25 = v23[4];
          __swift_project_boxed_opaque_existential_1(v23, v24);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v17, v24, v25);
          v23 += 5;
          --v7;
        }
        while (v7);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
}

unint64_t lazy protocol witness table accessor for type [NetworkSendBlockingCategory] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NetworkSendBlockingCategory]);
    result = MEMORY[0x220772E3C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NetworkSendBlockingCategory] and conformance [A]);
  }
  return result;
}

uint64_t type metadata accessor for LoadUtilities()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for NetworkSendBlockingCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_21BCBC6F0 + 4 * byte_21BE6F42F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_21BCBC724 + 4 * byte_21BE6F42A[v4]))();
}

uint64_t sub_21BCBC724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCBC72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCBC734);
  return result;
}

uint64_t sub_21BCBC740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCBC748);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_21BCBC74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCBC754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NetworkSendBlockingCategory()
{
  return &type metadata for NetworkSendBlockingCategory;
}

uint64_t dispatch thunk of RequestLoadable.networkSendBlockingCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of RequestLoadable.addToLoadRequest(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t type metadata accessor for RequestLoadableUtilities()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for LoadRequest<A>.Fulfiller()
{
  return type metadata completion function for LoadRequest<A>.Fulfiller();
}

{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for LoadRequest<A>.Fulfiller(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadRequest<A>.Fulfiller);
}

uint64_t type metadata completion function for LoadRequest<A>.CancellableHolder()
{
  return type metadata completion function for LoadRequest<A>.Fulfiller();
}

uint64_t type metadata accessor for LoadRequest<A>.CancellableHolder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LoadRequest<A>.CancellableHolder);
}

uint64_t specialized static LoadUtilities.convertCFErrorToEntityLoadError(error:)(__CFError *a1)
{
  CFIndex Code;
  uint64_t v3;
  __CFError **v4;
  __CFError *v5;

  Code = CFErrorGetCode(a1);
  if (Code == 300 || Code == 200)
    goto LABEL_8;
  if (Code != 100)
  {
    if (a1)
    {
      type metadata accessor for CFErrorRef(0);
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
      v3 = swift_allocError();
      *v4 = a1;
      v5 = a1;
      return v3;
    }
LABEL_8:
    type metadata accessor for Entity.LoadError(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type Entity.LoadError and conformance Entity.LoadError, type metadata accessor for Entity.LoadError, (uint64_t)&protocol conformance descriptor for Entity.LoadError);
    v3 = swift_allocError();
    swift_storeEnumTagMultiPayload();
    return v3;
  }
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
  v3 = swift_allocError();
  CancellationError.init()();
  return v3;
}

uint64_t specialized static LoadUtilities.isUSDPathExtension(pathExtension:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  if (one-time initialization token for usdExtensions != -1)
    swift_once();
  v4 = static LoadUtilities.usdExtensions;
  v5 = *(_QWORD *)(static LoadUtilities.usdExtensions + 16);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(static LoadUtilities.usdExtensions + 32) == a1
    && *(_QWORD *)(static LoadUtilities.usdExtensions + 40) == a2;
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 1;
  if (v5 == 1)
    return 0;
  if (*(_QWORD *)(v4 + 48) == a1 && *(_QWORD *)(v4 + 56) == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v5 == 2)
    return 0;
  v9 = (_QWORD *)(v4 + 72);
  for (i = 2; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v5)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_21BCBCAE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(char a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  closure #2 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1);
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t sub_21BCBCBC8()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in TextureResource.init(contentsOf:withName:options:);
  return closure #3 in closure #1 in static RequestLoadableUtilities.awaitForResourceSharing(_:)(a1, v4, v5, v7, v6);
}

uint64_t sub_21BCBCC74()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)()
{
  closure #2 in static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)();
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(ValueMetadata *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a1, 0, a1, a2, a3);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t v5;

  specialized Entity.ComponentSet.subscript.setter(a1, a2, a3, a4);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
}

uint64_t Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, ValueMetadata *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t Component;
  int v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;

  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a4 + 80))(&v16, a3, a4);
  if (a3 == &type metadata for ModelComponent)
  {
    Component = REEntityGetComponent();
    if (Component)
    {
      *(_QWORD *)&v14 = Component;
      static ModelComponent.__fromCore(_:borrowStrongReference:)((uint64_t *)&v14, a2 & 1, (uint64_t *)&v16);
      v14 = v16;
      v15 = v17;
      v12 = swift_dynamicCast();
      return storeEnumTagSinglePayload for CustomMaterial.BaseColor(a5, v12 ^ 1u, 1);
    }
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a3[-1].Description + 7))(a5, 1, 1, a3);
  }
  if ((_DWORD)v16 != 36)
  {
    v13 = REEntityGetComponent();
    if (v13)
    {
      *(_QWORD *)&v16 = v13;
      (*(void (**)(__int128 *, ValueMetadata *, uint64_t))(a4 + 64))(&v16, a3, a4);
      return (*((uint64_t (**)(uint64_t, _QWORD, uint64_t, ValueMetadata *))a3[-1].Description + 7))(a5, 0, 1, a3);
    }
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a3[-1].Description + 7))(a5, 1, 1, a3);
  }
  specialized static SceneManager.customComponentType(_:)(a1, a4);
  if (!REEntityGetCustomComponent())
    return (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, ValueMetadata *))a3[-1].Description + 7))(a5, 1, 1, a3);
  result = RECustomComponentGetObject();
  if (result)
  {
    (*(void (**)(uint64_t, ValueMetadata *, uint64_t))(a4 + 32))(result, a3, a4);
    return (*((uint64_t (**)(uint64_t, _QWORD, uint64_t, ValueMetadata *))a3[-1].Description + 7))(a5, 0, 1, a3);
  }
  __break(1u);
  return result;
}

uint64_t Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(uint64_t a1, uint64_t a2, int a3, ValueMetadata *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int (**Description)(char *, uint64_t, ValueMetadata *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char *v29;
  uint64_t Object;
  uint64_t v31;
  uint64_t *boxed_opaque_existential_1;
  char *v33;
  uint64_t ComponentByClass;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41[2];
  int v42;
  ValueMetadata *v43;
  uint64_t v44;
  uint64_t v45[3];
  int v46;

  LODWORD(v37) = a3;
  v40 = a1;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v36 - v14;
  Description = (unsigned int (**)(char *, uint64_t, ValueMetadata *))a4[-1].Description;
  MEMORY[0x24BDAC7A8](v17);
  v39 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v36 = (char *)&v36 - v20;
  v22 = MEMORY[0x24BDAC7A8](v21);
  v38 = (char *)&v36 - v23;
  v24 = *(char **)(*(_QWORD *)v5 + 16);
  (*(void (**)(uint64_t *__return_ptr, ValueMetadata *, uint64_t, __n128))(a5 + 80))(v41, a4, a5, v22);
  if (LODWORD(v41[0]) != 36)
  {
    result = REComponentClassFromType();
    if (!result)
      return result;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, a2, v9);
    if (Description[6](v15, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return REEntityRemoveComponentByClass();
    }
    v33 = v38;
    Description[4](v38, (uint64_t)v15, a4);
    ComponentByClass = REEntityGetComponentByClass();
    v35 = ComponentByClass;
    if (!ComponentByClass)
    {
      v35 = REEntityAddComponentNoEvents();
      if (!v35)
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v33, a4);
    }
    if (a4 == &type metadata for ModelComponent)
    {
      Description[2](v36, (uint64_t)v33, &type metadata for ModelComponent);
      swift_dynamicCast();
      v45[1] = v41[0];
      v45[2] = v41[1];
      v46 = v42;
      v45[0] = v35;
      ModelComponent.__toCore(_:returnStrongReference:)(v45, v37 & 1);
      swift_bridgeObjectRelease();
      swift_release();
      if (ComponentByClass)
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v33, a4);
    }
    else
    {
      v41[0] = v35;
      (*(void (**)(uint64_t *, ValueMetadata *, uint64_t))(a5 + 72))(v41, a4, a5);
      if (ComponentByClass)
        return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v33, a4);
    }
    REEntitySendAddAndActivateComponentEvents();
    return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v33, a4);
  }
  v25 = specialized static SceneManager.customComponentType(_:)(v40, a5);
  v38 = v24;
  v26 = REEntityGetComponentByClass();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  if (Description[6](v12, 1, a4) == 1)
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if (v26)
      return REEntityRemoveComponentByClass();
  }
  else
  {
    v37 = v25;
    v28 = a5;
    v29 = v39;
    Description[4](v39, (uint64_t)v12, a4);
    if (v26 || REEntityAddComponentNoEvents())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v31 = Object;
        v43 = a4;
        v44 = v28;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
        Description[2]((char *)boxed_opaque_existential_1, (uint64_t)v29, a4);
        (*(void (**)(uint64_t *, uint64_t, _QWORD, BOOL, ValueMetadata *, uint64_t))(v28 + 40))(v41, v31, 0, v26 != 0, a4, v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
        if (!v26)
          REEntitySendAddAndActivateComponentEvents();
        RENetworkMarkComponentDirty();
      }
    }
    return ((uint64_t (*)(char *, ValueMetadata *))Description[1])(v29, a4);
  }
  return result;
}

BOOL Entity.ComponentSet.has(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t CustomComponent;
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 80))(&v6);
  if ((_DWORD)v6 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a1, a2);
    CustomComponent = REEntityGetCustomComponent();
  }
  else
  {
    CustomComponent = REEntityGetComponent();
  }
  return CustomComponent != 0;
}

uint64_t Entity.ComponentSet.set<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (**Description)(char *, _QWORD, ValueMetadata *, __n128);
  _QWORD v14[2];

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v14 - v10;
  v14[1] = *v3;
  Description = (void (**)(char *, _QWORD, ValueMetadata *, __n128))a2[-1].Description;
  Description[2]((char *)v14 - v10, a1, a2, v9);
  ((void (*)(char *, _QWORD, uint64_t, ValueMetadata *))Description[7])(v11, 0, 1, a2);
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a2, (uint64_t)v11, 0, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t Entity.ComponentSet.count.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t Shared;
  uint64_t v8;
  _QWORD *v9;
  uint64_t Default;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt Class;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[6];

  v1 = *v0;
  if (REEntityGetComponentCount() < 1)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    do
    {
      v40[0] = v1;
      if (Entity.ComponentSet.isComponentInTheSwiftAPI(atIndex:)())
        break;
      ++v2;
    }
    while (v2 < REEntityGetComponentCount());
  }
  result = REEntityGetComponentCount();
  if (result < v2)
    goto LABEL_64;
  v4 = result;
  if (v2 != result)
  {
    v5 = 0;
    v38 = result;
    while (1)
    {
      v6 = __OFADD__(v5++, 1);
      if (v6)
        goto LABEL_62;
      v6 = __OFADD__(v2++, 1);
      if (v6)
        break;
      result = REEntityGetComponentCount();
      if (v2 < result)
      {
        while (1)
        {
          Shared = REEngineGetShared();
          if (Shared)
          {
            v8 = Shared;
            if (one-time initialization token for lock != -1)
              swift_once();
            os_unfair_lock_lock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            if (!static __ServiceLocator.sharedEngine || *((_QWORD *)static __ServiceLocator.sharedEngine + 3) != v8)
            {
              type metadata accessor for __Engine();
              swift_allocObject();
              static __ServiceLocator.sharedEngine = __Engine.init(coreEngine:)(v8);
              swift_release();
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
              specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)(static __ServiceLocator.lock + 16));
            v9 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine)
              goto LABEL_43;
          }
          else
          {
            static __ServiceLocator.sharedEngine = 0;
            swift_release();
            v9 = static __ServiceLocator.sharedEngine;
            if (static __ServiceLocator.sharedEngine)
              goto LABEL_43;
          }
          Default = REEngineConfigurationCreateDefault();
          type metadata accessor for EngineConfiguration();
          v11 = swift_allocObject();
          *(_QWORD *)(v11 + 16) = Default;
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v12 = REEngineConfigurationClone();
            v13 = swift_allocObject();
            *(_QWORD *)(v13 + 16) = v12;
            swift_release_n();
            v11 = v13;
          }
          REEngineConfigurationSetClockMode();
          if (one-time initialization token for defaultServices != -1)
            swift_once();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v14 = REEngineConfigurationClone();
            v15 = swift_allocObject();
            *(_QWORD *)(v15 + 16) = v14;
            swift_release_n();
            v11 = v15;
          }
          REEngineConfigurationSetServicesToCreate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v16 = REEngineConfigurationClone();
            v17 = swift_allocObject();
            *(_QWORD *)(v17 + 16) = v16;
            swift_release_n();
            v11 = v17;
          }
          REEngineConfigurationSetServicesToUpdate();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v18 = REEngineConfigurationClone();
            v19 = swift_allocObject();
            *(_QWORD *)(v19 + 16) = v18;
            swift_release_n();
            v11 = v19;
          }
          REEngineConfigurationSetStartupOptions();
          if (one-time initialization token for defaultRenderFlags != -1)
            swift_once();
          if ((int)REGetRetainCount() >= 2)
          {
            swift_retain();
            v20 = REEngineConfigurationClone();
            v21 = swift_allocObject();
            *(_QWORD *)(v21 + 16) = v20;
            swift_release_n();
            v11 = v21;
          }
          REEngineConfigurationSetRenderFlags();
          if (!specialized static __ServiceLocator.__sharedEngine.getter())
          {
            v40[0] = v11;
            v22 = specialized static __Engine.makeSharedEngine(_:)(v40);
            REEngineSetShared();
            static __ServiceLocator.sharedEngine = v22;
            swift_release();
            static __ServiceLocator.createdSharedEngine = 1;
          }
          swift_release();
          specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
          result = specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
          v9 = static __ServiceLocator.sharedEngine;
          if (!static __ServiceLocator.sharedEngine)
            goto LABEL_66;
LABEL_43:
          result = swift_beginAccess();
          v23 = v9[5];
          if (!v23)
            goto LABEL_65;
          v24 = v23 + 80;
          swift_beginAccess();
          outlined init with copy of __REAssetService(v24, (uint64_t)v40);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __SceneService);
          type metadata accessor for SceneManager();
          swift_dynamicCast();
          REEntityGetComponentAtIndex();
          Class = REComponentGetClass();
          swift_beginAccess();
          v26 = *(_QWORD *)(v39 + 16);
          swift_beginAccess();
          v27 = *(_QWORD *)(v26 + 24);
          if (*(_QWORD *)(v27 + 16) && (v28 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v29 & 1) != 0))
          {
            v30 = *(unsigned __int8 *)(*(_QWORD *)(v27 + 56) + 80 * v28 + 48);
            result = swift_release();
            if (v30 == 2)
              goto LABEL_12;
          }
          else
          {
            if (one-time initialization token for handlesToCustomComponentTypes != -1)
              swift_once();
            swift_beginAccess();
            v31 = static SceneManager.handlesToCustomComponentTypes;
            if (*(_QWORD *)(static SceneManager.handlesToCustomComponentTypes + 16)
              && (v32 = specialized __RawDictionaryStorage.find<A>(_:)(Class), (v33 & 1) != 0))
            {
              v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 16 * v32);
              swift_endAccess();
              v35 = *(_QWORD *)(v39 + 16);
              swift_beginAccess();
              if (!*(_QWORD *)(*(_QWORD *)(v35 + 16) + 16)
                || (specialized __RawDictionaryStorage.find<A>(_:)(v34), (v36 & 1) == 0))
              {
                result = swift_release();
                goto LABEL_12;
              }
            }
            else
            {
              swift_endAccess();
            }
            result = swift_release();
          }
          v37 = v2 + 1;
          if (__OFADD__(v2, 1))
          {
            __break(1u);
LABEL_62:
            __break(1u);
            goto LABEL_63;
          }
          result = REEntityGetComponentCount();
          ++v2;
          if (v37 >= result)
          {
            v2 = v37;
LABEL_12:
            v4 = v38;
            break;
          }
        }
      }
      if (v2 == v4)
        return v5;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    return result;
  }
  return 0;
}

double Entity.ComponentSet.existentialBox(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t Object;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t Component;
  void (*v11)(uint64_t *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 80))(&v13);
  if ((_DWORD)v13 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a1, a2);
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v7 = Object;
        v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
        *(_QWORD *)(a3 + 24) = a1;
        *(_QWORD *)(a3 + 32) = a2;
        __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
        v8(v7, a1, a2);
        return result;
      }
    }
  }
  else
  {
    Component = REEntityGetComponent();
    if (Component)
    {
      v12 = Component;
      v11 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a2 + 64);
      *(_QWORD *)(a3 + 24) = a1;
      *(_QWORD *)(a3 + 32) = a2;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
      v11(&v12, a1, a2);
      return result;
    }
  }
  *(_QWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t Entity.ComponentSet.entity.getter()
{
  return swift_retain();
}

void (*Entity.ComponentSet.subscript.modify(_QWORD *a1, uint64_t a2, ValueMetadata *a3, uint64_t a4))(ValueMetadata ***a1, char a2)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;

  v8 = malloc(0x38uLL);
  *a1 = v8;
  v8[1] = a4;
  v8[2] = v4;
  *v8 = a3;
  v9 = type metadata accessor for Optional();
  v8[3] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[4] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v8[5] = malloc(v11);
  v12 = malloc(v11);
  v8[6] = v12;
  Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a3, 1, a3, a4, (uint64_t)v12);
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(ValueMetadata ***a1, char a2)
{
  ValueMetadata **v2;
  ValueMetadata *v3;
  ValueMetadata *v4;
  ValueMetadata *v5;
  ValueMetadata *v6;
  uint64_t v7;
  ValueMetadata *v8;
  void (*Description)(ValueMetadata *, ValueMetadata *);

  v2 = *a1;
  v3 = (*a1)[5];
  v4 = (*a1)[6];
  v5 = (*a1)[3];
  v6 = (*a1)[4];
  if ((a2 & 1) != 0)
  {
    ((void (*)(ValueMetadata *, ValueMetadata *))v6->Description)(v4, v5);
  }
  else
  {
    v7 = (uint64_t)v2[1];
    v8 = *v2;
    ((void (*)(ValueMetadata *, ValueMetadata *, ValueMetadata *))v6[1].Kind)(v3, v4, v5);
    swift_retain();
    Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)v8, (uint64_t)v3, 1, v8, v7);
    Description = (void (*)(ValueMetadata *, ValueMetadata *))v6->Description;
    Description(v3, v5);
    swift_release();
    Description(v4, v5);
  }
  free(v4);
  free(v3);
  free(v2);
}

double Entity.ComponentSet.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.existentialBox(for:)(a1, a2, a3);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  swift_retain();
  Entity.ComponentSet.doSetExistential(_:newValue:)(a2, a3, a1);
  outlined destroy of Component?(a1);
  return swift_release();
}

uint64_t Entity.ComponentSet.doSetExistential(_:newValue:)(ValueMetadata *a1, uint64_t a2, uint64_t a3)
{
  uint64_t CustomComponent;
  uint64_t Object;
  uint64_t result;
  uint64_t ComponentByClass;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13[3];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(_QWORD *__return_ptr))(a2 + 80))(v20);
  if (LODWORD(v20[0]) != 36)
  {
    result = REComponentClassFromType();
    if (!result)
      return result;
    outlined init with copy of Component?(a3, (uint64_t)&v18);
    if (!v19)
    {
      outlined destroy of Component?((uint64_t)&v18);
      return REEntityRemoveComponentByClass();
    }
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    ComponentByClass = REEntityGetComponentByClass();
    v10 = ComponentByClass;
    if (ComponentByClass || (v10 = REEntityAddComponentNoEvents()) != 0)
    {
      if (a1 == &type metadata for ModelComponent)
      {
        outlined init with copy of __REAssetService((uint64_t)v20, (uint64_t)&v18);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component);
        swift_dynamicCast();
        v13[1] = v15;
        v13[2] = v16;
        v14 = v17;
        v13[0] = v10;
        ModelComponent.__toCore(_:returnStrongReference:)(v13, 0);
        swift_bridgeObjectRelease();
        swift_release();
        if (ComponentByClass)
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      }
      else
      {
        v11 = v21;
        v12 = v22;
        __swift_project_boxed_opaque_existential_1(v20, v21);
        *(_QWORD *)&v18 = v10;
        (*(void (**)(__int128 *, uint64_t, uint64_t))(v12 + 72))(&v18, v11, v12);
        if (ComponentByClass)
          return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      }
    }
    REEntitySendAddAndActivateComponentEvents();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  specialized static SceneManager.customComponentType(_:)((uint64_t)a1, a2);
  CustomComponent = REEntityGetCustomComponent();
  outlined init with copy of Component?(a3, (uint64_t)&v18);
  if (v19)
  {
    outlined init with take of BindableDataInternal(&v18, (uint64_t)v20);
    if (CustomComponent || REEntityAddComponentNoEvents())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        (*(void (**)(_QWORD *, uint64_t, _QWORD, BOOL, ValueMetadata *, uint64_t))(a2 + 40))(v20, Object, 0, CustomComponent != 0, a1, a2);
        if (!CustomComponent)
          REEntitySendAddAndActivateComponentEvents();
        RENetworkMarkComponentDirty();
      }
    }
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  }
  result = outlined destroy of Component?((uint64_t)&v18);
  if (CustomComponent)
    return REEntityRemoveComponentByClass();
  return result;
}

void (*Entity.ComponentSet.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(_QWORD **a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t Object;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t Component;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = malloc(0x68uLL);
  *a1 = v8;
  v9 = v8 + 5;
  v8[11] = a3;
  v8[12] = v4;
  v8[10] = a2;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 80))(&v18, a2, a3);
  v10 = v18;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  v8[4] = 0;
  if (v10 == 36)
  {
    specialized static SceneManager.customComponentType(_:)(a2, a3);
    if (REEntityGetCustomComponent())
    {
      Object = RECustomComponentGetObject();
      if (Object)
      {
        v12 = Object;
        v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 32);
        v8[8] = a2;
        v8[9] = a3;
        __swift_allocate_boxed_opaque_existential_1(v9);
        v13(v12, a2, a3);
LABEL_7:
        outlined assign with take of Component?((uint64_t)v9, (uint64_t)v8);
      }
    }
  }
  else
  {
    Component = REEntityGetComponent();
    if (Component)
    {
      v17 = Component;
      v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(a3 + 64);
      v8[8] = a2;
      v8[9] = a3;
      __swift_allocate_boxed_opaque_existential_1(v9);
      v15(&v17, a2, a3);
      goto LABEL_7;
    }
  }
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(_QWORD **a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  ValueMetadata *v4;

  v2 = *a1;
  if ((a2 & 1) == 0)
  {
    v3 = v2[11];
    v4 = (ValueMetadata *)v2[10];
    outlined init with copy of Component?((uint64_t)v2, (uint64_t)(v2 + 5));
    swift_retain();
    Entity.ComponentSet.doSetExistential(_:newValue:)(v4, v3, (uint64_t)(v2 + 5));
    outlined destroy of Component?((uint64_t)(v2 + 5));
    swift_release();
  }
  outlined destroy of Component?((uint64_t)v2);
  free(v2);
}

Swift::Void __swiftcall Entity.ComponentSet.set(_:)(Swift::OpaquePointer a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  ValueMetadata *DynamicType;
  uint64_t v6;
  _QWORD v7[6];

  v2 = *((_QWORD *)a1._rawValue + 2);
  if (v2)
  {
    v3 = *v1;
    v4 = (char *)a1._rawValue + 32;
    swift_bridgeObjectRetain();
    do
    {
      v7[5] = v3;
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      DynamicType = (ValueMetadata *)swift_getDynamicType();
      v6 = v4[4];
      outlined init with copy of __REAssetService((uint64_t)v4, (uint64_t)v7);
      Entity.ComponentSet.doSetExistential(_:newValue:)(DynamicType, v6, (uint64_t)v7);
      outlined destroy of Component?((uint64_t)v7);
      v4 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t Entity.ComponentSet.remove(_:)(ValueMetadata *a1, uint64_t a2)
{
  uint64_t *v2;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v6 = *v2;
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  Entity.ComponentSet.doSetExistential(_:newValue:)(a1, a2, (uint64_t)v4);
  return outlined destroy of Component?((uint64_t)v4);
}

Swift::Void __swiftcall Entity.ComponentSet.removeAll()()
{
  REEntityRemoveAllComponents();
}

uint64_t Entity.ComponentSet.publisher<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object;
  uint64_t v6;
  uint64_t v7;

  specialized static SceneManager.customComponentType(_:)(a1, *(_QWORD *)(a3 + 8));
  if (!REEntityGetCustomComponent())
    return 0;
  Object = RECustomComponentGetObject();
  if (!Object)
    return 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 24))(Object, a2, a3);
  v6 = type metadata accessor for CurrentValueSubject();
  MEMORY[0x220772E3C](MEMORY[0x24BDB9D10], v6);
  v7 = Publisher.eraseToAnyPublisher()();
  swift_release();
  return v7;
}

uint64_t Entity.ComponentSet.subscript.getter@<X0>(void (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, ValueMetadata *a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (**Description)(_QWORD, char *, ValueMetadata *);
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  _QWORD v20[2];
  void (*v21)(uint64_t);
  uint64_t v22;

  v20[1] = a2;
  v21 = a1;
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v20 - v14;
  v22 = *v5;
  Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a3, 0, a3, a4, (uint64_t)v20 - v14);
  Description = (uint64_t (**)(_QWORD, char *, ValueMetadata *))a3[-1].Description;
  if (((uint64_t (**)(char *, char *, ValueMetadata *))Description)[6](v15, (char *)1, a3) != 1)
    return ((uint64_t (**)(char *, char *, ValueMetadata *))Description)[4](a5, v15, a3);
  v17 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v18 = v17(v15, v9);
  v21(v18);
  ((uint64_t (**)(char *, char *, ValueMetadata *))Description)[2](v12, a5, a3);
  ((void (*)(char *, _QWORD, uint64_t, ValueMetadata *))Description[7])(v12, 0, 1, a3);
  v22 = *v5;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, (uint64_t)v12, 0, a3, a4);
  return v17(v12, v9);
}

uint64_t Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ValueMetadata *a5, uint64_t a6)
{
  specialized Entity.ComponentSet.subscript.setter(a1, a2, a5, a6);
  return (*((uint64_t (**)(uint64_t, ValueMetadata *))a5[-1].Description + 1))(a1, a5);
}

void (*Entity.ComponentSet.subscript.modify(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, ValueMetadata *a5, uint64_t a6))(uint64_t **a1, char a2)
{
  uint64_t v6;
  _QWORD *v13;
  _QWORD *Description;
  size_t v15;
  char *v16;

  v13 = malloc(0x38uLL);
  *a1 = v13;
  v13[2] = a6;
  v13[3] = v6;
  *v13 = a2;
  v13[1] = a5;
  Description = a5[-1].Description;
  v13[4] = Description;
  v15 = Description[8];
  v13[5] = malloc(v15);
  v16 = (char *)malloc(v15);
  v13[6] = v16;
  Entity.ComponentSet.subscript.getter(a3, a4, a5, a6, v16);
  return Entity.ComponentSet.subscript.modify;
}

void Entity.ComponentSet.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void *, ValueMetadata *);

  v2 = *a1;
  v3 = (void *)(*a1)[5];
  v4 = (void *)(*a1)[6];
  v5 = (*a1)[4];
  v6 = (ValueMetadata *)(*a1)[1];
  v7 = (*a1)[2];
  v8 = **a1;
  if ((a2 & 1) != 0)
  {
    (*(void (**)(uint64_t, void *, ValueMetadata *))(v5 + 16))((*a1)[5], v4, v6);
    specialized Entity.ComponentSet.subscript.setter((uint64_t)v3, v8, v6, v7);
    v9 = *(void (**)(void *, ValueMetadata *))(v5 + 8);
    v9(v3, v6);
  }
  else
  {
    specialized Entity.ComponentSet.subscript.setter((*a1)[6], v8, v6, v7);
    v9 = *(void (**)(void *, ValueMetadata *))(v5 + 8);
  }
  v9(v4, v6);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Entity._getComponent<A>()@<X0>(ValueMetadata *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)a1, 0, a1, a2, a3);
}

uint64_t Entity._setComponent<A>(_:)(uint64_t a1, ValueMetadata *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (**Description)(char *, _QWORD, ValueMetadata *, __n128);
  uint64_t v14;
  uint64_t v15;

  v7 = type metadata accessor for Optional();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v14 - v10;
  Description = (void (**)(char *, _QWORD, ValueMetadata *, __n128))a2[-1].Description;
  Description[2]((char *)&v14 - v10, a1, a2, v9);
  ((void (*)(char *, _QWORD, uint64_t, ValueMetadata *))Description[7])(v11, 0, 1, a2);
  v15 = v3;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a2, (uint64_t)v11, 0, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t specialized Entity.ComponentSet.subscript.setter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  return Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, a1, 0, a3, a4);
}

{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void (**Description)(char *, _QWORD, ValueMetadata *, __n128);
  _QWORD v15[2];

  v8 = type metadata accessor for Optional();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v15 - v11;
  Description = (void (**)(char *, _QWORD, ValueMetadata *, __n128))a3[-1].Description;
  Description[2]((char *)v15 - v11, a1, a3, v10);
  ((void (*)(char *, _QWORD, uint64_t, ValueMetadata *))Description[7])(v12, 0, 1, a3);
  v15[1] = *v4;
  Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)((uint64_t)a3, (uint64_t)v12, 0, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t outlined destroy of Component?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of Component?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Component?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for Entity.ComponentSet()
{
  return &type metadata for Entity.ComponentSet;
}

uint64_t REAudioFileAssetConfigurationWrapper.init(configuration:)(char *a1)
{
  uint64_t v1;
  char v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v9;

  v2 = *a1;
  v3 = a1[16];
  v4 = a1[32];
  v6 = *((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 6);
  v9 = a1[60];
  *(_QWORD *)(v1 + 16) = REAudioFileAssetConfigurationCreate();
  if ((v2 & 1) != 0)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  REAudioFileAssetConfigurationSetStreaming();
  REAudioFileAssetConfigurationSetRandomizeStart();
  REAudioFileAssetConfigurationSetShouldLoop();
  if (v5)
  {
    swift_bridgeObjectRetain();
    v7 = (void *)MEMORY[0x220768C3C](v6, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (v4 != 255)
  {
    REAudioFileAssetConfigurationSetCalibrationMode();
    REAudioFileAssetConfigurationSetCalibrationLevel();
  }
  if (v3 - 1 >= 2)
  {
    if (v3)
      goto LABEL_14;
    REAudioFileAssetConfigurationSetNormalizationMode();
    goto LABEL_13;
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (v3 <= 1)
LABEL_13:
    REAudioFileAssetConfigurationSetTargetLUFS();
LABEL_14:
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
    REAudioFileAssetConfigurationSetLayoutTag();
  return v1;
}

uint64_t REAudioFileAssetConfigurationWrapper.init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 60);
  *(_QWORD *)(v1 + 16) = REAudioFileAssetConfigurationCreate();
  REAudioFileAssetConfigurationSetRandomizeStart();
  REAudioFileAssetConfigurationSetShouldLoop();
  if (v4)
  {
    swift_bridgeObjectRetain();
    v7 = (void *)MEMORY[0x220768C3C](v5, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v7 = 0;
  }
  REAudioFileAssetConfigurationSetMixGroupName();

  if (v3 != 255)
    REAudioFileAssetConfigurationSetCalibrationLevel();
  if (v2 - 1 >= 2)
  {
    if (v2)
      goto LABEL_12;
    REAudioFileAssetConfigurationSetNormalizationMode();
    goto LABEL_11;
  }
  REAudioFileAssetConfigurationSetNormalizationMode();
  if (v2 <= 1)
LABEL_11:
    REAudioFileAssetConfigurationSetTargetLUFS();
LABEL_12:
  if (v3 != 255)
    REAudioFileAssetConfigurationSetCalibrationMode();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
    REAudioFileAssetConfigurationSetLayoutTag();
  return v1;
}

uint64_t REAudioFileAssetConfigurationWrapper.__deallocating_deinit()
{
  REAudioFileAssetConfigurationDestroy();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileAssetConfigurationWrapper()
{
  return objc_opt_self();
}

uint64_t REAudioFileConfigurationWrapper.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 56);
  if (v1)

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for REAudioFileConfigurationWrapper()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v39 = a3;
  v46 = a2;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  v38 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v43 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v42 = (char *)&v38 - v9;
  v10 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v41 = (unint64_t)(v11 + 63) >> 6;
  v44 = a1;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  if (!v13)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v47 = v15;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v20 << 6))
  {
    v22 = v44;
    v23 = *(_QWORD *)(v44 + 48);
    v24 = type metadata accessor for UUID();
    v25 = *(_QWORD **)(v24 - 8);
    v26 = v23 + v25[9] * i;
    v27 = (void (*)(char *, uint64_t, uint64_t))v25[2];
    v28 = (uint64_t)v42;
    v27(v42, v26, v24);
    v29 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * i);
    v30 = v45;
    *(_QWORD *)(v28 + *(int *)(v45 + 48)) = v29;
    outlined init with take of Transform?(v28, (uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity));
    v31 = *(int *)(v30 + 48);
    v32 = v43;
    v27(v43, (uint64_t)v7, v24);
    v33 = *(_QWORD *)&v7[v31];
    *(_QWORD *)&v32[v31] = v33;
    v34 = *(_QWORD *)(v33 + 16);
    v35 = *(_QWORD *)(v46 + 16);
    v36 = (void (*)(char *, uint64_t))v25[1];
    swift_retain();
    v36(v32, v24);
    if (v34 == v35)
    {
      swift_release();
      v37 = v39;
      outlined init with take of Transform?((uint64_t)v7, v39, &demangling cache variable for type metadata for (key: UUID, value: Entity));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v37, 0, 1, v45);
      return swift_release();
    }
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity));
    v15 = v47;
    if (v13)
      goto LABEL_4;
LABEL_5:
    v18 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v18 >= v41)
      goto LABEL_25;
    v19 = *(_QWORD *)(v40 + 8 * v18);
    v20 = v15 + 1;
    if (v19)
      goto LABEL_20;
    v20 = v15 + 2;
    if (v15 + 2 >= v41)
      goto LABEL_25;
    v19 = *(_QWORD *)(v40 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v20 = v15 + 3;
    if (v15 + 3 >= v41)
      goto LABEL_25;
    v19 = *(_QWORD *)(v40 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v20 = v15 + 4;
    if (v15 + 4 >= v41)
      goto LABEL_25;
    v19 = *(_QWORD *)(v40 + 8 * v20);
    if (v19)
      goto LABEL_20;
    v21 = v15 + 5;
    if (v15 + 5 >= v41)
    {
LABEL_25:
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v39, 1, 1, v45);
      return swift_release();
    }
    v19 = *(_QWORD *)(v40 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        v20 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_28;
        if (v20 >= v41)
          goto LABEL_25;
        v19 = *(_QWORD *)(v40 + 8 * v20);
        ++v21;
        if (v19)
          goto LABEL_20;
      }
    }
    v20 = v15 + 5;
LABEL_20:
    v13 = (v19 - 1) & v19;
    v47 = v20;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t __RKEntityLookupTable.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return v0;
}

uint64_t __RKEntityLookupTable.init()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  return v0;
}

uint64_t __RKEntityLookupTable.entity(for:)(uint64_t a1)
{
  uint64_t v1;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[7];
  uint64_t v15;
  unint64_t v16;

  v14[4] = 91;
  v14[5] = 0xE100000000000000;
  v15 = 0;
  v16 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 8285;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_release();
  v7 = swift_beginAccess();
  v8 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_retain();
    }
    else
    {
      v11 = 0;
    }
    v7 = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  MEMORY[0x24BDAC7A8](v7);
  v14[2] = v11;
  v14[3] = a1;
  v15 = 91;
  v16 = 0xE100000000000000;
  v12 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v12, &v15, partial apply for implicit closure #1 in __RKEntityLookupTable.entity(for:), v14);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.entity(for:)(uint64_t a1)
{
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(19);
  v2._countAndFlagsBits = 0x6E696E7275746552;
  v2._object = (void *)0xEA00000000002067;
  String.append(_:)(v2);
  if (a1)
  {
    _print_unlocked<A, B>(_:_:)();
    v3 = 0;
    v4 = 0xE000000000000000;
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7104878;
  }
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x20726F6620;
  v6._object = (void *)0xE500000000000000;
  String.append(_:)(v6);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t __RKEntityLookupTable.uuid(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v21[16];
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  Swift::String v25;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity)?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = 91;
  v23 = 0xE100000000000000;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v24 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8285;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_release();
  v12 = v22;
  v11 = (void *)v23;
  swift_beginAccess();
  swift_retain();
  v13 = swift_bridgeObjectRetain();
  specialized Sequence.first(where:)(v13, a1, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v7, 1, v14) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (key: UUID, value: Entity)?);
    v15 = type metadata accessor for UUID();
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  else
  {
    swift_release();
    v17 = type metadata accessor for UUID();
    v18 = *(_QWORD *)(v17 - 8);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v18 + 32))(a2, v7, v17);
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a2, 0, 1, v17);
  }
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)&v21[-16] = a2;
  *(_QWORD *)&v21[-8] = a1;
  v25._countAndFlagsBits = v12;
  v25._object = v11;
  v19 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v19, &v25, partial apply for implicit closure #1 in __RKEntityLookupTable.uuid(for:), &v21[-32]);
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in __RKEntityLookupTable.uuid(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  _QWORD v17[2];
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = 0;
  v20 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v7._countAndFlagsBits = 0x6E696E7275746552;
  v7._object = (void *)0xEA00000000002067;
  String.append(_:)(v7);
  outlined init with copy of UUID?(a1, (uint64_t)v6);
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)v6, &demangling cache variable for type metadata for UUID?);
    v10 = (void *)0xE300000000000000;
    v11 = 7104878;
  }
  else
  {
    v11 = UUID.description.getter();
    v10 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  v13._countAndFlagsBits = v11;
  v13._object = v10;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x20726F6620;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v17[1] = a2;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  String.append(_:)(v15);
  return v19;
}

uint64_t __RKEntityLookupTable.updateEntity(_:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v20 = 91;
  v22 = 0;
  v23 = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8285;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 8250;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  v9 = swift_release();
  if (a1)
  {
    MEMORY[0x24BDAC7A8](v9);
    v18 = a2;
    v19 = a1;
    v20 = v10;
    v21 = 0xE100000000000000;
    swift_retain();
    v11 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v11, &v20, partial apply for implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:), v17);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0x8000000000000000;
    v13 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v2 + 16) = v22;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  else
  {
    MEMORY[0x24BDAC7A8](v9);
    v18 = a2;
    v20 = v14;
    v21 = 0xE100000000000000;
    v15 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v15, &v20, partial apply for implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:), v17);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v13 = specialized Dictionary._Variant.removeValue(forKey:)(a2);
    swift_endAccess();
  }
  return v13;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  _StringGuts.grow(_:)(29);
  v0._object = (void *)0x800000021BE8E9E0;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 540876893;
  v2._object = (void *)0xE400000000000000;
  String.append(_:)(v2);
  _print_unlocked<A, B>(_:_:)();
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityLookupTable.updateEntity(_:for:)()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;

  _StringGuts.grow(_:)(30);
  v0._object = (void *)0x800000021BE8E9E0;
  v0._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v0);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type UUID and conformance UUID();
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x6C696E203D205DLL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  return 0;
}

Swift::Void __swiftcall __RKEntityLookupTable.removeAllEntities()()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  os_log_type_t v6;
  unint64_t v7;
  uint64_t v8[6];

  v1 = v0;
  v8[0] = 91;
  v8[1] = 0xE100000000000000;
  v8[4] = 0;
  v8[5] = 0xE000000000000000;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8285;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_release();
  v6 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v6, v8);
  swift_bridgeObjectRelease();
  v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v7;
  swift_bridgeObjectRelease();
}

uint64_t __RKEntityLookupTable.entity(name:)(int64_t a1, int64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  Swift::String v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  Swift::String v47;
  uint64_t v48;
  Swift::String v49;

  v46 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity)?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v42 - v8;
  v47._countAndFlagsBits = 91;
  v47._object = (void *)0xE100000000000000;
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  v48 = v2;
  swift_retain();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8285;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_release();
  v43 = v47;
  swift_beginAccess();
  v13 = *(_QWORD *)(v2 + 16);
  v14 = *(_QWORD *)(v13 + 64);
  v44 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v42 = v45 - 1;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  if (!v17)
    goto LABEL_6;
LABEL_4:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v21 = v20 | (v19 << 6);
LABEL_5:
  v22 = *(_QWORD *)(v13 + 48);
  v23 = type metadata accessor for UUID();
  (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v6, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v23);
  v24 = *(_QWORD *)(v13 + 56);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
  *(_QWORD *)&v6[*(int *)(v25 + 48)] = *(_QWORD *)(v24 + 8 * v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v6, 0, 1, v25);
  swift_retain();
  while (1)
  {
    outlined init with take of Transform?((uint64_t)v6, (uint64_t)v9, &demangling cache variable for type metadata for (key: UUID, value: Entity)?);
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v9, 1, v30) == 1)
    {
      v37 = swift_release();
      MEMORY[0x24BDAC7A8](v37);
      *(&v42 - 2) = v46;
      *(&v42 - 1) = a2;
      v49 = v43;
      v38 = static os_log_type_t.debug.getter();
      specialized InteractionsLogger.log(_:_:)(v38, &v49, partial apply for implicit closure #2 in __RKEntityLookupTable.entity(name:), &v42 - 4);
      swift_bridgeObjectRelease();
      return 0;
    }
    v31 = *(_QWORD *)&v9[*(int *)(v30 + 48)];
    REEntityGetName();
    if (String.init(cString:)() == v46 && v32 == a2)
      break;
    v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v35 = swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
      goto LABEL_34;
    v36 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v9, v36);
    result = swift_release();
    if (v17)
      goto LABEL_4;
LABEL_6:
    v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v26 < v45)
    {
      v27 = *(_QWORD *)(v44 + 8 * v26);
      if (v27)
        goto LABEL_9;
      v28 = v19 + 2;
      ++v19;
      if (v26 + 1 < v45)
      {
        v27 = *(_QWORD *)(v44 + 8 * v28);
        if (v27)
          goto LABEL_12;
        v19 = v26 + 1;
        if (v26 + 2 < v45)
        {
          v27 = *(_QWORD *)(v44 + 8 * (v26 + 2));
          if (v27)
          {
            v26 += 2;
            goto LABEL_9;
          }
          v28 = v26 + 3;
          v19 = v26 + 2;
          if (v26 + 3 < v45)
          {
            v27 = *(_QWORD *)(v44 + 8 * v28);
            if (!v27)
            {
              while (1)
              {
                v26 = v28 + 1;
                if (__OFADD__(v28, 1))
                  break;
                if (v26 >= v45)
                {
                  v19 = v42;
                  goto LABEL_23;
                }
                v27 = *(_QWORD *)(v44 + 8 * v26);
                ++v28;
                if (v27)
                  goto LABEL_9;
              }
LABEL_37:
              __break(1u);
              return result;
            }
LABEL_12:
            v26 = v28;
LABEL_9:
            v17 = (v27 - 1) & v27;
            v21 = __clz(__rbit64(v27)) + (v26 << 6);
            v19 = v26;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: Entity));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
    v17 = 0;
  }
  v35 = swift_bridgeObjectRelease();
LABEL_34:
  MEMORY[0x24BDAC7A8](v35);
  v39 = v46;
  *(&v42 - 4) = v31;
  *(&v42 - 3) = v39;
  *(&v42 - 2) = a2;
  v49 = v43;
  v40 = static os_log_type_t.debug.getter();
  specialized InteractionsLogger.log(_:_:)(v40, &v49, partial apply for implicit closure #1 in __RKEntityLookupTable.entity(name:), &v42 - 6);
  swift_bridgeObjectRelease();
  swift_release();
  v41 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v9, v41);
  return v31;
}

uint64_t implicit closure #1 in __RKEntityLookupTable.entity(name:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  _StringGuts.grow(_:)(19);
  v5._countAndFlagsBits = 0x6E696E7275746552;
  v5._object = (void *)0xEA00000000002067;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x20726F6620;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = a2;
  v8._object = a3;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t implicit closure #2 in __RKEntityLookupTable.entity(name:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  _StringGuts.grow(_:)(20);
  v4._object = (void *)0x800000021BE8E9C0;
  v4._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v4);
  v5._countAndFlagsBits = a1;
  v5._object = a2;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t __RKEntityLookupTable.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityLookupTable.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.entity(for:)()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityLookupTable.entity(for:)(*(_QWORD *)(v0 + 16));
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = *(_QWORD *)(v20 + 56);
      result = *(_QWORD *)(v21 + 8 * v14);
      *(_QWORD *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = v23;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  specialized _NativeDictionary._insert(at:key:value:)(v14, v11, a1, v20);
  return 0;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = v13 + ((v11 ^ 1) & 1);
  if (__OFADD__(v13, (v11 ^ 1) & 1))
  {
    __break(1u);
  }
  else
  {
    v15 = v11;
    v16 = *(_QWORD *)(v10 + 24);
    if (v16 >= v14 && (a4 & 1) != 0)
    {
LABEL_7:
      v17 = *v5;
      if ((v15 & 1) != 0)
      {
LABEL_8:
        v18 = *(_QWORD *)(v17 + 56);
        result = *(_QWORD *)(v18 + 8 * v12);
        *(_QWORD *)(v18 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v16 >= v14 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v15 & 1) == (v21 & 1))
    {
      v12 = v20;
      v17 = *v5;
      if ((v15 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v17);
      swift_bridgeObjectRetain();
      return 0;
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.uuid(for:)()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityLookupTable.uuid(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for implicit closure #2 in __RKEntityLookupTable.entity(name:)()
{
  uint64_t v0;

  return implicit closure #2 in __RKEntityLookupTable.entity(name:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t partial apply for implicit closure #1 in __RKEntityLookupTable.entity(name:)()
{
  uint64_t v0;

  return implicit closure #1 in __RKEntityLookupTable.entity(name:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t type metadata accessor for __RKEntityLookupTable()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEntityLookupTable()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityLookupTable.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.entity(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.uuid(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.updateEntity(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.removeAllEntities()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of __RKEntityLookupTable.entity(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:)(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      if ((a2 & 1) != 0)
        return makeEntity(for:)(a1);
      v5 = specialized static Entity.entityInfoType(_:)();
      if (!v5)
      {
        return makeEntity(for:)(a1);
      }
      else
      {
        v6 = (*(uint64_t (**)(void))(v5 + 232))();
        v7 = *(_QWORD *)(v6 + 16);
        swift_retain();
        MEMORY[0x22076D160](v7, 0);
        *(_QWORD *)(v6 + 16) = a1;
        MEMORY[0x22076D160](a1, v6);
        swift_release();
        return v6;
      }
    }
  }
  return result;
}

BOOL static Entity.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

uint64_t Entity.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  Entity.init()();
  return v0;
}

uint64_t Entity.boundingBox.getter()
{
  return REEntityComputeMeshBounds();
}

uint64_t Entity.rcSceneEntity.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t Parent;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Parent = REEntityGetParent();
  if (!Parent)
    return 0;
  v4 = Parent;
  if ((id)REEntityGetSwiftObject())
    goto LABEL_10;
  if ((REEntityIsBeingDestroyed() & 1) != 0)
  {
    __break(1u);
LABEL_10:
    type metadata accessor for Entity();
    v8 = swift_dynamicCastClassUnconditional();
    goto LABEL_11;
  }
  v6 = specialized static Entity.entityInfoType(_:)();
  if (v6)
  {
    i = (*(uint64_t (**)(void))(v6 + 232))();
    v7 = *(_QWORD *)(i + 16);
    swift_retain();
    MEMORY[0x22076D160](v7, 0);
    *(_QWORD *)(i + 16) = v4;
    MEMORY[0x22076D160](v4, i);
    swift_release();
    goto LABEL_12;
  }
  v8 = makeEntity(for:)(v4);
LABEL_11:
  for (i = v8; ; i = v15)
  {
LABEL_12:
    if (!i)
    {
      v17 = type metadata accessor for AnchoringComponent(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v2, 1, 1, v17);
      outlined destroy of AnchoringComponent?((uint64_t)v2);
      return i;
    }
    swift_retain();
    specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for SceneOriginComponent, (uint64_t)&protocol witness table for SceneOriginComponent);
    if (REEntityGetCustomComponent())
      break;
    swift_release();
    swift_retain();
    specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v2);
    swift_release();
    v9 = type metadata accessor for AnchoringComponent(0);
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v2, 1, v9);
    outlined destroy of AnchoringComponent?((uint64_t)v2);
    if (v10 != 1)
      return i;
    swift_retain();
    v11 = REEntityGetParent();
    if (!v11)
    {
      swift_release_n();
      return 0;
    }
    v12 = v11;
    if ((id)REEntityGetSwiftObject())
    {
      swift_release_n();
      goto LABEL_10;
    }
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
      goto LABEL_29;
    }
    v14 = specialized static Entity.entityInfoType(_:)();
    if (v14)
    {
      v15 = (*(uint64_t (**)(void))(v14 + 232))();
      v16 = *(_QWORD *)(v15 + 16);
      swift_retain();
      MEMORY[0x22076D160](v16, 0);
      *(_QWORD *)(v15 + 16) = v12;
      MEMORY[0x22076D160](v12, v15);
      swift_release_n();
      swift_release();
    }
    else
    {
      v15 = makeEntity(for:)(v12);
      swift_release_n();
    }
  }
  result = RECustomComponentGetObject();
  if (result)
  {
    swift_release();
    return i;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t Entity.id.getter()
{
  return REEntityGetLocalId();
}

uint64_t static Entity.__fromCore(_:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *a1;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    result = REEntityIsBeingDestroyed();
    if ((result & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = specialized static Entity.entityInfoType(_:)();
      if (v3)
      {
        v4 = (*(uint64_t (**)(void))(v3 + 232))();
        v5 = *(_QWORD *)(v4 + 16);
        swift_retain();
        MEMORY[0x22076D160](v5, 0);
        *(_QWORD *)(v4 + 16) = v1;
        MEMORY[0x22076D160](v1, v4);
        swift_release();
        return v4;
      }
      else
      {
        return makeEntity(for:)(v1);
      }
    }
  }
  return result;
}

uint64_t Entity.init()()
{
  uint64_t v0;
  uint64_t v1;
  char *rawValue;
  uint64_t v3;
  char *v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v1 = v0;
  *(_QWORD *)(v0 + 16) = REEntityCreate();
  MEMORY[0x22076D160]();
  RERelease();
  if (one-time initialization token for traitSetups != -1)
    swift_once();
  rawValue = (char *)traitSetups._rawValue;
  v3 = *((_QWORD *)traitSetups._rawValue + 2);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = rawValue + 40;
    do
    {
      v5 = (void (*)(uint64_t))*((_QWORD *)v4 - 1);
      swift_retain();
      v5(v0);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  REEntityGetOrAddComponent();
  swift_retain();
  __EntityInfoComponent.init(entity:)(v9);
  v6 = v9[0];
  v7 = v9[1];
  swift_retain_n();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v6, v7);
  swift_release_n();
  swift_release();
  return v1;
}

uint64_t Entity.init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v1;
}

uint64_t Entity.deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return v0;
}

uint64_t (*Entity.components.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  a1[1] = v1;
  swift_retain();
  return RealityRenderer.entities.modify;
}

uint64_t Entity.scene.getter()
{
  uint64_t result;
  uint64_t v1;
  id v2;

  result = REEntityGetSceneNullable();
  if (result)
  {
    v1 = result;
    v2 = (id)RESceneGetSwiftObject();
    type metadata accessor for Scene();
    if (v2)
    {
      return swift_dynamicCastClassUnconditional();
    }
    else
    {
      swift_allocObject();
      return Scene.init(coreScene:)(v1);
    }
  }
  return result;
}

uint64_t Entity.name.getter()
{
  REEntityGetName();
  return String.init(cString:)();
}

uint64_t Entity.name.setter()
{
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  REEntitySetName();
  swift_release();
  return RENetworkMarkEntityMetadataDirty();
}

uint64_t (*Entity.name.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  REEntityGetName();
  *a1 = String.init(cString:)();
  a1[1] = v3;
  return Entity.name.modify;
}

uint64_t Entity.name.modify(uint64_t a1, char a2)
{
  String.utf8CString.getter();
  if ((a2 & 1) != 0)
  {
    REEntitySetName();
    swift_release();
    RENetworkMarkEntityMetadataDirty();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    REEntitySetName();
    swift_release();
    return RENetworkMarkEntityMetadataDirty();
  }
}

uint64_t Entity.__boundingBox.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;

  result = REEntityComputeMeshBounds();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t Entity.__findAssetDependencies(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  v6 = a2;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in Entity.__findAssetDependencies(_:);
  *(_QWORD *)(v2 + 24) = &v4;
  REEntityFindAssetDependencies();
  return swift_release();
}

uint64_t Entity.isActive.getter()
{
  return REEntityIsActive();
}

uint64_t Entity.isAnchored.getter()
{
  return REEntityIsAnchored();
}

uint64_t Entity.isEnabled.getter()
{
  return REEntityGetSelfEnabled();
}

uint64_t Entity.isEnabled.setter(char a1)
{
  uint64_t v1;

  MEMORY[0x22076D154](*(_QWORD *)(v1 + 16), a1 & 1);
  return RENetworkMarkEntityMetadataDirty();
}

uint64_t (*Entity.isEnabled.modify(uint64_t a1))(unsigned __int8 *a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = REEntityGetSelfEnabled();
  return Entity.isEnabled.modify;
}

uint64_t Entity.isEnabled.modify(unsigned __int8 *a1)
{
  MEMORY[0x22076D154](*(_QWORD *)(*(_QWORD *)a1 + 16), a1[8]);
  return RENetworkMarkEntityMetadataDirty();
}

uint64_t Entity.isEnabledInHierarchy.getter()
{
  return REEntityIsEnabledInHierarchy();
}

uint64_t Entity.findEntity(named:)()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  String.utf8CString.getter();
  v0 = REEntityFindInHierarchyByName();
  swift_release();
  if (!v0)
    return 0;
  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) == 0)
  {
    v4 = specialized static Entity.entityInfoType(_:)();
    if (v4)
    {
      v2 = (*(uint64_t (**)(void))(v4 + 232))();
      v5 = *(_QWORD *)(v2 + 16);
      swift_retain();
      MEMORY[0x22076D160](v5, 0);
      *(_QWORD *)(v2 + 16) = v0;
      MEMORY[0x22076D160](v0, v2);
      swift_release();
      return v2;
    }
    return makeEntity(for:)(v0);
  }
  __break(1u);
  return result;
}

uint64_t static Entity.classLoad(named:in:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 112) = *a5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 72) = v7;
  return swift_task_switch();
}

uint64_t static Entity.classLoad(named:in:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  unsigned __int8 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 16);
  v9 = *(_BYTE *)(v0 + 112);
  v5 = static Entity.__loadAsync(named:in:options:asyncOptions:)(v4, v2, v3, v1, &v9);
  *(_QWORD *)(v0 + 80) = v5;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = static BodyTrackedEntity.classLoad(named:in:options:asyncOptions:);
  return v8(v5);
}

uint64_t static Entity.classLoad(contentsOf:withName:options:asyncOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 112) = *a5;
  type metadata accessor for MainActor();
  *(_QWORD *)(v6 + 56) = static MainActor.shared.getter();
  *(_QWORD *)(v6 + 64) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v6 + 72) = v7;
  return swift_task_switch();
}

uint64_t static Entity.classLoad(contentsOf:withName:options:asyncOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);
  unsigned __int8 v9;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  v9 = *(_BYTE *)(v0 + 112);
  v5 = static Entity.__loadAsync(contentsOf:withName:options:asyncOptions:)(v4, v2, v3, v1, &v9);
  *(_QWORD *)(v0 + 80) = v5;
  v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static Entity.load<A>(_:)
                                       + async function pointer to specialized static Entity.load<A>(_:));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = static AnchorEntity.classLoad(named:in:options:asyncOptions:);
  return v8(v5);
}

BOOL static Entity.ForwardDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t Entity.copy(to:recursive:)(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v5;

  v5 = REEntityCopy();
  MEMORY[0x22076D160](*(_QWORD *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 16) = v5;
  MEMORY[0x22076D160](v5, a1);
  RERelease();
  return Entity.didCloneHelper(from:recursive:)(v2, a2);
}

uint64_t Entity.coreEntity.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t key path setter for Entity.name : Entity()
{
  String.utf8CString.getter();
  REEntitySetName();
  swift_release();
  return RENetworkMarkEntityMetadataDirty();
}

uint64_t @objc closure #1 in Entity.findAssetDependencies(_:)(uint64_t a1, void (**a2)(uint64_t *))
{
  void (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *a2;
  v4 = a1;
  swift_retain();
  v2(&v4);
  return swift_release();
}

uint64_t thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(_QWORD *a1, uint64_t (*a2)(_QWORD))
{
  return a2(*a1);
}

uint64_t static Entity.__disableUpdateInteractionEntities.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static Entity.__disableUpdateInteractionEntities.setter(uint64_t a1)
{
  swift_beginAccess();
  static Entity.__disableUpdateInteractionEntities = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static Entity.__disableUpdateInteractionEntities.modify())()
{
  swift_beginAccess();
  return static __RKEntityInteractionsComponent.registration.modify;
}

uint64_t Entity.__allocating_init(_coreEntity:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = *a1;
  MEMORY[0x22076D160]();
  return v2;
}

uint64_t static Entity.__testInit()()
{
  uint64_t v0;
  uint64_t v1;

  v0 = REEntityCreate();
  type metadata accessor for Entity();
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v0;
  MEMORY[0x22076D160](v0, v1);
  return v1;
}

uint64_t Entity.__deallocating_deinit()
{
  uint64_t v0;

  MEMORY[0x22076D160](*(_QWORD *)(v0 + 16), 0);
  return swift_deallocClassInstance();
}

void Entity.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

Swift::Int Entity.hashValue.getter()
{
  uint64_t v0;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
  return Hasher._finalize()();
}

uint64_t protocol witness for Identifiable.id.getter in conformance Entity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetLocalId();
  *a1 = result;
  return result;
}

uint64_t static Entity.fromCore(_:ignoringEntityInfo:preferAnchorEntity:)(uint64_t a1, char a2, char a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((id)REEntityGetSwiftObject())
  {
    type metadata accessor for Entity();
    return swift_dynamicCastClassUnconditional();
  }
  result = REEntityIsBeingDestroyed();
  if ((result & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      v7 = specialized static Entity.entityInfoType(_:)();
      if (v7)
      {
        v8 = (*(uint64_t (**)(void))(v7 + 232))();
        v9 = *(_QWORD *)(v8 + 16);
        swift_retain();
        MEMORY[0x22076D160](v9, 0);
        *(_QWORD *)(v8 + 16) = a1;
        MEMORY[0x22076D160](a1, v8);
        swift_release();
        return v8;
      }
    }
    if ((a3 & 1) != 0)
    {
      REAnchoringComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        type metadata accessor for AnchorEntity();
        v8 = swift_allocObject();
        *(_QWORD *)(v8 + 16) = a1;
        MEMORY[0x22076D160](a1, v8);
        return v8;
      }
    }
    return makeEntity(for:)(a1);
  }
  return result;
}

uint64_t makeEntity(for:)(uint64_t a1)
{
  uint64_t v2;

  REDirectionalLightComponentGetComponentType();
  if (REEntityGetComponentByClass())
  {
    type metadata accessor for DirectionalLight();
  }
  else
  {
    REPointLightComponentGetComponentType();
    if (REEntityGetComponentByClass())
    {
      type metadata accessor for PointLight();
    }
    else
    {
      RESpotLightComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        type metadata accessor for SpotLight();
      }
      else
      {
        REPerspectiveCameraComponentGetComponentType();
        if (REEntityGetComponentByClass())
        {
          type metadata accessor for PerspectiveCamera();
        }
        else
        {
          RESceneUnderstandingComponentGetComponentType();
          if (REEntityGetComponentByClass())
          {
            type metadata accessor for __RKSceneUnderstanding();
          }
          else
          {
            REMeshComponentGetComponentType();
            if (REEntityGetComponentByClass())
            {
              type metadata accessor for ModelEntity();
            }
            else
            {
              RERigidBodyComponentGetComponentType();
              if (REEntityGetComponentByClass())
              {
                type metadata accessor for __RKPhysics();
              }
              else
              {
                REAnchoringComponentGetComponentType();
                if (REEntityGetComponentByClass())
                  type metadata accessor for AnchorEntity();
                else
                  type metadata accessor for Entity();
              }
            }
          }
        }
      }
    }
  }
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  MEMORY[0x22076D160](a1, v2);
  return v2;
}

uint64_t __RKPhysics.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  Entity.init()();
  return v0;
}

uint64_t Entity.clone(recursive:)(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = *v1;
  v4 = swift_conformsToProtocol2();
  if (v4)
    v5 = v4;
  else
    v5 = 0;
  if (!v4)
    v1 = 0;
  if (v1)
  {
    v6 = *v1;
    v7 = *(void (**)(_QWORD, uint64_t, uint64_t))(v5 + 8);
    swift_retain();
    v7(a1 & 1, v6, v5);
    swift_release();
    return swift_dynamicCastClassUnconditional();
  }
  else
  {
    v9 = (*(uint64_t (**)(void))(v3 + 232))();
    Entity.copy(to:recursive:)(v9, a1 & 1);
    v10 = type metadata accessor for Entity();
    RENetworkComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    specialized static Entity.enumerateCore(entity:recursive:block:)(v9, 1, v10);
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v9);
    return v9;
  }
}

uint64_t Entity.__clone(recursive:remapInteractionIdentifiers:)(char a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 232))();
  Entity.copy(to:recursive:)(v5, a1);
  v6 = type metadata accessor for Entity();
  RENetworkComponentGetComponentType();
  REEntityGetOrAddComponentByClass();
  specialized static Entity.enumerateCore(entity:recursive:block:)(v5, 1, v6);
  if ((a2 & 1) != 0)
    static UuidRemapHelper.remapIdentifiersAndInteractions(root:)(v5);
  return v5;
}

uint64_t Entity.didCloneHelper(from:recursive:)(void *a1, char a2)
{
  void *v2;
  void *v3;
  id v6;
  void *v7;
  id v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v3 = v2;
  (*(void (**)(void))(*(_QWORD *)v2 + 248))();
  swift_beginAccess();
  v6 = objc_getAssociatedObject(a1, &static __SceneResourceCache.Entry.cacheEntryForEntityKey);
  swift_endAccess();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    v7 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v3, &static __SceneResourceCache.Entry.cacheEntryForEntityKey, v7, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  swift_beginAccess();
  v8 = objc_getAssociatedObject(a1, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey);
  result = swift_endAccess();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v24, &v25);
    __swift_project_boxed_opaque_existential_1(&v25, v26);
    v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    swift_beginAccess();
    objc_setAssociatedObject(v3, &static __SceneResourceLoadResultLoadContext.loadContextForEntityKey, v10, (void *)0x301);
    swift_endAccess();
    swift_unknownObjectRelease();
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  }
  if ((a2 & 1) == 0)
    return result;
  swift_retain();
  result = REEntityGetChildCount();
  if (result < 0)
    goto LABEL_47;
  v11 = result;
  if (result)
  {
    v12 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v12 >= result)
        break;
      if (v11 == ++v12)
        goto LABEL_11;
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_11:
  swift_release();
  swift_retain();
  result = REEntityGetChildCount();
  if ((result & 0x8000000000000000) == 0)
  {
    v13 = result;
    if (!result)
    {
LABEL_16:
      result = swift_release();
      if (v11 != v13)
        goto LABEL_49;
      if (!v11)
        return result;
      v15 = 0;
      while (v11 != v15)
      {
        swift_retain();
        result = REEntityGetChildCount();
        if (v15 >= result)
          goto LABEL_43;
        result = REEntityGetChild();
        if (!result)
          goto LABEL_50;
        v17 = result;
        if ((id)REEntityGetSwiftObject())
        {
          swift_release();
          type metadata accessor for Entity();
          swift_dynamicCastClassUnconditional();
        }
        else
        {
          result = REEntityIsBeingDestroyed();
          if ((result & 1) != 0)
            goto LABEL_45;
          v18 = specialized static Entity.entityInfoType(_:)();
          if (v18)
          {
            v19 = (*(uint64_t (**)(void))(v18 + 232))();
            v20 = *(_QWORD *)(v19 + 16);
            swift_retain();
            MEMORY[0x22076D160](v20, 0);
            *(_QWORD *)(v19 + 16) = v17;
            MEMORY[0x22076D160](v17, v19);
            swift_release();
          }
          else
          {
            makeEntity(for:)(v17);
          }
          swift_release();
        }
        swift_retain();
        result = REEntityGetChildCount();
        if (v15 >= result)
          goto LABEL_44;
        result = REEntityGetChild();
        if (!result)
          goto LABEL_51;
        v21 = result;
        if ((id)REEntityGetSwiftObject())
        {
          swift_release();
          type metadata accessor for Entity();
          v16 = swift_dynamicCastClassUnconditional();
        }
        else
        {
          result = REEntityIsBeingDestroyed();
          if ((result & 1) != 0)
            goto LABEL_46;
          v22 = specialized static Entity.entityInfoType(_:)();
          if (v22)
          {
            v16 = (*(uint64_t (**)(void))(v22 + 232))();
            v23 = *(_QWORD *)(v16 + 16);
            swift_retain();
            MEMORY[0x22076D160](v23, 0);
            *(_QWORD *)(v16 + 16) = v21;
            MEMORY[0x22076D160](v21, v16);
            swift_release();
          }
          else
          {
            v16 = makeEntity(for:)(v21);
          }
          swift_release();
        }
        ++v15;
        Entity.didCloneHelper(from:recursive:)(v16, 1);
        swift_release();
        result = swift_release();
        if (v11 == v15)
          return result;
      }
      goto LABEL_42;
    }
    v14 = 0;
    while (1)
    {
      result = REEntityGetChildCount();
      if (v14 >= result)
        break;
      if (v13 == ++v14)
        goto LABEL_16;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SceneOriginComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SceneOriginComponent.CodingKeys()
{
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t SceneOriginComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SceneOriginComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t SceneOriginComponent.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SceneOriginComponent(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SceneOriginComponent.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void Entity.ForwardDirection.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int Entity.ForwardDirection.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Entity.findEntity(id:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t Object;
  unsigned __int8 *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSString *v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  if (REEntityGetLocalId() == a1)
  {
    swift_retain();
    return v2;
  }
  swift_retain();
  if (REEntityGetChildCount() < 1)
  {
LABEL_39:
    swift_release();
    return 0;
  }
  v4 = 0;
  while (1)
  {
    result = REEntityGetChildCount();
    if (v4 >= result)
      break;
    result = REEntityGetChild();
    if (!result)
      goto LABEL_45;
    v6 = result;
    if ((id)REEntityGetSwiftObject())
    {
      type metadata accessor for Entity();
      swift_dynamicCastClassUnconditional();
    }
    else
    {
      result = REEntityIsBeingDestroyed();
      if ((result & 1) != 0)
        goto LABEL_44;
      specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
      if (!REEntityGetCustomComponent())
        goto LABEL_35;
      Object = RECustomComponentGetObject();
      if (!Object)
        goto LABEL_35;
      v8 = *(unsigned __int8 **)Object;
      if (*(_QWORD *)(Object + 8))
        v9 = 1;
      else
        v9 = v8 == 0;
      if (v9)
      {
        result = swift_retain();
      }
      else
      {
        v10 = *v8;
        v11 = String.init(utf8String:)();
        if (v12)
          v13 = v11;
        else
          v13 = 0;
        if (v12)
          v14 = v12;
        else
          v14 = 0xE000000000000000;
        v8 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v10 == 42, v13, v14);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v8;
      }
      if (!v8)
        goto LABEL_46;
      swift_retain();
      v15 = String.init(utf8String:)();
      v17 = v16;
      swift_release();
      v18 = v17 ? v15 : 0;
      v19 = v17 ? v17 : 0xE000000000000000;
      v20 = (NSString *)MEMORY[0x220768C3C](v18, v19);
      swift_bridgeObjectRelease();
      v21 = NSClassFromString(v20);

      swift_release();
      if (!v21)
        goto LABEL_35;
      swift_getObjCClassMetadata();
      type metadata accessor for Entity();
      v22 = swift_dynamicCastMetatype();
      if (v22)
      {
        v23 = (*(uint64_t (**)(void))(v22 + 232))();
        v24 = *(_QWORD *)(v23 + 16);
        swift_retain();
        MEMORY[0x22076D160](v24, 0);
        *(_QWORD *)(v23 + 16) = v6;
        MEMORY[0x22076D160](v6, v23);
        swift_release();
      }
      else
      {
LABEL_35:
        makeEntity(for:)(v6);
      }
    }
    result = REEntityGetChildCount();
    if (v4 >= result)
      goto LABEL_43;
    v25 = Entity.findEntity(id:)(a1);
    swift_release();
    if (v25)
    {
      swift_release();
      return v25;
    }
    if (++v4 >= REEntityGetChildCount())
      goto LABEL_39;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

uint64_t Entity.descends(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  if (*(_QWORD *)(v1 + 16) == *(_QWORD *)(a1 + 16))
    return 1;
  result = specialized HasHierarchy.parent.getter();
  if (result)
  {
    v4 = Entity.descends(from:)(a1);
    swift_release();
    return v4 & 1;
  }
  return result;
}

uint64_t specialized static Entity.entityInfoType(_:)()
{
  uint64_t result;
  unsigned __int8 *v1;
  BOOL v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSString *v13;
  Class v14;

  specialized static SceneManager.customComponentType(_:)((uint64_t)&type metadata for __EntityInfoComponent, (uint64_t)&protocol witness table for __EntityInfoComponent);
  result = REEntityGetCustomComponent();
  if (result)
  {
    result = RECustomComponentGetObject();
    if (result)
    {
      v1 = *(unsigned __int8 **)result;
      if (*(_QWORD *)(result + 8))
        v2 = 1;
      else
        v2 = v1 == 0;
      if (v2)
      {
        result = swift_retain();
      }
      else
      {
        v3 = *v1;
        v4 = String.init(utf8String:)();
        if (v5)
          v6 = v4;
        else
          v6 = 0;
        if (v5)
          v7 = v5;
        else
          v7 = 0xE000000000000000;
        v1 = (unsigned __int8 *)specialized static __EntityInfoComponent.makeRawData(isNinja:entityTypeName:)(v3 == 42, v6, v7);
        swift_bridgeObjectRelease();
        type metadata accessor for IntrospectionDataCleanupHelper();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = v1;
      }
      if (v1)
      {
        swift_retain();
        v8 = String.init(utf8String:)();
        v10 = v9;
        swift_release();
        if (v10)
          v11 = v8;
        else
          v11 = 0;
        if (v10)
          v12 = v10;
        else
          v12 = 0xE000000000000000;
        v13 = (NSString *)MEMORY[0x220768C3C](v11, v12);
        swift_bridgeObjectRelease();
        v14 = NSClassFromString(v13);

        swift_release();
        if (v14)
        {
          swift_getObjCClassMetadata();
          type metadata accessor for Entity();
          return swift_dynamicCastMetatype();
        }
        else
        {
          return 0;
        }
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Entity()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in Entity.__findAssetDependencies(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_21BCC27C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneOriginComponent.CodingKeys, &unk_24DFC7928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneOriginComponent.CodingKeys, &unk_24DFC7928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for SceneOriginComponent.CodingKeys, &unk_24DFC7928);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneOriginComponent.CodingKeys and conformance SceneOriginComponent.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Entity.ForwardDirection and conformance Entity.ForwardDirection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection;
  if (!lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for Entity.ForwardDirection, &type metadata for Entity.ForwardDirection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Entity.ForwardDirection and conformance Entity.ForwardDirection);
  }
  return result;
}

uint64_t sub_21BCC2884@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_21BCC2890(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)result + 16) != *(_QWORD *)(*(_QWORD *)a2 + 16))
    __break(1u);
  return result;
}

uint64_t sub_21BCC28B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  REEntityGetName();
  result = String.init(cString:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_21BCC28E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REEntityGetSelfEnabled();
  *a1 = result;
  return result;
}

uint64_t sub_21BCC2910(unsigned __int8 *a1, uint64_t a2)
{
  MEMORY[0x22076D154](*(_QWORD *)(*(_QWORD *)a2 + 16), *a1);
  return RENetworkMarkEntityMetadataDirty();
}

uint64_t method lookup function for Entity()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Entity.__coreEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of Entity.components.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of Entity.components.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of Entity.components.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of Entity.scene.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of Entity.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of Entity.name.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of Entity.name.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Entity.__boundingBox.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Entity.__findAssetDependencies(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of Entity.isActive.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of Entity.isAnchored.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of Entity.isEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of Entity.isEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of Entity.isEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of Entity.isEnabledInHierarchy.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Entity.__accessibilityElements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of Entity.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t dispatch thunk of Entity.__allocating_init(_coreEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of Entity.didClone(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of Entity.findEntity(named:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t type metadata accessor for __RKPhysics()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for __RKSceneUnderstanding()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of CustomClonable.customClone(recursive:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for SceneOriginComponent()
{
  return &type metadata for SceneOriginComponent;
}

uint64_t storeEnumTagSinglePayload for Entity.ForwardDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BCC2AE4 + 4 * byte_21BE6F715[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BCC2B18 + 4 * byte_21BE6F710[v4]))();
}

uint64_t sub_21BCC2B18(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC2B20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCC2B28);
  return result;
}

uint64_t sub_21BCC2B34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCC2B3CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BCC2B40(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC2B48(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Entity.ForwardDirection()
{
  return &type metadata for Entity.ForwardDirection;
}

void *type metadata accessor for SceneOriginComponent.CodingKeys()
{
  return &unk_24DFC7928;
}

uint64_t outlined destroy of AnchoringComponent?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnchoringComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __RKEntityCollisionTrigger.__allocating_init(targetEntity:collidingEntities:tags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v6 + 24) = a1;
  swift_retain();
  swift_release();
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a3;
  swift_release();
  *(_WORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 18) = 0;
  return v6;
}

uint64_t __RKEntityCollisionTrigger.init(targetEntity:collidingEntities:tags:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v3 + 24) = a1;
  swift_retain();
  swift_release();
  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 40) = a3;
  swift_release();
  *(_WORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 18) = 0;
  return v3;
}

uint64_t __RKEntityCollisionTrigger.matches(with:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  char *v29;
  char v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v2 = type metadata accessor for UUID();
  v79 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v78 = (uint64_t)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (unint64_t)&v72 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v72 - v15;
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v72 - v18;
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v72 - v21;
  type metadata accessor for __RKEntityCollisionTrigger();
  v74 = swift_dynamicCastClass();
  v76 = a1;
  if (!v74)
    goto LABEL_34;
  v73 = v4;
  v23 = v75;
  swift_beginAccess();
  if (*(_QWORD *)(v23 + 24))
  {
    swift_retain();
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v22);
    swift_release();
    v24 = v79;
  }
  else
  {
    v24 = v79;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56))(v22, 1, 1, v2);
    swift_retain();
  }
  v25 = v74;
  swift_beginAccess();
  if (*(_QWORD *)(v25 + 24))
  {
    swift_retain();
    Entity.__interactionIdentifier.getter((uint64_t)v19);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v19, 1, 1, v2);
  }
  v26 = (uint64_t)&v7[*(int *)(v5 + 48)];
  outlined init with copy of UUID?((uint64_t)v22, (uint64_t)v7);
  outlined init with copy of UUID?((uint64_t)v19, v26);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  v28 = v27(v7, 1, v2);
  v77 = v2;
  if (v28 != 1)
  {
    outlined init with copy of UUID?((uint64_t)v7, (uint64_t)v16);
    if (v27((char *)v26, 1, v2) != 1)
    {
      v29 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 32))(v73, v26, v2);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
      v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31 = v2;
      v32 = *(void (**)(char *, uint64_t))(v79 + 8);
      v32(v29, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
      outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      v32(v16, v31);
      outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
      if ((v30 & 1) != 0)
        goto LABEL_15;
LABEL_33:
      a1 = v76;
      swift_release();
      goto LABEL_34;
    }
    outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v16, v2);
LABEL_13:
    outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_33;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v19, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  if (v27((char *)v26, 1, v2) != 1)
    goto LABEL_13;
  outlined destroy of BodyTrackingComponent?((uint64_t)v7, &demangling cache variable for type metadata for UUID?);
LABEL_15:
  v33 = v75;
  v34 = swift_bridgeObjectRetain();
  v35 = specialized Set.init<A>(_:)(v34);
  swift_bridgeObjectRelease();
  v36 = swift_bridgeObjectRetain();
  v37 = specialized Set.init<A>(_:)(v36);
  swift_bridgeObjectRelease();
  v38 = specialized Set.isDisjoint(with:)(v37, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    v47 = 1;
LABEL_45:
    swift_release();
    return v47;
  }
  a1 = *(_QWORD *)(v33 + 32);
  if (a1 >> 62)
    goto LABEL_84;
  v39 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v40 = v77;
    v41 = MEMORY[0x24BEE4AF8];
    if (v39)
    {
      v80 = MEMORY[0x24BEE4AF8];
      result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 & ~(v39 >> 63), 0);
      if (v39 < 0)
      {
        __break(1u);
LABEL_90:
        __break(1u);
        goto LABEL_91;
      }
      v43 = v80;
      swift_beginAccess();
      v44 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0)
          MEMORY[0x220769770](v44, a1);
        else
          swift_retain();
        if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
        {
          UUID.init(uuid:)();
          (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v13, 0, 1, v40);
        }
        else
        {
          (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v13, 1, 1, v40);
        }
        swift_release();
        v80 = v43;
        v46 = *(_QWORD *)(v43 + 16);
        v45 = *(_QWORD *)(v43 + 24);
        if (v46 >= v45 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
          v43 = v80;
        }
        ++v44;
        *(_QWORD *)(v43 + 16) = v46 + 1;
        outlined init with take of UUID?(v13, v43+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v46);
        v40 = v77;
      }
      while (v39 != v44);
      swift_bridgeObjectRelease();
      v41 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      swift_bridgeObjectRelease();
      v43 = MEMORY[0x24BEE4AF8];
    }
    v13 = *(_QWORD *)(v74 + 32);
    v52 = v79;
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v53 = _CocoaArrayWrapper.endIndex.getter();
      if (!v53)
      {
LABEL_86:
        swift_bridgeObjectRelease();
        v54 = MEMORY[0x24BEE4AF8];
        goto LABEL_87;
      }
    }
    else
    {
      v53 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v53)
        goto LABEL_86;
    }
    v80 = v41;
    result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53 & ~(v53 >> 63), 0);
    if (v53 < 0)
      goto LABEL_90;
    v54 = v80;
    v55 = v13 & 0xC000000000000001;
    swift_beginAccess();
    v56 = 0;
    v73 = (char *)v43;
    do
    {
      if (v55)
        MEMORY[0x220769770](v56, v13);
      else
        swift_retain();
      if (static __RKEntityUUIDComponent.registration && REEntityGetCustomComponent() && RECustomComponentGetObject())
      {
        v57 = v9;
        v58 = v55;
        v59 = v13;
        v60 = v53;
        v61 = v78;
        UUID.init(uuid:)();
        v62 = v61;
        v53 = v60;
        v13 = v59;
        v55 = v58;
        v9 = v57;
        v43 = (uint64_t)v73;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v62, 0, 1, v40);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v78, 1, 1, v40);
      }
      swift_release();
      v80 = v54;
      v64 = *(_QWORD *)(v54 + 16);
      v63 = *(_QWORD *)(v54 + 24);
      if (v64 >= v63 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
        v54 = v80;
      }
      ++v56;
      *(_QWORD *)(v54 + 16) = v64 + 1;
      outlined init with take of UUID?(v78, v54+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v64);
      v40 = v77;
      v52 = v79;
    }
    while (v53 != v56);
    swift_bridgeObjectRelease();
LABEL_87:
    v69 = specialized Set.init<A>(_:)(v43);
    swift_bridgeObjectRelease();
    v70 = specialized Set.init<A>(_:)(v54);
    swift_bridgeObjectRelease();
    v71 = specialized Set.isDisjoint(with:)(v70, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v76;
    swift_release();
    if ((v71 & 1) == 0)
      return 1;
LABEL_34:
    type metadata accessor for __RKEntityTriggerGroup();
    v47 = swift_dynamicCastClass();
    if (!v47)
      return v47;
    swift_beginAccess();
    v48 = *(_QWORD *)(v47 + 24);
    if (v48 >> 62)
    {
LABEL_79:
      swift_retain();
      swift_bridgeObjectRetain();
      v47 = _CocoaArrayWrapper.endIndex.getter();
      if (!v47)
        goto LABEL_44;
    }
    else
    {
      v47 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain();
      swift_bridgeObjectRetain();
      if (!v47)
        goto LABEL_44;
    }
    v9 = v48 & 0xC000000000000001;
    if ((v48 & 0xC000000000000001) != 0)
      break;
    if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v49 = *(_QWORD *)(v48 + 32);
      swift_retain();
      goto LABEL_40;
    }
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
  }
  v49 = MEMORY[0x220769770](0, v48);
LABEL_40:
  v50 = __RKEntityCollisionTrigger.matches(with:)(v49);
  result = swift_release();
  if ((v50 & 1) != 0)
  {
LABEL_41:
    v47 = 1;
    goto LABEL_44;
  }
  if (v47 == 1)
  {
    v47 = 0;
    goto LABEL_44;
  }
  if (v9)
  {
    v51 = MEMORY[0x220769770](1, v48);
LABEL_69:
    v65 = __RKEntityCollisionTrigger.matches(with:)(v51);
    swift_release();
    if ((v65 & 1) != 0)
      goto LABEL_41;
    v13 = 0;
    v66 = v47 - 2;
    do
    {
      v47 = v66 != v13;
      if (v66 == v13)
        break;
      a1 = v13 + 2;
      if (v9)
      {
        v67 = MEMORY[0x220769770](v13 + 2, v48);
        if (__OFADD__(a1, 1))
          goto LABEL_78;
      }
      else
      {
        if (a1 >= *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_83;
        v67 = *(_QWORD *)(v48 + 8 * v13 + 48);
        swift_retain();
        if (__OFADD__(a1, 1))
        {
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
      }
      v68 = __RKEntityCollisionTrigger.matches(with:)(v67);
      swift_release();
      ++v13;
    }
    while ((v68 & 1) == 0);
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  if (*(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    v51 = *(_QWORD *)(v48 + 40);
    swift_retain();
    goto LABEL_69;
  }
LABEL_91:
  __break(1u);
  return result;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v32 = v4;
  v33 = v4 + 56;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v31 = (unint64_t)(63 - v6) >> 6;
  v9 = v5 + 56;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    while (1)
    {
      v12 = v11;
      if (!v8)
        break;
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_31;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31)
      goto LABEL_48;
    v16 = *(_QWORD *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v12 + 2;
      if (v12 + 2 >= v31)
        goto LABEL_48;
      v16 = *(_QWORD *)(v33 + 8 * v11);
      if (!v16)
      {
        v11 = v12 + 3;
        if (v12 + 3 >= v31)
          goto LABEL_48;
        v16 = *(_QWORD *)(v33 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_30:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_31:
      v18 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v14);
      v20 = *v18;
      v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      v21 = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v5 + 32);
      v23 = v21 & ~v22;
      if (((*(_QWORD *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
      {
        v24 = *(_QWORD *)(v5 + 48);
        v25 = (_QWORD *)(v24 + 16 * v23);
        v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = 0;
LABEL_45:
          outlined consume of [String : AnimationResource].Iterator._Variant();
          return v30;
        }
        v27 = ~v22;
        while (1)
        {
          v23 = (v23 + 1) & v27;
          if (((*(_QWORD *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
            break;
          v28 = (_QWORD *)(v24 + 16 * v23);
          v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_44;
        }
      }
      result = swift_bridgeObjectRelease();
    }
  }
  v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    v30 = 1;
    goto LABEL_45;
  }
  v16 = *(_QWORD *)(v33 + 8 * v17);
  if (v16)
  {
    v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v31)
      goto LABEL_48;
    v16 = *(_QWORD *)(v33 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_30;
  }
LABEL_50:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  char *v42;
  Swift::Int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x24BDAC7A8](v67);
  v5 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v64 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v56 - v12;
  MEMORY[0x24BDAC7A8](v14);
  v59 = (uint64_t)v56 - v15;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)v56 - v17;
  MEMORY[0x24BDAC7A8](v19);
  v63 = (uint64_t)v56 - v20;
  v21 = *(_QWORD *)(a2 + 16);
  if (!v21)
    return 1;
  v22 = *(_QWORD *)(a1 + 16);
  if (!v22)
    return 1;
  v70 = v7;
  if (v21 >= v22)
    v23 = a1;
  else
    v23 = a2;
  if (v21 >= v22)
    v24 = a2;
  else
    v24 = a1;
  v25 = *(_QWORD *)(v23 + 56);
  v58 = v23 + 56;
  v26 = -1 << *(_BYTE *)(v23 + 32);
  v56[1] = ~v26;
  if (-v26 < 64)
    v27 = ~(-1 << -(char)v26);
  else
    v27 = -1;
  v28 = v27 & v25;
  v57 = (unint64_t)(63 - v26) >> 6;
  v73 = v24 + 56;
  v62 = v23;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v31 = v67;
  v69 = v24;
  while (1)
  {
    v61 = v30;
    v60 = v28;
    if (v28)
    {
      v65 = (v28 - 1) & v28;
      v66 = v30;
      v32 = __clz(__rbit64(v28)) | (v30 << 6);
    }
    else
    {
      v33 = v30 + 1;
      if (__OFADD__(v30, 1))
      {
        __break(1u);
        goto LABEL_51;
      }
      if (v33 >= v57)
        goto LABEL_49;
      v34 = *(_QWORD *)(v58 + 8 * v33);
      v35 = v30 + 1;
      if (!v34)
      {
        v35 = v30 + 2;
        if (v30 + 2 >= v57)
          goto LABEL_49;
        v34 = *(_QWORD *)(v58 + 8 * v35);
        if (!v34)
        {
          v35 = v30 + 3;
          if (v30 + 3 >= v57)
            goto LABEL_49;
          v34 = *(_QWORD *)(v58 + 8 * v35);
          if (!v34)
          {
            v36 = v30 + 4;
            if (v30 + 4 >= v57)
            {
LABEL_49:
              swift_bridgeObjectRelease();
              v55 = 1;
              goto LABEL_47;
            }
            v34 = *(_QWORD *)(v58 + 8 * v36);
            if (!v34)
            {
              while (1)
              {
                v35 = v36 + 1;
                if (__OFADD__(v36, 1))
                  break;
                if (v35 >= v57)
                  goto LABEL_49;
                v34 = *(_QWORD *)(v58 + 8 * v35);
                ++v36;
                if (v34)
                  goto LABEL_29;
              }
LABEL_51:
              __break(1u);
              return result;
            }
            v35 = v30 + 4;
          }
        }
      }
LABEL_29:
      v65 = (v34 - 1) & v34;
      v66 = v35;
      v32 = __clz(__rbit64(v34)) + (v35 << 6);
    }
    v37 = *(_QWORD *)(v62 + 48);
    v38 = v63;
    v74 = *(_QWORD *)(v64 + 72);
    outlined init with copy of UUID?(v37 + v74 * v32, v63);
    outlined init with take of UUID?(v38, (uint64_t)v18);
    if (*(_QWORD *)(v24 + 16))
    {
      Hasher.init(_seed:)();
      v39 = v59;
      outlined init with copy of UUID?((uint64_t)v18, v59);
      v40 = v70;
      v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
      if (v41(v39, 1, v6) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v42 = v68;
        (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v68, v39, v6);
        Hasher._combine(_:)(1u);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA88]);
        dispatch thunk of Hashable.hash(into:)();
        (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v6);
      }
      v43 = Hasher._finalize()();
      v24 = v69;
      v44 = -1 << *(_BYTE *)(v69 + 32);
      v45 = v43 & ~v44;
      if (((*(_QWORD *)(v73 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) != 0)
        break;
    }
LABEL_13:
    result = outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
    v28 = v65;
    v30 = v66;
  }
  v71 = ~v44;
  while (1)
  {
    outlined init with copy of UUID?(*(_QWORD *)(v24 + 48) + v45 * v74, (uint64_t)v13);
    v46 = (uint64_t)&v5[*(int *)(v31 + 48)];
    outlined init with copy of UUID?((uint64_t)v13, (uint64_t)v5);
    outlined init with copy of UUID?((uint64_t)v18, v46);
    if (v41((uint64_t)v5, 1, v6) == 1)
      break;
    outlined init with copy of UUID?((uint64_t)v5, v72);
    if (v41(v46, 1, v6) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v6);
      goto LABEL_37;
    }
    v47 = v70;
    v48 = v18;
    v49 = v72;
    v50 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v68, v46, v6);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x24BDCEA98]);
    v51 = dispatch thunk of static Equatable.== infix(_:_:)();
    v52 = *(void (**)(char *, uint64_t))(v47 + 8);
    v53 = v50;
    v54 = v49;
    v18 = v48;
    v24 = v69;
    v52(v53, v6);
    v52((char *)v54, v6);
    v31 = v67;
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    if ((v51 & 1) != 0)
      goto LABEL_46;
LABEL_38:
    v45 = (v45 + 1) & v71;
    if (((*(_QWORD *)(v73 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8)) >> v45) & 1) == 0)
      goto LABEL_13;
  }
  if (v41(v46, 1, v6) != 1)
  {
LABEL_37:
    outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for (UUID?, UUID?));
    outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
    goto LABEL_38;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)v5, &demangling cache variable for type metadata for UUID?);
  outlined destroy of BodyTrackingComponent?((uint64_t)v13, &demangling cache variable for type metadata for UUID?);
LABEL_46:
  swift_bridgeObjectRelease();
  outlined destroy of BodyTrackingComponent?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  v55 = 0;
LABEL_47:
  outlined consume of [String : AnimationResource].Iterator._Variant();
  return v55;
}

uint64_t __RKEntityCollisionTrigger.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_beginAccess();
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = type metadata accessor for __RKEntityCollisionTrigger();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 24) = 0;
  swift_beginAccess();
  *(_QWORD *)(v7 + 24) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v5;
  result = swift_release();
  *(_WORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 18) = 0;
  a1[3] = v6;
  *a1 = v7;
  return result;
}

uint64_t __RKEntityCollisionTrigger.clone(matching:newEntity:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  swift_beginAccess();
  v6 = v3[3];
  if (v6 && *(_QWORD *)(v6 + 16) == *(_QWORD *)(a1 + 16))
  {
    v19 = v3[4];
    v18 = v3[5];
    type metadata accessor for __RKEntityCollisionTrigger();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 24) = 0;
    swift_beginAccess();
    *(_QWORD *)(v16 + 24) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
    *(_QWORD *)(v16 + 32) = v19;
LABEL_24:
    *(_QWORD *)(v16 + 40) = v18;
    swift_release();
    *(_WORD *)(v16 + 16) = 0;
    *(_BYTE *)(v16 + 18) = 0;
    return v16;
  }
  v7 = v3[4];
  swift_bridgeObjectRetain();
  v8 = specialized Sequence<>.contains(_:)(a1, v7);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
    return 0;
  v21 = MEMORY[0x24BEE4AF8];
  v9 = v3[4];
  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_6;
LABEL_22:
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x24BEE4AF8];
LABEL_23:
    v20 = v3[3];
    v18 = v3[5];
    type metadata accessor for __RKEntityCollisionTrigger();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 24) = 0;
    swift_beginAccess();
    *(_QWORD *)(v16 + 24) = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    *(_QWORD *)(v16 + 32) = v17;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v10 = result;
  if (!result)
    goto LABEL_22;
LABEL_6:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v14 = MEMORY[0x220769770](i, v9);
      }
      else
      {
        v14 = *(_QWORD *)(v9 + 8 * i + 32);
        swift_retain();
      }
      if (*(_QWORD *)(v14 + 16) == *(_QWORD *)(a2 + 16))
      {
        v15 = swift_retain();
        MEMORY[0x220768F0C](v15);
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      else
      {
        v13 = swift_retain();
        MEMORY[0x220768F0C](v13);
        if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
    }
    swift_bridgeObjectRelease();
    v17 = v21;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

void __RKEntityCollisionTrigger.__allocating_init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKEntityCollisionTrigger.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKEntityCollisionTrigger.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __RKEntityCollisionTrigger.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __RKEntityCollisionTrigger.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEntityCollisionTrigger()
{
  return objc_opt_self();
}

uint64_t sub_21BCC4698@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_retain();
}

uint64_t method lookup function for __RKEntityCollisionTrigger()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.targetEntity.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of __RKEntityCollisionTrigger.__allocating_init(targetEntity:collidingEntities:tags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t SetEntityPropertyAction.targetEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  return outlined copy of ActionEntityResolution();
}

uint64_t SetEntityPropertyAction.targetEntity.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_BYTE *)a1 + 16);
  result = outlined consume of ActionEntityResolution();
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

uint64_t (*SetEntityPropertyAction.targetEntity.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.key.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SetEntityPropertyAction.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SetEntityPropertyAction.key.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t SetEntityPropertyAction.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*SetEntityPropertyAction.value.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t SetEntityPropertyAction.animatedValueType.getter()
{
  return 0;
}

uint64_t SetEntityPropertyAction.init(targetEntity:key:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v12 = *a1;
  v13 = a1[1];
  v14 = *((_BYTE *)a1 + 16);
  v15 = a7 + *(int *)(type metadata accessor for SetEntityPropertyAction(0, a5, a6, a4) + 40);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v15, 1, 1, a5);
  *(_QWORD *)a7 = v12;
  *(_QWORD *)(a7 + 8) = v13;
  *(_BYTE *)(a7 + 16) = v14;
  *(_QWORD *)(a7 + 24) = a2;
  *(_QWORD *)(a7 + 32) = a3;
  v16 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v15, a4, v16);
}

uint64_t type metadata accessor for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetEntityPropertyAction);
}

uint64_t protocol witness for Decodable.init(from:) in conformance SetEntityPropertyAction<A>@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SetEntityPropertyAction.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t SetEntityPropertyAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void (*v20)(__n128);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;
  char v50;

  v38 = a4;
  v7 = type metadata accessor for Optional();
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v36 - v8;
  v10 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a2, a3, v9);
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v10);
  v41 = type metadata accessor for KeyedDecodingContainer();
  v39 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v12 = (char *)&v36 - v11;
  v42 = a3;
  v14 = type metadata accessor for SetEntityPropertyAction(0, a2, a3, v13);
  v37 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v36 - v16;
  v19 = (char *)&v36 + *(int *)(v18 + 40) - v16;
  v20 = *(void (**)(__n128))(*(_QWORD *)(a2 - 8) + 56);
  v44 = v19;
  v20(v15);
  v21 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v21);
  v22 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
  {
    v29 = v45;
    v28 = v46;
    v30 = v44;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v30, v28);
  }
  else
  {
    v23 = a2;
    v24 = v39;
    v25 = (uint64_t)v40;
    v47 = v14;
    v26 = v42;
    v50 = 0;
    lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
    v27 = v41;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v31 = v49;
    *(_OWORD *)v17 = v48;
    v17[16] = v31;
    LOBYTE(v48) = 1;
    *((_QWORD *)v17 + 3) = KeyedDecodingContainer.decode(_:forKey:)();
    *((_QWORD *)v17 + 4) = v32;
    static SetEntityPropertyAction.decodeValueIfPresent(from:forKey:)((uint64_t)v12, 2, v23, v26, v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 40))(v44, v25, v46);
    v33 = v37;
    v34 = v47;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v38, v17, v47);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v17, v34);
  }
}

uint64_t type metadata accessor for SetEntityPropertyAction.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetEntityPropertyAction.CodingKeys);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SetEntityPropertyAction<A>(_QWORD *a1, uint64_t a2)
{
  return SetEntityPropertyAction.encode(to:)(a1, a2);
}

uint64_t SetEntityPropertyAction.encode(to:)(_QWORD *a1, uint64_t a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char v46;
  char v47;

  v3 = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = type metadata accessor for Optional();
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v40 = (char *)&v35 - v8;
  v38 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v43 = a2;
  v11 = *(_QWORD *)(a2 + 24);
  v39 = v6;
  v36 = v11;
  v37 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, v6, v11, v12);
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v13);
  v14 = type metadata accessor for KeyedEncodingContainer();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v35 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v18 = *((_BYTE *)v3 + 16);
  v19 = v3;
  v20 = (uint64_t)v17;
  v45 = *v3;
  v46 = v18;
  v47 = 0;
  lazy protocol witness table accessor for type ActionEntityResolution and conformance ActionEntityResolution();
  v21 = v44;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v24 = v42;
  v23 = v43;
  v44 = v15;
  v26 = v40;
  v25 = v41;
  LOBYTE(v45) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  v27 = v14;
  v35 = v20;
  v28 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v26, (uint64_t)v19 + *(int *)(v23 + 40), v24);
  v30 = v38;
  v29 = v39;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v26, 1, v39) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v35, v27);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  }
  else
  {
    v31 = v27;
    v32 = (uint64_t)v37;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v37, v28, v29);
    v33 = v35;
    static SetEntityPropertyAction.encodeValue(_:to:forKey:)(v32, v35, 2, v29, v36);
    v34 = v44;
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v31);
  }
}

unint64_t SetEntityPropertyAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SetEntityPropertyAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t SetEntityPropertyAction.CodingKeys.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6E45746567726174;
  if (a1 == 1)
    return 7955819;
  return 0x65756C6176;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, a3);
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, a1);
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SetEntityPropertyAction<A>.CodingKeys()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys);
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SetEntityPropertyAction<A>.CodingKeys()
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys);
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = SetEntityPropertyAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = SetEntityPropertyAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SetEntityPropertyAction<A>.CodingKeys()
{
  char *v0;

  return SetEntityPropertyAction.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = SetEntityPropertyAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SetEntityPropertyAction<A>.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized SetEntityPropertyAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, a1);
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SetEntityPropertyAction<A>.CodingKeys(uint64_t a1)
{
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t static SetEntityPropertyAction.decodeValueIfPresent(from:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v11 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, a4);
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v11);
  type metadata accessor for KeyedDecodingContainer();
  if ((KeyedDecodingContainer.contains(_:)() & 1) != 0)
  {
    result = static SetEntityPropertyAction.decodeValue(from:forKey:)(a1, a2, a3, a4);
    if (v5)
      return result;
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, v13, 1, a3);
}

uint64_t static SetEntityPropertyAction.encodeValue(_:to:forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  v72 = a5;
  v71 = a2;
  MEMORY[0x24BDAC7A8](a1);
  v64 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v65 = (char *)&v63 - v10;
  MEMORY[0x24BDAC7A8](v11);
  v66 = (char *)&v63 - v12;
  MEMORY[0x24BDAC7A8](v13);
  v67 = (char *)&v63 - v14;
  MEMORY[0x24BDAC7A8](v15);
  v68 = (char *)&v63 - v16;
  MEMORY[0x24BDAC7A8](v17);
  v69 = (char *)&v63 - v18;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v63 - v20;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v63 - v23;
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&v63 - v26;
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)&v63 - v29;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v63 - v33;
  v70 = v35;
  v36 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v35 + 16);
  v36((char *)&v63 - v33, a1, v37, v32);
  if (!swift_dynamicCast())
  {
    v40 = v72;
    if (swift_dynamicCast())
    {
      ((void (*)(char *, uint64_t, uint64_t))v36)(v27, a1, a4);
      swift_dynamicCast();
      LOBYTE(v74) = a3;
      v42 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v41);
      MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v42);
      type metadata accessor for KeyedEncodingContainer();
      KeyedEncodingContainer.encode(_:forKey:)();
      return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
    if (swift_dynamicCast())
    {
      ((void (*)(char *, uint64_t, uint64_t))v36)(v24, a1, a4);
      swift_dynamicCast();
      *(_QWORD *)&v74 = v77;
      v73 = a3;
      v44 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v43);
      MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v44);
      type metadata accessor for KeyedEncodingContainer();
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>, &demangling cache variable for type metadata for SIMD2<Float>, MEMORY[0x24BEE40D8]);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
      if (swift_dynamicCast())
      {
        ((void (*)(char *, uint64_t, uint64_t))v36)(v21, a1, a4);
        swift_dynamicCast();
        v74 = v77;
        v73 = a3;
        v46 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v45);
        MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v46);
        type metadata accessor for KeyedEncodingContainer();
        v47 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
        v48 = &demangling cache variable for type metadata for SIMD3<Float>;
        v49 = MEMORY[0x24BEE4108];
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
        if (swift_dynamicCast())
        {
          ((void (*)(char *, uint64_t, uint64_t))v36)(v69, a1, a4);
        }
        else
        {
          type metadata accessor for simd_quatf(0);
          if (!swift_dynamicCast())
          {
            if (swift_dynamicCast())
            {
              ((void (*)(char *, uint64_t, uint64_t))v36)(v67, a1, a4);
              swift_dynamicCast();
              LOBYTE(v74) = a3;
              v54 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v53);
              MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v54);
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
            }
            if (swift_dynamicCast())
            {
              ((void (*)(char *, uint64_t, uint64_t))v36)(v66, a1, a4);
              swift_dynamicCast();
              LOBYTE(v74) = a3;
              v56 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v55);
              MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v56);
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
            }
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t, uint64_t))v36)(v65, a1, a4);
              swift_dynamicCast();
              LOBYTE(v74) = a3;
              v69 = (char *)a4;
              v58 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v57);
              MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v58);
              type metadata accessor for KeyedEncodingContainer();
              KeyedEncodingContainer.encode(_:forKey:)();
              swift_bridgeObjectRelease();
              a4 = (uint64_t)v69;
              return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
            }
            if (!swift_dynamicCast())
            {
              v62 = type metadata accessor for SetEntityPropertyAction.DecodingErrors(0, a4, v40, v59);
              MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.DecodingErrors, v62);
              swift_allocError();
              swift_willThrow();
              return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
            }
            ((void (*)(char *, uint64_t, uint64_t))v36)(v64, a1, a4);
            swift_dynamicCast();
            v74 = v77;
            v75 = v78;
            v76 = v79;
            v73 = a3;
            v61 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v60);
            MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v61);
            type metadata accessor for KeyedEncodingContainer();
            lazy protocol witness table accessor for type Transform and conformance Transform();
            goto LABEL_15;
          }
          ((void (*)(char *, uint64_t, uint64_t))v36)(v68, a1, a4);
        }
        swift_dynamicCast();
        v74 = v77;
        v73 = a3;
        v51 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v40, v50);
        MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v51);
        type metadata accessor for KeyedEncodingContainer();
        v47 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
        v48 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
        v49 = MEMORY[0x24BEE4168];
      }
      lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v47, v48, v49);
    }
LABEL_15:
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
  }
  ((void (*)(char *, uint64_t, uint64_t))v36)(v30, a1, a4);
  swift_dynamicCast();
  LOBYTE(v74) = a3;
  v39 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a4, v72, v38);
  MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v39);
  type metadata accessor for KeyedEncodingContainer();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v34, a4);
}

uint64_t type metadata completion function for SetEntityPropertyAction()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  const void *v19;
  unsigned int (*v20)(const void *, uint64_t, uint64_t);

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  if (*(_DWORD *)(v6 + 84))
    v9 = *(_QWORD *)(v6 + 64);
  else
    v9 = *(_QWORD *)(v6 + 64) + 1;
  v10 = v7 & 0x100000;
  if (v8 > 7 || v10 != 0 || ((v8 + 40) & ~v8) + v9 > 0x18)
  {
    v13 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v13 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16));
    swift_retain();
  }
  else
  {
    v14 = ~v8;
    v15 = *(_QWORD *)a2;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(_BYTE *)(a2 + 16);
    outlined copy of ActionEntityResolution();
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v16;
    *(_BYTE *)(a1 + 16) = v17;
    v18 = a1 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v18 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_QWORD *)(v18 + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    v19 = (const void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + v8 + 40) & ~v8);
    v20 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
    swift_bridgeObjectRetain();
    if (v20(v19, 1, v5))
    {
      memcpy((void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 40) & v14), v19, v9);
    }
    else
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 40) & v14, v19, v5);
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 40) & v14, 0, 1, v5);
    }
  }
  return a1;
}

uint64_t destroy for SetEntityPropertyAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  outlined consume of ActionEntityResolution();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = ((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(unint64_t, uint64_t))(v5 + 8))(v6, v4);
  return result;
}

uint64_t initializeWithCopy for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  unsigned int (*v16)(const void *, uint64_t, uint64_t);
  size_t v17;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)((v13 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  v15 = (const void *)((v13 + 40 + v10) & ~v13);
  v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v16(v15, 1, v11))
  {
    if (*(_DWORD *)(v12 + 84))
      v17 = *(_QWORD *)(v12 + 64);
    else
      v17 = *(_QWORD *)(v12 + 64) + 1;
    memcpy(v14, v15, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v14, v15, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void *, uint64_t, uint64_t);
  int v17;
  size_t v18;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_BYTE *)(a2 + 16);
  outlined copy of ActionEntityResolution();
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_BYTE *)(a1 + 16) = v8;
  outlined consume of ActionEntityResolution();
  v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  v10 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v9 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v9 + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (void *)((v13 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  v15 = (void *)((v13 + 40 + v10) & ~v13);
  v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v10) = v16(v14, 1, v11);
  v17 = v16(v15, 1, v11);
  if ((_DWORD)v10)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v14, v15, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v11);
      return a1;
    }
  }
  else
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v14, v15, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (*(_DWORD *)(v12 + 84))
    v18 = *(_QWORD *)(v12 + 64);
  else
    v18 = *(_QWORD *)(v12 + 64) + 1;
  memcpy(v14, v15, v18);
  return a1;
}

uint64_t initializeWithTake for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  size_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((v6 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  v8 = (const void *)((v6 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    if (*(_DWORD *)(v5 + 84))
      v9 = *(_QWORD *)(v5 + 64);
    else
      v9 = *(_QWORD *)(v5 + 64) + 1;
    memcpy(v7, v8, v9);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
  }
  return a1;
}

uint64_t assignWithTake for SetEntityPropertyAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  size_t v16;

  v6 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v6;
  outlined consume of ActionEntityResolution();
  v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v7 + 24) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (void *)((v11 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v11);
  v13 = (void *)((v11 + 40 + v8) & ~v11);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  v15 = v14(v13, 1, v9);
  if ((_DWORD)v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      return a1;
    }
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  }
  if (*(_DWORD *)(v10 + 84))
    v16 = *(_QWORD *)(v10 + 64);
  else
    v16 = *(_QWORD *)(v10 + 64) + 1;
  memcpy(v12, v13, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetEntityPropertyAction(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFF)
    v7 = 0x7FFFFFFF;
  else
    v7 = v6;
  if (v5)
    v8 = *(_QWORD *)(v4 + 64);
  else
    v8 = *(_QWORD *)(v4 + 64) + 1;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = a2 - v7;
  if (a2 <= v7)
    goto LABEL_28;
  v11 = v8 + ((v9 + 40) & ~v9);
  v12 = 8 * v11;
  if (v11 <= 3)
  {
    v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      v13 = *(_DWORD *)(a1 + v11);
      if (!v13)
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 > 0xFF)
    {
      v13 = *(unsigned __int16 *)(a1 + v11);
      if (!*(_WORD *)(a1 + v11))
        goto LABEL_28;
      goto LABEL_21;
    }
    if (v15 < 2)
    {
LABEL_28:
      v17 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v9 + 40) & ~v9);
        if (v19 >= 2)
          return v19 - 1;
        else
          return 0;
      }
      else
      {
        v18 = *(_QWORD *)(v17 + 32);
        if (v18 >= 0xFFFFFFFF)
          LODWORD(v18) = -1;
        return (v18 + 1);
      }
    }
  }
  v13 = *(unsigned __int8 *)(a1 + v11);
  if (!*(_BYTE *)(a1 + v11))
    goto LABEL_28;
LABEL_21:
  v16 = (v13 - 1) << v12;
  if (v11 > 3)
    v16 = 0;
  if ((_DWORD)v11)
  {
    if (v11 > 3)
      LODWORD(v11) = 4;
    __asm { BR              X12 }
  }
  return v7 + v16 + 1;
}

void storeEnumTagSinglePayload for SetEntityPropertyAction(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  v12 = ((*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)) + v11;
  v13 = a3 >= v10;
  v14 = a3 - v10;
  if (v14 != 0 && v13)
  {
    if (v12 > 3)
    {
      v6 = 1u;
      if (v10 < a2)
        goto LABEL_19;
      goto LABEL_26;
    }
    v15 = ((v14 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v6 = 4u;
      if (v10 < a2)
      {
LABEL_19:
        v16 = ~v10 + a2;
        if (v12 < 4)
        {
          if ((_DWORD)v12)
          {
            v17 = v16 & ~(-1 << (8 * v12));
            bzero(a1, v12);
            if ((_DWORD)v12 == 3)
            {
              *a1 = v17;
              *((_BYTE *)a1 + 2) = BYTE2(v17);
            }
            else if ((_DWORD)v12 == 2)
            {
              *a1 = v17;
            }
            else
            {
              *(_BYTE *)a1 = v17;
            }
          }
        }
        else
        {
          bzero(a1, v12);
          *(_DWORD *)a1 = v16;
        }
        __asm { BR              X10 }
      }
LABEL_26:
      __asm { BR              X15 }
    }
    if (v15 >= 0x100)
      v6 = 2;
    else
      v6 = v15 > 1;
  }
  if (v10 < a2)
    goto LABEL_19;
  goto LABEL_26;
}

void sub_21BCC6770()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_21BCC6778()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_21BCC6798()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_21BCC67A0()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_21BCC67B0()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t storeEnumTagSinglePayload for SetEntityPropertyAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BCC6808 + 4 * byte_21BE6FB37[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BCC683C + 4 * byte_21BE6FB32[v4]))();
}

uint64_t sub_21BCC683C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC6844(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCC684CLL);
  return result;
}

uint64_t sub_21BCC6858(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCC6860);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BCC6864(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC686C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in SetEntityPropertyAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomDebugStringConvertible in SetEntityPropertyAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

void base witness table accessor for CustomStringConvertible in SetEntityPropertyAction<A>.CodingKeys()
{
  JUMPOUT(0x220772E3CLL);
}

uint64_t static SetEntityPropertyAction.decodeValue(from:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (swift_dynamicCastMetatype())
  {
    v8 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v7);
    MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v8);
    type metadata accessor for KeyedDecodingContainer();
    result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v4)
      return result;
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    v11 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v10);
    MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v11);
    type metadata accessor for KeyedDecodingContainer();
    result = KeyedDecodingContainer.decode(_:forKey:)();
    if (v4)
      return result;
    return swift_dynamicCast();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD2<Float>);
  if (swift_dynamicCastMetatype())
  {
    v13 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v12);
    MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v13);
    type metadata accessor for KeyedDecodingContainer();
    v14 = (unint64_t *)&lazy protocol witness table cache variable for type SIMD2<Float> and conformance SIMD2<A>;
    v15 = &demangling cache variable for type metadata for SIMD2<Float>;
    v16 = MEMORY[0x24BEE40E8];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIMD3<Float>);
    if (swift_dynamicCastMetatype())
    {
      v18 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v17);
      MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v18);
      type metadata accessor for KeyedDecodingContainer();
      v14 = &lazy protocol witness table cache variable for type SIMD3<Float> and conformance SIMD3<A>;
      v15 = &demangling cache variable for type metadata for SIMD3<Float>;
      v16 = MEMORY[0x24BEE4118];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>);
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for simd_quatf(0);
        if (swift_dynamicCastMetatype())
        {
          v22 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v21);
          MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v22);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(&lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>, (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>, MEMORY[0x24BEE4178]);
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else if (swift_dynamicCastMetatype())
        {
          v24 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v23);
          MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v24);
          type metadata accessor for KeyedDecodingContainer();
          result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else if (swift_dynamicCastMetatype())
        {
          v26 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v25);
          MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v26);
          type metadata accessor for KeyedDecodingContainer();
          result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else if (swift_dynamicCastMetatype())
        {
          v28 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v27);
          MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v28);
          type metadata accessor for KeyedDecodingContainer();
          result = KeyedDecodingContainer.decode(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        else
        {
          if (!swift_dynamicCastMetatype())
          {
            v31 = type metadata accessor for SetEntityPropertyAction.DecodingErrors(0, a3, a4, v29);
            MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.DecodingErrors, v31);
            swift_allocError();
            return swift_willThrow();
          }
          v30 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v29);
          MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v30);
          type metadata accessor for KeyedDecodingContainer();
          lazy protocol witness table accessor for type Transform and conformance Transform();
          result = KeyedDecodingContainer.decode<A>(_:forKey:)();
          if (!v4)
            return swift_dynamicCast();
        }
        return result;
      }
      v20 = type metadata accessor for SetEntityPropertyAction.CodingKeys(255, a3, a4, v19);
      MEMORY[0x220772E3C](&protocol conformance descriptor for SetEntityPropertyAction<A>.CodingKeys, v20);
      type metadata accessor for KeyedDecodingContainer();
      v14 = &lazy protocol witness table cache variable for type SIMD4<Float> and conformance SIMD4<A>;
      v15 = (uint64_t *)&demangling cache variable for type metadata for SIMD4<Float>;
      v16 = MEMORY[0x24BEE4178];
    }
  }
  lazy protocol witness table accessor for type Scene.Publisher<SceneEvents.Render> and conformance Scene.Publisher<A>(v14, v15, v16);
  result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (!v4)
    return swift_dynamicCast();
  return result;
}

uint64_t SetEntityPropertyActionHandler.actionSkipped(event:)(uint64_t a1, uint64_t a2)
{
  return specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
}

uint64_t protocol witness for ActionHandlerProtocol.actionStarted(event:) in conformance SetEntityPropertyActionHandler<A>(uint64_t a1, uint64_t a2)
{
  return SetEntityPropertyActionHandler.actionSkipped(event:)(a1, a2);
}

uint64_t specialized SetEntityPropertyAction.CodingKeys.init(intValue:)()
{
  return 3;
}

uint64_t type metadata accessor for SetEntityPropertyAction.DecodingErrors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetEntityPropertyAction.DecodingErrors);
}

uint64_t type metadata accessor for SetEntityPropertyActionHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SetEntityPropertyActionHandler);
}

uint64_t storeEnumTagSinglePayload for SetEntityPropertyAction.DecodingErrors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BCC6EF4 + 4 * byte_21BE6FB3C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BCC6F14 + 4 * byte_21BE6FB41[v4]))();
}

_BYTE *sub_21BCC6EF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BCC6F14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCC6F1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCC6F24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCC6F2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCC6F34(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in SetEntityPropertyAction<A>.DecodingErrors()
{
  JUMPOUT(0x220772E3CLL);
}

_UNKNOWN **associated type witness table accessor for ActionHandlerProtocol.ActionType : EntityAction in SetEntityPropertyActionHandler<A>()
{
  return &protocol witness table for SetEntityPropertyAction<A>;
}

uint64_t specialized SetEntityPropertyActionHandler.setKeyValueOnEntity(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t SceneNullable;
  uint64_t v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  void *v45;
  Swift::String v46;
  Swift::String v47;
  _QWORD v48[2];
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v48 - v11;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    v24._countAndFlagsBits = 0x2072656C646E6148;
    v24._object = (void *)0xEC00000020726F66;
    String.append(_:)(v24);
    *(_QWORD *)&v49 = type metadata accessor for SetEntityPropertyAction(0, a2, a3, v25);
    swift_getMetatypeMetadata();
    v26._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 0xD000000000000030;
    v27._object = (void *)0x800000021BE85620;
    String.append(_:)(v27);
    specialized static AnimationLogger.logError(_:)(v52, v53);
    return swift_bridgeObjectRelease();
  }
  v15 = Strong;
  v48[0] = v9;
  v16 = type metadata accessor for SetEntityPropertyAction(255, a2, a3, v14);
  v18 = a1
      + *(int *)(type metadata accessor for ActionEvent(0, v16, (uint64_t)&protocol witness table for SetEntityPropertyAction<A>, v17)+ 36);
  v19 = *(_QWORD *)v18;
  v20 = *(_BYTE *)(v18 + 16);
  v48[1] = v15;
  if ((v20 & 1) == 0)
  {
    v52 = v19;
    swift_bridgeObjectRetain();
    v28 = Entity.subscript.getter(&v52);
    outlined consume of ActionEntityResolution();
    if (v28)
      goto LABEL_12;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  SceneNullable = REEntityGetSceneNullable();
  if (!SceneNullable)
  {
    outlined consume of ActionEntityResolution();
LABEL_14:
    v52 = 0;
    v53 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v31._countAndFlagsBits = 0x2072656C646E6148;
    v31._object = (void *)0xEC00000020726F66;
    String.append(_:)(v31);
    *(_QWORD *)&v49 = v16;
    swift_getMetatypeMetadata();
    v32._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = 0xD00000000000003BLL;
    v33._object = (void *)0x800000021BE87DB0;
    String.append(_:)(v33);
    REEntityGetName();
    v34._countAndFlagsBits = String.init(cString:)();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 10535;
    v35._object = (void *)0xE200000000000000;
    String.append(_:)(v35);
    specialized static AnimationLogger.logError(_:)(v52, v53);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  v22 = SceneNullable;
  v23 = (id)RESceneGetSwiftObject();
  type metadata accessor for Scene();
  if (v23)
  {
    swift_dynamicCastClassUnconditional();
  }
  else
  {
    swift_allocObject();
    Scene.init(coreScene:)(v22);
  }
  v28 = Scene.findEntity(named:)();
  swift_release();
  outlined consume of ActionEntityResolution();
  if (!v28)
    goto LABEL_14;
LABEL_12:
  v29 = v18 + *(int *)(v16 + 40);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v30(v12, v29, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 48))(v12, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
LABEL_19:
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal);
  if (!swift_dynamicCast())
    goto LABEL_19;
  if (*((_QWORD *)&v50 + 1))
  {
    outlined init with take of BindableDataInternal(&v49, (uint64_t)&v52);
    v37 = v54;
    v38 = v55;
    __swift_project_boxed_opaque_existential_1(&v52, v54);
    (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(v38 + 56))(*(_QWORD *)(v18 + 24), *(_QWORD *)(v18 + 32), v28, v37, v38);
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  }
LABEL_20:
  outlined destroy of BindableDataInternal?((uint64_t)&v49);
  v52 = 0;
  v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(101);
  v39._countAndFlagsBits = 0x2072656C646E6148;
  v39._object = (void *)0xEC00000020726F66;
  String.append(_:)(v39);
  *(_QWORD *)&v49 = v16;
  swift_getMetatypeMetadata();
  v40._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._object = (void *)0x800000021BE88170;
  v41._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v41);
  v30((char *)v48[0], v29, v6);
  v42._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0xD000000000000031;
  v43._object = (void *)0x800000021BE881A0;
  String.append(_:)(v43);
  v44 = *(_QWORD *)(v18 + 24);
  v45 = *(void **)(v18 + 32);
  swift_bridgeObjectRetain();
  v46._countAndFlagsBits = v44;
  v46._object = v45;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._countAndFlagsBits = 39;
  v47._object = (void *)0xE100000000000000;
  String.append(_:)(v47);
  specialized static AnimationLogger.logError(_:)(v52, v53);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t outlined destroy of BindableDataInternal?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BindableDataInternal?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AudioResource.ChannelLayoutError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BCC7568 + 4 * byte_21BE6FEA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BCC759C + 4 * byte_21BE6FEA0[v4]))();
}

uint64_t sub_21BCC759C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC75A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCC75ACLL);
  return result;
}

uint64_t sub_21BCC75B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCC75C0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BCC75C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC75CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.ChannelLayoutError()
{
  return &type metadata for AudioResource.ChannelLayoutError;
}

ValueMetadata *type metadata accessor for AudioResource.CoreREError()
{
  return &type metadata for AudioResource.CoreREError;
}

unint64_t lazy protocol witness table accessor for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError;
  if (!lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.ChannelLayoutError, &type metadata for AudioResource.ChannelLayoutError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError;
  if (!lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.ChannelLayoutError, &type metadata for AudioResource.ChannelLayoutError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.ChannelLayoutError and conformance AudioResource.ChannelLayoutError);
  }
  return result;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioResource.ChannelLayoutError()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000046;
  else
    return 0xD00000000000003DLL;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance AudioResource.Error()
{
  return 0x206E776F6E6B6E55;
}

uint64_t storeEnumTagSinglePayload for AudioResource.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21BCC772C + 4 * byte_21BE6FEAA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21BCC774C + 4 * byte_21BE6FEAF[v4]))();
}

_BYTE *sub_21BCC772C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21BCC774C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCC7754(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCC775C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21BCC7764(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21BCC776C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AudioResource.Error()
{
  return &type metadata for AudioResource.Error;
}

unint64_t lazy protocol witness table accessor for type AudioResource.Error and conformance AudioResource.Error()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error;
  if (!lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Error, &type metadata for AudioResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error;
  if (!lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for AudioResource.Error, &type metadata for AudioResource.Error);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResource.Error and conformance AudioResource.Error);
  }
  return result;
}

uint64_t __RKWaitAction.__allocating_init(duration:block:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 120) = a2;
  *(_QWORD *)(v6 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_QWORD *)(v6 + 184) = 0;
  *(float *)(v6 + 108) = a3;
  *(_QWORD *)(v6 + 112) = a1;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.init(duration:block:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 120) = a2;
  *(_QWORD *)(v3 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_QWORD *)(v3 + 184) = 0;
  *(float *)(v3 + 108) = a3;
  *(_QWORD *)(v3 + 112) = a1;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.perform(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v17 = StaticString.description.getter();
  v18 = v2;
  v3._countAndFlagsBits = 8250;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v5 = v17;
  v4 = v18;
  v6 = (_QWORD *)(v0 + 96);
  swift_beginAccess();
  if (*(_BYTE *)(v1 + 104) == 1 && *v6 == 1 && (swift_beginAccess(), *(_BYTE *)(v1 + 105) == 1)
    || !RESceneGetECSManagerNullable())
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 96);
    v8 = *(_BYTE *)(v1 + 104);
    v9 = 1;
    *(_QWORD *)(v1 + 96) = 1;
    *(_BYTE *)(v1 + 104) = 1;
    v17 = v7;
    LOBYTE(v18) = v8;
    __RKEntityAction.state.didset((uint64_t)&v17);
    *(_QWORD *)(v1 + 184) = 0;
    v10 = swift_allocObject();
    swift_weakInit();
    v11 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = partial apply for closure #1 in __RKWaitAction.perform(with:);
    *(_QWORD *)(v1 + 40) = v10;
    outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
    *(double *)(v1 + 176) = *(float *)(v1 + 108);
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v12 = swift_allocObject();
    swift_weakInit();
    specialized Scene.subscribe<A>(to:on:componentType:rootEntity:matching:_:)((uint64_t)v15, (uint64_t)partial apply for closure #2 in __RKWaitAction.perform(with:), v12, &v17);
    swift_release();
    outlined destroy of BodyTrackingComponent?((uint64_t)v15, &demangling cache variable for type metadata for EventSource?);
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v17, v1 + 136);
    swift_endAccess();
    v17 = v5;
    v18 = v4;
    v13 = static os_log_type_t.debug.getter();
    specialized InteractionsLogger.log(_:_:)(v13, &v17);
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_21BCC7AD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t closure #1 in __RKWaitAction.perform(with:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  _QWORD v5[4];
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = result + 136;
    swift_beginAccess();
    outlined init with copy of Cancellable?(v2, (uint64_t)&v6);
    if (*((_QWORD *)&v7 + 1))
    {
      outlined init with copy of __REAssetService((uint64_t)&v6, (uint64_t)v5);
      outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for Cancellable?);
      __swift_project_boxed_opaque_existential_1(v5, v5[3]);
      dispatch thunk of Cancellable.cancel()();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    }
    else
    {
      outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for Cancellable?);
    }
    v8 = 0;
    v6 = 0u;
    v7 = 0u;
    swift_beginAccess();
    outlined assign with take of Cancellable?((uint64_t)&v6, v2);
    swift_endAccess();
    v3 = *(void (**)(uint64_t))(v1 + 112);
    v4 = swift_retain();
    v3(v4);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in __RKWaitAction.perform(with:)()
{
  return closure #1 in __RKWaitAction.perform(with:)();
}

uint64_t closure #2 in __RKWaitAction.perform(with:)(uint64_t a1)
{
  double v1;
  uint64_t result;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *(double *)(a1 + 8);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v3 = result;
    v4 = *(double *)(result + 176);
    v5 = v1 + *(double *)(result + 184);
    *(double *)(result + 184) = v5;
    if (v4 + -0.008 <= v5)
    {
      swift_beginAccess();
      v6 = *(_QWORD *)(v3 + 96);
      v7 = *(_BYTE *)(v3 + 104);
      *(_QWORD *)(v3 + 96) = 2;
      *(_BYTE *)(v3 + 104) = 1;
      v8 = v6;
      v9 = v7;
      swift_retain();
      __RKEntityAction.state.didset((uint64_t)&v8);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t partial apply for closure #2 in __RKWaitAction.perform(with:)(uint64_t a1)
{
  return closure #2 in __RKWaitAction.perform(with:)(a1);
}

uint64_t __RKWaitAction.reversed()()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(v0 + 108);
  type metadata accessor for __RKWaitAction();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 108) = v1;
  *(_QWORD *)(v2 + 112) = destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
  return __RKEntityAction.init(targetEntity:)(0);
}

uint64_t __RKWaitAction.copy(with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_DWORD *)(v1 + 108);
  v5 = *(_QWORD *)(v1 + 112);
  v4 = *(_QWORD *)(v1 + 120);
  v6 = type metadata accessor for __RKWaitAction();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 120) = v4;
  *(_QWORD *)(v7 + 128) = 0x3F80624DD2F1A9FCLL;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_QWORD *)(v7 + 184) = 0;
  *(_DWORD *)(v7 + 108) = v3;
  *(_QWORD *)(v7 + 112) = v5;
  swift_retain();
  result = __RKEntityAction.init(targetEntity:)(0);
  a1[3] = v6;
  *a1 = result;
  return result;
}

uint64_t __RKWaitAction.description.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  v0._countAndFlagsBits = __RKEntityAction.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 539831584;
  v1._object = (void *)0xE400000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 2108704;
  v3._object = (void *)0xE300000000000000;
  String.append(_:)(v3);
  Float.write<A>(to:)();
  return 0;
}

void __RKWaitAction.__allocating_init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void __RKWaitAction.init(targetEntity:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t __RKWaitAction.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  return outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
}

uint64_t __RKWaitAction.deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return v0;
}

uint64_t __RKWaitAction.__deallocating_deinit()
{
  uint64_t v0;

  swift_beginAccess();
  *(_QWORD *)(v0 + 96) = 2;
  *(_BYTE *)(v0 + 104) = 1;
  swift_release();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 32));
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed () -> ())?(*(_QWORD *)(v0 + 72));
  swift_release();
  outlined destroy of BodyTrackingComponent?(v0 + 136, &demangling cache variable for type metadata for Cancellable?);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKWaitAction()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKWaitAction()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __RKWaitAction.__allocating_init(duration:block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 664))();
}

unint64_t one-time initialization function for instanceRegistry()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<__ARReferenceProvider>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static __ARReferenceProvider.instanceRegistry = v0;
  return result;
}

uint64_t static __ARReferenceProvider.shared.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[5];

  v0 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v0, (uint64_t)v3);
  if (one-time initialization token for instanceRegistry != -1)
    swift_once();
  swift_retain();
  v1 = specialized AssetServiceScopedRegistry.instance(for:)(v3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1;
}

uint64_t static __ARReferenceProvider.instance(for:)(_QWORD *a1)
{
  uint64_t v2;

  if (one-time initialization token for instanceRegistry != -1)
    swift_once();
  swift_retain();
  v2 = specialized AssetServiceScopedRegistry.instance(for:)(a1);
  swift_release();
  return v2;
}

void __ARReferenceProvider.fetchPlugin(forGroup:)(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v5, (uint64_t)v9);
      v6 = v10;
      v7 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      v8._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      LOBYTE(v6) = String.hasPrefix(_:)(v8);
      swift_bridgeObjectRelease();
      if ((v6 & 1) != 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      v5 += 40;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with copy of __REAssetService((uint64_t)v9, a1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
LABEL_6:
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
}

Swift::Bool __swiftcall __ARReferenceProvider.supportsGroup(named:)(Swift::String named)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::Bool v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v2 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of __REAssetService(v4, (uint64_t)v10);
      v5 = v11;
      v6 = v12;
      __swift_project_boxed_opaque_existential_1(v10, v11);
      v7._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
      LOBYTE(v5) = String.hasPrefix(_:)(v7);
      swift_bridgeObjectRelease();
      if ((v5 & 1) != 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined init with copy of __REAssetService((uint64_t)v10, (uint64_t)&v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    if (*((_QWORD *)&v14 + 1))
    {
      v8 = 1;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_6:
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
  }
  v8 = 0;
LABEL_10:
  outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v13);
  return v8;
}

uint64_t __ARReferenceProvider.__fetchReferenceObject(group:name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;

  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (!v8)
  {
LABEL_6:
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
LABEL_7:
    result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v23);
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  v12 = v7 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of __REAssetService(v12, (uint64_t)v20);
    v13 = v21;
    v14 = v22;
    __swift_project_boxed_opaque_existential_1(v20, v21);
    v15._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    LOBYTE(v13) = String.hasPrefix(_:)(v15);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
      break;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
    v12 += 40;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with copy of __REAssetService((uint64_t)v20, (uint64_t)&v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_7;
  outlined init with take of BindableDataInternal(&v23, (uint64_t)v26);
  v18 = v27;
  v17 = v28;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 + 8) + 8))(a1, a2, a3, a4, v18);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
}

uint64_t __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v8 = *(_QWORD *)(v6 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_6:
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
LABEL_7:
    result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v25);
    *a5 = 0u;
    a5[1] = 0u;
    return result;
  }
  v14 = v8 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of __REAssetService(v14, (uint64_t)v22);
    v15 = v23;
    v16 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    v17._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
    LOBYTE(v15) = String.hasPrefix(_:)(v17);
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      break;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    v14 += 40;
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  outlined init with copy of __REAssetService((uint64_t)v22, (uint64_t)&v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  if (!*((_QWORD *)&v26 + 1))
    goto LABEL_7;
  outlined init with take of BindableDataInternal(&v25, (uint64_t)v28);
  v20 = v29;
  v19 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v19 + 8) + 16))(a1, a2, a3, a4, v20, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t __ARReferenceProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t __ARReferenceProvider.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double protocol witness for __ARReferenceProviding.__fetchReferenceObject(group:name:) in conformance __ARReferenceProvider@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  double result;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  __ARReferenceProvider.fetchPlugin(forGroup:)((uint64_t)&v13);
  if (v14)
  {
    outlined init with take of BindableDataInternal(&v13, (uint64_t)v15);
    v10 = v16;
    v11 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 + 8) + 8))(a1, a2, a3, a4, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v13);
    result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t protocol witness for __ARReferenceProviding.__fetchReferenceImage(group:name:physicalWidth:) in conformance __ARReferenceProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  __ARReferenceProvider.fetchPlugin(forGroup:)((uint64_t)&v15);
  if (v16)
  {
    outlined init with take of BindableDataInternal(&v15, (uint64_t)v17);
    v12 = v18;
    v13 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)(v13 + 8) + 16))(a1, a2, a3, a4, v12, a6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    result = outlined destroy of __ARReferenceProvidingPlugin?((uint64_t)&v15);
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t outlined destroy of __ARReferenceProvidingPlugin?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __ARReferenceProvidingPlugin?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for __ARReferenceProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for __ARReferenceProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of __ARReferenceProvider.supportsGroup(named:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceObject(group:name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of __ARReferenceProvider.__fetchReferenceImage(group:name:physicalWidth:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t DynamicLightShadowComponent.castsShadow.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t DynamicLightShadowComponent.castsShadow.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*DynamicLightShadowComponent.castsShadow.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

RealityFoundation::DynamicLightShadowComponent __swiftcall DynamicLightShadowComponent.init(castsShadow:)(RealityFoundation::DynamicLightShadowComponent castsShadow)
{
  RealityFoundation::DynamicLightShadowComponent *v1;

  v1->castsShadow = castsShadow.castsShadow;
  return castsShadow;
}

uint64_t protocol witness for static Component.__fromCore(_:) in conformance DynamicLightShadowComponent@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REDynamicLightShadowComponentGetCastsShadow();
  *a1 = result;
  return result;
}

uint64_t static DynamicLightShadowComponent.__fromCore(_:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = REDynamicLightShadowComponentGetCastsShadow();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Component.__toCore(_:) in conformance DynamicLightShadowComponent()
{
  REDynamicLightShadowComponentSetCastsShadow();
  return RENetworkMarkComponentDirty();
}

uint64_t DynamicLightShadowComponent.__toCore(_:)()
{
  REDynamicLightShadowComponentSetCastsShadow();
  return RENetworkMarkComponentDirty();
}

void protocol witness for static Component.__coreComponentType.getter in conformance DynamicLightShadowComponent(_DWORD *a1@<X8>)
{
  *a1 = 78;
}

void static DynamicLightShadowComponent.__coreComponentType.getter(_DWORD *a1@<X8>)
{
  *a1 = 78;
}

uint64_t storeEnumTagSinglePayload for DynamicLightShadowComponent(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21BCC8AFC + 4 * byte_21BE701D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21BCC8B30 + 4 * byte_21BE701D0[v4]))();
}

uint64_t sub_21BCC8B30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC8B38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCC8B40);
  return result;
}

uint64_t sub_21BCC8B4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCC8B54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21BCC8B58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC8B60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DynamicLightShadowComponent()
{
  return &type metadata for DynamicLightShadowComponent;
}

uint64_t __RKVisibilityShowPopAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKVisibilityShowPopAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKVisibilityShowPopAnimation()
{
  return objc_opt_self();
}

uint64_t specialized static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:)(__int128 *a1, float a2, float a3, float32x4_t a4, uint64_t a5, _BYTE *a6, char a7)
{
  char v7;
  unsigned int v8;
  float v9;
  void *v13;
  _QWORD *rawValue;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  _OWORD *v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  Swift::OpaquePointer v33;

  v28 = *a1;
  v26 = a1[2];
  v27 = a1[1];
  if (*a6)
  {
    if (*a6 == 1)
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 75, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #1 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
    else
    {
      v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 88, 0, MEMORY[0x24BEE4AF8]);
      v13 = &outlined read-only object #2 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
    }
  }
  else
  {
    v33._rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 63, 0, MEMORY[0x24BEE4AF8]);
    v13 = &outlined read-only object #0 of static __RKVisibilityShowPopAnimation.createVisibilityShowPopAnimation(transform:_:localBoundingBox:variant:duration:distance:orientation:additive:);
  }
  __makeXfos(_:_:)((Swift::OpaquePointer)v13, &v33);
  rawValue = v33._rawValue;
  if (!*((_QWORD *)v33._rawValue + 2))
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  RESampledAnimationDefaultParameters();
  v15 = rawValue[2];
  if (!v15)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = BYTE1(v31);
  v9 = (float)v15;
  v8 = DWORD2(v31);
  v16 = (__int128 *)&rawValue[6 * v15];
  v24 = *v16;
  v25 = *(v16 - 1);
  v23 = v16[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
LABEL_15:
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15 + 1, 1, rawValue);
  v18 = rawValue[2];
  v17 = rawValue[3];
  v19 = a2 / v9;
  if (v18 >= v17 >> 1)
    rawValue = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v17 > 1), v18 + 1, 1, rawValue);
  rawValue[2] = v18 + 1;
  v20 = &rawValue[6 * v18];
  v20[2] = v25;
  v20[3] = v24;
  v20[4] = v23;
  v33._rawValue = rawValue;
  v30 = v28;
  v31 = v27;
  v32 = v26;
  specialized static __RKVisibilityBaseAnimation.bakeVisibilityShowXfos(transform:localBoundingBox:xfos:distance:orientation:additive:)((uint64_t)&v30, (uint64_t)&v33, a3, a4);
  LOBYTE(v30) = 1;
  *((_QWORD *)&v30 + 1) = "Transform.transform";
  LOBYTE(v31) = a7 & 1;
  BYTE1(v31) = v7;
  *(_QWORD *)((char *)&v31 + 4) = __PAIR64__(v8, LODWORD(v19));
  *((float *)&v31 + 3) = a2;
  result = REAssetManagerTimelineAssetCreateSRTSampledAnimation();
  if (result)
  {
    v22 = result;
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OpaquePointer>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_21BE411F0;
    *(_QWORD *)(result + 32) = v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

__n128 MeshResource.GenerateTextOptions.containerFrame.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

double MeshResource.GenerateTextOptions.containerFrame.setter(uint64_t a1)
{
  uint64_t v1;
  char v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  char v6;

  outlined init with take of CGRect?(a1, (uint64_t)v5);
  v2 = v6;
  result = *(double *)v5;
  v4 = v5[1];
  *(_OWORD *)v1 = v5[0];
  *(_OWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = v2;
  return result;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGRect?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*MeshResource.GenerateTextOptions.containerFrame.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double MeshResource.GenerateTextOptions.init()@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

BOOL static MeshResource.ShapeExtrusionOptions.ChamferMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MeshResource.ShapeExtrusionOptions.ChamferMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int MeshResource.ShapeExtrusionOptions.ChamferMode.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

int32x4_t MeshResource.ShapeExtrusionOptions.MaterialAssignment.init(assignAll:)@<Q0>(unsigned int a1@<W0>, int32x4_t *a2@<X8>)
{
  int32x4_t result;

  result = vdupq_n_s32(a1);
  *a2 = result;
  a2[1].i32[0] = a1;
  return result;
}

uint64_t MeshResource.ShapeExtrusionOptions.MaterialAssignment.init(front:back:extrusion:frontChamfer:backChamfer:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, _DWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

double MeshResource.ShapeExtrusionOptions.init()@<D0>(uint64_t a1@<X8>)
{
  _OWORD *v2;
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v2 = (_OWORD *)(a1 + 16);
  *(_QWORD *)a1 = 1048576000;
  *(_BYTE *)(a1 + 8) = 0;
  outlined destroy of CGPathProviding?(a1 + 16);
  *v2 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_QWORD *)&result = 6;
  *(_OWORD *)(a1 + 64) = xmmword_21BE70240;
  *(_BYTE *)(a1 + 80) = 2;
  *(_QWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 100) = 0;
  return result;
}

uint64_t outlined destroy of CGPathProviding?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MeshResource.ShapeExtrusionOptions.extrusionMethod.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)v1;
  *(_QWORD *)a1 = *(_QWORD *)v1;
  v3 = *(_BYTE *)(v1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  return outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v2, v3);
}

uint64_t outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 - 1 <= 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t MeshResource.ShapeExtrusionOptions.extrusionMethod.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  result = outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_BYTE *)(v1 + 8) = v3;
  return result;
}

uint64_t outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a2 - 1 <= 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.extrusionMethod.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CGPathProviding?(v1 + 16, a1);
}

uint64_t outlined init with copy of CGPathProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MeshResource.ShapeExtrusionOptions._chamferProfileStorage.setter(uint64_t a1)
{
  uint64_t v1;

  return outlined assign with take of CGPathProviding?(a1, v1 + 16);
}

uint64_t outlined assign with take of CGPathProviding?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGPathProviding?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MeshResource.ShapeExtrusionOptions._chamferProfileStorage.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

float MeshResource.ShapeExtrusionOptions.chamferRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 56);
}

void MeshResource.ShapeExtrusionOptions.chamferRadius.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 56) = a1;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferRadius.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.boundaryResolution.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 64);
}

_QWORD *MeshResource.ShapeExtrusionOptions.boundaryResolution.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.boundaryResolution.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.chamferResolution.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 72);
}

_QWORD *MeshResource.ShapeExtrusionOptions.chamferResolution.setter(_QWORD *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferResolution.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void MeshResource.ShapeExtrusionOptions.chamferMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 80);
}

_BYTE *MeshResource.ShapeExtrusionOptions.chamferMode.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 80) = *result;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.chamferMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 MeshResource.ShapeExtrusionOptions.materialAssignment.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = *(_DWORD *)(v1 + 100);
  result = *(__n128 *)(v1 + 84);
  *a1 = result;
  a1[1].n128_u32[0] = v2;
  return result;
}

__n128 MeshResource.ShapeExtrusionOptions.materialAssignment.setter(__n128 *a1)
{
  uint64_t v1;
  unsigned __int32 v2;
  __n128 result;

  v2 = a1[1].n128_u32[0];
  result = *a1;
  *(__n128 *)(v1 + 84) = *a1;
  *(_DWORD *)(v1 + 100) = v2;
  return result;
}

uint64_t (*MeshResource.ShapeExtrusionOptions.materialAssignment.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t MeshResource.init(extruding:textOptions:extrusionOptions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];
  char v17;

  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v16[0] = *(_OWORD *)a2;
  v16[1] = v9;
  v17 = v8;
  v10 = extrude(text:textOptions:shapeOptions:)(a1, (uint64_t)v16, a3);
  if (v4)
  {
    outlined destroy of MeshResource.ShapeExtrusionOptions(a3);
    v11 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  }
  else
  {
    v13 = specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(v10);
    swift_bridgeObjectRelease();
    v5 = (*(uint64_t (**)(uint64_t))(v3 + 128))(v13);
    *(_QWORD *)&v16[0] = v5;
    swift_retain();
    RequestLoadable.enforceResourceSharingBeforeECSCommits()();
    outlined destroy of MeshResource.ShapeExtrusionOptions(a3);
    v15 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
    if (v14)
      swift_release_n();
    else
      swift_release();
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 40) = v3;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 64) = v5;
  *(_BYTE *)(v4 + 144) = *(_BYTE *)(a2 + 32);
  return swift_task_switch();
}

uint64_t outlined destroy of MeshResource.ShapeExtrusionOptions(uint64_t a1)
{
  destroy for MeshResource.ShapeExtrusionOptions(a1);
  return a1;
}

uint64_t MeshResource.init(extruding:textOptions:extrusionOptions:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v1 = *(_BYTE *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 64);
  v6[0] = *(_OWORD *)(v0 + 48);
  v6[1] = v4;
  v7 = v1;
  *(_QWORD *)(v0 + 80) = extrude(text:textOptions:shapeOptions:)(v2, (uint64_t)v6, v3);
  *(_QWORD *)(v0 + 88) = 0;
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 96) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[11];
  v2 = v0[10];
  swift_release();
  v0[13] = specialized static ExtrudedGlyphDescriptor.compile(glyphs:)(v2);
  v0[14] = v1;
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = (*(uint64_t (**)(_QWORD))(v0[5] + 128))(v0[13]);
  v0[15] = v1;
  v0[2] = v1;
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  v0[16] = v2;
  *v2 = v0;
  v2[1] = MeshResource.init(extruding:textOptions:extrusionOptions:);
  return RequestLoadable.awaitForResourceSharing()(v0[5], (uint64_t)&protocol witness table for MeshResource);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of MeshResource.ShapeExtrusionOptions(*(_QWORD *)(v0 + 32));
  v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of MeshResource.ShapeExtrusionOptions(*(_QWORD *)(v0 + 32));
  v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  outlined destroy of MeshResource.ShapeExtrusionOptions(*(_QWORD *)(v0 + 32));
  v2 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release_n();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(const CGPath *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE __dst[520];
  uint64_t v14;

  v6 = extrude(path:options:)(a1, a2);
  if (v3)
  {

    outlined destroy of MeshResource.ShapeExtrusionOptions(a2);
  }
  else
  {
    v7 = v6;
    v14 = MEMORY[0x24BEE4AF8];
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      v9 = 32;
      do
      {
        memcpy(__dst, (const void *)(v7 + v9), sizeof(__dst));
        v10 = ExtrudedShapeDescriptor.allDescriptors.getter();
        specialized Array.append<A>(contentsOf:)((uint64_t)v10);
        v9 += 520;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease_n();
      v11 = v14;
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = MEMORY[0x24BEE4AF8];
    }
    v2 = MeshResource.init(from:)(v11);

    outlined destroy of MeshResource.ShapeExtrusionOptions(a2);
  }
  return v2;
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  _BYTE __dst[520];

  v1 = extrude(path:options:)(*(const CGPath **)(v0 + 16), *(_QWORD *)(v0 + 24));
  v8 = MEMORY[0x24BEE4AF8];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = 32;
    do
    {
      memcpy(__dst, (const void *)(v1 + v3), sizeof(__dst));
      v4 = ExtrudedShapeDescriptor.allDescriptors.getter();
      specialized Array.append<A>(contentsOf:)((uint64_t)v4);
      v3 += 520;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
    v5 = v8;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = MEMORY[0x24BEE4AF8];
  }
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v6;
  *v6 = v0;
  v6[1] = MeshResource.init(extruding:extrusionOptions:);
  return MeshResource.init(from:)(v5);
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);

  outlined destroy of MeshResource.ShapeExtrusionOptions(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

{
  uint64_t v0;

  outlined destroy of MeshResource.ShapeExtrusionOptions(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MeshResource.init(extruding:extrusionOptions:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 48) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 56) = a1;
  return swift_task_switch();
}

unint64_t lazy protocol witness table accessor for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode;
  if (!lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for MeshResource.ShapeExtrusionOptions.ChamferMode, &type metadata for MeshResource.ShapeExtrusionOptions.ChamferMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeshResource.ShapeExtrusionOptions.ChamferMode and conformance MeshResource.ShapeExtrusionOptions.ChamferMode);
  }
  return result;
}

uint64_t dispatch thunk of CGPathProviding.cgPath.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t storeEnumTagSinglePayload for MeshResource.GenerateTextOptions(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.GenerateTextOptions()
{
  return &type metadata for MeshResource.GenerateTextOptions;
}

uint64_t destroy for MeshResource.ShapeExtrusionOptions(uint64_t a1)
{
  uint64_t result;

  result = outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  if (*(_QWORD *)(a1 + 40))
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  return result;
}

uint64_t initializeWithCopy for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = (_OWORD *)(a1 + 16);
  v7 = (_OWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 40);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = v8;
    *(_QWORD *)(a1 + 48) = v9;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v7);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 32);
    *v6 = *v7;
    *(_OWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithCopy for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  v7 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v5;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v6, v7);
  v8 = *(_QWORD *)(a2 + 40);
  if (!*(_QWORD *)(a1 + 40))
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 16, a2 + 16);
      goto LABEL_8;
    }
LABEL_7:
    v9 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v10;
    goto LABEL_8;
  }
  if (!v8)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
LABEL_8:
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t assignWithTake for MeshResource.ShapeExtrusionOptions(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  unsigned __int8 v6;
  __int128 v7;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  if (*(_QWORD *)(a1 + 40))
    __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 84) = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  return a1;
}

uint64_t getEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.CurveStrokeResolution()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.CurveStrokeResolution;
}

uint64_t storeEnumTagSinglePayload for MeshResource.ShapeExtrusionOptions.ChamferMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21BCC9E8C + 4 * byte_21BE70255[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21BCC9EC0 + 4 * byte_21BE70250[v4]))();
}

uint64_t sub_21BCC9EC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC9EC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21BCC9ED0);
  return result;
}

uint64_t sub_21BCC9EDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21BCC9EE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21BCC9EE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21BCC9EF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.ChamferMode()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.ChamferMode;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.MaterialAssignment()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.MaterialAssignment;
}

uint64_t initializeBufferWithCopyOfBuffer for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1)
{
  return outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  outlined copy of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v5, v6);
  return a1;
}

uint64_t assignWithTake for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  outlined consume of MeshResource.ShapeExtrusionOptions.ExtrusionMethod(v4, v5);
  return a1;
}

uint64_t destructiveInjectEnumTag for MeshResource.ShapeExtrusionOptions.ExtrusionMethod(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MeshResource.ShapeExtrusionOptions.ExtrusionMethod()
{
  return &type metadata for MeshResource.ShapeExtrusionOptions.ExtrusionMethod;
}

uint64_t specialized Sequence<>.starts<A>(with:)()
{
  Swift::String_optional v0;
  uint64_t countAndFlagsBits;
  void *object;
  char v3;
  Swift::String_optional v4;
  Swift::String_optional v5;
  void *v6;
  _BOOL8 v7;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      v4 = String.Iterator.next()();
      countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TextureResource.OptionError.errorDescription.getter(uint64_t a1, void *a2, char a3)
{
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;

  if ((a3 & 1) != 0)
  {
    _StringGuts.grow(_:)(56);
    v6 = 0xD000000000000035;
    v5 = 0x800000021BE8ED30;
  }
  else
  {
    _StringGuts.grow(_:)(54);
    v5 = 0x800000021BE8ED70;
    v6 = 0xD000000000000033;
  }
  String.append(_:)(*(Swift::String *)&v6);
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 34;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.OptionError()
{
  uint64_t v0;

  return TextureResource.OptionError.errorDescription.getter(*(_QWORD *)v0, *(void **)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance TextureResource.ExportError()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  if ((v0[2] & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for CFErrorRef(0);
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type CFErrorRef and conformance CFErrorRef, (uint64_t (*)(uint64_t))type metadata accessor for CFErrorRef, MEMORY[0x24BDCFD90]);
    return Error.localizedDescription.getter();
  }
  return v1;
}

uint64_t static TextureResource.maybeCompress(textureAsset:options:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t result;
  uint64_t v11;

  v5 = swift_bridgeObjectRetain();
  v6 = specialized _NativeDictionary.filter(_:)(v5, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRetain();
  v8 = specialized _NativeDictionary.filter(_:)(v7, (uint64_t (*)(char *, unint64_t, uint64_t))specialized closure #1 in _NativeDictionary.filter(_:));
  swift_bridgeObjectRelease_n();
  *a2 = v8;
  if (!*(_QWORD *)(v6 + 16))
    return swift_release();
  v9 = static TextureResource.compressTextureWithEngineQueueCompletion(coreTextureAsset:compressOptions:)(a1, v6);
  result = swift_release();
  if (!v2)
  {
    if (v9)
    {
      v11 = swift_retain();
      ((void (*)(uint64_t))v9)(v11);
      outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
      return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v9);
    }
  }
  return result;
}

uint64_t static TextureResource.exportKTX(contentsOf:to:compilationOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static TextureResource.exportKTX(contentsOf:to:options:)(a1, a2, a3);
}

uint64_t static TextureResource.exportKTX(contentsOf:to:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t TextureAssetFromData;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *buf;
  uint64_t v29;
  os_log_type_t type;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v4 = a3;
  else
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v31 = v4;
  swift_bridgeObjectRetain();
  specialized static TextureResource.importTextureData(contentsOf:options:)();
  if (v3)
    return swift_bridgeObjectRelease();
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, (uint64_t)&v35);
  v6 = v37;
  v7 = v38;
  __swift_project_boxed_opaque_existential_1(&v35, v37);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
  static TextureResource.maybeCompress(textureAsset:options:)(TextureAssetFromData, (uint64_t *)&v31);
  v9 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v9, (uint64_t)&v33);
  if (v34)
  {
    outlined init with take of BindableDataInternal(&v33, (uint64_t)&v35);
    v11 = v37;
    v12 = v38;
    __swift_project_boxed_opaque_existential_1(&v35, v37);
    (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    *(_QWORD *)&v33 = 0;
    URL.path.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v13 = _RERenderManagerExportTextureAssetToKTXWithErrorHandling();
    swift_release();
    if ((v13 & 1) != 0)
    {
      if (*(_QWORD *)(v31 + 16))
      {
        if (one-time initialization token for logger != -1)
          swift_once();
        v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)logger);
        v15 = Logger.logObject.getter();
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          type = v16;
          v17 = (uint8_t *)swift_slowAlloc();
          v29 = swift_slowAlloc();
          v32 = v29;
          *(_DWORD *)v17 = 136315138;
          buf = v17;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any].Keys);
          lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
          lazy protocol witness table accessor for type String and conformance String();
          v18 = Sequence<>.joined(separator:)();
          v20 = v19;
          swift_bridgeObjectRelease();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_21B9AA000, v15, type, "Unexpected options %s", buf, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x220772F44](v29, -1, -1);
          MEMORY[0x220772F44](buf, -1, -1);
        }

      }
    }
    else
    {
      v21 = v33;
      v35 = 0;
      v36 = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v22._object = (void *)0x800000021BE8ECB0;
      v22._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v22);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0xD000000000000021;
      v24._object = (void *)0x800000021BE8ECD0;
      String.append(_:)(v24);
      v25 = v36;
      if (v21)
      {
        swift_bridgeObjectRelease();
        v25 = 0;
        v26 = v21;
      }
      else
      {
        v26 = v35;
      }
      lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
      swift_allocError();
      *(_QWORD *)v27 = v26;
      *(_QWORD *)(v27 + 8) = v25;
      *(_BYTE *)(v27 + 16) = v21 == 0;
      swift_willThrow();
    }
    RERelease();
    RERelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static TextureResource.exportCubeMapKTX(contentsOf:to:compilationOptions:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static TextureResource.exportCubeMapKTX(contentsOf:to:options:)(a1, a2, a3);
}

uint64_t static TextureResource.exportCubeMapKTX(contentsOf:to:options:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TextureAssetFromData;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *buf;
  uint64_t v36;
  os_log_type_t type;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v4 = a3;
  else
    v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v38 = v4;
  swift_bridgeObjectRetain();
  specialized static TextureResource.importTextureData(contentsOf:options:)();
  if (v3)
    return swift_bridgeObjectRelease();
  v5 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of __RenderService?(v5, (uint64_t)&v42);
  if (v43)
  {
    outlined init with take of BindableDataInternal(&v42, (uint64_t)&v44);
    v7 = v46;
    v8 = v47;
    __swift_project_boxed_opaque_existential_1(&v44, v46);
    (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
    v41 = 0;
    swift_bridgeObjectRetain();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v10 = RECreateCubeTextureDataFromLatLong();

    if (v10)
    {
      v11 = specialized static __ServiceLocator.shared.getter() + 120;
      swift_beginAccess();
      outlined init with copy of __REAssetService(v11, (uint64_t)&v44);
      v13 = v46;
      v12 = v47;
      __swift_project_boxed_opaque_existential_1(&v44, v46);
      (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v13, v12);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
      TextureAssetFromData = REAssetManagerCreateTextureAssetFromData();
      static TextureResource.maybeCompress(textureAsset:options:)(TextureAssetFromData, (uint64_t *)&v38);
      v40 = 0;
      URL.path.getter();
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      LOBYTE(v12) = _RERenderManagerExportTextureAssetToKTXWithErrorHandling();
      swift_release();
      if ((v12 & 1) != 0)
      {
        if (*(_QWORD *)(v38 + 16))
        {
          if (one-time initialization token for logger != -1)
            swift_once();
          v15 = type metadata accessor for Logger();
          __swift_project_value_buffer(v15, (uint64_t)logger);
          v16 = Logger.logObject.getter();
          v17 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v16, v17))
          {
            type = v17;
            v18 = (uint8_t *)swift_slowAlloc();
            v36 = swift_slowAlloc();
            v39 = v36;
            *(_DWORD *)v18 = 136315138;
            buf = v18;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any].Keys);
            lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
            lazy protocol witness table accessor for type String and conformance String();
            v19 = Sequence<>.joined(separator:)();
            v21 = v20;
            swift_bridgeObjectRelease();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v39);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_21B9AA000, v16, type, "Unexpected options %s", buf, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x220772F44](v36, -1, -1);
            MEMORY[0x220772F44](buf, -1, -1);
          }

        }
        RERelease();
        RERelease();
      }
      else
      {
        v28 = v40;
        v44 = 0;
        v45 = 0xE000000000000000;
        _StringGuts.grow(_:)(53);
        v29._object = (void *)0x800000021BE8ECB0;
        v29._countAndFlagsBits = 0xD000000000000012;
        String.append(_:)(v29);
        type metadata accessor for URL();
        lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
        v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        v31._countAndFlagsBits = 0xD000000000000021;
        v31._object = (void *)0x800000021BE8ECD0;
        String.append(_:)(v31);
        v32 = v45;
        if (v28)
        {
          swift_bridgeObjectRelease();
          v32 = 0;
          v33 = v28;
        }
        else
        {
          v33 = v44;
        }
        lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
        swift_allocError();
        *(_QWORD *)v34 = v33;
        *(_QWORD *)(v34 + 8) = v32;
        *(_BYTE *)(v34 + 16) = v28 == 0;
        swift_willThrow();
        RERelease();
        RERelease();
      }
    }
    else
    {
      v44 = 0;
      v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v22._countAndFlagsBits = 0xD000000000000022;
      v22._object = (void *)0x800000021BE8CC40;
      String.append(_:)(v22);
      type metadata accessor for URL();
      lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 0xD00000000000001ALL;
      v24._object = (void *)0x800000021BE8CC20;
      String.append(_:)(v24);
      v25 = v45;
      v26 = v44;
      lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
      swift_allocError();
      *(_QWORD *)v27 = v26;
      *(_QWORD *)(v27 + 8) = v25;
      *(_BYTE *)(v27 + 16) = 1;
      swift_willThrow();
    }
    RERelease();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _OWORD v32[2];
  _OWORD v33[2];

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v30)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v30)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v30)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v30)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v30)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    outlined init with copy of Any(*(_QWORD *)(v4 + 56) + 32 * v13, (uint64_t)v33);
    outlined init with take of Any(v33, v32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v19;
    v28[1] = v18;
    result = (uint64_t)outlined init with take of Any(v32, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v23));
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnimationResource>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_retain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized static TextureResource.importTextureData(contentsOf:options:)()
{
  NSURL *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssetData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v0);
  v2 = v1;
  RETextureImportOperationCreateWithURL();

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary._Variant.removeValue(forKey:)(v3, v4, &v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    outlined init with take of Any(&v23, v25);
    outlined init with copy of Any((uint64_t)v25, (uint64_t)&v23);
    if (!swift_dynamicCast())
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v10 = v9;
      lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError();
      swift_allocError();
      *(_QWORD *)v11 = v8;
      *(_QWORD *)(v11 + 8) = v10;
      *(_BYTE *)(v11 + 16) = 0;
      goto LABEL_15;
    }
    RETextureImportOperationSetSemantic();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  }
  else
  {
    outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  specialized Dictionary._Variant.removeValue(forKey:)(v5, v6, &v23);
  swift_bridgeObjectRelease();
  if (v24)
  {
    outlined init with take of Any(&v23, v25);
    outlined init with copy of Any((uint64_t)v25, (uint64_t)&v23);
    if (swift_dynamicCast())
    {
      v7 = (void *)MEMORY[0x220768C3C]();
      swift_bridgeObjectRelease();
      RETextureImportOperationSetColorSpaceName();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
      goto LABEL_10;
    }
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;
    lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError();
    swift_allocError();
    *(_QWORD *)v16 = v8;
    *(_QWORD *)(v16 + 8) = v15;
    *(_BYTE *)(v16 + 16) = 1;
LABEL_15:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    goto LABEL_20;
  }
  outlined destroy of BodyTrackingComponent?((uint64_t)&v23, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_10:
  *(_QWORD *)&v23 = 0;
  AssetData = RETextureImportOperationCreateAssetData();
  v13 = v23;
  if (AssetData)
  {
    v8 = AssetData;
    if ((_QWORD)v23)

  }
  else
  {
    *(_QWORD *)&v25[0] = 0;
    *((_QWORD *)&v25[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v17._countAndFlagsBits = 0xD000000000000024;
    v17._object = (void *)0x800000021BE8ED00;
    String.append(_:)(v17);
    type metadata accessor for URL();
    lazy protocol witness table accessor for type CGColorRef and conformance CGColorRef((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x800000021BE8CC20;
    v19._countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v19);
    v8 = *((_QWORD *)&v25[0] + 1);
    if (v13)
    {
      swift_bridgeObjectRelease();
      v8 = 0;
      v20 = v13;
    }
    else
    {
      v20 = *(_QWORD *)&v25[0];
    }
    lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError();
    swift_allocError();
    *(_QWORD *)v21 = v20;
    *(_QWORD *)(v21 + 8) = v8;
    *(_BYTE *)(v21 + 16) = v13 == 0;
    swift_willThrow();
  }
LABEL_20:
  RERelease();
  return v8;
}

unint64_t lazy protocol witness table accessor for type TextureResource.ExportError and conformance TextureResource.ExportError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError;
  if (!lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.ExportError, &unk_24DFC84F8);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.ExportError and conformance TextureResource.ExportError);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextureResource.ExportError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for BindPath.Part(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of TextureResource.TextureImportOperationError);
}

uint64_t *assignWithCopy for TextureResource.ExportError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for REDecoder.Error(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))outlined copy of TextureResource.TextureImportOperationError, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of TextureResource.TextureImportOperationError);
}

uint64_t *assignWithTake for TextureResource.ExportError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for REDecoder.Error(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of TextureResource.TextureImportOperationError);
}

void *type metadata accessor for TextureResource.ExportError()
{
  return &unk_24DFC84F8;
}

unint64_t lazy protocol witness table accessor for type TextureResource.OptionError and conformance TextureResource.OptionError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError;
  if (!lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for TextureResource.OptionError, &unk_24DFC8588);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextureResource.OptionError and conformance TextureResource.OptionError);
  }
  return result;
}

void *type metadata accessor for TextureResource.OptionError()
{
  return &unk_24DFC8588;
}

uint64_t static StateMachineCommandsBuilder.buildBlock()()
{
  return MEMORY[0x24BEE4AF8];
}

uint64_t StateMachineState.init(name:dwellTime:commands:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t result;

  result = a3();
  *(_QWORD *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(_QWORD *)(a4 + 24) = result;
  return result;
}

uint64_t StateMachineState.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*StateMachineState.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

double StateMachineState.dwellTime.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void StateMachineState.dwellTime.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*StateMachineState.dwellTime.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineState.commands.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StateMachineState.commands.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StateMachineState.commands.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t StateMachineState.id.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *assignWithCopy for StateMachineState(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for StateMachineState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StateMachineState()
{
  return &type metadata for StateMachineState;
}

ValueMetadata *type metadata accessor for StateMachineCommandsBuilder()
{
  return &type metadata for StateMachineCommandsBuilder;
}

uint64_t MaterialParameters.Texture.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v25 = a1;
  v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v24 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 8);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_BYTE *)(v1 + 24);
  v11 = *(_BYTE *)(v1 + 25);
  v12 = *(_BYTE *)(v1 + 26);
  v13 = *(_BYTE *)(v1 + 27);
  v26 = *(void **)v1;
  v8 = v26;
  v27 = v7;
  v28 = v9;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21BE57F30;
  *(_QWORD *)(v14 + 32) = 0x72656C706D6173;
  *(_QWORD *)(v14 + 40) = 0xE700000000000000;
  *(_QWORD *)(v14 + 72) = &type metadata for MaterialParameters.Texture.Sampler;
  if (v8)
  {
    v15 = v8;
    swift_retain_n();
    v16 = v15;
  }
  else
  {
    swift_retain_n();
    v16 = (id)REMaterialCreateDefaultSamplerDescriptor();
  }
  *(_QWORD *)(v14 + 48) = v16;
  swift_release();
  *(_QWORD *)(v14 + 80) = 0x656372756F736572;
  *(_QWORD *)(v14 + 88) = 0xE800000000000000;
  v17 = type metadata accessor for TextureResource();
  *(_QWORD *)(v14 + 96) = v7;
  *(_QWORD *)(v14 + 120) = v17;
  *(_QWORD *)(v14 + 128) = 0x7865646E497675;
  v18 = MEMORY[0x24BEE1768];
  *(_QWORD *)(v14 + 136) = 0xE700000000000000;
  *(_QWORD *)(v14 + 144) = v9;
  *(_QWORD *)(v14 + 168) = v18;
  *(_QWORD *)(v14 + 176) = 0x656C7A7A697773;
  *(_QWORD *)(v14 + 184) = 0xE700000000000000;
  type metadata accessor for MTLTextureSwizzleChannels(0);
  *(_QWORD *)(v14 + 216) = v19;
  *(_BYTE *)(v14 + 192) = v10;
  *(_BYTE *)(v14 + 193) = v11;
  *(_BYTE *)(v14 + 194) = v12;
  *(_BYTE *)(v14 + 195) = v13;
  v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v6, 1, 1, v20);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, *MEMORY[0x24BEE43C0], v23);
  swift_retain();
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
}

void closure #1 in variable initialization expression of NamedFileAssetResolver.callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (!a3)
  {
    __break(1u);
    goto LABEL_8;
  }
  swift_retain();
  String.init(utf8String:)();
  if (!v3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = String.init(utf8String:)();
  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v6 = (void *)specialized NamedFileAssetResolver.resolve(_:_:)(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v6)
  {
    objc_msgSend(v6, sel_fileSystemRepresentation);
    swift_release();
    v7 = v6;
  }
  else
  {
    swift_release();
  }
}

uint64_t NamedFileAssetResolver.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NamedFileAssetResolver()
{
  return objc_opt_self();
}

uint64_t specialized NamedFileAssetResolver.resolve(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v9 = MEMORY[0x24BDAC7A8](v8).n128_u64[0];
  v11 = (char *)&v26 - v10;
  v12 = *(void **)(v2 + 24);
  objc_msgSend(v12, sel_lock, v9);
  v13 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v15 & 1) != 0)
    {
      v16 = v14;
      v17 = *(_QWORD *)(v13 + 56);
      v18 = type metadata accessor for URL();
      v19 = *(_QWORD *)(v18 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v11, v17 + *(_QWORD *)(v19 + 72) * v16, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v11, 0, 1, v18);
    }
    else
    {
      v18 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 1, 1, v18);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 1, 1, v18);
  }
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)v7);
  type metadata accessor for URL();
  v20 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v18) == 1)
  {
    outlined destroy of URL?((uint64_t)v7);
    v21 = 0;
  }
  else
  {
    v22 = URL.path.getter();
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v18);
    v21 = MEMORY[0x220768C3C](v22, v24);
    swift_bridgeObjectRelease();
  }
  outlined destroy of URL?((uint64_t)v11);
  objc_msgSend(v12, sel_unlock);
  return v21;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t HasPerspectiveCamera.camera.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _DWORD v9[2];
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 96))(&v12);
  specialized Entity.ComponentSet.doGet<A>(_:borrowStrongReference:)((uint64_t)v9);
  result = swift_release();
  v4 = v10 | ((unint64_t)v11 << 32);
  if ((v4 & 0xFF00000000) == 0x200000000)
  {
    v5 = 2139095040;
    v6 = 1008981770;
    LOBYTE(v7) = 1;
    v8 = 1114636288;
  }
  else
  {
    v6 = v9[0];
    v5 = v9[1];
    v8 = v10;
    v7 = HIDWORD(v4) & 1;
  }
  *(_DWORD *)a1 = v6;
  *(_DWORD *)(a1 + 4) = v5;
  *(_DWORD *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 12) = v7;
  return result;
}

uint64_t HasPerspectiveCamera.camera.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  _BYTE v7[32];

  v2 = *(_QWORD *)a1;
  v3 = 0x100000000;
  if (!*(_BYTE *)(a1 + 12))
    v3 = 0;
  v4 = v3 | *(unsigned int *)(a1 + 8);
  v5 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 112))(v7);
  swift_retain();
  specialized Entity.ComponentSet.doSet<A>(_:newValue:returnStrongReference:)(v2, v4);
  swift_release();
  return v5(v7, 0);
}

void (*HasPerspectiveCamera.camera.modify(_QWORD *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[1] = a3;
  v7[2] = v3;
  *v7 = a2;
  HasPerspectiveCamera.camera.getter((uint64_t)(v7 + 3));
  return HasPerspectiveCamera.camera.modify;
}

void HasPerspectiveCamera.camera.modify(uint64_t a1)
{
  void *v1;
  int v2;
  int v3;
  char v4;
  _DWORD v5[3];
  char v6;

  v1 = *(void **)a1;
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 28);
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 36);
  v5[0] = *(_DWORD *)(*(_QWORD *)a1 + 24);
  v5[1] = v3;
  v5[2] = v2;
  v6 = v4;
  HasPerspectiveCamera.camera.setter((uint64_t)v5);
  free(v1);
}

float sub_21BCCC398@<S0>(uint64_t a1@<X8>)
{
  float result;
  char v3;
  uint64_t v4;
  float v5;
  char v6;

  HasPerspectiveCamera.camera.getter((uint64_t)&v4);
  result = v5;
  v3 = v6;
  *(_QWORD *)a1 = v4;
  *(float *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 12) = v3;
  return result;
}

uint64_t sub_21BCCC3E0(uint64_t *a1)
{
  int v1;
  char v2;
  uint64_t v4;
  int v5;
  char v6;

  v1 = *((_DWORD *)a1 + 2);
  v2 = *((_BYTE *)a1 + 12);
  v4 = *a1;
  v5 = v1;
  v6 = v2;
  return HasPerspectiveCamera.camera.setter((uint64_t)&v4);
}

uint64_t sub_21BCCC424()
{
  return 16;
}

__n128 sub_21BCCC430(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t __RKEmphasisBaseAnimation.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t __RKEmphasisBaseAnimation.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __RKEmphasisBaseAnimation()
{
  return objc_opt_self();
}

uint64_t method lookup function for __RKEmphasisBaseAnimation()
{
  return swift_lookUpClassMethod();
}

uint64_t specialized static __RKEmphasisBaseAnimation.bakeEmphasisXfos(transform:localBoundingBox:xfos:)(float32x2_t a1, float a2, float32x2_t a3, float a4, uint64_t a5, float32x2_t **a6)
{
  float32x2_t **v6;
  float32x2_t *v7;
  float32x2_t v8;
  float32x2_t v9;
  uint64_t result;
  float32x2_t *v11;
  __int128 v12;
  __int128 v13;
  float v14;

  v7 = *a6;
  v8 = (*a6)[2];
  if (!*(_QWORD *)&v8)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a6;
  v9 = vsub_f32(a3, a1);
  v14 = (float)((float)(a4 - a2) + (float)(v9.f32[1] + (float)(v9.f32[0] + 0.0))) / 3.0;
  v13 = *(_OWORD *)v7[8].f32;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_7:
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
    v7 = (float32x2_t *)result;
  }
  v11 = v7 + 8;
  do
  {
    *(float32x2_t *)&v12 = vmul_n_f32(vsub_f32(*v11, *(float32x2_t *)&v13), v14);
    *((float *)&v12 + 2) = v14 * (float)(v11[1].f32[0] - *((float *)&v13 + 2));
    HIDWORD(v12) = 0;
    *(_OWORD *)v11->f32 = v12;
    v11 += 6;
    --*(_QWORD *)&v8;
  }
  while (v8);
  *v6 = v7;
  return result;
}

void CustomMaterial.lightingModel.getter(char *a1@<X8>)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  char v4;

  v2 = *(unsigned __int16 *)(v1 + 152);
  v3 = (v2 >> 2) & 2;
  if ((v2 & 4) != 0)
    LOBYTE(v3) = 0;
  if ((v2 & 2) != 0)
    v4 = 1;
  else
    v4 = v3;
  *a1 = v4;
}

uint64_t CustomMaterial.baseColor.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.BaseColor.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.roughness.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.Roughness.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.Metallic.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.normal.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.Normal.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.emissiveColor.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.EmissiveColor.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.getter(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD))
{
  uint64_t v1;
  _QWORD v4[5];

  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return a1(v4, 0, 0);
}

uint64_t CustomMaterial.ambientOcclusion.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.specular.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.Specular.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.clearcoat.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.Clearcoat.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.clearcoatRoughness.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:));
}

uint64_t CustomMaterial.custom.getter@<X0>(int8x16_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[5];

  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  return CustomMaterial.Custom.init(material:alternateTintKey:)(v4, a1);
}

void CustomMaterial.blending.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  CGColor *v3;
  double Alpha;
  uint64_t FunctionConstant;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  CGColor *v13;
  _QWORD v14[3];
  ValueMetadata *v15;
  _UNKNOWN **v16;
  _BYTE v17[8];
  uint64_t v18;
  int v19;

  if ((*(_WORD *)(v1 + 152) & 1) != 0)
  {
    v15 = &type metadata for CustomMaterial;
    v16 = &protocol witness table for CustomMaterial;
    v14[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v1, v14[0] + 16);
    CustomMaterial.Opacity.init(material:alternateTintKey:)(v14, (uint64_t)v17);
    v15 = &type metadata for CustomMaterial;
    v16 = &protocol witness table for CustomMaterial;
    v14[0] = swift_allocObject();
    outlined init with copy of CustomMaterial(v1, v14[0] + 16);
    CustomMaterial.BaseColor.init(material:alternateTintKey:)(v14, 0, 0, (uint64_t)&v13);
    v3 = v13;
    swift_release();
    Alpha = CGColorGetAlpha(v3);

    swift_beginAccess();
    FunctionConstant = REMaterialAssetGetFunctionConstant();
    if (FunctionConstant)
    {
      v6 = (void *)FunctionConstant;
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == 1702195828 && v7 == 0xE400000000000000)
      {
        swift_bridgeObjectRelease();

        v8 = 0x100000000;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        v8 = 0x100000000;
        if ((v9 & 1) == 0)
          v8 = 0;
      }
    }
    else
    {
      v8 = 0;
    }
    *(float *)&v10 = Alpha;
    v11 = v18;
    v12 = v8 | v19;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 20) = BYTE4(v8);
    *(_DWORD *)(a1 + 16) = v12;
  }
  else
  {
    *(_OWORD *)a1 = xmmword_21BE56B70;
    *(_BYTE *)(a1 + 20) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
}

unint64_t CustomMaterial.opacityThreshold.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unsigned __int8 v21;
  uint64_t v22;
  void *v24;
  _QWORD v25[43];
  _QWORD v26[8];
  unsigned __int8 v27;
  _QWORD v28[8];
  unsigned __int8 v29;

  v1 = v0;
  v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain_n();
  v3 = v2;
  swift_bridgeObjectRetain_n();
  v4 = v3;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v4, (uint64_t)v26);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = v26[1];
  v24 = (void *)v26[0];
  v6 = v26[2];
  v7 = v26[3];
  v8 = v26[4];
  v9 = v26[5];
  v11 = v26[6];
  v10 = v26[7];
  v12 = v27;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v25);
  if (v12 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v28);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v25);
    v20 = (void *)v28[0];
    v13 = v28[1];
    v14 = v28[2];
    v15 = v28[3];
    v16 = v28[4];
    v17 = v28[5];
    v18 = v28[6];
    v19 = v28[7];
    v12 = v29;
    if (v29 == 255)
    {
LABEL_7:
      v22 = 0;
      v21 = 1;
      return v22 | ((unint64_t)v21 << 32);
    }
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v25);
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v8;
    v17 = v9;
    v18 = v11;
    v19 = v10;
    v20 = v24;
  }
  if (v12 != 2)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v20, v13, v14, v15, v16, v17, v18, v19, v12);
    goto LABEL_7;
  }
  outlined consume of __RKMaterialParameterBlock.Parameter?(v20, v13, v14, v15, v16, v17, v18, v19, 2u);
  v21 = 0;
  v22 = v20;
  return v22 | ((unint64_t)v21 << 32);
}

void CustomMaterial.textureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
}

void CustomMaterial.secondaryTextureCoordinateTransform.getter(float32x2_t *a1@<X8>)
{
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
}

void CustomMaterial.faceCulling.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2 >= 3)
      LOBYTE(v2) = 2;
    *a1 = v2;
  }
}

void CustomMaterial.triangleFillMode.getter(BOOL *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 320) == 1;
}

_QWORD *specialized String.withCString<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *(*v7)(uint64_t *__return_ptr, _QWORD *, __n128);
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD v13[4];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = (_QWORD *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4)
      return (_QWORD *)v13[3];
  }
  else
  {
    v8 = MEMORY[0x24BDAC7A8](a1);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v13[0] = v5;
      v13[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      result = v7(&v12, v13, v8);
      if (!v4)
        return (_QWORD *)v12;
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        v9 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v10 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v9 = _StringObject.sharedUTF8.getter();
      }
      return (_QWORD *)_sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5s13OpaquePointerV_Tg507_sSRys4f5VGxs5e31_pIgyrzo_ACxsAD_pIegyrzr_lTRs13hI5V_TG5SRyAGGALsAD_pIgyrzo_Tf1cn_n(v9, v10, (uint64_t (*)(void))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
    }
  }
  return result;
}

_QWORD *specialized String.withCString<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OpaquePointer?);
    result = (_QWORD *)_StringGuts._slowWithCString<A>(_:)();
    if (!v4)
      return (_QWORD *)v9[2];
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v9);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = _StringObject.sharedUTF8.getter();
    result = a1(v9, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)v9[0];
  }
  return result;
}

BOOL static CustomMaterial.LightingModel.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

__n128 static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  __n128 result;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::String v34;
  char v35;
  unint64_t v36;
  Swift::String v37;
  unint64_t v38;
  __int128 v39;
  __n128 v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  int v48;
  __int128 v49;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char v62;
  uint64_t v63;

  v6 = *(void **)(a3 + 8);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  v10 = *(_BYTE *)(a3 + 40);
  v12 = *(_QWORD *)a4;
  v11 = *(_QWORD *)(a4 + 8);
  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 24);
  v15 = *(void **)(a4 + 32);
  v16 = *(_BYTE *)(a4 + 40);
  v48 = *a5;
  v63 = *(_QWORD *)a3;
  v52 = v6;
  v53 = v63;
  v54 = (unint64_t)v6;
  *(_QWORD *)&v55 = v7;
  *((_QWORD *)&v55 + 1) = v8;
  v56.n128_u64[0] = v9;
  v56.n128_u8[8] = v10;
  v57 = v12;
  v58 = v11;
  v46 = v11;
  v59 = v13;
  v60 = v14;
  v61 = v15;
  v62 = v16;
  specialized static CustomMaterial.ensureFunctionsExist(surfaceShader:geometryModifier:)(&v53, &v57);
  if (!v5)
  {
    v41 = v16;
    v42 = v15;
    v43 = v13;
    v44 = v8;
    v45 = v7;
    v18 = (uint64_t)v52;
    if (v46)
    {
      swift_bridgeObjectRetain();
      v19 = (void *)v46;
      v20 = v12;
      v21 = v12;
      v22 = (void *)v9;
    }
    else
    {
      v21 = 0;
      v19 = (void *)0xE000000000000000;
      v22 = (void *)v9;
      v20 = v12;
    }
    v53 = 0;
    v54 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = v21;
    v23._object = v19;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 95;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    v25._countAndFlagsBits = v63;
    v25._object = v52;
    String.append(_:)(v25);
    v26._countAndFlagsBits = 95;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27 = 0xE500000000000000;
    v28 = 0x74696C6E75;
    if (v48 != 1)
    {
      v28 = 0x616F637261656C63;
      v27 = 0xE900000000000074;
    }
    if (v48)
      v29 = v28;
    else
      v29 = 7629164;
    if (v48)
      v30 = v27;
    else
      v30 = 0xE300000000000000;
    v31 = v30;
    String.append(_:)(*(Swift::String *)&v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = v53;
    v32 = v54;
    if (v46)
    {
      v57 = v20;
      v58 = v46;
      v59 = v43;
      v60 = v14;
      v61 = v42;
      v62 = v41 & 1;
      outlined copy of CustomMaterial.GeometryModifier?(v20, v46, v43, v14, v42);
      swift_bridgeObjectRetain();
      v34._countAndFlagsBits = 0x6D6F65675FLL;
      v34._object = (void *)0xE500000000000000;
      String.append(_:)(v34);
      static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)(&v57, (uint64_t)&v53);
      swift_bridgeObjectRelease();
      v18 = (uint64_t)v52;
      outlined consume of CustomMaterial.GeometryModifier?(v20, v46, v43, v14, v42);
    }
    else
    {
      static CustomMaterial.createDefaultGeometryModifier()((uint64_t)&v53);
    }
    v35 = v53;
    v36 = v54;
    v47 = v56;
    v49 = v55;
    v57 = v63;
    v58 = v18;
    v59 = v45;
    v60 = v44;
    v61 = v22;
    v62 = v10;
    v53 = v33;
    v54 = v32;
    v37._countAndFlagsBits = 0x667275735FLL;
    v37._object = (void *)0xE500000000000000;
    String.append(_:)(v37);
    static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:)(&v57, (uint64_t)&v53);
    swift_bridgeObjectRelease();
    v38 = v54;
    v39 = v55;
    v40 = v56;
    *(_BYTE *)a1 = v53;
    *(_QWORD *)(a1 + 8) = v38;
    *(_OWORD *)(a1 + 16) = v39;
    *(__n128 *)(a1 + 32) = v40;
    *(_BYTE *)a2 = v35;
    *(_QWORD *)(a2 + 8) = v36;
    result = v47;
    *(_OWORD *)(a2 + 16) = v49;
    *(__n128 *)(a2 + 32) = v47;
  }
  return result;
}

uint64_t static CustomMaterial.SurfaceShader.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

void CustomMaterial.process(blending:doShaderUpdate:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int16 v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  uint64_t v25;
  CGColor *v26;
  CGColorRef CopyWithAlpha;
  CGColor *v28;
  unsigned __int16 v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unsigned __int16 v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  void *v93;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != 1)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
    LODWORD(v24) = *(_QWORD *)a1;
    v25 = swift_retain();
    specialized Material.setParameter<A>(_:alternateTintKey:)(v25, v23 & 0x1FFFFFFFFLL, v24);
    if ((RELinkedOnOrAfterFall2024OSVersions() & 1) == 0)
    {
      *((_QWORD *)&v87 + 1) = &type metadata for CustomMaterial;
      *(_QWORD *)&v88 = &protocol witness table for CustomMaterial;
      *(_QWORD *)&v86 = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v86 + 16);
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(&v86, 0, 0, (uint64_t)&v78);
      v26 = (CGColor *)v78;
      swift_release();
      CopyWithAlpha = CGColorCreateCopyWithAlpha(v26, v24);

      if (CopyWithAlpha)
      {
        *((_QWORD *)&v87 + 1) = &type metadata for CustomMaterial;
        *(_QWORD *)&v88 = &protocol witness table for CustomMaterial;
        *(_QWORD *)&v86 = swift_allocObject();
        outlined init with copy of CustomMaterial(v2, v86 + 16);
        v28 = CopyWithAlpha;
        CustomMaterial.BaseColor.init(material:alternateTintKey:)(&v86, 0, 0, (uint64_t)&v78);

        specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v28, *((uint64_t *)&v78 + 1), v79, 0, 0);
        swift_release();
      }
    }
    if ((a2 & 1) != 0)
    {
      v52 = v22;
      v29 = *(_WORD *)(v2 + 152);
      v30 = *(_QWORD *)(v2 + 160);
      v31 = *(_BYTE *)(v2 + 168);
      v32 = *(_BYTE *)(v2 + 169);
      v33 = *(_BYTE *)(v2 + 170);
      v34 = *(_QWORD *)(v2 + 176);
      v35 = *(_QWORD *)(v2 + 184);
      v36 = v23;
      v37 = *(_QWORD *)(v2 + 192);
      v38 = *(_QWORD *)(v2 + 200);
      v39 = *(_QWORD *)(v2 + 208);
      v40 = *(void **)(v2 + 216);
      v42 = *(_QWORD *)(v2 + 224);
      v41 = *(_QWORD *)(v2 + 232);
      v44 = *(_QWORD *)(v2 + 240);
      v43 = *(_QWORD *)(v2 + 248);
      v45 = *(_QWORD *)(v2 + 256);
      v46 = *(void **)(v2 + 264);
      v47 = v29 | 1;
      v48 = v29 | 0x201;
      if ((v29 & 0x200) != 0)
      {
        v48 = v29 | 1;
        v47 = v29 & 0xFDFE | 1;
      }
      if ((v36 & 0x100000000) != 0)
        v47 = v48;
      LOWORD(v86) = v47;
      *((_QWORD *)&v86 + 1) = v30;
      LOBYTE(v87) = v31;
      BYTE1(v87) = v32;
      BYTE2(v87) = v33;
      *((_QWORD *)&v87 + 1) = v34;
      *(_QWORD *)&v88 = v35;
      *((_QWORD *)&v88 + 1) = v37;
      *(_QWORD *)&v89 = v38;
      *((_QWORD *)&v89 + 1) = v39;
      *(_QWORD *)&v90 = v40;
      *((_QWORD *)&v90 + 1) = v42;
      *(_QWORD *)&v91 = v41;
      *((_QWORD *)&v91 + 1) = v44;
      *(_QWORD *)&v92 = v43;
      *((_QWORD *)&v92 + 1) = v45;
      v93 = v46;
      v82 = v90;
      v83 = v91;
      v84 = v92;
      v85 = v46;
      v78 = v86;
      v79 = v87;
      v80 = v88;
      v81 = v89;
      v61 = v29;
      v62 = v30;
      v63 = v31;
      v64 = v32;
      v65 = v33;
      v66 = v34;
      v67 = v35;
      v68 = v37;
      v69 = v38;
      v70 = v39;
      v71 = v40;
      v72 = v42;
      v73 = v41;
      v74 = v44;
      v75 = v43;
      v76 = v45;
      v77 = v46;
      v53 = v34;
      v54 = v37;
      v49 = v35;
      v55 = v38;
      v57 = v39;
      v59 = v40;
      outlined copy of __MaterialResource.CoreMaterialFunction?(v34, v35, v37, v38, v39, v40);
      outlined copy of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
      if (!specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)((unsigned __int16 *)&v78, &v61))
      {
        outlined copy of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
        outlined copy of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
        specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)((uint64_t)&v86);
        outlined consume of __EntityInfoComponent?(v52, v4);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
        return;
      }
      outlined consume of __MaterialResource.CoreMaterialFunction?(v53, v49, v54, v55, v57, v59);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v42, v41, v44, v43, v45, v46);
      v50 = v52;
      v51 = v4;
    }
    else
    {
      v50 = v22;
      v51 = v4;
    }
    outlined consume of __EntityInfoComponent?(v50, v51);
    return;
  }
  if ((a2 & 1) != 0)
  {
    v5 = *(_WORD *)(v2 + 152);
    v6 = *(_QWORD *)(v2 + 160);
    v7 = *(_BYTE *)(v2 + 168);
    v8 = *(_BYTE *)(v2 + 169);
    v9 = *(_BYTE *)(v2 + 170);
    v10 = *(_QWORD *)(v2 + 176);
    v11 = *(_QWORD *)(v2 + 184);
    v12 = *(_QWORD *)(v2 + 192);
    v13 = *(_QWORD *)(v2 + 200);
    v14 = *(_QWORD *)(v2 + 208);
    v15 = *(void **)(v2 + 216);
    v16 = *(_QWORD *)(v2 + 224);
    v17 = *(_QWORD *)(v2 + 232);
    v19 = *(_QWORD *)(v2 + 240);
    v18 = *(_QWORD *)(v2 + 248);
    v20 = *(_QWORD *)(v2 + 256);
    v21 = *(void **)(v2 + 264);
    LOWORD(v86) = v5 & 0xFFFE;
    *((_QWORD *)&v86 + 1) = v6;
    LOBYTE(v87) = v7;
    BYTE1(v87) = v8;
    BYTE2(v87) = v9;
    *((_QWORD *)&v87 + 1) = v10;
    *(_QWORD *)&v88 = v11;
    *((_QWORD *)&v88 + 1) = v12;
    *(_QWORD *)&v89 = v13;
    *((_QWORD *)&v89 + 1) = v14;
    *(_QWORD *)&v90 = v15;
    *((_QWORD *)&v90 + 1) = v16;
    *(_QWORD *)&v91 = v17;
    *((_QWORD *)&v91 + 1) = v19;
    *(_QWORD *)&v92 = v18;
    *((_QWORD *)&v92 + 1) = v20;
    v93 = v21;
    v82 = v90;
    v83 = v91;
    v84 = v92;
    v85 = v21;
    v78 = v86;
    v79 = v87;
    v80 = v88;
    v81 = v89;
    v61 = v5;
    v62 = v6;
    v63 = v7;
    v64 = v8;
    v65 = v9;
    v66 = v10;
    v67 = v11;
    v68 = v12;
    v69 = v13;
    v70 = v14;
    v71 = v15;
    v72 = v16;
    v73 = v17;
    v74 = v19;
    v75 = v18;
    v76 = v20;
    v77 = v21;
    v58 = v13;
    v60 = v12;
    v56 = v14;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v10, v11, v12, v13, v14, v15);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v16, v17, v19, v18, v20, v21);
    if (!specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(&v61, (unsigned __int16 *)&v78))
      specialized MaterialWithShaderCache.updateShaderFromParameters(parameters:)((uint64_t)&v86);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v10, v11, v60, v58, v56, v15);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v16, v17, v19, v18, v20, v21);
  }
}

uint64_t specialized Material.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  _BYTE v11[80];
  _BYTE v12[80];
  _BYTE v13[80];

  outlined init with take of __RKMaterialParameterBlock.Parameter?(a1, (uint64_t)v12);
  if (v12[64] == 255)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v9 = REMaterialParameterBlockValueCopy();
      v10 = *(void **)(v3 + 32);
      *(_QWORD *)(v3 + 32) = v9;

    }
    specialized String.withCString<A>(_:)(a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v12, (uint64_t)v13);
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v13, (uint64_t)v11);
    v7 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v7 + 32, (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined release of __RKMaterialParameterBlock.Parameter?(a1);
  }
}

{
  uint64_t v3;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  _BYTE v11[80];
  _BYTE v12[80];
  _BYTE v13[80];

  outlined init with take of __RKMaterialParameterBlock.Parameter?(a1, (uint64_t)v12);
  if (v12[64] == 255)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v9 = REMaterialParameterBlockValueCopy();
      v10 = *(void **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = v9;

    }
    specialized String.withCString<A>(_:)(a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v12, (uint64_t)v13);
    outlined init with take of __RKMaterialParameterBlock.Parameter((uint64_t)v13, (uint64_t)v11);
    v7 = String.utf8CString.getter();
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v7 + 32, (uint64_t)v11);
    swift_bridgeObjectRelease();
    swift_release();
    return outlined release of __RKMaterialParameterBlock.Parameter?(a1);
  }
}

uint64_t specialized Material.setUVTransform(_:withSuffix:)(uint64_t a1, void *a2, double a3, double a4, float a5)
{
  uint64_t v5;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;

  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v10 = REMaterialParameterBlockValueCopy();
    v11 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v10;

  }
  REMaterialParameterBlockValueSetFloat2();
  swift_bridgeObjectRelease();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v13 = REMaterialParameterBlockValueCopy();
    v14 = *(void **)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v13;

  }
  __sincosf_stret(a5);
  REMaterialParameterBlockValueSetFloat4();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  uint64_t v5;
  Swift::String v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;

  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v10 = REMaterialParameterBlockValueCopy();
    v11 = *(void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = v10;

  }
  REMaterialParameterBlockValueSetFloat2();
  swift_bridgeObjectRelease();
  swift_release();
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  String.utf8CString.getter();
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    v13 = REMaterialParameterBlockValueCopy();
    v14 = *(void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = v13;

  }
  __sincosf_stret(a5);
  REMaterialParameterBlockValueSetFloat4();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CustomMaterial.SurfaceShader.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  id v17;
  id v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v9 = *a3;
  swift_bridgeObjectRetain();
  v10 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = outlined init with copy of (Int, URL)(v10, (uint64_t)&v19, &demangling cache variable for type metadata for __RenderService?);
  if (v20)
  {
    outlined init with take of BindableDataInternal(&v19, (uint64_t)v21);
    v12 = v22;
    v13 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
    v14 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    if (v14)
    {
      v15 = a4 & 1;
      v16 = objc_allocWithZone(MEMORY[0x24BDDD5A0]);
      swift_unknownObjectRetain();
      v17 = objc_msgSend(v16, sel_init);
      swift_bridgeObjectRetain();
      v18 = v17;
      swift_bridgeObjectRelease();
      *(_QWORD *)a5 = a1;
      *(_QWORD *)(a5 + 8) = a2;
      *(_QWORD *)(a5 + 16) = v14;
      *(_QWORD *)(a5 + 24) = v9;
      *(_QWORD *)(a5 + 32) = v18;
      *(_BYTE *)(a5 + 40) = v15;

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      result = swift_bridgeObjectRelease_n();
      *(_OWORD *)(a5 + 25) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v9 = *a3;
  v10 = objc_allocWithZone(MEMORY[0x24BDDD5A0]);
  swift_bridgeObjectRetain();
  v11 = objc_msgSend(v10, sel_init);
  v12 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v12, (uint64_t)&v16, &demangling cache variable for type metadata for __RenderService?);
  if (v17)
  {
    outlined init with take of BindableDataInternal(&v16, (uint64_t)v18);
    v13 = v19;
    v14 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
    v15 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    if (v15)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)a5 = a1;
      *(_QWORD *)(a5 + 8) = a2;
      *(_QWORD *)(a5 + 16) = v15;
      *(_QWORD *)(a5 + 24) = v9;
      *(_QWORD *)(a5 + 32) = v11;
      *(_BYTE *)(a5 + 40) = a4 & 1;

      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      *(_OWORD *)(a5 + 25) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t CustomMaterial.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int Stage;
  id v29;
  void *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  uint64_t v42;
  char v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void *v55;
  char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  char v68;
  __int128 v69;
  int v70;
  char v71;
  uint64_t v72;
  void *v73;
  char v74;
  _QWORD v75[6];
  __int16 FeatureFlags;
  uint64_t v77;
  char v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;

  v11 = *a2;
  v54 = *((_BYTE *)a2 + 8);
  v12 = (void *)a2[3];
  v47 = a2[2];
  v13 = (void *)REMaterialParameterBlockValueCreate();
  v63 = MEMORY[0x24BEE4AF8];
  v64 = 0;
  v65 = 0;
  v66 = v13;
  v67 = 0;
  v68 = 1;
  v69 = xmmword_21BE67DE0;
  v71 = 0;
  v70 = 0;
  memset(v75, 0, sizeof(v75));
  v92 = 0;
  v93 = 0;
  v98 = 0;
  v95 = 0;
  v96 = 0;
  v94 = 3;
  v97 = 0;
  v99 = 257;
  v14 = specialized static LoadableResource.fromCore(assetRef:)(a1);
  if (!v14)
  {
    outlined consume of CustomMaterial.CustomUniformsState?(a3, a4, a5);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
LABEL_21:
    swift_bridgeObjectRelease();
    outlined destroy of BodyTrackingComponent?((uint64_t)v75, &demangling cache variable for type metadata for __REAssetService?);
    swift_release();
    result = outlined consume of CustomMaterial.Descriptor?(v92, v93, v94);
    *(_OWORD *)((char *)a6 + 314) = 0u;
    a6[18] = 0u;
    a6[19] = 0u;
    a6[16] = 0u;
    a6[17] = 0u;
    a6[14] = 0u;
    a6[15] = 0u;
    a6[12] = 0u;
    a6[13] = 0u;
    a6[10] = 0u;
    a6[11] = 0u;
    a6[8] = 0u;
    a6[9] = 0u;
    a6[6] = 0u;
    a6[7] = 0u;
    a6[4] = 0u;
    a6[5] = 0u;
    a6[2] = 0u;
    a6[3] = 0u;
    *a6 = 0u;
    a6[1] = 0u;
    return result;
  }
  v15 = v14;
  v45 = a4;
  v46 = a3;
  swift_retain();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v62 = v15;
  v63 = v11;
  v64 = v54;
  v65 = v47;
  v66 = v12;
  v67 = 2;
  v68 = 0;
  swift_beginAccess();
  result = REMaterialAssetGetFunctionLinkCount();
  if (result < 0)
  {
    __break(1u);
    return result;
  }
  v17 = result;
  v44 = v12;
  if (!result)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = a5;
    v41 = v45;
    v40 = v46;
LABEL_20:
    outlined consume of CustomMaterial.CustomUniformsState?(v40, v41, v39);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v34, v35, v36, v37, v38);

    swift_bridgeObjectRelease();
    swift_release_n();
    goto LABEL_21;
  }
  v43 = a5;
  v42 = (uint64_t)a6;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v55 = 0;
  v24 = 0;
  do
  {
    v25 = v17;
    v26 = v21;
    REMaterialAssetGetFunctionLinkAtIndex();
    Stage = REFunctionLinkGetStage();
    if ((Stage | 2) == 3)
    {
      __MaterialResource.CoreMaterialFunction.init(_:)((uint64_t)v56);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
      v50 = v56[0];
      v49 = v57;
      v51 = v58;
      v52 = v60;
      v53 = v59;
      v55 = v61;
    }
    if (Stage == 4 || Stage == 2)
    {
      __MaterialResource.CoreMaterialFunction.init(_:)((uint64_t)v56);
      outlined consume of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v26, v22, v23);
      v18 = v56[0];
      v19 = v57;
      v20 = v58;
      v21 = v59;
      v22 = v60;
      v23 = v61;
    }
    else
    {
      v21 = v26;
    }
    ++v24;
    v17 = v25;
  }
  while (v25 != v24);
  a6 = (_OWORD *)v42;
  if (!v20)
  {
    v41 = v45;
    v40 = v46;
    v39 = v43;
    v34 = v49;
    v33 = v50;
    v35 = v51;
    v37 = v52;
    v36 = v53;
    v38 = v55;
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v29 = v23;
  FeatureFlags = REMaterialAssetGetFeatureFlags();
  v77 = 0;
  v78 = 1;
  v79 = 258;
  v80 = v50;
  v81 = v49;
  v82 = v51;
  v83 = v53;
  v84 = v52;
  v85 = v55;
  v86 = v18;
  v87 = v19;
  v88 = v20;
  v89 = v21;
  v90 = v22;
  v91 = v23;
  if (v43 == -1)
  {
    v48 = v18;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v21, v22, v23);
    v31 = REDirectParameterBufferCreate();
    outlined consume of __MaterialResource.CoreMaterialFunction?(v48, v19, v20, v21, v22, v23);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v50, v49, v51, v53, v52, v55);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v48, v19, v20, v21, v22, v23);
    swift_release();
    v30 = 0;
    v32 = 0;
  }
  else
  {
    outlined consume of __MaterialResource.CoreMaterialFunction?(v18, v19, v20, v21, v22, v23);
    swift_release();
    v30 = v45;
    v31 = (uint64_t)v46;
    v32 = v43;
  }
  v72 = v31;
  v73 = v30;
  v74 = v32;
  outlined init with copy of CustomMaterial((uint64_t)&v62, v42);
  return outlined destroy of CustomMaterial((uint64_t)&v62);
}

uint64_t (*CustomMaterial.GeometryModifier.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void (*CustomMaterial.GeometryModifier.library.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  v4 = type metadata accessor for Logger();
  v3[2] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3] = v5;
  v3[4] = malloc(*(_QWORD *)(v5 + 64));
  *v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  return CustomMaterial.GeometryModifier.library.modify;
}

void CustomMaterial.GeometryModifier.library.modify(uint64_t **a1, char a2)
{
  CustomMaterial.GeometryModifier.library.modify(a1, a2, (void (*)(uint64_t))CustomMaterial.GeometryModifier.library.setter);
}

id CustomMaterial.GeometryModifier.init(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:)(a1, a2, a3, a4);
}

{
  char ServicesToUpdate;
  id result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
    *(_QWORD *)a4 = a1;
    *(_QWORD *)(a4 + 8) = a2;
    *(_QWORD *)(a4 + 16) = a3;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = result;
    *(_BYTE *)(a4 + 40) = 0;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*CustomMaterial.GeometryModifier.libraryAsset.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  v3[16] = *(_QWORD *)(v1 + 24);
  return CustomMaterial.GeometryModifier.libraryAsset.modify;
}

uint64_t (*CustomMaterial.GeometryModifier.__linkSPI.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id CustomMaterial.GeometryModifier.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(a1, a2, a3, a4, a5);
}

{
  char ServicesToUpdate;
  id result;

  specialized static __ServiceLocator.shared.getter();
  swift_beginAccess();
  swift_unownedRetainStrong();
  swift_retain();
  swift_release();
  ServicesToUpdate = REEngineConfigurationGetServicesToUpdate();
  swift_release();
  if ((ServicesToUpdate & 0x10) != 0)
  {
    result = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
    *(_QWORD *)a5 = a1;
    *(_QWORD *)(a5 + 8) = a2;
    *(_QWORD *)(a5 + 16) = a3;
    *(_QWORD *)(a5 + 24) = 0;
    *(_QWORD *)(a5 + 32) = result;
    *(_BYTE *)(a5 + 40) = a4 & 1;
  }
  else
  {
    result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t (*protocol witness for MaterialFunction.library.modify in conformance CustomMaterial.GeometryModifier(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CustomMaterial.GeometryModifier.library.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t CustomMaterial.SurfaceShader.name.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CustomMaterial.SurfaceShader.name.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.name.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.SurfaceShader.library.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t CustomMaterial.GeometryModifier.library.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t result;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for Logger();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v2 + 24))
  {
    Logger.init()();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_21B9AA000, v8, v9, "CustomMaterial: Assigned MTLLibrary when libraryAsset was already initialized. Overriding asset...", v10, 2u);
      MEMORY[0x220772F44](v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    *(_QWORD *)(v2 + 24) = 0;
  }
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  return result;
}

void (*CustomMaterial.SurfaceShader.library.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[1] = v1;
  v4 = type metadata accessor for Logger();
  v3[2] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[3] = v5;
  v3[4] = malloc(*(_QWORD *)(v5 + 64));
  *v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  return CustomMaterial.SurfaceShader.library.modify;
}

void CustomMaterial.SurfaceShader.library.modify(uint64_t **a1, char a2)
{
  CustomMaterial.GeometryModifier.library.modify(a1, a2, (void (*)(uint64_t))CustomMaterial.SurfaceShader.library.setter);
}

void CustomMaterial.GeometryModifier.library.modify(uint64_t **a1, char a2, void (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  v4 = **a1;
  if ((a2 & 1) != 0)
  {
    v6 = (void *)v3[4];
    v7 = swift_unknownObjectRetain();
    a3(v7);
    swift_unknownObjectRelease();
  }
  else
  {
    v8 = v3[1];
    if (*(_QWORD *)(v8 + 24))
    {
      Logger.init()();
      v9 = Logger.logObject.getter();
      v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_21B9AA000, v9, v10, "CustomMaterial: Assigned MTLLibrary when libraryAsset was already initialized. Overriding asset...", v11, 2u);
        MEMORY[0x220772F44](v11, -1, -1);
      }
      v13 = v3[3];
      v12 = v3[4];
      v14 = v3[2];

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      *(_QWORD *)(v8 + 24) = 0;
      v8 = v3[1];
    }
    v6 = (void *)v3[4];
    swift_unknownObjectRelease();
    *(_QWORD *)(v8 + 16) = v4;
  }
  free(v6);
  free(v3);
}

id CustomMaterial.SurfaceShader.init(named:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:)(a1, a2, a3, a4);
}

void CustomMaterial.SurfaceShader.libraryAsset.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 24);
}

uint64_t *CustomMaterial.GeometryModifier.libraryAsset.setter(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v3 = *result;
  if (!*result)
    goto LABEL_5;
  v4 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  result = (uint64_t *)outlined init with copy of (Int, URL)(v4, (uint64_t)&v8, &demangling cache variable for type metadata for __RenderService?);
  if (!v9)
  {
    __break(1u);
    return result;
  }
  outlined init with take of BindableDataInternal(&v8, (uint64_t)v10);
  v5 = v11;
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6);
  v7 = (id)REShaderLibraryAssetGetMetalLibrary();
  result = (uint64_t *)__swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  if (v7)
  {
    result = (uint64_t *)swift_unknownObjectRelease();
    *(_QWORD *)(v2 + 16) = v7;
LABEL_5:
    *(_QWORD *)(v2 + 24) = v3;
  }
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.libraryAsset.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x90uLL);
  *a1 = v3;
  v3[17] = v1;
  v3[16] = *(_QWORD *)(v1 + 24);
  return CustomMaterial.GeometryModifier.libraryAsset.modify;
}

void CustomMaterial.GeometryModifier.libraryAsset.modify(__int128 **a1, char a2)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *a1;
  v3 = (__int128 *)((char *)*a1 + 40);
  v4 = *((_QWORD *)*a1 + 16);
  if ((a2 & 1) != 0)
  {
    if (v4)
    {
      v5 = specialized static __ServiceLocator.shared.getter() + 40;
      swift_beginAccess();
      outlined init with copy of (Int, URL)(v5, (uint64_t)v3, &demangling cache variable for type metadata for __RenderService?);
      if (*((_QWORD *)v2 + 8))
      {
        outlined init with take of BindableDataInternal(v3, (uint64_t)v2);
        v6 = *((_QWORD *)v2 + 3);
        v7 = *((_QWORD *)v2 + 4);
        __swift_project_boxed_opaque_existential_1(v2, v6);
        (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v6, v7);
        v8 = (id)REShaderLibraryAssetGetMetalLibrary();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
        if (!v8)
          goto LABEL_11;
LABEL_9:
        v12 = *((_QWORD *)v2 + 17);
        swift_unknownObjectRelease();
        *(_QWORD *)(v12 + 16) = v8;
        goto LABEL_10;
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_10:
    *(_QWORD *)(*((_QWORD *)v2 + 17) + 24) = v4;
    goto LABEL_11;
  }
  if (!v4)
    goto LABEL_10;
  v9 = specialized static __ServiceLocator.shared.getter() + 40;
  swift_beginAccess();
  outlined init with copy of (Int, URL)(v9, (uint64_t)v2, &demangling cache variable for type metadata for __RenderService?);
  if (*((_QWORD *)v2 + 3))
  {
    outlined init with take of BindableDataInternal(v2, (uint64_t)v3);
    v10 = *((_QWORD *)v2 + 8);
    v11 = *((_QWORD *)v2 + 9);
    __swift_project_boxed_opaque_existential_1(v3, v10);
    (*(void (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
    v8 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    if (!v8)
    {
LABEL_11:
      free(v2);
      return;
    }
    goto LABEL_9;
  }
LABEL_13:
  __break(1u);
}

uint64_t CustomMaterial.SurfaceShader.__linkSPI.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CustomMaterial.SurfaceShader.__linkSPI.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

uint64_t (*CustomMaterial.SurfaceShader.__linkSPI.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

id CustomMaterial.SurfaceShader.init(named:in:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:in:linkSPI:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for MaterialFunction.library.getter in conformance CustomMaterial.SurfaceShader()
{
  return swift_unknownObjectRetain();
}

uint64_t (*protocol witness for MaterialFunction.library.modify in conformance CustomMaterial.SurfaceShader(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CustomMaterial.SurfaceShader.library.modify(v2);
  return protocol witness for AnimationDefinition.name.modify in conformance FromToByAnimation<A>;
}

uint64_t protocol witness for MaterialFunction.__linkSPI.getter in conformance CustomMaterial.SurfaceShader()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

void CustomMaterial.LightingModel.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t CustomMaterial.__resource.getter()
{
  return swift_retain();
}

uint64_t CustomMaterial.__resource.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_release();
  *v1 = a1;
  return result;
}

uint64_t (*CustomMaterial.__resource.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__parameterBlock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(void **)(v1 + 32);
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return swift_bridgeObjectRetain();
}

uint64_t CustomMaterial.__parameterBlock.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = a1[2];
  v5 = a1[3];

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = v2;
  *(_BYTE *)(v1 + 16) = v3;
  *(_QWORD *)(v1 + 24) = v4;
  *(_QWORD *)(v1 + 32) = v5;
  return result;
}

uint64_t (*CustomMaterial.__parameterBlock.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__faceCullMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t CustomMaterial.__faceCullMode.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t (*CustomMaterial.__faceCullMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__blending.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 76);
  v5 = *(_DWORD *)(v1 + 72);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return outlined copy of CustomMaterial.Blending?(v2, v3);
}

uint64_t CustomMaterial.__blending.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_BYTE *)a1 + 20);
  v6 = v1 + 72;
  result = outlined consume of CustomMaterial.Blending?(*(_QWORD *)(v6 - 16), *(_QWORD *)(v6 - 8));
  *(_QWORD *)(v6 - 16) = v2;
  *(_QWORD *)(v6 - 8) = v3;
  *(_BYTE *)(v6 + 4) = v5;
  *(_DWORD *)v6 = v4;
  return result;
}

uint64_t (*CustomMaterial.__blending.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.__requiresUnmanagedVideoComponent.getter()
{
  uint64_t v0;

  return (*(unsigned __int16 *)(v0 + 152) >> 5) & 1;
}

uint64_t CustomMaterial.assetService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v3 = v1 + 104;
  outlined init with copy of (Int, URL)(v3, (uint64_t)&v6, &demangling cache variable for type metadata for __REAssetService?);
  if (v7)
    return outlined init with take of BindableDataInternal(&v6, a1);
  outlined destroy of BodyTrackingComponent?((uint64_t)&v6, &demangling cache variable for type metadata for __REAssetService?);
  v5 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v5, a1);
  outlined destroy of BodyTrackingComponent?(v3, &demangling cache variable for type metadata for __REAssetService?);
  return outlined init with copy of __REAssetService(a1, v3);
}

uint64_t static CustomMaterial.getLightingModel(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  int v4;
  char v5;
  float v6;
  void *v7;
  uint64_t v8;
  _BYTE v10[152];
  unsigned __int16 v11;
  _QWORD v12[5];
  float v13;
  void *v14;
  uint64_t v15;
  _BYTE v16[40];
  _BYTE v17[336];
  _BYTE v18[40];

  outlined init with copy of __REAssetService(a1, (uint64_t)v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v16);
    swift_dynamicCast();
    v4 = (v11 >> 2) & 2;
    if ((v11 & 4) != 0)
      LOBYTE(v4) = 0;
    if ((v11 & 2) != 0)
      v5 = 1;
    else
      v5 = v4;
    *a2 = v5;
    outlined destroy of CustomMaterial((uint64_t)v10);
    outlined destroy of CustomMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v16);
    swift_dynamicCast();
    v12[3] = &type metadata for PhysicallyBasedMaterial;
    v12[4] = &protocol witness table for PhysicallyBasedMaterial;
    v12[0] = swift_allocObject();
    outlined init with copy of PhysicallyBasedMaterial((uint64_t)v10, v12[0] + 16);
    PhysicallyBasedMaterial.Clearcoat.init(material:alternateTintKey:)(v12, (uint64_t)&v13);
    v6 = v13;
    v7 = v14;
    v8 = v15;
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v10);
    outlined consume of MaterialParameters.Texture?(v7, v8);
    if (v6 == 0.0)
      *a2 = 0;
    else
      *a2 = 2;
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    *a2 = 0;
    outlined destroy of SimpleMaterial((uint64_t)v17);
  }
  else if (swift_dynamicCast())
  {
    *a2 = 1;
    outlined destroy of UnlitMaterial((uint64_t)v17);
  }
  else
  {
    *a2 = 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t static CustomMaterial.getBlending(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  id v11;
  id v12;
  CGColor *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CGColor *v21;
  int v22;
  double Alpha;
  __n128 v24;
  _BOOL8 v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE v29[48];
  id v30;
  unsigned __int8 v31;
  __int16 v32;
  _BYTE v33[40];
  _QWORD v34[8];
  unsigned __int8 v35;
  CGColor *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  _BYTE v45[336];
  _BYTE v46[48];

  outlined init with copy of __REAssetService(a1, (uint64_t)v46);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    CustomMaterial.blending.getter(a2);
    outlined destroy of CustomMaterial((uint64_t)v29);
    outlined destroy of CustomMaterial((uint64_t)v45);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  }
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    PhysicallyBasedMaterial.blending.getter((uint64_t)&v36);
    v4 = (uint64_t)v36;
    v5 = v37;
    v6 = v38;
    outlined destroy of PhysicallyBasedMaterial((uint64_t)v29);
    if (v6)
    {
      if (v6 == 1)
      {
        v7 = 0;
        v8 = 0;
LABEL_17:
        *(_QWORD *)a2 = v7;
        *(_QWORD *)(a2 + 8) = v6;
        *(_BYTE *)(a2 + 20) = 0;
        *(_DWORD *)(a2 + 16) = v8;
        outlined destroy of PhysicallyBasedMaterial((uint64_t)v45);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
      }
      swift_retain();
      v22 = 84148994;
    }
    else
    {
      v22 = 0;
    }
    outlined consume of PhysicallyBasedMaterial.Blending(v4, v5, v6);
    v7 = v4;
    v8 = v22;
    goto LABEL_17;
  }
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    v9 = v31;
    outlined destroy of SimpleMaterial((uint64_t)v29);
    v10 = 1065353216;
    if (!v9)
      v10 = 0;
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v9 ^ 1u;
    *(_BYTE *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    outlined destroy of SimpleMaterial((uint64_t)v45);
  }
  else if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)v33);
    swift_dynamicCast();
    swift_bridgeObjectRetain_n();
    v11 = v30;
    swift_bridgeObjectRetain_n();
    v12 = v11;
    specialized String.withCString<A>(_:)(0x6E6954726F6C6F63, 0xE900000000000074, v12, (uint64_t)v34);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = (CGColor *)v34[0];
    v14 = v34[1];
    v15 = v34[2];
    v16 = v34[3];
    v17 = v34[4];
    v18 = v34[5];
    v19 = v34[6];
    v20 = v34[7];
    LODWORD(v21) = v35;
    outlined init with copy of UnlitMaterial((uint64_t)v29, (uint64_t)v33);
    if ((_DWORD)v21 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v36);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v33);
      v13 = v36;
      v14 = (uint64_t)v37;
      v15 = v38;
      v16 = v39;
      v17 = v40;
      v18 = v41;
      v19 = v42;
      v20 = v43;
      LODWORD(v21) = v44;
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v33);
    }
    Alpha = 0.0;
    if ((_DWORD)v21 != 255)
    {
      if ((_DWORD)v21 == 6)
      {
        Alpha = CGColorGetAlpha(v13);
      }
      else if ((_DWORD)v21 == 5)
      {
        v24.n128_u64[0] = (unint64_t)v13;
        v24.n128_u64[1] = v14;
        v21 = (CGColor *)specialized SIMD4<>.cgColor.getter(v24);
        Alpha = CGColorGetAlpha(v21);

        LOBYTE(v21) = 5;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    v25 = (v32 & 1) == 0;
    *(float *)&v26 = Alpha;
    v27 = v26;
    if ((v32 & 1) == 0)
      v27 = 0;
    *(_QWORD *)a2 = v27;
    *(_QWORD *)(a2 + 8) = v25;
    *(_BYTE *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    outlined destroy of UnlitMaterial((uint64_t)v29);
    outlined destroy of UnlitMaterial((uint64_t)v45);
  }
  else
  {
    *(_OWORD *)a2 = xmmword_21BE56B70;
    *(_BYTE *)(a2 + 20) = 0;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

void CustomMaterial.copyParameterBlock(from:)()
{
  id v0;
  uint64_t v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBCEF0]), sel_init);
  swift_beginAccess();
  REMaterialAssetGetMaterialDefinition();
  REMaterialDefinitionAssetGetParameterKeys();
  v1 = 0;
  v0;
  static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
}

id CustomMaterial.copyCustomParameters(from:)(uint64_t a1)
{
  uint64_t v1;
  id result;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  unsigned __int8 v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  id v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned __int8 v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;

  v95 = a1;
  swift_beginAccess();
  result = (id)REMaterialAssetGetGeomFlattenedCustomParamNames();
  if (!result)
    return result;
  v3 = result;
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v5 = (id)REMaterialAssetGetSurfFlattenedCustomParamNames();
  if (!v5)
    return (id)swift_bridgeObjectRelease();
  v6 = v5;
  v80 = v1;
  v81 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = *(_QWORD *)(v4 + 16);
  v79 = v4;
  v9 = 0;
  if (v8)
  {
    v82 = v80 + 8;
    v10 = (uint64_t *)(v4 + 40);
    while (1)
    {
      v96 = v9;
      v20 = *(v10 - 1);
      v19 = *v10;
      v21 = *(void **)(v95 + 32);
      MEMORY[0x24BDAC7A8](v7);
      v90 = v23;
      v91 = v22;
      v94 = v19;
      v92 = v20;
      if ((v19 & 0x1000000000000000) != 0 || !(v19 & 0x2000000000000000 | v20 & 0x1000000000000000))
        break;
      if ((v19 & 0x2000000000000000) == 0)
      {
        if ((v20 & 0x1000000000000000) != 0 || _StringObject.sharedUTF8.getter())
        {
          swift_bridgeObjectRetain_n();
          v24 = v21;
          swift_bridgeObjectRetain_n();
          v24;
          swift_bridgeObjectRetain();
        }
        else
        {
          swift_bridgeObjectRetain_n();
          v38 = v21;
          swift_bridgeObjectRetain_n();
          v38;
          swift_bridgeObjectRetain();
        }
        closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v106);
        v96 = 0;

        goto LABEL_14;
      }
      v97 = v20;
      v98 = v19 & 0xFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain_n();
      v25 = v21;
      swift_bridgeObjectRetain_n();
      v26 = v25;
      swift_bridgeObjectRetain();
      closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v106);

      v96 = 0;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
LABEL_16:
      v27 = v106;
      v28 = v107;
      v29 = v108;
      v30 = v109;
      v31 = v110;
      v32 = v111;
      v33 = v112;
      v34 = v113;
      v35 = v114;
      outlined init with copy of CustomMaterial(v95, (uint64_t)&v97);
      if (v35 == 255)
      {
        swift_retain();
        __MaterialResource.subscript.getter((uint64_t)&v115);
        swift_release();
        outlined destroy of CustomMaterial((uint64_t)&v97);
        v35 = v123;
        if (v123 == 255)
        {
          v7 = swift_bridgeObjectRelease();
          goto LABEL_7;
        }
      }
      else
      {
        outlined destroy of CustomMaterial((uint64_t)&v97);
        v115 = v27;
        v116 = v28;
        v117 = v29;
        v118 = v30;
        v119 = v31;
        v120 = v32;
        v121 = v33;
        v122 = v34;
      }
      v11 = v121;
      v93 = v122;
      v12 = v119;
      v13 = v120;
      v14 = v117;
      v15 = v118;
      v16 = v115;
      v97 = (uint64_t)v115;
      v98 = v116;
      v17 = v35;
      v18 = v116;
      v84 = v116;
      v85 = v117;
      v99 = v117;
      v100 = v118;
      v86 = v118;
      v87 = v119;
      v101 = v119;
      v102 = v120;
      v88 = v120;
      v89 = v121;
      v103 = v121;
      v104 = v122;
      v105 = v17;
      v83 = v17;
      v92 = String.utf8CString.getter() + 32;
      outlined copy of __RKMaterialParameterBlock.Parameter(v16, v18, v14, v15, v12, v13, v11, v93, v17);
      __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v92, (uint64_t)&v97);
      swift_bridgeObjectRelease();
      swift_release();
      outlined consume of __RKMaterialParameterBlock.Parameter?(v16, v84, v85, v86, v87, v88, v89, v93, v17);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v16, v84, v85, v86, v87, v88, v89, v93, v17);
LABEL_7:
      v9 = v96;
      v10 = (uint64_t *)(v90 + 16);
      if (v91 == 1)
        goto LABEL_22;
    }
    swift_bridgeObjectRetain_n();
    v36 = v21;
    swift_bridgeObjectRetain_n();
    v37 = v36;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
    _StringGuts._slowWithCString<A>(_:)();

    v96 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  v39 = v81;
  if (!*(_QWORD *)(v81 + 16))
    return (id)swift_bridgeObjectRelease();
  v82 = v80 + 8;
  v40 = (uint64_t *)(v81 + 40);
  while (1)
  {
    v60 = *(v40 - 1);
    v59 = *v40;
    v61 = *(void **)(v95 + 32);
    MEMORY[0x24BDAC7A8](v39);
    v90 = v63;
    v91 = v62;
    v94 = v59;
    v92 = v60;
    if ((v59 & 0x1000000000000000) != 0 || !(v59 & 0x2000000000000000 | v60 & 0x1000000000000000))
    {
      swift_bridgeObjectRetain_n();
      v77 = v61;
      swift_bridgeObjectRetain_n();
      v78 = v77;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for __RKMaterialParameterBlock.Parameter?);
      _StringGuts._slowWithCString<A>(_:)();

      if (v9)
        goto LABEL_45;
      v96 = 0;

      goto LABEL_34;
    }
    if ((v59 & 0x2000000000000000) == 0)
      break;
    v97 = v60;
    v98 = v59 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain_n();
    v66 = v61;
    swift_bridgeObjectRetain_n();
    v67 = v66;
    swift_bridgeObjectRetain();
    closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v106);

    if (v9)
      goto LABEL_45;
    v96 = 0;

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
LABEL_37:
    v68 = v106;
    v69 = v107;
    v70 = v108;
    v71 = v109;
    v72 = v110;
    v73 = v111;
    v74 = v112;
    v75 = v113;
    v76 = v114;
    outlined init with copy of CustomMaterial(v95, (uint64_t)&v97);
    if (v76 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v115);
      swift_release();
      outlined destroy of CustomMaterial((uint64_t)&v97);
      v76 = v123;
      if (v123 == 255)
      {
        v39 = swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    else
    {
      outlined destroy of CustomMaterial((uint64_t)&v97);
      v115 = v68;
      v116 = v69;
      v117 = v70;
      v118 = v71;
      v119 = v72;
      v120 = v73;
      v121 = v74;
      v122 = v75;
    }
    v41 = v121;
    v93 = v122;
    v42 = v119;
    v43 = v120;
    v44 = v117;
    v45 = v118;
    v46 = v115;
    v97 = (uint64_t)v115;
    v98 = v116;
    v47 = v76;
    v48 = v116;
    v84 = v116;
    v85 = v117;
    v99 = v117;
    v100 = v118;
    v86 = v118;
    v87 = v119;
    v101 = v119;
    v102 = v120;
    v88 = v120;
    v89 = v121;
    v103 = v121;
    v104 = v122;
    v105 = v47;
    v83 = v47;
    v92 = String.utf8CString.getter() + 32;
    outlined copy of __RKMaterialParameterBlock.Parameter(v46, v48, v44, v45, v42, v43, v41, v93, v47);
    __RKMaterialParameterBlock.unsafeSet(parameter:value:)(v92, (uint64_t)&v97);
    swift_bridgeObjectRelease();
    swift_release();
    v49 = v83;
    v50 = v46;
    v51 = v46;
    v52 = v84;
    v53 = v85;
    v54 = v86;
    v55 = v87;
    v57 = v88;
    v56 = v89;
    v58 = v93;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v51, v84, v85, v86, v87, v88, v89, v93, v83);
    outlined consume of __RKMaterialParameterBlock.Parameter?(v50, v52, v53, v54, v55, v57, v56, v58, v49);
LABEL_26:
    v9 = v96;
    v40 = (uint64_t *)(v90 + 16);
    if (v91 == 1)
      return (id)swift_bridgeObjectRelease();
  }
  v96 = &v79;
  if ((v60 & 0x1000000000000000) == 0)
    _StringObject.sharedUTF8.getter();
  swift_bridgeObjectRetain_n();
  v64 = v61;
  swift_bridgeObjectRetain_n();
  v65 = v64;
  swift_bridgeObjectRetain();
  closure #1 in __RKMaterialParameterBlock.get(parameter:)((uint64_t)&v106);
  if (!v9)
  {
    v96 = 0;

LABEL_34:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }

LABEL_45:
  swift_bridgeObjectRelease();
  result = (id)swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t CustomMaterial.copyParameters(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __n128 v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  int v43;
  char v44;
  void *v45;
  _QWORD v46[3];
  ValueMetadata *v47;
  _UNKNOWN **v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  _BYTE v71[48];

  v2 = v1;
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)&v67);
  v4 = v67;
  v5 = v68;
  v42[0] = v67;
  v42[1] = v68;
  v44 = v70;
  v43 = v69;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v42, 1);
  outlined consume of __EntityInfoComponent?(v4, v5);
  v6 = a1[3];
  v7 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 112))(v6, v7);
  if (v8 == 1)
    v10 = 1;
  else
    v10 = 2;
  if (!v8)
    v10 = 0;
  if ((v9 & 1) != 0)
    v10 = 2;
  *(_QWORD *)(v1 + 40) = v10;
  *(_BYTE *)(v1 + 48) = 0;
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v71);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (!swift_dynamicCast())
  {
    if (swift_dynamicCast())
    {
      CustomMaterial.copyParameterBlock(from:)();
      outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
      swift_dynamicCast();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v42);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v67);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    if (swift_dynamicCast())
    {
      CustomMaterial.copyParameterBlock(from:)();
      outlined destroy of SimpleMaterial((uint64_t)&v67);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    }
    if (!swift_dynamicCast())
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
    outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
    swift_dynamicCast();
    v11 = v45;
    swift_bridgeObjectRetain_n();
    v12 = v11;
    swift_bridgeObjectRetain_n();
    v13 = v12;
    specialized String.withCString<A>(_:)(0x6E6954726F6C6F63, 0xE900000000000074, v13, (uint64_t)&v49);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v49;
    v15 = v50;
    v40 = v51;
    v16 = v52;
    v17 = v53;
    v18 = v54;
    v19 = v55;
    v20 = v56;
    v21 = v57;
    outlined init with copy of UnlitMaterial((uint64_t)v42, (uint64_t)v46);
    if (v21 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v58);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v46);
      v14 = v58;
      v15 = v59;
      v40 = v60;
      v16 = v61;
      v17 = v62;
      v18 = v63;
      v19 = v64;
      v20 = v65;
      v21 = v66;
      if (v66 == 255)
        goto LABEL_23;
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v46);
    }
    if (v21 == 6)
    {
      v47 = &type metadata for CustomMaterial;
      v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      outlined copy of __RKMaterialParameterBlock.Parameter(v14, v15, v40, v16, v17, v18, v19, v20, 6);
      outlined copy of __RKMaterialParameterBlock.Parameter(v14, v15, v40, v16, v17, v18, v19, v20, 6);
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);

      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v14, v50, v51, 0, 0);
      swift_release();
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, 6u);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, 6u);
    }
    else if (v21 == 5)
    {
      v22.n128_u64[0] = (unint64_t)v14;
      v38 = v15;
      v22.n128_u64[1] = v15;
      v23 = (void *)specialized SIMD4<>.cgColor.getter(v22);
      v47 = &type metadata for CustomMaterial;
      v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);

      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v23, v50, v51, 0, 0);
      swift_release();
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v38, v40, v16, v17, v18, v19, v20, 5u);
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v15, v40, v16, v17, v18, v19, v20, v21);
    }
LABEL_23:
    v24 = v45;
    swift_bridgeObjectRetain_n();
    v25 = v24;
    swift_bridgeObjectRetain_n();
    v26 = v25;
    specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE860B0, v26, (uint64_t)&v49);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v49;
    v28 = v51;
    v29 = v52;
    v30 = v53;
    v31 = v54;
    v39 = v50;
    v41 = v55;
    v32 = v56;
    v33 = v57;
    outlined init with copy of UnlitMaterial((uint64_t)v42, (uint64_t)v46);
    if (v33 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)&v58);
      swift_release();
      outlined destroy of UnlitMaterial((uint64_t)v46);
      v34 = v58;
      v35 = v59;
      v28 = v60;
      v29 = v61;
      v30 = v62;
      v31 = v63;
      v41 = v64;
      v32 = v65;
      v33 = v66;
      if (v66 == 255)
      {
LABEL_29:
        outlined destroy of UnlitMaterial((uint64_t)v42);
        outlined destroy of UnlitMaterial((uint64_t)&v67);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      }
    }
    else
    {
      outlined destroy of UnlitMaterial((uint64_t)v46);
      v34 = v27;
      v35 = v39;
    }
    if (v33 == 1)
    {
      v47 = &type metadata for CustomMaterial;
      v48 = &protocol witness table for CustomMaterial;
      v46[0] = swift_allocObject();
      outlined init with copy of CustomMaterial(v2, v46[0] + 16);
      outlined copy of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
      swift_retain();
      CustomMaterial.BaseColor.init(material:alternateTintKey:)(v46, 0, 0, (uint64_t)&v49);
      swift_release();
      v36 = v49;
      specialized Material.setParameter<A>(_:alternateTintKey:)((uint64_t)v49, v35, 84148994, 0, 0);
      swift_release();

      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, 1u);
    }
    else
    {
      outlined consume of __RKMaterialParameterBlock.Parameter?(v34, v35, v28, v29, v30, v31, v41, v32, v33);
    }
    goto LABEL_29;
  }
  CustomMaterial.copyParameterBlock(from:)();
  outlined init with copy of __REAssetService((uint64_t)a1, (uint64_t)v46);
  swift_dynamicCast();
  CustomMaterial.copyCustomParameters(from:)((uint64_t)v42);
  outlined destroy of CustomMaterial((uint64_t)v42);
  outlined destroy of CustomMaterial((uint64_t)&v67);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
}

uint64_t CustomMaterial.blending.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  _QWORD v6[2];
  int v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 16);
  v6[0] = *(_QWORD *)a1;
  v1 = v6[0];
  v6[1] = v2;
  v8 = v3;
  v7 = v4;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v6, 1);
  return outlined consume of __EntityInfoComponent?(v1, v2);
}

uint64_t CustomMaterial.baseColor.setter(uint64_t a1)
{
  return CustomMaterial.baseColor.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t static CustomMaterial.createDefaultSurfaceShader(from:with:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssetHandle;
  BOOL v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  const char *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  Swift::String v41;
  Swift::String v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[8];
  unsigned __int8 v52;
  _QWORD v53[8];
  unsigned __int8 v54;
  char v55[8];
  void *v56;
  __int16 v57;
  _BYTE v58[40];
  _QWORD v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;

  v5 = *a2;
  v6 = specialized static __ServiceLocator.shared.getter();
  outlined init with copy of __REAssetService(a1, (uint64_t)v55);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Material);
  if (swift_dynamicCast())
  {
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v59);
    outlined init with copy of __REAssetService(a1, (uint64_t)v55);
    swift_dynamicCast();
    v7 = v62;
    v8 = v63;
    v9 = v64;
    v10 = v65;
    v11 = v66;
    v12 = v67;
    *a3 = v62;
    a3[1] = v8;
    a3[2] = v9;
    a3[3] = v10;
    a3[4] = v11;
    a3[5] = (uint64_t)v12;
    outlined copy of __MaterialResource.CoreMaterialFunction?(v7, v8, v9, v10, v11, v12);
    return outlined destroy of CustomMaterial((uint64_t)v59);
  }
  swift_beginAccess();
  outlined init with copy of __REAssetService(v6 + 120, (uint64_t)v59);
  v14 = v60;
  v15 = v61;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
  AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
  if (!AssetHandle)
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with copy of __REAssetService(a1, (uint64_t)v58);
  if (swift_dynamicCast())
  {
    outlined init with copy of __REAssetService(a1, (uint64_t)&v49);
    swift_dynamicCast();
    v17 = v5 == 2;
    if (v5 == 2)
      v18 = 0x6F637261656C435FLL;
    else
      v18 = 0;
    if (v17)
      v19 = (void *)0xEA00000000007461;
    else
      v19 = (void *)0xE000000000000000;
    if ((v57 & 2) == 0)
    {
      v20 = 0;
      v21 = (void *)0xE000000000000000;
LABEL_28:
      v49 = 0;
      v50 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      v49 = 0xD000000000000025;
      v50 = 0x800000021BE8EF20;
      v41._countAndFlagsBits = v18;
      v41._object = v19;
      String.append(_:)(v41);
      swift_bridgeObjectRelease();
      v42._countAndFlagsBits = v20;
      v42._object = v21;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v22 = v49;
      v40 = v50;
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v55);
      outlined destroy of PhysicallyBasedMaterial((uint64_t)v59);
      goto LABEL_29;
    }
    v46 = v19;
    v47 = v18;
    v24 = v56;
    swift_bridgeObjectRetain_n();
    v25 = v24;
    swift_bridgeObjectRetain_n();
    v26 = v25;
    specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v26, (uint64_t)v51);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v48 = (void *)v51[0];
    v27 = v51[3];
    v44 = v51[2];
    v45 = v51[1];
    v28 = v51[4];
    v29 = v51[5];
    v31 = v51[6];
    v30 = v51[7];
    v32 = v52;
    outlined init with copy of PhysicallyBasedMaterial((uint64_t)v55, (uint64_t)&v49);
    if (v32 == 255)
    {
      swift_retain();
      __MaterialResource.subscript.getter((uint64_t)v53);
      swift_release();
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v49);
      v33 = v53[1];
      v48 = (void *)v53[0];
      v34 = v53[2];
      v35 = v53[3];
      v36 = v53[4];
      v37 = v53[5];
      v38 = v53[6];
      v39 = v53[7];
      v32 = v54;
    }
    else
    {
      outlined destroy of PhysicallyBasedMaterial((uint64_t)&v49);
      v34 = v44;
      v33 = v45;
      v35 = v27;
      v36 = v28;
      v37 = v29;
      v38 = v31;
      v39 = v30;
    }
    v19 = v46;
    if (v32 != 255)
    {
      if (v32 == 2)
      {
        outlined consume of __RKMaterialParameterBlock.Parameter?(v48, v33, v34, v35, v36, v37, v38, v39, 2u);
        v21 = (void *)0xEC00000074756F74;
        v20 = 0x75436168706C415FLL;
LABEL_27:
        v18 = v47;
        goto LABEL_28;
      }
      outlined consume of __RKMaterialParameterBlock.Parameter?(v48, v33, v34, v35, v36, v37, v38, v39, v32);
    }
    v20 = 0;
    v21 = (void *)0xE000000000000000;
    goto LABEL_27;
  }
  if (swift_dynamicCast())
  {
    outlined destroy of SimpleMaterial((uint64_t)v59);
    v22 = 0xD00000000000001CLL;
    v23 = "surfaceShader_SimpleMaterial";
LABEL_19:
    v40 = (unint64_t)(v23 - 32) | 0x8000000000000000;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
    v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
    *a3 = 4;
    a3[1] = v22;
    a3[2] = v40;
    a3[3] = AssetHandle;
    a3[4] = (uint64_t)&outlined read-only object #0 of static CustomMaterial.createDefaultSurfaceShader(from:with:);
    a3[5] = (uint64_t)v43;
    goto LABEL_30;
  }
  if (swift_dynamicCast())
  {
    outlined destroy of UnlitMaterial((uint64_t)v59);
    v22 = 0xD00000000000001BLL;
    v23 = "surfaceShader_UnlitMaterial";
    goto LABEL_19;
  }
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
LABEL_30:
  RERelease();
  return swift_release();
}

uint64_t static CustomMaterial.createDefaultGeometryModifier()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t AssetHandle;
  id v7;
  uint64_t result;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v9);
  v3 = v10;
  v4 = v11;
  __swift_project_boxed_opaque_existential_1(v9, v10);
  v5 = *(void (**)(uint64_t, uint64_t))(v4 + 32);
  swift_retain();
  v5(v3, v4);
  AssetHandle = REAssetManagerCreateAssetHandle();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  if (AssetHandle)
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDD5A0]), sel_init);
    result = swift_release();
    *(_BYTE *)a1 = 3;
    *(_QWORD *)(a1 + 8) = 0xD000000000000010;
    *(_QWORD *)(a1 + 16) = 0x800000021BE84F20;
    *(_QWORD *)(a1 + 24) = AssetHandle;
    *(_QWORD *)(a1 + 32) = &outlined read-only object #0 of static CustomMaterial.createDefaultGeometryModifier();
    *(_QWORD *)(a1 + 40) = v7;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v16;
  id v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[3];
  v17 = (id)a1[4];
  v6 = *((unsigned __int8 *)a1 + 40);
  v7 = specialized static __ServiceLocator.shared.getter();
  if (v5)
  {
    swift_retain();
    RERetain();
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v18);
    v16 = v4;
    v8 = v6;
    v9 = v19;
    v10 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
    swift_retain();
    v12 = v10;
    v6 = v8;
    v11(v9, v12);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x696C6C6174656D2ELL;
    v13._object = (void *)0xE900000000000062;
    String.append(_:)(v13);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = v16;
    v5 = REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  swift_release();
  v14 = &outlined read-only object #1 of static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:);
  *(_BYTE *)a2 = 3;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v6)
    v14 = &outlined read-only object #0 of static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:);
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v17;
  swift_bridgeObjectRetain();
  return v17;
}

id static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  Swift::String v13;
  void *v14;
  uint64_t v16;
  id v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v3 = a1[1];
  v5 = a1[3];
  v17 = (id)a1[4];
  v6 = *((unsigned __int8 *)a1 + 40);
  v7 = specialized static __ServiceLocator.shared.getter();
  if (v5)
  {
    swift_retain();
    RERetain();
  }
  else
  {
    swift_beginAccess();
    outlined init with copy of __REAssetService(v7 + 120, (uint64_t)v18);
    v16 = v4;
    v8 = v6;
    v9 = v19;
    v10 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
    swift_retain();
    v12 = v10;
    v6 = v8;
    v11(v9, v12);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v13._countAndFlagsBits = 0x696C6C6174656D2ELL;
    v13._object = (void *)0xE900000000000062;
    String.append(_:)(v13);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v4 = v16;
    v5 = REAssetManagerShaderLibraryMemoryAssetCreateWithNetworkIdentifier();
    swift_unknownObjectRelease();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  swift_release();
  v14 = &outlined read-only object #1 of static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:);
  *(_BYTE *)a2 = 4;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v6)
    v14 = &outlined read-only object #0 of static CustomMaterial.toCoreMaterialFunction(surfaceShader:libraryName:);
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v14;
  *(_QWORD *)(a2 + 40) = v17;
  swift_bridgeObjectRetain();
  return v17;
}

uint64_t CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t inited;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *v55;
  void *v56;

  v37 = *(unsigned __int8 *)a1;
  v38 = a1[1];
  v30 = a1[2];
  v27 = a1[3];
  v36 = a1[4];
  v56 = (void *)a1[5];
  v33 = *(unsigned __int8 *)a2;
  v5 = a2[1];
  v34 = a2[2];
  v35 = a2[3];
  v6 = (void *)a2[5];
  v29 = a2[4];
  v32 = *a3;
  v8 = *((_QWORD *)a3 + 1);
  v7 = *((_QWORD *)a3 + 2);
  v9 = a3[28];
  v10 = *((unsigned int *)a3 + 6);
  v24 = v10 | (v9 << 32);
  v11 = a3[29];
  v31 = *((_QWORD *)a3 + 4);
  v25 = a3[41];
  v26 = a3[40];
  v12 = REMaterialParameterBlockValueCreate();
  v13 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a4 + 104) = 0u;
  *(_QWORD *)(a4 + 8) = v13;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = v12;
  *(_QWORD *)(a4 + 40) = 0;
  *(_BYTE *)(a4 + 48) = 1;
  *(_OWORD *)(a4 + 56) = xmmword_21BE67DE0;
  *(_BYTE *)(a4 + 76) = 0;
  *(_DWORD *)(a4 + 72) = 0;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_QWORD *)(a4 + 272) = 0;
  *(_QWORD *)(a4 + 280) = 0;
  *(_QWORD *)(a4 + 320) = 0;
  *(_QWORD *)(a4 + 296) = 0;
  *(_QWORD *)(a4 + 304) = 0;
  *(_QWORD *)(a4 + 288) = 3;
  *(_WORD *)(a4 + 312) = 0;
  *(_WORD *)(a4 + 328) = 257;
  LOBYTE(v39) = v32;
  v40 = v8;
  v41 = v7;
  v43 = v9;
  v42 = v10;
  v44 = v11;
  v45 = v31;
  v46 = v26;
  v47 = v25;
  LOWORD(v48) = CustomMaterial.Descriptor.toCustomFeatureFlags()();
  *((_QWORD *)&v48 + 1) = 0;
  LOBYTE(v49) = 1;
  *(_WORD *)((char *)&v49 + 1) = 258;
  *((_QWORD *)&v49 + 1) = v33;
  *(_QWORD *)&v50 = v5;
  *((_QWORD *)&v50 + 1) = v34;
  *(_QWORD *)&v51 = v35;
  *((_QWORD *)&v51 + 1) = v29;
  *(_QWORD *)&v52 = v6;
  *((_QWORD *)&v52 + 1) = v37;
  *(_QWORD *)&v53 = v38;
  *((_QWORD *)&v53 + 1) = v30;
  *(_QWORD *)&v54 = v27;
  *((_QWORD *)&v54 + 1) = v36;
  v55 = v56;
  if (one-time initialization token for shaderCacheRegistry != -1)
    swift_once();
  v14 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v14, (uint64_t)&v39);
  specialized AssetServiceScopedRegistry.instance(for:)(&v39);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  v15 = specialized ShaderCache.getResource(_:)((uint64_t)&v48);
  if (v28)
  {
    swift_release();
    outlined consume of CustomMaterial.Blending?(v8, v7);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of CustomMaterial.Blending?(*(_QWORD *)(a4 + 56), 2);
    outlined destroy of BodyTrackingComponent?(a4 + 104, &demangling cache variable for type metadata for __REAssetService?);
    swift_release();
    return outlined consume of CustomMaterial.Descriptor?(*(_QWORD *)(a4 + 272), *(_QWORD *)(a4 + 280), *(_QWORD *)(a4 + 288));
  }
  else
  {
    v16 = v15;
    swift_release();
    v17 = v53;
    *(_OWORD *)(a4 + 216) = v52;
    *(_OWORD *)(a4 + 232) = v17;
    *(_OWORD *)(a4 + 248) = v54;
    v18 = v49;
    *(_OWORD *)(a4 + 152) = v48;
    *(_OWORD *)(a4 + 168) = v18;
    v19 = v51;
    *(_OWORD *)(a4 + 184) = v50;
    *(_QWORD *)a4 = v16;
    *(_QWORD *)(a4 + 264) = v55;
    *(_OWORD *)(a4 + 200) = v19;
    *(_QWORD *)(a4 + 40) = v11;
    *(_BYTE *)(a4 + 48) = 0;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestLoadable>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21BE411F0;
    v21 = type metadata accessor for __MaterialResource();
    *(_QWORD *)(inited + 32) = v16;
    *(_QWORD *)(inited + 56) = v21;
    *(_QWORD *)(inited + 64) = &protocol witness table for __MaterialResource;
    swift_retain_n();
    outlined copy of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);
    specialized static RequestLoadableUtilities.enforceResourceSharingBeforeECSCommits(_:)(inited);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestLoadable);
    swift_arrayDestroy();
    swift_release();
    *(_QWORD *)(a4 + 80) = REDirectParameterBufferCreate();
    *(_QWORD *)(a4 + 88) = 0;
    *(_BYTE *)(a4 + 96) = 0;
    if (v7 == 2)
      v23 = 0;
    else
      v23 = v8;
    v39 = v23;
    v40 = v7;
    BYTE4(v41) = BYTE4(v24);
    LODWORD(v41) = v24;
    CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)&v39, 0);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v33, v5, v34, v35, v29, v6);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v37, v38, v30, v27, v36, v56);
    return outlined consume of __EntityInfoComponent?(v23, v7);
  }
}

uint64_t CustomMaterial.Descriptor.toCustomFeatureFlags()()
{
  uint64_t v0;
  int v1;
  int v2;
  unsigned int v3;
  uint64_t result;

  if (((*(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32)) & 0x100000000) != 0)
    v1 = 513;
  else
    v1 = 1;
  if ((unint64_t)(*(_QWORD *)(v0 + 16) - 1) >= 2)
    v2 = v1;
  else
    v2 = 0;
  v3 = v2 | (0x800020004uLL >> (16 * *(_BYTE *)v0));
  if (*(_BYTE *)(v0 + 41))
    result = v3 | 0x10;
  else
    result = v3;
  if ((*(_BYTE *)(v0 + 40) & 1) == 0)
    return (*(unsigned __int16 *)(v0 + 32) << 6) & 0x1C00 | (32 * (*(_WORD *)(v0 + 32) & 0xF)) | result;
  return result;
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, void *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char v18;
  int v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  char v34;
  id v35;
  char v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  _QWORD __src[42];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  int v60;
  unsigned __int8 v61;

  v7 = *a1;
  v8 = a1[1];
  v10 = a1[2];
  v9 = a1[3];
  v11 = (void *)a1[4];
  v12 = *((_BYTE *)a1 + 40);
  v13 = *(_QWORD *)a2;
  v14 = *(_QWORD *)(a2 + 8);
  v16 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v17 = *(void **)(a2 + 32);
  v18 = *(_BYTE *)(a2 + 40);
  v19 = *a3;
  v38 = *(_QWORD *)a4;
  v40 = *(_QWORD *)(a4 + 8);
  v41 = *(_QWORD *)a2;
  v39 = *(unsigned int *)(a4 + 16) | ((unint64_t)*(unsigned __int8 *)(a4 + 20) << 32);
  v37 = *a5;
  v47 = v7;
  v48 = v8;
  v49 = v10;
  v50 = v9;
  v51 = v11;
  LOBYTE(v52) = v12;
  v42 = v14;
  v43 = v16;
  v44 = v15;
  v45 = v17;
  LOBYTE(v46) = v18;
  v60 = v19;
  v61 = v19;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)__src, (uint64_t)&v54, (uint64_t)&v47, (uint64_t)&v41, &v61);
  if (v6)
  {
    outlined consume of __EntityInfoComponent?(v38, v40);
    outlined consume of CustomMaterial.GeometryModifier?(v13, v14, v16, v15, v17);

    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of CustomMaterial.GeometryModifier?(v13, v14, v16, v15, v17);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v21 = __src[0];
    v22 = __src[1];
    v23 = __src[2];
    v24 = __src[3];
    v25 = (void *)__src[4];
    v26 = (void *)__src[5];
    v34 = v54;
    v27 = v56;
    v33 = v55;
    v28 = v57;
    v29 = v58;
    v30 = v59;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v26;
    LOBYTE(v54) = v21;
    v55 = v22;
    v56 = v23;
    v35 = v31;
    v57 = v24;
    v58 = v25;
    v59 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v32 = v30;
    LOBYTE(v47) = v34;
    v48 = v33;
    v49 = v27;
    v50 = v28;
    v51 = v29;
    v52 = v32;
    LOBYTE(v41) = v60;
    v42 = v38;
    v43 = v40;
    BYTE4(v44) = BYTE4(v39);
    LODWORD(v44) = v39;
    BYTE5(v44) = v37;
    v45 = 0;
    v46 = 0;
    outlined copy of CustomMaterial.Blending(v38, v40);
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v54, &v47, (char *)&v41, (uint64_t)__src);
    memcpy(a6, __src, 0x14AuLL);
    RERelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of __EntityInfoComponent?(v38, v40);
  }
}

__n128 CustomMaterial.Descriptor.init(lightingModel:blending:faceCulling:options:)@<Q0>(_BYTE *a1@<X0>, __n128 *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int32 v5;
  unsigned __int8 v6;
  char v7;
  uint64_t v8;
  unsigned __int8 v9;
  __n128 result;

  v5 = a2[1].n128_u32[0];
  v6 = a2[1].n128_u8[4];
  v7 = *a3;
  v8 = *a4;
  v9 = *((_BYTE *)a4 + 8);
  *(_BYTE *)a5 = *a1;
  result = *a2;
  *(__n128 *)(a5 + 8) = *a2;
  *(_BYTE *)(a5 + 28) = v6;
  *(_DWORD *)(a5 + 24) = v5;
  *(_BYTE *)(a5 + 29) = v7;
  *(_QWORD *)(a5 + 32) = v8;
  *(_WORD *)(a5 + 40) = v9;
  return result;
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  unsigned __int8 v9;
  __int128 v10;
  char v12;
  __int128 v13;
  int v14;
  char v15;
  unsigned __int8 v16;
  _OWORD v17[2];
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *a3;
  v20 = *(_QWORD *)a1;
  v21 = *(_OWORD *)(a1 + 8);
  v22 = v4;
  v23 = v5;
  v24 = v6;
  v10 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v10;
  v18 = v7;
  v19 = v8;
  v16 = v9;
  v13 = xmmword_21BE56B70;
  v15 = 0;
  v14 = 0;
  v12 = 2;
  return CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)(&v20, (uint64_t)v17, &v16, (uint64_t)&v13, &v12, a4);
}

BOOL static CustomMaterial.Descriptor.AttributeSet.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CustomMaterial.Descriptor.AttributeSet.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t CustomMaterial.Descriptor.FunctionConstantOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

RealityFoundation::CustomMaterial::Descriptor::FunctionConstantOptions __swiftcall CustomMaterial.Descriptor.FunctionConstantOptions.init(rawValue:)(RealityFoundation::CustomMaterial::Descriptor::FunctionConstantOptions rawValue)
{
  RealityFoundation::CustomMaterial::Descriptor::FunctionConstantOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableVideo.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableSpecularTreatment.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.disablePostProcessTonemap.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableDitherOpacity.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enablePassthroughBlur.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableVCABlur.getter(_QWORD *a1@<X8>)
{
  *a1 = 32;
}

void static CustomMaterial.Descriptor.FunctionConstantOptions.enableBarycentricCoordinates.getter(_QWORD *a1@<X8>)
{
  *a1 = 64;
}

void CustomMaterial.Descriptor.lightingModel.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *CustomMaterial.Descriptor.lightingModel.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.lightingModel.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.Descriptor.blending.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 28);
  v5 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  return outlined copy of CustomMaterial.Blending?(v2, v3);
}

uint64_t CustomMaterial.Descriptor.blending.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 4);
  v5 = *((_BYTE *)a1 + 20);
  v6 = v1 + 24;
  result = outlined consume of CustomMaterial.Blending?(*(_QWORD *)(v6 - 16), *(_QWORD *)(v6 - 8));
  *(_QWORD *)(v6 - 16) = v2;
  *(_QWORD *)(v6 - 8) = v3;
  *(_BYTE *)(v6 + 4) = v5;
  *(_DWORD *)v6 = v4;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.blending.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.faceCulling.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 29);
}

_BYTE *CustomMaterial.Descriptor.faceCulling.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 29) = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.faceCulling.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.options.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t CustomMaterial.Descriptor.options.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.options.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

void CustomMaterial.Descriptor.attributeSet.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 41);
}

_BYTE *CustomMaterial.Descriptor.attributeSet.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = *result;
  return result;
}

uint64_t (*CustomMaterial.Descriptor.attributeSet.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

__n128 CustomMaterial.Descriptor.init(lightingModel:blending:faceCulling:options:attributeSet:)@<Q0>(_BYTE *a1@<X0>, __n128 *a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned __int32 v6;
  unsigned __int8 v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  __n128 result;

  v6 = a2[1].n128_u32[0];
  v7 = a2[1].n128_u8[4];
  v8 = *a3;
  v9 = *a4;
  v10 = *((_BYTE *)a4 + 8);
  v11 = *a5;
  *(_BYTE *)a6 = *a1;
  result = *a2;
  *(__n128 *)(a6 + 8) = *a2;
  *(_BYTE *)(a6 + 28) = v7;
  *(_DWORD *)(a6 + 24) = v6;
  *(_BYTE *)(a6 + 29) = v8;
  *(_QWORD *)(a6 + 32) = v9;
  *(_BYTE *)(a6 + 40) = v10;
  *(_BYTE *)(a6 + 41) = v11;
  return result;
}

void CustomMaterial.Descriptor.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  int v3;
  Swift::UInt v4;

  v1 = v0[29];
  v2 = *((_QWORD *)v0 + 4);
  v3 = v0[40];
  if ((unint64_t)(*((_QWORD *)v0 + 2) - 1) >= 2)
    v4 = (v0[28] & 1) + 1;
  else
    v4 = 0;
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
}

Swift::Int CustomMaterial.Descriptor.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unsigned __int8 v3;
  Swift::UInt v4;
  Swift::UInt v5;
  unsigned __int8 v6;
  Swift::UInt v7;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 2);
  v3 = v0[28];
  v4 = v0[29];
  v5 = *((_QWORD *)v0 + 4);
  v6 = v0[40];
  Hasher.init(_seed:)();
  if ((unint64_t)(v2 - 1) >= 2)
    v7 = (v3 & 1) + 1;
  else
    v7 = 0;
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v4);
  if ((v6 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.Descriptor()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  uint64_t v2;
  unsigned __int8 v3;
  Swift::UInt v4;
  Swift::UInt v5;
  unsigned __int8 v6;
  Swift::UInt v7;

  v1 = *v0;
  v2 = *((_QWORD *)v0 + 2);
  v3 = v0[28];
  v4 = v0[29];
  v5 = *((_QWORD *)v0 + 4);
  v6 = v0[40];
  Hasher.init(_seed:)();
  if ((unint64_t)(v2 - 1) >= 2)
    v7 = (v3 & 1) + 1;
  else
    v7 = 0;
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v4);
  if ((v6 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

uint64_t CustomMaterial.init(surfaceShader:geometryModifier:descriptor:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  int v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  unsigned __int8 v34;
  unsigned __int8 v35;
  void *v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  _QWORD __src[42];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  int v61;
  unsigned __int8 v62;

  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = (void *)a1[4];
  v9 = *((_BYTE *)a1 + 40);
  v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v14 = *(void **)(a2 + 32);
  v15 = *(_BYTE *)(a2 + 40);
  v16 = *a3;
  v38 = *((_QWORD *)a3 + 1);
  v39 = *((_QWORD *)a3 + 2);
  v40 = *((unsigned int *)a3 + 6) | ((unint64_t)a3[28] << 32);
  v37 = a3[29];
  v36 = (void *)*((_QWORD *)a3 + 4);
  v35 = a3[40];
  v34 = a3[41];
  v48 = *a1;
  v49 = v5;
  v50 = v7;
  v51 = v6;
  v52 = v8;
  LOBYTE(v53) = v9;
  v41 = v10;
  v42 = v11;
  v43 = v13;
  v44 = v12;
  v45 = v14;
  v46 = v15;
  v61 = v16;
  v62 = v16;
  static CustomMaterial.surfaceShaderStructsForInit(surfaceShader:geometryModifier:lightingModel:)((uint64_t)__src, (uint64_t)&v55, (uint64_t)&v48, (uint64_t)&v41, &v62);
  if (v4)
  {
    outlined consume of CustomMaterial.Blending?(v38, v39);
    outlined consume of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);

    swift_unknownObjectRelease();
  }
  else
  {
    outlined consume of CustomMaterial.GeometryModifier?(v10, v11, v13, v12, v14);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v18 = __src[0];
    v20 = __src[1];
    v19 = __src[2];
    v21 = __src[3];
    v22 = (void *)__src[4];
    v23 = (void *)__src[5];
    v32 = v55;
    v24 = v57;
    v31 = v56;
    v26 = v58;
    v25 = v59;
    v27 = v60;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v23;
    LOBYTE(v55) = v18;
    v56 = v20;
    v57 = v19;
    v29 = v28;
    v58 = v21;
    v59 = v22;
    v60 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30 = v27;
    LOBYTE(v48) = v32;
    v49 = v31;
    v50 = v24;
    v51 = v26;
    v52 = v25;
    v53 = v30;
    LOBYTE(v41) = v61;
    v42 = v38;
    v43 = v39;
    BYTE4(v44) = BYTE4(v40);
    LODWORD(v44) = v40;
    BYTE5(v44) = v37;
    v45 = v36;
    v46 = v35;
    v47 = v34;
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v55, &v48, (char *)&v41, (uint64_t)__src);
    memcpy(a4, __src, 0x14AuLL);
    RERelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t CustomMaterial.init(from:surfaceShader:geometryModifier:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  char v14;
  uint64_t v15;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  int v30;
  char v31;
  unsigned __int8 v32;
  _OWORD v33[2];
  uint64_t v34;
  char v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD __src[45];

  v20 = *(_QWORD *)a2;
  v26 = *(_QWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a2 + 24);
  v25 = *(_BYTE *)(a2 + 40);
  v23 = a3[1];
  v24 = *a3;
  v22 = *((_QWORD *)a3 + 4);
  v21 = *((_BYTE *)a3 + 40);
  static CustomMaterial.getLightingModel(from:)((uint64_t)a1, (char *)__src);
  v19 = __src[0];
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)__src);
  v18 = __src[0];
  v6 = __src[1];
  v7 = BYTE4(__src[2]);
  v8 = __src[2];
  v10 = a1[3];
  v9 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 112))(v10, v9);
  v36 = v20;
  v13 = v11 < 3 && (v12 & 1) == 0;
  v37 = *(_OWORD *)(a2 + 8);
  if (v13)
    v14 = v11;
  else
    v14 = 2;
  v38 = v27;
  v39 = v26;
  v40 = v25;
  v33[0] = v24;
  v33[1] = v23;
  v34 = v22;
  v35 = v21;
  v32 = v19;
  v29[0] = v18;
  v29[1] = v6;
  v31 = v7;
  v30 = v8;
  v28 = v14;
  outlined copy of CustomMaterial.Blending(v18, v6);
  v15 = __src[44];
  CustomMaterial.init(surfaceShader:geometryModifier:lightingModel:blending:faceCulling:)(&v36, (uint64_t)v33, &v32, (uint64_t)v29, &v28, __src);
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined consume of __EntityInfoComponent?(v18, v6);
  }
  else
  {
    memcpy(a4, __src, 0x14AuLL);
    CustomMaterial.copyParameters(from:)(a1);
    outlined consume of __EntityInfoComponent?(v18, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
}

void CustomMaterial.init(from:geometryModifier:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  void *v28;
  id v29;
  _BYTE *v30;
  uint64_t v31;
  char v32;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  char v44[8];
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  char v49;
  uint64_t v50;
  __int16 v51;
  _QWORD v52[6];
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t __src[43];
  uint64_t v60;

  v4 = *(void **)(a2 + 8);
  v36 = *(_QWORD *)a2;
  v5 = *(void **)(a2 + 16);
  v35 = *(_QWORD *)(a2 + 24);
  v6 = *(void **)(a2 + 32);
  v34 = *(_BYTE *)(a2 + 40);
  static CustomMaterial.getLightingModel(from:)((uint64_t)a1, (char *)__src);
  v7 = LOBYTE(__src[0]);
  static CustomMaterial.getBlending(from:)((uint64_t)a1, (uint64_t)__src);
  v43 = __src[0];
  v60 = __src[1];
  v8 = LODWORD(__src[2]) | ((unint64_t)BYTE4(__src[2]) << 32);
  v9 = a1[3];
  v10 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v9);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10);
  if (v11 < 3 && (v12 & 1) == 0)
    v14 = v11;
  else
    v14 = 2;
  v42 = v7;
  LOBYTE(v53) = v7;
  static CustomMaterial.createDefaultSurfaceShader(from:with:)((uint64_t)a1, (unsigned __int8 *)&v53, __src);
  v15 = (void *)__src[2];
  if (__src[2])
  {
    v32 = v14;
    v16 = v6;
    v17 = __src[1];
    v38 = __src[0];
    v39 = __src[3];
    v40 = __src[4];
    v41 = (void *)__src[5];
    __src[0] = 0;
    __src[1] = 0xE000000000000000;
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v36;
    v18._object = v4;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 95;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v20._countAndFlagsBits = v17;
    v20._object = v15;
    String.append(_:)(v20);
    v21._countAndFlagsBits = 95;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22 = 0xE500000000000000;
    v23 = 0x74696C6E75;
    if (v42 != 1)
    {
      v23 = 0x616F637261656C63;
      v22 = 0xE900000000000074;
    }
    if (v42)
      v24 = v23;
    else
      v24 = 7629164;
    if (v42)
      v25 = v22;
    else
      v25 = 0xE300000000000000;
    v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v53 = v36;
    v54 = (uint64_t)v4;
    v55 = v5;
    v56 = v35;
    v57 = (uint64_t)v16;
    LOBYTE(v58) = v34;
    v27._countAndFlagsBits = 0x6D6F65675FLL;
    v27._object = (void *)0xE500000000000000;
    String.append(_:)(v27);
    static CustomMaterial.toCoreMaterialFunction(geometryModifier:libraryName:)(&v53, (uint64_t)__src);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v28 = (void *)__src[5];
    LOBYTE(v53) = v38;
    v54 = v17;
    v55 = v15;
    v56 = v39;
    v57 = v40;
    v58 = v41;
    LOBYTE(v52[0]) = __src[0];
    v52[1] = __src[1];
    v52[2] = __src[2];
    v52[3] = __src[3];
    v52[4] = __src[4];
    v52[5] = __src[5];
    v44[0] = v42;
    v45 = v43;
    v46 = v60;
    v48 = BYTE4(v8);
    v47 = v8;
    v49 = v32;
    v50 = 0;
    v51 = 0;
    outlined copy of CustomMaterial.Blending(v43, v60);
    outlined copy of __MaterialResource.CoreMaterialFunction?(v38, v17, (uint64_t)v15, v39, v40, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = v28;
    CustomMaterial.init(coreSurfaceShader:coreGeometryModifier:descriptor:)(&v53, v52, v44, (uint64_t)__src);
    if (v37)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      outlined consume of __EntityInfoComponent?(v43, v60);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of __MaterialResource.CoreMaterialFunction?(v38, v17, (uint64_t)v15, v39, v40, v41);
      return;
    }
    memcpy(a3, __src, 0x14AuLL);
    CustomMaterial.copyParameters(from:)(a1);
    RERelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of __MaterialResource.CoreMaterialFunction?(v38, v17, (uint64_t)v15, v39, v40, v41);
    outlined consume of __EntityInfoComponent?(v43, v60);
    v31 = (uint64_t)a1;
  }
  else
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
    swift_allocError();
    *v30 = 2;
    swift_willThrow();
    outlined consume of __EntityInfoComponent?(v43, v60);
    v31 = (uint64_t)a1;
  }
  __swift_destroy_boxed_opaque_existential_1(v31);
}

__n128 CustomMaterial.Custom.value.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

void CustomMaterial.Custom.value.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

uint64_t (*CustomMaterial.Custom.value.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t static CustomMaterial.Custom.__valueKey.getter()
{
  return 0x6172615072657375;
}

uint64_t static CustomMaterial.Custom.__textureKey.getter()
{
  return 0x4365727574786574;
}

uint64_t CustomMaterial.Custom.texture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_retain();
}

uint64_t CustomMaterial.Custom.texture.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *a1;
  v3 = *((_DWORD *)a1 + 2);
  result = swift_release();
  *(_QWORD *)(v1 + 16) = v2;
  *(_DWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*CustomMaterial.Custom.texture.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t CustomMaterial.Custom.init(value:texture:)@<X0>(uint64_t result@<X0>, __n128 *a2@<X8>, __n128 a3@<Q0>)
{
  unint64_t v3;
  unsigned __int32 v4;

  v3 = *(_QWORD *)result;
  v4 = *(_DWORD *)(result + 8);
  *a2 = a3;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u32[2] = v4;
  return result;
}

double CustomMaterial.Custom.getCurrentValues(alternateTintKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  double result;

  v6 = *v2;
  v5 = v2[1];
  v7 = v2[2];
  if (v7)
  {
    swift_retain();
    v8 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v9 = 1;
    v10 = 84148994;
  }
  else
  {
    v8 = 0;
    v10 = 0;
    v9 = -1;
  }
  strcpy((char *)a1, "textureCustom");
  *(_WORD *)(a1 + 14) = -4864;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v10;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = v9;
  *(_OWORD *)a2 = xmmword_21BE51280;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v5;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 5;
  return result;
}

uint64_t CustomMaterial.Custom.init(material:alternateTintKey:)@<X0>(_QWORD *a1@<X0>, int8x16_t *a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64_t v13;
  void *v14;
  int v15;
  int8x16_t v16;
  int8x16_t v17;
  void *v19;
  uint64_t v20;

  swift_bridgeObjectRelease();
  v4 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v5 = Material.getFloat4Parameter(key:)(0x6172615072657375, 0xED0000726574656DLL, v4);
  v7 = v6;
  v9 = v8;
  v10 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v10);
  Material.getTextureParameter(key:)(0x4365727574786574, 0xED00006D6F747375, v10, (uint64_t)&v19);
  v13 = v20;
  if (v20)
  {
    v14 = v19;
    swift_retain();
    outlined consume of MaterialParameters.Texture?(v14, v13);
    v15 = 84148994;
  }
  else
  {
    v15 = 0;
  }
  v11.i32[0] = 0;
  v12.i32[0] = v9 & 1;
  v16 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v11), 0);
  v17.i64[0] = (uint64_t)v5;
  v17.i64[1] = v7;
  *a2 = vandq_s8(v17, v16);
  a2[1].i64[0] = v13;
  a2[1].i32[2] = v15;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_release();
}

uint64_t (*CustomMaterial.baseColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.BaseColor.init(material:alternateTintKey:)(v4, 0, 0, a1);
  return CustomMaterial.baseColor.modify;
}

uint64_t CustomMaterial.baseColor.modify(uint64_t a1, char a2)
{
  return CustomMaterial.baseColor.modify(a1, a2, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.metallic.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Metallic.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.metallic.modify;
}

uint64_t CustomMaterial.metallic.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.roughness.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.roughness.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Roughness.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.roughness.modify;
}

uint64_t CustomMaterial.roughness.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

_QWORD *key path getter for CustomMaterial.baseColor : CustomMaterial@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  int v8;
  _QWORD v9[5];
  _QWORD v10[2];
  int v11;

  v9[3] = &type metadata for CustomMaterial;
  v9[4] = &protocol witness table for CustomMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v9[0] + 16);
  result = a2(v10, v9, 0, 0);
  v7 = v10[1];
  v8 = v11;
  *(_QWORD *)a3 = v10[0];
  *(_QWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void key path setter for CustomMaterial.baseColor : CustomMaterial(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  void *v6;
  id v7;

  v6 = *a1;
  swift_retain();
  v7 = v6;
  a5();
  swift_release();

}

uint64_t CustomMaterial.emissiveColor.setter(uint64_t a1)
{
  return CustomMaterial.baseColor.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.setter(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  void *v2;

  v2 = *(void **)a1;
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);

  return swift_release();
}

uint64_t (*CustomMaterial.emissiveColor.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.EmissiveColor.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.emissiveColor.modify;
}

uint64_t CustomMaterial.emissiveColor.modify(uint64_t a1, char a2)
{
  return CustomMaterial.baseColor.modify(a1, a2, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.baseColor.modify(uint64_t a1, char a2, void (*a3)(void))
{
  void *v4;
  id v5;

  v4 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v5 = v4;
    a3();

    swift_release();
  }
  else
  {
    ((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a3)(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0);

  }
  return swift_release();
}

uint64_t CustomMaterial.specular.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.specular.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Specular.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.specular.modify;
}

uint64_t CustomMaterial.specular.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void key path getter for CustomMaterial.opacityThreshold : CustomMaterial(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  BOOL v3;
  int v4;
  void *v5[8];
  unsigned __int8 v6;

  specialized Material.subscript.getter(0xD000000000000010, 0x800000021BE81760, (uint64_t)v5);
  v2 = v6;
  v3 = 1;
  if (v6 == 255)
  {
    v4 = 0;
  }
  else
  {
    if (v6 == 2)
    {
      v2 = 2;
      v4 = (int)v5[0];
    }
    else
    {
      v4 = 0;
    }
    v3 = v6 != 2;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v5[0], (uint64_t)v5[1], (uint64_t)v5[2], (uint64_t)v5[3], (uint64_t)v5[4], (uint64_t)v5[5], (uint64_t)v5[6], (uint64_t)v5[7], v2);
  }
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 4) = v3;
}

uint64_t key path setter for CustomMaterial.opacityThreshold : CustomMaterial(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(result + 4) & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v3 = REMaterialParameterBlockValueCopy();
      v4 = *(void **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v3;

    }
    return REMaterialParameterBlockValueSetFloat();
  }
  return result;
}

uint64_t CustomMaterial.opacityThreshold.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  if ((result & 0x100000000) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v2 = REMaterialParameterBlockValueCopy();
      v3 = *(void **)(v1 + 32);
      *(_QWORD *)(v1 + 32) = v2;

    }
    return REMaterialParameterBlockValueSetFloat();
  }
  return result;
}

void (*CustomMaterial.opacityThreshold.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v26;
  void *v27;
  _QWORD v28[8];
  unsigned __int8 v29;
  _QWORD v30[8];
  unsigned __int8 v31;

  v2 = v1;
  v4 = malloc(0x160uLL);
  *a1 = v4;
  v4[43] = v2;
  v5 = *(void **)(v2 + 32);
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(0xD000000000000010, 0x800000021BE81760, v7, (uint64_t)v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v28[2];
  v26 = v28[1];
  v27 = (void *)v28[0];
  v9 = v28[3];
  v10 = v28[4];
  v12 = v28[5];
  v11 = v28[6];
  v13 = v28[7];
  v14 = v29;
  outlined init with copy of CustomMaterial(v2, (uint64_t)v4);
  if (v14 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v30);
    swift_release();
    outlined destroy of CustomMaterial((uint64_t)v4);
    v15 = (void *)v30[0];
    v16 = v30[1];
    v17 = v30[2];
    v18 = v30[3];
    v19 = v30[4];
    v20 = v30[5];
    v21 = v30[6];
    v22 = v30[7];
    v14 = v31;
  }
  else
  {
    outlined destroy of CustomMaterial((uint64_t)v4);
    v16 = v26;
    v15 = v27;
    v17 = v8;
    v18 = v9;
    v19 = v10;
    v20 = v12;
    v21 = v11;
    v22 = v13;
  }
  v23 = 1;
  if (v14 == 255)
  {
    v24 = 0;
  }
  else
  {
    if (v14 == 2)
      v24 = (int)v15;
    else
      v24 = 0;
    v23 = v14 != 2;
    outlined consume of __RKMaterialParameterBlock.Parameter?(v15, v16, v17, v18, v19, v20, v21, v22, v14);
  }
  *((_DWORD *)v4 + 83) = v24;
  *((_BYTE *)v4 + 336) = v23;
  return CustomMaterial.opacityThreshold.modify;
}

void CustomMaterial.opacityThreshold.modify(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)a1;
  if ((*(_BYTE *)(*(_QWORD *)a1 + 336) & 1) == 0)
  {
    if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
    {
      v2 = v1[43];
      v3 = REMaterialParameterBlockValueCopy();
      v4 = *(void **)(v2 + 32);
      *(_QWORD *)(v2 + 32) = v3;

    }
    REMaterialParameterBlockValueSetFloat();
  }
  free(v1);
}

unsigned __int8 *CustomMaterial.faceCulling.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = *result;
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

uint64_t *(*CustomMaterial.faceCulling.modify(uint64_t *(*result)(uint64_t *result)))(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  *(_QWORD *)result = v1;
  if ((*(_BYTE *)(v1 + 48) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 40);
    if (v2 >= 3)
      LOBYTE(v2) = 2;
    *((_BYTE *)result + 8) = v2;
    return CustomMaterial.faceCulling.modify;
  }
  return result;
}

uint64_t *CustomMaterial.faceCulling.modify(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *(_QWORD *)(v1 + 40) = *((unsigned __int8 *)result + 8);
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

uint64_t (*CustomMaterial.blending.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  CustomMaterial.blending.getter(a1);
  return CustomMaterial.blending.modify;
}

uint64_t CustomMaterial.blending.modify(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[2];
  int v6;
  char v7;

  v1 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  v5[0] = *(_QWORD *)a1;
  v2 = v5[0];
  v5[1] = v1;
  v6 = v3;
  v7 = BYTE4(v3);
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)v5, 1);
  return outlined consume of __EntityInfoComponent?(v2, v1);
}

uint64_t key path setter for CustomMaterial.normal : CustomMaterial()
{
  uint64_t v0;

  v0 = swift_retain();
  specialized Material.setParameter<A>(_:alternateTintKey:)(v0);
  return swift_release();
}

uint64_t CustomMaterial.normal.setter(uint64_t *a1)
{
  uint64_t v1;
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  _QWORD v6[4];
  __int128 v7;
  __int128 v8;
  unsigned __int8 v9;

  v1 = *a1;
  if (*a1)
  {
    swift_retain();
    v2 = (id)REMaterialCreateDefaultSamplerDescriptor();
    v3 = 1;
    v4 = 84148994;
  }
  else
  {
    v2 = 0;
    v4 = 0;
    v3 = -1;
  }
  v6[0] = v2;
  v6[1] = v1;
  v6[2] = 0;
  v6[3] = v4;
  v7 = 0u;
  v8 = 0u;
  v9 = v3;
  outlined copy of __RKMaterialParameterBlock.Parameter?(v2, v1, 0, v4, 0, 0, 0, 0, v3);
  specialized Material.subscript.setter((uint64_t)v6, 0x4E65727574786574, 0xED00006C616D726FLL);
  swift_bridgeObjectRelease();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v2, v1, 0, v4, 0, 0, 0, 0, v3);
  return swift_release();
}

void (*CustomMaterial.normal.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  int v17;
  uint64_t v19;
  void *v20;
  _QWORD v21[8];
  unsigned __int8 v22;
  _QWORD v23[8];
  unsigned __int8 v24;

  v3 = malloc(0x2B8uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(0x4E65727574786574, 0xED00006C616D726FLL, v7, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v21[1];
  v9 = v21[3];
  v19 = v21[2];
  v20 = (void *)v21[0];
  v11 = v21[4];
  v10 = v21[5];
  v13 = v21[6];
  v12 = v21[7];
  v14 = v22;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v14 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v23);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    v15 = (void *)v23[0];
    v8 = v23[1];
    v16 = v23[2];
    v9 = v23[3];
    v11 = v23[4];
    v10 = v23[5];
    v13 = v23[6];
    v12 = v23[7];
    v14 = v24;
    if (v24 == 255)
    {
LABEL_7:
      v8 = 0;
      v17 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    v16 = v19;
    v15 = v20;
  }
  if (v14 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v15, v8, v16, v9, v11, v10, v13, v12, v14);
    goto LABEL_7;
  }
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v15, v8, v16, v9, v11, v10, v13, v12, 1u);
  v17 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v17;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.normal.modify;
}

void CustomMaterial.normal.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    v3 = swift_retain();
    specialized Material.setParameter<A>(_:alternateTintKey:)(v3);
    swift_release();
  }
  else
  {
    specialized Material.setParameter<A>(_:alternateTintKey:)(*(_QWORD *)(*(_QWORD *)a1 + 672));
  }
  swift_release();
  free(v2);
}

uint64_t CustomMaterial.ambientOcclusion.setter(uint64_t a1)
{
  return CustomMaterial.ambientOcclusion.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void (*CustomMaterial.ambientOcclusion.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[8];
  unsigned __int8 v24;
  _QWORD v25[8];
  unsigned __int8 v26;

  v3 = malloc(0x2B8uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(0xD000000000000017, 0x800000021BE86150, v7, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v23[1];
  v21 = v23[2];
  v22 = (void *)v23[0];
  v9 = v23[4];
  v20 = v23[3];
  v11 = v23[5];
  v10 = v23[6];
  v12 = v23[7];
  v13 = v24;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v25);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    v14 = (void *)v25[0];
    v8 = v25[1];
    v15 = v25[2];
    v16 = v25[3];
    v9 = v25[4];
    v11 = v25[5];
    v10 = v25[6];
    v12 = v25[7];
    v13 = v26;
    if (v26 == 255)
    {
LABEL_7:
      v8 = 0;
      v18 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    v15 = v21;
    v14 = v22;
    v16 = v20;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v8, v15, v16, v9, v11, v10, v12, v13);
    goto LABEL_7;
  }
  v17 = v14;
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v8, v15, v16, v9, v11, v10, v12, 1u);
  v18 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v18;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.ambientOcclusion.modify;
}

void CustomMaterial.ambientOcclusion.modify(uint64_t a1, char a2)
{
  CustomMaterial.ambientOcclusion.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.clearcoat.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t (*CustomMaterial.clearcoat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.Clearcoat.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.clearcoat.modify;
}

uint64_t CustomMaterial.clearcoat.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float key path getter for CustomMaterial.metallic : CustomMaterial@<S0>(uint64_t a1@<X0>, void (*a2)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  float result;
  uint64_t v7;
  int v8;
  _QWORD v9[5];
  _QWORD v10[2];
  int v11;

  v9[3] = &type metadata for CustomMaterial;
  v9[4] = &protocol witness table for CustomMaterial;
  v9[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v9[0] + 16);
  a2(v10, v9, 0, 0);
  result = *(float *)v10;
  v7 = v10[1];
  v8 = v11;
  *(_DWORD *)a3 = v10[0];
  *(_QWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

uint64_t key path setter for CustomMaterial.metallic : CustomMaterial(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD, _QWORD, float))
{
  float v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a1;
  v7 = *((unsigned int *)a1 + 4);
  v8 = swift_retain();
  a5(v8, v7, 0, 0, v6);
  return swift_release();
}

uint64_t CustomMaterial.clearcoatRoughness.setter(uint64_t a1)
{
  return CustomMaterial.metallic.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.setter(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, float))
{
  a2(*(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, 0, *(float *)a1);
  return swift_release();
}

uint64_t (*CustomMaterial.clearcoatRoughness.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD v4[5];

  *(_QWORD *)(a1 + 24) = v1;
  v4[3] = &type metadata for CustomMaterial;
  v4[4] = &protocol witness table for CustomMaterial;
  v4[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v4[0] + 16);
  CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:)(v4, a1);
  return CustomMaterial.clearcoatRoughness.modify;
}

uint64_t CustomMaterial.clearcoatRoughness.modify(uint64_t a1, char a2)
{
  return CustomMaterial.metallic.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.metallic.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, float))
{
  float v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(float *)a1;
  v5 = *(unsigned int *)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    v6 = swift_retain();
    a3(v6, v5, 0, 0, v4);
    swift_release();
  }
  else
  {
    a3(*(_QWORD *)(a1 + 8), v5, 0, 0, *(float *)a1);
  }
  return swift_release();
}

uint64_t CustomMaterial.textureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 0, (void *)0xE000000000000000);
}

uint64_t (*CustomMaterial.textureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(0, (void *)0xE000000000000000, a1);
  return CustomMaterial.textureCoordinateTransform.modify;
}

uint64_t CustomMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return CustomMaterial.textureCoordinateTransform.modify(a1, a2, 0, (void *)0xE000000000000000);
}

uint64_t CustomMaterial.secondaryTextureCoordinateTransform.setter(uint64_t a1)
{
  return CustomMaterial.textureCoordinateTransform.setter(a1, 49, (void *)0xE100000000000000);
}

uint64_t CustomMaterial.textureCoordinateTransform.setter(uint64_t a1, uint64_t a2, void *a3)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a2, a3, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t (*CustomMaterial.secondaryTextureCoordinateTransform.modify(float32x2_t *a1))(uint64_t a1, uint64_t a2)
{
  float32x2_t v1;

  a1[3] = v1;
  specialized Material.getUVTransform(withSuffix:)(49, (void *)0xE100000000000000, a1);
  return CustomMaterial.secondaryTextureCoordinateTransform.modify;
}

uint64_t CustomMaterial.secondaryTextureCoordinateTransform.modify(uint64_t a1, uint64_t a2)
{
  return CustomMaterial.textureCoordinateTransform.modify(a1, a2, 49, (void *)0xE100000000000000);
}

uint64_t CustomMaterial.textureCoordinateTransform.modify(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a3, a4, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

double key path getter for CustomMaterial.custom : CustomMaterial@<D0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  double result;
  uint64_t v5;
  __int32 v6;
  _QWORD v7[5];
  int8x16_t v8;
  uint64_t v9;
  __int32 v10;

  v7[3] = &type metadata for CustomMaterial;
  v7[4] = &protocol witness table for CustomMaterial;
  v7[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v7[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v7, &v8);
  result = *(double *)v8.i64;
  v5 = v9;
  v6 = v10;
  *a2 = v8;
  a2[1].i64[0] = v5;
  a2[1].i32[2] = v6;
  return result;
}

uint64_t key path setter for CustomMaterial.custom : CustomMaterial(__n128 *a1)
{
  int v1;
  uint64_t v2;
  __n128 v4;

  v4 = *a1;
  v1 = a1[1].n128_i32[2];
  v2 = swift_retain();
  specialized Material.setParameter<A>(_:alternateTintKey:)(v2, v1, v4);
  return swift_release();
}

uint64_t CustomMaterial.custom.setter(__n128 *a1)
{
  specialized Material.setParameter<A>(_:alternateTintKey:)(a1[1].n128_i64[0], a1[1].n128_i32[2], *a1);
  return swift_release();
}

void (*CustomMaterial.custom.modify(int8x16_t **a1))(__n128 **a1, char a2)
{
  uint64_t v1;
  int8x16_t *v3;
  _QWORD v5[5];

  v3 = (int8x16_t *)malloc(0x28uLL);
  *a1 = v3;
  v3[2].i64[0] = v1;
  v5[3] = &type metadata for CustomMaterial;
  v5[4] = &protocol witness table for CustomMaterial;
  v5[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(v1, v5[0] + 16);
  CustomMaterial.Custom.init(material:alternateTintKey:)(v5, v3);
  return CustomMaterial.custom.modify;
}

void CustomMaterial.custom.modify(__n128 **a1, char a2)
{
  __n128 *v2;
  __n128 v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v2 = *a1;
  v3 = **a1;
  v4 = (*a1)[1].n128_i32[2];
  v5 = (*a1)[1].n128_i64[0];
  if ((a2 & 1) != 0)
  {
    v7 = v3;
    v6 = swift_retain();
    specialized Material.setParameter<A>(_:alternateTintKey:)(v6, v4, v7);
    swift_release();
  }
  else
  {
    specialized Material.setParameter<A>(_:alternateTintKey:)(v5, v4, v3);
  }
  swift_release();
  free(v2);
}

unint64_t one-time initialization function for shaderCacheRegistry()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<CustomMaterial.CustomShaderParameters>>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static CustomMaterial.shaderCacheRegistry = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<PhysicallyBasedMaterial.PBRShaderParameters>>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static PhysicallyBasedMaterial.shaderCacheRegistry = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssetServiceScopedRegistry<ShaderCache<UnlitMaterial.UnlitShaderParameters>>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v1;
  result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  *(_QWORD *)(v0 + 24) = result;
  static UnlitMaterial.shaderCacheRegistry = v0;
  return result;
}

uint64_t CustomMaterial.shaderCache.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];

  if (*(_QWORD *)(v0 + 144))
  {
    v1 = *(_QWORD *)(v0 + 144);
  }
  else
  {
    v2 = v0;
    if (one-time initialization token for shaderCacheRegistry != -1)
      swift_once();
    CustomMaterial.assetService.getter((uint64_t)v4);
    v1 = specialized AssetServiceScopedRegistry.instance(for:)(v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    swift_retain();
    swift_release();
    *(_QWORD *)(v2 + 144) = v1;
  }
  swift_retain();
  return v1;
}

unint64_t CustomMaterial.CustomShaderParameters.materialPath.getter()
{
  __int16 *v0;
  __int16 v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *v0;
  if ((*v0 & 4) != 0)
  {
    if ((v1 & 1) != 0)
      return 0xD000000000000034;
    else
      return 0xD000000000000029;
  }
  else
  {
    v2 = 0xD000000000000032;
    if ((v1 & 1) != 0)
      v2 = 0xD00000000000003DLL;
    if ((v1 & 8) == 0)
      v2 = 0xD000000000000029;
    v3 = 0xD000000000000039;
    if ((v1 & 1) == 0)
      v3 = 0xD00000000000002ELL;
    if ((v1 & 2) != 0)
      return v3;
    else
      return v2;
  }
}

unint64_t CustomMaterial.CustomShaderParameters.functionConstants.getter()
{
  unsigned __int16 *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, __MaterialResource.BuildParameters.Value)>);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_21BE58850;
  *(_QWORD *)(v2 + 32) = 0xD000000000000026;
  *(_QWORD *)(v2 + 40) = 0x800000021BE8EE30;
  *(_QWORD *)(v2 + 48) = (v1 >> 9) & 1;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 80) = 0xD000000000000018;
  *(_QWORD *)(v2 + 88) = 0x800000021BE8EF50;
  *(_QWORD *)(v2 + 96) = (v1 >> 5) & 1;
  *(_QWORD *)(v2 + 104) = 0;
  *(_BYTE *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 128) = 0xD000000000000012;
  *(_QWORD *)(v2 + 136) = 0x800000021BE8EF70;
  v3 = (v1 >> 6) & 1;
  *(_QWORD *)(v2 + 144) = v3;
  *(_QWORD *)(v2 + 152) = 0;
  *(_BYTE *)(v2 + 160) = 1;
  *(_QWORD *)(v2 + 176) = 0xD000000000000018;
  *(_QWORD *)(v2 + 184) = 0x800000021BE8EF90;
  *(_QWORD *)(v2 + 192) = v3;
  *(_QWORD *)(v2 + 200) = 0;
  *(_BYTE *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 224) = 0x6C6E55686374614DLL;
  *(_QWORD *)(v2 + 232) = 0xEF726F6C6F437469;
  *(_QWORD *)(v2 + 240) = (v1 >> 7) & 1;
  *(_QWORD *)(v2 + 248) = 0;
  *(_BYTE *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 272) = 0xD000000000000018;
  *(_QWORD *)(v2 + 280) = 0x800000021BE8EFB0;
  *(_QWORD *)(v2 + 288) = (v1 >> 8) & 1;
  *(_QWORD *)(v2 + 296) = 0;
  *(_BYTE *)(v2 + 304) = 0;
  *(_QWORD *)(v2 + 320) = 0xD000000000000019;
  *(_QWORD *)(v2 + 328) = 0x800000021BE8EFD0;
  *(_QWORD *)(v2 + 336) = (v1 >> 4) & 1;
  *(_QWORD *)(v2 + 344) = 0;
  *(_BYTE *)(v2 + 352) = 1;
  *(_QWORD *)(v2 + 368) = 0xD00000000000001CLL;
  *(_QWORD *)(v2 + 376) = 0x800000021BE8EFF0;
  *(_QWORD *)(v2 + 384) = (v1 >> 12) & 1;
  *(_QWORD *)(v2 + 392) = 0;
  *(_BYTE *)(v2 + 400) = 0;
  return specialized Dictionary.init(dictionaryLiteral:)(v2);
}

void CustomMaterial.CustomShaderParameters.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 v6;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(unsigned __int8 *)(v0 + 18);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 88);
  Hasher._combine(_:)(*(_WORD *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 2)
    {
LABEL_3:
      v6 = v3 & 1;
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (v3 != 2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_6:
  Hasher._combine(_:)(v6);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    __MaterialResource.CoreMaterialFunction.hash(into:)();
    if (v5)
    {
LABEL_8:
      Hasher._combine(_:)(1u);
      __MaterialResource.CoreMaterialFunction.hash(into:)();
      return;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v5)
      goto LABEL_8;
  }
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CustomMaterial.CustomShaderParameters()
{
  Hasher.init(_seed:)();
  CustomMaterial.CustomShaderParameters.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.CustomShaderParameters()
{
  Hasher.init(_seed:)();
  CustomMaterial.CustomShaderParameters.hash(into:)();
  return Hasher._finalize()();
}

uint64_t CustomMaterial.__triangleFillMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t CustomMaterial.__triangleFillMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = result;
  return result;
}

uint64_t (*CustomMaterial.__triangleFillMode.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

unsigned __int8 *CustomMaterial.triangleFillMode.setter(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = *result;
  return result;
}

unsigned __int8 *(*CustomMaterial.triangleFillMode.modify(uint64_t a1))(unsigned __int8 *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_QWORD *)(v1 + 320) == 1;
  return CustomMaterial.triangleFillMode.modify;
}

unsigned __int8 *CustomMaterial.triangleFillMode.modify(unsigned __int8 *result)
{
  *(_QWORD *)(*(_QWORD *)result + 320) = result[8];
  return result;
}

uint64_t (*CustomMaterial.__writesDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t (*CustomMaterial.__readsDepthInternal.modify())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__triangleFillMode.getter in conformance CustomMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t protocol witness for Material.__triangleFillMode.setter in conformance CustomMaterial(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = result;
  return result;
}

uint64_t (*protocol witness for Material.__triangleFillMode.modify in conformance CustomMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__writesDepthInternal.getter in conformance CustomMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 328);
}

uint64_t protocol witness for Material.__writesDepthInternal.setter in conformance CustomMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 328) = result;
  return result;
}

uint64_t (*protocol witness for Material.__writesDepthInternal.modify in conformance CustomMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__readsDepthInternal.getter in conformance CustomMaterial()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 329);
}

uint64_t protocol witness for Material.__readsDepthInternal.setter in conformance CustomMaterial(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 329) = result;
  return result;
}

uint64_t (*protocol witness for Material.__readsDepthInternal.modify in conformance CustomMaterial())(_QWORD, _QWORD)
{
  return destructiveProjectEnumData for __RKEntityInteractionsComponent.Registration.RegistrationError;
}

uint64_t protocol witness for Material.__faceCullMode.getter in conformance CustomMaterial()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t protocol witness for Material.__faceCullMode.setter in conformance CustomMaterial(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 40) = result;
  *(_BYTE *)(v2 + 48) = a2 & 1;
  return result;
}

uint64_t protocol witness for Material.__requiresUnmanagedVideoComponent.getter in conformance CustomMaterial()
{
  uint64_t v0;

  return (*(unsigned __int16 *)(v0 + 152) >> 5) & 1;
}

uint64_t CustomMaterial.writesDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 328);
}

uint64_t CustomMaterial.writesDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 328) = result;
  return result;
}

_BYTE *(*CustomMaterial.writesDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 328);
  return CustomMaterial.writesDepth.modify;
}

_BYTE *CustomMaterial.writesDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 328) = result[8];
  return result;
}

uint64_t CustomMaterial.readsDepth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 329);
}

uint64_t CustomMaterial.readsDepth.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 329) = result;
  return result;
}

_BYTE *(*CustomMaterial.readsDepth.modify(uint64_t a1))(_BYTE *result)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 329);
  return CustomMaterial.readsDepth.modify;
}

_BYTE *CustomMaterial.readsDepth.modify(_BYTE *result)
{
  *(_BYTE *)(*(_QWORD *)result + 329) = result[8];
  return result;
}

uint64_t CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1, a2, a3, a4, a5, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:), a6);
}

uint64_t CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  return CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1, a2, a3, a4, a5, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:), a6);
}

uint64_t CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *(*a6)(uint64_t *__return_ptr, _QWORD *)@<X5>, uint64_t a7@<X8>)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  id v18;
  id v19;
  id v20;
  _QWORD v21[4];
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v21[2] = a3;
  v21[3] = a4;
  v11 = specialized String.withCString<A>(_:)(a6, (uint64_t)v21, a3, a4);
  swift_bridgeObjectRelease();
  if (v11)
  {
    swift_bridgeObjectRetain();
    v12 = specialized static __ServiceLocator.shared.getter() + 40;
    swift_beginAccess();
    result = outlined init with copy of (Int, URL)(v12, (uint64_t)&v22, &demangling cache variable for type metadata for __RenderService?);
    if (!v23)
    {
      __break(1u);
      return result;
    }
    outlined init with take of BindableDataInternal(&v22, (uint64_t)v24);
    v14 = v25;
    v15 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v15 + 24))(v14, v15);
    v16 = (id)REShaderLibraryAssetGetMetalLibrary();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    if (v16)
    {
      v17 = a5 & 1;
      v18 = objc_allocWithZone(MEMORY[0x24BDDD5A0]);
      swift_unknownObjectRetain();
      v19 = objc_msgSend(v18, sel_init);
      swift_bridgeObjectRetain();
      v20 = v19;
      swift_bridgeObjectRelease();
      *(_QWORD *)a7 = a1;
      *(_QWORD *)(a7 + 8) = a2;
      *(_QWORD *)(a7 + 16) = v16;
      *(_QWORD *)(a7 + 24) = v11;
      *(_QWORD *)(a7 + 32) = v20;
      *(_BYTE *)(a7 + 40) = v17;

      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  result = swift_bridgeObjectRelease();
  *(_OWORD *)(a7 + 25) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  return result;
}

uint64_t closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssetHandle;
  uint64_t result;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v2 = specialized static __ServiceLocator.shared.getter() + 120;
  swift_beginAccess();
  outlined init with copy of __REAssetService(v2, (uint64_t)v7);
  v3 = v8;
  v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  String.utf8CString.getter();
  AssetHandle = REAssetManagerCreateAssetHandle();
  swift_release();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  *a1 = AssetHandle;
  return result;
}

uint64_t CustomMaterial.clearcoatNormal.getter()
{
  return CustomMaterial.baseColor.getter((uint64_t (*)(_QWORD *, _QWORD, _QWORD))CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:));
}

_QWORD *key path getter for CustomMaterial.normal : CustomMaterial@<X0>(uint64_t a1@<X0>, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD)@<X3>, uint64_t a3@<X8>)
{
  _QWORD *result;
  int v7;
  _QWORD v8[5];
  uint64_t v9;
  int v10;

  v8[3] = &type metadata for CustomMaterial;
  v8[4] = &protocol witness table for CustomMaterial;
  v8[0] = swift_allocObject();
  outlined init with copy of CustomMaterial(a1, v8[0] + 16);
  result = a2(&v9, v8, 0, 0);
  v7 = v10;
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v7;
  return result;
}

uint64_t key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = swift_retain();
  a5(v7, v6, 0, 0);
  return swift_release();
}

uint64_t CustomMaterial.clearcoatNormal.setter(uint64_t a1)
{
  return CustomMaterial.ambientOcclusion.setter(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t CustomMaterial.ambientOcclusion.setter(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, 0);
  return swift_release();
}

void (*CustomMaterial.clearcoatNormal.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[8];
  unsigned __int8 v24;
  _QWORD v25[8];
  unsigned __int8 v26;

  v3 = malloc(0x2B8uLL);
  *a1 = v3;
  v4 = (uint64_t)(v3 + 42);
  v3[86] = v1;
  outlined init with copy of CustomMaterial(v1, (uint64_t)v3);
  v5 = (void *)v3[4];
  swift_bridgeObjectRetain_n();
  v6 = v5;
  swift_bridgeObjectRetain_n();
  v7 = v6;
  specialized String.withCString<A>(_:)(0xD000000000000016, 0x800000021BE86170, v7, (uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v8 = v23[1];
  v21 = v23[2];
  v22 = (void *)v23[0];
  v9 = v23[4];
  v20 = v23[3];
  v11 = v23[5];
  v10 = v23[6];
  v12 = v23[7];
  v13 = v24;
  outlined init with copy of CustomMaterial((uint64_t)v3, (uint64_t)(v3 + 42));
  if (v13 == 255)
  {
    swift_retain();
    __MaterialResource.subscript.getter((uint64_t)v25);
    swift_release();
    outlined destroy of CustomMaterial(v4);
    v14 = (void *)v25[0];
    v8 = v25[1];
    v15 = v25[2];
    v16 = v25[3];
    v9 = v25[4];
    v11 = v25[5];
    v10 = v25[6];
    v12 = v25[7];
    v13 = v26;
    if (v26 == 255)
    {
LABEL_7:
      v8 = 0;
      v18 = 0;
      goto LABEL_8;
    }
  }
  else
  {
    outlined destroy of CustomMaterial(v4);
    v15 = v21;
    v14 = v22;
    v16 = v20;
  }
  if (v13 != 1)
  {
    outlined consume of __RKMaterialParameterBlock.Parameter?(v14, v8, v15, v16, v9, v11, v10, v12, v13);
    goto LABEL_7;
  }
  v17 = v14;
  swift_retain();
  outlined consume of __RKMaterialParameterBlock.Parameter?(v17, v8, v15, v16, v9, v11, v10, v12, 1u);
  v18 = 84148994;
LABEL_8:
  v3[84] = v8;
  *((_DWORD *)v3 + 170) = v18;
  outlined destroy of CustomMaterial((uint64_t)v3);
  return CustomMaterial.clearcoatNormal.modify;
}

void CustomMaterial.clearcoatNormal.modify(uint64_t a1, char a2)
{
  CustomMaterial.ambientOcclusion.modify(a1, a2, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

void CustomMaterial.ambientOcclusion.modify(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t, _QWORD, _QWORD))
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  v5 = *(unsigned int *)(*(_QWORD *)a1 + 680);
  if ((a2 & 1) != 0)
  {
    v6 = swift_retain();
    a3(v6, v5, 0, 0);
    swift_release();
  }
  else
  {
    a3(*(_QWORD *)(*(_QWORD *)a1 + 672), v5, 0, 0);
  }
  swift_release();
  free(v4);
}

uint64_t static CustomMaterial.GeometryModifier.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CustomMaterial.GeometryModifier(uint64_t a1, uint64_t *a2)
{
  return specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(a1, a2) & 1;
}

void CustomMaterial.GeometryModifier.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::UInt v4;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 40));
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    v4 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
}

Swift::Int CustomMaterial.GeometryModifier.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::UInt8 v4;
  Swift::UInt v5;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CustomMaterial.GeometryModifier()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::UInt8 v4;
  Swift::UInt v5;

  v2 = *(void **)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v2, sel_hash));
  if (v1)
  {
    v5 = OpaquePointer.hashValue.getter();
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)((Swift::UInt)objc_msgSend(v3, sel_hash));
  return Hasher._finalize()();
}

uint64_t sub_21BCD56E0()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(_QWORD *)(v0 + 80) - 1) >= 2)
    swift_release();
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(v0 + 96), *(void **)(v0 + 104), *(_BYTE *)(v0 + 112));
  if (*(_QWORD *)(v0 + 144))
    __swift_destroy_boxed_opaque_existential_1(v0 + 120);
  swift_release();
  if (*(_QWORD *)(v0 + 208))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(v0 + 256))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if ((unint64_t)(*(_QWORD *)(v0 + 304) - 1) >= 3)
    swift_release();
  return swift_deallocObject();
}

BOOL specialized static CustomMaterial.CustomShaderParameters.== infix(_:_:)(unsigned __int16 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _BOOL8 result;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  char v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;

  if (*a1 != *a2)
    return 0;
  v2 = *((unsigned __int8 *)a1 + 17);
  v3 = *((unsigned __int8 *)a1 + 18);
  v5 = *((_QWORD *)a1 + 3);
  v4 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v6 = *((_QWORD *)a1 + 6);
  v8 = *((_QWORD *)a1 + 7);
  v9 = (void *)*((_QWORD *)a1 + 8);
  v10 = *((_QWORD *)a1 + 9);
  v11 = *((_QWORD *)a1 + 10);
  v12 = *((_QWORD *)a1 + 11);
  v13 = *((_QWORD *)a1 + 12);
  v14 = *((_QWORD *)a1 + 13);
  v15 = (void *)*((_QWORD *)a1 + 14);
  v16 = *((_BYTE *)a2 + 16);
  v17 = *((unsigned __int8 *)a2 + 17);
  v18 = *((unsigned __int8 *)a2 + 18);
  v20 = *((_QWORD *)a2 + 3);
  v19 = *((_QWORD *)a2 + 4);
  v22 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)a2 + 6);
  v23 = *((_QWORD *)a2 + 7);
  v24 = (void *)*((_QWORD *)a2 + 8);
  v78 = *((_QWORD *)a2 + 9);
  v25 = *((_QWORD *)a2 + 11);
  v79 = *((_QWORD *)a2 + 10);
  v26 = *((_QWORD *)a2 + 13);
  v77 = *((_QWORD *)a2 + 12);
  v27 = (void *)*((_QWORD *)a2 + 14);
  if ((a1[8] & 1) != 0)
  {
    if (!*((_BYTE *)a2 + 16))
      return 0;
  }
  else
  {
    if (*((_QWORD *)a1 + 1) != *((_QWORD *)a2 + 1))
      v16 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
  if (v2 == 2)
  {
    if (v17 != 2)
      return 0;
  }
  else
  {
    result = 0;
    if (v17 == 2 || ((v17 ^ v2) & 1) != 0)
      return result;
  }
  if (v3 == 2)
  {
    if (v18 != 2)
      return 0;
LABEL_18:
    v30 = v10;
    if (v7)
    {
      v31 = v7;
      v86 = v5;
      v87 = v4;
      v88 = v7;
      v89 = v6;
      v90 = v8;
      v91 = v9;
      if (v22)
      {
        LOBYTE(v80) = v20;
        v81 = v19;
        v82 = v22;
        v83 = v21;
        v84 = v23;
        v85 = v24;
        v71 = v13;
        v74 = v12;
        v67 = v27;
        v68 = v11;
        v65 = v30;
        v66 = v14;
        v63 = v26;
        v64 = v15;
        v32 = v6;
        v33 = v4;
        v34 = v31;
        v35 = v8;
        outlined copy of __MaterialResource.CoreMaterialFunction?(v5, v4, v31, v6, v8, v9);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v36 = v9;
        v37 = specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(&v86, &v80);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v33, v34, v32, v35, v9);
        v26 = v63;
        v15 = v64;
        v27 = v67;
        v11 = v68;
        v38 = v65;
        v14 = v66;
        v13 = v71;
        v12 = v74;
        if ((v37 & 1) == 0)
          return 0;
        goto LABEL_23;
      }
      v72 = v4;
      v75 = v6;
      v47 = v8;
      swift_bridgeObjectRetain();
      v69 = v47;
      swift_bridgeObjectRetain();
      v48 = v9;
    }
    else
    {
      v69 = v8;
      v72 = v4;
      v75 = v6;
      v38 = v10;
      if (!v22)
      {
LABEL_23:
        if (v12)
        {
          v86 = v38;
          v87 = v11;
          v88 = v12;
          v89 = v13;
          v90 = v14;
          v91 = v15;
          if (v25)
          {
            LOBYTE(v80) = v78;
            v81 = v79;
            v82 = v25;
            v83 = v77;
            v84 = v26;
            v85 = v27;
            v39 = v12;
            v40 = v38;
            v41 = v13;
            v42 = v11;
            v43 = v14;
            v44 = v15;
            outlined copy of __MaterialResource.CoreMaterialFunction?(v38, v11, v12, v13, v14, v15);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v45 = v44;
            v46 = specialized static __MaterialResource.CoreMaterialFunction.== infix(_:_:)(&v86, &v80);

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of __MaterialResource.CoreMaterialFunction?(v40, v42, v39, v41, v43, v44);
            return (v46 & 1) != 0;
          }
          v55 = v38;
          v70 = v11;
          v73 = v13;
          v76 = v12;
          v58 = v15;
          v59 = v14;
          v60 = v26;
          swift_bridgeObjectRetain();
          v56 = v59;
          swift_bridgeObjectRetain();
          v57 = v58;
          v61 = v58;
          v25 = 0;
          v26 = v60;
        }
        else
        {
          v55 = v38;
          v70 = v11;
          v73 = v13;
          v76 = 0;
          v56 = v14;
          v57 = v15;
          if (!v25)
            return 1;
        }
        v62 = v26;
        outlined copy of __MaterialResource.CoreMaterialFunction?(v78, v79, v25, v77, v26, v27);
        outlined consume of __MaterialResource.CoreMaterialFunction?(v55, v70, v76, v73, v56, v57);
        v49 = v78;
        v50 = v79;
        v51 = v25;
        v52 = v77;
        v53 = v62;
        v54 = v27;
LABEL_33:
        outlined consume of __MaterialResource.CoreMaterialFunction?(v49, v50, v51, v52, v53, v54);
        return 0;
      }
    }
    outlined copy of __MaterialResource.CoreMaterialFunction?(v20, v19, v22, v21, v23, v24);
    outlined consume of __MaterialResource.CoreMaterialFunction?(v5, v72, v7, v75, v69, v9);
    v49 = v20;
    v50 = v19;
    v51 = v22;
    v52 = v21;
    v53 = v23;
    v54 = v24;
    goto LABEL_33;
  }
  result = 0;
  v29 = (v3 & 1) == 0;
  if (v18 != 2 && ((v29 ^ v18) & 1) != 0)
    goto LABEL_18;
  return result;
}

uint64_t specialized static CustomMaterial.Descriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v2 = *((_QWORD *)a1 + 2);
  v20 = a1[29];
  v21 = *a1;
  v18 = *a2;
  v19 = a1[40];
  v3 = *((_QWORD *)a2 + 1);
  v4 = *((_QWORD *)a2 + 2);
  v14 = *((_QWORD *)a2 + 4);
  v15 = *((_QWORD *)a1 + 4);
  if (v2 == 2)
    v5 = 0;
  else
    v5 = *((_QWORD *)a1 + 1);
  if (v2 == 2)
    v6 = 0;
  else
    v6 = *((unsigned int *)a1 + 6) | ((unint64_t)a1[28] << 32);
  v16 = a2[29];
  v17 = a2[40];
  if (v4 == 2)
    v7 = 0;
  else
    v7 = *((_QWORD *)a2 + 1);
  if (v4 == 2)
    v8 = 1;
  else
    v8 = *((_QWORD *)a2 + 2);
  if (v4 == 2)
    v9 = 0;
  else
    v9 = *((unsigned int *)a2 + 6) | ((unint64_t)a2[28] << 32);
  outlined copy of CustomMaterial.Blending?(*((_QWORD *)a1 + 1), v2);
  outlined copy of CustomMaterial.Blending?(v3, v4);
  if ((unint64_t)(v2 - 1) >= 2)
  {
    if (v8 != 1)
    {
      outlined consume of __EntityInfoComponent?(v7, v8);
      outlined consume of __EntityInfoComponent?(v5, v2);
      v10 = ((v9 ^ v6) >> 32) & 1;
      goto LABEL_24;
    }
    v11 = v5;
    v12 = v2;
LABEL_22:
    outlined consume of __EntityInfoComponent?(v11, v12);
    return 0;
  }
  if (v8 != 1)
  {
    v11 = v7;
    v12 = v8;
    goto LABEL_22;
  }
  LODWORD(v10) = 0;
LABEL_24:
  if (v21 != v18)
    LODWORD(v10) = 1;
  if (v20 != v16)
    LODWORD(v10) = 1;
  if (((v10 | v19) & 1) != 0)
    return v17 & ~(_DWORD)v10;
  else
    return (v15 == v14) & ~v17;
}

uint64_t specialized static CustomMaterial.SurfaceShader.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  id v11;
  id v12;
  char v13;

  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if ((v2 = *(void **)(a1 + 16),
          v4 = *(_QWORD *)(a1 + 24),
          v3 = *(void **)(a1 + 32),
          v5 = *a2,
          v6 = a2[1],
          v8 = a2[3],
          v7 = (void *)a2[4],
          *(_QWORD *)a1 == *a2)
      && *(_QWORD *)(a1 + 8) == v6
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_unknownObjectRetain();
      v9 = (void *)MEMORY[0x220768C3C](v5, v6);
      v10 = objc_msgSend(v2, sel_isEqual_, v9);
      swift_unknownObjectRelease();

      if (v10)
      {
        if (v4)
        {
          if (v8 && v4 == v8)
            goto LABEL_9;
        }
        else if (!v8)
        {
LABEL_9:
          type metadata accessor for NSObject();
          v11 = v3;
          v12 = v7;
          v13 = static NSObject.== infix(_:_:)();

          return v13 & 1;
        }
      }
    }
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError;
  if (!lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterialError, &type metadata for CustomMaterialError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError;
  if (!lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterialError, &type metadata for CustomMaterialError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialError and conformance CustomMaterialError);
  }
  return result;
}

void specialized static CustomMaterial.ensureFunctionsExist(surfaceShader:geometryModifier:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  _QWORD *v11;
  id v12;
  _QWORD *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a1;
  v2 = a1[1];
  v4 = (void *)a1[2];
  v5 = a2[1];
  if (v5)
  {
    v16 = *a1;
    v6 = *a2;
    v7 = (void *)a2[2];
    v17 = a2[3];
    v8 = (void *)a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    v9 = v8;
    v10 = objc_msgSend(v7, sel_functionNames);
    v11 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v10) = specialized Sequence<>.contains(_:)(v6, v5, v11);
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
      swift_allocError();
      *v15 = 0;
      swift_willThrow();
      outlined consume of CustomMaterial.GeometryModifier?(v6, v5, (uint64_t)v7, v17, v8);
      return;
    }
    outlined consume of CustomMaterial.GeometryModifier?(v6, v5, (uint64_t)v7, v17, v8);
    v3 = v16;
  }
  v12 = objc_msgSend(v4, sel_functionNames, v16);
  v13 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v12) = specialized Sequence<>.contains(_:)(v3, v2, v13);
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    lazy protocol witness table accessor for type CustomMaterialError and conformance CustomMaterialError();
    swift_allocError();
    *v14 = 1;
    swift_willThrow();
  }
}

uint64_t partial apply for closure #1 in closure #1 in CustomMaterial.SurfaceShader.init(named:libraryAssetPath:linkSPI:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in CustomMaterial.GeometryModifier.init(named:libraryAssetPath:linkSPI:)(a1);
}

unint64_t lazy protocol witness table accessor for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI;
  if (!lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterialErrorSPI, &type metadata for CustomMaterialErrorSPI);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterialErrorSPI and conformance CustomMaterialErrorSPI);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel;
  if (!lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.LightingModel, &type metadata for CustomMaterial.LightingModel);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.LightingModel and conformance CustomMaterial.LightingModel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor.AttributeSet, &type metadata for CustomMaterial.Descriptor.AttributeSet);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.AttributeSet and conformance CustomMaterial.Descriptor.AttributeSet);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor.FunctionConstantOptions, &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor.FunctionConstantOptions, &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor.FunctionConstantOptions, &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor.FunctionConstantOptions, &type metadata for CustomMaterial.Descriptor.FunctionConstantOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor.FunctionConstantOptions and conformance CustomMaterial.Descriptor.FunctionConstantOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor;
  if (!lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.Descriptor, &type metadata for CustomMaterial.Descriptor);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.Descriptor and conformance CustomMaterial.Descriptor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.CustomShaderParameters, &type metadata for CustomMaterial.CustomShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.CustomShaderParameters, &type metadata for CustomMaterial.CustomShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters;
  if (!lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.CustomShaderParameters, &type metadata for CustomMaterial.CustomShaderParameters);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.CustomShaderParameters and conformance CustomMaterial.CustomShaderParameters);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier;
  if (!lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.GeometryModifier, &type metadata for CustomMaterial.GeometryModifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.GeometryModifier and conformance CustomMaterial.GeometryModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader;
  if (!lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader)
  {
    result = MEMORY[0x220772E3C](&protocol conformance descriptor for CustomMaterial.SurfaceShader, &type metadata for CustomMaterial.SurfaceShader);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomMaterial.SurfaceShader and conformance CustomMaterial.SurfaceShader);
  }
  return result;
}

uint64_t sub_21BCD63E4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_21BCD63F0()
{
  uint64_t v0;

  v0 = swift_unknownObjectRetain();
  return CustomMaterial.SurfaceShader.library.setter(v0);
}

uint64_t sub_21BCD6418@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_21BCD6424(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  return CustomMaterial.SurfaceShader.libraryAsset.setter(&v2);
}

_QWORD *sub_21BCD6458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.baseColor : CustomMaterial(a1, (_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.BaseColor.init(material:alternateTintKey:), a2);
}

void sub_21BCD6474(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CustomMaterial.baseColor : CustomMaterial(a1, a2, a3, a4, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_21BCD6490@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.Metallic.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD64AC(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_21BCD64C8@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.Roughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD64E4(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

_QWORD *sub_21BCD6500@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.baseColor : CustomMaterial(a1, (_QWORD *(*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.EmissiveColor.init(material:alternateTintKey:), a2);
}

void sub_21BCD651C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  key path setter for CustomMaterial.baseColor : CustomMaterial(a1, a2, a3, a4, (void (*)(void))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_21BCD6538@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.Specular.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD6554(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

uint64_t sub_21BCD6578@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;

  if ((*(_BYTE *)(result + 48) & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(result + 40);
    if (v2 >= 3)
      LOBYTE(v2) = 2;
    *a2 = v2;
  }
  return result;
}

unsigned __int8 *sub_21BCD659C(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) = *result;
  *(_BYTE *)(a2 + 48) = 0;
  return result;
}

double sub_21BCD65AC@<D0>(uint64_t a1@<X8>)
{
  int v2;
  char v3;
  double result;
  __int128 v5;
  int v6;
  char v7;

  CustomMaterial.blending.getter((uint64_t)&v5);
  v2 = v6;
  v3 = v7;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_BYTE *)(a1 + 20) = v3;
  *(_DWORD *)(a1 + 16) = v2;
  return result;
}

void sub_21BCD65F4(__int128 *a1)
{
  int v1;
  char v2;
  __int128 v3;
  int v4;
  char v5;

  v1 = *((_DWORD *)a1 + 4);
  v2 = *((_BYTE *)a1 + 20);
  v3 = *a1;
  v5 = v2;
  v4 = v1;
  CustomMaterial.process(blending:doShaderUpdate:)((uint64_t)&v3, 1);
}

_QWORD *sub_21BCD663C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.Normal.init(material:alternateTintKey:), a2);
}

_QWORD *sub_21BCD665C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.AmbientOcclusion.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD6678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_21BCD6694@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.Clearcoat.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD66B0(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

float sub_21BCD66CC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.metallic : CustomMaterial(a1, (void (*)(_QWORD *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.ClearcoatRoughness.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD66E8(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.metallic : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD, float))specialized Material.setParameter<A>(_:alternateTintKey:));
}

double sub_21BCD6704@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_51Tm(0, (void *)0xE000000000000000, a1);
}

uint64_t sub_21BCD6710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_52Tm(a1, a2, a3, a4, 0, (void *)0xE000000000000000);
}

double sub_21BCD671C@<D0>(float32x2_t *a1@<X8>)
{
  return keypath_get_51Tm(49, (void *)0xE100000000000000, a1);
}

double keypath_get_51Tm@<D0>(uint64_t a1@<X3>, void *a2@<X4>, float32x2_t *a3@<X8>)
{
  double result;
  float32x2_t v5;
  __int32 v6;
  float32x2_t v7[2];
  __int32 v8;

  specialized Material.getUVTransform(withSuffix:)(a1, a2, v7);
  result = *(double *)v7;
  v5 = v7[1];
  v6 = v8;
  *a3 = v7[0];
  a3[1] = v5;
  a3[2].i32[0] = v6;
  return result;
}

uint64_t sub_21BCD6770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_52Tm(a1, a2, a3, a4, 49, (void *)0xE100000000000000);
}

uint64_t keypath_set_52Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return specialized Material.setUVTransform(_:withSuffix:)(a5, a6, *(double *)a1, *(double *)(a1 + 8), *(float *)(a1 + 16));
}

uint64_t sub_21BCD67B4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 320) == 1;
  return result;
}

unsigned __int8 *sub_21BCD67C8(unsigned __int8 *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 320) = *result;
  return result;
}

uint64_t sub_21BCD67D4@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 328);
  return result;
}

_BYTE *sub_21BCD67E0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 328) = *result;
  return result;
}

uint64_t sub_21BCD67EC@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 329);
  return result;
}

_BYTE *sub_21BCD67F8(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 329) = *result;
  return result;
}

_QWORD *sub_21BCD6804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CustomMaterial.normal : CustomMaterial(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *, _QWORD, _QWORD))CustomMaterial.ClearcoatNormal.init(material:alternateTintKey:), a2);
}

uint64_t sub_21BCD6820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CustomMaterial.ambientOcclusion : CustomMaterial(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))specialized Material.setParameter<A>(_:alternateTintKey:));
}

ValueMetadata *type metadata accessor for CustomMaterialError()
{
  return &type metadata for CustomMaterialError;
}

ValueMetadata *type metadata accessor for CustomMaterialErrorSPI()
{
  return &type metadata for CustomMaterialErrorSPI;
}

uint64_t dispatch thunk of MaterialFunction.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MaterialFunction.name.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MaterialFunction.name.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MaterialFunction.library.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MaterialFunction.library.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MaterialFunction.library.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MaterialFunction.constantValues.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of MaterialFunction.__linkSPI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t destroy for CustomMaterial(uint64_t a1)
{
  uint64_t result;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((unint64_t)(*(_QWORD *)(a1 + 64) - 1) >= 2)
    swift_release();
  outlined consume of CustomMaterial.CustomUniformsState(*(void **)(a1 + 80), *(void **)(a1 + 88), *(_BYTE *)(a1 + 96));
  if (*(_QWORD *)(a1 + 128))
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  swift_release();
  if (*(_QWORD *)(a1 + 192))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  if (*(_QWORD *)(a1 + 240))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
  result = *(_QWORD *)(a1 + 288);
  if ((unint64_t)(result - 1) >= 3)
    return swift_release();
  return result;
}

uint64_t initializeWithCopy for CustomMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  char v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = (_OWORD *)(a1 + 56);
  v7 = a2 + 56;
  v8 = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = v5;
  if (v8 == 1 || v8 == 2)
  {
    *v6 = *(_OWORD *)v7;
    *(_QWORD *)(a1 + 69) = *(_QWORD *)(v7 + 13);
  }
  else
  {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = v8;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    swift_retain();
  }
  v10 = *(void **)(a2 + 80);
  v11 = *(void **)(a2 + 88);
  v12 = *(_BYTE *)(a2 + 96);
  outlined copy of CustomMaterial.CustomUniformsState(v10, v11, v12);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 96) = v12;
  v13 = (_OWORD *)(a1 + 104);
  v14 = (_OWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 128);
  if (v15)
  {
    v16 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = v15;
    *(_QWORD *)(a1 + 136) = v16;
    (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
  }
  else
  {
    v17 = *(_OWORD *)(a2 + 120);
    *v13 = *v14;
    *(_OWORD *)(a1 + 120) = v17;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  }
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
  v18 = *(_QWORD *)(a2 + 192);
  swift_retain();
  if (v18)
  {
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = v18;
    v19 = *(_QWORD *)(a2 + 208);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = v19;
    v20 = *(void **)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = v20;
    v22 = *(_QWORD *)(a2 + 240);
    if (v22)
    {
LABEL_10:
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v22;
      v23 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v23;
      v24 = *(void **)(a2 + 264);
      *(_QWORD *)(a1 + 264) = v24;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v25 = v24;
      goto LABEL_13;
    }
  }
  else
  {
    v26 = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 192) = v26;
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    v22 = *(_QWORD *)(a2 + 240);
    if (v22)
      goto LABEL_10;
  }
  v27 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v27;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
LABEL_13:
  v28 = *(_QWORD *)(a2 + 288);
  if (v28 == 3)
  {
    v29 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v29;
    *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
  }
  else
  {
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    if (v28 == 1 || v28 == 2)
    {
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 293) = *(_QWORD *)(a2 + 293);
    }
    else
    {
      *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 288) = v28;
      *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
      *(_BYTE *)(a1 + 300) = *(_BYTE *)(a2 + 300);
      swift_retain();
    }
    *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
    *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
    *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
    *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  return a1;
}

uint64_t assignWithCopy for CustomMaterial(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  _OWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE *v48;
  _OWORD *v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 *v59;
  __int128 *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 32);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = (_OWORD *)(a1 + 56);
  v9 = (_OWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10 == 2)
  {
    if (v11 == 1 || v11 == 2)
      goto LABEL_4;
LABEL_9:
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
    swift_retain();
    goto LABEL_13;
  }
  if (v11 == 2)
  {
    outlined destroy of CustomMaterial.Blending(a1 + 56);
LABEL_12:
    v13 = *(_QWORD *)(a2 + 69);
    *v8 = *v9;
    *(_QWORD *)(a1 + 69) = v13;
    goto LABEL_13;
  }
  if (v10 == 1)
  {
    if (v11 == 1)
    {
LABEL_4:
      v12 = *v9;
      *(_QWORD *)(a1 + 69) = *(_QWORD *)(a2 + 69);
      *v8 = v12;
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  if (v11 == 1)
  {
    outlined destroy of BodyTrackingComponent?(a1 + 56, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
LABEL_13:
  v14 = *(void **)(a2 + 80);
  v15 = *(void **)(a2 + 88);
  v16 = *(_BYTE *)(a2 + 96);
  outlined copy of CustomMaterial.CustomUniformsState(v14, v15, v16);
  v17 = *(void **)(a1 + 80);
  v18 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v19 = *(_BYTE *)(a1 + 96);
  *(_BYTE *)(a1 + 96) = v16;
  outlined consume of CustomMaterial.CustomUniformsState(v17, v18, v19);
  v20 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v20)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
      goto LABEL_20;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  }
  else if (v20)
  {
    *(_QWORD *)(a1 + 128) = v20;
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    (**(void (***)(uint64_t, uint64_t))(v20 - 8))(a1 + 104, a2 + 104);
    goto LABEL_20;
  }
  v21 = *(_OWORD *)(a2 + 104);
  v22 = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 104) = v21;
  *(_OWORD *)(a1 + 120) = v22;
LABEL_20:
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
  v23 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v23;
  *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
  *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
  v24 = (_OWORD *)(a1 + 176);
  v25 = (_OWORD *)(a2 + 176);
  v26 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 192))
  {
    if (v26)
    {
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v27 = *(void **)(a2 + 216);
      v28 = *(void **)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v27;
      v29 = v27;

    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 176);
      v33 = *(_OWORD *)(a2 + 192);
      v32 = *(_OWORD *)(a2 + 208);
      *v24 = *v25;
      *(_OWORD *)(a1 + 192) = v33;
      *(_OWORD *)(a1 + 208) = v32;
    }
  }
  else if (v26)
  {
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
    *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
    v30 = *(void **)(a2 + 216);
    *(_QWORD *)(a1 + 216) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = v30;
  }
  else
  {
    v34 = *v25;
    v35 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v35;
    *v24 = v34;
  }
  v36 = (_OWORD *)(a1 + 224);
  v37 = (_OWORD *)(a2 + 224);
  v38 = *(_QWORD *)(a2 + 240);
  if (*(_QWORD *)(a1 + 240))
  {
    if (v38)
    {
      *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v39 = *(void **)(a2 + 264);
      v40 = *(void **)(a1 + 264);
      *(_QWORD *)(a1 + 264) = v39;
      v41 = v39;

    }
    else
    {
      outlined destroy of __MaterialResource.CoreMaterialFunction(a1 + 224);
      v45 = *(_OWORD *)(a2 + 240);
      v44 = *(_OWORD *)(a2 + 256);
      *v36 = *v37;
      *(_OWORD *)(a1 + 240) = v45;
      *(_OWORD *)(a1 + 256) = v44;
    }
  }
  else if (v38)
  {
    *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v42 = *(void **)(a2 + 264);
    *(_QWORD *)(a1 + 264) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v43 = v42;
  }
  else
  {
    v46 = *v37;
    v47 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v47;
    *v36 = v46;
  }
  v48 = (_BYTE *)(a2 + 300);
  v49 = (_OWORD *)(a1 + 272);
  v50 = (_OWORD *)(a2 + 272);
  v51 = *(_QWORD *)(a1 + 288);
  v52 = *(_QWORD *)(a2 + 288);
  if (v51 != 3)
  {
    if (v52 == 3)
    {
      outlined destroy of CustomMaterial.Descriptor(a1 + 272);
      v55 = *(_OWORD *)(a2 + 298);
      v56 = *(_OWORD *)(a2 + 288);
      *v49 = *v50;
      *(_OWORD *)(a1 + 288) = v56;
      *(_OWORD *)(a1 + 298) = v55;
      goto LABEL_56;
    }
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    v59 = (__int128 *)(a1 + 280);
    v60 = (__int128 *)(a2 + 280);
    v61 = *(_QWORD *)(a2 + 288);
    if (v51 == 2)
    {
      if (v61 != 1 && v61 != 2)
        goto LABEL_51;
      goto LABEL_45;
    }
    if (v61 == 2)
    {
      outlined destroy of CustomMaterial.Blending(a1 + 280);
    }
    else
    {
      if (v51 == 1)
      {
        if (v61 != 1)
          goto LABEL_51;
LABEL_45:
        v62 = *v60;
        *(_QWORD *)(a1 + 293) = *(_QWORD *)(a2 + 293);
        *v59 = v62;
        goto LABEL_55;
      }
      if (v61 != 1)
      {
        *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
        *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
        swift_retain();
        swift_release();
        *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
        *(_BYTE *)(a1 + 297) = *(_BYTE *)(a2 + 297);
        *(_BYTE *)(a1 + 298) = *(_BYTE *)(a2 + 298);
        *(_BYTE *)(a1 + 299) = *(_BYTE *)(a2 + 299);
        *(_BYTE *)(a1 + 300) = *v48;
        goto LABEL_55;
      }
      outlined destroy of BodyTrackingComponent?(a1 + 280, &demangling cache variable for type metadata for (opacity: CustomMaterial.Opacity));
    }
    v63 = *(_QWORD *)(a2 + 293);
    *v59 = *v60;
    *(_QWORD *)(a1 + 293) = v63;
    goto LABEL_55;
  }
  if (v52 != 3)
  {
    *(_BYTE *)(a1 + 272) = *(_BYTE *)(a2 + 272);
    v57 = *(_QWORD *)(a2 + 288);
    if (v57 == 1 || v57 == 2)
    {
      v58 = *(_OWORD *)(a2 + 280);
      *(_QWORD *)(a1 + 293) = *(_QWORD *)(a2 + 293);
      *(_OWORD *)(a1 + 280) = v58;
LABEL_55:
      *(_BYTE *)(a1 + 301) = *(_BYTE *)(a2 + 301);
      v64 = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
      *(_QWORD *)(a1 + 304) = v64;
      *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
      goto LABEL_56;
    }
LABEL_51:
    *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
    *(_BYTE *)(a1 + 300) = *v48;
    swift_retain();
    goto LABEL_55;
  }
  v53 = *v50;
  v54 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 298) = *(_OWORD *)(a2 + 298);
  *v49 = v53;
  *(_OWORD *)(a1 + 288) = v54;
LABEL_56:
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_BYTE *)(a1 + 329) = *(_BYTE *)(a2 + 329);
  return a1;
}

