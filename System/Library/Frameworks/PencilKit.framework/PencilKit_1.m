void sub_1BE386650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24)
{
  __p = &a20;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void ClipperLib::MinkowskiSum(uint64_t *a1, _QWORD *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t (**v5)(ClipperLib::Clipper *__hidden);
  void *v6[2];
  void *v7[2];
  __int128 v8;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  void (**v16)(ClipperLib::Clipper *__hidden);
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  ClipperLib::Minkowski(a1, a2, a3, 1, a4);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v17 = 0u;
  v18 = 0u;
  v5 = &off_1E7774540;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  *(_OWORD *)__p = 0u;
  v10 = 0;
  v11[0] = v11;
  v11[1] = v11;
  v11[2] = 0;
  v12 = 0;
  v19 = 0;
  v13 = 0;
  v14 = 0;
  v23 = 0;
  v15 = 0;
  v16 = &off_1E7774588;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v16, a3, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v5, 1, a3, 1, 1);
  v5 = &off_1E7774540;
  v16 = &off_1E7774588;
  std::__list_imp<long long>::clear(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[1])
  {
    *(void **)&v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v16);
}

void sub_1BE3867EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

void ClipperLib::TranslatePath(_QWORD *a1, int64x2_t **a2, int64x2_t *a3)
{
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64x2_t *v9;
  int64x2_t v15;

  std::vector<ClipperLib::IntPoint>::resize((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
  v6 = (_OWORD *)*a1;
  v7 = a1[1] - *a1;
  if (v7)
  {
    v8 = v7 / 24;
    if (v8 <= 1)
      v8 = 1;
    v9 = *a2 + 1;
    __asm { FMOV            V0.2S, #-1.0 }
    do
    {
      v15 = *(int64x2_t *)v6;
      v6 = (_OWORD *)((char *)v6 + 24);
      v9[-1] = vaddq_s64(*a3, v15);
      v9->i64[0] = _D0;
      v9 = (int64x2_t *)((char *)v9 + 24);
      --v8;
    }
    while (v8);
  }
}

void ClipperLib::MinkowskiSum(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(ClipperLib::Clipper *__hidden);
  void *v25[2];
  void *v26[2];
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[4];
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  void (**v35)(ClipperLib::Clipper *__hidden);
  __int128 v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v39 = 0;
  v40 = 0;
  v41 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v36 = 0u;
  v37 = 0u;
  v24 = &off_1E7774540;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  v30[0] = v30;
  v30[1] = v30;
  v30[2] = 0;
  v31 = 0;
  v38 = 0;
  v32 = 0;
  v33 = 0;
  v42 = 0;
  v34 = 0;
  v35 = &off_1E7774588;
  v4 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    do
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      ClipperLib::Minkowski(a1, (_QWORD *)(v4 + 24 * v8), &v21, 1, a4);
      v9 = v21;
      if (v22 != v21)
      {
        v10 = 0;
        v11 = 0;
        v12 = (char *)&v25[-1] + (_QWORD)*(v24 - 3);
        do
        {
          (*(void (**)(char *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v12 + 16))(v12, v9 + v10, 0, 1);
          ++v11;
          v9 = v21;
          v10 += 24;
        }
        while (v11 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v21) >> 3));
      }
      if (a4)
      {
        __p = 0;
        v19 = 0;
        v20 = 0;
        v13 = (_QWORD *)(*a2 + 24 * v8);
        v14 = *a1;
        v16 = *(int64x2_t *)*a1;
        v17 = *(_QWORD *)(v14 + 16);
        ClipperLib::TranslatePath(v13, (int64x2_t **)&__p, &v16);
        ClipperLib::ClipperBase::AddPath((uint64_t)&v25[-1] + (_QWORD)*(v24 - 3), (uint64_t **)&__p, 1, 1);
        if (__p)
        {
          v19 = __p;
          operator delete(__p);
        }
      }
      __p = &v21;
      std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v8;
      v4 = *a2;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  ClipperLib::Clipper::Execute((uint64_t)&v24, 1, a3, 1, 1);
  v24 = &off_1E7774540;
  v35 = &off_1E7774588;
  std::__list_imp<long long>::clear(v30);
  if ((_QWORD)v28)
  {
    *((_QWORD *)&v28 + 1) = v28;
    operator delete((void *)v28);
  }
  if (v26[1])
  {
    *(void **)&v27 = v26[1];
    operator delete(v26[1]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v35);
}

void sub_1BE386B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a21);
  _Unwind_Resume(a1);
}

void ClipperLib::MinkowskiDiff(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t (**v4)(ClipperLib::Clipper *__hidden);
  void *v5[2];
  void *v6[2];
  __int128 v7;
  void *__p[2];
  uint64_t v9;
  _QWORD v10[4];
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  void (**v15)(ClipperLib::Clipper *__hidden);
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  ClipperLib::Minkowski(a1, a2, a3, 0, 1u);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v16 = 0u;
  v17 = 0u;
  v4 = &off_1E7774540;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)v6 = 0u;
  v7 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0;
  v10[0] = v10;
  v10[1] = v10;
  v10[2] = 0;
  v11 = 0;
  v18 = 0;
  v12 = 0;
  v13 = 0;
  v22 = 0;
  v14 = 0;
  v15 = &off_1E7774588;
  ClipperLib::ClipperBase::AddPaths((uint64_t)&v15, a3, 0, 1);
  ClipperLib::Clipper::Execute((uint64_t)&v4, 1, a3, 1, 1);
  v4 = &off_1E7774540;
  v15 = &off_1E7774588;
  std::__list_imp<long long>::clear(v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6[1])
  {
    *(void **)&v7 = v6[1];
    operator delete(v6[1]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)&v15);
}

void sub_1BE386C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ClipperLib::AddPolyNodeToPaths(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_DWORD)a2 != 1)
  {
    v5 = result;
    if ((_DWORD)a2 != 2 || !*(_BYTE *)(result + 68))
    {
      v6 = result + 8;
      if (*(_QWORD *)(result + 8) != *(_QWORD *)(result + 16))
      {
        v7 = a3[1];
        if (v7 >= a3[2])
        {
          result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a3, v6);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a3, v6);
          result = v7 + 24;
        }
        a3[1] = result;
      }
    }
    v8 = *(_QWORD *)(v5 + 32);
    if ((int)((unint64_t)(*(_QWORD *)(v5 + 40) - v8) >> 3) >= 1)
    {
      v9 = 0;
      do
      {
        result = ClipperLib::AddPolyNodeToPaths(*(_QWORD *)(v8 + 8 * v9++), a2, a3);
        v8 = *(_QWORD *)(v5 + 32);
      }
      while (v9 < (int)((unint64_t)(*(_QWORD *)(v5 + 40) - v8) >> 3));
    }
  }
  return result;
}

uint64_t ClipperLib::PolyTreeToPaths(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  v4 = *(_QWORD **)(a1 + 80);
  v5 = (*(_QWORD *)(a1 + 88) - (_QWORD)v4) >> 3;
  if ((int)v5 >= 1)
    LODWORD(v5) = v5 - (**(_QWORD **)(a1 + 32) != *v4);
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);
  return ClipperLib::AddPolyNodeToPaths(a1, 0, a2);
}

uint64_t ClipperLib::ClosedPathsFromPolyTree(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;

  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  v4 = *(_QWORD **)(a1 + 80);
  v5 = (*(_QWORD *)(a1 + 88) - (_QWORD)v4) >> 3;
  if ((int)v5 >= 1)
    LODWORD(v5) = v5 - (**(_QWORD **)(a1 + 32) != *v4);
  std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);
  return ClipperLib::AddPolyNodeToPaths(a1, 2, a2);
}

uint64_t ClipperLib::OpenPathsFromPolyTree(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  std::vector<std::vector<ClipperLib::IntPoint>>::resize(a2, 0);
  v4 = *(_QWORD **)(a1 + 80);
  v5 = (*(_QWORD *)(a1 + 88) - (_QWORD)v4) >> 3;
  if ((int)v5 >= 1)
    LODWORD(v5) = v5 - (**(_QWORD **)(a1 + 32) != *v4);
  result = std::vector<std::vector<ClipperLib::IntPoint>>::reserve(a2, (int)v5);
  v8 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if ((int)((unint64_t)(v7 - v8) >> 3) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v8 + 8 * v9);
      if (*(_BYTE *)(v10 + 68))
      {
        v11 = v10 + 8;
        v12 = a2[1];
        if (v12 >= a2[2])
        {
          result = std::vector<std::vector<ClipperLib::IntPoint>>::__push_back_slow_path<std::vector<ClipperLib::IntPoint> const&>(a2, v11);
        }
        else
        {
          std::vector<std::vector<ClipperLib::IntPoint>>::__construct_one_at_end[abi:ne180100]<std::vector<ClipperLib::IntPoint> const&>((uint64_t)a2, v11);
          result = v12 + 24;
        }
        a2[1] = result;
        v8 = *(_QWORD *)(a1 + 32);
        v7 = *(_QWORD *)(a1 + 40);
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)(v7 - v8) >> 3));
  }
  return result;
}

_QWORD *ClipperLib::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)",", 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

_QWORD *ClipperLib::operator<<(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v3 = a2[1];
  if (*a2 != v3)
  {
    v4 = (v3 - *a2) >> 3;
    if (0xAAAAAAAAAAAAAAABLL * v4 != 1)
    {
      v5 = 0;
      v6 = 0xAAAAAAAAAAAAAAABLL * v4 - 1;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"), ", 3);
        v5 += 24;
        --v6;
      }
      while (v6);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")\n", 2);
  }
  return a1;
}

_QWORD *ClipperLib::operator<<(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *a2;
  if (a2[1] != *a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      a1 = ClipperLib::operator<<(a1, (_QWORD *)(v2 + v4));
      ++v5;
      v2 = *a2;
      v4 += 24;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\n", 1);
}

void `virtual thunk to'ClipperLib::Clipper::~Clipper(ClipperLib::Clipper *this)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E7774540;
  v1[18] = &off_1E7774588;
  std::__list_imp<long long>::clear(v1 + 11);
  v2 = (void *)v1[7];
  if (v2)
  {
    v1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)(v1 + 18));
}

{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = (_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  *v1 = &off_1E7774540;
  v1[18] = &off_1E7774588;
  std::__list_imp<long long>::clear(v1 + 11);
  v2 = (void *)v1[7];
  if (v2)
  {
    v1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  ClipperLib::ClipperBase::~ClipperBase((ClipperLib::ClipperBase *)(v1 + 18));
  JUMPOUT(0x1C3B7F770);
}

void ClipperLib::PolyNode::~PolyNode(ClipperLib::PolyNode *this)
{
  ClipperLib::PolyNode::~PolyNode(this);
  JUMPOUT(0x1C3B7F770);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E77745C0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void std::vector<ClipperLib::PolyNode *>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

ClipperLib::clipperException *ClipperLib::clipperException::clipperException(ClipperLib::clipperException *this, char *a2)
{
  *(_QWORD *)this = &off_1E7774510;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, a2);
  return this;
}

void sub_1BE3873EC(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void ClipperLib::clipperException::~clipperException(std::exception *this)
{
  ClipperLib::clipperException::~clipperException(this);
  JUMPOUT(0x1C3B7F770);
}

{
  this->__vftable = (std::exception_vtbl *)&off_1E7774510;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t ClipperLib::clipperException::what(ClipperLib::clipperException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void std::__introsort<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(__int128 *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = *a3;
  if (*(_QWORD *)result >= *a2)
  {
    if (v3 < v4)
    {
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v10 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v10;
      *(_OWORD *)a3 = v9;
      a3[2] = v8;
      if (*(_QWORD *)result < *a2)
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = a2[2];
        *result = *(_OWORD *)a2;
        *((_QWORD *)result + 2) = v13;
        *(_OWORD *)a2 = v12;
        a2[2] = v11;
      }
    }
  }
  else
  {
    if (v3 >= v4)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = a2[2];
      *result = *(_OWORD *)a2;
      *((_QWORD *)result + 2) = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      if (*a2 >= *a3)
        return result;
      v5 = a2[2];
      v6 = *(_OWORD *)a2;
      v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = a3[2];
      *result = *(_OWORD *)a3;
      *((_QWORD *)result + 2) = v7;
    }
    *(_OWORD *)a3 = v6;
    a3[2] = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)a1 < *(_QWORD *)(a2 - 24))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__n128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*v10 < *(_QWORD *)v11)
    {
      v18 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (*(_QWORD *)(v16 + 24) >= v14)
        {
          v17 = a1 + v15 + 72;
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *(_QWORD *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v18;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((__int128 *)a1, a2, a3);
  if (*a3 < *(_QWORD *)a4)
  {
    v9 = a3[2];
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*a2 < *a3)
    {
      v11 = a2[2];
      result = *(__n128 *)a2;
      v12 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v12;
      *(__n128 *)a3 = result;
      a3[2] = v11;
      if (*(_QWORD *)a1 < *a2)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        a2[2] = v13;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>(__n128 *a1, uint64_t *a2, uint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,ClipperLib::LocMinSorter &,ClipperLib::LocalMinimum *>((uint64_t)a1, a2, a3, (uint64_t)a4).n128_u64[0];
  if ((int64_t)a4->n128_u64[0] < (int64_t)a5->n128_u64[0])
  {
    v11 = a4[1].n128_u64[0];
    result = *a4;
    v12 = a5[1].n128_u64[0];
    *a4 = *a5;
    a4[1].n128_u64[0] = v12;
    *a5 = result;
    a5[1].n128_u64[0] = v11;
    if (*a3 < (int64_t)a4->n128_u64[0])
    {
      v13 = a3[2];
      result = *(__n128 *)a3;
      v14 = a4[1].n128_i64[0];
      *(__n128 *)a3 = *a4;
      a3[2] = v14;
      *a4 = result;
      a4[1].n128_u64[0] = v13;
      if (*a2 < *a3)
      {
        v15 = a2[2];
        result = *(__n128 *)a2;
        v16 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v16;
        *(__n128 *)a3 = result;
        a3[2] = v15;
        if ((int64_t)a1->n128_u64[0] < *a2)
        {
          v17 = a1[1].n128_i64[0];
          result = *a1;
          v18 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v18;
          *(__n128 *)a2 = result;
          a2[2] = v17;
        }
      }
    }
  }
  return result;
}

void std::vector<std::vector<ClipperLib::IntPoint>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<ClipperLib::IntPoint>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1BE388234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(_QWORD), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  int64_t v81;
  uint64_t *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t *v85;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = a2 - 1;
  v82 = a2 - 2;
  v85 = a2;
  v80 = a2 - 3;
  v10 = v8;
  while (2)
  {
    v8 = v10;
    v11 = v85;
    v12 = (char *)v85 - (char *)v10;
    v13 = v85 - v10;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v85 - 1), *v8);
        if ((_DWORD)result)
        {
          v40 = *v8;
          *v8 = *(v85 - 1);
          *(v85 - 1) = v40;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8, v8 + 1, v9, a3);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8, v8 + 1, v8 + 2, v9, a3);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8, v8 + 1, v8 + 2, v8 + 3, v9, a3);
      default:
        if (v12 <= 191)
        {
          v41 = v8 + 1;
          v43 = v8 == v85 || v41 == v85;
          if ((a5 & 1) != 0)
          {
            if (!v43)
            {
              v44 = 0;
              v45 = v8;
              do
              {
                v47 = *v45;
                v46 = v45[1];
                v45 = v41;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v46, v47);
                if ((_DWORD)result)
                {
                  v48 = *v45;
                  v49 = v44;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v49 + 8) = *(uint64_t *)((char *)v8 + v49);
                    if (!v49)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v48, *(uint64_t *)((char *)v8 + v49 - 8));
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = (uint64_t *)((char *)v8 + v49 + 8);
                      goto LABEL_74;
                    }
                  }
                  v50 = v8;
LABEL_74:
                  *v50 = v48;
                }
                v41 = v45 + 1;
                v44 += 8;
              }
              while (v45 + 1 != v85);
            }
          }
          else if (!v43)
          {
            do
            {
              v75 = *v8;
              v74 = v8[1];
              v8 = v41;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v74, v75);
              if ((_DWORD)result)
              {
                v76 = *v8;
                v77 = v8;
                do
                {
                  v78 = v77;
                  v79 = *--v77;
                  *v78 = v79;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v76, *(v78 - 2));
                }
                while ((result & 1) != 0);
                *v77 = v76;
              }
              v41 = v8 + 1;
            }
            while (v8 + 1 != v85);
          }
          return result;
        }
        if (!a4)
        {
          if (v8 != v85)
          {
            v51 = (unint64_t)(v13 - 2) >> 1;
            v83 = v51;
            do
            {
              v52 = v51;
              if (v83 >= v51)
              {
                v53 = (2 * v51) | 1;
                v54 = &v8[v53];
                if (2 * v51 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                {
                  ++v54;
                  v53 = 2 * v52 + 2;
                }
                v55 = &v8[v52];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, *v55);
                if ((result & 1) == 0)
                {
                  v81 = v52;
                  v56 = *v55;
                  do
                  {
                    v57 = v54;
                    *v55 = *v54;
                    if (v83 < v53)
                      break;
                    v58 = (2 * v53) | 1;
                    v54 = &v8[v58];
                    if (2 * v53 + 2 < v13 && ((unsigned int (*)(uint64_t, uint64_t))*a3)(*v54, v54[1]))
                    {
                      ++v54;
                      v58 = 2 * v53 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v54, v56);
                    v55 = v57;
                    v53 = v58;
                  }
                  while (!(_DWORD)result);
                  *v57 = v56;
                  v11 = v85;
                  v52 = v81;
                }
              }
              v51 = v52 - 1;
            }
            while (v52);
            v59 = (unint64_t)v12 >> 3;
            do
            {
              v60 = v11;
              v61 = 0;
              v62 = v59 - 2;
              v84 = *v8;
              if (v59 < 2)
                v62 = v59 - 1;
              v63 = v62 >> 1;
              v64 = v8;
              do
              {
                v65 = &v64[v61 + 1];
                v66 = (2 * v61) | 1;
                v67 = 2 * v61 + 2;
                if (v67 < v59)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v64[v61 + 1], v64[v61 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v65;
                    v66 = v67;
                  }
                }
                *v64 = *v65;
                v64 = v65;
                v61 = v66;
              }
              while (v66 <= v63);
              v11 = v60 - 1;
              if (v65 == v60 - 1)
              {
                *v65 = v84;
              }
              else
              {
                *v65 = *v11;
                *v11 = v84;
                v68 = (char *)v65 - (char *)v8 + 8;
                if (v68 >= 9)
                {
                  v69 = (((unint64_t)v68 >> 3) - 2) >> 1;
                  v70 = &v8[v69];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, *v65);
                  if ((_DWORD)result)
                  {
                    v71 = *v65;
                    do
                    {
                      v72 = v70;
                      *v65 = *v70;
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = &v8[v69];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v70, v71);
                      v65 = v72;
                    }
                    while ((result & 1) != 0);
                    *v72 = v71;
                  }
                }
              }
            }
            while (v59-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v8[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v15, v8, v9, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8, v15, v9, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8 + 1, v15 - 1, v82, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8 + 2, &v8[v14 + 1], v80, a3);
          v11 = v85;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v15 - 1, v15, &v8[v14 + 1], a3);
          v16 = *v8;
          *v8 = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(_QWORD, uint64_t))*a3)(*(v8 - 1), *v8) & 1) == 0)
        {
          v31 = *v8;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v8, *v9);
          if ((result & 1) != 0)
          {
            v10 = v8;
            do
            {
              v32 = v10[1];
              ++v10;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = v8 + 1;
            do
            {
              v10 = v33;
              if (v33 >= v85)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, *v10);
            }
            while (!(_DWORD)result);
          }
          v34 = v85;
          if (v10 < v85)
          {
            v34 = v85;
            do
            {
              v35 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v10 < v34)
          {
            v36 = *v10;
            *v10 = *v34;
            *v34 = v36;
            do
            {
              v37 = v10[1];
              ++v10;
            }
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v31, v37));
            do
            {
              v38 = *--v34;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = v10 - 1;
          if (v10 - 1 != v8)
            *v8 = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = *v8;
        do
          v19 = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v8[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v8[v17];
        v21 = v11;
        if (v17 == 1)
        {
          v21 = v11;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = v20 - 1;
        }
        else
        {
          v24 = &v8[v17];
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!((unsigned int (*)(uint64_t, uint64_t))*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = v24 - 1;
        }
        if (v29 != v8)
          *v8 = *v29;
        *v29 = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **,false>(v8, v29, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v29 + 1;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v8, v29, a3);
        v10 = v29 + 1;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(v29 + 1, v85, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(ClipperLib::IntersectNode *,ClipperLib::IntersectNode *),ClipperLib::IntersectNode **>(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

__n128 std::vector<ClipperLib::IntPoint>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<ClipperLib::IntPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v19;
  char *v20;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      __asm { FMOV            V0.2S, #-1.0 }
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = _D0;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(v4, v11);
    else
      v12 = 0;
    v19 = &v12[24 * v8];
    v20 = &v19[24 * a2];
    __asm { FMOV            V0.2S, #-1.0 }
    v22 = v19;
    do
    {
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = _D0;
      v22 += 24;
    }
    while (v22 != v20);
    v23 = &v12[24 * v11];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v19 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v19 - 24) = v26;
        v19 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

uint64_t *std::list<long long>::__sort<std::__less<void,void>>(uint64_t *result, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *i;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      v4 = (uint64_t *)*a2;
      if (*(_QWORD *)(*a2 + 16) < result[2])
      {
        v5 = *v4;
        *(_QWORD *)(v5 + 8) = v4[1];
        *(_QWORD *)v4[1] = v5;
        v6 = *result;
        *(_QWORD *)(v6 + 8) = v4;
        *v4 = v6;
        *result = (uint64_t)v4;
        v4[1] = (uint64_t)result;
        return v4;
      }
    }
    else
    {
      v8 = a3 >> 1;
      v9 = (a3 >> 1) + 1;
      v10 = result;
      do
      {
        v10 = (uint64_t *)v10[1];
        --v9;
      }
      while (v9 > 1);
      v11 = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(result, v10, a3 >> 1);
      result = (uint64_t *)std::list<long long>::__sort<std::__less<void,void>>(v10, a2, a3 - v8);
      v12 = v11[2];
      if (result[2] >= v12)
      {
        v14 = (uint64_t *)v11[1];
        i = result;
        result = v11;
      }
      else
      {
        for (i = (uint64_t *)result[1]; i != a2; i = (uint64_t *)i[1])
        {
          if (i[2] >= v12)
            goto LABEL_14;
        }
        i = a2;
LABEL_14:
        v15 = *i;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = *(_QWORD *)(*i + 8);
        **(_QWORD **)(v15 + 8) = v16;
        v17 = *v11;
        v14 = (uint64_t *)v11[1];
        *(_QWORD *)(v17 + 8) = result;
        *result = v17;
        *v11 = v15;
        *(_QWORD *)(v15 + 8) = v11;
      }
      if (v14 != i && i != a2)
      {
        v18 = i;
        do
        {
          v19 = v14[2];
          if (i[2] >= v19)
          {
            v14 = (uint64_t *)v14[1];
          }
          else
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (j[2] >= v19)
                goto LABEL_25;
            }
            j = a2;
LABEL_25:
            v21 = *j;
            v22 = *i;
            *(_QWORD *)(v22 + 8) = *(_QWORD *)(*j + 8);
            **(_QWORD **)(v21 + 8) = v22;
            if (v18 == i)
              v18 = j;
            v24 = *v14;
            v23 = (uint64_t *)v14[1];
            *(_QWORD *)(v24 + 8) = i;
            *i = v24;
            *v14 = v21;
            *(_QWORD *)(v21 + 8) = v14;
            v14 = v23;
            i = j;
          }
        }
        while (v14 != v18 && i != a2);
      }
    }
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  size_t v16;
  std::locale::__imp *p_b;
  uint64_t v18;
  uint64_t v19;
  std::locale *v20;
  uint64_t v21;
  _BYTE v23[16];
  std::locale __b;
  size_t v25;
  int64_t v26;

  MEMORY[0x1C3B7F6D4](v23, a1);
  if (v23[0])
  {
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *((_QWORD *)v6 + 5);
    v8 = *((_DWORD *)v6 + 2);
    v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&__b, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20)
      v12 = a2 + a3;
    else
      v12 = a2;
    if (!v7)
      goto LABEL_29;
    v13 = *((_QWORD *)v6 + 3);
    v14 = v13 <= a3;
    v15 = v13 - a3;
    v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_29;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v16 >= 0x17)
      {
        v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v18 = v16 | 7;
        v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        v25 = v16;
        v26 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v26) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((_BYTE *)p_b + v16) = 0;
      v20 = v26 >= 0 ? &__b : (std::locale *)__b.__locale_;
      v21 = (*(uint64_t (**)(uint64_t, std::locale *, size_t))(*(_QWORD *)v7 + 96))(v7, v20, v16);
      if (SHIBYTE(v26) < 0)
        operator delete(__b.__locale_);
      if (v21 != v16)
        goto LABEL_29;
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((_QWORD *)v6 + 3) = 0;
    }
    else
    {
LABEL_29:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C3B7F6E0](v23);
  return a1;
}

void sub_1BE389390(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;

  if (a17 < 0)
    operator delete(__p);
  MEMORY[0x1C3B7F6E0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1BE389360);
}

void sub_1BE3893F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Transform::Transform(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774C58;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774C58;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawingV1::Transform::~Transform(drawingV1::Transform *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawingV1::Transform::Transform(drawingV1::Transform *this, const drawingV1::Transform *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774C58;
  *((_DWORD *)this + 8) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 32) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 32) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_13;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 5) = result;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0)
      return result;
LABEL_14:
    result = *((float *)a2 + 7);
    *((_BYTE *)this + 32) = v3 | 0x20;
    *((float *)this + 7) = result;
    return result;
  }
LABEL_13:
  result = *((float *)a2 + 6);
  v3 |= 0x10u;
  *((_BYTE *)this + 32) = v3;
  *((float *)this + 6) = result;
  if ((*((_BYTE *)a2 + 32) & 0x20) != 0)
    goto LABEL_14;
  return result;
}

uint64_t drawingV1::Transform::operator=(uint64_t a1, const drawingV1::Transform *a2)
{
  int v3;
  __int128 v4;
  _BYTE v6[8];
  __int128 v7;
  uint64_t v8;
  int v9;

  if ((const drawingV1::Transform *)a1 != a2)
  {
    drawingV1::Transform::Transform((drawingV1::Transform *)v6, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v9;
    v9 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    *(_QWORD *)&v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v8;
    v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Transform *a2, drawingV1::Transform *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float result;

  v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  v7 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v7;
  v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float drawingV1::Transform::Transform(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774C58;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774C58;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t drawingV1::Transform::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(drawingV1::Transform *__hidden);
  __int128 v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7774C58;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v11 = *(_DWORD *)(a1 + 32);
    v4 = *(_OWORD *)(a2 + 8);
    v9 = *(_OWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 24) = v6;
    v10 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t drawingV1::Transform::formatText(drawingV1::Transform *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "a", *((float *)this + 2));
    v5 = *((_BYTE *)this + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*((_BYTE *)this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "b", *((float *)this + 3));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "c", *((float *)this + 4));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(a2, "tx", *((float *)this + 6));
    if ((*((_BYTE *)this + 32) & 0x20) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "d", *((float *)this + 5));
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(a2, "ty", *((float *)this + 7));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Transform::readFrom(drawingV1::Transform *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_43;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 32) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 2u:
        *((_BYTE *)this + 32) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 3u:
        *((_BYTE *)this + 32) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 4u:
        *((_BYTE *)this + 32) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 5u:
        *((_BYTE *)this + 32) |= 0x10u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_40;
        *((_DWORD *)this + 6) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_42;
      case 6u:
        *((_BYTE *)this + 32) |= 0x20u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 7) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_42:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_40:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_43:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawingV1::Transform::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 28));
  return this;
}

BOOL drawingV1::Transform::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 8) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 0x10) == 0 || *(float *)(a1 + 24) != *(float *)(a2 + 24))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 0x10) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 0x20) == 0;
  if ((*(_BYTE *)(a1 + 32) & 0x20) != 0)
    return (*(_BYTE *)(a2 + 32) & 0x20) != 0 && *(float *)(a1 + 28) == *(float *)(a2 + 28);
  return v2;
}

uint64_t drawingV1::Transform::hash_value(drawingV1::Transform *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
LABEL_21:
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_6;
LABEL_22:
    v5 = 0;
    if ((*((_BYTE *)this + 32) & 8) != 0)
      goto LABEL_9;
LABEL_23:
    v7 = 0;
    if ((*((_BYTE *)this + 32) & 0x10) != 0)
      goto LABEL_12;
    goto LABEL_24;
  }
  v12 = *((float *)this + 2);
  v1 = LODWORD(v12);
  if (v12 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_21;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_22;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 8) == 0)
    goto LABEL_23;
LABEL_9:
  v6 = *((float *)this + 5);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  if ((*((_BYTE *)this + 32) & 0x10) != 0)
  {
LABEL_12:
    v8 = *((float *)this + 6);
    v9 = LODWORD(v8);
    if (v8 == 0.0)
      v9 = 0;
    if ((*((_BYTE *)this + 32) & 0x20) != 0)
      goto LABEL_15;
LABEL_25:
    v11 = 0;
    return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
  }
LABEL_24:
  v9 = 0;
  if ((*((_BYTE *)this + 32) & 0x20) == 0)
    goto LABEL_25;
LABEL_15:
  v10 = *((float *)this + 7);
  v11 = LODWORD(v10);
  if (v10 == 0.0)
    v11 = 0;
  return v3 ^ v1 ^ v5 ^ v7 ^ v9 ^ v11;
}

void PKNoiseSmoothingFilter::run(PKNoiseSmoothingFilter *this)
{
  int64_t v2;
  _QWORD *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  float64x2_t *v23;
  uint64_t v24;
  __int128 *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  float64x2_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v47;
  double *v48;
  double v49;
  float64x2_t *v50;
  double v51;
  double v52;

  v2 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 7;
  v3 = (_QWORD *)((char *)this + 80);
  std::vector<PKInputPoint>::resize((uint64_t)this + 80, v2);
  v4 = *((double *)this + 13) * 0.5;
  if (v4 == 0.0)
  {
    v5 = *((_QWORD *)this + 9);
    v6 = v2 - v5;
    if (v2 > v5)
    {
      v7 = v5 << 7;
      do
      {
        v8 = (__int128 *)(*((_QWORD *)this + 6) + v7);
        v9 = (_OWORD *)(*((_QWORD *)this + 10) + v7);
        v10 = v8[7];
        v12 = v8[4];
        v11 = v8[5];
        v9[6] = v8[6];
        v9[7] = v10;
        v9[4] = v12;
        v9[5] = v11;
        v13 = *v8;
        v14 = v8[1];
        v15 = v8[3];
        v9[2] = v8[2];
        v9[3] = v15;
        *v9 = v13;
        v9[1] = v14;
        v7 += 128;
        --v6;
      }
      while (v6);
    }
    *((_QWORD *)this + 9) = *((_QWORD *)this + 4);
  }
  else
  {
    v16 = *((_QWORD *)this + 9);
    if (v16 >= v2)
    {
      v24 = *((_QWORD *)this + 9);
    }
    else
    {
      v17 = dbl_1BE4FD2F0[*((_QWORD *)this + 14) == 1];
      v18 = v4 / v17;
      v19 = vcvtpd_s64_f64(v18);
      v20 = v17 * (double)(uint64_t)ceil(v18);
      v21 = (2 * v19) | 1;
      if (v21 <= 1)
        v21 = 1;
      v22 = *((_QWORD *)this + 6);
      v23 = (float64x2_t *)MEMORY[0x1E0C9D538];
      v24 = *((_QWORD *)this + 9);
      do
      {
        v25 = (__int128 *)(v22 + (v16 << 7));
        v26 = (_OWORD *)(*((_QWORD *)this + 10) + (v16 << 7));
        v27 = *v25;
        v28 = v25[1];
        v29 = v25[3];
        v26[2] = v25[2];
        v26[3] = v29;
        *v26 = v27;
        v26[1] = v28;
        v30 = v25[4];
        v31 = v25[5];
        v32 = v25[7];
        v26[6] = v25[6];
        v26[7] = v32;
        v26[4] = v30;
        v26[5] = v31;
        v22 = *((_QWORD *)this + 6);
        v33 = *((_QWORD *)this + 9) - 1;
        if ((v19 & 0x8000000000000000) == 0)
        {
          v34 = 0;
          v35 = *v23;
          v36 = v22 + (v16 << 7);
          v38 = *(double *)(v36 + 64);
          v37 = (double *)(v36 + 64);
          v39 = v38;
          v40 = v38 - v20;
          v41 = ((*((_QWORD *)this + 7) - v22) >> 7) - 1;
          v42 = 0.0;
          do
          {
            if (v39 == v40)
            {
              if (v33 <= v16)
                v33 = v16;
              v43 = *(float64x2_t *)(v22 + (v16 << 7));
            }
            else
            {
              v44 = v37;
              v45 = v16;
              if (v16 >= 1)
              {
                while (*v44 > v40)
                {
                  v44 -= 16;
                  if (v45-- <= 1)
                  {
                    v45 = 0;
                    break;
                  }
                }
              }
              if (v45 <= v41)
                v47 = ((*((_QWORD *)this + 7) - v22) >> 7) - 1;
              else
                v47 = v45;
              v48 = (double *)(v22 + 192 + (v45 << 7));
              while (v47 != v45)
              {
                ++v45;
                v49 = *v48;
                v48 += 16;
                if (v49 >= v40)
                {
                  v47 = v45 - 1;
                  break;
                }
              }
              v50 = (float64x2_t *)(v22 + (v47 << 7));
              v51 = v50[4].f64[0];
              if (v33 <= v47)
                v33 = v47;
              if (v51 <= v40)
              {
                v43 = *v50;
                if (v47 != v41)
                {
                  v52 = *(double *)(v22 + ((v47 + 1) << 7) + 64) - v51;
                  if (v33 <= v47 + 1)
                    v33 = v47 + 1;
                  if (v52 != 0.0)
                    v43 = vaddq_f64(v43, vmulq_n_f64(vsubq_f64(*(float64x2_t *)(v22 + ((v47 + 1) << 7)), v43), (v40 - v51) / v52));
                }
              }
              else
              {
                v43 = *v50;
              }
            }
            v40 = v17 + v40;
            v35 = vaddq_f64(v35, v43);
            v42 = v42 + 1.0;
            ++v34;
          }
          while (v34 != v21);
          if (v42 > 0.0)
            *(float64x2_t *)(*v3 + (v16 << 7)) = vmulq_n_f64(v35, 1.0 / v42);
        }
        if (*((_BYTE *)this + 16) || v33 < *((_QWORD *)this + 4) - 1)
          v24 = ++v16;
        else
          ++v16;
      }
      while (v16 != v2);
    }
    *((_QWORD *)this + 9) = v24;
  }
}

void PKNoiseSmoothingFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 112) = a3;
  v6 = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "objectForKey:", CFSTR("internalSettings.pathSmoothing.timeInterval"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  PKDynamicCast(v6, v8);
  v11 = (id)objc_claimAutoreleasedReturnValue();

  v9 = v11;
  if (v11)
  {
    objc_msgSend(v11, "doubleValue");
    *(_QWORD *)(a1 + 104) = v10;
    v9 = v11;
  }

}

void sub_1BE38A574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingEnded(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *PKInputProvider<PKInputPoint>::getUpdatedRangeFromIndex(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *a2 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a1 + 24))(a1, *a2, v4);
  return v4;
}

uint64_t PKInputBufferedFilter<PKInputPoint,PKInputPoint>::copyUpdatedRangeFromIndex(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  std::vector<PKInputPoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PKInputPoint*>,std::__wrap_iter<PKInputPoint*>>(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + (a2 << 7)), *(char **)(v6 + 8), (*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + (a2 << 7))) >> 7);
  return a1[9];
}

_QWORD *PKInputFilter<PKInputPoint,PKInputPoint>::reset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<PKInputPoint,PKInputPoint>::fetchInput(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::vector<PKInputPoint>::resize(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t PKInputFilter<PKInputPoint,PKInputPoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

uint64_t PKInputFilter<PKInputPoint,PKInputPoint>::complete()
{
  return 0;
}

void PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void (***v7)(_QWORD, id, uint64_t, double);
  id v8;

  v8 = a2;
  v7 = *(void (****)(_QWORD, id, uint64_t, double))(a1 + 8);
  if (v7)
    (**v7)(v7, v8, a3, a4);
  *(double *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 16) = 0;

}

void sub_1BE38A7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

char *std::vector<PKInputPoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PKInputPoint*>,std::__wrap_iter<PKInputPoint*>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  void *__p;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 7)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 7);
    if (v14 >> 57)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 7;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 6 > v14)
      v14 = v16 >> 6;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFF80)
      v17 = 0x1FFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v47 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>(v9, v17);
    else
      v18 = 0;
    v33 = &v18[128 * v15];
    __p = v18;
    v44 = v33;
    v46 = &v18[128 * v17];
    v34 = a5 << 7;
    v35 = &v33[128 * a5];
    do
    {
      v36 = *(_OWORD *)v7;
      v37 = *((_OWORD *)v7 + 1);
      v38 = *((_OWORD *)v7 + 3);
      *((_OWORD *)v33 + 2) = *((_OWORD *)v7 + 2);
      *((_OWORD *)v33 + 3) = v38;
      *(_OWORD *)v33 = v36;
      *((_OWORD *)v33 + 1) = v37;
      v39 = *((_OWORD *)v7 + 4);
      v40 = *((_OWORD *)v7 + 5);
      v41 = *((_OWORD *)v7 + 7);
      *((_OWORD *)v33 + 6) = *((_OWORD *)v7 + 6);
      *((_OWORD *)v33 + 7) = v41;
      *((_OWORD *)v33 + 4) = v39;
      *((_OWORD *)v33 + 5) = v40;
      v33 += 128;
      v7 += 128;
      v34 -= 128;
    }
    while (v34);
    v45 = v35;
    v5 = (char *)std::vector<PKInputPoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v45 != v44)
      v45 += (v44 - v45 + 127) & 0xFFFFFFFFFFFFFF80;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 7;
  if (v20 >= a5)
  {
    v21 = &__src[128 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[128 * a5];
    v25 = &v23[-128 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_OWORD *)v25;
        v28 = *((_OWORD *)v25 + 1);
        v29 = *((_OWORD *)v25 + 3);
        *((_OWORD *)v26 + 2) = *((_OWORD *)v25 + 2);
        *((_OWORD *)v26 + 3) = v29;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v30 = *((_OWORD *)v25 + 4);
        v31 = *((_OWORD *)v25 + 5);
        v32 = *((_OWORD *)v25 + 7);
        *((_OWORD *)v26 + 6) = *((_OWORD *)v25 + 6);
        *((_OWORD *)v26 + 7) = v32;
        *((_OWORD *)v26 + 4) = v30;
        *((_OWORD *)v26 + 5) = v31;
        v25 += 128;
        v26 += 128;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-128 * ((v23 - v24) >> 7)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[128 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[128 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1BE38A9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::vector<PKInputPoint>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  void *v5;
  char *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE *v16;
  uint64_t v17;
  int64_t v18;
  char *v19;
  void *v20;
  void *v21;

  v5 = *(void **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v9 = *(_QWORD *)(a2 + 8);
    do
    {
      v10 = *((_OWORD *)v8 - 8);
      v11 = *((_OWORD *)v8 - 7);
      v12 = *((_OWORD *)v8 - 5);
      *(_OWORD *)(v9 - 96) = *((_OWORD *)v8 - 6);
      *(_OWORD *)(v9 - 80) = v12;
      *(_OWORD *)(v9 - 128) = v10;
      *(_OWORD *)(v9 - 112) = v11;
      v13 = *((_OWORD *)v8 - 4);
      v14 = *((_OWORD *)v8 - 3);
      v15 = *((_OWORD *)v8 - 1);
      v7 = (void *)(v9 - 128);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v15;
      *(_OWORD *)(v9 - 64) = v13;
      *(_OWORD *)(v9 - 48) = v14;
      v8 -= 128;
      v9 -= 128;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v16 = a1[1];
  v17 = *(_QWORD *)(a2 + 16);
  v18 = v16 - __src;
  if (v16 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v16 - __src);
    v7 = *(void **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v17 + v18;
  v19 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v19;
  v20 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v20;
  v21 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_1BE38BD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE38CC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE38CE90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE38D070(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1BE38D14C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE38DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  uint64_t v26;
  void *v28;

  a26 = (void **)(v26 - 256);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a26);
  v28 = *(void **)(v26 - 232);
  if (v28)
  {
    *(_QWORD *)(v26 - 224) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

float SegmentMix(IntPoint *a1, IntPoint *a2, IntPoint *a3, float a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  IntPoint *v9;
  double v10;

  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)a1 - *(_QWORD *)a2;
  if (v6 >= 0)
    v7 = *(_QWORD *)a1 - *(_QWORD *)a2;
  else
    v7 = *(_QWORD *)a2 - *(_QWORD *)a1;
  if ((uint64_t)(*((_QWORD *)a1 + 1) - *((_QWORD *)a2 + 1)) >= 0)
    v8 = *((_QWORD *)a1 + 1) - *((_QWORD *)a2 + 1);
  else
    v8 = *((_QWORD *)a2 + 1) - *((_QWORD *)a1 + 1);
  if (v7 > v8)
  {
    v9 = a3;
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)a1 + 1) - v5;
    v9 = (IntPoint *)((char *)a3 + 8);
  }
  v10 = (float)((float)(*(_QWORD *)v9 - v5) / (float)v6);
  return (1.0 - v10) * *((float *)a2 + 4) + *((float *)a1 + 4) * v10;
}

void ZFillCallback(IntPoint *a1, IntPoint *a2, IntPoint *a3, IntPoint *a4, IntPoint *a5, double a6, float a7)
{
  float v10;
  float v11;

  if (*((float *)a5 + 4) < 0.0)
  {
    v10 = *((float *)a1 + 4);
    if (v10 >= 0.0)
    {
      *((float *)a5 + 4) = SegmentMix(a1, a2, a5, v10, a7);
    }
    else if (*((float *)a1 + 5) >= 0.0)
    {
      *((_DWORD *)a5 + 5) = 1065353216;
    }
    if (*((float *)a3 + 5) >= 0.0)
    {
      *((_DWORD *)a5 + 5) = 1065353216;
    }
    else
    {
      v11 = *((float *)a3 + 4);
      if (v11 >= 0.0)
        *((float *)a5 + 4) = SegmentMix(a3, a4, a5, v11, a7);
    }
  }
}

void sub_1BE38DDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE38DF74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE38E19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE38E3E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE38E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE38E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  void *v24;

  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&a9);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a22);
  v24 = *(void **)(v22 - 72);
  if (v24)
  {
    *(_QWORD *)(v22 - 64) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(a1);
}

void sub_1BE38EAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void generateRectClipperPath(float64x2_t *a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  float64x2_t v12;
  float64x2_t v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  double MinX;
  CGFloat MinY;
  float64_t v19;
  float64_t v20;
  double MaxX;
  double v22;
  float64x2_t v23;
  float64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char **v28;
  char *v29;
  char *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  __int128 v67;
  int32x2_t v68;
  __int128 v69;
  __int128 v70;
  _QWORD *v71;
  _BYTE *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  __int128 v81;
  float64x2_t v82;
  double v83;
  float64x2_t v84;
  float64x2_t v85;
  double v86;
  double MaxY;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  CGFloat v100;
  __int128 v101;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  std::vector<ClipperLib::IntPoint>::reserve((void **)a2, 4uLL);
  v12 = a1[1];
  *(float64x2_t *)&t1.a = *a1;
  *(float64x2_t *)&t1.c = v12;
  *(float64x2_t *)&t1.tx = a1[2];
  CGAffineTransformMakeScale(&t2, 100.0, 100.0);
  CGAffineTransformConcat(&v104, &t1, &t2);
  v13 = *(float64x2_t *)&v104.c;
  *a1 = *(float64x2_t *)&v104.a;
  a1[1] = v13;
  a1[2] = *(float64x2_t *)&v104.tx;
  v14 = a3;
  v13.f64[0] = a4;
  v15 = a5;
  v16 = a6;
  MinX = CGRectGetMinX(*(CGRect *)((char *)&v13 - 8));
  v105.origin.x = a3;
  v105.origin.y = a4;
  v105.size.width = a5;
  v105.size.height = a6;
  MinY = CGRectGetMinY(v105);
  v19 = a1[2].f64[0] + MinY * a1[1].f64[0] + a1->f64[0] * MinX;
  v20 = a1[2].f64[1] + MinY * a1[1].f64[1] + a1->f64[1] * MinX;
  v106.origin.x = a3;
  v106.origin.y = a4;
  v106.size.width = a5;
  v106.size.height = a6;
  MaxX = CGRectGetMaxX(v106);
  v107.origin.x = a3;
  v107.origin.y = a4;
  v107.size.width = a5;
  v107.size.height = a6;
  v100 = CGRectGetMinY(v107);
  v22 = a1->f64[1];
  v99 = a1[1].f64[1];
  v95 = a1->f64[0];
  v96 = a1[2].f64[0];
  v97 = a1[1].f64[0];
  v98 = a1[2].f64[1];
  v108.origin.x = a3;
  v108.origin.y = a4;
  v108.size.width = a5;
  v108.size.height = a6;
  v94 = CGRectGetMaxX(v108);
  v109.origin.x = a3;
  v109.origin.y = a4;
  v109.size.width = a5;
  v109.size.height = a6;
  MaxY = CGRectGetMaxY(v109);
  v92 = a1->f64[0];
  v93 = a1->f64[1];
  v88 = a1[2].f64[0];
  v89 = a1[1].f64[0];
  v90 = a1[2].f64[1];
  v91 = a1[1].f64[1];
  v110.origin.x = a3;
  v110.origin.y = a4;
  v110.size.width = a5;
  v110.size.height = a6;
  v86 = CGRectGetMinX(v110);
  v111.origin.x = a3;
  v111.origin.y = a4;
  v111.size.width = a5;
  v111.size.height = a6;
  v83 = CGRectGetMaxY(v111);
  v23 = *a1;
  v82 = a1[1];
  v24 = a1[2];
  v25 = (int)v19;
  v26 = (int)v20;
  v28 = (char **)(a2 + 16);
  v27 = *(char **)(a2 + 16);
  v29 = *(char **)(a2 + 8);
  v84 = v24;
  v85 = v23;
  if (v29 >= v27)
  {
    v38 = *(char **)a2;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v29[-*(_QWORD *)a2] >> 3);
    v40 = v39 + 1;
    if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_66;
    v41 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v38) >> 3);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0x555555555555555)
      v42 = 0xAAAAAAAAAAAAAAALL;
    else
      v42 = v40;
    v31 = v22;
    v33 = v99;
    v32 = v100;
    v37 = v97;
    v36 = v98;
    v35 = v96;
    if (v42)
    {
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(a2 + 16, v42);
      v38 = *(char **)a2;
      v29 = *(char **)(a2 + 8);
    }
    else
    {
      v43 = 0;
    }
    v34 = v95;
    v44 = &v43[24 * v39];
    v27 = &v43[24 * v42];
    *(_QWORD *)v44 = v25;
    *((_QWORD *)v44 + 1) = v26;
    *((_QWORD *)v44 + 2) = 0xBF80000000000000;
    v30 = v44 + 24;
    if (v29 != v38)
    {
      do
      {
        v45 = *(_OWORD *)(v29 - 24);
        *((_QWORD *)v44 - 1) = *((_QWORD *)v29 - 1);
        *(_OWORD *)(v44 - 24) = v45;
        v44 -= 24;
        v29 -= 24;
      }
      while (v29 != v38);
      v38 = *(char **)a2;
    }
    *(_QWORD *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v30;
    *(_QWORD *)(a2 + 16) = v27;
    if (v38)
    {
      operator delete(v38);
      v27 = *v28;
    }
  }
  else
  {
    *(_QWORD *)v29 = v25;
    *((_QWORD *)v29 + 1) = v26;
    *((_QWORD *)v29 + 2) = 0xBF80000000000000;
    v30 = v29 + 24;
    v31 = v22;
    v33 = v99;
    v32 = v100;
    v34 = v95;
    v35 = v96;
    v37 = v97;
    v36 = v98;
  }
  *(_QWORD *)(a2 + 8) = v30;
  v46 = (int)(v35 + v32 * v37 + v34 * MaxX);
  v47 = (int)(v36 + v32 * v33 + v31 * MaxX);
  if (v30 >= v27)
  {
    v49 = *(char **)a2;
    v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v30[-*(_QWORD *)a2] >> 3);
    v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_66;
    v52 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v49) >> 3);
    if (2 * v52 > v51)
      v51 = 2 * v52;
    if (v52 >= 0x555555555555555)
      v53 = 0xAAAAAAAAAAAAAAALL;
    else
      v53 = v51;
    if (v53)
    {
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(a2 + 16, v53);
      v49 = *(char **)a2;
      v30 = *(char **)(a2 + 8);
    }
    else
    {
      v54 = 0;
    }
    v55 = &v54[24 * v50];
    v27 = &v54[24 * v53];
    *(_QWORD *)v55 = v46;
    *((_QWORD *)v55 + 1) = v47;
    *((_QWORD *)v55 + 2) = 0xBF8000003F800000;
    v48 = v55 + 24;
    if (v30 != v49)
    {
      do
      {
        v56 = *(_OWORD *)(v30 - 24);
        *((_QWORD *)v55 - 1) = *((_QWORD *)v30 - 1);
        *(_OWORD *)(v55 - 24) = v56;
        v55 -= 24;
        v30 -= 24;
      }
      while (v30 != v49);
      v49 = *(char **)a2;
    }
    *(_QWORD *)a2 = v55;
    *(_QWORD *)(a2 + 8) = v48;
    *(_QWORD *)(a2 + 16) = v27;
    if (v49)
    {
      operator delete(v49);
      v27 = *v28;
    }
  }
  else
  {
    *(_QWORD *)v30 = v46;
    *((_QWORD *)v30 + 1) = v47;
    *((_QWORD *)v30 + 2) = 0xBF8000003F800000;
    v48 = v30 + 24;
  }
  *(_QWORD *)(a2 + 8) = v48;
  v57 = (int)(v88 + MaxY * v89 + v92 * v94);
  v58 = (int)(v90 + MaxY * v91 + v93 * v94);
  if (v48 >= v27)
  {
    v60 = *(char **)a2;
    v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v48[-*(_QWORD *)a2] >> 3);
    v62 = v61 + 1;
    if (v61 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_66;
    v63 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v60) >> 3);
    if (2 * v63 > v62)
      v62 = 2 * v63;
    if (v63 >= 0x555555555555555)
      v64 = 0xAAAAAAAAAAAAAAALL;
    else
      v64 = v62;
    if (v64)
    {
      v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(a2 + 16, v64);
      v60 = *(char **)a2;
      v48 = *(char **)(a2 + 8);
    }
    else
    {
      v65 = 0;
    }
    v66 = &v65[24 * v61];
    v27 = &v65[24 * v64];
    *(_QWORD *)v66 = v57;
    *((_QWORD *)v66 + 1) = v58;
    *((_QWORD *)v66 + 2) = 0xBF80000040000000;
    v59 = v66 + 24;
    if (v48 != v60)
    {
      do
      {
        v67 = *(_OWORD *)(v48 - 24);
        *((_QWORD *)v66 - 1) = *((_QWORD *)v48 - 1);
        *(_OWORD *)(v66 - 24) = v67;
        v66 -= 24;
        v48 -= 24;
      }
      while (v48 != v60);
      v60 = *(char **)a2;
    }
    *(_QWORD *)a2 = v66;
    *(_QWORD *)(a2 + 8) = v59;
    *(_QWORD *)(a2 + 16) = v27;
    if (v60)
    {
      operator delete(v60);
      v27 = *v28;
    }
  }
  else
  {
    *(_QWORD *)v48 = v57;
    *((_QWORD *)v48 + 1) = v58;
    *((_QWORD *)v48 + 2) = 0xBF80000040000000;
    v59 = v48 + 24;
  }
  *(_QWORD *)(a2 + 8) = v59;
  v68 = vmovn_s64(vcvtq_s64_f64(vaddq_f64(v84, vmlaq_n_f64(vmulq_n_f64(v82, v83), v85, v86))));
  *(_QWORD *)&v69 = v68.i32[0];
  *((_QWORD *)&v69 + 1) = v68.i32[1];
  v70 = v69;
  if (v59 < v27)
  {
    *(_OWORD *)v59 = v70;
    *((_QWORD *)v59 + 2) = 0xBF80000040400000;
    v71 = v59 + 24;
    goto LABEL_65;
  }
  v72 = *(_BYTE **)a2;
  v73 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v59[-*(_QWORD *)a2] >> 3);
  v74 = v73 + 1;
  if (v73 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_66:
    std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
  v75 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v72) >> 3);
  if (2 * v75 > v74)
    v74 = 2 * v75;
  if (v75 >= 0x555555555555555)
    v76 = 0xAAAAAAAAAAAAAAALL;
  else
    v76 = v74;
  if (v76)
  {
    v101 = v70;
    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>(a2 + 16, v76);
    v70 = v101;
    v78 = v77;
    v72 = *(_BYTE **)a2;
    v59 = *(char **)(a2 + 8);
  }
  else
  {
    v78 = 0;
  }
  v79 = &v78[24 * v73];
  v80 = &v78[24 * v76];
  *(_OWORD *)v79 = v70;
  *((_QWORD *)v79 + 2) = 0xBF80000040400000;
  v71 = v79 + 24;
  if (v59 != v72)
  {
    do
    {
      v81 = *(_OWORD *)(v59 - 24);
      *((_QWORD *)v79 - 1) = *((_QWORD *)v59 - 1);
      *(_OWORD *)(v79 - 24) = v81;
      v79 -= 24;
      v59 -= 24;
    }
    while (v59 != v72);
    v72 = *(_BYTE **)a2;
  }
  *(_QWORD *)a2 = v79;
  *(_QWORD *)(a2 + 8) = v71;
  *(_QWORD *)(a2 + 16) = v80;
  if (v72)
    operator delete(v72);
LABEL_65:
  *(_QWORD *)(a2 + 8) = v71;
}

void sub_1BE38F494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE38F5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE38F6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE38F72C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE38F8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE38F92C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE38F96C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE38FC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  ClipperLib::ClipperOffset::~ClipperOffset((ClipperLib::ClipperOffset *)&a17);
  _Unwind_Resume(a1);
}

void sub_1BE38FD10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE38FDF0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE390A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, ClipperLib::ClipperBase *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  uint64_t a69;
  void *v70;
  void *v71;
  void *v72;

  STACK[0x320] = (unint64_t)&a66;
  std::vector<std::vector<ClipperLib::PolyNode *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&a69);
  a69 = (uint64_t)&STACK[0x248];
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  STACK[0x380] = (unint64_t)&off_1E7774540;
  STACK[0x410] = (unint64_t)&off_1E7774588;
  std::__list_imp<long long>::clear(a9);
  v70 = (void *)STACK[0x3B8];
  if (STACK[0x3B8])
  {
    STACK[0x3C0] = (unint64_t)v70;
    operator delete(v70);
  }
  v71 = (void *)STACK[0x3A0];
  if (STACK[0x3A0])
  {
    STACK[0x3A8] = (unint64_t)v71;
    operator delete(v71);
  }
  v72 = (void *)STACK[0x388];
  if (STACK[0x388])
  {
    STACK[0x390] = (unint64_t)v72;
    operator delete(v72);
  }
  ClipperLib::ClipperBase::~ClipperBase(a10);

  _Unwind_Resume(a1);
}

void sub_1BE390D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE390ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ClipperLib::ClipperOffset::~ClipperOffset((ClipperLib::ClipperOffset *)&a9);
  _Unwind_Resume(a1);
}

void sub_1BE39114C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE391444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v43;

  v41 = v38;

  _Block_object_dispose(&a29, 8);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 152), 8);
  v43 = *(void **)(v40 - 104);
  if (v43)
  {
    *(_QWORD *)(v40 - 96) = v43;
    operator delete(v43);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7_0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__8_0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE391CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE391F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a29);
  _Unwind_Resume(a1);
}

void sub_1BE3925DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1BE3928D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,char a44)
{
  void *v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)(v46 - 72) = v45;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 72));
  _Block_object_dispose(&a35, 8);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a44);

  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE392D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v39 - 104) = v38;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 104));
  if (__p)
    operator delete(__p);
  if (a35)
    operator delete(a35);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a38);
  _Unwind_Resume(a1);
}

void sub_1BE393D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a67;
  char a70;
  void *v70;
  uint64_t v71;
  unint64_t v72;
  void *v74;

  STACK[0x320] = v72;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);

  _Block_object_dispose(&a47, 8);
  STACK[0x320] = a28;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  _Block_object_dispose(&a57, 8);
  a47 = v71;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  a57 = &a67;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  a47 = (uint64_t)&a70;
  std::vector<Bucket>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);

  _Block_object_dispose(&STACK[0x2C0], 8);
  a47 = a10;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  v74 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v74;
    operator delete(v74);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__75(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__76(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1BE3940A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id std::vector<PKStroke * {__strong}>::push_back[abi:ne180100](_QWORD *a1, id *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  id result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int64x2_t v19;
  unint64_t v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = (_QWORD *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v9 = ((uint64_t)v6 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v12);
    else
      v13 = 0;
    v14 = (_QWORD *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = *a2;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = (_QWORD *)*a1;
    v16 = (_QWORD *)a1[1];
    if (v16 == (_QWORD *)*a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (_QWORD *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v15;
    v23 = v20;
    v21 = v19.i64[0];
    result = (id)std::__split_buffer<PKStroke * {__strong}>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    result = *a2;
    *v6 = result;
    v8 = v6 + 1;
  }
  a1[1] = v8;
  return result;
}

__n128 __Block_byref_object_copy__82(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__83(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1BE3943A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

char *__copy_helper_block_ea8_40c71_ZTSNSt3__16vectorIU8__strongP7NSArrayIP8PKStrokeENS_9allocatorIS6_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = a1 + 40;
  *(_QWORD *)(v2 + 16) = 0;
  return std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::__init_with_size[abi:ne180100]<NSArray<PKStroke *> * {__strong}*,NSArray<PKStroke *> * {__strong}*>((char *)v2, *(void ***)(a2 + 40), *(void ***)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 3);
}

void __destroy_helper_block_ea8_40c71_ZTSNSt3__16vectorIU8__strongP7NSArrayIP8PKStrokeENS_9allocatorIS6_EEEE(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1BE3944A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3945A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE3949EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52)
{
  void *v52;
  void *v53;
  uint64_t v54;

  _Block_object_dispose(&a36, 8);
  *(_QWORD *)(v54 - 248) = a10;
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)(v54 - 248));
  _Block_object_dispose(&a45, 8);
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__90(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__91(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE394CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1BE394F34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::vector<ClipperLib::IntPoint>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<ClipperLib::IntPoint>*>,std::__wrap_iter<std::vector<ClipperLib::IntPoint>*>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  _QWORD *v37;
  _QWORD v38[3];
  char v39;
  char *v40;
  char *v41;

  if (a5 >= 1)
  {
    v6 = a3;
    v7 = result;
    v8 = *result;
    v9 = (a2 - *result) / 24;
    v10 = *result + 24 * v9;
    v12 = (uint64_t)(result + 2);
    v11 = result[2];
    v13 = (uint64_t *)result[1];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v13) >> 3)) >= a5)
    {
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - v10) >> 3)) >= a5)
      {
        v18 = a3 + 24 * a5;
        result = (uint64_t *)result[1];
      }
      else
      {
        v18 = a3 + 8 * (((uint64_t)v13 - v10) >> 3);
        result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*,std::vector<ClipperLib::IntPoint>*>((uint64_t)(result + 2), v18, a4, v13);
        v7[1] = (uint64_t)result;
        if ((uint64_t)v13 - v10 < 1)
          return result;
      }
      v19 = (_QWORD *)(v10 + 24 * a5);
      v20 = &result[-3 * a5];
      v21 = result;
      if (v20 < v13)
      {
        v21 = result;
        do
        {
          *v21 = 0;
          v21[1] = 0;
          v21[2] = 0;
          *(_OWORD *)v21 = *(_OWORD *)v20;
          v21[2] = v20[2];
          *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
          v21 += 3;
          v20 += 3;
        }
        while (v20 < v13);
      }
      v7[1] = (uint64_t)v21;
      if (result != v19)
      {
        v22 = (uint64_t)(result - 3);
        v23 = 8 * (result - v19);
        do
        {
          std::vector<ClipperLib::IntPoint>::__move_assign(v22, (__n128 *)(v8 + 24 * v9 - 24 + v23));
          v22 -= 24;
          v23 -= 24;
        }
        while (v23);
      }
      return (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *,std::vector<ClipperLib::IntPoint> *>((int)&v34, v6, v18, (char *)v10);
    }
    else
    {
      v14 = a5 - 0x5555555555555555 * (((uint64_t)v13 - v8) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v8) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v37 = result + 2;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::IntPoint>>((uint64_t)(result + 2), v16);
      else
        v17 = 0;
      v24 = &v17[24 * v9];
      v34 = v17;
      *(_QWORD *)&v35 = v24;
      *((_QWORD *)&v35 + 1) = v24;
      v36 = &v17[24 * v16];
      v25 = 3 * a5;
      v26 = &v24[24 * a5];
      v27 = 8 * v25;
      do
      {
        *(_QWORD *)v24 = 0;
        *((_QWORD *)v24 + 1) = 0;
        *((_QWORD *)v24 + 2) = 0;
        std::vector<ClipperLib::IntPoint>::__init_with_size[abi:ne180100]<ClipperLib::IntPoint*,ClipperLib::IntPoint*>(v24, *(const void **)v6, *(_QWORD *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
        v24 += 24;
        v6 += 24;
        v27 -= 24;
      }
      while (v27);
      *((_QWORD *)&v35 + 1) = v26;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<ClipperLib::IntPoint>>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>,std::reverse_iterator<std::vector<ClipperLib::IntPoint>*>>(v12, v10, (_QWORD *)v10, *v7, (_QWORD *)*v7, v35, v35);
      *(_QWORD *)&v35 = v28;
      v29 = v7[1];
      v30 = v26;
      v40 = v26;
      v41 = v26;
      v38[0] = v12;
      v38[1] = &v40;
      v38[2] = &v41;
      if (v29 != v10)
      {
        do
        {
          *(_QWORD *)v30 = 0;
          *((_QWORD *)v30 + 1) = 0;
          *((_QWORD *)v30 + 2) = 0;
          *(_OWORD *)v30 = *(_OWORD *)v10;
          *((_QWORD *)v30 + 2) = *(_QWORD *)(v10 + 16);
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          v30 += 24;
          v10 += 24;
        }
        while (v10 != v29);
        v41 = v30;
      }
      v39 = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<ClipperLib::IntPoint>>,std::vector<ClipperLib::IntPoint>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v38);
      v31 = *(_OWORD *)v7;
      v32 = (uint64_t)v36;
      *v7 = v35;
      v7[1] = (uint64_t)v30;
      v35 = v31;
      v33 = v7[2];
      v7[2] = v32;
      v36 = (char *)v33;
      v34 = (char *)v31;
      return (uint64_t *)std::__split_buffer<std::vector<ClipperLib::IntPoint>>::~__split_buffer((uint64_t)&v34);
    }
  }
  return result;
}

void sub_1BE395290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

void ClipperLib::PolyTree::~PolyTree(ClipperLib::PolyTree *this)
{
  ClipperLib::PolyTree::~PolyTree(this);
  JUMPOUT(0x1C3B7F770);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E77745E0;
  ClipperLib::PolyTree::Clear(this);
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  ClipperLib::PolyNode::~PolyNode(this);
}

void std::vector<std::vector<ClipperLib::PolyNode *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 3);
        v6 -= 24;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 2) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<ClipperLib::PolyNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<ClipperLib::PolyNode **>,std::__wrap_iter<ClipperLib::PolyNode **>>(void **a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = (char *)*a1;
  v9 = a2 - (_QWORD)*a1;
  v10 = (char *)*a1 + (v9 & 0xFFFFFFFFFFFFFFF8);
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  v14 = *(_QWORD *)(v11 - 8);
  if (a5 > (uint64_t)&v13[-v14] >> 3)
  {
    v15 = a5 + ((uint64_t)(v14 - (_QWORD)v8) >> 3);
    if (v15 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v16 = v9 >> 3;
    v17 = v12 - v8;
    v18 = v17 >> 2;
    if (v17 >> 2 <= v15)
      v18 = v15;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v11, v19);
    else
      v20 = 0;
    v29 = &v20[8 * v16];
    v30 = &v29[8 * a5];
    v31 = 8 * a5;
    v32 = v29;
    do
    {
      v33 = *(_QWORD *)v6;
      v6 += 8;
      *(_QWORD *)v32 = v33;
      v32 += 8;
      v31 -= 8;
    }
    while (v31);
    v34 = (char *)*a1;
    if (*a1 != v10)
    {
      v35 = v10;
      do
      {
        v36 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v29 - 1) = v36;
        v29 -= 8;
      }
      while (v35 != v34);
    }
    v37 = &v20[8 * v19];
    v38 = a1[1];
    v39 = v38 - v10;
    if (v38 != v10)
      memmove(v30, v10, v38 - v10);
    v40 = *a1;
    *a1 = v29;
    a1[1] = &v30[v39];
    a1[2] = v37;
    if (v40)
      operator delete(v40);
    return;
  }
  v21 = (uint64_t)(v14 - (_QWORD)v10) >> 3;
  if (v21 >= a5)
  {
    v22 = &__src[8 * a5];
    v24 = *(char **)(v11 - 8);
LABEL_17:
    v25 = &v10[8 * a5];
    v26 = (uint64_t *)&v24[-8 * a5];
    v27 = v24;
    if ((unint64_t)v26 < v14)
    {
      v27 = v24;
      do
      {
        v28 = *v26++;
        *(_QWORD *)v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v14);
    }
    a1[1] = v27;
    if (v24 != v25)
      memmove(&v24[-8 * ((v24 - v25) >> 3)], v10, v24 - v25);
    if (v22 != v6)
      memmove(v10, v6, v22 - v6);
    return;
  }
  v22 = &__src[8 * v21];
  v23 = a4 - v22;
  if (a4 != v22)
    memmove(*(void **)(v11 - 8), &__src[8 * v21], a4 - v22);
  v24 = (char *)(v14 + v23);
  a1[1] = (void *)(v14 + v23);
  if ((uint64_t)(v14 - (_QWORD)v10) >= 1)
    goto LABEL_17;
}

char *std::vector<CGPoint>::__assign_with_size[abi:ne180100]<CGPoint*,CGPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<CGPoint>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        v4 -= 8;

      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<PKStroke * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;

  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<Bucket>::push_back[abi:ne180100](_QWORD *result, uint64_t a2)
{
  char **v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  v3 = (char **)result;
  v4 = result[2];
  v5 = result[1];
  if (v5 >= v4)
  {
    v9 = (uint64_t)(v5 - *result) >> 6;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 58)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v11 = v4 - *result;
    if (v11 >> 5 > v10)
      v10 = v11 >> 5;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFC0)
      v12 = 0x3FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v28 = result + 2;
    if (v12)
    {
      if (v12 >> 58)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(v12 << 6);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[64 * v9];
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    v15 = &v13[64 * v12];
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(v14 + 40) = *(_OWORD *)(a2 + 40);
    *((_QWORD *)v14 + 7) = *(_QWORD *)(a2 + 56);
    v8 = v14 + 64;
    v26.i64[1] = (uint64_t)(v14 + 64);
    v27 = v15;
    v17 = *v3;
    v16 = (unint64_t)v3[1];
    if ((char *)v16 == *v3)
    {
      v23 = vdupq_n_s64(v16);
    }
    else
    {
      v18 = 0;
      do
      {
        v19 = &v14[v18];
        v20 = v16 + v18;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v19 - 6) = 0;
        *((_OWORD *)v19 - 4) = *(_OWORD *)(v16 + v18 - 64);
        *((_QWORD *)v19 - 6) = *(_QWORD *)(v16 + v18 - 48);
        *(_QWORD *)(v20 - 64) = 0;
        *(_QWORD *)(v20 - 56) = 0;
        *(_QWORD *)(v20 - 48) = 0;
        v21 = *(_OWORD *)(v16 + v18 - 40);
        v22 = *(_OWORD *)(v16 + v18 - 24);
        *((_QWORD *)v19 - 1) = *(_QWORD *)(v16 + v18 - 8);
        *(_OWORD *)(v19 - 24) = v22;
        *(_OWORD *)(v19 - 40) = v21;
        v18 -= 64;
      }
      while ((char *)(v16 + v18) != v17);
      v23 = *(int64x2_t *)v3;
      v14 += v18;
      v8 = (char *)v26.i64[1];
      v15 = v27;
    }
    *v3 = v14;
    v3[1] = v8;
    v26 = v23;
    v24 = v3[2];
    v3[2] = v15;
    v27 = v24;
    v25 = v23.i64[0];
    result = (_QWORD *)std::__split_buffer<Bucket>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v6 = *(_OWORD *)(a2 + 24);
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(v5 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(v5 + 40) = v7;
    *(_OWORD *)(v5 + 24) = v6;
    v8 = (char *)(v5 + 64);
  }
  v3[1] = v8;
  return result;
}

void std::vector<long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t std::__split_buffer<Bucket>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 64);
    *(_QWORD *)(a1 + 16) = v2 - 64;
    if (v4)
    {
      *(_QWORD *)(v2 - 56) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::vector(_QWORD *a1, unint64_t a2, id *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BE395B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;

  if (a2 >> 61)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void ___ZL12sliceBucketsPNSt3__16vectorINS0_IN10ClipperLib8IntPointENS_9allocatorIS2_EEEENS3_IS5_EEEERNS0_IU8__strongP8PKStrokeNS3_ISB_EEEERNS0_I6BucketNS3_ISF_EEEERNS0_IU8__strongP7NSArrayISA_ENS3_ISM_EEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", (uint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + (a2 << 6) + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 32) + (a2 << 6))) >> 3);
  v14 = (id)objc_claimAutoreleasedReturnValue();
  v4 = **(_QWORD **)(a1 + 32) + (a2 << 6);
  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD **)(v4 + 8);
  while (v5 != v6)
    objc_msgSend(v14, "addObject:", *(_QWORD *)(**(_QWORD **)(a1 + 40) + 8 * *v5++));
  +[PKStroke sliceWithEraser:toClip:](PKStroke, "sliceWithEraser:toClip:", *(_QWORD *)(a1 + 48), v14);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = 0;
  v9 = a2 << 6;
  while (v8 < objc_msgSend(v7, "count"))
  {
    v10 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 32) + v9) + 8 * v8);
    objc_msgSend(v7, "objectAtIndexedSubscript:", v8);
    v11 = objc_claimAutoreleasedReturnValue();
    v12 = **(_QWORD **)(a1 + 56);
    v13 = *(void **)(v12 + 8 * v10);
    *(_QWORD *)(v12 + 8 * v10) = v11;

    ++v8;
  }

}

void sub_1BE395C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *std::vector<PKStroke * {__strong}>::vector(_QWORD *a1, unint64_t a2, id *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v7];
    v8 = &v6[a2];
    v9 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v9 -= 8;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1BE395D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::__init_with_size[abi:ne180100]<NSArray<PKStroke *> * {__strong}*,NSArray<PKStroke *> * {__strong}*>(char *result, void **a2, void **a3, unint64_t a4)
{
  char *v6;
  char **v7;
  void *v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<NSArray<PKStroke *> * {__strong},std::allocator<NSArray<PKStroke *> * {__strong}>>::__vallocate[abi:ne180100](result, a4);
    v7 = (char **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      result = v8;
      *v7++ = result;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BE395DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<PKStroke * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<Bucket>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (char *)v1[1];
      do
      {
        v8 = (void *)*((_QWORD *)v6 - 8);
        v6 -= 64;
        v7 = v8;
        if (v8)
        {
          *((_QWORD *)v4 - 7) = v7;
          operator delete(v7);
        }
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PKProtobufUtilitiesFormatTooNew(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)MEMORY[0x1E0CB35C8];
    v6 = *MEMORY[0x1E0CB2D50];
    _PencilKitBundle();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Apple Drawing Format is from a future version that is too new."), CFSTR("Apple Drawing Format is from a future version that is too new."), CFSTR("Localizable"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 2, v5);
    *a1 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void sub_1BE395F6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void PKProtobufUtilitiesMalformedError(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (void *)MEMORY[0x1E0CB35C8];
    v6 = *MEMORY[0x1E0CB2D50];
    _PencilKitBundle();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Apple Drawing Format data is malformed."), CFSTR("Apple Drawing Format data is malformed."), CFSTR("Localizable"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = v4;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "errorWithDomain:code:userInfo:", *MEMORY[0x1E0CB28A8], 3, v5);
    *a1 = (id)objc_claimAutoreleasedReturnValue();

  }
}

void sub_1BE39609C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::CommandID::CommandID(uint64_t this)
{
  *(_QWORD *)this = &off_1E77747C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E77747C0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void legacy_drawing::CommandID::~CommandID(legacy_drawing::CommandID *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

uint64_t legacy_drawing::CommandID::CommandID(uint64_t this, const legacy_drawing::CommandID *a2)
{
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)this = &off_1E77747C0;
  *(_DWORD *)(this + 20) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    v4 = *((_DWORD *)a2 + 2);
    v3 = 1;
    *(_BYTE *)(this + 20) = 1;
    *(_DWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 4) != 0)
  {
LABEL_5:
    v5 = *((_DWORD *)a2 + 4);
    v3 |= 4u;
    *(_BYTE *)(this + 20) = v3;
    *(_DWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 20) = v3 | 2;
    *(_DWORD *)(this + 12) = v6;
  }
  return this;
}

uint64_t legacy_drawing::CommandID::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  void (**v5)(legacy_drawing::CommandID *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  void (**v11)(legacy_drawing::CommandID *__hidden);
  __int128 v12;

  if (a1 != a2)
  {
    v5 = &off_1E77747C0;
    v11 = &off_1E77747C0;
    HIDWORD(v12) = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      LODWORD(v5) = *(_DWORD *)(a2 + 8);
      v7 = 1;
      BYTE12(v12) = 1;
      if ((v6 & 4) != 0)
      {
LABEL_4:
        v2 = *(_DWORD *)(a2 + 16);
        v7 |= 4u;
        BYTE12(v12) = v7;
        if ((v6 & 2) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 4) != 0)
        goto LABEL_4;
    }
    if ((v6 & 2) != 0)
    {
LABEL_8:
      v3 = *(_DWORD *)(a2 + 12);
      BYTE12(v12) = v7 | 2;
    }
LABEL_9:
    v8 = HIDWORD(v12);
    v9 = *(_OWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v8;
    *(_DWORD *)(a1 + 8) = (_DWORD)v5;
    *(_DWORD *)(a1 + 12) = v3;
    v12 = v9;
    PB::Base::~Base((PB::Base *)&v11);
  }
  return a1;
}

{
  __int128 v3;
  __int128 v4;
  void (**v6)(legacy_drawing::CommandID *__hidden);
  __int128 v7;

  if (a1 != a2)
  {
    v6 = &off_1E77747C0;
    v3 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v3;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

_DWORD *legacy_drawing::swap(_DWORD *this, legacy_drawing::CommandID *a2, legacy_drawing::CommandID *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = this[5];
  this[5] = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v6;
  return this;
}

uint64_t legacy_drawing::CommandID::CommandID(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_1E77747C0;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = &off_1E77747C0;
  *(_DWORD *)(result + 20) = a2[5];
  a2[5] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 16) = a2[4];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t legacy_drawing::CommandID::formatText(legacy_drawing::CommandID *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "replicaID");
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "clock");
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "subclock");
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::CommandID::readFrom(legacy_drawing::CommandID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 2u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v31) = 0;
LABEL_82:
          v3 = v45 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_DWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 4u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
LABEL_87:
          v3 = v49 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 20) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20++;
            v42 = *(_BYTE *)(v21 + v41);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v24) = 0;
LABEL_77:
          v3 = v41 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t legacy_drawing::CommandID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL legacy_drawing::CommandID::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 4) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 2) == 0;
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
    return (*(_BYTE *)(a2 + 20) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t legacy_drawing::CommandID::hash_value(legacy_drawing::CommandID *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 4) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((unsigned int *)this + 2);
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((unsigned int *)this + 4);
  if ((*((_BYTE *)this + 20) & 2) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((unsigned int *)this + 3);
  return v2 ^ v1 ^ v3;
}

void sub_1BE397148(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

char *std::vector<double>::insert(char **a1, char *a2, char *a3)
{
  char *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  int64_t v33;
  char *v34;
  size_t v35;
  char *v36;
  char *v37;

  v3 = a3;
  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF8];
  v10 = (uint64_t)(a1 + 2);
  v9 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v9)
  {
    v15 = ((v5 - v6) >> 3) + 1;
    if (v15 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v17 = v7 >> 3;
    v18 = v9 - (_QWORD)v6;
    if (v18 >> 2 > v15)
      v15 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v15;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), v19);
    else
      v20 = 0;
    v21 = &v20[8 * v17];
    v22 = &v20[8 * v19];
    if (v17 == v19)
    {
      if (v7 < 1)
      {
        if (v6 == a2)
          v24 = 1;
        else
          v24 = v7 >> 2;
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v10, v24);
        v21 = &v25[8 * (v24 >> 2)];
        v22 = &v25[8 * v26];
        if (v20)
        {
          v27 = &v25[8 * v26];
          operator delete(v20);
          v22 = v27;
        }
      }
      else
      {
        v23 = v17 + 2;
        if (v17 >= -1)
          v23 = v17 + 1;
        v21 -= 8 * (v23 >> 1);
      }
    }
    *(_QWORD *)v21 = *(_QWORD *)v3;
    v28 = *a1;
    v29 = v21;
    if (*a1 != v8)
    {
      v30 = v8;
      v29 = v21;
      do
      {
        v31 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      while (v30 != v28);
    }
    v32 = a1[1];
    v33 = v32 - v8;
    if (v32 != v8)
    {
      v34 = v8;
      v35 = v32 - v8;
      v36 = v22;
      memmove(v21 + 8, v34, v35);
      v22 = v36;
    }
    v37 = *a1;
    *a1 = v29;
    a1[1] = &v21[v33 + 8];
    a1[2] = v22;
    if (v37)
      operator delete(v37);
    return v21;
  }
  else if (v8 == v5)
  {
    *(_QWORD *)v8 = *(_QWORD *)a3;
    a1[1] = v8 + 8;
  }
  else
  {
    v11 = v8 + 8;
    v12 = v5 - 8;
    v13 = a1[1];
    while (v12 < v5)
    {
      v14 = *(_QWORD *)v12;
      v12 += 8;
      *(_QWORD *)v13 = v14;
      v13 += 8;
    }
    a1[1] = v13;
    if (v5 != v11)
      memmove(&v5[-8 * ((v5 - v11) >> 3)], v8, v5 - v11);
    if (v8 <= v3)
      v3 += 8 * (a1[1] > v3);
    *(_QWORD *)v8 = *(_QWORD *)v3;
  }
  return v8;
}

void sub_1BE397520(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1BE398988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location,id a38)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE39A2A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BE39A470(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

uint64_t PKHoverInputPointDescription(_QWORD *a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("HoverInputPoint at (%g %g), z: %g, alt: %g, azi: %g]"), *a1, a1[1], a1[7], a1[4], a1[3]);
}

void sub_1BE39AAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39AC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39ADB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39B210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE39B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKHoverController;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE39B448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39B5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE39BB10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL isPencilGesture(UIHoverGestureRecognizer *a1)
{
  UIHoverGestureRecognizer *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    -[UIHoverGestureRecognizer _allActiveTouches](v1, "_allActiveTouches");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "count") == 1)
    {
      objc_msgSend(v2, "anyObject");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = v3;
      if (v3 && objc_msgSend(v3, "type") == 2)
      {
        v4 = v4;
        v5 = v4;
LABEL_9:

        goto LABEL_10;
      }
    }
    else
    {
      v4 = 0;
    }
    v5 = 0;
    goto LABEL_9;
  }
  v5 = 0;
LABEL_10:

  return v5 != 0;
}

void sub_1BE39BC38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE39C128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE39C260(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39C3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;

  _Unwind_Resume(a1);
}

void sub_1BE39C464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39C60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39C690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39C790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE39C7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39C9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE39CCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39CDC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39D308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39D478(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39D540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39D5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE39D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE39D8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39D98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE39DAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39DBB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39DC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39DDB4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE39DE50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39DEA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39E9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE39EC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE39F39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE39F43C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE39F4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKImageRenderer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE39F638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE39F710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE39F804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE39FD68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE39FEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE39FF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3A001C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE3A0524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3A05F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE3A07F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3A0970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE3A0A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t _fuzzOneInput(uint64_t a1, uint64_t a2)
{
  void *v2;

  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[PKImageRenderer _fuzzTestUnzippedData:](PKImageRenderer, "_fuzzTestUnzippedData:", v2);

  return 0;
}

void sub_1BE3A0B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3A10E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3A1234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3A12C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3A135C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3A1418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3A33AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location)
{
  uint64_t v10;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v10 - 216));
  _Block_object_dispose((const void *)(v10 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_1BE3A3760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE3A3810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t drawingV1::Ink::Ink(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7774AD0;
  return this;
}

{
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7774AD0;
  return this;
}

void drawingV1::Ink::~Ink(drawingV1::Ink *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7774AD0;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

{
  drawingV1::Ink::~Ink(this);
  JUMPOUT(0x1C3B7F770);
}

drawingV1::Ink *drawingV1::Ink::Ink(drawingV1::Ink *this, const drawingV1::Color **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  drawingV1::Color *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  const drawingV1::Color *v12;
  __int128 v13;
  uint64_t v14;
  const drawingV1::Color *v15;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E7774AD0;
  *((_QWORD *)this + 2) = 0;
  v5 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 8) = 0;
  if (a2[1])
  {
    v6 = (drawingV1::Color *)operator new();
    v7 = drawingV1::Color::Color(v6, a2[1]);
    v8 = *v4;
    *v4 = v9;
    if (v8)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v8 + 8))(v8, v7);
  }
  if (a2[2])
  {
    v10 = (std::string *)operator new();
    v11 = v10;
    v12 = a2[2];
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v13 = *(_OWORD *)v12;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
    }
    v14 = *v5;
    *v5 = (uint64_t)v11;
    if (v14)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v5, v14);
  }
  if (((_BYTE)a2[4] & 1) != 0)
  {
    v15 = a2[3];
    *((_BYTE *)this + 32) |= 1u;
    *((_QWORD *)this + 3) = v15;
  }
  return this;
}

uint64_t drawingV1::Ink::operator=(uint64_t a1, const drawingV1::Color **a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if ((const drawingV1::Color **)a1 != a2)
  {
    drawingV1::Ink::Ink((drawingV1::Ink *)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    drawingV1::Ink::~Ink((drawingV1::Ink *)v7);
  }
  return a1;
}

uint64_t drawingV1::swap(uint64_t this, drawingV1::Ink *a2, drawingV1::Ink *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  v6 = *(_QWORD *)(this + 24);
  v7 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(this + 24) = v7;
  *((_QWORD *)a2 + 2) = v5;
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t drawingV1::Ink::Ink(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_QWORD *)a1 = &off_1E7774AD0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *v4;
  *v4 = v7;
  if (v8)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v4, v8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t drawingV1::Ink::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  uint64_t v5;
  _BYTE v7[8];
  __int128 v8;
  uint64_t v9;
  int v10;

  if (a1 != a2)
  {
    drawingV1::Ink::Ink((uint64_t)v7, a2);
    v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    v10 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v5 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v9;
    v9 = v5;
    drawingV1::Ink::~Ink((drawingV1::Ink *)v7);
  }
  return a1;
}

uint64_t drawingV1::Ink::formatText(drawingV1::Ink *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "color");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 32) & 1) != 0)
    PB::TextFormatter::format(a2, "version");
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Ink::readFrom(drawingV1::Ink *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;
  uint64_t v40;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)((char *)this + 16);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_26:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        *((_BYTE *)this + 32) |= 1u;
        v25 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_56;
            }
            v38 = v25 + 1;
            v39 = *(_BYTE *)(v27 + v25);
            *((_QWORD *)a2 + 1) = v38;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v25 = v38;
            v15 = v37++ > 8;
            if (v15)
            {
LABEL_52:
              v30 = 0;
              goto LABEL_56;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v30 = 0;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v31 = v25 + 1;
            *((_QWORD *)a2 + 1) = v25 + 1;
            v32 = *(_BYTE *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0)
              break;
            v28 += 7;
            v25 = v31;
            v15 = v29++ > 8;
            if (v15)
              goto LABEL_52;
          }
        }
LABEL_56:
        *((_QWORD *)this + 3) = v30;
      }
      else if ((_DWORD)v22 == 2)
      {
        v33 = (_QWORD *)operator new();
        v33[1] = 0;
        v33[2] = 0;
        *v33 = 0;
        v40 = 0;
        v34 = *v8;
        *v8 = (uint64_t)v33;
        if (v34)
        {
          std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v8, v34);
          v35 = v40;
          v40 = 0;
          if (v35)
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)&v40, v35);
        }
        PB::Reader::read();
      }
      else if ((_DWORD)v22 == 1)
      {
        v23 = (_DWORD *)operator new();
        *(_QWORD *)v23 = &off_1E7774B08;
        v23[6] = 0;
        v24 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = (_DWORD *)*((_QWORD *)this + 1);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
LABEL_20:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_26;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_20;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t drawingV1::Ink::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = this;
  v4 = *(const PB::Base **)(this + 8);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if (*(_QWORD *)(v3 + 16))
    this = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL drawingV1::Ink::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!v5 || !drawingV1::Color::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = *(unsigned __int8 ***)(a2 + 16);
  if (v6)
  {
    if (!v7)
      return 0;
    v8 = v6[23];
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)v6[23];
    else
      v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
    v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    v11 = (char)v10;
    if ((char)v10 < 0)
      v10 = v7[1];
    if (v9 != v10)
      return 0;
    if (v11 >= 0)
      v12 = *(unsigned __int8 **)(a2 + 16);
    else
      v12 = *v7;
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, v12, *((_QWORD *)v6 + 1)))
        return 0;
    }
    else if (v6[23])
    {
      while (*v6 == *v12)
      {
        ++v6;
        ++v12;
        if (!--v8)
          goto LABEL_23;
      }
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
LABEL_23:
  result = (*(_BYTE *)(a2 + 32) & 1) == 0;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return result;
  return (*(_BYTE *)(a2 + 32) & 1) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
}

unint64_t drawingV1::Ink::hash_value(drawingV1::Ink *this)
{
  drawingV1::Color *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v8;

  v2 = (drawingV1::Color *)*((_QWORD *)this + 1);
  if (v2)
    v3 = drawingV1::Color::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v8, v4);
  else
    v5 = 0;
  if ((*((_BYTE *)this + 32) & 1) != 0)
    v6 = *((_QWORD *)this + 3);
  else
    v6 = 0;
  return v5 ^ v3 ^ v6;
}

_QWORD *drawingV1::Ink::makeColor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774B08;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void sub_1BE3A5E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;

  va_start(va, a3);
  v5 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<CGPoint,`anonymous namespace'::HashFunctions,std::equal_to<CGPoint>,std::allocator<CGPoint>>::~unordered_set[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1BE3A5FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE3A60BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3A61B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL operator<(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 16) < *(double *)(a2 + 16);
}

void sub_1BE3A6C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE3A7124(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BE3A76F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Unwind_Resume(a1);
}

char *std::vector<CGPoint>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 4) + 1;
    if (v14 >> 60)
      std::vector<CGPoint>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 4;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 3 > v14)
      v14 = v17 >> 3;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[16 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[16 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 3;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(v8, v22);
        v20 = &v23[16 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[16 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 16 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_OWORD *)v20 = *(_OWORD *)v3;
    v28 = v20 + 16;
    v4 = (char *)std::vector<CGPoint>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_OWORD *)__src = *(_OWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 16;
  }
  else
  {
    v9 = __src + 16;
    v10 = v6 - 16;
    v11 = *(_OWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_OWORD *)v10;
      v10 += 16;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-16 * ((v6 - v9) >> 4)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 16 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_OWORD *)v4 = *(_OWORD *)v3;
  }
  return v4;
}

void sub_1BE3A7938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::unordered_set<`anonymous namespace'::Edge,`anonymous namespace'::HashFunctions,std::equal_to<`anonymous namespace'::Edge>,std::allocator<`anonymous namespace'::Edge>>::insert[abi:ne180100](uint64_t a1, double *a2)
{
  unint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  double **v9;
  double *i;
  unint64_t v11;
  _QWORD *v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = PKHashBytes((uint64_t)a2, 32);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v7)
        v2 = v5 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v5;
    }
    v9 = *(double ***)(*(_QWORD *)a1 + 8 * v2);
    if (v9)
    {
      for (i = *v9; i; i = *(double **)i)
      {
        v11 = *((_QWORD *)i + 1);
        if (v11 == v5)
        {
          if (i[2] == *a2 && i[3] == a2[1] && i[4] == a2[2] && i[5] == a2[3])
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v2)
            break;
        }
      }
    }
  }
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v6;
  v15 = *((_OWORD *)a2 + 1);
  *((_OWORD *)v14 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v14 + 2) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v18 = 1;
    if (v7 >= 3)
      v18 = (v7 & (v7 - 1)) != 0;
    v19 = v18 | (2 * v7);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v23)
  {
    *v14 = *v23;
LABEL_47:
    *v23 = v14;
    goto LABEL_48;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v22 + 8 * v2) = a1 + 16;
  if (*v14)
  {
    v24 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7)
        v24 %= v7;
    }
    else
    {
      v24 &= v7 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BE3A7B8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<CGPoint,`anonymous namespace'::HashFunctions,std::equal_to<CGPoint>,std::allocator<CGPoint>>::__rehash_unique[abi:ne180100](uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int8 *v11;
  uint64_t v12;
  __n128 *v13;
  double v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t v20;
  __n128 *v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  uint64_t v29;
  __n128 *v30;
  __int128 v31;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      result.n128_u64[0] = a2[-1].n128_u64[1];
      if (result.n128_f64[0] < a1[1].n128_f64[0])
      {
        v8 = a1[1].n128_u64[0];
        result = *a1;
        v9 = a2[-1].n128_u64[1];
        *a1 = *(__n128 *)((char *)a2 - 24);
        a1[1].n128_u64[0] = v9;
        *(__n128 *)((char *)a2 - 24) = result;
        a2[-1].n128_u64[1] = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = a4;
      v20 = a3 >> 1;
      v21 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v23 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(a1, v21, v22, a4, result);
        v24 = v19 + 24 * v20;
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v24, v23).n128_u64[0];
        v25 = (__n128 *)(v19 + 24 * a3);
        v26 = (__n128 *)v24;
        while (v26 != v25)
        {
          if (v26[1].n128_f64[0] >= *(double *)(v19 + 16))
          {
            result = *(__n128 *)v19;
            v7[1].n128_u64[0] = *(_QWORD *)(v19 + 16);
            *v7 = result;
            v19 += 24;
          }
          else
          {
            result = *v26;
            v7[1].n128_u64[0] = v26[1].n128_u64[0];
            *v7 = result;
            v26 = (__n128 *)((char *)v26 + 24);
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v19 == v24)
          {
            if (v26 != v25)
            {
              v27 = 0;
              do
              {
                v28 = (__n128 *)((char *)v7 + v27);
                result = *(__n128 *)((char *)v26 + v27);
                v28[1].n128_u64[0] = v26[1].n128_u64[v27 / 8];
                *v28 = result;
                v27 += 24;
              }
              while ((__n128 *)((char *)v26 + v27) != v25);
            }
            return result;
          }
        }
        if (v19 != v24)
        {
          v29 = 0;
          do
          {
            v30 = (__n128 *)((char *)v7 + v29);
            result = *(__n128 *)(v19 + v29);
            v30[1].n128_u64[0] = *(_QWORD *)(v19 + v29 + 16);
            *v30 = result;
            v29 += 24;
          }
          while (v19 + v29 != v24);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(a1, v21, v22, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v19, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(v7->n128_f64, &v7->n128_f64[3 * (a3 >> 1)], a2->n128_f64, a3 >> 1, a3 - (a3 >> 1), (char *)v19, a5);
      }
    }
    else if (a1 != a2)
    {
      v11 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v12 = 0;
        v13 = a1;
        do
        {
          result.n128_u64[0] = v13[2].n128_u64[1];
          v14 = v13[1].n128_f64[0];
          v13 = (__n128 *)v11;
          if (result.n128_f64[0] < v14)
          {
            v31 = *(_OWORD *)v11;
            v15 = v12;
            while (1)
            {
              v16 = (char *)a1 + v15;
              *(__n128 *)(v16 + 24) = *(__n128 *)((char *)a1 + v15);
              *((_QWORD *)v16 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v15);
              if (!v15)
                break;
              v15 -= 24;
              if (result.n128_f64[0] >= *((double *)v16 - 1))
              {
                v17 = (uint64_t)&a1[1].n128_i64[1] + v15;
                goto LABEL_15;
              }
            }
            v17 = (uint64_t)a1;
LABEL_15:
            *(_OWORD *)v17 = v31;
            *(_QWORD *)(v17 + 16) = result.n128_u64[0];
          }
          v11 = &v13[1].n128_i8[8];
          v12 += 24;
        }
        while (&v13[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if (a2[-1].n128_f64[1] >= a1[1].n128_f64[0])
      {
        v19 = *a1;
        *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *a1;
        v11 = a1[1].n128_u64[0];
      }
      *(_QWORD *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(a1, v20, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if (v21[1].n128_f64[0] >= v8[1].n128_f64[0])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v8;
          v16 = v14;
          v8 = v12;
          v14 += 24;
          v17 = v14;
          if (v15[2].n128_f64[1] < *(double *)(v16 + 16))
          {
            *(_OWORD *)v14 = *(_OWORD *)v16;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(v16 + 16);
            v17 = a4;
            if (v16 != a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = a4 + v18;
                if (v15[2].n128_f64[1] >= *(double *)(a4 + v18 - 8))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)(v17 - 24);
                *(_QWORD *)(v17 + 16) = *(_QWORD *)(v17 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
          }
          result = *v8;
          *(_QWORD *)(v17 + 16) = v8[1].n128_u64[0];
          *(__n128 *)v17 = result;
          v12 = (__n128 *)((char *)v8 + 24);
          v13 += 24;
        }
        while (&v8[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

double *std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(double *result, double *a2, double *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  double *v30;
  uint64_t v31;
  double *v32;
  double *v33;
  unint64_t v34;
  __int128 v35;
  BOOL v36;
  double *v37;
  double *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  double *v43;
  __int128 v44;
  uint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  __int128 v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  uint64_t v53;
  double *v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  double *v58;
  double *v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  __int128 v65;
  double *v66;
  double *v67;
  double v68;
  double v69;
  double *v70;
  __int128 v71;
  uint64_t v72;
  double *v73;
  __int128 v74;
  double *v75;
  __int128 v76;
  __int128 v77;
  double *v78;
  __int128 v79;
  unint64_t v80;
  double *v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;

  if (a5)
  {
    v10 = result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        v13 = &v10[v11 / 8];
        if (a2[2] < v10[v11 / 8 + 2])
          break;
        v11 += 24;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v15 = -v12;
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v78 = &v10[v11 / 8];
          v100 = v10[v11 / 8 + 2];
          v95 = *(_OWORD *)&v10[v11 / 8];
          v79 = *(_OWORD *)a2;
          v78[2] = a2[2];
          *(_OWORD *)v78 = v79;
          *(_OWORD *)a2 = v95;
          a2[2] = v100;
          return result;
        }
        if (v12 > 0)
          v15 = 1 - v12;
        v25 = v15 >> 1;
        v24 = a2;
        if (a2 != a3)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          v24 = a2;
          do
          {
            v27 = v26 >> 1;
            v28 = &v24[3 * (v26 >> 1)];
            v29 = v28[2];
            v30 = v28 + 3;
            v26 += ~(v26 >> 1);
            if (v29 < v10[3 * v25 + 2 + v11 / 8])
              v24 = v30;
            else
              v26 = v27;
          }
          while (v26);
        }
        v18 = &v10[3 * v25 + v11 / 8];
        v17 = 0xAAAAAAAAAAAAAAABLL * (v24 - a2);
      }
      else
      {
        if (a5 >= 0)
          v16 = a5;
        else
          v16 = a5 + 1;
        v17 = v16 >> 1;
        v18 = a2;
        if ((char *)a2 - (char *)v10 != v11)
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)a2 - (char *)v10 - v11) >> 3);
          v18 = &v10[v11 / 8];
          do
          {
            v20 = v19 >> 1;
            v21 = &v18[3 * (v19 >> 1)];
            v22 = v21[2];
            v23 = v21 + 3;
            v19 += ~(v19 >> 1);
            if (a2[3 * v17 + 2] < v22)
              v19 = v20;
            else
              v18 = v23;
          }
          while (v19);
        }
        v24 = &a2[3 * v17];
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((char *)v18 - (char *)v10 - v11) >> 3);
      }
      v90 = a6;
      if (v18 == a2)
      {
        a2 = v24;
      }
      else
      {
        v31 = (char *)v24 - (char *)a2;
        if (v24 == a2)
        {
          a2 = v18;
        }
        else
        {
          v32 = v18 + 3;
          if (v18 + 3 == a2)
          {
            v97 = *((_QWORD *)v18 + 2);
            v92 = *(_OWORD *)v18;
            v37 = a3;
            v83 = a7;
            v84 = v17;
            v86 = v25;
            v88 = a5;
            memmove(v18, a2, (char *)v24 - (char *)a2);
            v17 = v84;
            v25 = v86;
            a5 = v88;
            a7 = v83;
            a3 = v37;
            a2 = (double *)((char *)v18 + v31);
            *(_OWORD *)a2 = v92;
            *((_QWORD *)a2 + 2) = v97;
          }
          else
          {
            v33 = a2 + 3;
            if (a2 + 3 == v24)
            {
              a2 = v18 + 3;
              v98 = *((_QWORD *)v24 - 1);
              v93 = *(_OWORD *)(v24 - 3);
              if (v24 - 3 != v18)
              {
                v38 = a3;
                v85 = v17;
                v39 = a7;
                v87 = v25;
                v89 = a5;
                memmove(v18 + 3, v18, (char *)(v24 - 3) - (char *)v18);
                v17 = v85;
                v25 = v87;
                a5 = v89;
                a7 = v39;
                a2 = v18 + 3;
                a3 = v38;
              }
              *((_QWORD *)v18 + 2) = v98;
              *(_OWORD *)v18 = v93;
            }
            else
            {
              v34 = 0xAAAAAAAAAAAAAAABLL * (a2 - v18);
              if (v34 == 0xAAAAAAAAAAAAAAABLL * (v31 >> 3))
              {
                do
                {
                  v96 = *((_QWORD *)v32 - 1);
                  v91 = *(_OWORD *)(v32 - 3);
                  v35 = *(_OWORD *)(v33 - 3);
                  *(v32 - 1) = *(v33 - 1);
                  *(_OWORD *)(v32 - 3) = v35;
                  *(_OWORD *)(v33 - 3) = v91;
                  *((_QWORD *)v33 - 1) = v96;
                  if (v32 == a2)
                    break;
                  v32 += 3;
                  v36 = v33 == v24;
                  v33 += 3;
                }
                while (!v36);
              }
              else
              {
                v40 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
                v41 = 0xAAAAAAAAAAAAAAABLL * (a2 - v18);
                do
                {
                  v42 = v41;
                  v41 = v40;
                  v40 = v42 % v40;
                }
                while (v40);
                if (v41)
                {
                  v43 = &v18[3 * v41];
                  do
                  {
                    v44 = *(_OWORD *)(v43 - 3);
                    v45 = *((_QWORD *)v43 - 1);
                    v43 -= 3;
                    v99 = v45;
                    v94 = v44;
                    v46 = &v43[3 * v34];
                    v47 = v43;
                    do
                    {
                      v48 = v46;
                      v49 = *(_OWORD *)v46;
                      v47[2] = v46[2];
                      *(_OWORD *)v47 = v49;
                      v50 = 0xAAAAAAAAAAAAAAABLL * (v24 - v46);
                      v46 += 3 * v34;
                      v51 = __OFSUB__(v34, v50);
                      v53 = v34 - v50;
                      v52 = (v53 < 0) ^ v51;
                      v54 = &v18[3 * v53];
                      if (!v52)
                        v46 = v54;
                      v47 = v48;
                    }
                    while (v46 != v43);
                    *((_QWORD *)v48 + 2) = v99;
                    *(_OWORD *)v48 = v94;
                  }
                  while (v43 != v18);
                }
                a2 = &v18[v31 >> 3];
              }
            }
          }
        }
      }
      a4 = -(v25 + v12);
      v55 = a5 - v17;
      if (v25 + v17 >= a5 - (v25 + v17) - v12)
      {
        v60 = a2;
        v61 = v25;
        v62 = -(v25 + v12);
        v57 = a7;
        v55 = v17;
        result = (double *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(a2, v24, a3, v62, a5 - v17);
        a2 = v18;
        a4 = v61;
        a3 = v60;
      }
      else
      {
        v56 = &v10[v11 / 8];
        v57 = a7;
        v58 = a3;
        v59 = a2;
        result = (double *)std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<PolarPoint *>>(v56, v18, a2, v25, v17);
        a3 = v58;
        v13 = v59;
        a2 = v24;
      }
      a5 = v55;
      v10 = v13;
      a6 = v90;
      a7 = v57;
      if (!v55)
        return result;
    }
    if (a4 <= a5)
    {
      if (v10 != a2)
      {
        v72 = 0;
        do
        {
          v73 = (double *)&a6[v72 * 8];
          v74 = *(_OWORD *)&v10[v72];
          v73[2] = v10[v72 + 2];
          *(_OWORD *)v73 = v74;
          v72 += 3;
        }
        while (&v10[v72] != a2);
        if (v72 * 8)
        {
          v75 = (double *)a6;
          while (a2 != a3)
          {
            if (a2[2] >= v75[2])
            {
              v77 = *(_OWORD *)v75;
              v10[2] = v75[2];
              *(_OWORD *)v10 = v77;
              v75 += 3;
            }
            else
            {
              v76 = *(_OWORD *)a2;
              v10[2] = a2[2];
              *(_OWORD *)v10 = v76;
              a2 += 3;
            }
            v10 += 3;
            if (&a6[v72 * 8] == (char *)v75)
              return result;
          }
          return (double *)memmove(v10, v75, a6 - (char *)v75 + v72 * 8);
        }
      }
    }
    else if (a3 != a2)
    {
      v63 = 0;
      do
      {
        v64 = (double *)&a6[v63 * 8];
        v65 = *(_OWORD *)&a2[v63];
        v64[2] = a2[v63 + 2];
        *(_OWORD *)v64 = v65;
        v63 += 3;
      }
      while (&a2[v63] != a3);
      if (v63 * 8)
      {
        v66 = (double *)&a6[v63 * 8];
        v67 = a3 - 3;
        while (a2 != v10)
        {
          v68 = *(v66 - 1);
          v69 = *(a2 - 1);
          if (v68 >= v69)
            v70 = v66 - 3;
          else
            v70 = a2 - 3;
          if (v68 >= v69)
            v66 -= 3;
          else
            a2 -= 3;
          v71 = *(_OWORD *)v70;
          v67[2] = v70[2];
          *(_OWORD *)v67 = v71;
          v67 -= 3;
          if (v66 == (double *)a6)
            return result;
        }
        v80 = 0;
        do
        {
          v81 = &v67[v80];
          v82 = *(_OWORD *)&v66[v80 - 3];
          v81[2] = v66[v80 - 1];
          *(_OWORD *)v81 = v82;
          v80 -= 3;
        }
        while (&v66[v80] != (double *)a6);
      }
    }
  }
  return result;
}

void sub_1BE3A9464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE3A95CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFString *PKPaletteVisualStateDescription(unint64_t a1)
{
  if (a1 > 7)
    return 0;
  else
    return off_1E777AFA8[a1];
}

uint64_t PKPaletteVisualStateIsRegular(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return 0;
  else
    return qword_1BE4FD6D0[a1 - 1];
}

uint64_t _PKPaletteVisualStateForPointInRectToSettle(int a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CGFloat v14;
  CGFloat v15;
  double MidX;
  double MinY;
  double v19;
  double v20;
  uint64_t v21;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double MinX;
  double MidY;
  double MaxX;
  double MaxY;
  double v36;
  CGPoint v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;

  v14 = CGRectGetWidth(*(CGRect *)&a2) * 0.25;
  v38.origin.x = a2;
  v38.origin.y = a3;
  v38.size.width = a4;
  v38.size.height = a5;
  v15 = CGRectGetHeight(v38) * 0.25;
  v39.origin.x = a2;
  v39.origin.y = a3;
  v39.size.width = a4;
  v39.size.height = a5;
  v40 = CGRectInset(v39, v14, v15);
  v37.x = a6;
  v37.y = a7;
  if (CGRectContainsPoint(v40, v37))
    return 3;
  v41.origin.x = a2;
  v41.origin.y = a3;
  v41.size.width = a4;
  v41.size.height = a5;
  MidX = CGRectGetMidX(v41);
  v42.origin.x = a2;
  v42.origin.y = a3;
  v42.size.width = a4;
  v42.size.height = a5;
  MinY = CGRectGetMinY(v42);
  v43.origin.x = a2;
  v43.origin.y = a3;
  v43.size.width = a4;
  v43.size.height = a5;
  MaxX = CGRectGetMaxX(v43);
  v44.origin.x = a2;
  v44.origin.y = a3;
  v44.size.width = a4;
  v44.size.height = a5;
  MidY = CGRectGetMidY(v44);
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  v36 = CGRectGetMidX(v45);
  v46.origin.x = a2;
  v46.origin.y = a3;
  v46.size.width = a4;
  v46.size.height = a5;
  MaxY = CGRectGetMaxY(v46);
  v47.origin.x = a2;
  v47.origin.y = a3;
  v47.size.width = a4;
  v47.size.height = a5;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = a2;
  v48.origin.y = a3;
  v48.size.width = a4;
  v48.size.height = a5;
  v31 = CGRectGetMidY(v48);
  v49.origin.x = a2;
  v49.origin.y = a3;
  v49.size.width = a4;
  v49.size.height = a5;
  v30 = CGRectGetMinX(v49);
  v50.origin.x = a2;
  v50.origin.y = a3;
  v50.size.width = a4;
  v50.size.height = a5;
  v29 = CGRectGetMinY(v50);
  v51.origin.x = a2;
  v51.origin.y = a3;
  v51.size.width = a4;
  v51.size.height = a5;
  v28 = CGRectGetMaxX(v51);
  v52.origin.x = a2;
  v52.origin.y = a3;
  v52.size.width = a4;
  v52.size.height = a5;
  v27 = CGRectGetMinY(v52);
  v53.origin.x = a2;
  v53.origin.y = a3;
  v53.size.width = a4;
  v53.size.height = a5;
  v26 = CGRectGetMaxX(v53);
  v54.origin.x = a2;
  v54.origin.y = a3;
  v54.size.width = a4;
  v54.size.height = a5;
  v25 = CGRectGetMaxY(v54);
  v55.origin.x = a2;
  v55.origin.y = a3;
  v55.size.width = a4;
  v55.size.height = a5;
  v24 = CGRectGetMinX(v55);
  v56.origin.x = a2;
  v56.origin.y = a3;
  v56.size.width = a4;
  v56.size.height = a5;
  v23 = CGRectGetMaxY(v56);
  _PKPaletteClosestReferencePointFromPointInRect(a2, a3, a4, a5, a6, a7);
  if (MidX == v19 && MinY == v20)
    return 4;
  if (v36 == v19 && MaxY == v20)
    return 5;
  if (MaxX == v19 && MidY == v20)
    return 7;
  if (MinX == v19 && v31 == v20)
    return 6;
  if (v30 == v19 && v29 == v20 || v28 == v19 && v27 == v20 || v26 == v19 && v25 == v20)
  {
    if (a1)
      return 2;
    else
      return 3;
  }
  else
  {
    v21 = 2;
    if (!a1)
      v21 = 3;
    if (v23 == v20 && v24 == v19)
      return v21;
    else
      return 5;
  }
}

void _PKPaletteClosestReferencePointFromPointInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6)
{
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  CGFloat v19;
  CGFloat MidY;
  CGFloat v21;
  CGFloat v22;
  CGFloat MidX;
  CGFloat v24;
  CGFloat v25;
  CGFloat MaxY;
  CGFloat v27;
  CGFloat v28;
  CGFloat MaxX;
  CGFloat MinY;
  CGFloat MinX;
  _QWORD v32[17];
  CGRect v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;

  v32[16] = *MEMORY[0x1E0C80C00];
  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v33.origin.x = a1;
  v33.origin.y = a2;
  v33.size.width = a3;
  v33.size.height = a4;
  MinY = CGRectGetMinY(v33);
  v34.origin.x = a1;
  v34.origin.y = a2;
  v34.size.width = a3;
  v34.size.height = a4;
  MaxX = CGRectGetMaxX(v34);
  v35.origin.x = a1;
  v35.origin.y = a2;
  v35.size.width = a3;
  v35.size.height = a4;
  v28 = CGRectGetMinY(v35);
  v36.origin.x = a1;
  v36.origin.y = a2;
  v36.size.width = a3;
  v36.size.height = a4;
  v27 = CGRectGetMaxX(v36);
  v37.origin.x = a1;
  v37.origin.y = a2;
  v37.size.width = a3;
  v37.size.height = a4;
  MaxY = CGRectGetMaxY(v37);
  v38.origin.x = a1;
  v38.origin.y = a2;
  v38.size.width = a3;
  v38.size.height = a4;
  v25 = CGRectGetMinX(v38);
  v39.origin.x = a1;
  v39.origin.y = a2;
  v39.size.width = a3;
  v39.size.height = a4;
  v24 = CGRectGetMaxY(v39);
  v40.origin.x = a1;
  v40.origin.y = a2;
  v40.size.width = a3;
  v40.size.height = a4;
  MidX = CGRectGetMidX(v40);
  v41.origin.x = a1;
  v41.origin.y = a2;
  v41.size.width = a3;
  v41.size.height = a4;
  v22 = CGRectGetMinY(v41);
  v42.origin.x = a1;
  v42.origin.y = a2;
  v42.size.width = a3;
  v42.size.height = a4;
  v21 = CGRectGetMaxX(v42);
  v43.origin.x = a1;
  v43.origin.y = a2;
  v43.size.width = a3;
  v43.size.height = a4;
  MidY = CGRectGetMidY(v43);
  v44.origin.x = a1;
  v44.origin.y = a2;
  v44.size.width = a3;
  v44.size.height = a4;
  v19 = CGRectGetMidX(v44);
  v45.origin.x = a1;
  v45.origin.y = a2;
  v45.size.width = a3;
  v45.size.height = a4;
  v12 = CGRectGetMaxY(v45);
  v46.origin.x = a1;
  v46.origin.y = a2;
  v46.size.width = a3;
  v46.size.height = a4;
  v13 = CGRectGetMinX(v46);
  v47.origin.x = a1;
  v47.origin.y = a2;
  v47.size.width = a3;
  v47.size.height = a4;
  v14 = CGRectGetMidY(v47);
  v15 = 0;
  *(CGFloat *)v32 = MinX;
  *(CGFloat *)&v32[1] = MinY;
  *(CGFloat *)&v32[2] = MaxX;
  *(CGFloat *)&v32[3] = v28;
  *(CGFloat *)&v32[4] = v27;
  *(CGFloat *)&v32[5] = MaxY;
  *(CGFloat *)&v32[6] = v25;
  *(CGFloat *)&v32[7] = v24;
  *(CGFloat *)&v32[8] = MidX;
  *(CGFloat *)&v32[9] = v22;
  *(CGFloat *)&v32[10] = v21;
  *(CGFloat *)&v32[11] = MidY;
  *(CGFloat *)&v32[12] = v19;
  *(CGFloat *)&v32[13] = v12;
  v16 = 3.40282347e38;
  *(CGFloat *)&v32[14] = v13;
  *(CGFloat *)&v32[15] = v14;
  do
  {
    v17 = *(double *)&v32[v15];
    v18 = *(double *)&v32[v15 + 1];
    if ((a6 - v18) * (a6 - v18) + (a5 - v17) * (a5 - v17) < v16)
      v16 = (a6 - v18) * (a6 - v18) + (a5 - v17) * (a5 - v17);
    v15 += 2;
  }
  while (v15 != 16);
}

void sub_1BE3B19B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t drawing::Point::Point(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774980;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774980;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void drawing::Point::~Point(drawing::Point *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawing::Point::Point(drawing::Point *this, const drawing::Point *a2)
{
  char v2;
  float result;

  *(_QWORD *)this = &off_1E7774980;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

{
  char v2;
  float result;

  *(_QWORD *)this = &off_1E7774980;
  *((_DWORD *)this + 4) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 16) = 1;
    *((float *)this + 2) = result;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return result;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    *((_BYTE *)this + 16) = v2;
    *((float *)this + 3) = result;
  }
  return result;
}

uint64_t drawing::Point::operator=(uint64_t a1, uint64_t a2, float a3, float a4)
{
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v10[0] = &off_1E7774980;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      a3 = *(float *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        a4 = *(float *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v11;
    v11 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a3;
    *(float *)(a1 + 12) = a4;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Point *a2, drawing::Point *a3)
{
  int v3;
  int v4;
  float result;

  v3 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float drawing::Point::Point(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774980;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774980;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t drawing::Point::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E7774980;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t drawing::Point::formatText(drawing::Point *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "x", *((float *)this + 2));
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "y", *((float *)this + 3));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::Point::readFrom(drawing::Point *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_26;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_26;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_30;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
LABEL_26:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_33;
        }
        *((_BYTE *)this + 16) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_30:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t drawing::Point::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 12));
  return this;
}

BOOL drawing::Point::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(float *)(a1 + 12) == *(float *)(a2 + 12);
  return v2;
}

uint64_t drawing::Point::hash_value(drawing::Point *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v4 = *((float *)this + 2);
    v1 = LODWORD(v4);
    if (v4 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v3 = 0;
    return v3 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v2 = *((float *)this + 3);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  return v3 ^ v1;
}

void sub_1BE3B23E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3B256C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3B266C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3B2770(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void PKAccessibilityPerformBlockOnMainThreadAfterDelay(void *a1, double a2)
{
  id v3;
  id v4;

  v3 = a1;
  +[PKDispatchAfterHandler appLifeCycleHandler](PKDispatchAfterHandler, "appLifeCycleHandler");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dispatchAfter:stringIdentifier:withBlock:", 0, v3, a2);

}

void PKAccessibilityPostAnnouncementNotification(void *a1, void *a2)
{
  PKAccessibilityPostAnnouncementNotificationWithPriority(a1, a2, 5);
}

void PKAccessibilityPostAnnouncementNotificationWithPriority(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;

  v7 = a1;
  v5 = a2;
  +[PKAccessibility sharedInstance](PKAccessibility, "sharedInstance");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "pkaxRespondsToSelector:fromExtrasProtocol:", sel_postAnnouncement_withSender_priority_, &unk_1EF5AA228))objc_msgSend(v6, "postAnnouncement:withSender:priority:", v5, v7, a3);

}

void PKAccessibilityPostHighPriorityAnnouncementNotification(void *a1, void *a2)
{
  PKAccessibilityPostAnnouncementNotificationWithPriority(a1, a2, 1);
}

uint64_t PKAccessibilityNeedsAccessibilityElements()
{
  void *v0;
  uint64_t v1;

  +[PKAccessibility sharedInstance](PKAccessibility, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v0, "pkaxRespondsToSelector:fromExtrasProtocol:", sel_needsAccessibilityElements, &unk_1EF5AA228))v1 = objc_msgSend(v0, "needsAccessibilityElements");
  else
    v1 = 0;

  return v1;
}

uint64_t PKAccessibilityLocalizedUnsignedInteger(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB37F0], "pkaxLocalizedUnsignedInteger:", a1);
}

uint64_t PKAccessibilityLocalizedNumber(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB37F0], "pkaxLocalizedNumber:", a1);
}

uint64_t PKAccessibilityLocalizedPercent()
{
  return objc_msgSend(MEMORY[0x1E0CB37F0], "pkaxLocalizedPercentage:");
}

id __PKAccessibilityStringForVariables(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v10;
  void *v11;
  id v12;
  void *v13;
  const __CFString *v14;
  id *v15;
  id v16;
  id v17;
  void *v18;
  id *v20;

  v10 = a2;
  objc_opt_class();
  objc_opt_class();
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", &stru_1E777DEE8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v12 = v10;
  }
  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v13 = 0;
      goto LABEL_7;
    }
    objc_msgSend(v10, "string");
    v12 = (id)objc_claimAutoreleasedReturnValue();
  }
  v13 = v12;
LABEL_7:
  if (objc_msgSend(v13, "length"))
    objc_msgSend(v11, "appendString:", v13);
  v20 = (id *)&a9;
  if (a1)
    v14 = CFSTR(", ");
  else
    v14 = CFSTR(" ");
  while (1)
  {
    v15 = v20++;
    v16 = *v15;
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v17 = v16;
LABEL_16:
      v18 = v17;
      goto LABEL_18;
    }
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v16, "string");
      v17 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_16;
    }
    v18 = 0;
LABEL_18:
    if (!objc_msgSend(v18, "length"))
      goto LABEL_23;
    if ((objc_msgSend(v18, "isEqualToString:", CFSTR("__PKAccessibilityStringForVariablesSentinel")) & 1) != 0)
      break;
    if (objc_msgSend(v11, "length"))
      objc_msgSend(v11, "appendString:", v14);
    objc_msgSend(v11, "appendString:", v18);
LABEL_23:

  }
  return v11;
}

void sub_1BE3B3F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void sub_1BE3B5114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE3B532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE3B5490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3B557C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3B5674(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3B5FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1BE3B69A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE3B6E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BE3B7A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE3B90C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3B92C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)va);

  _Unwind_Resume(a1);
}

void sub_1BE3B9818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 120) = &a10;
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 120));
  ClipperLib::PolyTree::~PolyTree((ClipperLib::PolyTree *)&a13);
  ClipperLib::Clipper::~Clipper((ClipperLib::Clipper *)&a26);
  a13 = (void **)(v27 - 144);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100](&a13);

  _Unwind_Resume(a1);
}

void sub_1BE3B9EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3BA374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, char a16)
{
  void *v16;

  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)&a16);
  free(a14);
  if (v16)
    operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1BE3BA4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a5);
  drawing::Stroke::~Stroke((drawing::Stroke *)va);

  _Unwind_Resume(a1);
}

void sub_1BE3BA578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  drawing::Stroke::~Stroke((drawing::Stroke *)va);
  _Unwind_Resume(a1);
}

void sub_1BE3BA690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3BA7F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3BA8B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

double *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>(double *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>(__int128 *a1, double *a2)
{
  uint64_t v4;
  _BOOL8 result;
  double *v6;
  __int128 v7;
  double *v8;
  double *v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  double v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  double *v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 2;
      if (*(a2 - 2) < *(double *)a1)
      {
        v7 = *a1;
        *a1 = *(_OWORD *)v6;
        *(_OWORD *)v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)a1, (double *)a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      v16 = a1 + 1;
      v17 = a1 + 2;
      v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4, (unint64_t *)a1 + 6);
      v20 = *(a2 - 2);
      v19 = a2 - 2;
      if (v20 < *((double *)a1 + 6))
      {
        v21 = *v18;
        *v18 = *(_OWORD *)v19;
        *(_OWORD *)v19 = v21;
        if (*(double *)v18 < *(double *)v17)
        {
          v22 = *v17;
          *v17 = *v18;
          *v18 = v22;
          if (*(double *)v17 < *(double *)v16)
          {
            v23 = *v16;
            *v16 = *v17;
            *v17 = v23;
            if (*((double *)a1 + 2) < *(double *)a1)
            {
              v24 = *a1;
              *a1 = *v16;
              *v16 = v24;
            }
          }
        }
      }
      return 1;
    default:
      v8 = (double *)(a1 + 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>((double *)a1, (double *)a1 + 2, (double *)a1 + 4);
      v9 = (double *)(a1 + 3);
      if (a1 + 3 == (__int128 *)a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *(_OWORD *)v9;
    if (*v9 < *v8)
    {
      v13 = v10;
      while (1)
      {
        *(__int128 *)((char *)a1 + v13 + 48) = *(__int128 *)((char *)a1 + v13 + 32);
        if (v13 == -32)
          break;
        v14 = *(double *)((char *)a1 + v13 + 16);
        v13 -= 16;
        if (*(double *)&v12 >= v14)
        {
          v15 = (__int128 *)((char *)a1 + v13 + 48);
          goto LABEL_13;
        }
      }
      v15 = a1;
LABEL_13:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>(double *a1, double *a2, double *a3, unint64_t *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[PKStrokeMask calculateCenterlineSlices:]::$_0 &,_PKFloatRange *>(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

uint64_t legacy_drawing::Parameters::Parameters(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774600;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774600;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

void legacy_drawing::Parameters::~Parameters(legacy_drawing::Parameters *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float legacy_drawing::Parameters::Parameters(legacy_drawing::Parameters *this, const legacy_drawing::Parameters *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774600;
  *((_DWORD *)this + 5) = 0;
  v2 = *((_BYTE *)a2 + 20);
  if ((v2 & 1) != 0)
  {
    result = *((float *)a2 + 2);
    v3 = 1;
    *((_BYTE *)this + 20) = 1;
    *((float *)this + 2) = result;
    v2 = *((_BYTE *)a2 + 20);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 3);
    v3 |= 2u;
    *((_BYTE *)this + 20) = v3;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 20);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    result = *((float *)a2 + 4);
    *((_BYTE *)this + 20) = v3 | 4;
    *((float *)this + 4) = result;
  }
  return result;
}

uint64_t legacy_drawing::Parameters::operator=(uint64_t a1, uint64_t a2, float a3, float a4, float a5)
{
  char v6;
  char v7;
  int v8;
  uint64_t v9;
  int v10;
  _QWORD v12[2];
  int v13;
  int v14;

  if (a1 != a2)
  {
    v12[0] = &off_1E7774600;
    v14 = 0;
    v6 = *(_BYTE *)(a2 + 20);
    if ((v6 & 1) != 0)
    {
      a3 = *(float *)(a2 + 8);
      v7 = 1;
      LOBYTE(v14) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        a4 = *(float *)(a2 + 12);
        v7 |= 2u;
        LOBYTE(v14) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 20) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      a5 = *(float *)(a2 + 16);
      LOBYTE(v14) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v14;
    v14 = v8;
    v9 = *(_QWORD *)(a1 + 8);
    *(float *)(a1 + 8) = a3;
    *(float *)(a1 + 12) = a4;
    v12[1] = v9;
    v10 = *(_DWORD *)(a1 + 16);
    *(float *)(a1 + 16) = a5;
    v13 = v10;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Parameters *a2, legacy_drawing::Parameters *a3)
{
  int v3;
  int v4;
  int v5;
  float result;

  v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float legacy_drawing::Parameters::Parameters(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774600;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774600;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t legacy_drawing::Parameters::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  int v10;

  if (a1 != a2)
  {
    v8[0] = &off_1E7774600;
    v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    v4 = *(_DWORD *)(a2 + 16);
    v10 = *(_DWORD *)(a1 + 20);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    *(_QWORD *)(a1 + 8) = v6;
    v8[1] = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    v9 = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t legacy_drawing::Parameters::formatText(legacy_drawing::Parameters *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "blendAlpha", *((float *)this + 3));
    if ((*((_BYTE *)this + 20) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "baseAlpha", *((float *)this + 2));
  v5 = *((_BYTE *)this + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "targetMultiple", *((float *)this + 4));
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Parameters::readFrom(legacy_drawing::Parameters *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          v14 = v16++ > 8;
          if (v14)
            goto LABEL_27;
        }
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_27;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 20) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 20) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      else
      {
        if ((_DWORD)v19 != 1)
        {
LABEL_27:
          result = PB::Reader::skip(a2);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)a2 + 1);
          goto LABEL_37;
        }
        *((_BYTE *)this + 20) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
          goto LABEL_37;
        }
        *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
      }
      v2 = *((_QWORD *)a2 + 1) + 4;
      *((_QWORD *)a2 + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((_BYTE *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t legacy_drawing::Parameters::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 20);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::write(a2, *(float *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(this + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 20) & 4) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 16));
  return this;
}

BOOL legacy_drawing::Parameters::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 1) == 0 || *(float *)(a1 + 8) != *(float *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 20) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 20) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 20) & 4) == 0;
  if ((*(_BYTE *)(a1 + 20) & 4) != 0)
    return (*(_BYTE *)(a2 + 20) & 4) != 0 && *(float *)(a1 + 16) == *(float *)(a2 + 16);
  return v2;
}

uint64_t legacy_drawing::Parameters::hash_value(legacy_drawing::Parameters *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;

  if ((*((_BYTE *)this + 20) & 1) != 0)
  {
    v6 = *((float *)this + 2);
    v1 = LODWORD(v6);
    if (v6 == 0.0)
      v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
    {
LABEL_3:
      v2 = *((float *)this + 3);
      v3 = LODWORD(v2);
      if (v2 == 0.0)
        v3 = 0;
      if ((*((_BYTE *)this + 20) & 4) != 0)
        goto LABEL_6;
LABEL_13:
      v5 = 0;
      return v3 ^ v1 ^ v5;
    }
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_3;
  }
  v3 = 0;
  if ((*((_BYTE *)this + 20) & 4) == 0)
    goto LABEL_13;
LABEL_6:
  v4 = *((float *)this + 4);
  v5 = LODWORD(v4);
  if (v4 == 0.0)
    v5 = 0;
  return v3 ^ v1 ^ v5;
}

void sub_1BE3BDEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(location);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1BE3BEEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3BEF14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3BEFA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3BF014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3BF3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::vector<`anonymous namespace'::StrokeVertex>>::shared_ptr[abi:ne180100]<std::vector<`anonymous namespace'::StrokeVertex>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7774D38;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BE3BF440(_Unwind_Exception *exception_object)
{
  void **v1;

  if (v1)
  _Unwind_Resume(exception_object);
}

void std::vector<`anonymous namespace'::StrokeVertex>::resize(void **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;

  v4 = (char *)*a1;
  v3 = (char *)a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - (_BYTE *)*a1) >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[20 * a2];
    goto LABEL_17;
  }
  v7 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 2) >= v6)
  {
    v16 = &v3[20 * (20 * v6 / 0x14)];
LABEL_17:
    a1[1] = v16;
    return;
  }
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 2);
  v9 = 0x999999999999999ALL * ((v7 - v4) >> 2);
  if (v9 <= a2)
    v9 = a2;
  if (v8 >= 0x666666666666666)
    v10 = 0xCCCCCCCCCCCCCCCLL;
  else
    v10 = v9;
  if (v10 > 0xCCCCCCCCCCCCCCCLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = 5 * v10;
  v12 = (char *)operator new(20 * v10);
  v13 = &v12[20 * v5];
  v14 = &v13[20 * (20 * v6 / 0x14)];
  if (v3 != v4)
  {
    do
    {
      v15 = *(_OWORD *)(v3 - 20);
      *((_DWORD *)v13 - 1) = *((_DWORD *)v3 - 1);
      *(_OWORD *)(v13 - 20) = v15;
      v13 -= 20;
      v3 -= 20;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *a1 = v13;
  a1[1] = v14;
  a1[2] = &v12[4 * v11];
  if (v3)
    operator delete(v3);
}

void std::vector<PKMetalSDFStrokeVertex>::resize(char **a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  size_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  v5 = 0x8E38E38E38E38E39 * (v4 >> 2);
  if (v5 >> 16)
  {
    if (v4 == 2359296)
      return;
    v18 = v3 + 2359296;
    goto LABEL_17;
  }
  v6 = a1[2];
  if (0x8E38E38E38E38E39 * ((v6 - v2) >> 2) >= 0x10000 - v5)
  {
    bzero(a1[1], 2359260 - v4 - (2359260 - (int)v4) % 0x24u + 36);
    v18 = &v2[2359260 - v4 - (2359260 - (int)v4) % 0x24u + 36];
LABEL_17:
    a1[1] = v18;
    return;
  }
  v7 = 0x8E38E38E38E38E39 * ((v6 - v3) >> 2);
  v8 = 0x1C71C71C71C71C72 * ((v6 - v3) >> 2);
  if (v8 <= 0x10000)
    v8 = 0x10000;
  if (v7 >= 0x38E38E38E38E38ELL)
    v9 = 0x71C71C71C71C71CLL;
  else
    v9 = v8;
  if (v9 > 0x71C71C71C71C71CLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v10 = 9 * v9;
  v11 = (char *)operator new(36 * v9);
  v12 = &v11[4 * (v4 >> 2)];
  v13 = &v11[4 * v10];
  v14 = 2359260 - v4 - (2359260 - (int)v4) % 0x24u + 36;
  bzero(v12, v14);
  v15 = &v12[v14];
  if (v2 != v3)
  {
    do
    {
      v16 = *(_OWORD *)(v2 - 36);
      v17 = *(_OWORD *)(v2 - 20);
      *((_DWORD *)v12 - 1) = *((_DWORD *)v2 - 1);
      *(_OWORD *)(v12 - 20) = v17;
      *(_OWORD *)(v12 - 36) = v16;
      v12 -= 36;
      v2 -= 36;
    }
    while (v2 != v3);
    v2 = v3;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v13;
  if (v2)
    operator delete(v2);
}

void sub_1BE3BF7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKMetalRenderer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE3BF8F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3BF988(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3BFB14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3C04DC(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);

  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AnimatingStroke::AnimatingStroke(uint64_t a1, PKStroke *a2, int a3, int a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  *(_OWORD *)(a1 + 32) = 0u;
  v13 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = 0u;
  v14 = a1 + 96;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v15 = MEMORY[0x1E0C9BAA8];
  v16 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)(a1 + 112) = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(v15 + 32);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  v17 = *MEMORY[0x1E0C9D628];
  v18 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
  *(_OWORD *)(a1 + 200) = v18;
  *(_OWORD *)(a1 + 184) = v17;
  *(_OWORD *)(a1 + 232) = v18;
  *(_OWORD *)(a1 + 216) = v17;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 335) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 176) = a3;
  *(_WORD *)(a1 + 284) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 74) = 0;
  v19 = *(void **)(a1 + 288);
  *(_QWORD *)(a1 + 288) = 0;

  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 320) = a4;
  if (a3)
  {
    v20 = operator new();
    *(_BYTE *)(v20 + 16) = 0;
    *(_QWORD *)(v20 + 24) = 0x3FF0000000000000;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_QWORD *)(v20 + 96) = 0;
    *(_QWORD *)v20 = &unk_1E7773C78;
    *(_QWORD *)(v20 + 8) = 0;
    *(_DWORD *)(v20 + 104) = 0;
    *(_WORD *)(v20 + 108) = 1;
    *(_QWORD *)(v20 + 112) = 0;
    *(_OWORD *)(v20 + 120) = xmmword_1BE4FB830;
    *(_QWORD *)(v20 + 136) = 0x4010000000000000;
    *(_QWORD *)(v20 + 144) = a7;
    *(_DWORD *)(v20 + 152) = 2;
    v21 = *(_QWORD *)v14;
    *(_QWORD *)v14 = v20;
    if (v21)
      std::default_delete<PKBSplineFilter>::operator()[abi:ne180100](v14, v21);
    if (a4)
      *(_DWORD *)(*(_QWORD *)v14 + 104) = 4;
  }
  return a1;
}

void sub_1BE3C07A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  std::unique_ptr<PKMetalInputProvider>::reset[abi:ne180100]((uint64_t *)(v1 + 104), 0);
  v5 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;
  if (v5)
    std::default_delete<PKBSplineFilter>::operator()[abi:ne180100](v2, v5);

  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100](v1 + 48);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100](v1 + 16);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::AnimatingStroke::~AnimatingStroke(_anonymous_namespace_::AnimatingStroke *this)
{
  uint64_t v2;

  std::unique_ptr<PKMetalInputProvider>::reset[abi:ne180100]((uint64_t *)this + 13, 0);
  v2 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v2)
    std::default_delete<PKBSplineFilter>::operator()[abi:ne180100]((uint64_t)this + 96, v2);

  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void sub_1BE3C09A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void `anonymous namespace'::AnimatingStroke::fetchInput(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  uint64_t v7;

  v3 = a2;
  if (v3)
  {
    v4 = (_QWORD *)operator new();
    v5 = v3;
    *v4 = off_1E7773F70;
    v4[1] = v5;
    v7 = 0;
    std::unique_ptr<PKMetalInputProvider>::reset[abi:ne180100]((uint64_t *)(a1 + 104), (uint64_t)v4);
    std::unique_ptr<PKMetalInputProvider>::reset[abi:ne180100](&v7, 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) = *(_QWORD *)(a1 + 104);
  }
  v6 = *(_QWORD **)(a1 + 96);
  if (v6[1])
    (*(void (**)(_QWORD *))(*v6 + 40))(v6);

}

void sub_1BE3C0A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C0B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3C0DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::AnimatingStroke::unionDirtyRect(_anonymous_namespace_::AnimatingStroke *this, CGRect a2, CGAffineTransform *a3)
{
  __int128 v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGAffineTransform v9;
  CGRect v10;
  CGRect v11;

  v4 = *(_OWORD *)&a3->c;
  *(_OWORD *)&v9.a = *(_OWORD *)&a3->a;
  *(_OWORD *)&v9.c = v4;
  *(_OWORD *)&v9.tx = *(_OWORD *)&a3->tx;
  v10 = CGRectApplyAffineTransform(a2, &v9);
  x = v10.origin.x;
  y = v10.origin.y;
  width = v10.size.width;
  height = v10.size.height;
  *(CGRect *)((char *)this + 184) = CGRectUnion(*(CGRect *)((char *)this + 184), v10);
  v11.origin.x = x;
  v11.origin.y = y;
  v11.size.width = width;
  v11.size.height = height;
  *(CGRect *)((char *)this + 216) = CGRectUnion(*(CGRect *)((char *)this + 216), v11);
}

void sub_1BE3C0FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3C14E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE3C163C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C2624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE3C28FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::AnimatingStroke::resetTemporaryStrokeBuffers(_anonymous_namespace_::AnimatingStroke *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *((_QWORD *)this + 41) = *((_QWORD *)this + 8);
}

BOOL `anonymous namespace'::scissorRectFromCGRect(_anonymous_namespace_ *this, CGRect a2, CGSize a3)
{
  double x;
  double y;
  double width;
  double height;
  _BOOL8 result;
  CGRect v9;
  CGRect v10;

  v10.size.height = a3.height;
  v10.size.width = a3.width;
  v10.origin.x = 0.0;
  v10.origin.y = 0.0;
  v9 = CGRectIntersection(a2, v10);
  x = v9.origin.x;
  y = v9.origin.y;
  width = v9.size.width;
  height = v9.size.height;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  result = CGRectIsNull(v9);
  if (!result)
  {
    *(_QWORD *)this = (unint64_t)x;
    *((_QWORD *)this + 1) = (unint64_t)y;
    *((_QWORD *)this + 2) = (unint64_t)width;
    *((_QWORD *)this + 3) = (unint64_t)height;
  }
  return result;
}

void sub_1BE3C2BD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3C43E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41)
{
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&STACK[0x280], 8);
  v42 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v42;
    operator delete(v42);
  }

  v43 = STACK[0x2C8];
  STACK[0x2C8] = 0;
  if (v43)
    std::default_delete<PKBSplineFilter>::operator()[abi:ne180100]((uint64_t)&STACK[0x2C8], v43);

  _Unwind_Resume(a1);
}

void sub_1BE3C4AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  uint64_t i;

  for (i = 16; i != -16; i -= 16)

  _Unwind_Resume(a1);
}

void `anonymous namespace'::RendererFramebuffer::~RendererFramebuffer(_anonymous_namespace_::RendererFramebuffer *this)
{
  if (*((_BYTE *)this + 8))
    -[PKMetalFramebuffer decrementNonPurgeableCount](*(_BYTE **)this);

}

id *`anonymous namespace'::RendererFramebuffer::operator=(id *a1, uint64_t a2)
{
  objc_storeStrong(a1, *(id *)a2);
  *((_BYTE *)a1 + 8) = 0;
  if (*(_BYTE *)(a2 + 8))
    *((_BYTE *)a1 + 8) = -[PKMetalFramebuffer incrementNonPurgeableCount](*a1);
  return a1;
}

void `anonymous namespace'::RendererFramebuffer::reset(_anonymous_namespace_::RendererFramebuffer *this)
{
  void *v2;

  if (*((_BYTE *)this + 8))
    -[PKMetalFramebuffer decrementNonPurgeableCount](*(_BYTE **)this);
  v2 = *(void **)this;
  *(_QWORD *)this = 0;

  *((_BYTE *)this + 8) = 0;
}

void sub_1BE3C4DB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C50F0(_Unwind_Exception *a1)
{
  id *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C5494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C5B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, id *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE3C5E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3C7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1BE3C78D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C7AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3C7E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3C7F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3CA8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1BE3CAE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::AnimatingStroke::setStroke(_anonymous_namespace_::AnimatingStroke *this, PKStroke *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  PKStroke *v8;

  v8 = a2;
  objc_storeStrong((id *)this + 10, a2);
  v6 = vcvtd_n_u64_f64((double)(1664525 * objc_msgSend(*((id *)this + 10), "randomSeed") + 1013904223) / 4294967300.0, 0xCuLL);
  *(int32x4_t *)((char *)this + 264) = vdupq_n_s32(v6);
  *((_DWORD *)this + 70) = v6;
  v7 = *((_QWORD *)this + 12);
  if (v7)
    *(_QWORD *)(v7 + 144) = a3;

}

void sub_1BE3CAED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3CB0E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE3CB258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE3CB840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE3CB9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE3CBD64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CBEC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CBFD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CC084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CC3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE3CC798(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3CC860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double `anonymous namespace'::matrixFromAffineTransform(_anonymous_namespace_ *this, const CGAffineTransform *a2)
{
  __int128 v2;
  CATransform3D *v3;
  uint64_t v4;
  float64x2_t v5;
  float64x2_t v6;
  CGAffineTransform v8;
  CATransform3D v9;
  _OWORD v10[4];

  memset(&v9, 0, sizeof(v9));
  v2 = *((_OWORD *)this + 1);
  *(_OWORD *)&v8.a = *(_OWORD *)this;
  *(_OWORD *)&v8.c = v2;
  *(_OWORD *)&v8.tx = *((_OWORD *)this + 2);
  v3 = &v9;
  CATransform3DMakeAffineTransform(&v9, &v8);
  v4 = 0;
  memset(v10, 0, sizeof(v10));
  do
  {
    v6 = *(float64x2_t *)&v3->m11;
    v5 = *(float64x2_t *)&v3->m13;
    v3 = (CATransform3D *)((char *)v3 + 32);
    v10[v4++] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v6), v5);
  }
  while (v4 != 4);
  return *(double *)v10;
}

uint64_t `anonymous namespace'::AnimatingStroke::strokeBufferBytesAtIndex(_anonymous_namespace_::AnimatingStroke *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

                                                                            + 10)))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 6);
    if (!v4)
      v4 = (uint64_t *)*((_QWORD *)this + 4);
    v5 = *v4;
    v6 = 36;
  }
  else
  {
    v7 = (uint64_t *)*((_QWORD *)this + 2);
    if (!v7)
      v7 = *(uint64_t **)this;
    v5 = *v7;
    v6 = 20;
  }
  return v5 + a2 * v6;
}

void sub_1BE3CCC90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::RendererFramebuffer::RendererFramebuffer(uint64_t a1, void *a2, void *a3, char a4, double a5, double a6)
{
  id v11;
  id *v12;
  void *v13;

  v11 = a3;
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
  v12 = -[PKMetalFramebuffer initWithSize:pixelFormat:device:memoryless:backedByIOSurface:sampleCount:purgeable:]((id *)[PKMetalFramebuffer alloc], a2, v11, a4, 0, (void *)1, 1, a5, a6);
  v13 = *(void **)a1;
  *(_QWORD *)a1 = v12;

  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

void sub_1BE3CCD3C(_Unwind_Exception *a1)
{
  id *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3CCEE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE3CD278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

float `anonymous namespace'::addCircleToVertices(uint64_t *a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17)
{
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  float v24;
  uint64_t v32;
  uint64_t v33;
  double v34;
  float v37;
  double v38;
  double v39;
  float v40;
  float result;
  float v42;

  _S16 = a17;
  v18 = a3 + (a7 - a5) * a9;
  v19 = a3 + (-a5 - a7) * a9;
  v20 = a4 + (-a6 - a8) * a9;
  v21 = a3 + (a5 + a7) * a9;
  v22 = a4 + (a6 + a8) * a9;
  v23 = a5 - a7;
  v24 = v18;
  *(float *)&v18 = a4 + (a8 - a6) * a9;
  _S20 = a9;
  __asm
  {
    FCVT            H20, S20
    FCVT            S23, H20
  }
  _S23 = -_S23;
  __asm { FCVT            H23, S23 }
  v32 = *a1;
  v33 = a2 + 20 * *a1;
  *(float *)v33 = v24;
  *(_DWORD *)(v33 + 4) = LODWORD(v18);
  *(_WORD *)(v33 + 8) = LOWORD(_S23);
  v34 = a6 - a8;
  _S4 = a10;
  __asm
  {
    FCVT            H4, S4
    FCVT            H5, S16
  }
  *(_WORD *)(v33 + 10) = LOWORD(_S23);
  *(_WORD *)(v33 + 12) = LOWORD(_S20);
  *(_WORD *)(v33 + 14) = LOWORD(_S4);
  *(_WORD *)(v33 + 16) = _H5;
  *(_WORD *)(v33 + 18) = 0;
  v37 = v19;
  *(float *)&v19 = v20;
  *(float *)(v33 + 20) = v37;
  *(_DWORD *)(v33 + 24) = LODWORD(v19);
  *(_WORD *)(v33 + 28) = LOWORD(_S23);
  *(_WORD *)(v33 + 30) = LOWORD(_S20);
  *(_WORD *)(v33 + 32) = LOWORD(_S20);
  v38 = v34 * a9;
  v39 = a3 + v23 * a9;
  *(_WORD *)(v33 + 34) = LOWORD(_S4);
  *(_WORD *)(v33 + 36) = _H5;
  *(_WORD *)(v33 + 38) = 0;
  *(float *)&v23 = v21;
  v40 = v22;
  *(_DWORD *)(v33 + 40) = LODWORD(v23);
  *(float *)(v33 + 44) = v40;
  *(_WORD *)(v33 + 48) = LOWORD(_S20);
  *(_WORD *)(v33 + 50) = LOWORD(_S23);
  *(_WORD *)(v33 + 52) = LOWORD(_S20);
  *(_WORD *)(v33 + 54) = LOWORD(_S4);
  *(_WORD *)(v33 + 56) = _H5;
  *(_WORD *)(v33 + 58) = 0;
  result = v39;
  *a1 = v32 + 4;
  v42 = a4 + v38;
  *(float *)(v33 + 60) = result;
  *(float *)(v33 + 64) = v42;
  *(_WORD *)(v33 + 68) = LOWORD(_S20);
  *(_WORD *)(v33 + 70) = LOWORD(_S20);
  *(_WORD *)(v33 + 72) = LOWORD(_S20);
  *(_WORD *)(v33 + 74) = LOWORD(_S4);
  *(_WORD *)(v33 + 76) = _H5;
  *(_WORD *)(v33 + 78) = 0;
  return result;
}

void sub_1BE3CD55C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CD76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CD9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  if (!v4)

  _Unwind_Resume(a1);
}

void sub_1BE3CDACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE3CDDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE3CDFBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3CE4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::AnimatingStroke::isSDFPenStroke(_anonymous_namespace_::AnimatingStroke *this)
{
  void *v1;
  void *v2;
  uint64_t v3;

  -[_anonymous_namespace_::AnimatingStroke ink](this, "ink");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "_isFountainPenInkV2");
  else
    v3 = 0;

  return v3;
}

void sub_1BE3CE59C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3CE848(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3CEDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3CF280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE3CF934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE3D00BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3D0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{

  _Unwind_Resume(a1);
}

void sub_1BE3D0F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D12A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE3D142C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3D15B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE3D1F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;
  void *v60;
  void *v61;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a59, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *(_OWORD *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 48) = v2;
  *(_OWORD *)(a1 + 64) = v3;
  result = *(__n128 *)(a2 + 112);
  v6 = *(_OWORD *)(a2 + 128);
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v6;
  return result;
}

__n128 __Block_byref_object_copy__80(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1BE3D21F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

void sub_1BE3D22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3D2B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void PKBSplineFilter::copyPointsFromStroke(uint64_t a1, void *a2, PKInk *a3, char **a4)
{
  id v7;
  id v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t i;
  _PKStrokePoint v27;
  _PKStrokePoint v28;
  void *v29;
  id v30;

  v7 = a2;
  PKBSplineFilter::configureForInk((PKBSplineFilter *)a1, a3);
  v8 = v7;
  v29 = &unk_1E7774240;
  v30 = v8;
  std::vector<_PKStrokePoint>::resize(a1 + 48, 0);
  PKStrokeInputProvider::copyUpdatedRangeFromIndex((uint64_t)&v29, 0, (_QWORD *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48);
  v10 = 0x2E8BA2E8BA2E8BA3 * (v9 >> 3);
  *(_QWORD *)(a1 + 72) = v10;
  std::vector<_PKStrokePoint>::resize(a1 + 80, v10);
  memcpy(*(void **)(a1 + 80), *(const void **)(a1 + 48), v9);
  if (v9 < 89)
    goto LABEL_23;
  v11 = v10 - 1;
  v12 = *a4;
  v13 = a4[1];
  v14 = (v13 - *a4) >> 2;
  if (v11 <= v14)
  {
    if (v11 >= v14)
      goto LABEL_20;
    v25 = &v12[4 * v11];
  }
  else
  {
    v15 = v11 - v14;
    v16 = a4[2];
    if (v11 - v14 > (v16 - v13) >> 2)
    {
      if (v11 >> 62)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v17 = v16 - v12;
      v18 = v17 >> 1;
      if (v17 >> 1 <= v11)
        v18 = v11;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
        v19 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      if (v19 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v20 = (char *)operator new(4 * v19);
      v21 = &v20[4 * v14];
      v22 = &v20[4 * v19];
      bzero(v21, 4 * v15);
      v23 = &v21[4 * v15];
      while (v13 != v12)
      {
        v24 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v21 - 1) = v24;
        v21 -= 4;
      }
      *a4 = v21;
      a4[1] = v23;
      a4[2] = v22;
      if (v12)
        operator delete(v12);
      goto LABEL_20;
    }
    bzero(a4[1], 4 * v15);
    v25 = &v13[4 * v15];
  }
  a4[1] = v25;
LABEL_20:
  PKBSplineFilter::calculateVStartAndVEnd((PKBSplineFilter *)a1, &v28, &v27);
  if (v11)
  {
    for (i = 0; i != v11; ++i)
      *(_DWORD *)&(*a4)[4 * i] = PKBSplineFilter::calculateStepsForSegment((PKBSplineFilter *)a1, i, &v28, &v27);
  }
LABEL_23:

}

void sub_1BE3D2E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3D39DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE3D3ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__95(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE3D44F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE3D458C()
{
  JUMPOUT(0x1BE3D4570);
}

void sub_1BE3D4594()
{
  JUMPOUT(0x1BE3D4574);
}

void sub_1BE3D4840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D4AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE3D5538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  _Unwind_Resume(a1);
}

void sub_1BE3D5744(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D582C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D59A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3D5ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE3D5B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<ClipperLib::IntPoint>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);

  _Unwind_Resume(a1);
}

void sub_1BE3D5E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v18;

  v18 = *(_QWORD *)(v16 - 112);
  *(_QWORD *)(v16 - 112) = 0;
  if (v18)
    std::default_delete<PKBSplineFilter>::operator()[abi:ne180100](v16 - 112, v18);

  _Unwind_Resume(a1);
}

void sub_1BE3D6068(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D65A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE3D66FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE3D68AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3D6DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE3D6E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3D7030(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3D71E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3D7278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::vector<`anonymous namespace'::StrokeVertex>>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

uint64_t *std::unique_ptr<PKMetalInputProvider>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

uint64_t PKMetalInputProvider::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  _QWORD v5[6];

  v3 = *(void **)(a1 + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN20PKMetalInputProvider25copyUpdatedRangeFromIndexEmPNSt3__16vectorI14_PKStrokePointNS0_9allocatorIS2_EEEE_block_invoke;
  v5[3] = &__block_descriptor_48_e46____PKStrokePoint_d_CGPoint_dd_dddddddd_16__0q8l;
  v5[4] = a3;
  v5[5] = a2;
  return objc_msgSend(v3, "fetchFilteredPointsFromIndex:accessBlock:", a2, v5);
}

uint64_t ___ZN20PKMetalInputProvider25copyUpdatedRangeFromIndexEmPNSt3__16vectorI14_PKStrokePointNS0_9allocatorIS2_EEEE_block_invoke(uint64_t a1, unint64_t a2)
{
  std::vector<_PKStrokePoint>::resize(*(_QWORD *)(a1 + 32), a2);
  return **(_QWORD **)(a1 + 32) + 88 * *(_QWORD *)(a1 + 40);
}

void std::__shared_ptr_pointer<std::vector<`anonymous namespace'::StrokeVertex> *,std::shared_ptr<std::vector<`anonymous namespace'::StrokeVertex>>::__shared_ptr_default_delete<std::vector<`anonymous namespace'::StrokeVertex>,std::vector<`anonymous namespace'::StrokeVertex>>,std::allocator<std::vector<`anonymous namespace'::StrokeVertex>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B7F770);
}

void **std::__shared_ptr_pointer<std::vector<`anonymous namespace'::StrokeVertex> *,std::shared_ptr<std::vector<`anonymous namespace'::StrokeVertex>>::__shared_ptr_default_delete<std::vector<`anonymous namespace'::StrokeVertex>,std::vector<`anonymous namespace'::StrokeVertex>>,std::allocator<std::vector<`anonymous namespace'::StrokeVertex>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<`anonymous namespace'::StrokeVertex> *,std::shared_ptr<std::vector<`anonymous namespace'::StrokeVertex>>::__shared_ptr_default_delete<std::vector<`anonymous namespace'::StrokeVertex>,std::vector<`anonymous namespace'::StrokeVertex>>,std::allocator<std::vector<`anonymous namespace'::StrokeVertex>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void **std::default_delete<std::vector<`anonymous namespace'::StrokeVertex>>::operator()[abi:ne180100](void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

_QWORD *std::shared_ptr<std::vector<PKMetalSDFStrokeVertex>>::shared_ptr[abi:ne180100]<std::vector<PKMetalSDFStrokeVertex>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7774D00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BE3D7720(_Unwind_Exception *exception_object)
{
  void **v1;

  if (v1)
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<PKMetalSDFStrokeVertex> *,std::shared_ptr<std::vector<PKMetalSDFStrokeVertex>>::__shared_ptr_default_delete<std::vector<PKMetalSDFStrokeVertex>,std::vector<PKMetalSDFStrokeVertex>>,std::allocator<std::vector<PKMetalSDFStrokeVertex>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B7F770);
}

void **std::__shared_ptr_pointer<std::vector<PKMetalSDFStrokeVertex> *,std::shared_ptr<std::vector<PKMetalSDFStrokeVertex>>::__shared_ptr_default_delete<std::vector<PKMetalSDFStrokeVertex>,std::vector<PKMetalSDFStrokeVertex>>,std::allocator<std::vector<PKMetalSDFStrokeVertex>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<PKMetalSDFStrokeVertex> *,std::shared_ptr<std::vector<PKMetalSDFStrokeVertex>>::__shared_ptr_default_delete<std::vector<PKMetalSDFStrokeVertex>,std::vector<PKMetalSDFStrokeVertex>>,std::allocator<std::vector<PKMetalSDFStrokeVertex>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t drawing::Ink::Ink(uint64_t this)
{
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7774910;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E7774910;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = 0;
  return this;
}

void drawing::Ink::~Ink(drawing::Ink *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7774910;
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)this + 48, v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)this + 16, v5);
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base(this);
}

{
  drawing::Ink::~Ink(this);
  JUMPOUT(0x1C3B7F770);
}

drawing::Ink *drawing::Ink::Ink(drawing::Ink *this, const drawing::Ink *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  drawing::Color *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  __int128 *v20;
  __int128 v21;
  uint64_t v22;
  drawing::Color *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  drawing::Color *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)this = &off_1E7774910;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v5 = (uint64_t *)((char *)this + 16);
  *((_QWORD *)this + 4) = 0;
  v6 = (uint64_t *)((char *)this + 32);
  *((_QWORD *)this + 6) = 0;
  v7 = (uint64_t *)((char *)this + 48);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 5) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]((_QWORD *)this + 10, (uint64_t *)a2 + 10);
  *((_DWORD *)this + 18) = 0;
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (drawing::Color *)operator new();
    v9 = drawing::Color::Color(v8, *((const drawing::Color **)a2 + 1));
    v10 = *v4;
    *v4 = v11;
    if (v10)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v10 + 8))(v10, v9);
  }
  if (*((_QWORD *)a2 + 2))
  {
    v12 = (std::string *)operator new();
    v13 = v12;
    v14 = (__int128 *)*((_QWORD *)a2 + 2);
    if (*((char *)v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
    }
    else
    {
      v15 = *v14;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v15;
    }
    v16 = *v5;
    *v5 = (uint64_t)v13;
    if (v16)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v5, v16);
  }
  if ((*((_BYTE *)a2 + 72) & 2) != 0)
  {
    v17 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 72) |= 2u;
    *((_QWORD *)this + 7) = v17;
  }
  if (*((_QWORD *)a2 + 6))
  {
    v18 = (std::string *)operator new();
    v19 = v18;
    v20 = (__int128 *)*((_QWORD *)a2 + 6);
    if (*((char *)v20 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v20, *((_QWORD *)v20 + 1));
    }
    else
    {
      v21 = *v20;
      v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 2);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v21;
    }
    v22 = *v7;
    *v7 = (uint64_t)v19;
    if (v22)
      std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v7, v22);
  }
  if (*((_QWORD *)a2 + 4))
  {
    v23 = (drawing::Color *)operator new();
    v24 = drawing::Color::Color(v23, *((const drawing::Color **)a2 + 4));
    v25 = *v6;
    *v6 = v26;
    if (v25)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v25 + 8))(v25, v24);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v27 = (drawing::Color *)operator new();
    v28 = drawing::Color::Color(v27, *((const drawing::Color **)a2 + 5));
    v29 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v30;
    if (v29)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v29 + 8))(v29, v28);
  }
  v31 = *((_BYTE *)a2 + 72);
  if ((v31 & 1) != 0)
  {
    v32 = *((_QWORD *)a2 + 3);
    *((_BYTE *)this + 72) |= 1u;
    *((_QWORD *)this + 3) = v32;
    v31 = *((_BYTE *)a2 + 72);
  }
  if ((v31 & 4) != 0)
  {
    v33 = *((_QWORD *)a2 + 8);
    *((_BYTE *)this + 72) |= 4u;
    *((_QWORD *)this + 8) = v33;
  }
  return this;
}

uint64_t drawing::Ink::operator=(uint64_t a1, const drawing::Ink *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;

  if ((const drawing::Ink *)a1 != a2)
  {
    drawing::Ink::Ink((drawing::Ink *)&v13, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v20;
    v20 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v6 = v18;
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v6;
    v7 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 80) = v21;
    v21 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v14;
    v14 = v8;
    v17 = v5;
    v18 = v4;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v16;
    v16 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v15;
    v15 = v10;
    v11 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v19;
    v19 = v11;
    drawing::Ink::~Ink((drawing::Ink *)&v13);
  }
  return a1;
}

double drawing::swap(drawing *this, drawing::Ink *a2, drawing::Ink *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;

  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v3;
  v4 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v5;
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = *((_QWORD *)this + 2);
  v8 = *((_QWORD *)this + 3);
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v9;
  *((_QWORD *)a2 + 2) = v7;
  v10 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v10;
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v11;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  *((_QWORD *)a2 + 3) = v8;
  result = *((double *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((double *)a2 + 8) = result;
  return result;
}

uint64_t drawing::Ink::Ink(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = a1 + 48;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_1E7774910;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](a1 + 80, (__int128 *)(a2 + 80));
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *v4;
  *v4 = v9;
  if (v10)
    std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v4, v10);
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  if (v13)
    std::default_delete<std::string>::operator()[abi:ne180100](v6, v13);
  v14 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v15 = *v5;
  *v5 = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t drawing::Ink::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;

  if (a1 != a2)
  {
    drawing::Ink::Ink((uint64_t)&v13, a2);
    v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v20;
    v20 = v3;
    v5 = *(_QWORD *)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    v6 = v18;
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v6;
    v7 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a1 + 80) = v21;
    v21 = v7;
    v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v14;
    v14 = v8;
    v17 = v5;
    v18 = v4;
    v9 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v16;
    v16 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v15;
    v15 = v10;
    v11 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v19;
    v19 = v11;
    drawing::Ink::~Ink((drawing::Ink *)&v13);
  }
  return a1;
}

uint64_t drawing::Ink::formatText(drawing::Ink *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "color");
  if (*((_QWORD *)this + 2))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 72) & 1) != 0)
    PB::TextFormatter::format(a2, "requiredContentVersion");
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "sixChannelAddColor");
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "sixChannelMultiplyColor");
  if (*((_QWORD *)this + 6))
    PB::TextFormatter::format();
  v8 = *((_BYTE *)this + 72);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "version");
    v8 = *((_BYTE *)this + 72);
  }
  if ((v8 & 4) != 0)
    PB::TextFormatter::format(a2, "weight", *((double *)this + 8));
  return PB::TextFormatter::endObject(a2);
}

BOOL drawing::Ink::readFrom(drawing::Ink *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  PKProtobufUnknownFields **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v22;
  unint64_t v23;
  PKProtobufUnknownFields *v24;
  PKProtobufUnknownFields *v25;
  PB::Writer **v26;
  _BOOL8 result;
  _DWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  uint64_t v64[2];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t *)((char *)this + 48);
  v9 = (uint64_t *)((char *)this + 16);
  v10 = (PKProtobufUnknownFields **)((char *)this + 80);
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_27:
      v22 = v14 & 7;
      if (v22 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v23 = v14 >> 3;
      switch((v14 >> 3))
      {
        case 1u:
          v28 = (_DWORD *)operator new();
          *(_QWORD *)v28 = &off_1E7774948;
          v28[6] = 0;
          v29 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v28;
          if (v29)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
            v28 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_50;
        case 2u:
          v30 = (_QWORD *)operator new();
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          v64[0] = 0;
          v31 = *v9;
          *v9 = (uint64_t)v30;
          if (v31)
          {
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v9, v31);
            v32 = v64[0];
            v64[0] = 0;
            if (v32)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v64, v32);
          }
          goto LABEL_45;
        case 3u:
          *((_BYTE *)this + 72) |= 2u;
          v33 = *((_QWORD *)a2 + 1);
          v34 = *((_QWORD *)a2 + 2);
          v35 = *(_QWORD *)a2;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            do
            {
              v39 = v33 + 1;
              *((_QWORD *)a2 + 1) = v33 + 1;
              v40 = *(_BYTE *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0)
                goto LABEL_82;
              v36 += 7;
              v33 = v39;
              v17 = v37++ > 8;
            }
            while (!v17);
LABEL_69:
            v38 = 0;
            goto LABEL_82;
          }
          v55 = 0;
          v56 = 0;
          v38 = 0;
          if (v34 <= v33)
            v34 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v34 == v33)
            {
              v38 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v33 + 1;
              v58 = *(_BYTE *)(v35 + v33);
              *((_QWORD *)a2 + 1) = v57;
              v38 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v33 = v57;
                v17 = v56++ > 8;
                if (v17)
                  goto LABEL_69;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v38 = 0;
            }
            break;
          }
LABEL_82:
          *((_QWORD *)this + 7) = v38;
          goto LABEL_86;
        case 4u:
          v41 = (_QWORD *)operator new();
          v41[1] = 0;
          v41[2] = 0;
          *v41 = 0;
          v64[0] = 0;
          v42 = *v8;
          *v8 = (uint64_t)v41;
          if (v42)
          {
            std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v8, v42);
            v43 = v64[0];
            v64[0] = 0;
            if (v43)
              std::default_delete<std::string>::operator()[abi:ne180100]((uint64_t)v64, v43);
          }
LABEL_45:
          PB::Reader::read();
          goto LABEL_86;
        case 5u:
          v28 = (_DWORD *)operator new();
          *(_QWORD *)v28 = &off_1E7774948;
          v28[6] = 0;
          v44 = *((_QWORD *)this + 4);
          *((_QWORD *)this + 4) = v28;
          if (v44)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            v28 = (_DWORD *)*((_QWORD *)this + 4);
          }
          goto LABEL_50;
        case 6u:
          v28 = (_DWORD *)operator new();
          *(_QWORD *)v28 = &off_1E7774948;
          v28[6] = 0;
          v45 = *((_QWORD *)this + 5);
          *((_QWORD *)this + 5) = v28;
          if (v45)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            v28 = (_DWORD *)*((_QWORD *)this + 5);
          }
LABEL_50:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v28 + 16))(v28, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 7u:
          *((_BYTE *)this + 72) |= 1u;
          v46 = *((_QWORD *)a2 + 1);
          v47 = *((_QWORD *)a2 + 2);
          v48 = *(_QWORD *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)a2 + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_85;
              v49 += 7;
              v46 = v52;
              v17 = v50++ > 8;
            }
            while (!v17);
LABEL_76:
            v51 = 0;
            goto LABEL_85;
          }
          v59 = 0;
          v60 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v61 = v46 + 1;
              v62 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)a2 + 1) = v61;
              v51 |= (unint64_t)(v62 & 0x7F) << v59;
              if (v62 < 0)
              {
                v59 += 7;
                v46 = v61;
                v17 = v60++ > 8;
                if (v17)
                  goto LABEL_76;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v51 = 0;
            }
            break;
          }
LABEL_85:
          *((_QWORD *)this + 3) = v51;
          goto LABEL_86;
        case 8u:
          *((_BYTE *)this + 72) |= 4u;
          v54 = *((_QWORD *)a2 + 1);
          if (v54 <= 0xFFFFFFFFFFFFFFF7 && v54 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v54);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_86;
        default:
          goto LABEL_21;
      }
      goto LABEL_86;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_27;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    v22 = 0;
    LODWORD(v23) = 0;
LABEL_21:
    v24 = *v10;
    if (!*v10)
    {
      v25 = (PKProtobufUnknownFields *)operator new();
      PKProtobufUnknownFields::PKProtobufUnknownFields(v25);
      v64[0] = (uint64_t)v25;
      std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(v10, v64);
      v26 = (PB::Writer **)v64[0];
      v64[0] = 0;
      if (v26)
      {
        std::unique_ptr<PB::Writer>::reset[abi:ne180100](v26, 0);
        MEMORY[0x1C3B7F770](v26, 0x1020C40EDED9539);
      }
      v24 = *v10;
    }
    result = PKProtobufUnknownFields::add(v24, v23, v22, a2);
    if (!(_DWORD)result)
      return result;
LABEL_86:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1BE3D934C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PB::Writer **a9)
{
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100](&a9, 0);
  _Unwind_Resume(a1);
}

const void ***drawing::Ink::writeTo(drawing::Ink *this, PB::Writer *a2)
{
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  char v7;
  const void ***result;

  v4 = (const PB::Base *)*((_QWORD *)this + 1);
  if (v4)
    PB::Writer::writeSubmessage(a2, v4);
  if (*((_QWORD *)this + 2))
    PB::Writer::write();
  if ((*((_BYTE *)this + 72) & 2) != 0)
    PB::Writer::writeVarInt(a2);
  if (*((_QWORD *)this + 6))
    PB::Writer::write();
  v5 = (const PB::Base *)*((_QWORD *)this + 4);
  if (v5)
    PB::Writer::writeSubmessage(a2, v5);
  v6 = (const PB::Base *)*((_QWORD *)this + 5);
  if (v6)
    PB::Writer::writeSubmessage(a2, v6);
  v7 = *((_BYTE *)this + 72);
  if ((v7 & 1) != 0)
  {
    PB::Writer::writeVarInt(a2);
    v7 = *((_BYTE *)this + 72);
  }
  if ((v7 & 4) != 0)
    PB::Writer::write(a2, *((double *)this + 8));
  result = (const void ***)*((_QWORD *)this + 10);
  if (result)
    return PKProtobufUnknownFields::writeTo(result, (char **)a2);
  return result;
}

BOOL drawing::Ink::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  char v14;
  char v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = PKProtobufUnknownFieldsCompare((_QWORD ***)(a1 + 80), (_QWORD ***)(a2 + 80));
  if (result)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      if (!v6 || !drawing::Color::operator==(v5, v6))
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    v7 = *(unsigned __int8 **)(a1 + 16);
    v8 = *(unsigned __int8 ***)(a2 + 16);
    if (v7)
    {
      if (!v8)
        return 0;
      v9 = v7[23];
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)v7[23];
      else
        v10 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
      v12 = (char)v11;
      if ((char)v11 < 0)
        v11 = v8[1];
      if (v10 != v11)
        return 0;
      if (v12 >= 0)
        v13 = *(unsigned __int8 **)(a2 + 16);
      else
        v13 = *v8;
      if ((v9 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v7, v13, *((_QWORD *)v7 + 1)))
          return 0;
      }
      else if (v7[23])
      {
        while (*v7 == *v13)
        {
          ++v7;
          ++v13;
          if (!--v9)
            goto LABEL_24;
        }
        return 0;
      }
    }
    else if (v8)
    {
      return 0;
    }
LABEL_24:
    v14 = *(_BYTE *)(a1 + 72);
    v15 = *(_BYTE *)(a2 + 72);
    if ((v14 & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 72) & 2) == 0 || *(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 72) & 2) != 0)
    {
      return 0;
    }
    v16 = *(unsigned __int8 **)(a1 + 48);
    v17 = *(unsigned __int8 **)(a2 + 48);
    if (v16)
    {
      if (!v17 || !std::equal_to<std::string>::operator()[abi:ne180100](v16, v17))
        return 0;
    }
    else if (v17)
    {
      return 0;
    }
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a2 + 32);
    if (v18)
    {
      if (!v19 || !drawing::Color::operator==(v18, v19))
        return 0;
    }
    else if (v19)
    {
      return 0;
    }
    v20 = *(_QWORD *)(a1 + 40);
    v21 = *(_QWORD *)(a2 + 40);
    if (v20)
    {
      if (!v21 || !drawing::Color::operator==(v20, v21))
        return 0;
LABEL_46:
      if ((v14 & 1) != 0)
      {
        if ((v15 & 1) == 0 || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
          return 0;
      }
      else if ((v15 & 1) != 0)
      {
        return 0;
      }
      result = (v15 & 4) == 0;
      if ((v14 & 4) == 0)
        return result;
      return (v15 & 4) != 0 && *(double *)(a1 + 64) == *(double *)(a2 + 64);
    }
    if (!v21)
      goto LABEL_46;
    return 0;
  }
  return result;
}

unint64_t drawing::Ink::hash_value(drawing::Ink *this)
{
  drawing::Color *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  drawing::Color *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double v13;
  char v15;
  char v16;

  v2 = (drawing::Color *)*((_QWORD *)this + 1);
  if (v2)
    v3 = drawing::Color::hash_value(v2);
  else
    v3 = 0;
  v4 = *((_QWORD *)this + 2);
  if (v4)
    v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, v4);
  else
    v5 = 0;
  if ((*((_BYTE *)this + 72) & 2) != 0)
    v6 = *((_QWORD *)this + 7);
  else
    v6 = 0;
  v7 = *((_QWORD *)this + 6);
  if (v7)
    v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, v7);
  else
    v8 = 0;
  v9 = (drawing::Color *)*((_QWORD *)this + 4);
  if (v9)
    v10 = drawing::Color::hash_value(v9);
  else
    v10 = 0;
  v11 = *((_QWORD *)this + 5);
  if (v11)
    v11 = drawing::Color::hash_value((drawing::Color *)v11);
  if ((*((_BYTE *)this + 72) & 1) == 0)
  {
    v12 = 0;
    if ((*((_BYTE *)this + 72) & 4) != 0)
      goto LABEL_20;
LABEL_24:
    v13 = 0.0;
    return v5 ^ v3 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13;
  }
  v12 = *((_QWORD *)this + 3);
  if ((*((_BYTE *)this + 72) & 4) == 0)
    goto LABEL_24;
LABEL_20:
  v13 = *((double *)this + 8);
  if (v13 == 0.0)
    v13 = 0.0;
  return v5 ^ v3 ^ v6 ^ v8 ^ v10 ^ v11 ^ v12 ^ *(_QWORD *)&v13;
}

_QWORD *drawing::Ink::makeColor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774948;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Ink::makeSixChannelAddColor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774948;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Ink::makeSixChannelMultiplyColor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774948;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t drawingV1::Rectangle::Rectangle(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774C20;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774C20;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawingV1::Rectangle::~Rectangle(drawingV1::Rectangle *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawingV1::Rectangle::Rectangle(drawingV1::Rectangle *this, const drawingV1::Rectangle *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774C20;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 3);
    v3 = 2;
    *((_BYTE *)this + 24) = 2;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t drawingV1::Rectangle::operator=(uint64_t a1, const drawingV1::Rectangle *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const drawingV1::Rectangle *)a1 != a2)
  {
    drawingV1::Rectangle::Rectangle((drawingV1::Rectangle *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawingV1::swap(drawingV1 *this, drawingV1::Rectangle *a2, drawingV1::Rectangle *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawingV1::Rectangle::Rectangle(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774C20;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774C20;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawingV1::Rectangle::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(drawingV1::Rectangle *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7774C20;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawingV1::Rectangle::formatText(drawingV1::Rectangle *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "height", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "originY", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "originX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "width", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Rectangle::readFrom(drawingV1::Rectangle *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawingV1::Rectangle::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL drawingV1::Rectangle::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t drawingV1::Rectangle::hash_value(drawingV1::Rectangle *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 3);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1BE3DC02C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1BE3DC290(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE3DC964(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void __getFBSDisplayLayoutMonitorConfigurationClass_block_invoke(uint64_t a1)
{
  FrontBoardServicesLibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("FBSDisplayLayoutMonitorConfiguration");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEE62B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    FrontBoardServicesLibrary();
  }
}

void FrontBoardServicesLibrary()
{
  void *v0;

  if (!FrontBoardServicesLibraryCore_frameworkLibrary)
  {
    FrontBoardServicesLibraryCore_frameworkLibrary = _sl_dlopen();
    if (!FrontBoardServicesLibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

Class __getFBSDisplayLayoutMonitorClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  FrontBoardServicesLibrary();
  result = objc_getClass("FBSDisplayLayoutMonitor");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEE62B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getFBDisplayManagerClass_block_invoke(v3);
  }
  return result;
}

Class __getFBDisplayManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE62C8)
  {
    qword_1ECEE62C8 = _sl_dlopen();
    if (!qword_1ECEE62C8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("FBDisplayManager");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE62C0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE3DF7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getIAUtilityClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE62F8)
  {
    qword_1ECEE62F8 = _sl_dlopen();
    if (!qword_1ECEE62F8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("IAUtility");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE62F0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

PKInk *PKEraserInkForTypeAndWeight(uint64_t a1, double a2)
{
  __CFString **v4;
  __CFString *v5;
  double v6;
  int64_t v7;
  double v8;
  double v9;
  PKInk *v10;
  void *v11;
  PKInk *v12;

  v4 = PKInkIdentifierObjectEraser;
  if (a1)
    v4 = PKInkIdentifierEraser;
  v5 = *v4;
  v6 = fabs(a2);
  if (a1 != 1 || (v7 = 3, v6 != INFINITY))
    v7 = +[PKInk currentInkVersionForInkIdentifier:](PKInk, "currentInkVersionForInkIdentifier:", v5);
  if (v6 == INFINITY)
    v8 = 0.0;
  else
    v8 = a2;
  v9 = v8;
  v10 = [PKInk alloc];
  objc_msgSend(MEMORY[0x1E0DC3658], "clearColor");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = -[PKInk initWithIdentifier:color:version:variant:weight:](v10, "initWithIdentifier:color:version:variant:weight:", v5, v11, v7, 0, v9);

  return v12;
}

void sub_1BE3E6174(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3E6224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  objc_sync_exit(v11);
  _Unwind_Resume(a1);
}

void sub_1BE3E7550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DKUNilsEquivalentEqualObjects(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = (void *)v4;
  if (v3 | v4)
  {
    v6 = 0;
    if (v3 && v4)
      v6 = objc_msgSend((id)v3, "isEqual:", v4);
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

BOOL DKUNilsEquivalentEqualHashes(void *a1, void *a2)
{
  unint64_t v3;
  unint64_t v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;

  v3 = a1;
  v4 = a2;
  v5 = (void *)v4;
  if (v3 | v4)
  {
    v6 = 0;
    if (v3 && v4)
    {
      v7 = objc_msgSend((id)v3, "hash");
      v6 = v7 == objc_msgSend(v5, "hash");
    }
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

uint64_t drawing::Rectangle::Rectangle(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774A60;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774A60;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void drawing::Rectangle::~Rectangle(drawing::Rectangle *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float drawing::Rectangle::Rectangle(drawing::Rectangle *this, const drawing::Rectangle *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E7774A60;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 3);
    v3 = 2;
    *((_BYTE *)this + 24) = 2;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t drawing::Rectangle::operator=(uint64_t a1, const drawing::Rectangle *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const drawing::Rectangle *)a1 != a2)
  {
    drawing::Rectangle::Rectangle((drawing::Rectangle *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float drawing::swap(drawing *this, drawing::Rectangle *a2, drawing::Rectangle *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float drawing::Rectangle::Rectangle(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E7774A60;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E7774A60;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t drawing::Rectangle::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(drawing::Rectangle *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E7774A60;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t drawing::Rectangle::formatText(drawing::Rectangle *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "height", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "originY", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "originX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "width", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::Rectangle::readFrom(drawing::Rectangle *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t drawing::Rectangle::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL drawing::Rectangle::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t drawing::Rectangle::hash_value(drawing::Rectangle *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 3);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1BE3ED344(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1BE3ED674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

id PKDisplayColorForTool(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if (objc_msgSend(v1, "_isInkingTool"))
  {
    objc_msgSend(v1, "_color");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1BE3F16FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE3F1808(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F1900(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F19FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F1B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F1BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F1C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3F1D5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t drawingV1::Stroke::Stroke(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774B78;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 92) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774B78;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 92) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  return this;
}

void drawingV1::Stroke::~Stroke(drawingV1::Stroke *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E7774B78;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 7, 0);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 5, 0);
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 3, 0);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  PB::Base::~Base(this);
}

{
  drawingV1::Stroke::~Stroke(this);
  JUMPOUT(0x1C3B7F770);
}

drawingV1::Stroke *drawingV1::Stroke::Stroke(drawingV1::Stroke *this, const drawingV1::StrokeID **a2)
{
  void ***v4;
  void ***v5;
  void ***v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const drawingV1::StrokeID *v15;
  const drawingV1::StrokeID *v16;
  PB::Data *v17;
  drawingV1::Rectangle *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  drawingV1::Transform *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const drawingV1::StrokeID *v28;
  char v29;
  PB::Data *v30;
  PB::Data *v31;
  void **v33;

  *(_QWORD *)this = &off_1E7774B78;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = (void ***)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  v5 = (void ***)((char *)this + 40);
  *((_QWORD *)this + 7) = 0;
  v6 = (void ***)((char *)this + 56);
  *((_QWORD *)this + 9) = 0;
  v7 = (uint64_t *)((char *)this + 72);
  *((_DWORD *)this + 23) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 10) = 0;
  if (a2[6])
  {
    v8 = operator new();
    v9 = drawingV1::StrokeID::StrokeID(v8, a2[6]);
    v10 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  if (a2[10])
  {
    v11 = operator new();
    v12 = drawingV1::StrokeID::StrokeID(v11, a2[10]);
    v13 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v12;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = *((_BYTE *)a2 + 92);
  if ((v14 & 1) != 0)
  {
    v15 = a2[2];
    *((_BYTE *)this + 92) |= 1u;
    *((_QWORD *)this + 2) = v15;
    v14 = *((_BYTE *)a2 + 92);
  }
  if ((v14 & 2) != 0)
  {
    v16 = a2[4];
    *((_BYTE *)this + 92) |= 2u;
    *((_QWORD *)this + 4) = v16;
  }
  if (a2[3])
  {
    v17 = (PB::Data *)operator new();
    PB::Data::Data(v17, a2[3]);
    v33 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, (void **)v17);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v33, 0);
  }
  if (a2[1])
  {
    v18 = (drawingV1::Rectangle *)operator new();
    v19 = drawingV1::Rectangle::Rectangle(v18, a2[1]);
    v20 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v21;
    if (v20)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 8))(v20, v19);
  }
  if ((*((_BYTE *)a2 + 92) & 0x10) != 0)
  {
    v22 = *((_BYTE *)a2 + 89);
    *((_BYTE *)this + 92) |= 0x10u;
    *((_BYTE *)this + 89) = v22;
  }
  if (a2[9])
  {
    v23 = (drawingV1::Transform *)operator new();
    v24 = drawingV1::Transform::Transform(v23, a2[9]);
    v25 = *v7;
    *v7 = v26;
    if (v25)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v25 + 8))(v25, v24);
  }
  v27 = *((_BYTE *)a2 + 92);
  if ((v27 & 4) != 0)
  {
    v28 = a2[8];
    *((_BYTE *)this + 92) |= 4u;
    *((_QWORD *)this + 8) = v28;
    v27 = *((_BYTE *)a2 + 92);
  }
  if ((v27 & 8) != 0)
  {
    v29 = *((_BYTE *)a2 + 88);
    *((_BYTE *)this + 92) |= 8u;
    *((_BYTE *)this + 88) = v29;
  }
  if (a2[7])
  {
    v30 = (PB::Data *)operator new();
    PB::Data::Data(v30, a2[7]);
    v33 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v6, (void **)v30);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v33, 0);
  }
  if (a2[5])
  {
    v31 = (PB::Data *)operator new();
    PB::Data::Data(v31, a2[5]);
    v33 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, (void **)v31);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v33, 0);
  }
  return this;
}

drawingV1 *drawingV1::Stroke::operator=(drawingV1 *a1, const drawingV1::StrokeID **a2)
{
  drawingV1::Stroke *v3;
  _BYTE v5[96];

  if (a1 != (drawingV1 *)a2)
  {
    drawingV1::Stroke::Stroke((drawingV1::Stroke *)v5, a2);
    drawingV1::swap(a1, (drawingV1::Stroke *)v5, v3);
    drawingV1::Stroke::~Stroke((drawingV1::Stroke *)v5);
  }
  return a1;
}

double drawingV1::swap(drawingV1 *this, drawingV1::Stroke *a2, drawingV1::Stroke *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;

  v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v5;
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  v8 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = v9;
  *((_QWORD *)a2 + 1) = v8;
  *((_QWORD *)a2 + 2) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 89);
  *((_BYTE *)this + 89) = *((_BYTE *)a2 + 89);
  *((_BYTE *)a2 + 89) = v7;
  v10 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v10;
  LOBYTE(v10) = *((_BYTE *)this + 88);
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v11;
  v12 = *((_QWORD *)this + 4);
  v13 = *((_QWORD *)this + 5);
  v14 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = v14;
  result = *((double *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((double *)a2 + 8) = result;
  *((_BYTE *)a2 + 88) = v10;
  *((_QWORD *)a2 + 4) = v12;
  *((_QWORD *)a2 + 5) = v13;
  return result;
}

uint64_t drawingV1::Stroke::Stroke(uint64_t a1, uint64_t a2)
{
  void ***v4;
  void ***v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void **v16;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (void ***)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (void ***)(a1 + 40);
  *(_QWORD *)a1 = &off_1E7774B78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(void ***)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v10);
  v11 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v12 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v11;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v14 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(void ***)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 56), v15);
  v16 = *(void ***)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v16);
  return a1;
}

drawingV1 *drawingV1::Stroke::operator=(drawingV1 *a1, uint64_t a2)
{
  drawingV1::Stroke *v3;
  _BYTE v5[96];

  if (a1 != (drawingV1 *)a2)
  {
    drawingV1::Stroke::Stroke((uint64_t)v5, a2);
    drawingV1::swap(a1, (drawingV1::Stroke *)v5, v3);
    drawingV1::Stroke::~Stroke((drawingV1::Stroke *)v5);
  }
  return a1;
}

uint64_t drawingV1::Stroke::formatText(drawingV1::Stroke *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bounds");
  v6 = *((_BYTE *)this + 92);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "createdWithFinger");
    v6 = *((_BYTE *)this + 92);
    if ((v6 & 0x10) == 0)
    {
LABEL_5:
      if ((v6 & 1) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*((_BYTE *)this + 92) & 0x10) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "hidden");
  if ((*((_BYTE *)this + 92) & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(a2, "inkIndex");
LABEL_7:
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 92) & 2) != 0)
    PB::TextFormatter::format(a2, "pointsCount");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "strokeID");
  if (*((_QWORD *)this + 7))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 92) & 4) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 8));
  v8 = *((_QWORD *)this + 9);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "transform");
  v9 = *((_QWORD *)this + 10);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "version");
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawingV1::Stroke::readFrom(drawingV1::Stroke *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  void ***v9;
  void ***v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  void **v66[2];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 40);
  v9 = (void ***)((char *)this + 56);
  v10 = (void ***)((char *)this + 24);
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774BE8;
          v23[8] = 0;
          v24 = *((_QWORD *)this + 6);
          *((_QWORD *)this + 6) = v23;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v23 = (_DWORD *)*((_QWORD *)this + 6);
          }
          goto LABEL_49;
        case 2u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774BE8;
          v23[8] = 0;
          v25 = *((_QWORD *)this + 10);
          *((_QWORD *)this + 10) = v23;
          if (v25)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            v23 = (_DWORD *)*((_QWORD *)this + 10);
          }
          goto LABEL_49;
        case 3u:
          *((_BYTE *)this + 92) |= 1u;
          v26 = *((_QWORD *)a2 + 1);
          v27 = *((_QWORD *)a2 + 2);
          v28 = *(_QWORD *)a2;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)a2 + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_82;
              v29 += 7;
              v26 = v32;
              v17 = v30++ > 8;
            }
            while (!v17);
LABEL_66:
            v31 = 0;
            goto LABEL_82;
          }
          v57 = 0;
          v58 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v59 = v26 + 1;
              v60 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)a2 + 1) = v59;
              v31 |= (unint64_t)(v60 & 0x7F) << v57;
              if (v60 < 0)
              {
                v57 += 7;
                v26 = v59;
                v17 = v58++ > 8;
                if (v17)
                  goto LABEL_66;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v31 = 0;
            }
            break;
          }
LABEL_82:
          *((_QWORD *)this + 2) = v31;
          goto LABEL_87;
        case 4u:
          *((_BYTE *)this + 92) |= 2u;
          v34 = *((_QWORD *)a2 + 1);
          v35 = *((_QWORD *)a2 + 2);
          v36 = *(_QWORD *)a2;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)a2 + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_86;
              v37 += 7;
              v34 = v40;
              v17 = v38++ > 8;
            }
            while (!v17);
LABEL_73:
            v39 = 0;
            goto LABEL_86;
          }
          v61 = 0;
          v62 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v35 == v34)
            {
              v39 = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v63 = v34 + 1;
              v64 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)a2 + 1) = v63;
              v39 |= (unint64_t)(v64 & 0x7F) << v61;
              if (v64 < 0)
              {
                v61 += 7;
                v34 = v63;
                v17 = v62++ > 8;
                if (v17)
                  goto LABEL_73;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                v39 = 0;
            }
            break;
          }
LABEL_86:
          *((_QWORD *)this + 4) = v39;
          goto LABEL_87;
        case 5u:
          v42 = operator new();
          *(_QWORD *)v42 = 0;
          *(_QWORD *)(v42 + 8) = 0;
          v66[0] = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v10, (void **)v42);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v66, 0);
          v43 = *v10;
          goto LABEL_59;
        case 6u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774C20;
          v23[6] = 0;
          v44 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v23;
          if (v44)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
            v23 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_49;
        case 9u:
          *((_BYTE *)this + 92) |= 0x10u;
          v45 = *((_QWORD *)a2 + 1);
          if (v45 >= *((_QWORD *)a2 + 2))
          {
            v48 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v46 = v45 + 1;
            v47 = *(unsigned __int8 *)(*(_QWORD *)a2 + v45);
            *((_QWORD *)a2 + 1) = v46;
            v48 = v47 != 0;
          }
          *((_BYTE *)this + 89) = v48;
          goto LABEL_87;
        case 0xAu:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774C58;
          v23[8] = 0;
          v49 = *((_QWORD *)this + 9);
          *((_QWORD *)this + 9) = v23;
          if (v49)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
            v23 = (_DWORD *)*((_QWORD *)this + 9);
          }
LABEL_49:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        case 0xBu:
          *((_BYTE *)this + 92) |= 4u;
          v50 = *((_QWORD *)a2 + 1);
          if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *((_QWORD *)a2 + 2))
          {
            *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)a2 + v50);
            *((_QWORD *)a2 + 1) += 8;
          }
          else
          {
            *((_BYTE *)a2 + 24) = 1;
          }
          goto LABEL_87;
        case 0xCu:
          *((_BYTE *)this + 92) |= 8u;
          v51 = *((_QWORD *)a2 + 1);
          if (v51 >= *((_QWORD *)a2 + 2))
          {
            v54 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v52 = v51 + 1;
            v53 = *(unsigned __int8 *)(*(_QWORD *)a2 + v51);
            *((_QWORD *)a2 + 1) = v52;
            v54 = v53 != 0;
          }
          *((_BYTE *)this + 88) = v54;
          goto LABEL_87;
        case 0xDu:
          v55 = operator new();
          *(_QWORD *)v55 = 0;
          *(_QWORD *)(v55 + 8) = 0;
          v66[0] = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v9, (void **)v55);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v66, 0);
          v43 = *v9;
          goto LABEL_59;
        case 0xEu:
          v56 = operator new();
          *(_QWORD *)v56 = 0;
          *(_QWORD *)(v56 + 8) = 0;
          v66[0] = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v56);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v66, 0);
          v43 = *v8;
LABEL_59:
          PB::Reader::read(a2, (PB::Data *)v43);
          goto LABEL_87;
        default:
          goto LABEL_20;
      }
      goto LABEL_87;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_87:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

uint64_t drawingV1::Stroke::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  char v6;
  const PB::Data *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  char v10;
  const PB::Data *v11;
  const PB::Data *v12;

  v3 = this;
  v4 = *(const PB::Base **)(this + 48);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  v5 = *(const PB::Base **)(v3 + 80);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(_BYTE *)(v3 + 92);
  if ((v6 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v6 = *(_BYTE *)(v3 + 92);
  }
  if ((v6 & 2) != 0)
    this = PB::Writer::writeVarInt(a2);
  v7 = *(const PB::Data **)(v3 + 24);
  if (v7)
    this = PB::Writer::write(a2, v7);
  v8 = *(const PB::Base **)(v3 + 8);
  if (v8)
    this = PB::Writer::writeSubmessage(a2, v8);
  if ((*(_BYTE *)(v3 + 92) & 0x10) != 0)
    this = PB::Writer::write(a2);
  v9 = *(const PB::Base **)(v3 + 72);
  if (v9)
    this = PB::Writer::writeSubmessage(a2, v9);
  v10 = *(_BYTE *)(v3 + 92);
  if ((v10 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 92);
  }
  if ((v10 & 8) != 0)
    this = PB::Writer::write(a2);
  v11 = *(const PB::Data **)(v3 + 56);
  if (v11)
    this = PB::Writer::write(a2, v11);
  v12 = *(const PB::Data **)(v3 + 40);
  if (v12)
    return PB::Writer::write(a2, v12);
  return this;
}

BOOL drawingV1::Stroke::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5 || !drawingV1::StrokeID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_QWORD *)(a2 + 80);
  if (v6)
  {
    if (!v7 || !drawingV1::StrokeID::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 92) & 1) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 92) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 92) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 92) & 2) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 92) & 2) != 0)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24))
  {
    if (!v8 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 24) | *(_QWORD *)(a2 + 24))
      return 0;
  }
  else if (v8)
  {
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    if (!v10 || !drawingV1::Rectangle::operator==(v9, v10))
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  v11 = *(_BYTE *)(a1 + 92);
  v12 = *(_BYTE *)(a2 + 92);
  if ((v11 & 0x10) != 0)
  {
    if ((*(_BYTE *)(a2 + 92) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 89) != *(unsigned __int8 *)(a2 + 89))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 92) & 0x10) != 0)
  {
    return 0;
  }
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a2 + 72);
  if (v13)
  {
    if (!v14 || !drawingV1::Transform::operator==(v13, v14))
      return 0;
  }
  else if (v14)
  {
    return 0;
  }
  if ((v11 & 4) != 0)
  {
    if ((v12 & 4) == 0 || *(double *)(a1 + 64) != *(double *)(a2 + 64))
      return 0;
  }
  else if ((v12 & 4) != 0)
  {
    return 0;
  }
  if ((v11 & 8) != 0)
  {
    if ((v12 & 8) == 0 || *(unsigned __int8 *)(a1 + 88) != *(unsigned __int8 *)(a2 + 88))
      return 0;
  }
  else if ((v12 & 8) != 0)
  {
    return 0;
  }
  v15 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (!v15)
      goto LABEL_58;
    return 0;
  }
  if (!v15 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 56) | *(_QWORD *)(a2 + 56))
    return 0;
LABEL_58:
  if (*(_QWORD *)(a1 + 40))
  {
    if (!*(_QWORD *)(a2 + 40))
      return 0;
    if ((PB::Data::operator==() & 1) != 0)
      return 1;
    if (*(_QWORD *)(a1 + 40))
      return 0;
  }
  return *(_QWORD *)(a2 + 40) == 0;
}

uint64_t drawingV1::Stroke::hash_value(drawingV1::Stroke *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  drawingV1::Rectangle *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  drawingV1::Transform *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 32) & 2) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 32) & 4) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 32) & 2) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 32) & 4) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(_QWORD *)(v2 + 24);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  v7 = *((_QWORD *)this + 10);
  if (!v7)
  {
    v11 = 0;
    goto LABEL_21;
  }
  if ((*(_BYTE *)(v7 + 32) & 1) == 0)
  {
    v8 = 0;
    if ((*(_BYTE *)(v7 + 32) & 2) != 0)
      goto LABEL_14;
LABEL_18:
    v9 = 0;
    if ((*(_BYTE *)(v7 + 32) & 4) != 0)
      goto LABEL_15;
LABEL_19:
    v10 = 0;
    goto LABEL_20;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v7 + 32) & 2) == 0)
    goto LABEL_18;
LABEL_14:
  v9 = *(_QWORD *)(v7 + 16);
  if ((*(_BYTE *)(v7 + 32) & 4) == 0)
    goto LABEL_19;
LABEL_15:
  v10 = *(_QWORD *)(v7 + 24);
LABEL_20:
  v11 = v9 ^ v8 ^ v10;
LABEL_21:
  if ((*((_BYTE *)this + 92) & 1) != 0)
  {
    v25 = *((_QWORD *)this + 2);
    if ((*((_BYTE *)this + 92) & 2) != 0)
      goto LABEL_23;
  }
  else
  {
    v25 = 0;
    if ((*((_BYTE *)this + 92) & 2) != 0)
    {
LABEL_23:
      v24 = *((_QWORD *)this + 4);
      goto LABEL_26;
    }
  }
  v24 = 0;
LABEL_26:
  if (*((_QWORD *)this + 3))
    v12 = PBHashBytes();
  else
    v12 = 0;
  v13 = (drawingV1::Rectangle *)*((_QWORD *)this + 1);
  if (v13)
    v14 = drawingV1::Rectangle::hash_value(v13);
  else
    v14 = 0;
  v15 = *((_BYTE *)this + 92);
  if ((v15 & 0x10) != 0)
    v16 = *((unsigned __int8 *)this + 89);
  else
    v16 = 0;
  v17 = (drawingV1::Transform *)*((_QWORD *)this + 9);
  if (v17)
  {
    v18 = drawingV1::Transform::hash_value(v17);
    if ((v15 & 4) == 0)
      goto LABEL_37;
LABEL_40:
    if (*((double *)this + 8) == 0.0)
      v19 = 0;
    else
      v19 = *((_QWORD *)this + 8);
    if ((v15 & 8) != 0)
      goto LABEL_38;
    goto LABEL_44;
  }
  v18 = 0;
  if ((*((_BYTE *)this + 92) & 4) != 0)
    goto LABEL_40;
LABEL_37:
  v19 = 0;
  if ((v15 & 8) != 0)
  {
LABEL_38:
    v20 = *((unsigned __int8 *)this + 88);
    goto LABEL_45;
  }
LABEL_44:
  v20 = 0;
LABEL_45:
  if (*((_QWORD *)this + 7))
    v21 = PBHashBytes();
  else
    v21 = 0;
  if (*((_QWORD *)this + 5))
    v22 = PBHashBytes();
  else
    v22 = 0;
  return v11 ^ v6 ^ v25 ^ v24 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v21 ^ v22;
}

_QWORD *drawingV1::Stroke::makeStrokeID(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774BE8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawingV1::Stroke::makeVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[10])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774BE8;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[10];
    v1[10] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawingV1::Stroke::makeBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774C20;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawingV1::Stroke::makeTransform(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[9])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774C58;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[9];
    v1[9] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

BOOL PKStrokePointEqualToStrokePoint(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x58uLL) == 0;
}

float PKCompressedStrokePoint::compressTimestamp(PKCompressedStrokePoint *this, double a2)
{
  return a2;
}

double PKCompressedStrokePoint::uncompressTimestamp(PKCompressedStrokePoint *this, float a2)
{
  return a2;
}

float PKCompressedStrokePoint::setTimestamp(PKCompressedStrokePoint *this, double a2, double a3)
{
  float result;

  result = a2 - a3;
  this->var1 = result;
  return result;
}

double PKCompressedStrokePoint::timestamp(PKCompressedStrokePoint *this, double a2)
{
  return this->var1 + a2;
}

double PKCompressedStrokePoint::timestamp(PKCompressedStrokePoint *this)
{
  return this->var1;
}

double PKCompressedStrokePoint::uncompressLocation(PKCompressedStrokePoint *this, _PKPoint a2)
{
  return a2.var0;
}

float PKCompressedStrokePoint::compressLocation(PKCompressedStrokePoint *this, CGPoint a2)
{
  return a2.x;
}

float PKCompressedStrokePoint::setLocation(PKCompressedStrokePoint *this, CGPoint a2)
{
  float result;
  float y;

  result = a2.x;
  y = a2.y;
  this->var0.var0 = result;
  this->var0.var1 = y;
  return result;
}

double PKCompressedStrokePoint::location(PKCompressedStrokePoint *this)
{
  return this->var0.var0;
}

double PKCompressedStrokePoint::uncompressRadius(PKCompressedStrokePoint *this, float a2)
{
  return a2;
}

float PKCompressedStrokePoint::compressRadius(PKCompressedStrokePoint *this, double a2)
{
  return a2;
}

float PKCompressedStrokePoint::setRadius(PKCompressedStrokePoint *this, double a2)
{
  float result;

  result = a2;
  this->var2 = result;
  return result;
}

double PKCompressedStrokePoint::radius(PKCompressedStrokePoint *this)
{
  return this->var2;
}

uint64_t PKCompressedStrokePoint::compressAspectRatio(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  return (int)v3;
}

double PKCompressedStrokePoint::uncompressAspectRatio(PKCompressedStrokePoint *this)
{
  return (double)this / 1000.0;
}

PKCompressedStrokePoint *PKCompressedStrokePoint::setAspectRatio(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  this->var3 = (int)v3;
  return this;
}

double PKCompressedStrokePoint::aspectRatio(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var3;
  return (double)*(unint64_t *)&a2 / 1000.0;
}

uint64_t PKCompressedStrokePoint::compressEdgeWidth(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 10.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  return (int)v3;
}

double PKCompressedStrokePoint::uncompressEdgeWidth(PKCompressedStrokePoint *this)
{
  return (double)this / 10.0;
}

PKCompressedStrokePoint *PKCompressedStrokePoint::setEdgeWidth(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 10.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  this->var4 = (int)v3;
  return this;
}

double PKCompressedStrokePoint::edgeWidth(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var4;
  return (double)*(unint64_t *)&a2 / 10.0;
}

uint64_t PKCompressedStrokePoint::compressForce(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  return (int)v3;
}

PKCompressedStrokePoint *PKCompressedStrokePoint::setForce(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  this->var5 = (int)v3;
  return this;
}

double PKCompressedStrokePoint::uncompressForce(PKCompressedStrokePoint *this)
{
  return (double)this / 1000.0;
}

double PKCompressedStrokePoint::force(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var5;
  return (double)*(unint64_t *)&a2 / 1000.0;
}

uint64_t PKCompressedStrokePoint::compressAzimuth(PKCompressedStrokePoint *this, long double a2)
{
  double v3;
  double v4;
  double v6;

  v3 = fmod(a2, 6.28318531);
  v4 = 0.0;
  if (a2 <= 6.28318531 && a2 >= 0.0)
    v3 = a2;
  if (v3 < 0.0)
    v3 = v3 + 6.28318531;
  if (v3 == 0.0)
    v6 = 0.0;
  else
    v6 = v3 * 10430.2192;
  if (v6 >= 0.0)
  {
    v4 = v6;
    if (v6 > 65535.0)
      v4 = 65535.0;
  }
  return (int)v4;
}

uint64_t PKCompressedStrokePoint::setAzimuth(PKCompressedStrokePoint *this, long double a2)
{
  uint64_t result;

  result = PKCompressedStrokePoint::compressAzimuth(this, a2);
  this->var6 = result;
  return result;
}

double PKCompressedStrokePoint::uncompressAzimuth(PKCompressedStrokePoint *this)
{
  return (double)this / 10430.2192;
}

double PKCompressedStrokePoint::azimuth(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var6;
  return (double)*(unint64_t *)&a2 / 10430.2192;
}

uint64_t PKCompressedStrokePoint::compressAltitude(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 41720.8768;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  return (int)v3;
}

PKCompressedStrokePoint *PKCompressedStrokePoint::setAltitude(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 41720.8768;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  this->var7 = (int)v3;
  return this;
}

double PKCompressedStrokePoint::uncompressAltitude(PKCompressedStrokePoint *this)
{
  return (double)this / 41720.8768;
}

double PKCompressedStrokePoint::altitude(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var7;
  return (double)*(unint64_t *)&a2 / 41720.8768;
}

uint64_t PKCompressedStrokePoint::compressOpacity(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 32767.5;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  return (int)v3;
}

PKCompressedStrokePoint *PKCompressedStrokePoint::setOpacity(PKCompressedStrokePoint *this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 32767.5;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  this->var8 = (int)v3;
  return this;
}

double PKCompressedStrokePoint::uncompressOpacity(PKCompressedStrokePoint *this)
{
  return (double)this / 32767.5;
}

double PKCompressedStrokePoint::opacity(PKCompressedStrokePoint *this, double a2)
{
  LOWORD(a2) = this->var8;
  return (double)*(unint64_t *)&a2 / 32767.5;
}

double PKCompressedStrokePoint::uncompressRadius2(PKCompressedStrokePoint *this, float a2)
{
  return a2;
}

float PKCompressedStrokePoint::compressRadius2(PKCompressedStrokePoint *this, double a2)
{
  return a2;
}

float PKCompressedStrokePoint::setRadius2(PKCompressedStrokePoint *this, double a2)
{
  float result;

  result = a2;
  this->var9 = result;
  return result;
}

double PKCompressedStrokePoint::radius2(PKCompressedStrokePoint *this)
{
  return this->var9;
}

double PKCompressedStrokePointWithDefaultValues@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t PKConvertToCompressedStrokePoint@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, unint64_t a3@<D0>)
{
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;

  LODWORD(a3) = *(_DWORD *)result;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)result;
  *(_QWORD *)a2 = *(_QWORD *)(result + 4);
  *(_WORD *)(a2 + 16) = *(_WORD *)(result + 14);
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 18);
  LOBYTE(a3) = *(_BYTE *)(result + 23);
  v3 = (double)a3 / 255.0 * 32767.5;
  v4 = 0.0;
  v5 = 0.0;
  if (v3 >= 0.0)
  {
    v5 = v3;
    if (v3 > 65535.0)
      v5 = 65535.0;
  }
  *(_WORD *)(a2 + 26) = (int)v5;
  LOWORD(v3) = *(_WORD *)(result + 12);
  v6 = 10.0;
  *(float *)&v3 = (double)*(unint64_t *)&v3 / 10.0;
  *(_DWORD *)(a2 + 12) = LODWORD(v3);
  LOBYTE(v6) = *(_BYTE *)(result + 22);
  v7 = (double)v6 / 162.338042 * 41720.8768;
  if (v7 >= 0.0)
  {
    v4 = v7;
    if (v7 > 65535.0)
      v4 = 65535.0;
  }
  *(_WORD *)(a2 + 24) = (int)v4;
  *(_DWORD *)(a2 + 28) = LODWORD(v3);
  *(_WORD *)(a2 + 18) = 0;
  return result;
}

double PKCompressedStrokePointV1::opacity(PKCompressedStrokePointV1 *this, double a2)
{
  LOBYTE(a2) = *((_BYTE *)this + 23);
  return (double)*(unint64_t *)&a2 / 255.0;
}

double PKCompressedStrokePointV1::radius(PKCompressedStrokePointV1 *this, double a2)
{
  LOWORD(a2) = *((_WORD *)this + 6);
  return (double)*(unint64_t *)&a2 / 10.0;
}

double PKCompressedStrokePointV1::altitude(PKCompressedStrokePointV1 *this, double a2)
{
  LOBYTE(a2) = *((_BYTE *)this + 22);
  return (double)*(unint64_t *)&a2 / 162.338042;
}

float32_t PKCompressStrokePoint@<S0>(PKCompressedStrokePoint *a1@<X0>, double a2@<D0>, float32x2_t *a3@<X8>)
{
  float32_t v5;
  double v6;
  float32_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  float32_t result;

  v5 = *(double *)&a1->var0 - a2;
  *a3 = vcvt_f32_f64(*(float64x2_t *)&a1->var1);
  v6 = *(double *)&a1[1].var0;
  v7 = *(double *)&a1->var7;
  a3[1].f32[0] = v5;
  a3[1].f32[1] = v7;
  v8 = v6 * 1000.0;
  v9 = 0.0;
  v10 = 0.0;
  if (v8 >= 0.0)
  {
    v10 = v8;
    if (v8 > 65535.0)
      v10 = 65535.0;
  }
  a3[2].i16[0] = (int)v10;
  v11 = *(double *)&a1[1].var1 * 10.0;
  if (v11 >= 0.0)
  {
    v9 = *(double *)&a1[1].var1 * 10.0;
    if (v11 > 65535.0)
      v9 = 65535.0;
  }
  a3[2].i16[1] = (int)v9;
  v12 = *(double *)&a1[1].var3 * 1000.0;
  v13 = 0.0;
  v14 = 0.0;
  if (v12 >= 0.0)
  {
    v14 = *(double *)&a1[1].var3 * 1000.0;
    if (v12 > 65535.0)
      v14 = 65535.0;
  }
  a3[2].i16[2] = (int)v14;
  a3[2].i16[3] = PKCompressedStrokePoint::compressAzimuth(a1, *(long double *)&a1[1].var7);
  v15 = *(double *)&a1[2].var0 * 41720.8768;
  if (v15 >= 0.0)
  {
    v13 = *(double *)&a1[2].var0 * 41720.8768;
    if (v15 > 65535.0)
      v13 = 65535.0;
  }
  a3[3].i16[0] = (int)v13;
  v16 = *(double *)&a1[2].var1 * 32767.5;
  v17 = 0.0;
  if (v16 >= 0.0)
  {
    v17 = *(double *)&a1[2].var1 * 32767.5;
    if (v16 > 65535.0)
      v17 = 65535.0;
  }
  a3[3].i16[1] = (int)v17;
  result = *(double *)&a1[2].var3;
  a3[3].f32[1] = result;
  return result;
}

double PKDecompressStrokePoint@<D0>(PKCompressedStrokePoint *a1@<X0>, double a2@<D0>, uint64_t a3@<X8>)
{
  float var2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  unint64_t v8;
  double v9;
  double var9;
  double result;

  var2 = a1->var2;
  *(double *)&v4 = a1->var1;
  *(double *)a3 = *(double *)&v4 + a2;
  *(float64x2_t *)(a3 + 8) = vcvtq_f64_f32((float32x2_t)a1->var0);
  *(double *)&v5 = var2;
  LOWORD(v4) = a1->var3;
  *(double *)(a3 + 24) = var2;
  *(double *)(a3 + 32) = (double)v4 / 1000.0;
  LOWORD(v5) = a1->var4;
  v6 = 10.0;
  v7 = (double)v5 / 10.0;
  LOWORD(v6) = a1->var5;
  *(double *)(a3 + 40) = v7;
  *(double *)(a3 + 48) = (double)v6 / 1000.0;
  LOWORD(v7) = a1->var6;
  v8 = 0x40C45F1C0E995AB9;
  v9 = (double)*(unint64_t *)&v7 / 10430.2192;
  LOWORD(v8) = a1->var7;
  *(double *)(a3 + 56) = v9;
  *(double *)(a3 + 64) = (double)v8 / 41720.8768;
  LOWORD(v9) = a1->var8;
  var9 = a1->var9;
  result = (double)*(unint64_t *)&v9 / 32767.5;
  *(double *)(a3 + 72) = result;
  *(double *)(a3 + 80) = var9;
  return result;
}

id PKDescriptionOfStrokePoint(_PKStrokePoint *a1)
{
  void *v2;
  void *v3;

  NSStringFromCGPoint(a1->location);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("location: %@\n\ttimestamp: %f\n\tforce: %f\n\tazimuth: %f\n\taltitude: %f\n\tradius: %f\n\topacity: %f\n\tedgeWidth: %f\n\taspectRatio: %f\n"), v2, *(_QWORD *)&a1->timestamp, *(_QWORD *)&a1->force, *(_QWORD *)&a1->azimuth, *(_QWORD *)&a1->altitude, *(_QWORD *)&a1->radius, *(_QWORD *)&a1->opacity, *(_QWORD *)&a1->edgeWidth, *(_QWORD *)&a1->aspectRatio);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1BE3F3E44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

float PKCompressedStrokePointV1::setTimestamp(PKCompressedStrokePointV1 *this, double a2, double a3)
{
  float result;

  result = a2 - a3;
  *(float *)this = result;
  return result;
}

double PKCompressedStrokePointV1::timestamp(PKCompressedStrokePointV1 *this, double a2)
{
  return *(float *)this + a2;
}

float PKCompressedStrokePointV1::setLocation(PKCompressedStrokePointV1 *this, CGPoint a2)
{
  float result;
  float y;

  result = a2.x;
  y = a2.y;
  *((float *)this + 1) = result;
  *((float *)this + 2) = y;
  return result;
}

double PKCompressedStrokePointV1::location(PKCompressedStrokePointV1 *this)
{
  return *((float *)this + 1);
}

uint64_t PKCompressedStrokePointV1::setRadius(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 10.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  *(_WORD *)(this + 12) = (int)v3;
  return this;
}

uint64_t PKCompressedStrokePointV1::setAspectRatio(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  *(_WORD *)(this + 14) = (int)v3;
  return this;
}

double PKCompressedStrokePointV1::aspectRatio(PKCompressedStrokePointV1 *this, double a2)
{
  LOWORD(a2) = *((_WORD *)this + 7);
  return (double)*(unint64_t *)&a2 / 1000.0;
}

uint64_t PKCompressedStrokePointV1::setEdgeWidth(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 10.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  *(_WORD *)(this + 16) = (int)v3;
  return this;
}

double PKCompressedStrokePointV1::edgeWidth(PKCompressedStrokePointV1 *this, double a2)
{
  LOWORD(a2) = *((_WORD *)this + 8);
  return (double)*(unint64_t *)&a2 / 10.0;
}

uint64_t PKCompressedStrokePointV1::setForce(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 1000.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 65535.0)
      v3 = 65535.0;
  }
  *(_WORD *)(this + 18) = (int)v3;
  return this;
}

double PKCompressedStrokePointV1::force(PKCompressedStrokePointV1 *this, double a2)
{
  LOWORD(a2) = *((_WORD *)this + 9);
  return (double)*(unint64_t *)&a2 / 1000.0;
}

void PKCompressedStrokePointV1::setAzimuth(PKCompressedStrokePointV1 *this, long double a2)
{
  double v4;
  double v5;
  double v7;

  v4 = fmod(a2, 6.28318531);
  v5 = 0.0;
  if (a2 <= 6.28318531 && a2 >= 0.0)
    v4 = a2;
  if (v4 < 0.0)
    v4 = v4 + 6.28318531;
  if (v4 == 0.0)
    v7 = 0.0;
  else
    v7 = v4 * 10430.2192;
  if (v7 >= 0.0)
  {
    v5 = v7;
    if (v7 > 65535.0)
      v5 = 65535.0;
  }
  *((_WORD *)this + 10) = (int)v5;
}

double PKCompressedStrokePointV1::azimuth(PKCompressedStrokePointV1 *this, double a2)
{
  LOWORD(a2) = *((_WORD *)this + 10);
  return (double)*(unint64_t *)&a2 / 10430.2192;
}

uint64_t PKCompressedStrokePointV1::setAltitude(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 162.338042;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 255.0)
      v3 = 255.0;
  }
  *(_BYTE *)(this + 22) = (int)v3;
  return this;
}

uint64_t PKCompressedStrokePointV1::setOpacity(uint64_t this, double a2)
{
  double v2;
  double v3;

  v2 = a2 * 255.0;
  v3 = 0.0;
  if (v2 >= 0.0)
  {
    v3 = v2;
    if (v2 > 255.0)
      v3 = 255.0;
  }
  *(_BYTE *)(this + 23) = (int)v3;
  return this;
}

uint64_t PKConvertToCompressedStrokePointV1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  *(_DWORD *)a2 = *(_DWORD *)(result + 8);
  *(_QWORD *)(a2 + 4) = *(_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(a2 + 14) = v2;
  LOWORD(v2) = *(_WORD *)(result + 26);
  v3 = (double)v2 / 32767.5 * 255.0;
  v4 = 0.0;
  v5 = 0.0;
  if (v3 >= 0.0)
  {
    v5 = v3;
    if (v3 > 255.0)
      v5 = 255.0;
  }
  *(_BYTE *)(a2 + 23) = (int)v5;
  v6 = *(float *)(result + 12) * 10.0;
  if (v6 >= 0.0)
  {
    v4 = *(float *)(result + 12) * 10.0;
    if (v6 > 65535.0)
      v4 = 65535.0;
  }
  *(_WORD *)(a2 + 12) = (int)v4;
  LOWORD(v4) = *(_WORD *)(result + 24);
  v7 = (double)*(unint64_t *)&v4 / 41720.8768 * 162.338042;
  v8 = 0.0;
  if (v7 >= 0.0)
  {
    v8 = v7;
    if (v7 > 255.0)
      v8 = 255.0;
  }
  *(_BYTE *)(a2 + 22) = (int)v8;
  return result;
}

void sub_1BE3F4678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE3F4914(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F4A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F4BBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F4F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  void *v40;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE3F5144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F535C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F5520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F57A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

uint64_t HasValidInkForDetectionItem(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  const __CFString *v18;
  char v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v23;
  id v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v24 = a2;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  obj = v3;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  if (!v4)
    goto LABEL_19;
  v23 = *(_QWORD *)v27;
  v18 = CFSTR("com.apple.ink.crayon");
  do
  {
    v25 = v4;
    for (i = 0; i != v25; ++i)
    {
      if (*(_QWORD *)v27 != v23)
        objc_enumerationMutation(obj);
      objc_msgSend(*(id *)(*((_QWORD *)&v26 + 1) + 8 * i), "strokeUUID", v18);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "_visibleStrokeForIdentifier:", v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v7, "ink");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "identifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.ink.pen")) & 1) != 0)
        goto LABEL_13;
      objc_msgSend(v7, "ink");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "identifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v11, "isEqualToString:", CFSTR("com.apple.ink.pencil")) & 1) != 0)
        goto LABEL_12;
      objc_msgSend(v7, "ink");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v13, "isEqualToString:", CFSTR("com.apple.ink.monoline")) & 1) != 0)
        goto LABEL_11;
      objc_msgSend(v7, "ink");
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v21, "identifier");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v14, "isEqualToString:", CFSTR("com.apple.ink.fountainpen")) & 1) != 0)
      {

LABEL_11:
LABEL_12:

LABEL_13:
        continue;
      }
      objc_msgSend(v7, "ink");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v20, "identifier");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v19 = objc_msgSend(v15, "isEqualToString:", v18);

      if ((v19 & 1) == 0)
      {
        v16 = 0;
        goto LABEL_20;
      }
    }
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v30, 16);
  }
  while (v4);
LABEL_19:
  v16 = 1;
LABEL_20:

  return v16;
}

void sub_1BE3F5AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{

  _Unwind_Resume(a1);
}

void sub_1BE3F5BEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F5DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE3F5E28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F5E84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F5ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F5F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F60A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F610C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F61D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F62A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE3F6324(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F63D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F6474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F6644(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F66A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F66F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F676C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

void sub_1BE3F68BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F6A10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6AF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3F6BE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1BE3F6C7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6CE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F6D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6D80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F6E70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

Class ___ZL29getDDDetectionControllerClassv_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE6348)
  {
    qword_1ECEE6348 = _sl_dlopen();
    if (!qword_1ECEE6348)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("DDDetectionController");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE6340 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t _PKHandleRemotePencilSettingDidChangeNotification(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint8_t v5[16];

  v3 = os_log_create("com.apple.pencilkit", "PencilSqueeze");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1BE213000, v3, OS_LOG_TYPE_DEFAULT, "Handle remote pencil settings did change notification", v5, 2u);
  }

  return objc_msgSend(a2, "_handleRemotePencilSettingDidChangeNotification");
}

void sub_1BE3F8E4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F8FE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3F91E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F9420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  void *v16;
  void *v17;
  void *v18;
  va_list va;

  va_start(va, a16);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__21(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE3F973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE3F97FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE3F9964(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE3FB6CC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_1BE3FCC38(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1BE3FCD48(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

BOOL distanceToRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGPoint v9;
  CGRect v10;

  v10.origin.x = a3;
  v10.origin.y = a4;
  v10.size.width = a5;
  v10.size.height = a6;
  v9.x = a1;
  v9.y = a2;
  return CGRectContainsPoint(v10, v9);
}

void sub_1BE3FE6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE3FF170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getWFConfiguredSystemActionClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE6388)
  {
    qword_1ECEE6388 = _sl_dlopen();
    if (!qword_1ECEE6388)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("WFConfiguredSystemAction");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE6380 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE3FF70C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE3FF780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_1BE3FF804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1BE3FF87C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_1BE3FFAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE3FFC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id getDDContextMenuActionClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getDDContextMenuActionClass_softClass;
  v7 = getDDContextMenuActionClass_softClass;
  if (!getDDContextMenuActionClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getDDContextMenuActionClass_block_invoke;
    v3[3] = &unk_1E7777068;
    v3[4] = &v4;
    __getDDContextMenuActionClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1BE403A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE403C80(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_1BE4040A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1BE404494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DataDetectorsUILibrary()
{
  uint64_t v0;
  void *v2;

  if (DataDetectorsUILibraryCore_frameworkLibrary)
    return DataDetectorsUILibraryCore_frameworkLibrary;
  DataDetectorsUILibraryCore_frameworkLibrary = _sl_dlopen();
  v0 = DataDetectorsUILibraryCore_frameworkLibrary;
  if (!DataDetectorsUILibraryCore_frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

Class __getDDContextMenuActionClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  DataDetectorsUILibrary();
  result = objc_getClass("DDContextMenuAction");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getDDContextMenuActionClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)__getDDContextMenuConfigurationClass_block_invoke(v3);
  }
  return result;
}

PKTextInputWindowFirstResponderController *__getDDContextMenuConfigurationClass_block_invoke(uint64_t a1)
{
  PKTextInputWindowFirstResponderController *result;
  PKTextInputWindowFirstResponderController *v3;
  SEL v4;

  DataDetectorsUILibrary();
  result = (PKTextInputWindowFirstResponderController *)objc_getClass("DDContextMenuConfiguration");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getDDContextMenuConfigurationClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (PKTextInputWindowFirstResponderController *)abort_report_np();
    return -[PKTextInputWindowFirstResponderController init](v3, v4);
  }
  return result;
}

uint64_t legacy_drawing::Rectangle::Rectangle(uint64_t this)
{
  *(_QWORD *)this = &off_1E77747F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E77747F8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void legacy_drawing::Rectangle::~Rectangle(legacy_drawing::Rectangle *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

float legacy_drawing::Rectangle::Rectangle(legacy_drawing::Rectangle *this, const legacy_drawing::Rectangle *a2)
{
  char v2;
  char v3;
  float result;

  *(_QWORD *)this = &off_1E77747F8;
  *((_DWORD *)this + 6) = 0;
  v2 = *((_BYTE *)a2 + 24);
  if ((v2 & 2) != 0)
  {
    result = *((float *)a2 + 3);
    v3 = 2;
    *((_BYTE *)this + 24) = 2;
    *((float *)this + 3) = result;
    v2 = *((_BYTE *)a2 + 24);
    if ((v2 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 24) & 4) != 0)
  {
LABEL_5:
    result = *((float *)a2 + 4);
    v3 |= 4u;
    *((_BYTE *)this + 24) = v3;
    *((float *)this + 4) = result;
    v2 = *((_BYTE *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 1) == 0)
      return result;
LABEL_10:
    result = *((float *)a2 + 2);
    *((_BYTE *)this + 24) = v3 | 1;
    *((float *)this + 2) = result;
    return result;
  }
  result = *((float *)a2 + 5);
  v3 |= 8u;
  *((_BYTE *)this + 24) = v3;
  *((float *)this + 5) = result;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
    goto LABEL_10;
  return result;
}

uint64_t legacy_drawing::Rectangle::operator=(uint64_t a1, const legacy_drawing::Rectangle *a2)
{
  int v3;
  __int128 v4;
  uint64_t v6;
  __int128 v7;
  int v8;

  if ((const legacy_drawing::Rectangle *)a1 != a2)
  {
    legacy_drawing::Rectangle::Rectangle((legacy_drawing::Rectangle *)&v6, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v8;
    v8 = v3;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float legacy_drawing::swap(legacy_drawing *this, legacy_drawing::Rectangle *a2, legacy_drawing::Rectangle *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  float result;

  v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v4;
  v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

float legacy_drawing::Rectangle::Rectangle(uint64_t a1, uint64_t a2)
{
  float result;

  *(_QWORD *)a1 = &off_1E77747F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

{
  float result;

  *(_QWORD *)a1 = &off_1E77747F8;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  result = *(float *)(a2 + 8);
  *(float *)(a1 + 8) = result;
  return result;
}

uint64_t legacy_drawing::Rectangle::operator=(uint64_t a1, uint64_t a2)
{
  int v3;
  __int128 v4;
  __int128 v5;
  void (**v7)(legacy_drawing::Rectangle *__hidden);
  __int128 v8;
  int v9;

  if (a1 != a2)
  {
    v7 = &off_1E77747F8;
    v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v9 = *(_DWORD *)(a1 + 24);
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t legacy_drawing::Rectangle::formatText(legacy_drawing::Rectangle *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "height", *((float *)this + 2));
    v5 = *((_BYTE *)this + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(a2, "originY", *((float *)this + 4));
      if ((*((_BYTE *)this + 24) & 8) == 0)
        return PB::TextFormatter::endObject(a2);
      goto LABEL_5;
    }
  }
  else if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "originX", *((float *)this + 3));
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(a2, "width", *((float *)this + 5));
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Rectangle::readFrom(legacy_drawing::Rectangle *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (1)
  {
    v8 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      do
      {
        if (v3 == v2)
        {
          v4 = 1;
          *((_BYTE *)a2 + 24) = 1;
          return v4 == 0;
        }
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_21;
        v15 += 7;
        v2 = v17;
        v14 = v16++ > 8;
      }
      while (!v14);
LABEL_19:
      result = PB::Reader::skip(a2);
      if (!(_DWORD)result)
        return result;
      v2 = *((_QWORD *)a2 + 1);
      goto LABEL_37;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_21:
    if ((v11 & 7) == 4)
      break;
    switch((v11 >> 3))
    {
      case 1u:
        *((_BYTE *)this + 24) |= 2u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 3) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 2u:
        *((_BYTE *)this + 24) |= 4u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 4) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 3u:
        *((_BYTE *)this + 24) |= 8u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)a2 + 2))
          goto LABEL_34;
        *((_DWORD *)this + 5) = *(_DWORD *)(*(_QWORD *)a2 + v2);
        goto LABEL_36;
      case 4u:
        *((_BYTE *)this + 24) |= 1u;
        v2 = *((_QWORD *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(_QWORD *)a2 + v2);
LABEL_36:
          v2 = *((_QWORD *)a2 + 1) + 4;
          *((_QWORD *)a2 + 1) = v2;
        }
        else
        {
LABEL_34:
          *((_BYTE *)a2 + 24) = 1;
        }
        break;
      default:
        goto LABEL_19;
    }
LABEL_37:
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v4 = 0;
  return v4 == 0;
}

uint64_t legacy_drawing::Rectangle::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 12));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(this + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return this;
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  }
LABEL_8:
  this = PB::Writer::write(a2, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(a2, *(float *)(v3 + 8));
  return this;
}

BOOL legacy_drawing::Rectangle::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(float *)(a1 + 12) != *(float *)(a2 + 12))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 4) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 4) == 0 || *(float *)(a1 + 16) != *(float *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 8) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 8) == 0 || *(float *)(a1 + 20) != *(float *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 8) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 24) & 1) == 0;
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    return (*(_BYTE *)(a2 + 24) & 1) != 0 && *(float *)(a1 + 8) == *(float *)(a2 + 8);
  return v2;
}

uint64_t legacy_drawing::Rectangle::hash_value(legacy_drawing::Rectangle *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;

  if ((*((_BYTE *)this + 24) & 2) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 4) != 0)
      goto LABEL_3;
LABEL_15:
    v3 = 0;
    if ((*((_BYTE *)this + 24) & 8) != 0)
      goto LABEL_6;
    goto LABEL_16;
  }
  v8 = *((float *)this + 3);
  v1 = LODWORD(v8);
  if (v8 == 0.0)
    v1 = 0;
  if ((*((_BYTE *)this + 24) & 4) == 0)
    goto LABEL_15;
LABEL_3:
  v2 = *((float *)this + 4);
  v3 = LODWORD(v2);
  if (v2 == 0.0)
    v3 = 0;
  if ((*((_BYTE *)this + 24) & 8) != 0)
  {
LABEL_6:
    v4 = *((float *)this + 5);
    v5 = LODWORD(v4);
    if (v4 == 0.0)
      v5 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_9;
LABEL_17:
    v7 = 0;
    return v3 ^ v1 ^ v5 ^ v7;
  }
LABEL_16:
  v5 = 0;
  if ((*((_BYTE *)this + 24) & 1) == 0)
    goto LABEL_17;
LABEL_9:
  v6 = *((float *)this + 2);
  v7 = LODWORD(v6);
  if (v6 == 0.0)
    v7 = 0;
  return v3 ^ v1 ^ v5 ^ v7;
}

void sub_1BE406608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id a21)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

void sub_1BE407B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE407C30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE407D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE407D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE407F80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE40A168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE40AB0C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Unwind_Resume(a1);
}

void sub_1BE40C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id a17)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a17);
  _Unwind_Resume(a1);
}

void sub_1BE4112E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__22(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void sub_1BE4121C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,id location)
{
  _Block_object_dispose(&STACK[0x260], 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE4123BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t DKUDeviceRGBColorSpace()
{
  if (qword_1ECEE63B8 != -1)
    dispatch_once(&qword_1ECEE63B8, &__block_literal_global_66);
  return _MergedGlobals_147;
}

uint64_t DKUDeviceCMYKColorSpace()
{
  if (qword_1ECEE63C8 != -1)
    dispatch_once(&qword_1ECEE63C8, &__block_literal_global_1_0);
  return qword_1ECEE63C0;
}

uint64_t DKUDeviceGrayColorSpace()
{
  if (qword_1ECEE63D8 != -1)
    dispatch_once(&qword_1ECEE63D8, &__block_literal_global_2_1);
  return qword_1ECEE63D0;
}

uint64_t DKUDeviceLabColorSpace()
{
  if (qword_1ECEE63E8 != -1)
    dispatch_once(&qword_1ECEE63E8, &__block_literal_global_3_0);
  return qword_1ECEE63E0;
}

CGColorRef DKUCGColorCreateWithUIColor(void *a1)
{
  return CGColorCreateCopy((CGColorRef)objc_msgSend(a1, "CGColor"));
}

CGColorRef DKUCGColorCreateDeviceGray(CGFloat a1, CGFloat a2)
{
  CGFloat components[3];

  components[2] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  if (qword_1ECEE63D8 != -1)
    dispatch_once(&qword_1ECEE63D8, &__block_literal_global_2_1);
  return CGColorCreate((CGColorSpaceRef)qword_1ECEE63D0, components);
}

CGPatternRef DKUCGPatternCreateWithImageAndTransform(CGImage *a1, __int128 *a2)
{
  CGFloat v4;
  CGFloat v5;
  size_t Width;
  size_t Height;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  CGRect v16;

  CGImageRetain(a1);
  v4 = *MEMORY[0x1E0C9D538];
  v5 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  if (a2)
  {
    v8 = a2[1];
    v13 = *a2;
    v14 = v8;
    v9 = a2[2];
  }
  else
  {
    v10 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
    v13 = *MEMORY[0x1E0C9BAA8];
    v14 = v10;
    v9 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 32);
  }
  v15 = v9;
  v16.size.height = (double)Height;
  v16.size.width = (double)Width;
  *(_OWORD *)&v12.a = v13;
  *(_OWORD *)&v12.c = v14;
  *(_OWORD *)&v12.tx = v9;
  v16.origin.x = v4;
  v16.origin.y = v5;
  return CGPatternCreate(a1, v16, &v12, (double)Width, v16.size.height, kCGPatternTilingConstantSpacing, 1, &DKUCGPatternCreateWithImageAndTransform_sCallbacks);
}

void DKUDrawImageAtOriginInContext(CGImage *a1, CGContext *a2)
{
  CGFloat v4;
  CGFloat v5;
  CGFloat Width;
  CGRect v7;

  v4 = *MEMORY[0x1E0C9D538];
  v5 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  Width = (double)CGImageGetWidth(a1);
  v7.size.height = (double)CGImageGetHeight(a1);
  v7.origin.x = v4;
  v7.origin.y = v5;
  v7.size.width = Width;
  CGContextDrawImage(a2, v7, a1);
}

CGPatternRef DKUCGPatternCreateWithImage(CGImage *a1)
{
  return DKUCGPatternCreateWithImageAndTransform(a1, 0);
}

CGColorRef DKUCGColorCreatePatternWithImageAndTransform(CGImage *a1, __int128 *a2)
{
  CGPattern *v2;
  CGColorSpace *Pattern;
  CGColorRef v4;
  CGFloat v6[2];

  v6[1] = *(CGFloat *)MEMORY[0x1E0C80C00];
  v2 = DKUCGPatternCreateWithImageAndTransform(a1, a2);
  Pattern = CGColorSpaceCreatePattern(0);
  v6[0] = 1.0;
  v4 = CGColorCreateWithPattern(Pattern, v2, v6);
  CGColorSpaceRelease(Pattern);
  CGPatternRelease(v2);
  return v4;
}

CGColorRef DKUCGColorCreatePatternWithImage(CGImage *a1)
{
  return DKUCGColorCreatePatternWithImageAndTransform(a1, 0);
}

CGColor *DKUCreateCGColorFromHSBInColorSpace(double a1, double a2, double a3, double a4)
{
  void *v4;
  CGColor *v5;

  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0DC3658]), "initWithHue:saturation:brightness:alpha:", a1, a2, a3, a4);
  v5 = (CGColor *)objc_msgSend(v4, "CGColor");
  CGColorRetain(v5);

  return v5;
}

uint64_t DKUHSBFromCGColorRef(CGColor *a1, double *a2, double *a3, double *a4, CGFloat *a5)
{
  CGColorSpace *ColorSpace;
  const CGFloat *Components;

  *a5 = 0.0;
  *a4 = 0.0;
  *a3 = 0.0;
  *a2 = 0.0;
  ColorSpace = CGColorGetColorSpace(a1);
  if (CGColorSpaceGetModel(ColorSpace) != kCGColorSpaceModelRGB || CGColorGetNumberOfComponents(a1) != 4)
    return 0;
  *a5 = CGColorGetAlpha(a1);
  Components = CGColorGetComponents(a1);
  DKURGBToHSB(a2, a3, a4, *Components, Components[1], Components[2]);
  return 1;
}

double DKURGBToHSB(double *a1, double *a2, double *a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  BOOL v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;
  BOOL v18;
  double v19;

  if (a4 < a5 || a4 < a6)
  {
    if (a5 >= a4)
      v7 = a4;
    else
      v7 = a5;
    if (a4 >= a6)
      v8 = a6;
    else
      v8 = a4;
    v9 = a5 < a4 || a5 < a6;
    if (v9)
      v10 = a6;
    else
      v10 = a5;
    if (v9)
      v11 = v7;
    else
      v11 = v8;
  }
  else
  {
    if (a5 >= a6)
      v11 = a6;
    else
      v11 = a5;
    v10 = a4;
  }
  v12 = 0.0;
  if (v10 <= 0.0)
  {
    v14 = 0.0;
  }
  else
  {
    v13 = v10 - v11;
    v14 = (v10 - v11) / v10;
    if (v14 != 0.0)
    {
      v15 = (v10 - a5) / v13;
      v16 = (v10 - a6) / v13;
      if (v10 == a4)
      {
        if (v11 == a5)
          v12 = v16 + 5.0;
        else
          v12 = 1.0 - v15;
      }
      else
      {
        v18 = v10 == a5;
        v19 = (v10 - a4) / v13;
        if (v18)
        {
          if (v11 == a6)
            v12 = v19 + 1.0;
          else
            v12 = 3.0 - v16;
        }
        else if (v11 == a4)
        {
          v12 = v15 + 3.0;
        }
        else
        {
          v12 = 5.0 - v19;
        }
      }
    }
  }
  *a3 = v10;
  result = v12 / 6.0;
  *a1 = v12 / 6.0;
  *a2 = v14;
  return result;
}

double *DKUHSBToRGB(double *result, double *a2, double *a3, double a4, double a5, double a6)
{
  double v6;
  BOOL v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v6 = a4 * 6.0;
  v7 = a4 == 1.0;
  v8 = 0.0;
  if (!v7)
    v8 = v6;
  v9 = (uint64_t)v8;
  v10 = v8 - (double)(uint64_t)v8;
  v11 = (1.0 - a5) * a6;
  v12 = (1.0 - a5 * v10) * a6;
  v13 = (1.0 - a5 * (1.0 - v10)) * a6;
  v14 = a6;
  v15 = v13;
  switch(v9)
  {
    case 0:
      goto LABEL_10;
    case 1:
      v14 = v12;
      v15 = a6;
      goto LABEL_10;
    case 2:
      v14 = v11;
      v15 = a6;
      v11 = v13;
      goto LABEL_10;
    case 3:
      v14 = v11;
      v15 = v12;
      goto LABEL_8;
    case 4:
      v14 = v13;
      v15 = v11;
LABEL_8:
      v11 = a6;
      goto LABEL_10;
    case 5:
      v14 = a6;
      v15 = v11;
      v11 = v12;
LABEL_10:
      *result = v14;
      *a2 = v15;
      *a3 = v11;
      break;
    default:
      return result;
  }
  return result;
}

double DKUCMYKToRGB(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7)
{
  double result;

  *a1 = 1.0 - fmin(a7 + a4 * (1.0 - a7), 1.0);
  *a2 = 1.0 - fmin(a7 + a5 * (1.0 - a7), 1.0);
  result = 1.0 - fmin(a7 + a6 * (1.0 - a7), 1.0);
  *a3 = result;
  return result;
}

BOOL DKUColorIsBlack(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  const CGFloat *Components;
  double v5;

  ColorSpace = CGColorGetColorSpace(a1);
  Model = CGColorSpaceGetModel(ColorSpace);
  Components = CGColorGetComponents(a1);
  v5 = 0.0;
  if (Model)
  {
    if (Model == kCGColorSpaceModelCMYK)
    {
      Components += 3;
      v5 = 1.0;
    }
    else
    {
      if (Model != kCGColorSpaceModelRGB || *Components != 0.0 || Components[1] != 0.0)
        return 0;
      Components += 2;
    }
  }
  return *Components == v5;
}

CGFloat DKUColorLightness(CGColor *a1)
{
  CGColorSpace *ColorSpace;
  CGColorSpaceModel Model;
  const CGFloat *v4;
  double v5;
  const CGFloat *Components;
  double v8;
  double v9;
  double v10;
  double v11;

  ColorSpace = CGColorGetColorSpace(a1);
  Model = CGColorSpaceGetModel(ColorSpace);
  switch(Model)
  {
    case kCGColorSpaceModelMonochrome:
      return *CGColorGetComponents(a1);
    case kCGColorSpaceModelCMYK:
      Components = CGColorGetComponents(a1);
      v8 = Components[3];
      v9 = 1.0 - fmin(v8 + *Components * (1.0 - v8), 1.0);
      v10 = 1.0 - fmin(v8 + Components[1] * (1.0 - v8), 1.0);
      v11 = 1.0 - fmin(v8 + Components[2] * (1.0 - v8), 1.0);
      v5 = fmax(fmax(v9, v10), v11) + fmin(fmin(v9, v10), v11);
      return v5 * 0.5;
    case kCGColorSpaceModelRGB:
      v4 = CGColorGetComponents(a1);
      v5 = fmax(fmax(*v4, v4[1]), v4[2]) + fmin(fmin(*v4, v4[1]), v4[2]);
      return v5 * 0.5;
  }
  NSLog(CFSTR("WARNING: Testing lightness of unsupported color model"));
  return 0.0;
}

CGContext *DKUCreateRGBABitmapContext(int a1, double a2, CGFloat a3, CGFloat a4)
{
  CGContext *v8;
  CGAffineTransform v10;
  CGAffineTransform transform;

  if (qword_1ECEE63B8 != -1)
    dispatch_once(&qword_1ECEE63B8, &__block_literal_global_66);
  v8 = CGBitmapContextCreate(0, (unint64_t)(a2 * a4), (unint64_t)(a3 * a4), 8uLL, (4 * (unint64_t)(a2 * a4) + 31) & 0xFFFFFFFFFFFFFFE0, (CGColorSpaceRef)_MergedGlobals_147, 0x2002u);
  CGAffineTransformMakeScale(&transform, a4, a4);
  CGContextConcatCTM(v8, &transform);
  if (a1)
  {
    CGContextTranslateCTM(v8, 0.0, a3);
    CGAffineTransformMakeScale(&v10, 1.0, -1.0);
    CGContextConcatCTM(v8, &v10);
  }
  return v8;
}

unint64_t DKUBitmapGetAlignedBytesPerRow(uint64_t a1)
{
  return (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
}

CGColorRef DKUCreateCheckerBoardColor(CGColor *a1, CGColor *a2, CGFloat a3, CGFloat a4)
{
  double v8;
  double v9;
  CGContext *v10;
  CGContext *v11;
  CGImage *Image;
  CGColorRef PatternWithImageAndTransform;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v8 = a3 + a3;
  v9 = a4 + a4;
  v10 = DKUCreateRGBABitmapContext(0, a3 + a3, a4 + a4, 1.0);
  if (!v10)
    return 0;
  v11 = v10;
  CGContextSetFillColorWithColor(v10, a1);
  v15.origin.x = 0.0;
  v15.origin.y = 0.0;
  v15.size.width = v8;
  v15.size.height = v9;
  CGContextFillRect(v11, v15);
  CGContextSetFillColorWithColor(v11, a2);
  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = a3;
  v16.size.height = a4;
  CGContextFillRect(v11, v16);
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a3;
  v17.size.height = a4;
  CGContextFillRect(v11, v17);
  Image = CGBitmapContextCreateImage(v11);
  CGContextRelease(v11);
  if (!Image)
    return 0;
  PatternWithImageAndTransform = DKUCGColorCreatePatternWithImageAndTransform(Image, 0);
  CGImageRelease(Image);
  return PatternWithImageAndTransform;
}

uint64_t DKUPatternColorFromGradient(CGGradient *a1, CGFloat a2, CGFloat a3)
{
  CGContext *v6;
  CGContext *v7;
  CGImage *Image;
  uint64_t v9;
  CGPoint v11;
  CGPoint v12;

  v6 = DKUCreateRGBABitmapContext(1, 1.0, a2, a3);
  if (!v6)
    return 0;
  v7 = v6;
  v11.x = 0.0;
  v11.y = 0.0;
  v12.x = 0.0;
  v12.y = a2;
  CGContextDrawLinearGradient(v6, a1, v11, v12, 0);
  Image = CGBitmapContextCreateImage(v7);
  CGContextRelease(v7);
  v9 = objc_msgSend(MEMORY[0x1E0DC3870], "imageWithCGImage:scale:orientation:", Image, 0, a3);
  CGImageRelease(Image);
  if (v9)
    return objc_msgSend(MEMORY[0x1E0DC3658], "colorWithPatternImage:", v9);
  else
    return 0;
}

double DKUColorGetAlpha(CGColor *a1)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = __const_DKUColorGetAlpha_rgba;
  v3 = unk_1BE4FE3C0;
  DKUColorGetRGBAComponents(a1, &v2);
  return *((double *)&v3 + 1);
}

float32x2_t DKUColorGetVectorFloat3(CGColor *a1)
{
  float64x2_t v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2[0] = (float64x2_t)__const_DKUColorGetVectorFloat3_rgba;
  v2[1] = (float64x2_t)unk_1BE4FE3E0;
  DKUColorGetRGBAComponents(a1, v2);
  return vcvt_f32_f64(v2[0]);
}

double DKUColorGetVectorFloat4(CGColor *a1)
{
  double result;
  float64x2_t v2;
  float64x2_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = (float64x2_t)__const_DKUColorIsEqualToColorIgnoringOpacity_secondColorRGBA;
  v3 = (float64x2_t)unk_1BE4FE4C0;
  DKUColorGetRGBAComponents(a1, &v2);
  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2), v3).u64[0];
  return result;
}

double DKUCalculateHue(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;

  v3 = a3 + -6.0;
  if (a3 < 6.0)
    v3 = a3;
  if (a3 < 0.0)
    v4 = a3 + 6.0;
  else
    v4 = v3;
  if (v4 < 1.0)
  {
    v5 = a2 - a1;
    return a1 + v5 * v4;
  }
  if (v4 >= 3.0)
  {
    if (v4 < 4.0)
    {
      v5 = a2 - a1;
      v4 = 4.0 - v4;
      return a1 + v5 * v4;
    }
    return a1;
  }
  return a2;
}

uint64_t DKUConvertsRGBToHSL(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;

  v2 = *(double *)result;
  v3 = *(double *)(result + 8);
  v4 = *(double *)(result + 16);
  v5 = fmax(fmax(*(double *)result, v3), v4);
  v6 = fmin(fmin(*(double *)result, v3), v4);
  v7 = v5 - v6;
  v8 = 0.0;
  v9 = 0.0;
  if (vabdd_f64(v5, v6) >= 0.00999999978)
  {
    if (v5 == v2)
    {
      v10 = (v3 - v4) / v7;
      v11 = 360.0;
    }
    else
    {
      if (v5 == v3)
      {
        v10 = (v4 - v2) / v7;
        v12 = 0x405E000000000000;
      }
      else
      {
        v10 = (v2 - v3) / v7;
        v12 = 0x406E000000000000;
      }
      v11 = *(double *)&v12;
    }
    v9 = v11 + v10 * 60.0;
  }
  v13 = v5 + v6;
  v14 = v13 * 0.5;
  if (v7 != 0.0)
  {
    if (v14 <= 0.5)
      v8 = v7 / v13;
    else
      v8 = v7 / (2.0 - v13);
  }
  v15 = v9 + -360.0;
  if (v9 < 360.0)
    v15 = v9;
  v16 = *(_QWORD *)(result + 24);
  *(double *)a2 = v15 / 360.0;
  *(double *)(a2 + 8) = v8;
  *(double *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t DKUConvertHSLToSRGB(uint64_t result, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;

  v2 = *(double *)(result + 8);
  v3 = *(double *)(result + 16);
  if (fabs(v2) >= 0.00999999978)
  {
    v6 = v2 + v3 - v3 * v2;
    v5 = v3 * (v2 + 1.0);
    if (v3 > 0.5)
      v5 = v6;
    v7 = -(v5 - v3 * 2.0);
    v8 = *(double *)result * 6.0;
    v9 = v8 + 2.0;
    v10 = v8 + 2.0 + -6.0;
    if (v8 + 2.0 < 6.0)
      v10 = v8 + 2.0;
    if (v9 < 0.0)
      v11 = v9 + 6.0;
    else
      v11 = v10;
    if (v11 >= 1.0)
    {
      v3 = v5;
      if (v11 < 3.0 || (v3 = v7, v11 >= 4.0))
      {
LABEL_16:
        v13 = v8 + -6.0;
        if (v8 < 6.0)
          v13 = *(double *)result * 6.0;
        if (v8 < 0.0)
          v13 = v8 + 6.0;
        if (v13 >= 1.0)
        {
          v4 = v5;
          if (v13 < 3.0 || (v4 = v7, v13 >= 4.0))
          {
LABEL_26:
            v15 = v8 + -2.0;
            v16 = v15 + -6.0;
            if (v15 < 6.0)
              v16 = v15;
            if (v15 < 0.0)
              v17 = v15 + 6.0;
            else
              v17 = v16;
            if (v17 >= 1.0)
            {
              if (v17 < 3.0)
                goto LABEL_37;
              if (v17 >= 4.0)
              {
                v5 = v7;
                goto LABEL_37;
              }
              v18 = v5 - v7;
              v17 = 4.0 - v17;
            }
            else
            {
              v18 = v5 - v7;
            }
            v5 = v7 + v18 * v17;
            goto LABEL_37;
          }
          v14 = v5 - v7;
          v13 = 4.0 - v13;
        }
        else
        {
          v14 = v5 - v7;
        }
        v4 = v7 + v14 * v13;
        goto LABEL_26;
      }
      v12 = v5 - v7;
      v11 = 4.0 - v11;
    }
    else
    {
      v12 = v5 - v7;
    }
    v3 = v7 + v12 * v11;
    goto LABEL_16;
  }
  v4 = *(double *)(result + 16);
  v5 = v4;
LABEL_37:
  v19 = *(_QWORD *)(result + 24);
  *(double *)a2 = v3;
  *(double *)(a2 + 8) = v4;
  *(double *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 24) = v19;
  return result;
}

double DKUColoGetLuminance(CGColor *a1)
{
  __int128 v2;
  double v3[3];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = __const_DKUColorIsEqualToColorIgnoringOpacity_secondColorRGBA;
  *(_OWORD *)v3 = unk_1BE4FE4C0;
  DKUColorGetRGBAComponents(a1, &v2);
  return *((double *)&v2 + 1) * 0.7152 + *(double *)&v2 * 0.2126 + v3[0] * 0.0722;
}

uint64_t DKUTransformColorFromRGBA(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v5 = unk_1BE4FE400;
  DKUConvertsRGBToHSL(a1, (uint64_t)&v4);
  v5[0] = 1.0 - v5[0];
  return DKUConvertHSLToSRGB((uint64_t)&v4, a2);
}

uint64_t DKUInverseTransformColorFromRGBA(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v5 = unk_1BE4FE400;
  DKUConvertsRGBToHSL(a1, (uint64_t)&v4);
  v5[0] = 1.0 - v5[0];
  return DKUConvertHSLToSRGB((uint64_t)&v4, a2);
}

uint64_t DKUConvertRGBAForDarkStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v5 = unk_1BE4FE400;
  DKUConvertsRGBToHSL(a1, (uint64_t)&v4);
  v5[0] = 1.0 - v5[0];
  return DKUConvertHSLToSRGB((uint64_t)&v4, a2);
}

uint64_t DKUConvertRGBAForLightStyle(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  double v5[3];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v5 = unk_1BE4FE400;
  DKUConvertsRGBToHSL(a1, (uint64_t)&v4);
  v5[0] = 1.0 - v5[0];
  return DKUConvertHSLToSRGB((uint64_t)&v4, a2);
}

CGColorRef DKUConvertColorForDarkStyle(uint64_t a1)
{
  CGColor *ConvertedToSRGB;
  CGColorRef SRGB;
  __int128 v4;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  double v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6[0] = __const_DKUConvertColorForDarkStyle_rgba;
  v6[1] = unk_1BE4FE420;
  ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB(a1);
  DKUColorGetRGBAComponents(ConvertedToSRGB, v6);
  v4 = __const_DKUConvertColorForDarkStyle_retValue;
  v5 = unk_1BE4FE440;
  v7 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v8 = unk_1BE4FE400;
  DKUConvertsRGBToHSL((uint64_t)v6, (uint64_t)&v7);
  v8[0] = 1.0 - v8[0];
  DKUConvertHSLToSRGB((uint64_t)&v7, (uint64_t)&v4);
  SRGB = CGColorCreateSRGB(*(CGFloat *)&v4, *((CGFloat *)&v4 + 1), *(CGFloat *)&v5, *((CGFloat *)&v5 + 1));
  CFAutorelease(SRGB);
  CGColorRelease(ConvertedToSRGB);
  return SRGB;
}

CGColorRef DKUConvertColorForLightStyle(uint64_t a1)
{
  CGColor *ConvertedToSRGB;
  CGColorRef SRGB;
  __int128 v4;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  double v8[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6[0] = __const_DKUConvertColorForLightStyle_rgba;
  v6[1] = unk_1BE4FE460;
  ConvertedToSRGB = DKUCGColorCreateConvertedToSRGB(a1);
  DKUColorGetRGBAComponents(ConvertedToSRGB, v6);
  v4 = __const_DKUConvertColorForLightStyle_retValue;
  v5 = unk_1BE4FE480;
  v7 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v8 = unk_1BE4FE400;
  DKUConvertsRGBToHSL((uint64_t)v6, (uint64_t)&v7);
  v8[0] = 1.0 - v8[0];
  DKUConvertHSLToSRGB((uint64_t)&v7, (uint64_t)&v4);
  SRGB = CGColorCreateSRGB(*(CGFloat *)&v4, *((CGFloat *)&v4 + 1), *(CGFloat *)&v5, *((CGFloat *)&v5 + 1));
  CFAutorelease(SRGB);
  CGColorRelease(ConvertedToSRGB);
  return SRGB;
}

CGColorRef DKUTransformColor(uint64_t a1, int a2)
{
  if (a2)
    return DKUConvertColorForDarkStyle(a1);
  else
    return DKUConvertColorForLightStyle(a1);
}

uint64_t DKUTransformRGBA(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  double v6[3];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = __const_DKUTransformColorFromRGBA_hsla;
  *(_OWORD *)v6 = unk_1BE4FE400;
  DKUConvertsRGBToHSL(a1, (uint64_t)&v5);
  v6[0] = 1.0 - v6[0];
  return DKUConvertHSLToSRGB((uint64_t)&v5, a3);
}

BOOL DKUColorIsEqualToColor(CGColor *a1, CGColor *a2)
{
  return DKUColorIsEqualToColorIgnoringOpacity(a1, a2, 0);
}

BOOL DKUColorIsEqualToColorIgnoringOpacity(CGColor *a1, CGColor *a2, char a3)
{
  _BOOL4 v5;
  _BOOL8 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double v10[3];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = __const_DKUColorIsEqualToColorIgnoringOpacity_firstColorRGBA;
  *(_OWORD *)v10 = unk_1BE4FE4A0;
  DKUColorGetRGBAComponents(a1, &v9);
  v7 = __const_DKUColorIsEqualToColorIgnoringOpacity_secondColorRGBA;
  v8 = unk_1BE4FE4C0;
  DKUColorGetRGBAComponents(a2, &v7);
  if (*(double *)&v9 != *(double *)&v7
    && vabdd_f64(*(double *)&v9, *(double *)&v7) >= fabs(*(double *)&v7 * 0.000000999999997)
    || *((double *)&v9 + 1) != *((double *)&v7 + 1)
    && vabdd_f64(*((double *)&v9 + 1), *((double *)&v7 + 1)) >= fabs(*((double *)&v7 + 1) * 0.000000999999997))
  {
    return 0;
  }
  v5 = v10[0] != *(double *)&v8 && vabdd_f64(v10[0], *(double *)&v8) >= fabs(*(double *)&v8 * 0.000000999999997);
  result = !v5;
  if (!v5 && (a3 & 1) == 0)
    return v10[1] == *((double *)&v8 + 1)
        || vabdd_f64(v10[1], *((double *)&v8 + 1)) < fabs(*((double *)&v8 + 1) * 0.000000999999997);
  return result;
}

void PKProtobufUnknownFields::PKProtobufUnknownFields(PKProtobufUnknownFields *this)
{
  PB::Writer *v2;

  *(_QWORD *)this = 0;
  v2 = (PB::Writer *)operator new();
  PB::Writer::Writer(v2);
  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)this, v2);
}

void sub_1BE414A40(_Unwind_Exception *a1)
{
  PB::Writer **v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1C3B7F770](v3, 0x10C402FEFCB83);
  std::unique_ptr<PB::Writer>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void PKProtobufUnknownFields::~PKProtobufUnknownFields(PKProtobufUnknownFields *this)
{
  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)this, 0);
}

{
  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)this, 0);
}

const void ***PKProtobufUnknownFields::writeTo(const void ***result, char **a2)
{
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  const void ***v6;
  size_t v7;
  char *v8;
  char *v9;
  size_t v10;
  size_t v11;
  size_t v12;
  char *v13;
  std::bad_alloc *exception;
  std::bad_alloc *v15;

  v4 = **result;
  v3 = (*result)[1];
  v5 = v4 - v3;
  if (v4 != v3)
  {
    v6 = result;
    v7 = (size_t)a2[2];
    v8 = *a2;
    if (v7 < (unint64_t)&(*a2)[v5])
    {
      v9 = a2[1];
      v10 = v7 - (_QWORD)v9;
      if (v10 <= v5)
        v11 = v4 - v3;
      else
        v11 = v10;
      v12 = v11 + v10;
      v13 = (char *)malloc_type_realloc(a2[1], v11 + v10, 0x8352531FuLL);
      if (!v13)
      {
        exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
        v15 = std::bad_alloc::bad_alloc(exception);
        __cxa_throw(v15, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
      }
      v8 = &v13[v8 - v9];
      a2[1] = v13;
      a2[2] = &v13[v12];
      *a2 = v8;
      v3 = (*v6)[1];
      v5 = (_BYTE *)**v6 - v3;
    }
    result = (const void ***)memcpy(v8, v3, v5);
    *a2 += (_BYTE *)**v6 - (_BYTE *)(*v6)[1];
  }
  return result;
}

BOOL PKProtobufUnknownFields::_incrementRecursionDepth(PKProtobufUnknownFields *this)
{
  unint64_t v1;

  v1 = *((_QWORD *)this + 1) + 1;
  *((_QWORD *)this + 1) = v1;
  return v1 < 0x41;
}

PKProtobufUnknownFields *PKProtobufUnknownFields::_decrementRecursionDepth(PKProtobufUnknownFields *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    *((_QWORD *)this + 1) = v1 - 1;
  return this;
}

BOOL PKProtobufUnknownFields::add(PKProtobufUnknownFields *this, int a2, int a3, PB::Reader *a4)
{
  _BOOL8 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  BOOL v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  if (a2 == -1)
    __assert_rtn("add", "PKProtobufUnknownFields.cpp", 76, "tag != TAG_DONT_WRITE");
  result = 0;
  switch(a3)
  {
    case 0:
      v8 = *((_QWORD *)a4 + 1);
      if (v8 < 0xFFFFFFFFFFFFFFF6)
      {
        v9 = *((_QWORD *)a4 + 2);
        if (v8 + 10 <= v9)
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          v37 = *(_QWORD *)a4;
          do
          {
            v38 = v8 + 1;
            *((_QWORD *)a4 + 1) = v8 + 1;
            v39 = *(_BYTE *)(v37 + v8);
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v8 = v38;
            v17 = v35++ > 8;
          }
          while (!v17);
          goto LABEL_58;
        }
      }
      else
      {
        v9 = *((_QWORD *)a4 + 2);
      }
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = *(_QWORD *)a4;
      if (v9 <= v8)
        v9 = *((_QWORD *)a4 + 1);
      while (v9 != v8)
      {
        v31 = v8 + 1;
        v32 = *(_BYTE *)(v30 + v8);
        *((_QWORD *)a4 + 1) = v31;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if (v32 < 0)
        {
          v27 += 7;
          v8 = v31;
          v17 = v28++ > 8;
          if (!v17)
            continue;
        }
        goto LABEL_58;
      }
      *((_BYTE *)a4 + 24) = 1;
LABEL_58:
      PB::Writer::writeVarInt(*(PB::Writer **)this);
      return *((_BYTE *)a4 + 24) == 0;
    case 1:
      v10 = *((_QWORD *)a4 + 1);
      if (v10 <= 0xFFFFFFFFFFFFFFF7 && v10 + 8 <= *((_QWORD *)a4 + 2))
        *((_QWORD *)a4 + 1) = v10 + 8;
      else
        *((_BYTE *)a4 + 24) = 1;
      PB::Writer::writeFixed(*(PB::Writer **)this);
      return *((_BYTE *)a4 + 24) == 0;
    case 2:
      PB::Reader::read();
      PB::Writer::write();
      return *((_BYTE *)a4 + 24) == 0;
    case 3:
      v11 = *((_QWORD *)this + 1) + 1;
      *((_QWORD *)this + 1) = v11;
      if (v11 > 0x40)
        return 0;
      while (2)
      {
        if (*((_BYTE *)a4 + 24))
          goto LABEL_47;
        v12 = *((_QWORD *)a4 + 1);
        v13 = *((_QWORD *)a4 + 2);
        v14 = *(_QWORD *)a4;
        v15 = 0;
        v16 = 0;
        v17 = v12 > 0xFFFFFFFFFFFFFFF5 || v12 + 10 > v13;
        if (v17)
        {
          v20 = 0;
          if (v13 <= v12)
            v13 = *((_QWORD *)a4 + 1);
          while (v13 != v12)
          {
            v18 = v12 + 1;
            v19 = *(_BYTE *)(v14 + v12);
            *((_QWORD *)a4 + 1) = v18;
            v20 |= (unint64_t)(v19 & 0x7F) << v15;
            if ((v19 & 0x80) == 0)
              goto LABEL_27;
            v15 += 7;
            v12 = v18;
            v17 = v16++ > 8;
            if (v17)
            {
LABEL_26:
              LODWORD(v23) = 0;
              v24 = 0;
              goto LABEL_34;
            }
          }
          LODWORD(v23) = 0;
          v24 = 0;
          *((_BYTE *)a4 + 24) = 1;
LABEL_34:
          if ((PKProtobufUnknownFields::add(this, v23, v24, a4) & 1) == 0)
            return 0;
          continue;
        }
        break;
      }
      v20 = 0;
      while (1)
      {
        v21 = v12 + 1;
        *((_QWORD *)a4 + 1) = v12 + 1;
        v22 = *(_BYTE *)(v14 + v12);
        v20 |= (unint64_t)(v22 & 0x7F) << v15;
        if ((v22 & 0x80) == 0)
          break;
        v15 += 7;
        v12 = v21;
        v17 = v16++ > 8;
        if (v17)
          goto LABEL_26;
      }
LABEL_27:
      v24 = v20 & 7;
      v23 = v20 >> 3;
      if ((v20 & 7) != 4 || (_DWORD)v23 != a2)
        goto LABEL_34;
LABEL_47:
      v33 = *((_QWORD *)this + 1);
      if (v33)
        *((_QWORD *)this + 1) = v33 - 1;
      return *((_BYTE *)a4 + 24) == 0;
    case 5:
      v26 = *((_QWORD *)a4 + 1);
      if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *((_QWORD *)a4 + 2))
        *((_QWORD *)a4 + 1) = v26 + 4;
      else
        *((_BYTE *)a4 + 24) = 1;
      PB::Writer::writeFixed(*(PB::Writer **)this);
      return *((_BYTE *)a4 + 24) == 0;
    default:
      return result;
  }
}

void sub_1BE414F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t PKProtobufUnknownFields::addTestInt(PKProtobufUnknownFields *this)
{
  return PB::Writer::writeVarInt(*(PB::Writer **)this);
}

uint64_t PKProtobufUnknownFields::dataSize(PKProtobufUnknownFields *this)
{
  if (*(_QWORD *)this)
    return **(_QWORD **)this - *(_QWORD *)(*(_QWORD *)this + 8);
  else
    return 0;
}

uint64_t PKProtobufUnknownFields::data(PKProtobufUnknownFields *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)this + 8);
  else
    return 0;
}

BOOL PKProtobufUnknownFieldsCompare(_QWORD ***a1, _QWORD ***a2)
{
  _QWORD **v2;
  _QWORD **v3;
  _BOOL8 result;
  BOOL v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  size_t v12;

  v2 = *a1;
  v3 = *a2;
  result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *v2;
    if (v6)
      v7 = *v6 - v6[1];
    else
      v7 = 0;
    v8 = *v3;
    if (v8)
      v9 = *v8 - v8[1];
    else
      v9 = 0;
    if (v7 != v9)
      return 0;
    if (v6)
    {
      v10 = (const void *)v6[1];
      if (v8)
        goto LABEL_14;
    }
    else
    {
      v10 = 0;
      if (v8)
      {
LABEL_14:
        v11 = (const void *)v8[1];
        if (v6)
        {
LABEL_15:
          v12 = *v6 - v6[1];
          return memcmp(v10, v11, v12) == 0;
        }
LABEL_19:
        v12 = 0;
        return memcmp(v10, v11, v12) == 0;
      }
    }
    v11 = 0;
    if (v6)
      goto LABEL_15;
    goto LABEL_19;
  }
  return result;
}

PB::Writer *std::unique_ptr<PB::Writer>::reset[abi:ne180100](PB::Writer **a1, PB::Writer *a2)
{
  PB::Writer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PB::Writer::~Writer(result);
    JUMPOUT(0x1C3B7F770);
  }
  return result;
}

void sub_1BE415CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1BE4160A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4168F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,id a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void *v48;
  void *v49;

  _Unwind_Resume(a1);
}

double matrix4x4_rotation(float a1, float32x4_t a2)
{
  int32x4_t v2;
  float32x2_t v3;
  float32x2_t v4;
  __float2 v5;
  double v6;
  float32x4_t v8;

  v2 = (int32x4_t)vmulq_f32(a2, a2);
  v2.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v2, 2), vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v2.i8, 1))).u32[0];
  v3 = vrsqrte_f32((float32x2_t)v2.u32[0]);
  v4 = vmul_f32(v3, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v3, v3)));
  v8 = vmulq_n_f32(a2, vmul_f32(v4, vrsqrts_f32((float32x2_t)v2.u32[0], vmul_f32(v4, v4))).f32[0]);
  v5 = __sincosf_stret(a1);
  LODWORD(v6) = vmlas_n_f32(v5.__cosval, 1.0 - v5.__cosval, vmulq_f32(v8, v8).f32[0]);
  *((float *)&v6 + 1) = vmuls_lane_f32(v5.__sinval, v8, 2)
                      + (float)(vmuls_lane_f32(v8.f32[0], *(float32x2_t *)v8.f32, 1) * (float)(1.0 - v5.__cosval));
  return v6;
}

void sub_1BE416D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE416E1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41703C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE4171D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE41744C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE417C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE417FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE418090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4188D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, _Unwind_Exception *exception_object, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1BE418B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE419290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE419DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

void sub_1BE41A838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1BE41AAD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;

  a9.super_class = (Class)PKAutoRefineTaskManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE41B33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46)
{
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void sub_1BE41BBE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE41BDD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE41BEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  objc_sync_exit(v9);

  _Unwind_Resume(a1);
}

void sub_1BE41C024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  objc_sync_exit(v9);

  _Unwind_Resume(a1);
}

void sub_1BE41C274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE41C3B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41C510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41C8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE41CA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE41CE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

void sub_1BE41D040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41D110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41D1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE41D350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41D4C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41D690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE41D888(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE41DD34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE41E064(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE41E11C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE41E1CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE41E2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE41E338(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _PKSignpostLog()
{
  if (_PKSignpostLog_onceToken != -1)
    dispatch_once(&_PKSignpostLog_onceToken, &__block_literal_global_68);
  return (id)_PKSignpostLog____PKSignpostLog;
}

void sub_1BE41FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE422CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void sub_1BE422FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKTextInputDescriptionForReserveSpaceState(unint64_t a1)
{
  if (a1 > 5)
    return &stru_1E777DEE8;
  else
    return off_1E777C580[a1];
}

void sub_1BE4261F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PK_UIApplicationIsSystemShell()
{
  if (PK_UIApplicationIsSystemShell_onceToken != -1)
    dispatch_once(&PK_UIApplicationIsSystemShell_onceToken, &__block_literal_global_70);
  return PK_UIApplicationIsSystemShell___result;
}

void sub_1BE427C94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE427D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1BE428E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a16);
  _Unwind_Resume(a1);
}

void sub_1BE429A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a9);
  objc_destroyWeak(&a24);
  _Unwind_Resume(a1);
}

void sub_1BE42A7F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE42A944(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BE42AA10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE42AAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE42ABB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE42ACAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t versioned_document::Version::Version(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774830;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774830;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void versioned_document::Version::~Version(void ***this)
{
  *this = (void **)&off_1E7774830;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

{
  *this = (void **)&off_1E7774830;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
}

{
  *this = (void **)&off_1E7774830;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 1, 0);
  PB::Base::~Base((PB::Base *)this);
  JUMPOUT(0x1C3B7F770);
}

versioned_document::Version *versioned_document::Version::Version(versioned_document::Version *this, const versioned_document::Version *a2)
{
  void ***v4;
  char v5;
  int v6;
  int v7;
  PB::Data *v8;
  void **v10;

  *(_QWORD *)this = &off_1E7774830;
  *((_QWORD *)this + 1) = 0;
  v4 = (void ***)((char *)this + 8);
  *((_DWORD *)this + 6) = 0;
  if ((*((_BYTE *)a2 + 24) & 2) != 0)
  {
    v6 = *((_DWORD *)a2 + 5);
    *((_BYTE *)this + 24) = 2;
    *((_DWORD *)this + 5) = v6;
    v5 = 3;
    if ((*((_BYTE *)a2 + 24) & 1) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = 1;
  if ((*((_BYTE *)a2 + 24) & 1) != 0)
  {
LABEL_5:
    v7 = *((_DWORD *)a2 + 4);
    *((_BYTE *)this + 24) = v5;
    *((_DWORD *)this + 4) = v7;
  }
LABEL_6:
  if (*((_QWORD *)a2 + 1))
  {
    v8 = (PB::Data *)operator new();
    PB::Data::Data(v8, *((const PB::Data **)a2 + 1));
    v10 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, (void **)v8);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v10, 0);
  }
  return this;
}

uint64_t versioned_document::Version::operator=(uint64_t a1, const versioned_document::Version *a2)
{
  int v3;
  uint64_t v4;
  void **v5;
  void (**v7)(versioned_document::Version *__hidden);
  void **v8;
  uint64_t v9;
  int v10;

  if ((const versioned_document::Version *)a1 != a2)
  {
    versioned_document::Version::Version((versioned_document::Version *)&v7, a2);
    v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    v10 = v3;
    v4 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v9;
    v9 = v4;
    v5 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v8;
    v7 = &off_1E7774830;
    v8 = v5;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v8, 0);
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t versioned_document::swap(uint64_t this, versioned_document::Version *a2, versioned_document::Version *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  v4 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  v5 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  return this;
}

uint64_t versioned_document::Version::Version(uint64_t a1, uint64_t a2)
{
  void **v3;

  *(_QWORD *)a1 = &off_1E7774830;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(void ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = &off_1E7774830;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = *(void ***)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 8), v3);
  return a1;
}

uint64_t versioned_document::Version::operator=(uint64_t a1, uint64_t a2)
{
  void **v3;
  int v4;
  uint64_t v5;
  void **v6;
  void (**v8)(versioned_document::Version *__hidden);
  void **v9;
  uint64_t v10;
  int v11;

  if (a1 != a2)
  {
    v8 = &off_1E7774830;
    v9 = 0;
    v11 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    v10 = *(_QWORD *)(a2 + 16);
    v3 = *(void ***)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v9, v3);
    v4 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    v11 = v4;
    v5 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    v10 = v5;
    v6 = *(void ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v9;
    v8 = &off_1E7774830;
    v9 = v6;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v9, 0);
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t versioned_document::Version::formatText(versioned_document::Version *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  if (*((_QWORD *)this + 1))
    PB::TextFormatter::format();
  v5 = *((_BYTE *)this + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "minimumSupportedVersion");
    v5 = *((_BYTE *)this + 24);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "serializationVersion");
  return PB::TextFormatter::endObject(a2);
}

uint64_t versioned_document::Version::readFrom(versioned_document::Version *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  void **v48;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void ***)((char *)this + 8);
    while (1)
    {
      v9 = *(_QWORD *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_32;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v12 >> 3;
      if ((v12 >> 3) == 3)
      {
        v31 = operator new();
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v31 + 8) = 0;
        v48 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v31);
        std::unique_ptr<PB::Data>::reset[abi:ne180100](&v48, 0);
        PB::Reader::read(a2, (PB::Data *)*v8);
      }
      else if ((_DWORD)v20 == 2)
      {
        *((_BYTE *)this + 24) |= 1u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v33)
        {
          v44 = 0;
          v45 = 0;
          v37 = 0;
          if (v33 <= v32)
            v33 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v33 == v32)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_67;
            }
            v46 = v32 + 1;
            v47 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v46;
            v37 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v32 = v46;
            v15 = v45++ > 8;
            if (v15)
            {
LABEL_59:
              LODWORD(v37) = 0;
              goto LABEL_67;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v37) = 0;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              break;
            v35 += 7;
            v32 = v38;
            v15 = v36++ > 8;
            if (v15)
              goto LABEL_59;
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *((_BYTE *)this + 24) |= 2u;
        v21 = *((_QWORD *)a2 + 1);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *(_QWORD *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v40 = 0;
          v41 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)a2 + 1);
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_63;
            }
            v42 = v21 + 1;
            v43 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)a2 + 1) = v42;
            v26 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v21 = v42;
            v15 = v41++ > 8;
            if (v15)
            {
LABEL_52:
              LODWORD(v26) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)a2 + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v15 = v25++ > 8;
            if (v15)
              goto LABEL_52;
          }
        }
LABEL_63:
        *((_DWORD *)this + 5) = v26;
      }
      else
      {
LABEL_32:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)a2 + 1);
      v3 = *((_QWORD *)a2 + 2);
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      v15 = v17++ > 8;
      if (v15)
        goto LABEL_32;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t versioned_document::Version::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  const PB::Data *v5;

  v3 = this;
  v4 = *(_BYTE *)(this + 24);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 24);
  }
  if ((v4 & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Data **)(v3 + 8);
  if (v5)
    return PB::Writer::write(a2, v5);
  return this;
}

BOOL versioned_document::Version::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 24) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 2) == 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) == 0 || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 24) & 1) != 0)
  {
    return 0;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    if (!*(_QWORD *)(a2 + 8))
      return 0;
    if ((PB::Data::operator==() & 1) != 0)
      return 1;
    if (*(_QWORD *)(a1 + 8))
      return 0;
  }
  return *(_QWORD *)(a2 + 8) == 0;
}

uint64_t versioned_document::Version::hash_value(versioned_document::Version *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 24) & 2) != 0)
  {
    v1 = *((unsigned int *)this + 5);
    if ((*((_BYTE *)this + 24) & 1) != 0)
      goto LABEL_3;
  }
  else
  {
    v1 = 0;
    if ((*((_BYTE *)this + 24) & 1) != 0)
    {
LABEL_3:
      v2 = *((unsigned int *)this + 4);
      goto LABEL_6;
    }
  }
  v2 = 0;
LABEL_6:
  if (*((_QWORD *)this + 1))
    v3 = PBHashBytes();
  else
    v3 = 0;
  return v2 ^ v1 ^ v3;
}

void sub_1BE42E3FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE42E498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE42E574(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE42E64C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE42E7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  legacy_drawing::VectorTimestamp::~VectorTimestamp((legacy_drawing::VectorTimestamp *)&a9);

  _Unwind_Resume(a1);
}

void sub_1BE42E9F4(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1BE42EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE42ED54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  PB::Writer::~Writer((PB::Writer *)va1);
  legacy_drawing::VectorTimestamp::~VectorTimestamp((legacy_drawing::VectorTimestamp *)va);
  _Unwind_Resume(a1);
}

id PKAccessibilitySystemDarkenedColor(void *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v5 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v2 = 0.0;
  objc_msgSend(a1, "getHue:saturation:brightness:alpha:", &v5, &v4, &v3, &v2);
  objc_msgSend(MEMORY[0x1E0DC3658], "colorWithHue:saturation:brightness:alpha:", v5, v4, v3 * 0.8, v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1BE42EE18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE42EE9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE42EF04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void sub_1BE42F60C(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BE42FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Unwind_Resume(a1);
}

void sub_1BE430238(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t std::vector<float>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<float>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 2)
  {
    bzero(v4, 4 * v6);
    v20 = &v4[4 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 62)
    std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 1;
  if (v9 >> 1 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v7, v11);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  v15 = &v12[4 * v5];
  v17 = &v12[4 * v16];
  bzero(v15, 4 * v6);
  v18 = &v15[4 * v6];
  while (v14 != v13)
  {
    v19 = *((_DWORD *)v14 - 1);
    v14 -= 4;
    *((_DWORD *)v15 - 1) = v19;
    v15 -= 4;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
    operator delete(v13);
}

void sub_1BE4306E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE430710()
{
  void *v0;

  JUMPOUT(0x1BE430708);
}

void sub_1BE430B34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE430B64()
{
  void *v0;

  JUMPOUT(0x1BE430B5CLL);
}

void sub_1BE431058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4325F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE432798()
{
  JUMPOUT(0x1BE43278CLL);
}

void sub_1BE433068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE433C30(_Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a9);

  _Unwind_Resume(a1);
}

void sub_1BE4340C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE434530(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__111(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1BE434BD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BE435138(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_1BE4352B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4358EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_1BE435E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, id location)
{
  id *v15;
  void *v16;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void ___ZL36PKDeviceSupportsUniversalCompressionv_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = (void *)MGCopyAnswer();
  if (v0)
  {
    v3 = v0;
    objc_msgSend(v0, "objectForKeyedSubscript:", CFSTR("universal-buffer-compression"));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v1;
    if (v1)
      _MergedGlobals_148 = objc_msgSend(v1, "BOOLValue");

    v0 = v3;
  }

}

void sub_1BE4361E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<`anonymous namespace'::PKSixChannelShaderKey,PKMetalShader * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<`anonymous namespace'::PKSixChannelShaderKey,PKMetalShader * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<`anonymous namespace'::PKMetalKernelKey,objc_object  {objcproto23MTLComputePipelineState}* {__strong}>,void *>,std::__hash_node_destructor<std::allocator<void *>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

BOOL PKNamedShaderKey::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      ? (v2 = *(unsigned __int16 *)(a1 + 36) == *(unsigned __int16 *)(a2 + 36))
      : (v2 = 0),
        v2
     && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
     && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)))
  {
    return *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18);
  }
  else
  {
    return 0;
  }
}

uint64_t std::unique_ptr<std::__hash_node<std::__hash_value_type<`anonymous namespace'::PKMetalShaderKey,PKMetalShader * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<`anonymous namespace'::PKMetalShaderKey,PKMetalShader * {__strong}>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  id *v2;

  v2 = *(id **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))

    operator delete(v2);
  }
  return a1;
}

double PK_convertPointFromCoordinateSpaceToCoordinateSpace(void *a1, void *a2, double a3, double a4)
{
  return PK_convertRectFromCoordinateSpaceToCoordinateSpace(a1, a2, a3, a4, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
}

double PK_convertRectFromCoordinateSpaceToCoordinateSpace(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  id v12;
  double v13;
  double v14;

  v11 = a1;
  v12 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v11, "PK_convertRect:toView:", v12, a3, a4, a5, a6);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v11, "PK_convertRect:toCoordinateSpace:", v12, a3, a4, a5, a6);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        objc_msgSend(v12, "PK_convertRect:fromCoordinateSpace:", v11, a3, a4, a5, a6);
      else
        objc_msgSend(v11, "convertRect:toCoordinateSpace:", v12, a3, a4, a5, a6);
    }
  }
  v14 = v13;

  return v14;
}

double PK_convertPointToCoordinateSpaceFromCoordinateSpace(void *a1, void *a2, double a3, double a4)
{
  return PK_convertRectFromCoordinateSpaceToCoordinateSpace(a2, a1, a3, a4, *MEMORY[0x1E0C9D820], *(double *)(MEMORY[0x1E0C9D820] + 8));
}

double PK_convertRectToCoordinateSpaceFromCoordinateSpace(void *a1, void *a2, double a3, double a4, double a5, double a6)
{
  return PK_convertRectFromCoordinateSpaceToCoordinateSpace(a2, a1, a3, a4, a5, a6);
}

CGAffineTransform *PK_transformToConvertFromCoordinateSpaceToCoordinateSpace@<X0>(void *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  id v5;
  id v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v5 = a2;
  v6 = a1;
  objc_msgSend(v6, "convertPoint:toCoordinateSpace:", v5, 1.0, 0.0);
  v8 = v7;
  v10 = v9;
  objc_msgSend(v6, "convertPoint:toCoordinateSpace:", v5, 0.0, 1.0);
  v12 = v11;
  v14 = v13;

  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return DKDTransformMakeFree(0, (uint64_t)a3, 1.0, 0.0, 0.0, 1.0, v8, v10, v12, v14);
}

void sub_1BE4383C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKTextInputDescriptionForResultCommandState(unint64_t a1)
{
  if (a1 > 7)
    return &stru_1E777DEE8;
  else
    return off_1E777CA00[a1];
}

const __CFString *PKTextInputDescriptionForImmediateCommitType(unint64_t a1)
{
  if (a1 > 3)
    return &stru_1E777DEE8;
  else
    return off_1E777C9E0[a1];
}

void sub_1BE43D6D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE43D798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::VectorTimestampClockReplicaClock(uint64_t this)
{
  *(_QWORD *)this = &off_1E77746A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E77746A8;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

void legacy_drawing::VectorTimestampClockReplicaClock::~VectorTimestampClockReplicaClock(legacy_drawing::VectorTimestampClockReplicaClock *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::VectorTimestampClockReplicaClock(uint64_t this, const legacy_drawing::VectorTimestampClockReplicaClock *a2)
{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E77746A8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

{
  char v2;
  int v3;
  int v4;

  *(_QWORD *)this = &off_1E77746A8;
  *(_DWORD *)(this + 16) = 0;
  if ((*((_BYTE *)a2 + 16) & 1) != 0)
  {
    v3 = *((_DWORD *)a2 + 2);
    *(_BYTE *)(this + 16) = 1;
    *(_DWORD *)(this + 8) = v3;
    v2 = 3;
    if ((*((_BYTE *)a2 + 16) & 2) == 0)
      return this;
    goto LABEL_5;
  }
  v2 = 2;
  if ((*((_BYTE *)a2 + 16) & 2) != 0)
  {
LABEL_5:
    v4 = *((_DWORD *)a2 + 3);
    *(_BYTE *)(this + 16) = v2;
    *(_DWORD *)(this + 12) = v4;
  }
  return this;
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::operator=(uint64_t a1, uint64_t a2)
{
  int v2;
  void (**v4)(legacy_drawing::VectorTimestampClockReplicaClock *__hidden);
  char v5;
  char v6;
  int v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;

  if (a1 != a2)
  {
    v4 = &off_1E77746A8;
    v10[0] = &off_1E77746A8;
    v11 = 0;
    v5 = *(_BYTE *)(a2 + 16);
    if ((v5 & 1) != 0)
    {
      LODWORD(v4) = *(_DWORD *)(a2 + 8);
      LOBYTE(v11) = 1;
      v6 = 3;
      if ((v5 & 2) != 0)
      {
LABEL_6:
        v2 = *(_DWORD *)(a2 + 12);
        LOBYTE(v11) = v6;
      }
    }
    else
    {
      v6 = 2;
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        goto LABEL_6;
    }
    v7 = v11;
    v11 = *(_DWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (_DWORD)v4;
    *(_DWORD *)(a1 + 12) = v2;
    *(_DWORD *)(a1 + 16) = v7;
    v10[1] = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  if (a1 != a2)
  {
    v7[0] = &off_1E77746A8;
    v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v8 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 8) = v5;
    v7[1] = v4;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

_DWORD *legacy_drawing::swap(_DWORD *this, legacy_drawing::VectorTimestampClockReplicaClock *a2, legacy_drawing::VectorTimestampClockReplicaClock *a3)
{
  int v3;
  int v4;
  int v5;

  v3 = this[4];
  this[4] = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  v4 = this[2];
  this[2] = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = this[3];
  this[3] = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  return this;
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::VectorTimestampClockReplicaClock(uint64_t result, _DWORD *a2)
{
  *(_QWORD *)result = &off_1E77746A8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

{
  *(_QWORD *)result = &off_1E77746A8;
  *(_DWORD *)(result + 16) = a2[4];
  a2[4] = 0;
  *(_DWORD *)(result + 8) = a2[2];
  *(_DWORD *)(result + 12) = a2[3];
  return result;
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::formatText(legacy_drawing::VectorTimestampClockReplicaClock *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(a2, "clock");
    v5 = *((_BYTE *)this + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(a2, "subclock");
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::readFrom(legacy_drawing::VectorTimestampClockReplicaClock *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  char v39;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_30;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *((_BYTE *)this + 16) |= 2u;
        v26 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v27 = *(_QWORD *)a2;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v36 = 0;
          v37 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_64;
            }
            v38 = v26++;
            v39 = *(_BYTE *)(v27 + v38);
            *((_QWORD *)a2 + 1) = v26;
            v30 |= (unint64_t)(v39 & 0x7F) << v36;
            if ((v39 & 0x80) == 0)
              break;
            v36 += 7;
            v14 = v37++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v38 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)a2 + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 3) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *((_BYTE *)this + 16) |= 1u;
        v19 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v20 = *(_QWORD *)a2;
        if (v19 > 0xFFFFFFFFFFFFFFF5 || v19 + 10 > v2)
        {
          v32 = 0;
          v33 = 0;
          v23 = 0;
          if (v2 <= v19)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v19)
            {
              LODWORD(v23) = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_60;
            }
            v34 = v19++;
            v35 = *(_BYTE *)(v20 + v34);
            *((_QWORD *)a2 + 1) = v19;
            v23 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v14 = v33++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)a2 + 24))
            LODWORD(v23) = 0;
LABEL_59:
          v3 = v34 + 1;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v3 = v19 + 1;
            *((_QWORD *)a2 + 1) = v19 + 1;
            v24 = *(_BYTE *)(v20 + v19);
            v23 |= (unint64_t)(v24 & 0x7F) << v21;
            if ((v24 & 0x80) == 0)
              break;
            v21 += 7;
            v19 = v3;
            v14 = v22++ > 8;
            if (v14)
            {
              LODWORD(v23) = 0;
              break;
            }
          }
        }
LABEL_60:
        *((_DWORD *)this + 2) = v23;
      }
      else
      {
LABEL_30:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_30;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 16);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL legacy_drawing::VectorTimestampClockReplicaClock::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 16) & 1) == 0 || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 16) & 2) == 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    return (*(_BYTE *)(a2 + 16) & 2) != 0 && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return v2;
}

uint64_t legacy_drawing::VectorTimestampClockReplicaClock::hash_value(legacy_drawing::VectorTimestampClockReplicaClock *this)
{
  uint64_t v1;
  uint64_t v2;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v1 = *((unsigned int *)this + 2);
    if ((*((_BYTE *)this + 16) & 2) != 0)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    return v2 ^ v1;
  }
  v1 = 0;
  if ((*((_BYTE *)this + 16) & 2) == 0)
    goto LABEL_5;
LABEL_3:
  v2 = *((unsigned int *)this + 3);
  return v2 ^ v1;
}

void sub_1BE43ED20(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE43F730(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t PKFunctionIdentity::isKindOfFunction(PKFunctionIdentity *this)
{
  return 2;
}

double PKFunctionIdentity::clone(PKFunctionIdentity *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  result = 0.0;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)v1 = &off_1E7773E80;
  return result;
}

void PKFunctionIdentity::~PKFunctionIdentity(PKFunction *this)
{
  PKFunction::~PKFunction(this);
  JUMPOUT(0x1C3B7F770);
}

void sub_1BE4405F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKUUIDCompare(const unsigned __int8 *a1, const unsigned __int8 *a2)
{
  int v2;

  v2 = uuid_compare(a1, a2);
  if (v2 < 0)
    return -1;
  else
    return v2 != 0;
}

void sub_1BE443FD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE444044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE444340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4444FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE44463C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4448F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  drawing::Drawing::~Drawing(&a9);
  _Unwind_Resume(a1);
}

void sub_1BE4449F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE444B9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id PKProtobufUtilitiesNSDataFromArchiveWithHeader<drawing::Drawing>(uint64_t a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  int v12;

  v12 = -261852553;
  v11 = a2;
  v10 = 0;
  PB::Writer::Writer((PB::Writer *)&v8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v8);
  v3 = objc_alloc(MEMORY[0x1E0C99DF0]);
  v4 = (void *)objc_msgSend(v3, "initWithCapacity:", v8 - v9 + 8);
  objc_msgSend(v4, "appendBytes:length:", &v12, 4);
  objc_msgSend(v4, "appendBytes:length:", &v11, 1);
  objc_msgSend(v4, "appendBytes:length:", &v10, 1);
  v7 = 8;
  objc_msgSend(v4, "appendBytes:length:", &v7, 2);
  objc_msgSend(v4, "appendBytes:length:", v9, v8 - v9);
  v5 = (void *)objc_msgSend(v4, "copy");

  PB::Writer::~Writer((PB::Writer *)&v8);
  return v5;
}

void sub_1BE444CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_1BE444E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  void *v9;

  drawingV1::Drawing::~Drawing(&a9);

  _Unwind_Resume(a1);
}

void sub_1BE444FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  legacy_drawing::Drawing::~Drawing((legacy_drawing::Drawing *)va);

  _Unwind_Resume(a1);
}

void sub_1BE44547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE445A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE445DC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE446734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t std::vector<PB::Data>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<PB::Data>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1BE4468F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawing::StrokeID>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E7774A28;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE446A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<drawing::Ink>::emplace_back<>(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = &off_1E7774910;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_1BE446BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BE447500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE447714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)(v2 - 40));
  drawingV1::Drawing::~Drawing((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<drawing::Stroke>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void sub_1BE447894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE447918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4479A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE447A1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE447BA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4480E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE448244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE44847C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE448734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id DKDStringFromAffineTransform(_OWORD *a1)
{
  __int128 v1;
  CGAffineTransform v3;

  v1 = a1[1];
  *(_OWORD *)&v3.a = *a1;
  *(_OWORD *)&v3.c = v1;
  *(_OWORD *)&v3.tx = a1[2];
  NSStringFromCGAffineTransform(&v3);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL DKDTransformsDifferOnlyByTranslation(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

CGPath *DKDCreatePathFromTransformedRect(const CGAffineTransform *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  CGPath *Mutable;
  CGRect v12;

  Mutable = CGPathCreateMutable();
  v12.origin.x = a2;
  v12.origin.y = a3;
  v12.size.width = a4;
  v12.size.height = a5;
  CGPathAddRect(Mutable, a1, v12);
  return Mutable;
}

float64x2_t DKDTransformedCornersOfRect(float64x2_t *a1, double *a2, double *a3, double *a4, double *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  CGFloat MinX;
  CGFloat MinY;
  CGFloat MaxX;
  CGFloat MaxY;
  float64x2_t result;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  MinX = CGRectGetMinX(*(CGRect *)&a6);
  v23.origin.x = a6;
  v23.origin.y = a7;
  v23.size.width = a8;
  v23.size.height = a9;
  MinY = CGRectGetMinY(v23);
  v24.origin.x = a6;
  v24.origin.y = a7;
  v24.size.width = a8;
  v24.size.height = a9;
  MaxX = CGRectGetMaxX(v24);
  v25.origin.x = a6;
  v25.origin.y = a7;
  v25.size.width = a8;
  v25.size.height = a9;
  MaxY = CGRectGetMaxY(v25);
  *a2 = MinX;
  a2[1] = MinY;
  *a3 = MinX;
  a3[1] = MaxY;
  *a4 = MaxX;
  a4[1] = MaxY;
  *a5 = MaxX;
  a5[1] = MinY;
  *(float64x2_t *)a2 = vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a2[1]), *a1, *a2));
  *(float64x2_t *)a3 = vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a3[1]), *a1, *a3));
  *(float64x2_t *)a4 = vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a4[1]), *a1, *a4));
  result = vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a5[1]), *a1, *a5));
  *(float64x2_t *)a5 = result;
  return result;
}

CGAffineTransform *DKDAffineTransformShear@<X0>(_OWORD *a1@<X0>, CGAffineTransform *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 v9;
  CGAffineTransform v11;
  CGAffineTransform t1;

  t1.a = 1.0;
  t1.b = a3;
  t1.c = a4;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)&t1.d = _Q0;
  t1.ty = 1.0;
  v9 = a1[1];
  *(_OWORD *)&v11.a = *a1;
  *(_OWORD *)&v11.c = v9;
  *(_OWORD *)&v11.tx = a1[2];
  return CGAffineTransformConcat(a2, &t1, &v11);
}

long double DKDTransformAngle(double *a1)
{
  double v1;
  double v2;

  v2 = *a1;
  v1 = a1[1];
  if (v1 * a1[2] - *a1 * a1[3] > 0.0)
  {
    v2 = -v2;
    v1 = -v1;
  }
  return atan2(v1, v2) * 57.2957795;
}

BOOL DKDIsTransformFlipped(double *a1)
{
  return a1[2] * a1[1] - *a1 * a1[3] > 0.0;
}

double DKDTransformScale(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

double DKDTransformIsValid(double *a1)
{
  double v1;
  double result;
  double v3;
  BOOL v4;
  BOOL v5;

  v1 = fabs(*a1 * a1[3] - a1[1] * a1[2]);
  result = 0.0;
  if (v1 >= 0.001 && v1 != INFINITY && fabs(a1[4]) != INFINITY)
  {
    v3 = fabs(a1[5]);
    v4 = v3 < INFINITY;
    v5 = v3 <= INFINITY;
    result = 0.0;
    if (v4)
      result = 1.0;
    if (!v5)
      return 1.0;
  }
  return result;
}

double DKDTransformXYScale(double *a1)
{
  return sqrt(a1[1] * a1[1] + *a1 * *a1);
}

CGAffineTransform *DKDTransformNormalizeScale@<X0>(uint64_t a1@<X0>, CGAffineTransform *a2@<X8>)
{
  CGFloat v2;
  CGFloat v3;
  __int128 v4;
  CGAffineTransform v6;

  v2 = 1.0 / sqrt(*(double *)(a1 + 8) * *(double *)(a1 + 8) + *(double *)a1 * *(double *)a1);
  v3 = 1.0 / sqrt(*(double *)(a1 + 24) * *(double *)(a1 + 24) + *(double *)(a1 + 16) * *(double *)(a1 + 16));
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v6.a = *(_OWORD *)a1;
  *(_OWORD *)&v6.c = v4;
  *(_OWORD *)&v6.tx = *(_OWORD *)(a1 + 32);
  return CGAffineTransformScale(a2, &v6, v2, v3);
}

BOOL DKDIsTransformAxisAlignedWithObjectSize(double *a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;

  v3 = 1.0 / (a2 * 0.5);
  v4 = 1.0 / (a3 * 0.5);
  if (v3 >= v4)
    v3 = v4;
  v5 = fabs(a1[3]);
  if (fabs(*a1) < v3 && v5 < v3)
    return 1;
  if (fabs(a1[1]) >= v3)
    return 0;
  return fabs(a1[2]) < v3;
}

BOOL DKDIsTransformAxisAlignedWithThreshold(double *a1, double a2)
{
  if (fabs(*a1) < a2 && fabs(a1[3]) < a2)
    return 1;
  if (fabs(a1[1]) >= a2)
    return 0;
  return fabs(a1[2]) < a2;
}

BOOL DKDIsTransformAxisAligned(double *a1)
{
  if (fabs(*a1) < 1.0e-12 && fabs(a1[3]) < 1.0e-12)
    return 1;
  if (fabs(a1[1]) >= 1.0e-12)
    return 0;
  return fabs(a1[2]) < 1.0e-12;
}

BOOL DKDIsTransformAxisAlignedUnflipped(double *a1)
{
  return fabs(a1[1]) < 1.0e-12 && fabs(a1[2]) < 1.0e-12 && *a1 >= 0.0 && a1[3] >= 0.0;
}

CGAffineTransform *DKDAffineTransformForFlips@<X0>(CGAffineTransform *result@<X0>, int a2@<W1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  double MinX;
  CGFloat MaxX;
  __int128 v22;
  __int128 v23;
  double MinY;
  CGFloat MaxY;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v13 = MEMORY[0x1E0C9BAA8];
  v14 = *MEMORY[0x1E0C9BAA8];
  v15 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a3 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a3 + 16) = v15;
  v16 = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a3 + 32) = v16;
  if ((_DWORD)result)
  {
    v31 = v15;
    v32 = v14;
    v17 = a4;
    v18 = a5;
    v30 = v16;
    v19 = a6;
    MinX = CGRectGetMinX(*(CGRect *)(&a7 - 3));
    v35.origin.x = a4;
    v35.origin.y = a5;
    v35.size.width = a6;
    v35.size.height = a7;
    MaxX = CGRectGetMaxX(v35);
    *(_OWORD *)&v34.a = v32;
    *(_OWORD *)&v34.c = v31;
    *(_OWORD *)&v34.tx = v30;
    CGAffineTransformTranslate((CGAffineTransform *)a3, &v34, MinX + MaxX, 0.0);
    v22 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v33.a = *(_OWORD *)a3;
    *(_OWORD *)&v33.c = v22;
    *(_OWORD *)&v33.tx = *(_OWORD *)(a3 + 32);
    result = CGAffineTransformScale(&v34, &v33, -1.0, 1.0);
    v23 = *(_OWORD *)&v34.c;
    *(_OWORD *)a3 = *(_OWORD *)&v34.a;
    *(_OWORD *)(a3 + 16) = v23;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v34.tx;
  }
  if (a2)
  {
    v36.origin.x = a4;
    v36.origin.y = a5;
    v36.size.width = a6;
    v36.size.height = a7;
    MinY = CGRectGetMinY(v36);
    v37.origin.x = a4;
    v37.origin.y = a5;
    v37.size.width = a6;
    v37.size.height = a7;
    MaxY = CGRectGetMaxY(v37);
    v26 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v33.a = *(_OWORD *)a3;
    *(_OWORD *)&v33.c = v26;
    *(_OWORD *)&v33.tx = *(_OWORD *)(a3 + 32);
    CGAffineTransformTranslate(&v34, &v33, 0.0, MinY + MaxY);
    v27 = *(_OWORD *)&v34.c;
    *(_OWORD *)a3 = *(_OWORD *)&v34.a;
    *(_OWORD *)(a3 + 16) = v27;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v34.tx;
    v28 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&v33.a = *(_OWORD *)a3;
    *(_OWORD *)&v33.c = v28;
    *(_OWORD *)&v33.tx = *(_OWORD *)(a3 + 32);
    result = CGAffineTransformScale(&v34, &v33, 1.0, -1.0);
    v29 = *(_OWORD *)&v34.c;
    *(_OWORD *)a3 = *(_OWORD *)&v34.a;
    *(_OWORD *)(a3 + 16) = v29;
    *(_OWORD *)(a3 + 32) = *(_OWORD *)&v34.tx;
  }
  return result;
}

CGAffineTransform *DKDTransformFromTransformSpace@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v10;
  CGAffineTransform t1;
  CGAffineTransform v12;

  v6 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v6;
  *(_OWORD *)&v10.tx = a2[2];
  CGAffineTransformInvert(&t1, &v10);
  v7 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v7;
  *(_OWORD *)&v10.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  v8 = a2[1];
  *(_OWORD *)&v10.a = *a2;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = a2[2];
  return CGAffineTransformConcat(a3, &v12, &v10);
}

CGAffineTransform *DKDTransformInTransformSpace@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X1>, CGAffineTransform *a3@<X8>)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  CGAffineTransform v9;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v12;

  v5 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v5;
  *(_OWORD *)&t1.tx = a2[2];
  v6 = a1[1];
  *(_OWORD *)&t2.a = *a1;
  *(_OWORD *)&t2.c = v6;
  *(_OWORD *)&t2.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &t2);
  v7 = a2[1];
  *(_OWORD *)&t1.a = *a2;
  *(_OWORD *)&t1.c = v7;
  *(_OWORD *)&t1.tx = a2[2];
  CGAffineTransformInvert(&v9, &t1);
  return CGAffineTransformConcat(a3, &v12, &v9);
}

CGAffineTransform *DKDTransformConvertForNewOrigin@<X0>(_OWORD *a1@<X0>, CGAffineTransform *a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>)
{
  __int128 v8;
  CGAffineTransform v10;
  CGAffineTransform t1;
  CGAffineTransform v12;
  CGAffineTransform v13;
  CGAffineTransform v14;

  memset(&v14, 0, sizeof(v14));
  CGAffineTransformMakeTranslation(&v14, -a3, -a4);
  memset(&v13, 0, sizeof(v13));
  CGAffineTransformMakeTranslation(&v13, a3, a4);
  t1 = v13;
  v8 = a1[1];
  *(_OWORD *)&v10.a = *a1;
  *(_OWORD *)&v10.c = v8;
  *(_OWORD *)&v10.tx = a1[2];
  CGAffineTransformConcat(&v12, &t1, &v10);
  t1 = v14;
  return CGAffineTransformConcat(a2, &v12, &t1);
}

CGAffineTransform *DKDTransformMakeFree@<X0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, CGFloat a7@<D4>, CGFloat a8@<D5>, double a9@<D6>, double a10@<D7>)
{
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22;
  double v23;
  long double v24;
  __int128 v25;
  __int128 v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  CGAffineTransform *result;
  __int128 v34;
  CGAffineTransform v35;
  CGAffineTransform v36;
  CGAffineTransform v37;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v40;

  v15 = a3 - a5;
  v16 = a4 - a6;
  v17 = sqrt(v16 * v16 + v15 * v15);
  if (v17 < 0.0001)
    return CGAffineTransformMakeTranslation((CGAffineTransform *)a2, a7 - a3, a8 - a4);
  v18 = a7 - a9;
  v19 = a8 - a10;
  v20 = sqrt(v19 * v19 + v18 * v18);
  if (v20 < 0.0001)
    return CGAffineTransformMakeTranslation((CGAffineTransform *)a2, a7 - a3, a8 - a4);
  v22 = v20 / v17;
  v23 = atan2(v16, v15);
  v24 = atan2(v19, v18);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  CGAffineTransformMakeTranslation((CGAffineTransform *)a2, -a3, -a4);
  CGAffineTransformMakeRotation(&t2, -v23);
  v25 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v25;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v40, &t1, &t2);
  v26 = *(_OWORD *)&v40.c;
  *(_OWORD *)a2 = *(_OWORD *)&v40.a;
  *(_OWORD *)(a2 + 16) = v26;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40.tx;
  if (a1)
    v27 = 1.0;
  else
    v27 = v22;
  CGAffineTransformMakeScale(&v37, v22, v27);
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v28;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v40, &t1, &v37);
  v29 = *(_OWORD *)&v40.c;
  *(_OWORD *)a2 = *(_OWORD *)&v40.a;
  *(_OWORD *)(a2 + 16) = v29;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40.tx;
  CGAffineTransformMakeRotation(&v36, v24);
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v30;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformConcat(&v40, &t1, &v36);
  v31 = *(_OWORD *)&v40.c;
  *(_OWORD *)a2 = *(_OWORD *)&v40.a;
  *(_OWORD *)(a2 + 16) = v31;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40.tx;
  CGAffineTransformMakeTranslation(&v35, a7, a8);
  v32 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)a2;
  *(_OWORD *)&t1.c = v32;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a2 + 32);
  result = CGAffineTransformConcat(&v40, &t1, &v35);
  v34 = *(_OWORD *)&v40.c;
  *(_OWORD *)a2 = *(_OWORD *)&v40.a;
  *(_OWORD *)(a2 + 16) = v34;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v40.tx;
  return result;
}

CGFloat DKDTransformMakeAxisAligned@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  double v15;
  double v18;
  double v19;
  CGFloat result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGAffineTransform v25;
  CGAffineTransform t1;
  CGAffineTransform t2;
  CGAffineTransform v28;

  v15 = sqrt((a3 - a5) * (a3 - a5) + (a2 - a4) * (a2 - a4));
  if (v15 < 0.0001 || (v18 = sqrt((a7 - a9) * (a7 - a9) + (a6 - a8) * (a6 - a8)), v18 < 0.0001))
  {
    CGAffineTransformMakeTranslation((CGAffineTransform *)a1, a6 - a2, a7 - a3);
  }
  else
  {
    v19 = v18 / v15;
    if (v18 / v15 >= *(double *)&a10)
    {
      if (v19 > *(double *)&a11)
        v19 = *(double *)&a11 + (v19 - *(double *)&a11) * *(double *)&a12;
    }
    else
    {
      v19 = (v19 - *(double *)&a10) * *(double *)&a12 * 0.5 + *(double *)&a10;
    }
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    CGAffineTransformMakeTranslation((CGAffineTransform *)a1, (a2 + a4) * -0.5, (a3 + a5) * -0.5);
    CGAffineTransformMakeScale(&t2, v19, v19);
    v21 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a1;
    *(_OWORD *)&t1.c = v21;
    *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformConcat(&v28, &t1, &t2);
    v22 = *(_OWORD *)&v28.c;
    *(_OWORD *)a1 = *(_OWORD *)&v28.a;
    *(_OWORD *)(a1 + 16) = v22;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28.tx;
    CGAffineTransformMakeTranslation(&v25, (a6 + a8) * 0.5, (a7 + a9) * 0.5);
    v23 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&t1.a = *(_OWORD *)a1;
    *(_OWORD *)&t1.c = v23;
    *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + 32);
    CGAffineTransformConcat(&v28, &t1, &v25);
    v24 = *(_OWORD *)&v28.c;
    *(_OWORD *)a1 = *(_OWORD *)&v28.a;
    *(_OWORD *)(a1 + 16) = v24;
    result = v28.tx;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)&v28.tx;
  }
  return result;
}

CGFloat DKDTransformConvertingRectToRect@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>)
{
  return DKDTransformConvertingRectToRectAtPercent(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1.0);
}

CGFloat DKDTransformConvertingRectToRectAtPercent@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, double a10)
{
  CGFloat v11;
  CGFloat v12;
  double v13;
  double v14;
  CGFloat v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat result;
  CGAffineTransform v23;
  CGAffineTransform v24;

  v11 = (a6 - a2) * a10;
  v12 = (a7 - a3) * a10;
  v13 = DKDMixSizes(1.0, 1.0, a8 / a4, a9 / a5, a10);
  v15 = v14;
  v16 = MEMORY[0x1E0C9BAA8];
  v17 = *MEMORY[0x1E0C9BAA8];
  v18 = *(_OWORD *)(MEMORY[0x1E0C9BAA8] + 16);
  *(_OWORD *)a1 = *MEMORY[0x1E0C9BAA8];
  *(_OWORD *)(a1 + 16) = v18;
  v19 = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(a1 + 32) = v19;
  *(_OWORD *)&v24.a = v17;
  *(_OWORD *)&v24.c = v18;
  *(_OWORD *)&v24.tx = v19;
  CGAffineTransformTranslate((CGAffineTransform *)a1, &v24, v11, v12);
  v20 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v23.a = *(_OWORD *)a1;
  *(_OWORD *)&v23.c = v20;
  *(_OWORD *)&v23.tx = *(_OWORD *)(a1 + 32);
  CGAffineTransformScale(&v24, &v23, v13, v15);
  v21 = *(_OWORD *)&v24.c;
  *(_OWORD *)a1 = *(_OWORD *)&v24.a;
  *(_OWORD *)(a1 + 16) = v21;
  result = v24.tx;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)&v24.tx;
  return result;
}

CGFloat DKD_CGAffineTransformCompose@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  CGFloat v5;
  __int128 v6;
  CGFloat v7;
  CGFloat v8;
  __int128 v9;
  __int128 v10;
  CGFloat result;
  CGAffineTransform v12;
  CGAffineTransform v13;

  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 56);
  v5 = *(double *)(a1 + 16);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v13.a = *(_OWORD *)a2;
  *(_OWORD *)&v13.c = v6;
  *(_OWORD *)&v13.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformRotate((CGAffineTransform *)a2, &v13, v5);
  v7 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)&v12.a = *(_OWORD *)a2;
  *(_OWORD *)&v12.c = v9;
  *(_OWORD *)&v12.tx = *(_OWORD *)(a2 + 32);
  CGAffineTransformScale(&v13, &v12, v7, v8);
  v10 = *(_OWORD *)&v13.c;
  *(_OWORD *)a2 = *(_OWORD *)&v13.a;
  *(_OWORD *)(a2 + 16) = v10;
  result = v13.tx;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v13.tx;
  return result;
}

double DKDTransformDecompose(_OWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  __int128 v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  _OWORD v15[3];
  _QWORD v16[10];

  v16[9] = *MEMORY[0x1E0C80C00];
  v11 = a1[1];
  v15[0] = *a1;
  v15[1] = v11;
  v15[2] = a1[2];
  DKD_CGAffineTransformDecompose((uint64_t)v15, (uint64_t)v16);
  v12 = v16[2];
  *a2 = v16[7];
  *a3 = v16[8];
  *a4 = v12;
  result = *(double *)v16;
  v14 = v16[1];
  *a5 = v16[0];
  *a6 = v14;
  return result;
}

uint64_t DKDTransform3DDecompose(_OWORD *a1, CGFloat *a2, CGFloat *a3, CGFloat *a4, CGFloat *a5, CGFloat *a6)
{
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  CGFloat m13;
  CGFloat m12;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CATransform3D v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = a1[5];
  *(_OWORD *)&v26.m31 = a1[4];
  *(_OWORD *)&v26.m33 = v12;
  v13 = a1[7];
  *(_OWORD *)&v26.m41 = a1[6];
  *(_OWORD *)&v26.m43 = v13;
  v14 = a1[1];
  *(_OWORD *)&v26.m11 = *a1;
  *(_OWORD *)&v26.m13 = v14;
  v15 = a1[3];
  *(_OWORD *)&v26.m21 = a1[2];
  *(_OWORD *)&v26.m23 = v15;
  v16 = MEMORY[0x1C3B7E8AC](&v26);
  if ((_DWORD)v16)
  {
    memset(&v24, 0, sizeof(v24));
    v17 = a1[5];
    *(_OWORD *)&v26.m31 = a1[4];
    *(_OWORD *)&v26.m33 = v17;
    v18 = a1[7];
    *(_OWORD *)&v26.m41 = a1[6];
    *(_OWORD *)&v26.m43 = v18;
    v19 = a1[1];
    *(_OWORD *)&v26.m11 = *a1;
    *(_OWORD *)&v26.m13 = v19;
    v20 = a1[3];
    *(_OWORD *)&v26.m21 = a1[2];
    *(_OWORD *)&v26.m23 = v20;
    CATransform3DGetAffineTransform(&v24, &v26);
    v25 = v24;
    DKD_CGAffineTransformDecompose((uint64_t)&v25, (uint64_t)&v26);
    m13 = v26.m13;
    *a2 = v26.m24;
    *a3 = v26.m31;
    *a4 = m13;
    m12 = v26.m12;
    *a5 = v26.m11;
    *a6 = m12;
  }
  return v16;
}

void DKDTransformMixAffineTransforms(__int128 *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  __int128 v7;
  __int128 v8;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  double *v13;
  uint64_t i;
  _OWORD v15[3];
  __int128 v16;
  _OWORD v17[4];
  double v18;
  double v19;
  double __x;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a1[1];
  v16 = *a1;
  v17[0] = v7;
  v17[1] = a1[2];
  DKD_CGAffineTransformDecompose((uint64_t)&v16, (uint64_t)&v18);
  v8 = a2[1];
  v15[0] = *a2;
  v15[1] = v8;
  v15[2] = a2[2];
  DKD_CGAffineTransformDecompose((uint64_t)v15, (uint64_t)&v16);
  if ((v18 >= 0.0 || *((double *)&v16 + 1) >= 0.0) && (v19 >= 0.0 || *(double *)&v16 >= 0.0))
  {
    v9 = __x;
  }
  else
  {
    v18 = -v18;
    v19 = -v19;
    v9 = __x + dbl_1BE4FE790[__x < 0.0];
  }
  v10 = fmod(v9, 6.28318531);
  __x = v10;
  v11 = fmod(*(long double *)v17, 6.28318531);
  *(double *)v17 = v11;
  if (vabdd_f64(v10, v11) > 3.14159265)
  {
    v12 = v10 <= v11;
    if (v10 > v11)
      v11 = v10;
    v13 = (double *)&v16;
    if (!v12)
      v13 = &v18;
    v13[2] = v11 + -6.28318531;
  }
  for (i = 0; i != 72; i += 8)
    *(double *)((char *)&v18 + i) = *(double *)((char *)&v18 + i)
                                  + (*(double *)((char *)&v17[-1] + i) - *(double *)((char *)&v18 + i)) * a4;
  DKD_CGAffineTransformCompose((uint64_t)&v18, a3);
}

BOOL DKDTransform3DNearlyEqualToTransform(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[8];
  _OWORD v12[8];

  v2 = a1[5];
  v12[4] = a1[4];
  v12[5] = v2;
  v3 = a1[7];
  v12[6] = a1[6];
  v12[7] = v3;
  v4 = a1[1];
  v12[0] = *a1;
  v12[1] = v4;
  v5 = a1[3];
  v12[2] = a1[2];
  v12[3] = v5;
  v6 = a2[5];
  v11[4] = a2[4];
  v11[5] = v6;
  v7 = a2[7];
  v11[6] = a2[6];
  v11[7] = v7;
  v8 = a2[1];
  v11[0] = *a2;
  v11[1] = v8;
  v9 = a2[3];
  v11[2] = a2[2];
  v11[3] = v9;
  return DKDTransform3DNearlyEqualToTransformWithTolerance((double *)v12, (double *)v11, 0.01);
}

BOOL DKDTransform3DNearlyEqualToTransformWithTolerance(double *a1, double *a2, double a3)
{
  return vabdd_f64(*a1, *a2) < a3
      && vabdd_f64(a1[1], a2[1]) < a3
      && vabdd_f64(a1[2], a2[2]) < a3
      && vabdd_f64(a1[3], a2[3]) < a3
      && vabdd_f64(a1[4], a2[4]) < a3
      && vabdd_f64(a1[5], a2[5]) < a3
      && vabdd_f64(a1[6], a2[6]) < a3
      && vabdd_f64(a1[7], a2[7]) < a3
      && vabdd_f64(a1[8], a2[8]) < a3
      && vabdd_f64(a1[9], a2[9]) < a3
      && vabdd_f64(a1[10], a2[10]) < a3
      && vabdd_f64(a1[11], a2[11]) < a3
      && vabdd_f64(a1[12], a2[12]) < a3
      && vabdd_f64(a1[13], a2[13]) < a3
      && vabdd_f64(a1[14], a2[14]) < a3
      && vabdd_f64(a1[15], a2[15]) < a3;
}

void sub_1BE44AB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE44ADFC(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE44B154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE44B57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKRulerExtremaFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  char v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
  v7 = objc_msgSend(WeakRetained, "isSnappedToRuler");

  if ((v7 & 1) != 0)
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex((_QWORD *)a1, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2, a3);
}

void sub_1BE44C448(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKRulerExtremaFilter::run(PKRulerExtremaFilter *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  char *v70;
  char *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  char *v92;
  char *v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v1 = *((_QWORD *)this + 5);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3) > (unint64_t)v1)
  {
    if (v1 < 1 || *((_QWORD *)this + 4) >= v1)
    {
      std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, *((_QWORD *)this + 9));
      v3 = *((_QWORD *)this + 5);
    }
    else
    {
      std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, 0);
      v3 = 0;
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 9) = 0;
    }
    v4 = *((_QWORD *)this + 6);
    if (v3 < 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 7) - v4) >> 3))
    {
      v5 = (_QWORD *)((char *)this + 80);
      v6 = (_QWORD *)((char *)this + 96);
      v7 = (char *)*((_QWORD *)this + 11);
      while (1)
      {
        v8 = v4 + 88 * v3;
        if ((unint64_t)v7 >= *v6)
        {
          v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v7[-*v5] >> 3);
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL)
            goto LABEL_83;
          if (0x5D1745D1745D1746 * ((uint64_t)(*v6 - *v5) >> 3) > v14)
            v14 = 0x5D1745D1745D1746 * ((uint64_t)(*v6 - *v5) >> 3);
          if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*v6 - *v5) >> 3)) >= 0x1745D1745D1745DLL)
            v15 = 0x2E8BA2E8BA2E8BALL;
          else
            v15 = v14;
          if (v15)
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v15);
          else
            v16 = 0;
          v17 = &v16[88 * v13];
          v18 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v17 = *(_OWORD *)v8;
          *((_OWORD *)v17 + 1) = v18;
          v19 = *(_OWORD *)(v8 + 32);
          v20 = *(_OWORD *)(v8 + 48);
          v21 = *(_OWORD *)(v8 + 64);
          *((_QWORD *)v17 + 10) = *(_QWORD *)(v8 + 80);
          *((_OWORD *)v17 + 3) = v20;
          *((_OWORD *)v17 + 4) = v21;
          *((_OWORD *)v17 + 2) = v19;
          v23 = (char *)*((_QWORD *)this + 10);
          v22 = (char *)*((_QWORD *)this + 11);
          v24 = v17;
          if (v22 != v23)
          {
            do
            {
              v25 = *(_OWORD *)(v22 - 88);
              *(_OWORD *)(v24 - 72) = *(_OWORD *)(v22 - 72);
              *(_OWORD *)(v24 - 88) = v25;
              v26 = *(_OWORD *)(v22 - 56);
              v27 = *(_OWORD *)(v22 - 40);
              v28 = *(_OWORD *)(v22 - 24);
              *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v28;
              *(_OWORD *)(v24 - 40) = v27;
              *(_OWORD *)(v24 - 56) = v26;
              v24 -= 88;
              v22 -= 88;
            }
            while (v22 != v23);
            v22 = (char *)*v5;
          }
          v7 = v17 + 88;
          *((_QWORD *)this + 10) = v24;
          *((_QWORD *)this + 11) = v17 + 88;
          *((_QWORD *)this + 12) = &v16[88 * v15];
          if (v22)
            operator delete(v22);
        }
        else
        {
          v9 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v7 = *(_OWORD *)v8;
          *((_OWORD *)v7 + 1) = v9;
          v10 = *(_OWORD *)(v8 + 32);
          v11 = *(_OWORD *)(v8 + 48);
          v12 = *(_OWORD *)(v8 + 64);
          *((_QWORD *)v7 + 10) = *(_QWORD *)(v8 + 80);
          *((_OWORD *)v7 + 3) = v11;
          *((_OWORD *)v7 + 4) = v12;
          *((_OWORD *)v7 + 2) = v10;
          v7 += 88;
        }
        *((_QWORD *)this + 11) = v7;
        if (PKRulerExtremaFilter::isReversal(this))
          break;
        v34 = *((_QWORD *)this + 4);
        if ((uint64_t)v3 < v34)
        {
          v35 = 1;
LABEL_77:
          *((_QWORD *)this + 9) += v35;
        }
LABEL_78:
        ++v3;
        v4 = *((_QWORD *)this + 6);
        if (v3 >= 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 7) - v4) >> 3))
          goto LABEL_81;
      }
      v29 = v7 - 88;
      *((_QWORD *)this + 11) = v7 - 88;
      v30 = v7 - 176;
      v31 = *((_QWORD *)this + 12);
      if ((unint64_t)(v7 - 88) >= v31)
      {
        v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v29[-*v5] >> 3);
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_83;
        v38 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v31 - *v5) >> 3);
        if (2 * v38 > v37)
          v37 = 2 * v38;
        if (v38 >= 0x1745D1745D1745DLL)
          v39 = 0x2E8BA2E8BA2E8BALL;
        else
          v39 = v37;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v39);
        else
          v40 = 0;
        v41 = &v40[88 * v36];
        v42 = *((_OWORD *)v30 + 1);
        *(_OWORD *)v41 = *(_OWORD *)v30;
        *((_OWORD *)v41 + 1) = v42;
        v43 = *((_OWORD *)v30 + 2);
        v44 = *((_OWORD *)v30 + 3);
        v45 = *((_OWORD *)v30 + 4);
        *((_QWORD *)v41 + 10) = *((_QWORD *)v30 + 10);
        *((_OWORD *)v41 + 3) = v44;
        *((_OWORD *)v41 + 4) = v45;
        *((_OWORD *)v41 + 2) = v43;
        v47 = (char *)*((_QWORD *)this + 10);
        v46 = (char *)*((_QWORD *)this + 11);
        v48 = v41;
        if (v46 != v47)
        {
          do
          {
            v49 = *(_OWORD *)(v46 - 88);
            *(_OWORD *)(v48 - 72) = *(_OWORD *)(v46 - 72);
            *(_OWORD *)(v48 - 88) = v49;
            v50 = *(_OWORD *)(v46 - 56);
            v51 = *(_OWORD *)(v46 - 40);
            v52 = *(_OWORD *)(v46 - 24);
            *((_QWORD *)v48 - 1) = *((_QWORD *)v46 - 1);
            *(_OWORD *)(v48 - 24) = v52;
            *(_OWORD *)(v48 - 40) = v51;
            *(_OWORD *)(v48 - 56) = v50;
            v48 -= 88;
            v46 -= 88;
          }
          while (v46 != v47);
          v46 = (char *)*v5;
        }
        v7 = v41 + 88;
        *((_QWORD *)this + 10) = v48;
        *((_QWORD *)this + 11) = v41 + 88;
        *((_QWORD *)this + 12) = &v40[88 * v39];
        if (v46)
          operator delete(v46);
      }
      else
      {
        v32 = *((_OWORD *)v7 - 8);
        *(_OWORD *)(v7 - 56) = *((_OWORD *)v7 - 9);
        *(_OWORD *)(v7 - 40) = v32;
        *(_OWORD *)(v7 - 24) = *((_OWORD *)v7 - 7);
        *((_QWORD *)v7 - 1) = *((_QWORD *)v7 - 12);
        v33 = *((_OWORD *)v7 - 10);
        *(_OWORD *)v29 = *(_OWORD *)v30;
        *(_OWORD *)(v7 - 72) = v33;
      }
      *((_QWORD *)this + 11) = v7;
      v53 = v7 - 88;
      v54 = *((_QWORD *)this + 12);
      if ((unint64_t)v7 >= v54)
      {
        v59 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v7[-*v5] >> 3);
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) > 0x2E8BA2E8BA2E8BALL)
          goto LABEL_83;
        v61 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v54 - *v5) >> 3);
        if (2 * v61 > v60)
          v60 = 2 * v61;
        if (v61 >= 0x1745D1745D1745DLL)
          v62 = 0x2E8BA2E8BA2E8BALL;
        else
          v62 = v60;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v62);
        else
          v63 = 0;
        v64 = &v63[88 * v59];
        v65 = *((_OWORD *)v53 + 1);
        *(_OWORD *)v64 = *(_OWORD *)v53;
        *((_OWORD *)v64 + 1) = v65;
        v66 = *((_OWORD *)v53 + 2);
        v67 = *((_OWORD *)v53 + 3);
        v68 = *((_OWORD *)v53 + 4);
        *((_QWORD *)v64 + 10) = *((_QWORD *)v53 + 10);
        *((_OWORD *)v64 + 3) = v67;
        *((_OWORD *)v64 + 4) = v68;
        *((_OWORD *)v64 + 2) = v66;
        v70 = (char *)*((_QWORD *)this + 10);
        v69 = (char *)*((_QWORD *)this + 11);
        v71 = v64;
        if (v69 != v70)
        {
          do
          {
            v72 = *(_OWORD *)(v69 - 88);
            *(_OWORD *)(v71 - 72) = *(_OWORD *)(v69 - 72);
            *(_OWORD *)(v71 - 88) = v72;
            v73 = *(_OWORD *)(v69 - 56);
            v74 = *(_OWORD *)(v69 - 40);
            v75 = *(_OWORD *)(v69 - 24);
            *((_QWORD *)v71 - 1) = *((_QWORD *)v69 - 1);
            *(_OWORD *)(v71 - 24) = v75;
            *(_OWORD *)(v71 - 40) = v74;
            *(_OWORD *)(v71 - 56) = v73;
            v71 -= 88;
            v69 -= 88;
          }
          while (v69 != v70);
          v69 = (char *)*v5;
        }
        v58 = v64 + 88;
        *((_QWORD *)this + 10) = v71;
        *((_QWORD *)this + 11) = v64 + 88;
        *((_QWORD *)this + 12) = &v63[88 * v62];
        if (v69)
          operator delete(v69);
      }
      else
      {
        v55 = *(_OWORD *)(v7 - 40);
        *((_OWORD *)v7 + 2) = *(_OWORD *)(v7 - 56);
        *((_OWORD *)v7 + 3) = v55;
        *((_OWORD *)v7 + 4) = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v7 + 10) = *((_QWORD *)v7 - 1);
        v56 = *(_OWORD *)v53;
        v57 = *(_OWORD *)(v7 - 72);
        v58 = v7 + 88;
        *(_OWORD *)v7 = v56;
        *((_OWORD *)v7 + 1) = v57;
      }
      *((_QWORD *)this + 11) = v58;
      v76 = *((_QWORD *)this + 6) + 88 * v3;
      v77 = *((_QWORD *)this + 12);
      if ((unint64_t)v58 >= v77)
      {
        v82 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v58[-*v5] >> 3);
        v83 = v82 + 1;
        if ((unint64_t)(v82 + 1) > 0x2E8BA2E8BA2E8BALL)
LABEL_83:
          std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
        v84 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v77 - *v5) >> 3);
        if (2 * v84 > v83)
          v83 = 2 * v84;
        if (v84 >= 0x1745D1745D1745DLL)
          v85 = 0x2E8BA2E8BA2E8BALL;
        else
          v85 = v83;
        if (v85)
          v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_PKStrokePoint>>((uint64_t)this + 96, v85);
        else
          v86 = 0;
        v87 = &v86[88 * v82];
        v88 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)v87 = *(_OWORD *)v76;
        *((_OWORD *)v87 + 1) = v88;
        v89 = *(_OWORD *)(v76 + 32);
        v90 = *(_OWORD *)(v76 + 48);
        v91 = *(_OWORD *)(v76 + 64);
        *((_QWORD *)v87 + 10) = *(_QWORD *)(v76 + 80);
        *((_OWORD *)v87 + 3) = v90;
        *((_OWORD *)v87 + 4) = v91;
        *((_OWORD *)v87 + 2) = v89;
        v93 = (char *)*((_QWORD *)this + 10);
        v92 = (char *)*((_QWORD *)this + 11);
        v94 = v87;
        if (v92 != v93)
        {
          do
          {
            v95 = *(_OWORD *)(v92 - 88);
            *(_OWORD *)(v94 - 72) = *(_OWORD *)(v92 - 72);
            *(_OWORD *)(v94 - 88) = v95;
            v96 = *(_OWORD *)(v92 - 56);
            v97 = *(_OWORD *)(v92 - 40);
            v98 = *(_OWORD *)(v92 - 24);
            *((_QWORD *)v94 - 1) = *((_QWORD *)v92 - 1);
            *(_OWORD *)(v94 - 24) = v98;
            *(_OWORD *)(v94 - 40) = v97;
            *(_OWORD *)(v94 - 56) = v96;
            v94 -= 88;
            v92 -= 88;
          }
          while (v92 != v93);
          v92 = (char *)*v5;
        }
        v7 = v87 + 88;
        *((_QWORD *)this + 10) = v94;
        *((_QWORD *)this + 11) = v87 + 88;
        *((_QWORD *)this + 12) = &v86[88 * v85];
        if (v92)
          operator delete(v92);
      }
      else
      {
        v78 = *(_OWORD *)(v76 + 16);
        *(_OWORD *)v58 = *(_OWORD *)v76;
        *((_OWORD *)v58 + 1) = v78;
        v79 = *(_OWORD *)(v76 + 32);
        v80 = *(_OWORD *)(v76 + 48);
        v81 = *(_OWORD *)(v76 + 64);
        *((_QWORD *)v58 + 10) = *(_QWORD *)(v76 + 80);
        *((_OWORD *)v58 + 3) = v80;
        *((_OWORD *)v58 + 4) = v81;
        *((_OWORD *)v58 + 2) = v79;
        v7 = v58 + 88;
      }
      *((_QWORD *)this + 11) = v7;
      v34 = *((_QWORD *)this + 4);
      if ((uint64_t)v3 >= v34)
        goto LABEL_78;
      v35 = 3;
      goto LABEL_77;
    }
    v34 = *((_QWORD *)this + 4);
LABEL_81:
    *((_QWORD *)this + 5) = v34;
  }
}

BOOL PKRulerExtremaFilter::isReversal(PKRulerExtremaFilter *this)
{
  uint64_t v1;
  unint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = *((_QWORD *)this + 10);
  v2 = 0x2E8BA2E8BA2E8BA3 * ((*((_QWORD *)this + 11) - v1) >> 3);
  if (v2 < 3)
    return 0;
  result = 0;
  v4 = v1 + 88 * v2;
  v5 = *(double *)(v4 - 168);
  v6 = *(double *)(v4 - 160);
  v7 = *(double *)(v4 - 256) - v5;
  v8 = *(double *)(v4 - 248) - v6;
  v9 = sqrt(v8 * v8 + v7 * v7);
  if (v9 >= 0.00001)
  {
    v10 = *(double *)(v4 - 80) - v5;
    v11 = *(double *)(v4 - 72) - v6;
    v12 = sqrt(v11 * v11 + v10 * v10);
    if (v12 >= 0.00001)
      return v8 * (1.0 / v9) * (v11 * (1.0 / v12)) + v7 * (1.0 / v9) * (v10 * (1.0 / v12)) >= 0.9;
  }
  return result;
}

void sub_1BE44D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,id a27)
{
  id *v27;
  id *v28;

  _Block_object_dispose(&a16, 8);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a27);
  _Unwind_Resume(a1);
}

uint64_t drawing::StrokeID::StrokeID(uint64_t this)
{
  *(_QWORD *)this = &off_1E7774A28;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E7774A28;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void drawing::StrokeID::~StrokeID(drawing::StrokeID *this)
{
  PB::Base::~Base(this);
  JUMPOUT(0x1C3B7F770);
}

uint64_t drawing::StrokeID::StrokeID(uint64_t this, const drawing::StrokeID *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7774A28;
  *(_DWORD *)(this + 32) = 0;
  v2 = *((_BYTE *)a2 + 32);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 1);
    v3 = 1;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = v4;
    v2 = *((_BYTE *)a2 + 32);
    if ((v2 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v3 = 0;
  if ((*((_BYTE *)a2 + 32) & 2) != 0)
  {
LABEL_5:
    v5 = *((_QWORD *)a2 + 2);
    v3 |= 2u;
    *(_BYTE *)(this + 32) = v3;
    *(_QWORD *)(this + 16) = v5;
    v2 = *((_BYTE *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    v6 = *((_QWORD *)a2 + 3);
    *(_BYTE *)(this + 32) = v3 | 4;
    *(_QWORD *)(this + 24) = v6;
  }
  return this;
}

uint64_t drawing::StrokeID::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (**v5)(drawing::StrokeID *__hidden);
  char v6;
  char v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  void (**v12)(drawing::StrokeID *__hidden);
  __int128 v13;
  uint64_t v14;
  int v15;

  if (a1 != a2)
  {
    v5 = &off_1E7774A28;
    v12 = &off_1E7774A28;
    v15 = 0;
    v6 = *(_BYTE *)(a2 + 32);
    if ((v6 & 1) != 0)
    {
      v5 = *(void (***)(drawing::StrokeID *__hidden))(a2 + 8);
      v7 = 1;
      LOBYTE(v15) = 1;
      if ((v6 & 2) != 0)
      {
LABEL_4:
        v2 = *(_QWORD *)(a2 + 16);
        v7 |= 2u;
        LOBYTE(v15) = v7;
        if ((v6 & 4) != 0)
          goto LABEL_8;
        goto LABEL_9;
      }
    }
    else
    {
      v7 = 0;
      if ((*(_BYTE *)(a2 + 32) & 2) != 0)
        goto LABEL_4;
    }
    if ((v6 & 4) != 0)
    {
LABEL_8:
      v3 = *(_QWORD *)(a2 + 24);
      LOBYTE(v15) = v7 | 4;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v15;
    v15 = v8;
    v9 = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v2;
    v13 = v9;
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v3;
    v14 = v10;
    PB::Base::~Base((PB::Base *)&v12);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  void (**v9)(drawing::StrokeID *__hidden);
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a1 != a2)
  {
    v9 = &off_1E7774A28;
    v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    v4 = *(_QWORD *)(a2 + 24);
    v12 = *(_DWORD *)(a1 + 32);
    v5 = *(_OWORD *)(a1 + 8);
    v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    v10 = v5;
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    v11 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t drawing::swap(uint64_t this, drawing::StrokeID *a2, drawing::StrokeID *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_DWORD *)(this + 32);
  *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  v4 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  v5 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v5;
  v6 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  return this;
}

uint64_t drawing::StrokeID::StrokeID(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = &off_1E7774A28;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

{
  *(_QWORD *)result = &off_1E7774A28;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

uint64_t drawing::StrokeID::formatText(drawing::StrokeID *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 1) == 0)
  {
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(a2, "replicaIndex");
    if ((*((_BYTE *)this + 32) & 4) == 0)
      return PB::TextFormatter::endObject(a2);
    goto LABEL_4;
  }
  PB::TextFormatter::format(a2, "clock");
  v5 = *((_BYTE *)this + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "subclock");
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::StrokeID::readFrom(drawing::StrokeID *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v3 = *((_QWORD *)a2 + 1);
  v2 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)a2 + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_31;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v19 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((_BYTE *)this + 32) |= 4u;
        v27 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v28 = *(_QWORD *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v43 = 0;
          v44 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v27)
            {
              v31 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_83;
            }
            v45 = v27++;
            v46 = *(_BYTE *)(v28 + v45);
            *((_QWORD *)a2 + 1) = v27;
            v31 |= (unint64_t)(v46 & 0x7F) << v43;
            if ((v46 & 0x80) == 0)
              break;
            v43 += 7;
            v14 = v44++ > 8;
            if (v14)
            {
              v31 = 0;
              goto LABEL_82;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v31 = 0;
LABEL_82:
          v3 = v45 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)a2 + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              v31 = 0;
              break;
            }
          }
        }
LABEL_83:
        *((_QWORD *)this + 3) = v31;
      }
      else if ((_DWORD)v19 == 2)
      {
        *((_BYTE *)this + 32) |= 2u;
        v33 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v47 = 0;
          v48 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v33)
            {
              v37 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_88;
            }
            v49 = v33++;
            v50 = *(_BYTE *)(v34 + v49);
            *((_QWORD *)a2 + 1) = v33;
            v37 |= (unint64_t)(v50 & 0x7F) << v47;
            if ((v50 & 0x80) == 0)
              break;
            v47 += 7;
            v14 = v48++ > 8;
            if (v14)
            {
              v37 = 0;
              goto LABEL_87;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v37 = 0;
LABEL_87:
          v3 = v49 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)a2 + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              v37 = 0;
              break;
            }
          }
        }
LABEL_88:
        *((_QWORD *)this + 2) = v37;
      }
      else if ((_DWORD)v19 == 1)
      {
        *((_BYTE *)this + 32) |= 1u;
        v20 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
        v21 = *(_QWORD *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v39 = 0;
          v40 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)a2 + 1);
          else
            v3 = *((_QWORD *)a2 + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)a2 + 24) = 1;
              goto LABEL_78;
            }
            v41 = v20++;
            v42 = *(_BYTE *)(v21 + v41);
            *((_QWORD *)a2 + 1) = v20;
            v24 |= (unint64_t)(v42 & 0x7F) << v39;
            if ((v42 & 0x80) == 0)
              break;
            v39 += 7;
            v14 = v40++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_77;
            }
          }
          if (*((_BYTE *)a2 + 24))
            v24 = 0;
LABEL_77:
          v3 = v41 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)a2 + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_78:
        *((_QWORD *)this + 1) = v24;
      }
      else
      {
LABEL_31:
        result = PB::Reader::skip(a2);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)a2 + 1);
        v2 = *((_QWORD *)a2 + 2);
      }
      v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((_BYTE *)a2 + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      v14 = v16++ > 8;
      if (v14)
        goto LABEL_31;
    }
    v4 = 1;
    *((_BYTE *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t drawing::StrokeID::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;

  v3 = this;
  v4 = *(_BYTE *)(this + 32);
  if ((v4 & 1) != 0)
  {
    this = PB::Writer::writeVarInt(a2);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return this;
      return PB::Writer::writeVarInt(a2);
    }
  }
  else if ((*(_BYTE *)(this + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2);
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::writeVarInt(a2);
  return this;
}

BOOL drawing::StrokeID::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 1) != 0)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 32) & 2) != 0)
  {
    return 0;
  }
  v2 = (*(_BYTE *)(a2 + 32) & 4) == 0;
  if ((*(_BYTE *)(a1 + 32) & 4) != 0)
    return (*(_BYTE *)(a2 + 32) & 4) != 0 && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
  return v2;
}

uint64_t drawing::StrokeID::hash_value(drawing::StrokeID *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v1 = 0;
    if ((*((_BYTE *)this + 32) & 2) != 0)
      goto LABEL_3;
LABEL_6:
    v2 = 0;
    if ((*((_BYTE *)this + 32) & 4) != 0)
      goto LABEL_4;
LABEL_7:
    v3 = 0;
    return v2 ^ v1 ^ v3;
  }
  v1 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 32) & 2) == 0)
    goto LABEL_6;
LABEL_3:
  v2 = *((_QWORD *)this + 2);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    goto LABEL_7;
LABEL_4:
  v3 = *((_QWORD *)this + 3);
  return v2 ^ v1 ^ v3;
}

void sub_1BE44F608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void sub_1BE44F7B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE44F80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE44F854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE44F940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PKAutoRefineQuery;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE44FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE450044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE4501CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE450398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE450444(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE450B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

uint64_t drawing::StrokeData::StrokeData(uint64_t this)
{
  *(_QWORD *)this = &off_1E77748A0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 92) = 0;
  *(_QWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E77748A0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 92) = 0;
  *(_QWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 100) = 0;
  return this;
}

void drawing::StrokeData::~StrokeData(void ***this)
{
  void ***v2;

  *this = (void **)&off_1E77748A0;
  v2 = this + 3;
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 8, 0);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 5, 0);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v2, 0);
  PB::Base::~Base((PB::Base *)this);
}

{
  drawing::StrokeData::~StrokeData(this);
  JUMPOUT(0x1C3B7F770);
}

drawing::StrokeData *drawing::StrokeData::StrokeData(drawing::StrokeData *this, const drawing::StrokeData *a2)
{
  void ***v4;
  void ***v5;
  void ***v6;
  PB::Data *v7;
  char v8;
  uint64_t v9;
  PB::Data *v10;
  PB::Data *v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void **v20;

  *((_QWORD *)this + 3) = 0;
  v4 = (void ***)((char *)this + 24);
  *((_QWORD *)this + 5) = 0;
  v5 = (void ***)((char *)this + 40);
  *((_QWORD *)this + 8) = 0;
  v6 = (void ***)((char *)this + 64);
  *(_QWORD *)this = &off_1E77748A0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]((_QWORD *)this + 11, (uint64_t *)a2 + 11);
  *((_DWORD *)this + 21) = 0;
  if (*((_QWORD *)a2 + 8))
  {
    v7 = (PB::Data *)operator new();
    PB::Data::Data(v7, *((const PB::Data **)a2 + 8));
    v20 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v6, (void **)v7);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v20, 0);
  }
  v8 = *((_BYTE *)a2 + 84);
  if ((v8 & 0x20) != 0)
  {
    v15 = *((_QWORD *)a2 + 9);
    *((_BYTE *)this + 84) |= 0x20u;
    *((_QWORD *)this + 9) = v15;
    v8 = *((_BYTE *)a2 + 84);
    if ((v8 & 4) == 0)
    {
LABEL_5:
      if ((v8 & 8) == 0)
        goto LABEL_6;
      goto LABEL_19;
    }
  }
  else if ((*((_BYTE *)a2 + 84) & 4) == 0)
  {
    goto LABEL_5;
  }
  v16 = *((_QWORD *)a2 + 4);
  *((_BYTE *)this + 84) |= 4u;
  *((_QWORD *)this + 4) = v16;
  v8 = *((_BYTE *)a2 + 84);
  if ((v8 & 8) == 0)
  {
LABEL_6:
    if ((v8 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_19:
  v17 = *((_QWORD *)a2 + 6);
  *((_BYTE *)this + 84) |= 8u;
  *((_QWORD *)this + 6) = v17;
  if ((*((_BYTE *)a2 + 84) & 2) != 0)
  {
LABEL_7:
    v9 = *((_QWORD *)a2 + 2);
    *((_BYTE *)this + 84) |= 2u;
    *((_QWORD *)this + 2) = v9;
  }
LABEL_8:
  if (*((_QWORD *)a2 + 3))
  {
    v10 = (PB::Data *)operator new();
    PB::Data::Data(v10, *((const PB::Data **)a2 + 3));
    v20 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, (void **)v10);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v20, 0);
  }
  if (*((_QWORD *)a2 + 5))
  {
    v11 = (PB::Data *)operator new();
    PB::Data::Data(v11, *((const PB::Data **)a2 + 5));
    v20 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, (void **)v11);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v20, 0);
  }
  v12 = *((_BYTE *)a2 + 84);
  if ((v12 & 0x40) == 0)
  {
    if ((*((_BYTE *)a2 + 84) & 1) == 0)
      goto LABEL_14;
LABEL_22:
    v19 = *((_QWORD *)a2 + 1);
    *((_BYTE *)this + 84) |= 1u;
    *((_QWORD *)this + 1) = v19;
    if ((*((_BYTE *)a2 + 84) & 0x10) == 0)
      return this;
    goto LABEL_15;
  }
  v18 = *((_BYTE *)a2 + 80);
  *((_BYTE *)this + 84) |= 0x40u;
  *((_BYTE *)this + 80) = v18;
  v12 = *((_BYTE *)a2 + 84);
  if ((v12 & 1) != 0)
    goto LABEL_22;
LABEL_14:
  if ((v12 & 0x10) != 0)
  {
LABEL_15:
    v13 = *((_QWORD *)a2 + 7);
    *((_BYTE *)this + 84) |= 0x10u;
    *((_QWORD *)this + 7) = v13;
  }
  return this;
}

drawing *drawing::StrokeData::operator=(drawing *a1, const drawing::StrokeData *a2)
{
  drawing::StrokeData *v3;
  void **v5[13];

  if (a1 != a2)
  {
    drawing::StrokeData::StrokeData((drawing::StrokeData *)v5, a2);
    drawing::swap(a1, (drawing::StrokeData *)v5, v3);
    drawing::StrokeData::~StrokeData(v5);
  }
  return a1;
}

double drawing::swap(drawing *this, drawing::StrokeData *a2, drawing::StrokeData *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v3;
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v5;
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v7;
  v8 = *((_QWORD *)this + 2);
  v9 = *((_QWORD *)this + 3);
  v10 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v10;
  result = *((double *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((double *)a2 + 9) = result;
  *((_QWORD *)a2 + 2) = v8;
  *((_QWORD *)a2 + 3) = v9;
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v12;
  LOBYTE(v12) = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v12;
  v13 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v13;
  v14 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  return result;
}

uint64_t drawing::StrokeData::StrokeData(uint64_t a1, uint64_t a2)
{
  void ***v4;
  void ***v5;
  void ***v6;
  void **v7;
  void **v8;
  void **v9;

  *(_QWORD *)(a1 + 24) = 0;
  v4 = (void ***)(a1 + 24);
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (void ***)(a1 + 40);
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (void ***)(a1 + 64);
  *(_QWORD *)a1 = &off_1E77748A0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](a1 + 88, (__int128 *)(a2 + 88));
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a2 + 84) = 0;
  v7 = *(void ***)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v6, v7);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(void ***)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v4, v8);
  v9 = *(void ***)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100](v5, v9);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

drawing *drawing::StrokeData::operator=(drawing *a1, uint64_t a2)
{
  drawing::StrokeData *v3;
  void **v5[13];

  if (a1 != (drawing *)a2)
  {
    drawing::StrokeData::StrokeData((uint64_t)v5, a2);
    drawing::swap(a1, (drawing::StrokeData *)v5, v3);
    drawing::StrokeData::~StrokeData(v5);
  }
  return a1;
}

uint64_t drawing::StrokeData::formatText(drawing::StrokeData *this, PB::TextFormatter *a2, const char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_BYTE *)this + 84);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "createdWithFinger");
    v5 = *((_BYTE *)this + 84);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*((_BYTE *)this + 84) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "immutablePointsCount");
  if ((*((_BYTE *)this + 84) & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(a2, "pointsConstantFlags");
LABEL_5:
  if (*((_QWORD *)this + 3))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 84) & 4) != 0)
    PB::TextFormatter::format(a2, "pointsCount");
  if (*((_QWORD *)this + 5))
    PB::TextFormatter::format();
  v6 = *((_BYTE *)this + 84);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "pointsFlags");
    v6 = *((_BYTE *)this + 84);
  }
  if ((v6 & 0x10) != 0)
    PB::TextFormatter::format(a2, "startIndex");
  if (*((_QWORD *)this + 8))
    PB::TextFormatter::format();
  if ((*((_BYTE *)this + 84) & 0x20) != 0)
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  return PB::TextFormatter::endObject(a2);
}

BOOL drawing::StrokeData::readFrom(drawing::StrokeData *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  void ***v9;
  void ***v10;
  PKProtobufUnknownFields **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  PKProtobufUnknownFields *v25;
  PKProtobufUnknownFields *v26;
  PB::Writer **v27;
  _BOOL8 result;
  uint64_t v29;
  void **v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  PB::Writer **v99;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 40);
  v9 = (void ***)((char *)this + 24);
  v10 = (void ***)((char *)this + 64);
  v11 = (PKProtobufUnknownFields **)((char *)this + 88);
  while (1)
  {
    v12 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
      break;
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v2 = v21;
      v18 = v20++ > 8;
    }
    while (!v18);
LABEL_20:
    v23 = 0;
    LODWORD(v24) = 0;
LABEL_21:
    v25 = *v11;
    if (!*v11)
    {
      v26 = (PKProtobufUnknownFields *)operator new();
      PKProtobufUnknownFields::PKProtobufUnknownFields(v26);
      v99 = (PB::Writer **)v26;
      std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(v11, (uint64_t *)&v99);
      v27 = v99;
      v99 = 0;
      if (v27)
      {
        std::unique_ptr<PB::Writer>::reset[abi:ne180100](v27, 0);
        MEMORY[0x1C3B7F770](v27, 0x1020C40EDED9539);
      }
      v25 = *v11;
    }
    result = PKProtobufUnknownFields::add(v25, v24, v23, a2);
    if (!(_DWORD)result)
      return result;
LABEL_131:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = v2 + 1;
    *((_QWORD *)a2 + 1) = v2 + 1;
    v17 = *(_BYTE *)(v12 + v2);
    v15 |= (unint64_t)(v17 & 0x7F) << v13;
    if ((v17 & 0x80) == 0)
      break;
    v13 += 7;
    v2 = v16;
    v18 = v14++ > 8;
    if (v18)
      goto LABEL_20;
  }
LABEL_27:
  v23 = v15 & 7;
  if (v23 != 4)
  {
    v24 = v15 >> 3;
    switch((v15 >> 3))
    {
      case 1u:
        v29 = operator new();
        *(_QWORD *)v29 = 0;
        *(_QWORD *)(v29 + 8) = 0;
        v99 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v10, (void **)v29);
        std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)&v99, 0);
        v30 = *v10;
        goto LABEL_56;
      case 2u:
        *((_BYTE *)this + 84) |= 0x20u;
        v31 = *((_QWORD *)a2 + 1);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *((_QWORD *)a2 + 2))
        {
          *((_QWORD *)this + 9) = *(_QWORD *)(*(_QWORD *)a2 + v31);
          *((_QWORD *)a2 + 1) += 8;
        }
        else
        {
          *((_BYTE *)a2 + 24) = 1;
        }
        goto LABEL_131;
      case 3u:
        *((_BYTE *)this + 84) |= 4u;
        v32 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        v34 = *(_QWORD *)a2;
        if (v32 <= 0xFFFFFFFFFFFFFFF5 && v32 + 10 <= v33)
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          do
          {
            v38 = v32 + 1;
            *((_QWORD *)a2 + 1) = v32 + 1;
            v39 = *(_BYTE *)(v34 + v32);
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if ((v39 & 0x80) == 0)
              goto LABEL_118;
            v35 += 7;
            v32 = v38;
            v18 = v36++ > 8;
          }
          while (!v18);
LABEL_79:
          v37 = 0;
          goto LABEL_118;
        }
        v78 = 0;
        v79 = 0;
        v37 = 0;
        if (v33 <= v32)
          v33 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v33 == v32)
          {
            v37 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v80 = v32 + 1;
            v81 = *(_BYTE *)(v34 + v32);
            *((_QWORD *)a2 + 1) = v80;
            v37 |= (unint64_t)(v81 & 0x7F) << v78;
            if (v81 < 0)
            {
              v78 += 7;
              v32 = v80;
              v18 = v79++ > 8;
              if (v18)
                goto LABEL_79;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v37 = 0;
          }
          break;
        }
LABEL_118:
        *((_QWORD *)this + 4) = v37;
        goto LABEL_131;
      case 4u:
        *((_BYTE *)this + 84) |= 8u;
        v40 = *((_QWORD *)a2 + 1);
        v41 = *((_QWORD *)a2 + 2);
        v42 = *(_QWORD *)a2;
        if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          do
          {
            v46 = v40 + 1;
            *((_QWORD *)a2 + 1) = v40 + 1;
            v47 = *(_BYTE *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0)
              goto LABEL_121;
            v43 += 7;
            v40 = v46;
            v18 = v44++ > 8;
          }
          while (!v18);
LABEL_86:
          v45 = 0;
          goto LABEL_121;
        }
        v82 = 0;
        v83 = 0;
        v45 = 0;
        if (v41 <= v40)
          v41 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v41 == v40)
          {
            v45 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v84 = v40 + 1;
            v85 = *(_BYTE *)(v42 + v40);
            *((_QWORD *)a2 + 1) = v84;
            v45 |= (unint64_t)(v85 & 0x7F) << v82;
            if (v85 < 0)
            {
              v82 += 7;
              v40 = v84;
              v18 = v83++ > 8;
              if (v18)
                goto LABEL_86;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v45 = 0;
          }
          break;
        }
LABEL_121:
        *((_QWORD *)this + 6) = v45;
        goto LABEL_131;
      case 5u:
        *((_BYTE *)this + 84) |= 2u;
        v48 = *((_QWORD *)a2 + 1);
        v49 = *((_QWORD *)a2 + 2);
        v50 = *(_QWORD *)a2;
        if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          do
          {
            v54 = v48 + 1;
            *((_QWORD *)a2 + 1) = v48 + 1;
            v55 = *(_BYTE *)(v50 + v48);
            v53 |= (unint64_t)(v55 & 0x7F) << v51;
            if ((v55 & 0x80) == 0)
              goto LABEL_124;
            v51 += 7;
            v48 = v54;
            v18 = v52++ > 8;
          }
          while (!v18);
LABEL_93:
          v53 = 0;
          goto LABEL_124;
        }
        v86 = 0;
        v87 = 0;
        v53 = 0;
        if (v49 <= v48)
          v49 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v49 == v48)
          {
            v53 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v88 = v48 + 1;
            v89 = *(_BYTE *)(v50 + v48);
            *((_QWORD *)a2 + 1) = v88;
            v53 |= (unint64_t)(v89 & 0x7F) << v86;
            if (v89 < 0)
            {
              v86 += 7;
              v48 = v88;
              v18 = v87++ > 8;
              if (v18)
                goto LABEL_93;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v53 = 0;
          }
          break;
        }
LABEL_124:
        *((_QWORD *)this + 2) = v53;
        goto LABEL_131;
      case 6u:
        v56 = operator new();
        *(_QWORD *)v56 = 0;
        *(_QWORD *)(v56 + 8) = 0;
        v99 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v9, (void **)v56);
        std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)&v99, 0);
        v30 = *v9;
        goto LABEL_56;
      case 7u:
        v57 = operator new();
        *(_QWORD *)v57 = 0;
        *(_QWORD *)(v57 + 8) = 0;
        v99 = 0;
        std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v57);
        std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)&v99, 0);
        v30 = *v8;
LABEL_56:
        PB::Reader::read(a2, (PB::Data *)v30);
        goto LABEL_131;
      case 8u:
        *((_BYTE *)this + 84) |= 0x40u;
        v58 = *((_QWORD *)a2 + 1);
        if (v58 >= *((_QWORD *)a2 + 2))
        {
          v61 = 0;
          *((_BYTE *)a2 + 24) = 1;
        }
        else
        {
          v59 = v58 + 1;
          v60 = *(unsigned __int8 *)(*(_QWORD *)a2 + v58);
          *((_QWORD *)a2 + 1) = v59;
          v61 = v60 != 0;
        }
        *((_BYTE *)this + 80) = v61;
        goto LABEL_131;
      case 9u:
        *((_BYTE *)this + 84) |= 1u;
        v62 = *((_QWORD *)a2 + 1);
        v63 = *((_QWORD *)a2 + 2);
        v64 = *(_QWORD *)a2;
        if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
        {
          v65 = 0;
          v66 = 0;
          v67 = 0;
          do
          {
            v68 = v62 + 1;
            *((_QWORD *)a2 + 1) = v62 + 1;
            v69 = *(_BYTE *)(v64 + v62);
            v67 |= (unint64_t)(v69 & 0x7F) << v65;
            if ((v69 & 0x80) == 0)
              goto LABEL_127;
            v65 += 7;
            v62 = v68;
            v18 = v66++ > 8;
          }
          while (!v18);
LABEL_102:
          v67 = 0;
          goto LABEL_127;
        }
        v90 = 0;
        v91 = 0;
        v67 = 0;
        if (v63 <= v62)
          v63 = *((_QWORD *)a2 + 1);
        while (2)
        {
          if (v63 == v62)
          {
            v67 = 0;
            *((_BYTE *)a2 + 24) = 1;
          }
          else
          {
            v92 = v62 + 1;
            v93 = *(_BYTE *)(v64 + v62);
            *((_QWORD *)a2 + 1) = v92;
            v67 |= (unint64_t)(v93 & 0x7F) << v90;
            if (v93 < 0)
            {
              v90 += 7;
              v62 = v92;
              v18 = v91++ > 8;
              if (v18)
                goto LABEL_102;
              continue;
            }
            if (*((_BYTE *)a2 + 24))
              v67 = 0;
          }
          break;
        }
LABEL_127:
        *((_QWORD *)this + 1) = v67;
        goto LABEL_131;
      case 0xAu:
        *((_BYTE *)this + 84) |= 0x10u;
        v70 = *((_QWORD *)a2 + 1);
        v71 = *((_QWORD *)a2 + 2);
        v72 = *(_QWORD *)a2;
        if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
        {
          v73 = 0;
          v74 = 0;
          v75 = 0;
          do
          {
            v76 = v70 + 1;
            *((_QWORD *)a2 + 1) = v70 + 1;
            v77 = *(_BYTE *)(v72 + v70);
            v75 |= (unint64_t)(v77 & 0x7F) << v73;
            if ((v77 & 0x80) == 0)
              goto LABEL_130;
            v73 += 7;
            v70 = v76;
            v18 = v74++ > 8;
          }
          while (!v18);
LABEL_109:
          v75 = 0;
          goto LABEL_130;
        }
        v94 = 0;
        v95 = 0;
        v75 = 0;
        if (v71 <= v70)
          v71 = *((_QWORD *)a2 + 1);
        break;
      default:
        goto LABEL_21;
    }
    while (1)
    {
      if (v71 == v70)
      {
        v75 = 0;
        *((_BYTE *)a2 + 24) = 1;
        goto LABEL_130;
      }
      v96 = v70 + 1;
      v97 = *(_BYTE *)(v72 + v70);
      *((_QWORD *)a2 + 1) = v96;
      v75 |= (unint64_t)(v97 & 0x7F) << v94;
      if ((v97 & 0x80) == 0)
        break;
      v94 += 7;
      v70 = v96;
      v18 = v95++ > 8;
      if (v18)
        goto LABEL_109;
    }
    if (*((_BYTE *)a2 + 24))
      v75 = 0;
LABEL_130:
    *((_QWORD *)this + 7) = v75;
    goto LABEL_131;
  }
  v4 = 0;
  return v4 == 0;
}

void sub_1BE451B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

const void ***drawing::StrokeData::writeTo(drawing::StrokeData *this, PB::Writer *a2)
{
  const PB::Data *v4;
  char v5;
  const PB::Data *v6;
  const PB::Data *v7;
  char v8;
  const void ***result;

  v4 = (const PB::Data *)*((_QWORD *)this + 8);
  if (v4)
    PB::Writer::write(a2, v4);
  v5 = *((_BYTE *)this + 84);
  if ((v5 & 0x20) != 0)
  {
    PB::Writer::write(a2, *((double *)this + 9));
    v5 = *((_BYTE *)this + 84);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_20;
    }
  }
  else if ((*((_BYTE *)this + 84) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::Writer::writeVarInt(a2);
  v5 = *((_BYTE *)this + 84);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_20:
  PB::Writer::writeVarInt(a2);
  if ((*((_BYTE *)this + 84) & 2) != 0)
LABEL_7:
    PB::Writer::writeVarInt(a2);
LABEL_8:
  v6 = (const PB::Data *)*((_QWORD *)this + 3);
  if (v6)
    PB::Writer::write(a2, v6);
  v7 = (const PB::Data *)*((_QWORD *)this + 5);
  if (v7)
    PB::Writer::write(a2, v7);
  v8 = *((_BYTE *)this + 84);
  if ((v8 & 0x40) != 0)
  {
    PB::Writer::write(a2);
    v8 = *((_BYTE *)this + 84);
    if ((v8 & 1) == 0)
    {
LABEL_14:
      if ((v8 & 0x10) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else if ((*((_BYTE *)this + 84) & 1) == 0)
  {
    goto LABEL_14;
  }
  PB::Writer::writeVarInt(a2);
  if ((*((_BYTE *)this + 84) & 0x10) != 0)
LABEL_15:
    PB::Writer::writeVarInt(a2);
LABEL_16:
  result = (const void ***)*((_QWORD *)this + 11);
  if (result)
    return PKProtobufUnknownFields::writeTo(result, (char **)a2);
  return result;
}

BOOL drawing::StrokeData::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = PKProtobufUnknownFieldsCompare((_QWORD ***)(a1 + 88), (_QWORD ***)(a2 + 88));
  if (result)
  {
    v5 = *(_QWORD *)(a2 + 64);
    if (*(_QWORD *)(a1 + 64))
    {
      if (!v5 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 64) | *(_QWORD *)(a2 + 64))
        return 0;
    }
    else if (v5)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 84) & 0x20) != 0)
    {
      if ((*(_BYTE *)(a2 + 84) & 0x20) == 0 || *(double *)(a1 + 72) != *(double *)(a2 + 72))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 84) & 0x20) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 84) & 4) != 0)
    {
      if ((*(_BYTE *)(a2 + 84) & 4) == 0 || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 84) & 4) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 84) & 8) != 0)
    {
      if ((*(_BYTE *)(a2 + 84) & 8) == 0 || *(_QWORD *)(a1 + 48) != *(_QWORD *)(a2 + 48))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 84) & 8) != 0)
    {
      return 0;
    }
    if ((*(_BYTE *)(a1 + 84) & 2) != 0)
    {
      if ((*(_BYTE *)(a2 + 84) & 2) == 0 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
        return 0;
    }
    else if ((*(_BYTE *)(a2 + 84) & 2) != 0)
    {
      return 0;
    }
    v6 = *(_QWORD *)(a2 + 24);
    if (*(_QWORD *)(a1 + 24))
    {
      if (!v6 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 24) | *(_QWORD *)(a2 + 24))
        return 0;
    }
    else if (v6)
    {
      return 0;
    }
    v7 = *(_QWORD *)(a2 + 40);
    if (*(_QWORD *)(a1 + 40))
    {
      if (!v7 || (PB::Data::operator==() & 1) == 0 && *(_QWORD *)(a1 + 40) | *(_QWORD *)(a2 + 40))
        return 0;
LABEL_40:
      if ((*(_BYTE *)(a1 + 84) & 0x40) != 0)
      {
        if ((*(_BYTE *)(a2 + 84) & 0x40) == 0 || *(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
          return 0;
      }
      else if ((*(_BYTE *)(a2 + 84) & 0x40) != 0)
      {
        return 0;
      }
      if ((*(_BYTE *)(a1 + 84) & 1) != 0)
      {
        if ((*(_BYTE *)(a2 + 84) & 1) == 0 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
          return 0;
      }
      else if ((*(_BYTE *)(a2 + 84) & 1) != 0)
      {
        return 0;
      }
      result = (*(_BYTE *)(a2 + 84) & 0x10) == 0;
      if ((*(_BYTE *)(a1 + 84) & 0x10) == 0)
        return result;
      return (*(_BYTE *)(a2 + 84) & 0x10) != 0 && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
    }
    if (!v7)
      goto LABEL_40;
    return 0;
  }
  return result;
}

uint64_t drawing::StrokeData::hash_value(drawing::StrokeData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*((_QWORD *)this + 8))
    v2 = PBHashBytes();
  else
    v2 = 0;
  if ((*((_BYTE *)this + 84) & 0x20) != 0)
  {
    if (*((double *)this + 9) == 0.0)
      v3 = 0;
    else
      v3 = *((_QWORD *)this + 9);
    if ((*((_BYTE *)this + 84) & 4) != 0)
    {
LABEL_6:
      v4 = *((_QWORD *)this + 4);
      if ((*((_BYTE *)this + 84) & 8) != 0)
        goto LABEL_7;
LABEL_14:
      v5 = 0;
      if ((*((_BYTE *)this + 84) & 2) != 0)
        goto LABEL_8;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 84) & 4) != 0)
      goto LABEL_6;
  }
  v4 = 0;
  if ((*((_BYTE *)this + 84) & 8) == 0)
    goto LABEL_14;
LABEL_7:
  v5 = *((_QWORD *)this + 6);
  if ((*((_BYTE *)this + 84) & 2) != 0)
  {
LABEL_8:
    v6 = *((_QWORD *)this + 2);
    goto LABEL_16;
  }
LABEL_15:
  v6 = 0;
LABEL_16:
  if (*((_QWORD *)this + 3))
    v7 = PBHashBytes();
  else
    v7 = 0;
  if (*((_QWORD *)this + 5))
    v8 = PBHashBytes();
  else
    v8 = 0;
  if ((*((_BYTE *)this + 84) & 0x40) == 0)
  {
    v9 = 0;
    if ((*((_BYTE *)this + 84) & 1) != 0)
      goto LABEL_24;
LABEL_27:
    v10 = 0;
    if ((*((_BYTE *)this + 84) & 0x10) != 0)
      goto LABEL_25;
LABEL_28:
    v11 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11;
  }
  v9 = *((unsigned __int8 *)this + 80);
  if ((*((_BYTE *)this + 84) & 1) == 0)
    goto LABEL_27;
LABEL_24:
  v10 = *((_QWORD *)this + 1);
  if ((*((_BYTE *)this + 84) & 0x10) == 0)
    goto LABEL_28;
LABEL_25:
  v11 = *((_QWORD *)this + 7);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11;
}

void sub_1BE453DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

{

}

void sub_1BE455C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE455FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE45630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE456648(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE456750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE456830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE456A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE456B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKRecognitionSessionManager;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE456C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE456D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1BE456E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE457110(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4571CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void sub_1BE4572C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE457664(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE457740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE457870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE457BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE457ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE458030(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE45829C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id drawingStrokesFromStrokes(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v3, "count"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v6 = v3;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v7; ++i)
        {
          if (*(_QWORD *)v15 != v8)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v14 + 1) + 8 * i), "_strokeUUID", (_QWORD)v14);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "_visibleStrokeForIdentifier:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (v11)
            objc_msgSend(v5, "addObject:", v11);

        }
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v7);
    }

    v12 = (void *)objc_msgSend(v5, "copy");
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1BE458464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE458554(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45869C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE458924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE458E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE459014(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45927C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v23 = v22;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BE4593E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1BE459878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE459DC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE459E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE459FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45A110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE45A438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE45A56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45A640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void sub_1BE45A6E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45A778(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45A868(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45A980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE45AADC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45AB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE45B2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE45B420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE45B860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE45BF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE45C09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45C234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE45C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  id *v17;

  objc_destroyWeak(v17);
  _Unwind_Resume(a1);
}

void sub_1BE45C504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE45C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE45CE58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1BE45D1B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE45D5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE45D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE45D8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE45DAB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE45DC8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE45E0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id location)
{
  void *v37;
  id *v38;

  objc_destroyWeak(v38);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1BE45E1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE45E260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE45E4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE45E5AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45E728(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45E8A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45EEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE45F00C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45F1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE45F3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE45F6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45F76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE45F8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, id a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  v21 = v20;

  a9.super_class = (Class)PKRendererTile;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE45FAEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45FE10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE45FF00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE460040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE460170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4602A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4603D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE460550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1BE460B00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4623E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1BE462878(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void PKFountainPenFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  char v7;
  char v8;
  id v9;

  v9 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v9, a3, a4);
  *(_QWORD *)(a1 + 104) = a3;
  v7 = objc_msgSend(v9, "_isFountainPenInkV2");
  if (a3 == 1)
    v8 = v7;
  else
    v8 = 0;
  *(_BYTE *)(a1 + 112) = v8;

}

void sub_1BE464150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void PKFountainPenFilter::run(PKFountainPenFilter *this)
{
  int64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double *v13;
  double v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
  v3 = (uint64_t *)((char *)this + 80);
  std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, v2);
  v4 = *((_QWORD *)this + 9);
  if (*((_BYTE *)this + 112))
  {
    if (v2 > v4)
    {
      v5 = *v3;
      do
      {
        v6 = *((_QWORD *)this + 6) + 88 * v4;
        v7 = v5 + 88 * v4;
        v8 = *(_OWORD *)(v6 + 16);
        *(_OWORD *)v7 = *(_OWORD *)v6;
        *(_OWORD *)(v7 + 16) = v8;
        v9 = *(_OWORD *)(v6 + 32);
        v10 = *(_OWORD *)(v6 + 48);
        v11 = *(_OWORD *)(v6 + 64);
        *(_QWORD *)(v7 + 80) = *(_QWORD *)(v6 + 80);
        *(_OWORD *)(v7 + 48) = v10;
        *(_OWORD *)(v7 + 64) = v11;
        *(_OWORD *)(v7 + 32) = v9;
        v5 = *((_QWORD *)this + 10);
        v12 = v5 + 88 * v4;
        *(_QWORD *)(v12 + 80) = 0x3FF0000000000000;
        v13 = (double *)(v12 + 80);
        if (v4 < 1 || v4 >= v2 - 1)
        {
          ++v4;
        }
        else
        {
          DKDDiffAngleInRadians(*(long double *)(*((_QWORD *)this + 6) + 88 * v4 + 56), *(long double *)(*((_QWORD *)this + 6) + 88 * v4 + 144));
          *(float *)&v14 = v14;
          v15 = (fabsf(*(float *)&v14) + -0.75) / -0.699999999;
          v16 = 0.0;
          if (v15 >= 0.0)
          {
            v16 = v15;
            if (v15 > 1.0)
              v16 = 1.0;
          }
          ++v4;
          v17 = v16;
          *v13 = v17;
        }
      }
      while (v4 != v2);
    }
    if (*((uint64_t *)this + 4) <= 1)
      v18 = 1;
    else
      v18 = *((_QWORD *)this + 4);
    v19 = v18 - 1;
    if (*((_BYTE *)this + 16))
      v20 = *((_QWORD *)this + 4);
    else
      v20 = v19;
  }
  else
  {
    v21 = v2 - v4;
    if (v2 > v4)
    {
      v22 = 88 * v4;
      do
      {
        v23 = *((_QWORD *)this + 6) + v22;
        v24 = *((_QWORD *)this + 10) + v22;
        v26 = *(_OWORD *)(v23 + 48);
        v25 = *(_OWORD *)(v23 + 64);
        v27 = *(_OWORD *)(v23 + 32);
        *(_QWORD *)(v24 + 80) = *(_QWORD *)(v23 + 80);
        *(_OWORD *)(v24 + 48) = v26;
        *(_OWORD *)(v24 + 64) = v25;
        *(_OWORD *)(v24 + 32) = v27;
        v28 = *(_OWORD *)(v23 + 16);
        *(_OWORD *)v24 = *(_OWORD *)v23;
        *(_OWORD *)(v24 + 16) = v28;
        v22 += 88;
        --v21;
      }
      while (v21);
    }
    v20 = *((_QWORD *)this + 4);
  }
  *((_QWORD *)this + 9) = v20;
}

uint64_t PKFountainPenFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 112))
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex((_QWORD *)a1, a2, a3);
  else
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

void sub_1BE4647A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __getPNPWelcomeControllerClass_block_invoke(uint64_t a1)
{
  PencilPairingUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("PNPWelcomeController");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEE64B0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    abort_report_np();
    PencilPairingUILibrary();
  }
}

void PencilPairingUILibrary()
{
  void *v0;

  if (!PencilPairingUILibraryCore_frameworkLibrary)
  {
    PencilPairingUILibraryCore_frameworkLibrary = _sl_dlopen();
    if (!PencilPairingUILibraryCore_frameworkLibrary)
    {
      v0 = (void *)abort_report_np();
      free(v0);
    }
  }
}

PKPaletteContainerView *__getPNPWizardViewControllerClass_block_invoke(uint64_t a1)
{
  PKPaletteContainerView *result;
  PKPaletteContainerView *v3;
  SEL v4;
  CGRect v5;

  PencilPairingUILibrary();
  result = (PKPaletteContainerView *)objc_getClass("PNPWizardViewController");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1ECEE64B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = (PKPaletteContainerView *)abort_report_np();
    return -[PKPaletteContainerView initWithFrame:](v3, v4, v5);
  }
  return result;
}

void sub_1BE469F20(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1BE46A110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE46A328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE46A630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE46A6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)PKLassoRenderer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE46AC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,id location,id a55,id a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  uint64_t a64;
  void *__p;
  uint64_t a67;
  void *v67;
  void *v68;
  void *v69;
  id *v70;
  id *v71;
  id *v72;
  void *v73;

  objc_destroyWeak(v70);
  objc_destroyWeak(v72);
  objc_destroyWeak(v71);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a55);
  objc_destroyWeak(&a56);
  _Block_object_dispose(&a57, 8);
  if (a63)
  {
    a64 = (uint64_t)a63;
    operator delete(a63);
  }
  if (__p)
  {
    a67 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1BE46AF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v14 = v13;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__31(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__31(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1BE46B158(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1BE46B554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE46B6AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE46B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE46BBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  _Block_object_dispose(&a22, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE46BF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE46C02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPaletteToolEqualTools(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  void *v19;
  id v20;
  id v21;
  char v22;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "toolIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "toolIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v5;
  v8 = v6;
  v9 = v8;
  if (v7 == v8)
  {

  }
  else
  {
    v10 = 0;
    if (!v7 || !v8)
    {
      v20 = v8;
      v21 = v7;
LABEL_25:

      v9 = v20;
      v7 = v21;
LABEL_26:

      goto LABEL_27;
    }
    v10 = objc_msgSend(v7, "isEqualToString:", v8);

    if (!(_DWORD)v10)
      goto LABEL_26;
  }
  objc_msgSend(v3, "configuration");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configuration");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v11;
  v14 = v12;
  if (v13 | v14)
  {
    v19 = (void *)v14;
    v10 = 0;
    if (!v13 || !v14)
    {
      v16 = (void *)v13;
LABEL_24:
      v21 = v7;
      v20 = v9;

      v9 = v19;
      v7 = v16;
      goto LABEL_25;
    }
    v22 = objc_msgSend((id)v13, "isEqual:", v14);

    if ((v22 & 1) == 0)
    {
      v10 = 0;
      goto LABEL_27;
    }
  }
  else
  {

  }
  if (objc_msgSend(v3, "isInkingTool") && objc_msgSend(v4, "isInkingTool"))
  {
    objc_msgSend(v3, "inkingTool");
    v7 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "ink");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "inkingTool");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "ink");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = v15;
    v18 = v17;
    if (v13 | v18)
    {
      v19 = (void *)v18;
      v10 = 0;
      if (v13 && v18)
        v10 = objc_msgSend((id)v13, "isEqual:", v18);
      v9 = (void *)v13;
    }
    else
    {
      v19 = 0;
      v13 = 0;
      v9 = 0;
      v10 = 1;
    }
    goto LABEL_24;
  }
  v10 = 1;
LABEL_27:

  return v10;
}

void sub_1BE46D7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE46EEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE46F228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE46F34C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE46F464(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void sub_1BE46F52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE46F814(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  void *v7;

  v6 = *(void **)(v4 - 184);
  if (v6)
  {
    *(_QWORD *)(v4 - 176) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(v4 - 160);
  if (v7)
  {
    *(_QWORD *)(v4 - 152) = v7;
    operator delete(v7);
  }

  _Unwind_Resume(a1);
}

void sub_1BE46FE34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE470234(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v8;

  v8 = *(void **)(v6 - 152);
  if (v8)
  {
    *(_QWORD *)(v6 - 144) = v8;
    operator delete(v8);
  }

  _Unwind_Resume(a1);
}

void sub_1BE470328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE470778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  v43 = *(void **)(v41 - 200);
  if (v43)
  {
    *(_QWORD *)(v41 - 192) = v43;
    operator delete(v43);
  }

  _Unwind_Resume(a1);
}

void sub_1BE470E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  void *v33;
  void *v34;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a32)
    operator delete(a32);

  _Unwind_Resume(a1);
}

void sub_1BE471214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 152);
  if (v6)
  {
    *(_QWORD *)(v4 - 144) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1BE471814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  void *v31;
  void *v32;
  void *v33;

  if (__p)
    operator delete(__p);
  if (a30)
    operator delete(a30);

  _Unwind_Resume(a1);
}

void sub_1BE471C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  void *v40;

  if (__p)
    operator delete(__p);
  if (a39)
    operator delete(a39);

  _Unwind_Resume(a1);
}

void sub_1BE471FDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 136);
  if (v6)
  {
    *(_QWORD *)(v4 - 128) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1BE472778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  void *v55;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE472B94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 184);
  if (v6)
  {
    *(_QWORD *)(v4 - 176) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1BE472F40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 168);
  if (v6)
  {
    *(_QWORD *)(v4 - 160) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1BE473218(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v6;

  v6 = *(void **)(v4 - 152);
  if (v6)
  {
    *(_QWORD *)(v4 - 144) = v6;
    operator delete(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1BE473450(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4741C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE4744B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE474BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE474DF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<TimestampedPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<TimestampedPoint>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<TimestampedAngles>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<TimestampedAngles>::__append((char **)a1, a2 - v2);
  }
}

void sub_1BE4753E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKDisableShapeRecognition(void)
{
  if (qword_1ECEE6500 != -1)
    dispatch_once(&qword_1ECEE6500, &__block_literal_global_100);
  return byte_1ECEE64C1;
}

void ___Z25PKDisableShapeRecognitionv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1ECEE64C1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("PKDisableShapeRecognition"));

}

void sub_1BE475484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TimestampedAngles>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

void std::vector<TimestampedPoint>::__append(void **a1, unint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  unint64_t v13;
  void *v14;
  _OWORD *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;

  v4 = a1[1];
  v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = &v4[3 * a2];
      v12 = (_OWORD *)MEMORY[0x1E0C9D538];
      do
      {
        *(_OWORD *)v4 = *v12;
        v4[2] = 0;
        v4 += 3;
      }
      while (v4 != v11);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)*a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
      v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<ClipperLib::LocalMinimum>>(v9);
    else
      v10 = 0;
    v13 = v9 + 24 * v6;
    v14 = (void *)(v13 + 24 * a2);
    v15 = (_OWORD *)MEMORY[0x1E0C9D538];
    v16 = v13;
    do
    {
      *(_OWORD *)v16 = *v15;
      *(_QWORD *)(v16 + 16) = 0;
      v16 += 24;
    }
    while ((void *)v16 != v14);
    v17 = v9 + 24 * v10;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *(_QWORD *)(v13 - 8) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v13 - 24) = v20;
        v13 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = (void *)v13;
    a1[1] = v14;
    a1[2] = (void *)v17;
    if (v18)
      operator delete(v18);
  }
}

void std::vector<TimestampedAngles>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      bzero(a1[1], 32 * a2);
      v5 += 32 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = v5 - *a1;
    v7 = a2 + (v6 >> 5);
    if (v7 >> 59)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 5;
    v9 = v4 - *a1;
    if (v9 >> 4 > v7)
      v7 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v7;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TimestampedAngles>>(v10);
    else
      v11 = 0;
    v12 = (char *)(v10 + 32 * v8);
    v13 = v10 + 32 * v11;
    bzero(v12, 32 * a2);
    v14 = &v12[32 * a2];
    v16 = *a1;
    v15 = a1[1];
    if (v15 != *a1)
    {
      do
      {
        v17 = *((_OWORD *)v15 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v15 - 2);
        *((_OWORD *)v12 - 1) = v17;
        v12 -= 32;
        v15 -= 32;
      }
      while (v15 != v16);
      v15 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (char *)v13;
    if (v15)
      operator delete(v15);
  }
}

void sub_1BE47A3AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE47A52C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double b(int a1, double a2)
{
  double v2;
  double result;
  double v4;
  double v5;

  switch(a1)
  {
    case -2:
      v2 = (3.0 - a2) * a2 + -3.0;
      goto LABEL_6;
    case -1:
      v2 = (a2 * 3.0 + -6.0) * a2;
      v4 = 4.0;
      goto LABEL_7;
    case 0:
      v2 = (a2 * -3.0 + 3.0) * a2 + 3.0;
LABEL_6:
      v4 = 1.0;
LABEL_7:
      v5 = v4 + v2 * a2;
      goto LABEL_9;
    case 1:
      v5 = a2 * a2 * a2;
LABEL_9:
      result = v5 / 6.0;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double b2(int a1, double a2)
{
  double v2;
  double v3;
  double result;

  switch(a1)
  {
    case -2:
      v2 = (a2 * -2.0 + 3.0) * a2 / 6.0 + (3.0 - a2) * a2 / 6.0;
      v3 = -0.5;
      goto LABEL_6;
    case -1:
      result = a2 * a2 * 0.5 + (a2 * 3.0 + -6.0) * a2 / 3.0;
      break;
    case 0:
      __asm
      {
        FMOV            V2.2D, #3.0
        FMOV            V1.2D, #6.0
      }
      v2 = vaddvq_f64(vdivq_f64(vmulq_n_f64(vmlaq_n_f64(_Q2, (float64x2_t)xmmword_1BE4FEAC0, a2), a2), _Q1));
      v3 = 0.5;
LABEL_6:
      result = v2 + v3;
      break;
    case 1:
      result = a2 * a2 * 3.0 / 6.0;
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double b3(int a1, double result)
{
  double v2;
  double v3;

  switch(a1)
  {
    case -2:
      result = 1.0 - result;
      break;
    case -1:
      v2 = -2.0;
      v3 = 3.0;
      goto LABEL_6;
    case 0:
      v2 = 1.0;
      v3 = -3.0;
LABEL_6:
      result = v2 + result * v3;
      break;
    case 1:
      return result;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double approximateSplineLength(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v8 = (a1 + a3 * 2.0) * 0.333333333;
  v9 = (a2 + a4 * 2.0) * 0.333333333;
  v10 = (a8 + a6 * 2.0) * 0.333333333;
  v11 = (a5 + a3 * 2.0) * 0.333333333;
  v12 = (a6 + a4 * 2.0) * 0.333333333;
  v13 = (a3 + a5 * 2.0) * 0.333333333;
  v14 = (a4 + a6 * 2.0) * 0.333333333;
  v15 = (v8 + v11) * 0.5;
  v16 = (v9 + v12) * 0.5;
  v17 = (v13 + (a7 + a5 * 2.0) * 0.333333333) * 0.5;
  v18 = (v14 + v10) * 0.5;
  return (sqrt((v12 - v14) * (v12 - v14) + (v11 - v13) * (v11 - v13))
        + sqrt((v16 - v12) * (v16 - v12) + (v15 - v11) * (v15 - v11))
        + sqrt((v14 - v18) * (v14 - v18) + (v13 - v17) * (v13 - v17)))
       * 0.5
       + sqrt((v16 - v18) * (v16 - v18) + (v15 - v17) * (v15 - v17)) * 0.5;
}

double splinePoint(_QWORD *a1, uint64_t a2, double (*a3)(_QWORD, double), double a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double *v17;
  double *v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;

  v9 = *MEMORY[0x1E0C9D538];
  v8 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v10 = 88 * a2 - 80;
  v11 = -4;
  do
  {
    if (a2 + v11 + 2 > -2)
    {
      v14 = a2 + v11 + 3;
      v15 = a1[1];
      v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - *a1) >> 3);
      v17 = (double *)(v15 - 80);
      v18 = (double *)(v15 - 72);
      v19 = v14 >= v16;
      if (v14 >= v16)
        v13 = v18;
      else
        v13 = (double *)(*a1 + v10 + 8);
      if (v19)
        v12 = v17;
      else
        v12 = (double *)(*a1 + v10);
    }
    else
    {
      v12 = (double *)(*a1 + 8);
      v13 = (double *)(*a1 + 16);
    }
    v20 = *v12;
    v21 = *v13;
    v22 = a3((v11 + 2), a4);
    v9 = v9 + v22 * v20;
    v8 = v8 + v22 * v21;
    v10 += 88;
    v19 = __CFADD__(v11++, 1);
  }
  while (!v19);
  return v9;
}

double splinePoint(const PKStrokePathPointsPrivate *this, unint64_t a2, unint64_t a3, uint64_t a4, double a5, double (*a6)(int, double))
{
  double v8;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  double v29;
  double v30;
  unint64_t v31;
  double v32;
  double v33;
  double v35;
  double v36;

  if (a3 - a2 <= 1)
    return PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2);
  v8 = *MEMORY[0x1E0C9D538];
  v13 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v35 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2);
  v15 = v14;
  v16 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2 + 1);
  v18 = v17;
  v19 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a3 - 1);
  v21 = v20;
  v22 = -(v16 - v35 * 2.0);
  v23 = -(v18 - v15 * 2.0);
  v36 = -(PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a3 - 2) - v19 * 2.0);
  v25 = -(v24 - v21 * 2.0);
  v26 = ~a4;
  v27 = a4 + a2;
  for (i = -2; i != 2; ++i)
  {
    v29 = v23;
    v30 = v22;
    if (i >= v26)
    {
      v31 = v27 + i + 1;
      v29 = v25;
      v30 = v36;
      if (v31 < a3)
      {
        v30 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, v31);
        v29 = v32;
      }
    }
    v33 = a6(i, a5);
    v8 = v8 + v33 * v30;
    v13 = v13 + v33 * v29;
  }
  return v8;
}

double splineSegmentLength(const PKStrokePathPointsPrivate *this, unint64_t a2, uint64_t a3, unint64_t a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  if (a3 - a2 < 2)
    return 0.0;
  if (a3 - a2 == 2)
  {
    v7 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2);
    v9 = v8;
    v10 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2 + 1);
    return sqrt((v9 - v11) * (v9 - v11) + (v7 - v10) * (v7 - v10));
  }
  else
  {
    if (a4)
    {
      if (a3 - 2 == a4)
      {
        v13 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a3 - 1);
        v15 = v14;
        v16 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4);
        v18 = v17;
        v19 = -(v17 - v15 * 2.0);
        v20 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4 - 1);
        v22 = v16;
        v23 = v18;
        v24 = v13;
        v25 = v15;
        v26 = -(v16 - v13 * 2.0);
        v27 = v19;
      }
      else
      {
        v36 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4 - 1);
        v38 = v37;
        v39 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4);
        v41 = v40;
        v42 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4 + 1);
        v44 = v43;
        v26 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a4 + 2);
        v27 = v45;
        v20 = v36;
        v21 = v38;
        v22 = v39;
        v23 = v41;
        v24 = v42;
        v25 = v44;
      }
    }
    else
    {
      v28 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2);
      v30 = v29;
      v31 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, a2 + 1);
      v33 = v32;
      v34 = -(v32 - v30 * 2.0);
      v26 = PKStrokePathPointsPrivate::locationAtIndex((PKStrokePathPointsPrivate *)this, 2uLL);
      v27 = v35;
      v20 = -(v31 - v28 * 2.0);
      v21 = v34;
      v22 = v28;
      v23 = v30;
      v24 = v31;
      v25 = v33;
    }
    return approximateSplineLength(v20, v21, v22, v23, v24, v25, v26, v27);
  }
}

float64x2_t PKSplinePointsToBezierPoints(float64x2_t *a1, CGPoint *a2)
{
  uint64_t v2;
  double *v3;
  float64x2_t result;

  v2 = 0;
  v3 = (double *)&qword_1BE4FEA80;
  do
  {
    result = a1[2];
    a2[v2++] = (CGPoint)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a1[1], *(v3 - 4)), *a1, *(v3 - 8)), result, *v3), a1[3], v3[4]);
    ++v3;
  }
  while (v2 != 4);
  return result;
}

CGPath *PKCreateCGPathFromBSpline(PKStrokePathPointsPrivate *a1, uint64_t a2)
{
  CGPath *Mutable;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  PKStrokePathPointsPrivate *v14;
  unint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  CGPoint v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGPoint v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Mutable = CGPathCreateMutable();
  if (a2 < 2)
    return Mutable;
  v5 = 0;
  v6 = -1;
  do
  {
    v7 = v6;
    for (i = 8; i != 72; i += 16)
    {
      v9 = v7 + 1;
      if (v7 == -1)
      {
        v10 = PKStrokePathPointsPrivate::locationAtIndex(a1, 0);
        v11 = v10 + v10;
        v13 = v12 + v12;
        v14 = a1;
        v15 = 1;
LABEL_8:
        v18 = v11 - PKStrokePathPointsPrivate::locationAtIndex(v14, v15);
        v20 = v13 - v19;
        goto LABEL_10;
      }
      if (a2 == v7)
      {
        v16 = PKStrokePathPointsPrivate::locationAtIndex(a1, a2 - 1);
        v11 = v16 + v16;
        v13 = v17 + v17;
        v14 = a1;
        v15 = a2 - 2;
        goto LABEL_8;
      }
      v18 = PKStrokePathPointsPrivate::locationAtIndex(a1, v7);
LABEL_10:
      v21 = (double *)((char *)&v30.x + i);
      *(v21 - 1) = v18;
      *v21 = v20;
      v7 = v9;
    }
    PKSplinePointsToBezierPoints((float64x2_t *)&v30, &v23);
    if (!v5)
      CGPathMoveToPoint(Mutable, 0, v23.x, v23.y);
    CGPathAddCurveToPoint(Mutable, 0, v24, v25, v26, v27, v28, v29);
    ++v5;
    ++v6;
  }
  while (v5 != a2 - 1);
  return Mutable;
}

void sub_1BE480030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1BE480714(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1BE48084C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id PKUIKitUserDefaults()
{
  if (qword_1ECEE6538 != -1)
    dispatch_once(&qword_1ECEE6538, &__block_literal_global_83);
  return (id)qword_1ECEE6530;
}

id PKUserDefaults()
{
  if (qword_1ECEE6548 != -1)
    dispatch_once(&qword_1ECEE6548, &__block_literal_global_6_1);
  return (id)qword_1ECEE6540;
}

BOOL PKIsPhoneDevice()
{
  void *v0;
  _BOOL8 v1;

  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom") == 0;

  return v1;
}

BOOL PKIsPadDevice()
{
  void *v0;
  _BOOL8 v1;

  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "userInterfaceIdiom") == 1;

  return v1;
}

uint64_t PKIsQuickNoteWindowScene(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;
  id v6;
  char isKindOfClass;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = a1;
  if (v1
    && PKIsPadDevice()
    && (objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"),
        v2 = (void *)objc_claimAutoreleasedReturnValue(),
        objc_msgSend(v2, "bundleIdentifier"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.mobilenotes")),
        v3,
        v2,
        v4))
  {
    v10 = 0;
    v11 = &v10;
    v12 = 0x2050000000;
    v5 = (void *)qword_1ECEE6558;
    v13 = qword_1ECEE6558;
    if (!qword_1ECEE6558)
    {
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 3221225472;
      v9[2] = __getSBSUISystemNotesWindowSceneClass_block_invoke;
      v9[3] = &unk_1E7777068;
      v9[4] = &v10;
      __getSBSUISystemNotesWindowSceneClass_block_invoke((uint64_t)v9);
      v5 = (void *)v11[3];
    }
    v6 = objc_retainAutorelease(v5);
    _Block_object_dispose(&v10, 8);
    isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_1BE481974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL PKIsSmallestQuickNoteWindowScene(void *a1)
{
  id v1;
  void *v2;
  double v3;
  _BOOL8 v4;

  v1 = a1;
  if (PKIsQuickNoteWindowScene(v1))
  {
    objc_msgSend(v1, "coordinateSpace");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "bounds");
    v4 = v3 <= 560.0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL PKIsQuickNoteOnPhone()
{
  _BOOL8 result;
  void *v1;
  void *v2;
  uint64_t v3;

  result = PKIsPhoneDevice();
  if (result)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "bundleIdentifier");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("com.apple.mobilenotes.EditorExtension"));

    return v3;
  }
  return result;
}

void PKPerformOnMainThread(void *a1)
{
  void (**v1)(_QWORD);
  _QWORD block[4];
  void (**v3)(_QWORD);

  v1 = a1;
  if (objc_msgSend(MEMORY[0x1E0CB3978], "isMainThread"))
  {
    v1[2](v1);
  }
  else
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PKPerformOnMainThread_block_invoke;
    block[3] = &unk_1E7777F58;
    v3 = v1;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
}

void PKPerformOnMainThreadNextRunLoop(void *a1, int a2)
{
  id v3;
  void *v4;
  _QWORD block[4];
  id v6;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PKPerformOnMainThreadNextRunLoop_block_invoke;
    block[3] = &unk_1E7777F58;
    v6 = v3;
    dispatch_async(MEMORY[0x1E0C80D38], block);

  }
  else
  {
    PKPerformOnMainThread(v3);
  }

}

uint64_t PKIsiWork()
{
  if (qword_1ECEE6550 != -1)
    dispatch_once(&qword_1ECEE6550, &__block_literal_global_12);
  return _MergedGlobals_154;
}

BOOL PKIsDeviceLocked()
{
  unsigned int (*v0)(_QWORD);
  _Unwind_Exception *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (unsigned int (*)(_QWORD))getMKBGetDeviceLockStateSymbolLoc_ptr;
  v7 = getMKBGetDeviceLockStateSymbolLoc_ptr;
  if (!getMKBGetDeviceLockStateSymbolLoc_ptr)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getMKBGetDeviceLockStateSymbolLoc_block_invoke;
    v3[3] = &unk_1E7777068;
    v3[4] = &v4;
    __getMKBGetDeviceLockStateSymbolLoc_block_invoke((uint64_t)v3);
    v0 = (unsigned int (*)(_QWORD))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0)
  {
    dlerror();
    v2 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v4, 8);
    _Unwind_Resume(v2);
  }
  return v0(0) - 1 < 2;
}

BOOL PKUseCompactSize(void *a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a1;
  v4 = (PKIsQuickNoteWindowScene(a2) & 1) != 0
    || !objc_msgSend(v3, "userInterfaceIdiom")
    || objc_msgSend(v3, "horizontalSizeClass") == 1;

  return v4;
}

uint64_t PKUIPopoverPermittedArrowDirectionsForEdge(uint64_t a1)
{
  NSObject *v2;
  uint8_t v4[16];

  if (PKIsVisionDevice())
  {
    if (a1 != 4)
    {
      v2 = os_log_create("com.apple.pencilkit", "PKPalette");
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v4 = 0;
        _os_log_error_impl(&dword_1BE213000, v2, OS_LOG_TYPE_ERROR, "Unexpected edge to determine popover arrow directions on this platform.", v4, 2u);
      }

    }
    return 2;
  }
  else if ((unint64_t)(a1 - 1) > 7)
  {
    return 15;
  }
  else
  {
    return qword_1BE4FEAF8[a1 - 1];
  }
}

uint64_t PKUIPopoverPermittedArrowDirectionsForCorner(uint64_t a1)
{
  uint64_t result;

  switch(a1)
  {
    case -1:
      result = PKUIPopoverPermittedArrowDirectionsForEdge(15);
      break;
    case 1:
    case 2:
      result = PKUIPopoverPermittedArrowDirectionsForEdge(1);
      break;
    case 4:
    case 8:
      PKIsVisionDevice();
      goto LABEL_4;
    default:
LABEL_4:
      result = 2;
      break;
  }
  return result;
}

uint64_t PKUIPopoverPermittedArrowDirections(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  uint64_t v5;

  v5 = 2;
  if (a3)
    v5 = 0;
  if ((a3 & 1) != 0 || (a4 & 1) != 0)
    return v5;
  if (a5)
    return PKUIPopoverPermittedArrowDirectionsForCorner(a2);
  return PKUIPopoverPermittedArrowDirectionsForEdge(a1);
}

uint64_t PKCurrentDeviceSupportsPencil()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(MEMORY[0x1E0DC3708], "currentDevice");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "_supportsPencil");

  return v1;
}

BOOL PKCurrentDeviceSupportsInkSynthesis()
{
  return CHGetPersonalizedSynthesisSupportState() > 1;
}

BOOL PKCurrentDeviceSupportsInkSynthesisAndInventoryReady()
{
  return CHGetPersonalizedSynthesisSupportState() == 3;
}

BOOL PKCurrentDeviceSupportsAutoRefine()
{
  _BOOL8 result;

  result = PKIsPadDevice();
  if (result)
    return CHGetPersonalizedSynthesisSupportState() > 1;
  return result;
}

uint64_t PKCurrentAppSupportsRefinement()
{
  void *v0;
  void *v1;
  char v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char v11;
  void *v12;
  void *v13;
  char v14;

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "bundleIdentifier");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.mobilenotes"));

  if ((v2 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "bundleIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "isEqualToString:", CFSTR("com.apple.PaperKit.MarkupPhotoEditingExtension"));

    if ((v5 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "bundleIdentifier");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.quicklook.extension.previewUI")) & 1) != 0)
      {
        v8 = 1;
LABEL_10:

        return v8;
      }
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "bundleIdentifier");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("com.apple.quicklook.UIExtension"));

      if ((v11 & 1) == 0)
      {
        objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "bundleIdentifier");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "isEqualToString:", CFSTR("com.apple.ScreenshotServicesService"));

        if ((v14 & 1) == 0)
        {
          objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
          v6 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v6, "bundleIdentifier");
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("com.apple.Preferences"));
          goto LABEL_10;
        }
      }
    }
  }
  return 1;
}

BOOL PKCurrentDeviceSupportsAutoRefineNotReady()
{
  _BOOL8 result;

  result = PKIsPadDevice();
  if (result)
    return CHGetPersonalizedSynthesisSupportState() == 1;
  return result;
}

Class __getSBSUISystemNotesWindowSceneClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECEE6560)
  {
    qword_1ECEE6560 = _sl_dlopen();
    if (!qword_1ECEE6560)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("SBSUISystemNotesWindowScene");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECEE6558 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getMKBGetDeviceLockStateSymbolLoc_block_invoke(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (MobileKeyBagLibraryCore_frameworkLibrary)
  {
    v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
  }
  else
  {
    MobileKeyBagLibraryCore_frameworkLibrary = _sl_dlopen();
    v2 = (void *)MobileKeyBagLibraryCore_frameworkLibrary;
    if (!MobileKeyBagLibraryCore_frameworkLibrary)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "MKBGetDeviceLockState");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  getMKBGetDeviceLockStateSymbolLoc_ptr = *(_UNKNOWN **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1BE48240C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE48246C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PKSpaceInsertionView;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BE482608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4826E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4828C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE482C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1BE482DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE482F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE48307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE483358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4835B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE483660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE483790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE483ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, id a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE484080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE4842AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BE484328(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE484888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE484B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE484E0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE48505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE4852A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE485608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE485734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4857F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4858D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  v13 = v12;

  _Unwind_Resume(a1);
}

void sub_1BE48743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void sub_1BE4887C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE488CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double drawing::StrokeDelta::StrokeDelta(drawing::StrokeDelta *this)
{
  double result;

  *(_QWORD *)this = &off_1E77748D8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E77748D8;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

void drawing::StrokeDelta::~StrokeDelta(drawing::StrokeDelta *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_1E77748D8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = (void **)((char *)this + 16);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

{
  drawing::StrokeDelta::~StrokeDelta(this);
  JUMPOUT(0x1C3B7F770);
}

drawing::StrokeDelta *drawing::StrokeDelta::StrokeDelta(PB::Data **this, PB::Data **a2)
{
  drawing::Ink **v4;
  drawing::Ink *v5;
  drawing::Ink *v6;
  drawing::Ink *v7;
  drawing::Stroke *v8;
  drawing::Stroke *v9;
  PB::Data *v10;
  drawing::StrokeData *v11;
  drawing::StrokeData *v12;
  PB::Data *v13;

  *this = (PB::Data *)&off_1E77748D8;
  *(_OWORD *)(this + 1) = 0u;
  v4 = this + 1;
  *(_OWORD *)(this + 3) = 0u;
  *(_OWORD *)(this + 5) = 0u;
  if (this != a2)
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)(this + 2), a2[2], a2[3], (a2[3] - a2[2]) >> 4);
  if (a2[1])
  {
    v5 = (drawing::Ink *)operator new();
    v6 = drawing::Ink::Ink(v5, a2[1]);
    v7 = *v4;
    *v4 = v6;
    if (v7)
      (*(void (**)(drawing::Ink *))(*(_QWORD *)v7 + 8))(v7);
  }
  if (a2[5])
  {
    v8 = (drawing::Stroke *)operator new();
    v9 = drawing::Stroke::Stroke(v8, a2[5]);
    v10 = this[5];
    this[5] = v9;
    if (v10)
      (*(void (**)(PB::Data *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (a2[6])
  {
    v11 = (drawing::StrokeData *)operator new();
    v12 = drawing::StrokeData::StrokeData(v11, a2[6]);
    v13 = this[6];
    this[6] = v12;
    if (v13)
      (*(void (**)(PB::Data *))(*(_QWORD *)v13 + 8))(v13);
  }
  return (drawing::StrokeDelta *)this;
}

uint64_t drawing::StrokeDelta::operator=(uint64_t a1, PB::Data **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  PB::Data *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if ((PB::Data **)a1 != a2)
  {
    drawing::StrokeDelta::StrokeDelta(&v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v9 = v3;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)&v7);
  }
  return a1;
}

_QWORD *drawing::swap(_QWORD *this, drawing::StrokeDelta *a2, drawing::StrokeDelta *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  v4 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v4;
  v5 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v5;
  v6 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  v8 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v8;
  return this;
}

uint64_t drawing::StrokeDelta::StrokeDelta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_1E77748D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::vector<PB::Data>::__vdeallocate((void **)(a1 + 16));
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a2 + 24) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a2 + 8) = 0u;
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

uint64_t drawing::StrokeDelta::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v7[8];
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a1 != a2)
  {
    drawing::StrokeDelta::StrokeDelta((uint64_t)v7, a2);
    v3 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    v8 = v4;
    v9 = v3;
    v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    v10 = v5;
    drawing::StrokeDelta::~StrokeDelta((drawing::StrokeDelta *)v7);
  }
  return a1;
}

uint64_t drawing::StrokeDelta::formatText(drawing::StrokeDelta *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "ink");
  v6 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); v6 != i; v6 += 16)
    PB::TextFormatter::format();
  v8 = *((_QWORD *)this + 5);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "stroke");
  v9 = *((_QWORD *)this + 6);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "strokeData");
  return PB::TextFormatter::endObject(a2);
}

uint64_t drawing::StrokeDelta::readFrom(drawing::StrokeDelta *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t result;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  _QWORD v35[5];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t *)((char *)this + 16);
  v9 = (char *)this + 32;
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      break;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v2 + 1;
      *((_QWORD *)a2 + 1) = v2 + 1;
      v15 = *(_BYTE *)(v10 + v2);
      v13 |= (unint64_t)(v15 & 0x7F) << v11;
      if ((v15 & 0x80) == 0)
        break;
      v11 += 7;
      v2 = v14;
      v16 = v12++ > 8;
      if (v16)
        goto LABEL_20;
    }
LABEL_22:
    if ((v13 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v13 >> 3))
    {
      case 2u:
        v23 = (_QWORD *)*((_QWORD *)this + 3);
        v22 = *((_QWORD *)this + 4);
        if ((unint64_t)v23 >= v22)
        {
          v29 = ((uint64_t)v23 - *v8) >> 4;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v31 = v22 - *v8;
          if (v31 >> 3 > v30)
            v30 = v31 >> 3;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v32 = 0xFFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          v35[4] = v9;
          if (v32)
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v9, v32);
          else
            v33 = 0;
          v34 = &v33[16 * v29];
          v35[0] = v33;
          v35[1] = v34;
          v35[3] = &v33[16 * v32];
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          v35[2] = v34 + 16;
          std::vector<PB::Data>::__swap_out_circular_buffer(v8, v35);
          v24 = (_QWORD *)*((_QWORD *)this + 3);
          std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v35);
        }
        else
        {
          *v23 = 0;
          v23[1] = 0;
          v24 = v23 + 2;
          *((_QWORD *)this + 3) = v23 + 2;
        }
        *((_QWORD *)this + 3) = v24;
        PB::Reader::read(a2, (PB::Data *)(v24 - 2));
        goto LABEL_46;
      case 3u:
        v25 = operator new();
        *(_QWORD *)(v25 + 80) = 0;
        *(_QWORD *)(v25 + 88) = 0;
        *(_DWORD *)(v25 + 72) = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)v25 = &off_1E7774910;
        *(_QWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 48) = 0;
        *(_QWORD *)(v25 + 32) = 0;
        v26 = *((_QWORD *)this + 1);
        *((_QWORD *)this + 1) = v25;
        if (v26)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
          v25 = *((_QWORD *)this + 1);
        }
        break;
      case 4u:
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E77749B8;
        *(_QWORD *)(v25 + 192) = 0;
        *(_QWORD *)(v25 + 200) = 0;
        *(_OWORD *)(v25 + 8) = 0u;
        *(_OWORD *)(v25 + 24) = 0u;
        *(_QWORD *)(v25 + 40) = 0;
        *(_OWORD *)(v25 + 56) = 0u;
        *(_OWORD *)(v25 + 72) = 0u;
        *(_QWORD *)(v25 + 88) = 0;
        *(_QWORD *)(v25 + 112) = 0;
        *(_QWORD *)(v25 + 120) = 0;
        *(_QWORD *)(v25 + 104) = 0;
        *(_OWORD *)(v25 + 136) = 0u;
        *(_OWORD *)(v25 + 152) = 0u;
        *(_OWORD *)(v25 + 168) = 0u;
        *(_DWORD *)(v25 + 184) = 0;
        v27 = *((_QWORD *)this + 5);
        *((_QWORD *)this + 5) = v25;
        if (v27)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          v25 = *((_QWORD *)this + 5);
        }
        break;
      case 5u:
        v25 = operator new();
        *(_QWORD *)v25 = &off_1E77748A0;
        *(_QWORD *)(v25 + 24) = 0;
        *(_QWORD *)(v25 + 40) = 0;
        *(_QWORD *)(v25 + 64) = 0;
        *(_QWORD *)(v25 + 92) = 0;
        *(_QWORD *)(v25 + 84) = 0;
        *(_DWORD *)(v25 + 100) = 0;
        v28 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v25;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v25 = *((_QWORD *)this + 6);
        }
        break;
      default:
        goto LABEL_20;
    }
    if (!PB::Reader::placeMark()
      || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v25 + 16))(v25, a2) & 1) == 0)
    {
      return 0;
    }
    PB::Reader::recallMark();
LABEL_46:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
  v17 = 0;
  v18 = 0;
  v13 = 0;
  if (v2 > v3)
    v3 = v2;
  do
  {
    if (v3 == v2)
    {
      v4 = 1;
      *((_BYTE *)a2 + 24) = 1;
      return v4 == 0;
    }
    v19 = v2 + 1;
    v20 = *(_BYTE *)(v10 + v2);
    *((_QWORD *)a2 + 1) = v19;
    v13 |= (unint64_t)(v20 & 0x7F) << v17;
    if ((v20 & 0x80) == 0)
      goto LABEL_22;
    v17 += 7;
    v2 = v19;
    v16 = v18++ > 8;
  }
  while (!v16);
LABEL_20:
  result = PB::Reader::skip(a2);
  if ((_DWORD)result)
    goto LABEL_46;
  return result;
}

void sub_1BE489AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t drawing::StrokeDelta::writeTo(uint64_t this, PB::Writer *a2)
{
  _QWORD *v3;
  const PB::Data *v4;
  const PB::Data *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;

  v3 = (_QWORD *)this;
  v4 = *(const PB::Data **)(this + 16);
  v5 = *(const PB::Data **)(this + 24);
  while (v4 != v5)
  {
    this = PB::Writer::write(a2, v4);
    v4 = (const PB::Data *)((char *)v4 + 16);
  }
  v6 = (const PB::Base *)v3[1];
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = (const PB::Base *)v3[5];
  if (v7)
    this = PB::Writer::writeSubmessage(a2, v7);
  v8 = (const PB::Base *)v3[6];
  if (v8)
    return PB::Writer::writeSubmessage(a2, v8);
  return this;
}

uint64_t drawing::StrokeDelta::operator==(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  if (v3 - v2 != a2[3] - v4)
    return 0;
  while (v2 != v3)
  {
    result = PB::Data::operator==();
    if (!(_DWORD)result)
      return result;
    v2 += 16;
    v4 += 16;
  }
  v8 = a1[1];
  v9 = a2[1];
  if (v8)
  {
    if (!v9 || !drawing::Ink::operator==(v8, v9) && a1[1] | a2[1])
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = a1[5];
  v11 = a2[5];
  if (v10)
  {
    if (!v11 || (drawing::Stroke::operator==(v10, v11) & 1) == 0 && a1[5] | a2[5])
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  v12 = a1[6];
  if (!v12)
    return a2[6] == 0;
  v13 = a2[6];
  if (v13)
  {
    if (drawing::StrokeData::operator==(v12, v13))
      return 1;
    if (!a1[6])
      return a2[6] == 0;
  }
  return 0;
}

unint64_t drawing::StrokeDelta::hash_value(drawing::StrokeDelta *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  drawing::Ink *v5;
  unint64_t v6;
  drawing::Stroke *v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v2 += 16;
      v4 ^= PBHashBytes();
    }
    while (v2 != v3);
  }
  v5 = (drawing::Ink *)*((_QWORD *)this + 1);
  if (v5)
    v6 = drawing::Ink::hash_value(v5);
  else
    v6 = 0;
  v7 = (drawing::Stroke *)*((_QWORD *)this + 5);
  if (v7)
    v8 = drawing::Stroke::hash_value(v7);
  else
    v8 = 0;
  v9 = *((_QWORD *)this + 6);
  if (v9)
    v9 = drawing::StrokeData::hash_value((drawing::StrokeData *)v9);
  return v6 ^ v4 ^ v8 ^ v9;
}

_QWORD *drawing::StrokeDelta::makeInk(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    *(_DWORD *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)v2 = &off_1E7774910;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::StrokeDelta::makeStroke(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77749B8;
    *(_QWORD *)(v2 + 192) = 0;
    *(_QWORD *)(v2 + 200) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_QWORD *)(v2 + 40) = 0;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 112) = 0;
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 104) = 0;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_DWORD *)(v2 + 184) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::StrokeDelta::makeStrokeData(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77748A0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 92) = 0;
    *(_QWORD *)(v2 + 84) = 0;
    *(_DWORD *)(v2 + 100) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

uint64_t PKRandom(unsigned int *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = 1664525 * *a1 + 1013904223;
  *a1 = v2;
  return ((double)v2 / 4294967300.0 * (double)a2);
}

void sub_1BE48C2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE48E094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__34(uint64_t a1, uint64_t a2)
{
  objc_moveWeak((id *)(a1 + 40), (id *)(a2 + 40));
}

void __Block_byref_object_dispose__34(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 40));
}

void sub_1BE48F408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(&a28);
  _Unwind_Resume(a1);
}

void sub_1BE48F518(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

double DKDNearestPointOnLineToPoint(CGPoint *a1, CGPoint a2)
{
  double y;
  double v3;
  double result;

  y = a1->y;
  v3 = ((a2.y - y) * (a1[1].y - y) + (a2.x - a1->x) * (a1[1].x - a1->x))
     / ((a1[1].y - y) * (a1[1].y - y) + (a1[1].x - a1->x) * (a1[1].x - a1->x));
  result = 0.0;
  if (v3 >= 0.0)
  {
    result = v3;
    if (v3 > 1.0)
      return 1.0;
  }
  return result;
}

void sub_1BE494E80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE4955DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE495718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE495864(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE495928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1BE495C08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE495E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE496178(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE496254(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE496AD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__35(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  result = *(__n128 *)(a2 + 80);
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1BE496FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE497104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE497310(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  if (!v1)
  _Unwind_Resume(a1);
}

void sub_1BE497648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE4979C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_40c54_ZTSNSt3__16vectorI12PKInputPointNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<PKInputPoint>::__init_with_size[abi:ne180100]<PKInputPoint*,PKInputPoint*>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 7);
}

void __destroy_helper_block_ea8_40c54_ZTSNSt3__16vectorI12PKInputPointNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_1BE49853C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE498608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BE49893C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1BE498B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE498F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  uint64_t v16;
  void *v18;

  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE49900C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BE4991F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1BE49936C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1BE499484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1BE49966C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4998C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t PKInputProviderInitial::getUpdatedRangeFromIndex(id *this, unint64_t *a2)
{
  id WeakRetained;
  uint64_t v4;

  WeakRetained = objc_loadWeakRetained(this + 1);
  v4 = objc_msgSend(WeakRetained, "getInputUpdatedRangeFromIndex:", a2);

  return v4;
}

void sub_1BE499DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PKInputProviderInitial::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v6;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  v6 = objc_msgSend(WeakRetained, "copyInputUpdatedRangeFromIndex:into:", a2, a3);

  return v6;
}

void sub_1BE499E00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKInputProviderInitial::reset(id *this)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained(this + 1);
  objc_msgSend(WeakRetained, "reset");

}

void sub_1BE499E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

double PKPixelSmoothingFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double result;

  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  result = a4 * 0.5;
  *(double *)(a1 + 32) = a4 * 0.5;
  *(_QWORD *)(a1 + 40) = a3;
  return result;
}

uint64_t PKPixelSmoothingFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t *v16;
  uint64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a3;
  v5 = a3[1];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ((objc_msgSend(WeakRetained, "isSnappedToRuler") & 1) != 0)
  {

  }
  else
  {
    v9 = *(_QWORD *)(a1 + 40);

    if (v9 != 1)
    {
      v10 = (v5 - v6) >> 7;
      v11 = *a3;
      v12 = (a3[1] - *a3) >> 7;
      if (v10 + 1 < v12 - 1)
      {
        v13 = (float64x2_t *)(v11 + (v10 << 7));
        v14 = *(float64x2_t *)(v11 + ((v10 + 1) << 7));
        v15 = *v13;
        v16 = v13 + 16;
        v17 = v12 - v10 - 2;
        v18 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
        do
        {
          v19 = *v16;
          v15 = vmulq_f64(vaddq_f64(vaddq_f64(v15, v14), *v16), v18);
          v20 = vsubq_f64(v15, v14);
          v21 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(v20, v20).f64[1]), v20.f64[0], v20.f64[0]));
          v22 = *(double *)(a1 + 32);
          if (v21 >= v22)
            v15 = vaddq_f64(v14, vmulq_n_f64(v20, v22 / v21));
          v16[-8] = v15;
          v16 += 8;
          v14 = v19;
          --v17;
        }
        while (v17);
      }
      if (v7 <= 1)
        v23 = 1;
      else
        v23 = v7;
      v24 = v23 - 1;
      if (!*(_BYTE *)(a1 + 16))
        return v24;
    }
  }
  return v7;
}

void sub_1BE499FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<PKInputPoint,PKInputPoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

float64x2_t PKPointReductionFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  float64x2_t v6;
  float64x2_t result;

  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 104) = a3;
  *(_QWORD *)(a1 + 112) = 0;
  v6 = vmulq_n_f64((float64x2_t)xmmword_1BE4FEBB0, *(double *)(a1 + 24));
  result = vmulq_f64(v6, v6);
  *(float64x2_t *)(a1 + 128) = result;
  return result;
}

_QWORD *PKPointReductionFilter::reset(PKPointReductionFilter *this)
{
  _QWORD *result;

  result = PKInputFilter<PKInputPoint,PKInputPoint>::reset((uint64_t)this);
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 192) = 0;
  return result;
}

uint64_t PKPointReductionFilter::fetchInput(PKPointReductionFilter *this)
{
  char *v2;

  v2 = (char *)this + 48;
  std::vector<PKInputPoint>::resize((uint64_t)this + 48, *((_QWORD *)this + 4) - *((_QWORD *)this + 15));
  *((_QWORD *)this + 4) = (*(uint64_t (**)(_QWORD, _QWORD, char *))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((_QWORD *)this + 4), v2);
  return (*(uint64_t (**)(PKPointReductionFilter *))(*(_QWORD *)this + 56))(this);
}

void PKPointReductionFilter::run(PKPointReductionFilter *this)
{
  double *v1;
  double *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  uint64_t v11;
  double *v12;
  BOOL v13;
  uint64_t v14;
  double *v15;
  double *v16;
  double v17;
  double v18;
  int v19;
  double *v20;
  uint64_t v21;
  int64_t v22;
  double *v23;
  _QWORD *v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  double v41;
  int64_t v42;
  uint64_t v43;
  int64_t v44;
  double *v45;
  double v46;
  double v47;
  double *v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double *v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  unint64_t v63;
  double *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  float64x2_t *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  _BYTE *v119;
  char *v120;
  BOOL v121;
  uint64_t v122;
  int32x2_t v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  int v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 *v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  float64x2_t *v163;
  double v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  void **v168;

  v1 = (double *)*((_QWORD *)this + 6);
  v2 = (double *)*((_QWORD *)this + 7);
  if (v2 != v1 && !*((_BYTE *)this + 192))
  {
    v5 = *((_QWORD *)this + 14);
    v4 = *((_QWORD *)this + 15);
    v6 = *((_QWORD *)this + 4) - v4 - 20;
    v7 = v5 + 1;
    if (v5 + 1 < v6)
    {
      v8 = &v1[16 * v5];
      v9 = *v8;
      v10 = v8[1];
      v11 = *((_QWORD *)this + 14);
      do
      {
        v12 = &v1[16 * v7];
        v13 = (v12[1] - v10) * (v12[1] - v10) + (*v12 - v9) * (*v12 - v9) <= *((double *)this + 16) && v7 < v6 - 1;
        if (!v13)
        {
          v14 = v11 - v5;
          if (v11 <= v5)
          {
            v5 = v7;
          }
          else
          {
            v15 = &v1[16 * v5];
            v17 = v15[2];
            v16 = v15 + 2;
            v18 = v17;
            v19 = *((unsigned __int8 *)v16 + 80);
            v20 = v16 + 16;
            do
            {
              if (v18 < *v20)
                v18 = *v20;
              *v16 = v18;
              if (v19 && !*((_BYTE *)v20 + 80))
              {
                v19 = 0;
                v16[2] = v20[2];
                *((_BYTE *)v16 + 80) = 0;
              }
              v20 += 16;
              --v11;
            }
            while (v5 != v11);
            v21 = (uint64_t)&v1[16 * v5 + 16];
            if ((double *)v21 != v12)
            {
              v22 = (char *)v2 - (char *)v12;
              if (v2 != v12)
              {
                memmove(&v1[16 * v5 + 16], v12, (char *)v2 - (char *)v12);
                v4 = *((_QWORD *)this + 15);
                v1 = (double *)*((_QWORD *)this + 6);
              }
              v2 = (double *)(v21 + v22);
              *((_QWORD *)this + 7) = v21 + v22;
            }
            v4 += v14;
            *((_QWORD *)this + 15) = v4;
            v6 -= v14;
            v7 = v5;
          }
          v23 = &v1[16 * v5];
          v9 = *v23;
          v10 = v23[1];
        }
        v11 = v7++;
      }
      while (v7 < v6);
    }
    v168 = (void **)((char *)this + 80);
    std::vector<PKInputPoint>::resize((uint64_t)this + 80, *((_QWORD *)this + 9));
    v24 = (_QWORD *)*((_QWORD *)this + 18);
    if (*((_QWORD **)this + 19) != v24)
      *((_QWORD *)this + 19) = v24;
    v25 = *((_QWORD *)this + 20);
    if ((unint64_t)v24 >= v25)
    {
      v27 = v25 - (_QWORD)v24;
      v28 = v27 >> 3;
      if ((unint64_t)(v27 >> 3) <= 1)
        v28 = 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v28;
      v30 = std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v29);
      v31 = (char *)*((_QWORD *)this + 18);
      v32 = (char *)*((_QWORD *)this + 19);
      v34 = &v30[2 * v33];
      *v30 = -1;
      v30[1] = 0;
      v26 = (double *)(v30 + 2);
      if (v32 != v31)
      {
        do
        {
          *((_OWORD *)v30 - 1) = *((_OWORD *)v32 - 1);
          v30 -= 2;
          v32 -= 16;
        }
        while (v32 != v31);
        v31 = (char *)*((_QWORD *)this + 18);
      }
      *((_QWORD *)this + 18) = v30;
      *((_QWORD *)this + 19) = v26;
      *((_QWORD *)this + 20) = v34;
      if (v31)
        operator delete(v31);
    }
    else
    {
      *v24 = -1;
      v24[1] = 0;
      v26 = (double *)(v24 + 2);
    }
    *((_QWORD *)this + 19) = v26;
    v35 = *((_QWORD *)this + 14);
    v36 = v35 + 1;
    v37 = *((_QWORD *)this + 6);
    if (v35 + 1 < (*((_QWORD *)this + 7) - v37) >> 7)
    {
      v38 = (v35 << 7) + 136;
      do
      {
        v39 = v35;
        v35 = v36;
        v40 = *((_QWORD *)this + 14);
        if (v39 >= v40)
        {
          v43 = 0;
          v44 = v39 - 49;
          v45 = (double *)(v37 + (v35 << 7));
          v46 = *v45;
          v47 = v45[1];
          v48 = (double *)(v37 + v38);
          v41 = 1.79769313e308;
          v42 = *((_QWORD *)this + 14);
          do
          {
            v49 = *(double *)(*((_QWORD *)this + 18) + 16 * (v39 - v40) + 8);
            if (v49 < 1.79769313e308)
            {
              v50 = (double *)(v37 + (v39 << 7));
              v51 = *v50;
              v52 = v50[1];
              v53 = v46 - *v50;
              v54 = v47 - v52;
              v55 = v54 * v54 + v53 * v53;
              if (v55 >= *((double *)this + 16))
              {
                v56 = 0.0;
                if (v39 + 1 < v35)
                {
                  v57 = v48;
                  v58 = v43;
                  do
                  {
                    v59 = *(v57 - 1);
                    v60 = (v54 * (*v57 - v52) + (v59 - v51) * v53) / v55;
                    v61 = 0.0;
                    if (v60 >= 0.0)
                    {
                      v61 = (v54 * (*v57 - v52) + (v59 - v51) * v53) / v55;
                      if (v60 > 1.0)
                        v61 = 1.0;
                    }
                    v56 = v56
                        + (v47 * v61 + v52 * (1.0 - v61) - *v57) * (v47 * v61 + v52 * (1.0 - v61) - *v57)
                        + (v46 * v61 + v51 * (1.0 - v61) - v59) * (v46 * v61 + v51 * (1.0 - v61) - v59);
                    v57 += 16;
                    --v58;
                  }
                  while (v58);
                }
                v62 = v56 + v49;
                if (v62 < v41)
                {
                  v42 = v39;
                  v41 = v62;
                }
                if (v39 < v44 || v55 > *((double *)this + 17))
                  break;
              }
            }
            ++v43;
            v48 -= 16;
            v13 = v39-- <= v40;
          }
          while (!v13);
        }
        else
        {
          v41 = 1.79769313e308;
          v42 = *((_QWORD *)this + 14);
        }
        v63 = *((_QWORD *)this + 20);
        if ((unint64_t)v26 >= v63)
        {
          v64 = (double *)*((_QWORD *)this + 18);
          v65 = ((char *)v26 - (char *)v64) >> 4;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 60)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v67 = v63 - (_QWORD)v64;
          if (v67 >> 3 > v66)
            v66 = v67 >> 3;
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
            v68 = 0xFFFFFFFFFFFFFFFLL;
          else
            v68 = v66;
          if (v68)
          {
            v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPathRandomAccessElement>>(v68);
            v64 = (double *)*((_QWORD *)this + 18);
            v26 = (double *)*((_QWORD *)this + 19);
          }
          else
          {
            v69 = 0;
          }
          v70 = v68 + 16 * v65;
          *(_QWORD *)v70 = v42;
          *(double *)(v70 + 8) = v41;
          v71 = v70;
          if (v26 != v64)
          {
            do
            {
              *(_OWORD *)(v71 - 16) = *((_OWORD *)v26 - 1);
              v71 -= 16;
              v26 -= 2;
            }
            while (v26 != v64);
            v64 = (double *)*((_QWORD *)this + 18);
          }
          v26 = (double *)(v70 + 16);
          *((_QWORD *)this + 18) = v71;
          *((_QWORD *)this + 19) = v70 + 16;
          *((_QWORD *)this + 20) = v68 + 16 * v69;
          if (v64)
            operator delete(v64);
        }
        else
        {
          *(_QWORD *)v26 = v42;
          v26[1] = v41;
          v26 += 2;
        }
        *((_QWORD *)this + 19) = v26;
        v36 = v35 + 1;
        v37 = *((_QWORD *)this + 6);
        v38 += 128;
      }
      while (v35 + 1 < (*((_QWORD *)this + 7) - v37) >> 7);
    }
    v72 = (void **)((char *)this + 168);
    std::vector<long>::resize((uint64_t)this + 168, 0);
    v73 = *((_QWORD *)this + 14);
    v74 = v73 + ((uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4) - 1;
    if (v74 > v73)
    {
      v75 = (_QWORD *)((char *)this + 184);
      v76 = (uint64_t *)*((_QWORD *)this + 22);
      do
      {
        if ((unint64_t)v76 >= *v75)
        {
          v78 = (uint64_t *)*v72;
          v79 = ((char *)v76 - (_BYTE *)*v72) >> 3;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 61)
            std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
          v81 = *v75 - (_QWORD)v78;
          if (v81 >> 2 > v80)
            v80 = v81 >> 2;
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
            v82 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v82 = v80;
          if (v82)
          {
            v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 184, v82);
            v78 = (uint64_t *)*((_QWORD *)this + 21);
            v76 = (uint64_t *)*((_QWORD *)this + 22);
          }
          else
          {
            v83 = 0;
          }
          v84 = (uint64_t *)&v83[8 * v79];
          *v84 = v74;
          v77 = v84 + 1;
          while (v76 != v78)
          {
            v85 = *--v76;
            *--v84 = v85;
          }
          *((_QWORD *)this + 21) = v84;
          *((_QWORD *)this + 22) = v77;
          *((_QWORD *)this + 23) = &v83[8 * v82];
          if (v78)
            operator delete(v78);
        }
        else
        {
          *v76 = v74;
          v77 = v76 + 1;
        }
        *((_QWORD *)this + 22) = v77;
        v73 = *((_QWORD *)this + 14);
        v74 = *(_QWORD *)(*((_QWORD *)this + 18) + 16 * (v74 - v73));
        v76 = v77;
      }
      while (v74 > v73);
    }
    v86 = (float64x2_t *)*((_QWORD *)this + 10);
    v87 = (char *)*((_QWORD *)this + 11);
    v88 = v87 - (char *)v86;
    if (v87 == (char *)v86)
    {
      v89 = *((_QWORD *)this + 12);
      v90 = (__int128 *)*((_QWORD *)this + 6);
      if ((unint64_t)v87 >= v89)
      {
        v97 = v88 >> 7;
        v98 = v89 - (_QWORD)v86;
        if (v98 >> 6 <= (unint64_t)((v88 >> 7) + 1))
          v99 = v97 + 1;
        else
          v99 = v98 >> 6;
        if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFF80)
          v100 = 0x1FFFFFFFFFFFFFFLL;
        else
          v100 = v99;
        v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>((uint64_t)this + 96, v100);
        v102 = &v101[128 * v97];
        v104 = &v101[128 * v103];
        v105 = *v90;
        v106 = v90[1];
        v107 = v90[3];
        *((_OWORD *)v102 + 2) = v90[2];
        *((_OWORD *)v102 + 3) = v107;
        *(_OWORD *)v102 = v105;
        *((_OWORD *)v102 + 1) = v106;
        v108 = v90[4];
        v109 = v90[5];
        v110 = v90[7];
        *((_OWORD *)v102 + 6) = v90[6];
        *((_OWORD *)v102 + 7) = v110;
        *((_OWORD *)v102 + 4) = v108;
        *((_OWORD *)v102 + 5) = v109;
        v87 = v102 + 128;
        v112 = (char *)*((_QWORD *)this + 10);
        v111 = (char *)*((_QWORD *)this + 11);
        if (v111 != v112)
        {
          do
          {
            v113 = *((_OWORD *)v111 - 8);
            v114 = *((_OWORD *)v111 - 7);
            v115 = *((_OWORD *)v111 - 5);
            *((_OWORD *)v102 - 6) = *((_OWORD *)v111 - 6);
            *((_OWORD *)v102 - 5) = v115;
            *((_OWORD *)v102 - 8) = v113;
            *((_OWORD *)v102 - 7) = v114;
            v116 = *((_OWORD *)v111 - 4);
            v117 = *((_OWORD *)v111 - 3);
            v118 = *((_OWORD *)v111 - 1);
            *((_OWORD *)v102 - 2) = *((_OWORD *)v111 - 2);
            *((_OWORD *)v102 - 1) = v118;
            *((_OWORD *)v102 - 4) = v116;
            *((_OWORD *)v102 - 3) = v117;
            v102 -= 128;
            v111 -= 128;
          }
          while (v111 != v112);
          v111 = (char *)*v168;
        }
        *((_QWORD *)this + 10) = v102;
        *((_QWORD *)this + 11) = v87;
        *((_QWORD *)this + 12) = v104;
        if (v111)
          operator delete(v111);
      }
      else
      {
        v91 = *v90;
        v92 = v90[1];
        v93 = v90[3];
        *((_OWORD *)v87 + 2) = v90[2];
        *((_OWORD *)v87 + 3) = v93;
        *(_OWORD *)v87 = v91;
        *((_OWORD *)v87 + 1) = v92;
        v94 = v90[4];
        v95 = v90[5];
        v96 = v90[7];
        *((_OWORD *)v87 + 6) = v90[6];
        *((_OWORD *)v87 + 7) = v96;
        *((_OWORD *)v87 + 4) = v94;
        *((_OWORD *)v87 + 5) = v95;
        v87 += 128;
      }
      *((_QWORD *)this + 11) = v87;
      v73 = *((_QWORD *)this + 14);
      v86 = (float64x2_t *)*((_QWORD *)this + 10);
    }
    v119 = (_BYTE *)*((_QWORD *)this + 21);
    v120 = (char *)*((_QWORD *)this + 22);
    v121 = v87 - (char *)v86 == 128 && v120 - v119 == 8;
    if (v121
      && (v122 = *((_QWORD *)this + 7),
          v123 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_n_s64(0x3F847AE147AE147BuLL), vabdq_f64(*v86, *(float64x2_t *)(v122 - 128)))), (v123.i32[0] & v123.i32[1] & 1) != 0))
    {
      v124 = *((_QWORD *)this + 6);
      if (v122 - v124 >= 129)
      {
        v125 = (unint64_t)(v122 - v124) >> 7;
        v126 = *((double *)v87 - 14);
        v127 = *(v87 - 32);
        if (v125 <= 2)
          v125 = 2;
        v128 = v125 - 1;
        v129 = v124 + 144;
        do
        {
          if (v126 < *(double *)v129)
            v126 = *(double *)v129;
          *((double *)v87 - 14) = v126;
          if (v127 && !*(_BYTE *)(v129 + 80))
          {
            v127 = 0;
            *((_QWORD *)v87 - 12) = *(_QWORD *)(v129 + 16);
            *(v87 - 32) = 0;
          }
          v129 += 128;
          --v128;
        }
        while (v128);
      }
    }
    else
    {
      if (v120 == v119)
      {
        v130 = 0;
        v131 = -1;
      }
      else
      {
        v130 = 0;
        v131 = -1;
        do
        {
          v133 = *((_QWORD *)v120 - 1);
          v120 -= 8;
          v132 = v133;
          v134 = (v87 - (char *)v86) >> 7;
          if (v133 < *((_QWORD *)this + 4) - *((_QWORD *)this + 15) && v134 > *((_QWORD *)this + 9) + 5)
          {
            v130 = v132;
            v131 = (v87 - (char *)v86) >> 7;
          }
          v135 = (__int128 *)(*((_QWORD *)this + 6) + (v132 << 7));
          v136 = *((_QWORD *)this + 12);
          if ((unint64_t)v87 >= v136)
          {
            if ((unint64_t)(v134 + 1) >> 57)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v143 = v136 - (_QWORD)v86;
            v144 = v143 >> 6;
            if (v143 >> 6 <= (unint64_t)(v134 + 1))
              v144 = v134 + 1;
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFF80)
              v145 = 0x1FFFFFFFFFFFFFFLL;
            else
              v145 = v144;
            if (v145)
              v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKInputPoint>>((uint64_t)this + 96, v145);
            else
              v146 = 0;
            v147 = &v146[128 * v134];
            v148 = *v135;
            v149 = v135[1];
            v150 = v135[3];
            *((_OWORD *)v147 + 2) = v135[2];
            *((_OWORD *)v147 + 3) = v150;
            *(_OWORD *)v147 = v148;
            *((_OWORD *)v147 + 1) = v149;
            v151 = v135[4];
            v152 = v135[5];
            v153 = v135[7];
            *((_OWORD *)v147 + 6) = v135[6];
            *((_OWORD *)v147 + 7) = v153;
            *((_OWORD *)v147 + 4) = v151;
            *((_OWORD *)v147 + 5) = v152;
            v155 = (char *)*((_QWORD *)this + 10);
            v154 = (char *)*((_QWORD *)this + 11);
            v156 = v147;
            if (v154 != v155)
            {
              do
              {
                v157 = *((_OWORD *)v154 - 8);
                v158 = *((_OWORD *)v154 - 7);
                v159 = *((_OWORD *)v154 - 5);
                *((_OWORD *)v156 - 6) = *((_OWORD *)v154 - 6);
                *((_OWORD *)v156 - 5) = v159;
                *((_OWORD *)v156 - 8) = v157;
                *((_OWORD *)v156 - 7) = v158;
                v160 = *((_OWORD *)v154 - 4);
                v161 = *((_OWORD *)v154 - 3);
                v162 = *((_OWORD *)v154 - 1);
                *((_OWORD *)v156 - 2) = *((_OWORD *)v154 - 2);
                *((_OWORD *)v156 - 1) = v162;
                *((_OWORD *)v156 - 4) = v160;
                *((_OWORD *)v156 - 3) = v161;
                v156 -= 128;
                v154 -= 128;
              }
              while (v154 != v155);
              v154 = (char *)*v168;
            }
            v87 = v147 + 128;
            *((_QWORD *)this + 10) = v156;
            *((_QWORD *)this + 11) = v147 + 128;
            *((_QWORD *)this + 12) = &v146[128 * v145];
            if (v154)
              operator delete(v154);
          }
          else
          {
            v137 = *v135;
            v138 = v135[1];
            v139 = v135[3];
            *((_OWORD *)v87 + 2) = v135[2];
            *((_OWORD *)v87 + 3) = v139;
            *(_OWORD *)v87 = v137;
            *((_OWORD *)v87 + 1) = v138;
            v140 = v135[4];
            v141 = v135[5];
            v142 = v135[7];
            *((_OWORD *)v87 + 6) = v135[6];
            *((_OWORD *)v87 + 7) = v142;
            *((_OWORD *)v87 + 4) = v140;
            *((_OWORD *)v87 + 5) = v141;
            v87 += 128;
          }
          *((_QWORD *)this + 11) = v87;
          v86 = (float64x2_t *)*((_QWORD *)this + 10);
          v163 = &v86[8 * v134];
          *((double *)v87 - 5) = sqrt((v163[-8].f64[1] - *((double *)v87 - 15)) * (v163[-8].f64[1] - *((double *)v87 - 15))+ (v163[-8].f64[0] - *((double *)v87 - 16)) * (v163[-8].f64[0] - *((double *)v87 - 16)));
          if (v73 + 1 < v132)
          {
            v164 = *((double *)v87 - 14);
            v165 = *(v87 - 32);
            v166 = ~v73 + v132;
            v167 = *((_QWORD *)this + 6) + (v73 << 7) + 144;
            do
            {
              if (v164 < *(double *)v167)
                v164 = *(double *)v167;
              *((double *)v87 - 14) = v164;
              if (v165 && !*(_BYTE *)(v167 + 80))
              {
                v165 = 0;
                *((_QWORD *)v87 - 12) = *(_QWORD *)(v167 + 16);
                *(v87 - 32) = 0;
              }
              v167 += 128;
              --v166;
            }
            while (v166);
          }
          v73 = v132;
        }
        while (v120 != *v72);
      }
      if (*((_QWORD *)this + 4) == (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 7
        && *((_BYTE *)this + 16))
      {
        *((_QWORD *)this + 9) = (uint64_t)&v87[-*((_QWORD *)this + 10)] >> 7;
        *((_BYTE *)this + 192) = 1;
      }
      else if (v131 >= 1)
      {
        *((_QWORD *)this + 9) = v131 + 1;
        *((_QWORD *)this + 14) = v130;
      }
    }
  }
}

uint64_t PKInputBufferedFilter<PKInputPoint,PKInputPoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void PKEstimatedAltitudeAndAzimuthFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  _BYTE *v12;
  BOOL v13;
  id v14;

  v14 = a2;
  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, v14, a3, a4);
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 32) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(_QWORD *)(a1 + 88) = a3;
  objc_msgSend(v14, "behavior");
  v12 = (_BYTE *)objc_claimAutoreleasedReturnValue();
  if (v12)
    v13 = v12[8] != 0;
  else
    v13 = 0;
  *(_BYTE *)(a1 + 96) = v13;

}

void sub_1BE49AB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKEstimatedAltitudeAndAzimuthFilter::copyUpdatedRangeFromIndex(uint64_t a1, unint64_t a2, double **a3)
{
  uint64_t v6;
  id WeakRetained;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  uint64_t result;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double *v23;
  double *v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  double *v31;
  double v32;
  double v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  double *v37;
  double v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  unint64_t v47;
  double v48;
  double v49;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(a1 + 88) != 1 || !*(_BYTE *)(a1 + 96))
    return v6;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 128));
  if ((objc_msgSend(WeakRetained, "isSnappedToRuler") & 1) != 0 || a3[1] == *a3)
  {

    return v6;
  }
  v8 = *((unsigned __int8 *)*a3 + 96);

  if (!v8)
    return v6;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 != -1)
    goto LABEL_7;
  v19 = *a3;
  v20 = (char *)a3[1] - (char *)*a3;
  v21 = v20 >> 7;
  v22 = (v20 >> 7) - 1;
  if (v22 > a2)
  {
    v23 = &v19[16 * a2 + 12];
    v9 = a2;
    while (*(_BYTE *)v23)
    {
      ++v9;
      v23 += 16;
      if (v22 == v9)
        goto LABEL_35;
    }
    *(_QWORD *)(a1 + 32) = v9;
    *(int8x16_t *)(a1 + 72) = vextq_s8(*(int8x16_t *)(v23 - 9), *(int8x16_t *)(v23 - 9), 8uLL);
    if (v9 != -1)
    {
LABEL_7:
      if (v9 > a2)
      {
        if (v9 < 1)
        {
          v13 = 0.0;
        }
        else
        {
          v12 = **a3;
          v11 = (*a3)[1];
          v10 = (uint64_t)(*a3 + 16);
          v13 = 0.0;
          v14 = v9;
          do
          {
            v15 = *(double *)v10;
            v16 = *(double *)(v10 + 8);
            v17 = sqrt((v16 - v11) * (v16 - v11) + (*(double *)v10 - v12) * (*(double *)v10 - v12));
            *(double *)(v10 + 88) = v17;
            v13 = v13 + v17;
            v10 += 128;
            v11 = v16;
            v12 = v15;
            --v14;
          }
          while (v14);
        }
        if (v13 >= *(double *)(a1 + 112))
        {
          v28 = *(_QWORD *)(a1 + 40);
          v29 = *a3;
          if (v28 == -1)
          {
            *(_QWORD *)(a1 + 40) = v28;
            *(int8x16_t *)(a1 + 56) = vextq_s8(*(int8x16_t *)&v29[16 * v28 + 3], *(int8x16_t *)&v29[16 * v28 + 3], 8uLL);
          }
          if (v28 + 1 < v9)
          {
            v30 = ~v28 + v9;
            v31 = &v29[16 * v28 + 27];
            v32 = 0.0;
            do
            {
              v33 = *v31;
              v31 += 16;
              v32 = v32 + v33;
              --v30;
            }
            while (v30);
            v34 = *(float64x2_t *)(a1 + 56);
            v35 = *(float64x2_t *)(a1 + 72);
            v36 = ~v28 + v9;
            v37 = &v29[16 * v28 + 27];
            v38 = 0.0;
            do
            {
              v38 = v38 + *v37;
              v39 = (int8x16_t)vmlaq_n_f64(vmulq_n_f64(v35, v38 / v32), v34, 1.0 - v38 / v32);
              *((int8x16_t *)v37 - 4) = vextq_s8(v39, v39, 8uLL);
              v37 += 16;
              --v36;
            }
            while (v36);
          }
          v27 = (char *)a3[1] - (char *)v29;
        }
        else
        {
          v24 = *a3;
          v25 = v9 - a2;
          if (v9 > (uint64_t)a2)
          {
            v26 = &v24[16 * a2 + 3];
            do
            {
              *(_OWORD *)v26 = *(_OWORD *)&v24[16 * v9 + 3];
              v26 += 16;
              --v25;
            }
            while (v25);
          }
          v27 = (char *)a3[1] - (char *)v24;
        }
        v40 = v27 >> 7;
        goto LABEL_41;
      }
      return v6;
    }
  }
LABEL_35:
  if (v21 <= *(int *)(a1 + 104))
    return 0;
  v41 = *(_QWORD *)(a1 + 48);
  if (v41 != -1)
  {
    if (v41 <= v42)
      v40 = v42;
    else
      v40 = v41;
    *(_QWORD *)(a1 + 48) = v40;
LABEL_41:
    if (v40 >= v6)
      return v6;
    else
      return v40;
  }
  v43 = 0.0;
  if ((unint64_t)v20 >= 0x81)
  {
    if (v21 <= 2)
      v21 = 2;
    v46 = *v19;
    v45 = v19[1];
    v44 = v19 + 17;
    v47 = v21 - 1;
    do
    {
      v48 = *(v44 - 1);
      v49 = *v44;
      v43 = v43 + sqrt((*v44 - v45) * (*v44 - v45) + (v48 - v46) * (v48 - v46));
      v44 += 16;
      v45 = v49;
      v46 = v48;
      --v47;
    }
    while (v47);
  }
  if (v43 <= *(double *)(a1 + 112) * 1.25)
    return 0;
  *(_QWORD *)(a1 + 48) = result;
  if (result >= v6)
    return v6;
  return result;
}

void sub_1BE49AE8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::backtrack(_QWORD *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  double *v7;

  v4 = (a2 << 7) | 8;
  v5 = 0.0;
  do
  {
    v6 = -1;
    if (a2 < 1)
      break;
    if (a2 < a3)
      break;
    v6 = a2 - 1;
    if (a2 == 1)
      break;
    v7 = (double *)(*a1 + v4);
    v4 -= 128;
    v5 = v5 + sqrt((*v7 - *(v7 - 16)) * (*v7 - *(v7 - 16)) + (*(v7 - 1) - *(v7 - 17)) * (*(v7 - 1) - *(v7 - 17)));
  }
  while (v5 <= a4 && a3 + 1 != a2--);
  return v6;
}

void PKStartHookFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = a3 == 0;
}

uint64_t PKStartHookFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  char *v24;

  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32) + a2);
  if (!*(_BYTE *)(a1 + 40))
    return (v5 - *(_QWORD *)(a1 + 32)) & ~((v5 - *(_QWORD *)(a1 + 32)) >> 63);
  v6 = *(double **)a3;
  v7 = *(char **)(a3 + 8);
  v8 = (uint64_t)&v7[-*(_QWORD *)a3];
  if ((unint64_t)v8 >= 0x180)
  {
    v9 = 2;
    if ((unint64_t)(v8 >> 7) > 2)
      v9 = v8 >> 7;
    v10 = 0.0;
    v11 = -1;
    v12 = 1;
    v13 = 27;
    do
    {
      v10 = v10 + v6[v13];
      v14 = v10 / *(double *)(a1 + 24);
      v15 = v11 != -1 || v14 <= 6.0;
      if (!v15)
        v11 = v12;
      ++v12;
      v13 += 16;
    }
    while (v9 != v12);
    if (v14 >= 24.0 && v11 != -1 && (v8 >> 7) - 2 > (unint64_t)v11)
    {
      v17 = v11;
      *(_BYTE *)(a1 + 40) = 0;
      if (v6[16 * (uint64_t)v11 + 8] - v6[8] <= 0.1)
      {
        v18 = (uint64_t)v11 << 7;
        while (1)
        {
          v15 = v17-- < 1;
          if (v15)
            break;
          v19 = *(double *)((char *)v6 + v18);
          v20 = *(double *)((char *)v6 + v18 + 8);
          v21 = *(double *)((char *)v6 + v18 - 128) - v19;
          v22 = *(double *)((char *)v6 + v18 - 120) - v20;
          v23 = (v22 * (*(double *)((char *)v6 + v18 + 136) - v20) + v21 * (*(double *)((char *)v6 + v18 + 128) - v19))
              / (sqrt(v22 * v22 + v21 * v21)
               * sqrt((*(double *)((char *)v6 + v18 + 136) - v20) * (*(double *)((char *)v6 + v18 + 136) - v20)+ (*(double *)((char *)v6 + v18 + 128) - v19) * (*(double *)((char *)v6 + v18 + 128) - v19)));
          if (v23 < -1.0)
            v23 = -1.0;
          if (v23 > 1.0)
            v23 = 1.0;
          v18 -= 128;
          if (acos(v23) * 57.2957795 < 150.0)
          {
            *(_QWORD *)(a1 + 32) = v17 + 1;
            v24 = (char *)v6 + v18 + 128;
            if (v24 != v7)
              memmove(v6, v24, v8 - v18 - 128);
            *(_QWORD *)(a3 + 8) = (char *)v6 + v8 - v18 - 128;
            return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t PKStartHookFilter::reset(PKStartHookFilter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 4) = 0;
  return result;
}

void PKEndHookFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 40) = a3 == 0;
}

int64_t PKEndHookFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  int64_t v20;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v28;
  unint64_t v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  long double v36;
  unint64_t v37;
  uint64_t v38;

  v5 = a2 - ((a3[1] - *a3) >> 7);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v7 = v6;
  if (!*(_BYTE *)(a1 + 40))
  {
    v20 = *(_QWORD *)(a1 + 32);
    if (v20 > v5 && v20 < (unint64_t)(v5 + ((a3[1] - *a3) >> 7)))
    {
      std::vector<PKInputPoint>::resize((uint64_t)a3, v20 - v5);
      v20 = *(_QWORD *)(a1 + 32);
    }
LABEL_19:
    if (v7 >= v20)
      return v20;
    else
      return v7;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    v8 = *a3;
    v9 = a3[1];
    v10 = v9 - *a3;
    v11 = v10 >> 7;
    if ((unint64_t)v10 >= 0x180)
    {
      v12 = *(double *)(a1 + 24);
      v13 = v11 - 2;
      v14 = 2;
      if (v11 > 2)
        v14 = v11;
      v15 = v14 - 2;
      v16 = (double *)(v8 + 216);
      v17 = 0.0;
      do
      {
        v18 = *v16;
        v16 += 16;
        v17 = v17 + v18;
      }
      while (v17 / v12 < 24.0 && v15-- != 0);
      if (v17 / v12 >= 24.0)
      {
        v24 = v11 - 1;
        v25 = 2;
        if (v13 < 2)
          v25 = v11 - 2;
        v26 = (double *)(v8 + (v11 << 7) - 40);
        v27 = 0.0;
        while ((uint64_t)--v24 >= 3)
        {
          if (*(double *)(v8 + ((v11 - 1) << 7) + 64) - *(v26 - 19) > 0.1)
            goto LABEL_13;
          v28 = *v26;
          v26 -= 16;
          v27 = v27 + v28;
          if (v27 / v12 > 6.0)
            goto LABEL_33;
        }
        v24 = v25;
        if (v25 < 1)
          goto LABEL_13;
LABEL_33:
        if (v24 <= v13)
          v29 = v11 - 2;
        else
          v29 = v24;
        v30 = (double *)(v8 + (v24 << 7) + 8);
        while (v29 != v24)
        {
          ++v24;
          v31 = v30 + 16;
          v32 = *(v30 - 1);
          v33 = v30[15] - v32;
          v34 = v30[16] - *v30;
          v35 = (v34 * (*(v30 - 16) - *v30) + v33 * (*(v30 - 17) - v32))
              / (sqrt(v34 * v34 + v33 * v33)
               * sqrt((*(v30 - 16) - *v30) * (*(v30 - 16) - *v30) + (*(v30 - 17) - v32) * (*(v30 - 17) - v32)));
          if (v35 < -1.0)
            v35 = -1.0;
          if (v35 > 1.0)
            v35 = 1.0;
          v36 = acos(v35);
          v30 = v31;
          if (v36 * 57.2957795 < 150.0)
          {
            if (v11 != v24 && (uint64_t)(v11 - v24) >= 1)
            {
              v37 = ~v24 + v11;
              if (v37 >= 7)
                v37 = 7;
              v38 = v9 - (v37 << 7) - 128;
              a3[1] = v38;
              v11 = (v38 - v8) >> 7;
            }
            break;
          }
        }
      }
    }
LABEL_13:
    v20 = v11 + v5;
    *(_QWORD *)(a1 + 32) = v11 + v5;
    goto LABEL_19;
  }
  v23 = 8;
  if (v6 > 8)
    v23 = v6;
  return v23 - 8;
}

uint64_t PKEndHookFilter::reset(PKEndHookFilter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 4) = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

void PKVelocityCalculationFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char v12;
  id v13;

  v13 = a2;
  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, v13, a3, a4);
  objc_msgSend(v13, "behavior");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "smoothingDescriptor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "velocitySmoothing");
  *(_QWORD *)(a1 + 32) = v9;

  objc_msgSend(v13, "behavior");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = objc_msgSend(v10, "isEraser");
  else
    v12 = 0;
  *(_BYTE *)(a1 + 40) = v12;

}

void sub_1BE49B508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

unint64_t PKVelocityCalculationFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  unint64_t v33;

  v7 = *a3;
  v6 = a3[1];
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v10 = *a3;
  v9 = a3[1];
  v11 = v9 - *a3;
  if (v9 != *a3)
  {
    v12 = (v6 - v7) >> 7;
    v13 = v11 >> 7;
    if (v12 >= v11 >> 7)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v15 = *(double *)(a1 + 32);
      v16 = v10 + (v12 << 7);
      v17 = (double *)(v16 + 64);
      v18 = (double *)(v16 + 192);
      v19 = (v6 - v7) >> 7;
      do
      {
        v20 = *(double *)(v10 + (v19 << 7) + 64);
        v21 = v20 - v15;
        if (v19 < 0)
        {
          v23 = 0.0;
        }
        else if (v19)
        {
          v22 = 0;
          v23 = 0.0;
          v24 = v17;
          while (1)
          {
            v25 = *(v24 - 16);
            v26 = v24[3];
            if (v25 <= v21)
              break;
            v23 = v23 + v26;
            ++v22;
            v24 -= 16;
            if (v19 == v22)
              goto LABEL_12;
          }
          v23 = v23 + v26 * (*v24 - v21) / (*v24 - v25);
        }
        else
        {
          v23 = 0.0;
LABEL_12:
          v21 = *(double *)(v10 + 64);
        }
        if (v19 == v13 - 1)
        {
LABEL_18:
          v27 = *(double *)(v10 + ((v13 - 1) << 7) + 64);
        }
        else
        {
          v27 = v15 + v20;
          v28 = v13 - 1;
          v29 = v18;
          while (1)
          {
            v30 = v29[3];
            if (*v29 >= v27)
              break;
            v23 = v23 + v30;
            v29 += 16;
            if (v19 == --v28)
              goto LABEL_18;
          }
          v23 = v23 + v30 * (v27 - *(v29 - 16)) / (*v29 - *(v29 - 16));
          v14 = v19;
        }
        v31 = v27 - v21;
        v32 = 0.0;
        if (v31 > 0.0)
          v32 = v23 / v31 / *(double *)(a1 + 24);
        *(double *)(v10 + (v19++ << 7) + 40) = v32;
        v17 += 16;
        v18 += 16;
      }
      while (v19 != v13);
    }
    if (!*(_BYTE *)(a1 + 16) && !*(_BYTE *)(a1 + 40))
    {
      v33 = v12 - a2 + v14;
      if (result >= v33)
        return v33;
    }
  }
  return result;
}

void PKDirectionAngleCalculationFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, v10, a3, a4);
  objc_msgSend(v10, "behavior");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "smoothingDescriptor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "angleSmoothing");
  *(_QWORD *)(a1 + 32) = v9;

}

void sub_1BE49B77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

unint64_t PKDirectionAngleCalculationFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id WeakRetained;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  double *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  unint64_t v28;
  double v29;
  double v30;
  double v31;

  v6 = *a3;
  v5 = a3[1];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v8 = a3[1];
  v9 = v8 - *a3;
  if (v8 != *a3 && *(double *)(a1 + 32) > 0.0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v11 = objc_msgSend(WeakRetained, "isPreviewing");
    v12 = (v5 - v6) >> 7;
    v13 = v9 >> 7;

    if ((v11 & 1) != 0)
    {
      v14 = v13 - v12;
      if (v13 > v12)
      {
        v15 = (_QWORD *)(*a3 + (v12 << 7) + 48);
        do
        {
          *v15 = 0x3FF921FB54442D18;
          v15 += 16;
          --v14;
        }
        while (v14);
      }
    }
    else if (v13 > v12)
    {
      v16 = *(double *)(a1 + 32);
      v17 = *a3;
      v18 = (double *)(*a3 + (v12 << 7) + 48);
      do
      {
        v19 = a3[1];
        v20 = PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint,double PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint>(double,double,std::vector<PKInputPoint> const&)::{lambda(double,double,double)#1}>(v17, v19, (double)v12, -v16);
        v21 = PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint,double PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint>(double,double,std::vector<PKInputPoint> const&)::{lambda(double,double,double)#1}>(v17, v19, (double)v12, v16);
        *(_QWORD *)&v22 = *(_OWORD *)&PKPropertySmootherFilter::propertyAt<PKInputPoint,CGPoint PKPropertySmootherFilter::locationAt<PKInputPoint>(double,std::vector<PKInputPoint> const&)::{lambda(PKInputPoint)#1},CGPoint>(v17, v19, v20);
        v24 = v23;
        *(_QWORD *)&v25 = *(_OWORD *)&PKPropertySmootherFilter::propertyAt<PKInputPoint,CGPoint PKPropertySmootherFilter::locationAt<PKInputPoint>(double,std::vector<PKInputPoint> const&)::{lambda(PKInputPoint)#1},CGPoint>(v17, v19, v21);
        v27 = v26;
        if (v7 >= v12)
          v28 = v12;
        else
          v28 = v7;
        if (v21 >= (double)(v13 - 1))
          v7 = v28;
        v29 = v22 - v25;
        v30 = v24 - v27;
        if (v30 * v30 + v29 * v29 <= 0.1)
        {
          v31 = -6.37045177;
          if (v12 >= 1)
            v31 = *(v18 - 16);
        }
        else
        {
          v31 = 3.14159265 - atan2(-v30, v29);
        }
        *v18 = v31;
        v18 += 16;
        ++v12;
      }
      while (v13 != v12);
    }
  }
  return v7;
}

void sub_1BE49B998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint,double PKPropertySmootherFilter::stepDistanceFrom<PKInputPoint>(double,double,std::vector<PKInputPoint> const&)::{lambda(double,double,double)#1}>(uint64_t a1, uint64_t a2, double result, double a4)
{
  _BOOL8 v4;
  double v5;
  BOOL v6;
  uint64_t v7;
  double v8;
  double *v9;
  double v10;
  double v11;
  BOOL v12;
  uint64_t v13;
  _BOOL4 v14;
  double v15;

  v4 = a4 >= 0.0;
  v5 = -a4;
  if (a4 < 0.0)
  {
    v6 = result <= 0.0;
  }
  else
  {
    v5 = a4;
    v6 = 0;
  }
  if (!v6 && v5 > 0.0)
  {
    while (1)
    {
      v7 = (uint64_t)result;
      v8 = result - (double)(uint64_t)result;
      if (a4 < 0.0 && v8 == 0.0)
      {
        v6 = v7-- < 1;
        if (v6)
          return result;
        v8 = 1.0;
      }
      if (v7 + 1 >= (a2 - a1) >> 7)
        break;
      v9 = (double *)(a1 + ((v7 + 1) << 7));
      v10 = sqrt((*(double *)(a1 + (v7 << 7) + 8) - v9[1]) * (*(double *)(a1 + (v7 << 7) + 8) - v9[1])+ (*(double *)(a1 + (v7 << 7)) - *v9) * (*(double *)(a1 + (v7 << 7)) - *v9));
      if (a4 >= 0.0)
        v8 = 1.0 - v8;
      v11 = v8 * v10;
      if (v11 > v5)
      {
        if (a4 >= 0.0)
          v15 = v5;
        else
          v15 = -v5;
        return result + v15 / v10;
      }
      v12 = __OFADD__(v7, v4);
      v13 = v7 + v4;
      result = (double)v13;
      if ((v13 < 0) ^ v12 | (v13 == 0))
        v14 = a4 >= 0.0;
      else
        v14 = 1;
      if (v14)
      {
        v5 = v5 - v11;
        if (v5 > 0.0)
          continue;
      }
      return result;
    }
  }
  return result;
}

float64x2_t PKPropertySmootherFilter::propertyAt<PKInputPoint,CGPoint PKPropertySmootherFilter::locationAt<PKInputPoint>(double,std::vector<PKInputPoint> const&)::{lambda(PKInputPoint)#1},CGPoint>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  double v4;
  float64x2_t result;
  unint64_t v6;

  v3 = (uint64_t)a3;
  v4 = a3 - (double)(uint64_t)a3;
  result = *(float64x2_t *)(a1 + ((uint64_t)a3 << 7));
  if (v4 > 0.0)
  {
    v6 = v3 + 1;
    if (v6 < (a2 - a1) >> 7)
      return vaddq_f64(result, vmulq_n_f64(vsubq_f64(*(float64x2_t *)(a1 + (v6 << 7)), result), v4));
  }
  return result;
}

double PKAzimuthFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  double result;

  PKInputBaseFilter<PKInputPoint,PKInputPoint>::drawingBeganWithInk(a1, a2, a3, a4);
  *(_QWORD *)(a1 + 104) = a3;
  *(_WORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 88) = xmmword_1BE4FEBC0;
  return result;
}

double PKAzimuthFilter::reset(PKAzimuthFilter *this)
{
  uint64_t v2;
  double result;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 80) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 88) = xmmword_1BE4FEBC0;
  return result;
}

uint64_t PKInputOneToOneFilter<PKInputPoint>::outputVector(uint64_t a1)
{
  return a1 + 48;
}

void PKAzimuthFilter::run(PKAzimuthFilter *this)
{
  id WeakRetained;
  uint64_t v3;
  id v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  long double v14;
  double v15;
  double v16;
  double v17;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;

  if (*((_QWORD *)this + 7) - *((_QWORD *)this + 6) < 0x100uLL)
    return;
  v3 = *((_QWORD *)this + 13);
  if (v3 == 1)
  {
    WeakRetained = objc_loadWeakRetained((id *)this + 14);
    if ((objc_msgSend(WeakRetained, "activeInputProperties") & 1) != 0)
    {
      v5 = 0;
      goto LABEL_7;
    }
  }
  v4 = objc_loadWeakRetained((id *)this + 14);
  v5 = objc_msgSend(v4, "isSnappedToRuler") ^ 1;

  if (v3 == 1)
LABEL_7:

  v6 = *((_QWORD *)this + 11);
  if (!*((_BYTE *)this + 81))
  {
    v8 = (double *)*((_QWORD *)this + 6);
    v7 = *((_QWORD *)this + 7);
    v9 = *(double *)(v7 - 128) - *v8;
    v10 = *(double *)(v7 - 120) - v8[1];
    v11 = sqrt(v10 * v10 + v9 * v9) / *((double *)this + 3);
    if (*((_BYTE *)this + 80))
    {
      v12 = *((unsigned __int8 *)this + 16);
    }
    else
    {
      v13 = atan2(-v9, v10);
      v14 = *((double *)this + 12);
      DKDDiffAngleInRadians(v14, v13);
      if (v15 < 0.0)
        v15 = -v15;
      if (v15 > 1.57079633)
      {
        v16 = v13 + 3.14159265;
        v17 = fmod(v16, 6.28318531);
        if (v16 <= 6.28318531 && v16 >= 0.0)
          v17 = v16;
        if (v17 < 0.0)
          v17 = v17 + 6.28318531;
        if (v17 == 0.0)
          v13 = 0.0;
        else
          v13 = v17;
      }
      *((double *)this + 11) = v13;
      v19 = 20.0;
      if (*((_QWORD *)this + 13) == 1)
        v19 = 7.0;
      v12 = *((unsigned __int8 *)this + 16);
      if (*((_BYTE *)this + 16) || v11 > v19)
      {
        *((_BYTE *)this + 80) = 1;
      }
      else
      {
        v20 = (v11 + -3.0) / (v19 + -3.0);
        v21 = 0.0;
        if (v20 >= 0.0)
        {
          v21 = v20;
          if (v20 > 1.0)
            v21 = 1.0;
        }
        DKDMixAnglesInRadians(v14, v13, v21);
        v6 = v22;
        v12 = 0;
      }
    }
    v23 = 1;
    if (!v12 && v11 <= 20.0)
      goto LABEL_37;
    *((_BYTE *)this + 81) = 1;
  }
  v23 = 0;
LABEL_37:
  if (v5)
  {
    v24 = *((_QWORD *)this + 9);
    v25 = *((_QWORD *)this + 6);
    v26 = (*((_QWORD *)this + 7) - v25) >> 7;
    v27 = v26 <= v24;
    v28 = v26 - v24;
    if (!v27)
    {
      v29 = (_QWORD *)(v25 + (v24 << 7) + 24);
      do
      {
        *v29 = v6;
        v29 += 16;
        --v28;
      }
      while (v28);
    }
  }
  if ((v23 & 1) == 0)
    *((_QWORD *)this + 9) = *((_QWORD *)this + 4);
}

void sub_1BE49BDAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKInputBaseFilter<PKInputPoint,_PKStrokePoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void (***v7)(_QWORD, id, uint64_t, double);
  id v8;

  v8 = a2;
  v7 = *(void (****)(_QWORD, id, uint64_t, double))(a1 + 8);
  if (v7)
    (**v7)(v7, v8, a3, a4);
  *(double *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 16) = 0;

}

void sub_1BE49BE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<PKInputPoint,_PKStrokePoint>::drawingEnded(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t PKInputBufferedFilter<PKInputPoint,_PKStrokePoint>::copyUpdatedRangeFromIndex(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

_QWORD *PKInputFilter<PKInputPoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<PKInputPoint,_PKStrokePoint>::fetchInput(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::vector<PKInputPoint>::resize(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t PKInputFilter<PKInputPoint,_PKStrokePoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

void PKInputToOutputFilter::run(PKInputToOutputFilter *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v2 = (_QWORD *)((char *)this + 80);
  std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 7);
  v3 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 7;
  v4 = *((_QWORD *)this + 9);
  v5 = v3 - v4;
  if (v3 > v4)
  {
    v6 = 88 * v4;
    v7 = v4 << 7;
    do
    {
      WeakRetained = objc_loadWeakRetained((id *)this + 13);
      v9 = WeakRetained;
      v10 = (__int128 *)(*((_QWORD *)this + 6) + v7);
      v11 = v10[3];
      v13 = *v10;
      v12 = v10[1];
      v22[2] = v10[2];
      v22[3] = v11;
      v22[0] = v13;
      v22[1] = v12;
      v14 = v10[7];
      v16 = v10[4];
      v15 = v10[5];
      v22[6] = v10[6];
      v22[7] = v14;
      v22[4] = v16;
      v22[5] = v15;
      if (WeakRetained)
      {
        objc_msgSend(WeakRetained, "outputCurrentStrokePoint:", v22);
      }
      else
      {
        v28 = 0;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
      }
      v17 = *v2 + v6;
      v18 = v24;
      *(_OWORD *)v17 = v23;
      *(_OWORD *)(v17 + 16) = v18;
      v19 = v25;
      v20 = v26;
      v21 = v27;
      *(_QWORD *)(v17 + 80) = v28;
      *(_OWORD *)(v17 + 48) = v20;
      *(_OWORD *)(v17 + 64) = v21;
      *(_OWORD *)(v17 + 32) = v19;

      v6 += 88;
      v7 += 128;
      --v5;
    }
    while (v5);
  }
  *((_QWORD *)this + 9) = *((_QWORD *)this + 4);
}

void sub_1BE49C0DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t PKInputFilter<PKInputPoint,_PKStrokePoint>::complete()
{
  return 0;
}

uint64_t PKInputBufferedFilter<PKInputPoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void PKStartCapsFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;

  v20 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v20, a3, a4);
  if (a3 == 1)
  {
    objc_msgSend(v20, "behavior");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "pencilFeatheringDescriptor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(v20, "behavior");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "pencilFeatheringDescriptor");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "startCapTime");
      *(_QWORD *)(a1 + 32) = v19;

      objc_msgSend(v20, "behavior");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "pencilFeatheringDescriptor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "startCapFade");
      goto LABEL_7;
    }
  }
  else if (!a3)
  {
    objc_msgSend(v20, "behavior");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "featheringDescriptor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v20, "behavior");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "featheringDescriptor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "startCapTime");
      *(_QWORD *)(a1 + 32) = v11;

      objc_msgSend(v20, "behavior");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "featheringDescriptor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "startCapFade");
LABEL_7:
      *(_QWORD *)(a1 + 40) = v14;

    }
  }

}

void sub_1BE49C29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t PKStartCapsFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  double *v16;
  double v17;

  v7 = *(_QWORD **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (!a2 && *(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
    *(_QWORD *)(a1 + 48) = **(_QWORD **)a3;
  v9 = *(double *)(a1 + 32);
  if (v9 > 0.0)
  {
    v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v10)
    {
      v11 = (v6 - (uint64_t)v7) / 88;
      v12 = v10 / 88;
      v13 = v12 <= v11;
      v14 = v12 - v11;
      if (!v13)
      {
        v15 = *(double *)(a1 + 48);
        v16 = (double *)(*(_QWORD *)a3 + 88 * v11 + 72);
        do
        {
          v17 = *(v16 - 9) - v15;
          if (v17 < v9)
            *v16 = *v16 * (1.0 - *(double *)(a1 + 40) * (1.0 - v17 / v9));
          v16 += 11;
          --v14;
        }
        while (v14);
      }
    }
  }
  return result;
}

uint64_t PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

void PKAnimationFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;

  v15 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v15, a3, a4);
  objc_msgSend(v15, "behavior");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "animationDescriptor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    objc_msgSend(v15, "behavior");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "animationDescriptor");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "duration");
    *(_QWORD *)(a1 + 32) = v11;

    objc_msgSend(v15, "behavior");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "animationDescriptor");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "sizeDelta");
    *(_QWORD *)(a1 + 40) = v14;

  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }

}

void sub_1BE49C508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t PKAnimationFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id WeakRetained;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double *v15;
  double v16;

  v6 = *a3;
  v5 = a3[1];
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (*(double *)(a1 + 32) > 0.0 && a3[1] != *a3)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v9 = objc_msgSend(WeakRetained, "isPreviewing");

    if ((v9 & 1) == 0)
    {
      v10 = 0x2E8BA2E8BA2E8BA3 * ((v5 - v6) >> 3);
      v11 = a3[1];
      v12 = *(_BYTE *)(a1 + 16) ? 1.79769313e308 : *(double *)(v11 - 88);
      v13 = 0x2E8BA2E8BA2E8BA3 * ((v11 - *a3) >> 3);
      if (v13 > v10)
      {
        v14 = *(double *)(a1 + 32);
        v15 = (double *)(*a3 + 88 * v13 - 88);
        do
        {
          v16 = fmax((v12 - *v15) / v14, 0.0);
          if (v16 >= 1.0)
            break;
          --v13;
          v15[3] = v15[3] * (v16 + (*(double *)(a1 + 40) + 1.0) * (1.0 - v16));
          if (v7 >= v13)
            v7 = v13;
          v15 -= 11;
        }
        while (v13 > v10);
      }
    }
  }
  return v7;
}

void sub_1BE49C68C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PKPropertySmootherFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  double v9;
  double v10;
  double v11;
  int v12;
  id WeakRetained;
  char v14;
  id v15;

  v15 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v15, a3, a4);
  objc_msgSend(v15, "behavior");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "smoothingDescriptor");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "radiusSmoothing");
  v10 = v9;
  objc_msgSend(v15, "weight");
  *(double *)(a1 + 104) = v10 * v11;

  *(_QWORD *)(a1 + 112) = 0;
  v12 = objc_msgSend(v15, "_isFountainPenInkV2") ^ 1;
  if (a3 != 1)
    LOBYTE(v12) = 1;
  if ((v12 & 1) == 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 120));
    v14 = objc_msgSend(WeakRetained, "isPreviewing");

    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
  }

}

void sub_1BE49C774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t PKPropertySmootherFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(double *)(a1 + 104) <= 0.0 && *(double *)(a1 + 112) <= 0.0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  else
    return PKInputBufferedFilter<_PKStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex((_QWORD *)a1, a2, a3);
}

void PKPropertySmootherFilter::run(PKPropertySmootherFilter *this)
{
  char *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  uint64_t i;
  double v17;
  uint64_t j;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t k;
  double v27;
  uint64_t m;
  uint64_t v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v35;
  uint64_t v36;
  double v37;
  double v38;
  char *v39;
  double v40;
  double v41;
  double *v42;
  double v43;
  char *v44;
  double v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 48;
  v3 = (_QWORD *)((char *)this + 80);
  std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  v4 = *((_QWORD *)v2 - 2);
  v5 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3);
  v6 = *((_QWORD *)v2 + 3);
  if (v6 < v5)
  {
    v7 = *((double *)v2 + 7) / 7.0;
    v8 = *((double *)v2 + 8) / 7.0;
    v35 = (double)(v5 - 1);
    v36 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)v2 + 1) - *(_QWORD *)v2) >> 3);
    do
    {
      v9 = *(_QWORD *)v2 + 88 * v6;
      v10 = *v3 + 88 * v6;
      v12 = *(_OWORD *)(v9 + 48);
      v11 = *(_OWORD *)(v9 + 64);
      v13 = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v10 + 80) = *(_QWORD *)(v9 + 80);
      *(_OWORD *)(v10 + 48) = v12;
      *(_OWORD *)(v10 + 64) = v11;
      *(_OWORD *)(v10 + 32) = v13;
      v14 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)v10 = *(_OWORD *)v9;
      *(_OWORD *)(v10 + 16) = v14;
      if (v7 > 0.0)
      {
        v37 = 0.0;
        v42 = &v37;
        v43 = v7 * -0.5;
        v44 = v2;
        PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRadiusFrom(double &,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v42, (double)v6, v7 * -0.5);
        v45 = v37 * 0.5;
        for (i = 2; i != -1; --i)
        {
          v41 = 0.0;
          v37 = COERCE_DOUBLE(&v41);
          v38 = -v7;
          v39 = v2;
          PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRadiusFrom(double &,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, v15, -v7);
          *(double *)&(&v42)[i] = v41;
        }
        v41 = 0.0;
        v37 = COERCE_DOUBLE(&v41);
        v38 = v7 * 0.5;
        v39 = v2;
        PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRadiusFrom(double &,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, (double)v6, v7 * 0.5);
        v45 = v45 + v41 * 0.5;
        for (j = 4; j != 7; ++j)
        {
          v41 = 0.0;
          v37 = COERCE_DOUBLE(&v41);
          v38 = v7;
          v39 = v2;
          PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRadiusFrom(double &,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, v17, v7);
          *(double *)&(&v42)[j] = v41;
        }
        v19 = 0;
        v20 = 0.0;
        do
        {
          v20 = v20 + *(double *)&PKPropertySmootherFilter::run(void)::smoothingKernel[v19] * *(double *)&(&v42)[v19];
          ++v19;
        }
        while (v19 != 7);
        if (v4 >= v6)
          v21 = v6;
        else
          v21 = v4;
        if (v17 >= v35)
          v4 = v21;
        *(double *)(*v3 + 88 * v6 + 24) = v20;
        v5 = v36;
      }
      if (v8 > 0.0)
      {
        v22 = *((_QWORD *)this + 6);
        v23 = *((_QWORD *)this + 7);
        v24 = *(double *)(v22 + 88 * v6 + 56);
        v37 = 0.0;
        v42 = &v37;
        v43 = v8 * -0.5;
        v44 = v2;
        v45 = v24;
        v25 = PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRelativeAzimuthFrom(double &,double,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(v22, v23, (uint64_t)&v42, (double)v6, v8 * -0.5);
        v45 = v37 * 0.5;
        for (k = 2; k != -1; --k)
        {
          v41 = 0.0;
          v37 = COERCE_DOUBLE(&v41);
          v38 = -v8;
          v39 = v2;
          v40 = v24;
          v25 = PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRelativeAzimuthFrom(double &,double,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, v25, -v8);
          *(double *)&(&v42)[k] = v41;
        }
        v41 = 0.0;
        v37 = COERCE_DOUBLE(&v41);
        v38 = v8 * 0.5;
        v39 = v2;
        v40 = v24;
        v27 = PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRelativeAzimuthFrom(double &,double,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, (double)v6, v8 * 0.5);
        v45 = v45 + v41 * 0.5;
        for (m = 4; m != 7; ++m)
        {
          v41 = 0.0;
          v37 = COERCE_DOUBLE(&v41);
          v38 = v8;
          v39 = v2;
          v40 = v24;
          v27 = PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRelativeAzimuthFrom(double &,double,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(*((_QWORD *)this + 6), *((_QWORD *)this + 7), (uint64_t)&v37, v27, v8);
          *(double *)&(&v42)[m] = v41;
        }
        v29 = 0;
        v30 = 0.0;
        do
        {
          v30 = v30 + *(double *)&PKPropertySmootherFilter::run(void)::smoothingKernel[v29] * *(double *)&(&v42)[v29];
          ++v29;
        }
        while (v29 != 7);
        if (v4 >= v6)
          v31 = v6;
        else
          v31 = v4;
        if (v27 >= v35)
          v4 = v31;
        v32 = v24 + v30;
        v33 = fmod(v24 + v30, 6.28318531);
        if (v32 <= 6.28318531 && v32 >= 0.0)
          v33 = v32;
        if (v33 < 0.0)
          v33 = v33 + 6.28318531;
        if (v33 == 0.0)
          v33 = 0.0;
        *(double *)(*v3 + 88 * v6 + 56) = v33;
        v5 = v36;
      }
      ++v6;
    }
    while (v6 != v5);
  }
  *((_QWORD *)this + 9) = v4;
}

uint64_t PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRadiusFrom(double &,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(uint64_t result, uint64_t a2, uint64_t a3, double a4, double a5)
{
  _BOOL8 v5;
  double v6;
  BOOL v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  _BOOL4 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  unint64_t v38;

  v5 = a5 >= 0.0;
  v6 = -a5;
  if (a5 < 0.0)
  {
    v7 = a4 <= 0.0;
  }
  else
  {
    v6 = a5;
    v7 = 0;
  }
  if (!v7 && v6 > 0.0)
  {
    do
    {
      v8 = (uint64_t)a4;
      v9 = a4 - (double)(uint64_t)a4;
      v10 = v9;
      v11 = (uint64_t)a4;
      if (a5 < 0.0)
      {
        v10 = a4 - (double)(uint64_t)a4;
        v11 = (uint64_t)a4;
        if (v9 == 0.0)
        {
          v11 = v8 - 1;
          if (v8 < 1)
            break;
          v10 = 1.0;
        }
      }
      if (v11 + 1 >= 0x2E8BA2E8BA2E8BA3 * ((a2 - result) >> 3))
        break;
      v12 = result + 88 * v11;
      v13 = result + 88 * (v11 + 1);
      v14 = sqrt((*(double *)(v12 + 16) - *(double *)(v13 + 16)) * (*(double *)(v12 + 16) - *(double *)(v13 + 16))+ (*(double *)(v12 + 8) - *(double *)(v13 + 8)) * (*(double *)(v12 + 8) - *(double *)(v13 + 8)));
      if (a5 >= 0.0)
        v10 = 1.0 - v10;
      v15 = v10 * v14;
      if (v15 > v6)
      {
        if (a5 >= 0.0)
          v30 = v6;
        else
          v30 = -v6;
        a4 = a4 + v30 / v14;
        v31 = *(double *)(a3 + 8);
        if (v31 < 0.0)
          v31 = -v31;
        v29 = v6 / v31;
        goto LABEL_37;
      }
      v16 = *(double *)(a3 + 8);
      v17 = -v16;
      if (v16 >= 0.0)
        v17 = *(double *)(a3 + 8);
      v18 = *(uint64_t **)(a3 + 16);
      v19 = *v18;
      v20 = v18[1];
      v21 = *(double *)(v19 + 88 * v8 + 24);
      if (v9 > 0.0)
      {
        v22 = v8 + 1;
        if (v22 < 0x2E8BA2E8BA2E8BA3 * ((v20 - v19) >> 3))
          v21 = v21 + (*(double *)(v19 + 88 * v22 + 24) - v21) * v9;
      }
      v23 = v11 + v5;
      a4 = (double)(v11 + v5);
      v24 = a4 - (double)(uint64_t)a4;
      v25 = *(double *)(v19 + 88 * (uint64_t)a4 + 24);
      if (v24 > 0.0)
      {
        v26 = (uint64_t)a4 + 1;
        if (v26 < 0x2E8BA2E8BA2E8BA3 * ((v20 - v19) >> 3))
          v25 = v25 + (*(double *)(v19 + 88 * v26 + 24) - v25) * v24;
      }
      **(double **)a3 = **(double **)a3 + v15 / v17 * (v21 + v25) * 0.5;
      v6 = v6 - v15;
      v27 = v23 > 0 || a5 >= 0.0;
    }
    while (v27 && v6 > 0.0);
  }
  if (v6 > 0.0)
  {
    v28 = *(double *)(a3 + 8);
    if (v28 < 0.0)
      v28 = -v28;
    v29 = v6 / v28;
    v8 = (uint64_t)a4;
    v9 = a4 - (double)(uint64_t)a4;
LABEL_37:
    v32 = *(uint64_t **)(a3 + 16);
    v33 = *v32;
    v34 = v32[1];
    v35 = *(double *)(v33 + 88 * v8 + 24);
    if (v9 > 0.0 && v8 + 1 < (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v34 - v33) >> 3)))
      v35 = v35 + (*(double *)(v33 + 88 * (v8 + 1) + 24) - v35) * v9;
    v36 = a4 - (double)(uint64_t)a4;
    v37 = *(double *)(v33 + 88 * (uint64_t)a4 + 24);
    if (v36 > 0.0)
    {
      v38 = (uint64_t)a4 + 1;
      if (v38 < 0x2E8BA2E8BA2E8BA3 * ((v34 - v33) >> 3))
        v37 = v37 + (*(double *)(v33 + 88 * v38 + 24) - v37) * v36;
    }
    **(double **)a3 = **(double **)a3 + v29 * (v35 + v37) * 0.5;
  }
  return result;
}

double PKPropertySmootherFilter::stepDistanceFrom<_PKStrokePoint,PKPropertySmootherFilter::integrateRelativeAzimuthFrom(double &,double,double,std::vector<_PKStrokePoint> const&)::{lambda(double,double,double)#1}>(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  BOOL v7;
  _BOOL8 v8;
  double v9;
  double v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  BOOL v30;
  double v31;
  double v32;
  long double v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t *v39;
  double v40;
  double v41;
  double v42;

  v7 = a5 < 0.0;
  v8 = a5 >= 0.0;
  v9 = -a5;
  if (v7)
    v10 = v9;
  else
    v10 = a5;
  v11 = v7 && a4 <= 0.0;
  if (!v11 && v10 > 0.0)
  {
    v13 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 3);
    while (1)
    {
      v14 = (uint64_t)a4;
      v15 = a4 - (double)(uint64_t)a4;
      if (a5 < 0.0 && v15 == 0.0)
      {
        v11 = v14-- < 1;
        if (v11)
          break;
        v15 = 1.0;
      }
      if (v14 + 1 >= v13)
        break;
      v16 = a1 + 88 * (v14 + 1);
      v17 = sqrt((*(double *)(a1 + 88 * v14 + 16) - *(double *)(v16 + 16))* (*(double *)(a1 + 88 * v14 + 16) - *(double *)(v16 + 16))+ (*(double *)(a1 + 88 * v14 + 8) - *(double *)(v16 + 8))* (*(double *)(a1 + 88 * v14 + 8) - *(double *)(v16 + 8)));
      if (a5 >= 0.0)
        v15 = 1.0 - v15;
      v18 = v15 * v17;
      if (v15 * v17 > v10)
      {
        v37 = -v10;
        if (a5 >= 0.0)
          v37 = v10;
        v20 = a4 + v37 / v17;
        v38 = *(double *)(a3 + 8);
        if (v38 < 0.0)
          v38 = -v38;
        v32 = v10 / v38;
        v33 = *(double *)(a3 + 24);
        v39 = *(uint64_t **)(a3 + 16);
        v35 = *v39;
        v36 = v39[1];
        goto LABEL_35;
      }
      v19 = v14 + v8;
      v20 = (double)(v14 + v8);
      v21 = *(double *)(a3 + 8);
      if (v21 < 0.0)
        v21 = -v21;
      v22 = v18 / v21;
      v23 = *(double *)(a3 + 24);
      v24 = *(uint64_t **)(a3 + 16);
      v25 = *v24;
      v26 = v24[1];
      PKPropertySmootherFilter::relativeAzimuthAt<_PKStrokePoint>(*v24, v26, a4, v23);
      v28 = v27;
      PKPropertySmootherFilter::relativeAzimuthAt<_PKStrokePoint>(v25, v26, v20, v23);
      **(double **)a3 = **(double **)a3 + v22 * (v28 + v29) * 0.5;
      v10 = v10 - v18;
      v30 = !v8;
      if (v19 >= 1)
        v30 = 0;
      if (!v30)
      {
        a4 = v20;
        if (v10 > 0.0)
          continue;
      }
      goto LABEL_26;
    }
  }
  v20 = a4;
LABEL_26:
  if (v10 > 0.0)
  {
    v31 = *(double *)(a3 + 8);
    if (v31 < 0.0)
      v31 = -v31;
    v32 = v10 / v31;
    v33 = *(double *)(a3 + 24);
    v34 = *(uint64_t **)(a3 + 16);
    v35 = *v34;
    v36 = v34[1];
    a4 = v20;
LABEL_35:
    PKPropertySmootherFilter::relativeAzimuthAt<_PKStrokePoint>(v35, v36, a4, v33);
    v41 = v40;
    PKPropertySmootherFilter::relativeAzimuthAt<_PKStrokePoint>(v35, v36, v20, v33);
    **(double **)a3 = **(double **)a3 + v32 * (v41 + v42) * 0.5;
  }
  return v20;
}

void PKPropertySmootherFilter::relativeAzimuthAt<_PKStrokePoint>(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  uint64_t v5;
  double v6;
  double v7;
  unint64_t v8;

  v5 = (uint64_t)a3;
  v6 = a3 - (double)(uint64_t)a3;
  v7 = *(double *)(a1 + 88 * v5 + 56);
  if (v6 > 0.0)
  {
    v8 = v5 + 1;
    if (v8 < 0x2E8BA2E8BA2E8BA3 * ((a2 - a1) >> 3))
      v7 = v7 + (*(double *)(a1 + 88 * v8 + 56) - v7) * v6;
  }
  DKDDiffAngleInRadians(a4, v7);
}

void PKEndCapsFilter::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;

  v20 = a2;
  PKInputBaseFilter<_PKStrokePoint,_PKStrokePoint>::drawingBeganWithInk(a1, v20, a3, a4);
  if (a3 == 1)
  {
    objc_msgSend(v20, "behavior");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "pencilFeatheringDescriptor");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    if (v16)
    {
      objc_msgSend(v20, "behavior");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v17, "pencilFeatheringDescriptor");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "endCapTime");
      *(_QWORD *)(a1 + 32) = v19;

      objc_msgSend(v20, "behavior");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "pencilFeatheringDescriptor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "endCapFade");
      goto LABEL_7;
    }
  }
  else if (!a3)
  {
    objc_msgSend(v20, "behavior");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "featheringDescriptor");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      objc_msgSend(v20, "behavior");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "featheringDescriptor");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "endCapTime");
      *(_QWORD *)(a1 + 32) = v11;

      objc_msgSend(v20, "behavior");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "featheringDescriptor");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "endCapFade");
LABEL_7:
      *(_QWORD *)(a1 + 40) = v14;

    }
  }

}

void sub_1BE49D32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

uint64_t PKEndCapsFilter::copyUpdatedRangeFromIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double *v23;
  double v24;

  v7 = *(_QWORD **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (!a2 && *(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
    *(_QWORD *)(a1 + 48) = **(_QWORD **)a3;
  v9 = *(double *)(a1 + 32);
  if (v9 > 0.0)
  {
    v10 = *(_QWORD **)a3;
    v11 = *(_QWORD *)(a3 + 8);
    if (v11 != *(_QWORD *)a3)
    {
      if (*(_BYTE *)(a1 + 16))
      {
        if (v9 > 0.0)
        {
          v12 = *(double *)(v11 - 88);
          if (v12 - *(double *)(a1 + 48) > v9 + v9)
          {
            v13 = (v11 - *(_QWORD *)a3) / 88;
            v14 = (uint64_t)&v10[11 * v13 + 2];
            v15 = v13;
            while (--v15)
            {
              v16 = (double *)(v14 - 88);
              v17 = v12 - *(double *)(v14 - 104);
              v14 -= 88;
              if (v17 > v9)
              {
                v18 = *(v16 - 1);
                v19 = *v16;
                goto LABEL_19;
              }
            }
            v18 = 0.0;
            v19 = 0.0;
LABEL_19:
            if ((v19 - *(double *)(v11 - 72)) * (v19 - *(double *)(v11 - 72))
               + (v18 - *(double *)(v11 - 80)) * (v18 - *(double *)(v11 - 80)) > 225.0)
            {
              v22 = v13 - 1;
              if (v13 != 1)
              {
                v23 = (double *)&v10[11 * v13 - 2];
                do
                {
                  v24 = v12 - *(v23 - 9);
                  if (v24 >= v9)
                    break;
                  *v23 = *v23 * (1.0 - *(double *)(a1 + 40) * (1.0 - v24 / v9));
                  v23 -= 11;
                  --v22;
                }
                while (v22);
              }
            }
          }
        }
      }
      else if (result)
      {
        v20 = *(double *)(v11 - 88) - v9;
        v21 = (double *)&v10[11 * (result + (v6 - (uint64_t)v7) / 88 - a2)];
        do
        {
          if (*v21 <= v20)
            break;
          v21 -= 11;
          --result;
        }
        while (result);
      }
    }
  }
  return result;
}

void PKInputBaseFilter<_PKStrokePoint,PKCompressedStrokePoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void (***v7)(_QWORD, id, uint64_t, double);
  id v8;

  v8 = a2;
  v7 = *(void (****)(_QWORD, id, uint64_t, double))(a1 + 8);
  if (v7)
    (**v7)(v7, v8, a3, a4);
  *(double *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 16) = 0;

}

void sub_1BE49D5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<_PKStrokePoint,PKCompressedStrokePoint>::drawingEnded(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_QWORD *PKInputProvider<PKCompressedStrokePoint>::getUpdatedRangeFromIndex(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *a2 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)a1 + 24))(a1, *a2, v4);
  return v4;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,PKCompressedStrokePoint>::copyUpdatedRangeFromIndex(_QWORD *a1, uint64_t a2, char **a3)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  __int128 *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;

  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v6 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v7 = (char *)v6[1];
  v8 = (char *)(*v6 + 32 * a2);
  v9 = v7 - v8;
  if (v7 - v8 < 1)
    return a1[9];
  v10 = v9 >> 5;
  v11 = (unint64_t)a3[1];
  v12 = v11 - (_QWORD)*a3;
  v13 = &(*a3)[v12 & 0xFFFFFFFFFFFFFFE0];
  v14 = a3[2];
  if (v9 >> 5 > (uint64_t)&v14[-v11] >> 5)
  {
    v15 = v12 >> 5;
    v16 = (v12 >> 5) + v10;
    if (v16 >> 59)
      std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
    v17 = v14 - *a3;
    if (v17 >> 4 > v16)
      v16 = v17 >> 4;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
      v18 = 0x7FFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCompressedStrokePoint>>((uint64_t)(a3 + 2), v18);
    else
      v19 = 0;
    v29 = &v19[32 * v15];
    v30 = &v29[32 * v10];
    v31 = 32 * v10;
    v32 = v29;
    do
    {
      v33 = *(_OWORD *)v8;
      v34 = *((_OWORD *)v8 + 1);
      v8 += 32;
      *(_OWORD *)v32 = v33;
      *((_OWORD *)v32 + 1) = v34;
      v32 += 32;
      v31 -= 32;
    }
    while (v31);
    v35 = *a3;
    if (*a3 == v13)
    {
      v38 = v29;
    }
    else
    {
      v36 = v13;
      do
      {
        v37 = *((_OWORD *)v36 - 1);
        v38 = v29 - 32;
        *((_OWORD *)v29 - 2) = *((_OWORD *)v36 - 2);
        *((_OWORD *)v29 - 1) = v37;
        v36 -= 32;
        v29 -= 32;
      }
      while (v36 != v35);
    }
    v39 = &v19[32 * v18];
    v40 = a3[1];
    v41 = v40 - v13;
    if (v40 != v13)
      memmove(v30, v13, v40 - v13);
    v42 = *a3;
    *a3 = v38;
    a3[1] = &v30[v41];
    a3[2] = v39;
    if (v42)
      operator delete(v42);
    return a1[9];
  }
  v20 = (uint64_t)(v11 - (_QWORD)v13) >> 5;
  if (v20 >= v10)
  {
    v21 = &v8[32 * v10];
    v23 = a3[1];
LABEL_17:
    v24 = &v13[32 * v10];
    v25 = (__int128 *)&v23[-32 * v10];
    v26 = v23;
    if ((unint64_t)v25 < v11)
    {
      v26 = v23;
      do
      {
        v27 = *v25;
        v28 = v25[1];
        v25 += 2;
        *(_OWORD *)v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v11);
    }
    a3[1] = v26;
    if (v23 != v24)
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v13, v23 - v24);
    if (v21 != v8)
      memmove(v13, v8, v21 - v8);
    return a1[9];
  }
  v21 = &v8[32 * v20];
  v22 = v7 - v21;
  if (v7 != v21)
    memmove(a3[1], &v8[32 * v20], v7 - v21);
  v23 = (char *)(v11 + v22);
  a3[1] = (char *)(v11 + v22);
  if ((uint64_t)(v11 - (_QWORD)v13) >= 1)
    goto LABEL_17;
  return a1[9];
}

_QWORD *PKInputFilter<_PKStrokePoint,PKCompressedStrokePoint>::reset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,PKCompressedStrokePoint>::fetchInput(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::vector<_PKStrokePoint>::resize(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t PKInputFilter<_PKStrokePoint,PKCompressedStrokePoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

void PKCompressionFilter::run(PKCompressionFilter *this)
{
  unint64_t v2;
  double *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  PKCompressedStrokePoint v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  _OWORD v15[2];

  std::vector<PKCompressedStrokePoint>::resize((uint64_t)this + 80, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3));
  v2 = *((_QWORD *)this + 9);
  v3 = (double *)*((_QWORD *)this + 6);
  if (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v3) >> 3))
  {
    v4 = 32 * v2;
    v5 = 11 * v2;
    do
    {
      v6 = *(_OWORD *)&v3[v5 + 6];
      v11 = *(_OWORD *)&v3[v5 + 4];
      v12 = v6;
      v13 = *(_OWORD *)&v3[v5 + 8];
      v14 = v3[v5 + 10];
      v7 = *(_OWORD *)&v3[v5 + 2];
      *(_OWORD *)&v10.var0.var0 = *(_OWORD *)&v3[v5];
      *(_OWORD *)&v10.var3 = v7;
      PKCompressStrokePoint(&v10, *v3, (float32x2_t *)v15);
      v8 = (_OWORD *)(*((_QWORD *)this + 10) + v4);
      v9 = v15[1];
      *v8 = v15[0];
      v8[1] = v9;
      ++v2;
      v3 = (double *)*((_QWORD *)this + 6);
      v4 += 32;
      v5 += 11;
    }
    while (v2 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v3) >> 3));
  }
  *((_QWORD *)this + 9) = *((_QWORD *)this + 4);
}

uint64_t PKInputFilter<_PKStrokePoint,PKCompressedStrokePoint>::complete()
{
  return 0;
}

uint64_t PKInputBufferedFilter<_PKStrokePoint,PKCompressedStrokePoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void PKInputBaseFilter<PKCompressedStrokePoint,_PKStrokePoint>::drawingBeganWithInk(uint64_t a1, void *a2, uint64_t a3, double a4)
{
  void (***v7)(_QWORD, id, uint64_t, double);
  id v8;

  v8 = a2;
  v7 = *(void (****)(_QWORD, id, uint64_t, double))(a1 + 8);
  if (v7)
    (**v7)(v7, v8, a3, a4);
  *(double *)(a1 + 24) = a4;
  *(_BYTE *)(a1 + 16) = 0;

}

void sub_1BE49DAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t PKInputBaseFilter<PKCompressedStrokePoint,_PKStrokePoint>::drawingEnded(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

uint64_t PKInputBufferedFilter<PKCompressedStrokePoint,_PKStrokePoint>::copyUpdatedRangeFromIndex(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(_QWORD *))(*a1 + 40))(a1);
  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  std::vector<_PKStrokePoint>::__insert_with_size[abi:ne180100]<std::__wrap_iter<_PKStrokePoint*>,std::__wrap_iter<_PKStrokePoint*>>(a3, *(_QWORD *)(a3 + 8), (char *)(*(_QWORD *)v6 + 88 * a2), *(char **)(v6 + 8), 0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(v6 + 8) - (*(_QWORD *)v6 + 88 * a2)) >> 3));
  return a1[9];
}

_QWORD *PKInputFilter<PKCompressedStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result[1] = *result;
  return result;
}

uint64_t PKInputBufferedFilter<PKCompressedStrokePoint,_PKStrokePoint>::fetchInput(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::vector<PKCompressedStrokePoint>::resize(a1 + 48, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 32), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

uint64_t PKInputFilter<PKCompressedStrokePoint,_PKStrokePoint>::outputVector(uint64_t a1)
{
  return a1 + 80;
}

void PKDecompressionFilter::run(PKDecompressionFilter *this)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v2 = (_QWORD *)((char *)this + 80);
  std::vector<_PKStrokePoint>::resize((uint64_t)this + 80, (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 5);
  v8 = *((_QWORD *)this + 9);
  v9 = *((_QWORD *)this + 6);
  v10 = (*((_QWORD *)this + 7) - v9) >> 5;
  v11 = v10 > v8;
  v12 = v10 - v8;
  if (v11)
  {
    v13 = v9 + 32 * v8 + 16;
    v14 = (double *)(*v2 + 88 * v8 + 40);
    do
    {
      v15 = *((double *)this + 13);
      v16 = v15 + *(float *)(v13 - 8);
      v17 = *(float *)(v13 - 4);
      LOWORD(v15) = *(_WORD *)v13;
      LOWORD(v3) = *(_WORD *)(v13 + 2);
      v3 = (double)*(unint64_t *)&v3 / 10.0;
      LOWORD(v4) = *(_WORD *)(v13 + 4);
      v4 = (double)*(unint64_t *)&v4 / 1000.0;
      LOWORD(v5) = *(_WORD *)(v13 + 6);
      v5 = (double)*(unint64_t *)&v5 / 10430.2192;
      LOWORD(v6) = *(_WORD *)(v13 + 8);
      v6 = (double)*(unint64_t *)&v6 / 41720.8768;
      LOWORD(v7) = *(_WORD *)(v13 + 10);
      v7 = (double)*(unint64_t *)&v7;
      v18 = *(float *)(v13 + 12);
      *(v14 - 5) = v16;
      *((float64x2_t *)v14 - 2) = vcvtq_f64_f32(*(float32x2_t *)(v13 - 16));
      *(v14 - 2) = v17;
      *(v14 - 1) = (double)*(unint64_t *)&v15 / 1000.0;
      *v14 = v3;
      v14[1] = v4;
      v14[2] = v5;
      v14[3] = v6;
      v14[4] = v7 / 32767.5;
      v14[5] = v18;
      v13 += 32;
      v14 += 11;
      --v12;
    }
    while (v12);
  }
  *((_QWORD *)this + 9) = *((_QWORD *)this + 4);
}

uint64_t PKInputFilter<PKCompressedStrokePoint,_PKStrokePoint>::complete()
{
  return 0;
}

uint64_t PKInputBufferedFilter<PKCompressedStrokePoint,_PKStrokePoint>::reset(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void ___ZL24PKAllowPencilHookFiltersv_block_invoke()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  byte_1ECEE65C9 = objc_msgSend(v0, "BOOLForKey:", CFSTR("internalSettings.drawing.allowPencilHookFilters"));

}

void sub_1BE49DE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4A38B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A39F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE4A3C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE4A3D84(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A861C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A86C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A8D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1BE4A8EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A8F7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A90BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1BE4A9144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9190(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A91DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9314(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  char v3;
  void *v4;
  void *v5;

  if ((v3 & 1) != 0)
  _Unwind_Resume(a1);
}

void sub_1BE4A93C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9414(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A94AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9670(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A97F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9A50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1BE4A9AFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4A9BA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A9C54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4A9CEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4A9D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE4A9E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE4A9FF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v8 = v6;

  _Unwind_Resume(a1);
}

void sub_1BE4AA158(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE4AA2AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE4AA4C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BE4AA568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AA650(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AA904(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE4AAA34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AAB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4AABCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AAD44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AADCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AAE74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4AAF4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PKProtobufUnknownFields>::reset[abi:ne180100]((PB::Writer ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_1BE4AB09C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE4AB2BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4B11FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 152));
  _Unwind_Resume(a1);
}

void sub_1BE4B137C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BE4B1818(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE4B38F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE4B6B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1BE4B6CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4B6EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4B70F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BE4B78E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE4B7D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1BE4B82C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_1BE4B83F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4B8498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE4B8510(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4B85B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BE4B8BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BE4B8E8C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1BE4B94B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE4B97CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE4BA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1BE4BADE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4BAEB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4BAF9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4BB014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4BB79C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BE4BB818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4BBA3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void sub_1BE4BC1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1BE4BC6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BE4BC8F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4BCC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_1BE4BCF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1BE4BD054(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4BD2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

double legacy_drawing::Command::Command(legacy_drawing::Command *this)
{
  double result;

  *(_QWORD *)this = &off_1E7774750;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7774750;
  *((_DWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return result;
}

void legacy_drawing::Command::~Command(legacy_drawing::Command *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E7774750;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 9);
    v5 = (void *)*((_QWORD *)this + 8);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v3;
    operator delete(v5);
  }
  v8 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  PB::Base::~Base(this);
}

{
  legacy_drawing::Command::~Command(this);
  JUMPOUT(0x1C3B7F770);
}

legacy_drawing::Command *legacy_drawing::Command::Command(legacy_drawing::Command *this, const legacy_drawing::CommandID **a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  legacy_drawing::Color *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  legacy_drawing::Point *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  const legacy_drawing::Point **v17;
  const legacy_drawing::Point **i;
  const legacy_drawing::Point *v19;
  legacy_drawing::Point *v20;
  unint64_t v21;
  legacy_drawing::Point **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  legacy_drawing::Point **v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  legacy_drawing::Point *v34;
  int64x2_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  legacy_drawing::Rectangle *v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  legacy_drawing::Point *v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  legacy_drawing::Point *v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  legacy_drawing::Parameters *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  char *v60;

  *(_QWORD *)this = &off_1E7774750;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  if (a2[6])
  {
    v5 = operator new();
    v6 = legacy_drawing::CommandID::CommandID(v5, a2[6]);
    v7 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((*((_BYTE *)a2 + 100) & 1) != 0)
  {
    v8 = *((_DWORD *)a2 + 24);
    *((_BYTE *)this + 100) |= 1u;
    *((_DWORD *)this + 24) = v8;
  }
  if (a2[5])
  {
    v9 = (legacy_drawing::Color *)operator new();
    v10 = legacy_drawing::Color::Color(v9, a2[5]);
    v11 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v12;
    if (v11)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v11 + 8))(v11, v10);
  }
  if (a2[1])
  {
    v13 = (legacy_drawing::Point *)operator new();
    v14 = legacy_drawing::Point::Point(v13, a2[1]);
    v15 = *v4;
    *v4 = v16;
    if (v15)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v15 + 8))(v15, v14);
  }
  v17 = (const legacy_drawing::Point **)a2[8];
  for (i = (const legacy_drawing::Point **)a2[9]; v17 != i; ++v17)
  {
    v19 = *v17;
    v20 = (legacy_drawing::Point *)operator new();
    legacy_drawing::Point::Point(v20, v19);
    v22 = (legacy_drawing::Point **)*((_QWORD *)this + 9);
    v21 = *((_QWORD *)this + 10);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *((_QWORD *)this + 8);
      v25 = ((uint64_t)v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v26 = v21 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v60 = (char *)this + 80;
      if (v28)
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v28);
      else
        v29 = 0;
      v30 = (legacy_drawing::Point **)(v28 + 8 * v25);
      v31 = v28 + 8 * v29;
      v59 = v31;
      *v30 = v20;
      v23 = v30 + 1;
      v58.i64[1] = (uint64_t)(v30 + 1);
      v33 = (_QWORD *)*((_QWORD *)this + 8);
      v32 = (_QWORD *)*((_QWORD *)this + 9);
      if (v32 == v33)
      {
        v35 = vdupq_n_s64((unint64_t)v32);
      }
      else
      {
        do
        {
          v34 = (legacy_drawing::Point *)*--v32;
          *v32 = 0;
          *--v30 = v34;
        }
        while (v32 != v33);
        v35 = *((int64x2_t *)this + 4);
        v23 = (_QWORD *)v58.i64[1];
        v31 = v59;
      }
      *((_QWORD *)this + 8) = v30;
      *((_QWORD *)this + 9) = v23;
      v58 = v35;
      v36 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v31;
      v59 = v36;
      v57 = v35.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v57);
    }
    else
    {
      *v22 = v20;
      v23 = v22 + 1;
    }
    *((_QWORD *)this + 9) = v23;
  }
  if (a2[11])
  {
    v37 = operator new();
    v38 = legacy_drawing::CommandID::CommandID(v37, a2[11]);
    v39 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v38;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  if (a2[2])
  {
    v40 = (legacy_drawing::Rectangle *)operator new();
    v41 = legacy_drawing::Rectangle::Rectangle(v40, a2[2]);
    v42 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v43;
    if (v42)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v42 + 8))(v42, v41);
  }
  if (a2[4])
  {
    v44 = (legacy_drawing::Point *)operator new();
    v45 = legacy_drawing::Point::Point(v44, a2[4]);
    v46 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v47;
    if (v46)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v46 + 8))(v46, v45);
  }
  if (a2[3])
  {
    v48 = (legacy_drawing::Point *)operator new();
    v49 = legacy_drawing::Point::Point(v48, a2[3]);
    v50 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v51;
    if (v50)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v50 + 8))(v50, v49);
  }
  if (a2[7])
  {
    v52 = (legacy_drawing::Parameters *)operator new();
    v53 = legacy_drawing::Parameters::Parameters(v52, a2[7]);
    v54 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v55;
    if (v54)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v54 + 8))(v54, v53);
  }
  return this;
}

void sub_1BE4BDC00(void *a1)
{
  __clang_call_terminate(a1);
}

uint64_t legacy_drawing::Command::operator=(uint64_t a1, const legacy_drawing::CommandID **a2)
{
  legacy_drawing::Command *v3;
  _BYTE v5[104];

  if ((const legacy_drawing::CommandID **)a1 != a2)
  {
    legacy_drawing::Command::Command((legacy_drawing::Command *)v5, a2);
    legacy_drawing::swap(a1, (legacy_drawing::Command *)v5, v3);
    legacy_drawing::Command::~Command((legacy_drawing::Command *)v5);
  }
  return a1;
}

uint64_t legacy_drawing::swap(uint64_t this, legacy_drawing::Command *a2, legacy_drawing::Command *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_DWORD *)(this + 100);
  *(_DWORD *)(this + 100) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  v4 = *(_QWORD *)(this + 48);
  *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 96);
  *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  v5 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v5;
  v6 = *(_QWORD *)(this + 8);
  *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v6;
  v7 = *(_QWORD *)(this + 64);
  *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = *(_QWORD *)(this + 72);
  *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v8;
  v9 = *(_QWORD *)(this + 80);
  *(_QWORD *)(this + 80) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v9;
  v10 = *(_QWORD *)(this + 88);
  *(_QWORD *)(this + 88) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v10;
  v11 = *(_QWORD *)(this + 16);
  *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v11;
  v12 = *(_QWORD *)(this + 32);
  *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v14;
  return this;
}

uint64_t legacy_drawing::Command::Command(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = &off_1E7774750;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (_QWORD *)(a1 + 64);
  v10 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v11 = *v4;
  *v4 = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (_QWORD *)*v9;
  if (*v9)
  {
    v13 = *(_QWORD **)(a1 + 72);
    v14 = (_QWORD *)*v9;
    if (v13 != v12)
    {
      do
      {
        v16 = *--v13;
        v15 = v16;
        *v13 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
      while (v13 != v12);
      v14 = (_QWORD *)*v9;
    }
    *(_QWORD *)(a1 + 72) = v12;
    operator delete(v14);
    *v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  v18 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v19;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v22 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v21;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  v24 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v23;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v26 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v25;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  return a1;
}

uint64_t legacy_drawing::Command::operator=(uint64_t a1, uint64_t a2)
{
  legacy_drawing::Command *v3;
  _BYTE v5[104];

  if (a1 != a2)
  {
    legacy_drawing::Command::Command((uint64_t)v5, a2);
    legacy_drawing::swap(a1, (legacy_drawing::Command *)v5, v3);
    legacy_drawing::Command::~Command((legacy_drawing::Command *)v5);
  }
  return a1;
}

uint64_t legacy_drawing::Command::formatText(legacy_drawing::Command *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "baseValues");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "bounds");
  v7 = *((_QWORD *)this + 3);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, a2, "clipNormal");
  v8 = *((_QWORD *)this + 4);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, a2, "clipOrigin");
  v9 = *((_QWORD *)this + 5);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "color");
  v10 = *((_QWORD *)this + 6);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, a2, "commandID");
  v11 = *((_QWORD *)this + 7);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, a2, "parameters");
  v12 = (uint64_t *)*((_QWORD *)this + 8);
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "path");
  }
  v15 = *((_QWORD *)this + 11);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, a2, "timestamp");
  if ((*((_BYTE *)this + 100) & 1) != 0)
    PB::TextFormatter::format(a2, "type");
  return PB::TextFormatter::endObject(a2);
}

uint64_t legacy_drawing::Command::readFrom(int64x2_t *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  int64x2_t *v8;
  char *v9;
  void (**v10)(legacy_drawing::CommandID *__hidden);
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  _DWORD *v23;
  uint64_t v24;
  void (**v25)(legacy_drawing::CommandID *__hidden);
  char *v26;
  int64x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  uint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  int64x2_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  unint64_t v69;
  int64x2_t *v70;

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = this + 5;
  v10 = &off_1E77747C0;
  while (1)
  {
    v11 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_22:
      if ((v14 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = v10;
          v23[5] = 0;
          v24 = this[3].i64[0];
          this[3].i64[0] = (uint64_t)v23;
          if (v24)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            v23 = (_DWORD *)this[3].i64[0];
          }
          goto LABEL_49;
        case 2u:
          this[6].i8[4] |= 1u;
          v37 = *((_QWORD *)a2 + 1);
          v38 = *((_QWORD *)a2 + 2);
          v39 = *(_QWORD *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)a2 + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_84;
              v40 += 7;
              v37 = v43;
              v17 = v41++ > 8;
            }
            while (!v17);
LABEL_71:
            LODWORD(v42) = 0;
            goto LABEL_84;
          }
          v55 = 0;
          v56 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)a2 + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)a2 + 24) = 1;
            }
            else
            {
              v57 = v37 + 1;
              v58 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)a2 + 1) = v57;
              v42 |= (unint64_t)(v58 & 0x7F) << v55;
              if (v58 < 0)
              {
                v55 += 7;
                v37 = v57;
                v17 = v56++ > 8;
                if (v17)
                  goto LABEL_71;
                continue;
              }
              if (*((_BYTE *)a2 + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_84:
          this[6].i32[0] = v42;
          goto LABEL_52;
        case 3u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E77746E0;
          v23[6] = 0;
          v34 = this[2].i64[1];
          this[2].i64[1] = (uint64_t)v23;
          if (v34)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            v23 = (_DWORD *)this[2].i64[1];
          }
          goto LABEL_49;
        case 4u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774718;
          v23[9] = 0;
          v35 = this->i64[1];
          this->i64[1] = (uint64_t)v23;
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            v23 = (_DWORD *)this->i64[1];
          }
          goto LABEL_49;
        case 5u:
          v25 = v10;
          v26 = v9;
          v27 = v8;
          v28 = operator new();
          v29 = v28;
          *(_QWORD *)v28 = &off_1E7774718;
          *(_DWORD *)(v28 + 36) = 0;
          v31 = (uint64_t *)this[4].i64[1];
          v30 = this[5].u64[0];
          if ((unint64_t)v31 >= v30)
          {
            v49 = this[4].i64[0];
            v50 = ((uint64_t)v31 - v49) >> 3;
            if ((unint64_t)(v50 + 1) >> 61)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v51 = v30 - v49;
            v52 = v51 >> 2;
            if (v51 >> 2 <= (unint64_t)(v50 + 1))
              v52 = v50 + 1;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
              v53 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v53 = v52;
            v70 = v27;
            if (v53)
              v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<legacy_drawing::Command>>>(v53);
            else
              v54 = 0;
            v59 = (uint64_t *)(v53 + 8 * v50);
            v60 = v53 + 8 * v54;
            v69 = v60;
            *v59 = v29;
            v32 = v59 + 1;
            v68.i64[1] = (uint64_t)(v59 + 1);
            v62 = (_QWORD *)this[4].i64[0];
            v61 = (_QWORD *)this[4].i64[1];
            if (v61 == v62)
            {
              v64 = vdupq_n_s64((unint64_t)v61);
            }
            else
            {
              do
              {
                v63 = *--v61;
                *v61 = 0;
                *--v59 = v63;
              }
              while (v61 != v62);
              v64 = this[4];
              v32 = (_QWORD *)v68.i64[1];
              v60 = v69;
            }
            this[4].i64[0] = (uint64_t)v59;
            this[4].i64[1] = (uint64_t)v32;
            v68 = v64;
            v65 = this[5].i64[0];
            this[5].i64[0] = v60;
            v69 = v65;
            v67 = v64.i64[0];
            std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v67);
          }
          else
          {
            *v31 = v28;
            v32 = v31 + 1;
          }
          this[4].i64[1] = (uint64_t)v32;
          v66 = *(v32 - 1);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v66 + 16))(v66, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          v8 = v27;
          v9 = v26;
          v10 = v25;
          goto LABEL_52;
        case 6u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = v9 + 16;
          v23[5] = 0;
          v45 = this[5].i64[1];
          this[5].i64[1] = (uint64_t)v23;
          if (v45)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            v23 = (_DWORD *)this[5].i64[1];
          }
          goto LABEL_49;
        case 7u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E77747F8;
          v23[6] = 0;
          v46 = this[1].i64[0];
          this[1].i64[0] = (uint64_t)v23;
          if (v46)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
            v23 = (_DWORD *)this[1].i64[0];
          }
          goto LABEL_49;
        case 8u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774718;
          v23[9] = 0;
          v36 = this[2].i64[0];
          this[2].i64[0] = (uint64_t)v23;
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            v23 = (_DWORD *)this[2].i64[0];
          }
          goto LABEL_49;
        case 9u:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774718;
          v23[9] = 0;
          v47 = this[1].i64[1];
          this[1].i64[1] = (uint64_t)v23;
          if (v47)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
            v23 = (_DWORD *)this[1].i64[1];
          }
          goto LABEL_49;
        case 0xAu:
          v23 = (_DWORD *)operator new();
          *(_QWORD *)v23 = &off_1E7774600;
          v23[5] = 0;
          v33 = this[3].i64[1];
          this[3].i64[1] = (uint64_t)v23;
          if (v33)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            v23 = (_DWORD *)this[3].i64[1];
          }
LABEL_49:
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, a2) & 1) == 0)
          {
            return 0;
          }
          PB::Reader::recallMark();
          break;
        default:
          goto LABEL_20;
      }
      goto LABEL_52;
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)a2 + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_22;
      v18 += 7;
      v2 = v20;
      v17 = v19++ > 8;
    }
    while (!v17);
LABEL_20:
    result = PB::Reader::skip(a2);
    if (!(_DWORD)result)
      return result;
LABEL_52:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || v4 != 0)
      return v4 == 0;
  }
}

void sub_1BE4BE790(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t legacy_drawing::Command::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;

  v3 = this;
  v4 = *(const PB::Base **)(this + 48);
  if (v4)
    this = PB::Writer::writeSubmessage(a2, v4);
  if ((*(_BYTE *)(v3 + 100) & 1) != 0)
    this = PB::Writer::writeVarInt(a2);
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    this = PB::Writer::writeSubmessage(a2, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    this = PB::Writer::writeSubmessage(a2, v6);
  v7 = *(const PB::Base ***)(v3 + 64);
  v8 = *(const PB::Base ***)(v3 + 72);
  while (v7 != v8)
  {
    v9 = *v7++;
    this = PB::Writer::writeSubmessage(a2, v9);
  }
  v10 = *(const PB::Base **)(v3 + 88);
  if (v10)
    this = PB::Writer::writeSubmessage(a2, v10);
  v11 = *(const PB::Base **)(v3 + 16);
  if (v11)
    this = PB::Writer::writeSubmessage(a2, v11);
  v12 = *(const PB::Base **)(v3 + 32);
  if (v12)
    this = PB::Writer::writeSubmessage(a2, v12);
  v13 = *(const PB::Base **)(v3 + 24);
  if (v13)
    this = PB::Writer::writeSubmessage(a2, v13);
  v14 = *(const PB::Base **)(v3 + 56);
  if (v14)
    return PB::Writer::writeSubmessage(a2, v14);
  return this;
}

BOOL legacy_drawing::Command::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4)
  {
    if (!v5 || !legacy_drawing::CommandID::operator==(v4, v5))
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((*(_BYTE *)(a1 + 100) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 100) & 1) == 0 || *(_DWORD *)(a1 + 96) != *(_DWORD *)(a2 + 96))
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 100) & 1) != 0)
  {
    return 0;
  }
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 40);
  if (v6)
  {
    if (!v7 || !legacy_drawing::Color::operator==(v6, v7))
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (!v9 || !legacy_drawing::Point::operator==(v8, v9))
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  v10 = *(uint64_t **)(a1 + 64);
  v11 = *(uint64_t **)(a1 + 72);
  v12 = *(uint64_t **)(a2 + 64);
  if ((char *)v11 - (char *)v10 != *(_QWORD *)(a2 + 72) - (_QWORD)v12)
    return 0;
  while (v10 != v11)
  {
    result = legacy_drawing::Point::operator==(*v10, *v12);
    if (!result)
      return result;
    ++v10;
    ++v12;
  }
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a2 + 88);
  if (v14)
  {
    if (!v15 || !legacy_drawing::CommandID::operator==(v14, v15))
      return 0;
  }
  else if (v15)
  {
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a2 + 16);
  if (v16)
  {
    if (!v17 || !legacy_drawing::Rectangle::operator==(v16, v17))
      return 0;
  }
  else if (v17)
  {
    return 0;
  }
  v18 = *(_QWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a2 + 32);
  if (v18)
  {
    if (!v19 || !legacy_drawing::Point::operator==(v18, v19))
      return 0;
  }
  else if (v19)
  {
    return 0;
  }
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a2 + 24);
  if (!v20)
  {
    if (!v21)
      goto LABEL_43;
    return 0;
  }
  if (!v21 || !legacy_drawing::Point::operator==(v20, v21))
    return 0;
LABEL_43:
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(_QWORD *)(a2 + 56);
  result = (v22 | v23) == 0;
  if (v22)
  {
    if (v23)
      return legacy_drawing::Parameters::operator==(*(_QWORD *)(a1 + 56), v23);
  }
  return result;
}

unint64_t legacy_drawing::Command::hash_value(legacy_drawing::Command *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  legacy_drawing::Color *v8;
  uint64_t v9;
  legacy_drawing::Point *v10;
  uint64_t v11;
  legacy_drawing::Point **v12;
  legacy_drawing::Point **v13;
  uint64_t v14;
  legacy_drawing::Point *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  legacy_drawing::Rectangle *v21;
  uint64_t v22;
  legacy_drawing::Point *v23;
  uint64_t v24;
  legacy_drawing::Point *v25;
  uint64_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 6);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 20) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(v2 + 20) & 4) != 0)
      goto LABEL_4;
LABEL_8:
    v4 = 0;
    if ((*(_BYTE *)(v2 + 20) & 2) != 0)
      goto LABEL_5;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  v3 = *(unsigned int *)(v2 + 8);
  if ((*(_BYTE *)(v2 + 20) & 4) == 0)
    goto LABEL_8;
LABEL_4:
  v4 = *(unsigned int *)(v2 + 16);
  if ((*(_BYTE *)(v2 + 20) & 2) == 0)
    goto LABEL_9;
LABEL_5:
  v5 = *(unsigned int *)(v2 + 12);
LABEL_10:
  v6 = v4 ^ v3 ^ v5;
LABEL_11:
  if ((*((_BYTE *)this + 100) & 1) != 0)
    v7 = *((unsigned int *)this + 24);
  else
    v7 = 0;
  v8 = (legacy_drawing::Color *)*((_QWORD *)this + 5);
  if (v8)
    v9 = legacy_drawing::Color::hash_value(v8);
  else
    v9 = 0;
  v10 = (legacy_drawing::Point *)*((_QWORD *)this + 1);
  if (v10)
    v11 = legacy_drawing::Point::hash_value(v10);
  else
    v11 = 0;
  v12 = (legacy_drawing::Point **)*((_QWORD *)this + 8);
  v13 = (legacy_drawing::Point **)*((_QWORD *)this + 9);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= legacy_drawing::Point::hash_value(v15);
    }
    while (v12 != v13);
  }
  v16 = *((_QWORD *)this + 11);
  if (!v16)
  {
    v20 = 0;
    goto LABEL_35;
  }
  if ((*(_BYTE *)(v16 + 20) & 1) == 0)
  {
    v17 = 0;
    if ((*(_BYTE *)(v16 + 20) & 4) != 0)
      goto LABEL_28;
LABEL_32:
    v18 = 0;
    if ((*(_BYTE *)(v16 + 20) & 2) != 0)
      goto LABEL_29;
LABEL_33:
    v19 = 0;
    goto LABEL_34;
  }
  v17 = *(unsigned int *)(v16 + 8);
  if ((*(_BYTE *)(v16 + 20) & 4) == 0)
    goto LABEL_32;
LABEL_28:
  v18 = *(unsigned int *)(v16 + 16);
  if ((*(_BYTE *)(v16 + 20) & 2) == 0)
    goto LABEL_33;
LABEL_29:
  v19 = *(unsigned int *)(v16 + 12);
LABEL_34:
  v20 = v18 ^ v17 ^ v19;
LABEL_35:
  v21 = (legacy_drawing::Rectangle *)*((_QWORD *)this + 2);
  if (v21)
    v22 = legacy_drawing::Rectangle::hash_value(v21);
  else
    v22 = 0;
  v23 = (legacy_drawing::Point *)*((_QWORD *)this + 4);
  if (v23)
    v24 = legacy_drawing::Point::hash_value(v23);
  else
    v24 = 0;
  v25 = (legacy_drawing::Point *)*((_QWORD *)this + 3);
  if (v25)
    v26 = legacy_drawing::Point::hash_value(v25);
  else
    v26 = 0;
  v27 = *((_QWORD *)this + 7);
  if (v27)
    v27 = legacy_drawing::Parameters::hash_value((legacy_drawing::Parameters *)v27);
  return v7 ^ v6 ^ v20 ^ v22 ^ v24 ^ v26 ^ v27 ^ v9 ^ v11 ^ v14;
}

_QWORD *legacy_drawing::Command::makeCommandID(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[6])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77747C0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[6];
    v1[6] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeColor(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[5])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77746E0;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[5];
    v1[5] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeBaseValues(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774718;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeTimestamp(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[11])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77747C0;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[11];
    v1[11] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E77747F8;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeClipOrigin(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[4])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774718;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[4];
    v1[4] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeClipNormal(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[3])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774718;
    *(_DWORD *)(v2 + 36) = 0;
    this = (_QWORD *)v1[3];
    v1[3] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *legacy_drawing::Command::makeParameters(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[7])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774600;
    *(_DWORD *)(v2 + 20) = 0;
    this = (_QWORD *)v1[7];
    v1[7] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

double DKDOffsetForEdgeOfFrame(int a1, double a2, double a3, double a4, double a5)
{
  double result;

  switch(a1)
  {
    case 0:
      result = CGRectGetMinX(*(CGRect *)&a2);
      break;
    case 1:
      result = CGRectGetMidX(*(CGRect *)&a2);
      break;
    case 2:
      result = CGRectGetMaxX(*(CGRect *)&a2);
      break;
    case 3:
      result = CGRectGetMinY(*(CGRect *)&a2);
      break;
    case 4:
      result = CGRectGetMidY(*(CGRect *)&a2);
      break;
    case 5:
      result = CGRectGetMaxY(*(CGRect *)&a2);
      break;
    default:
      result = 0.0;
      break;
  }
  return result;
}

double DKDRectWithCenterAndSize(double a1, double a2, double a3)
{
  return a1 - a3 * 0.5;
}

double DKDRectWithPoints(double a1, double a2, double a3)
{
  if (a1 >= a3)
    return a3;
  else
    return a1;
}

double DKDRectWithSize()
{
  return 0.0;
}

double DKDRectWithSizeAlignedToRect(int a1, int a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double x;
  double width;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  v17.size.height = a4;
  v17.size.width = a3;
  v17.origin.x = 0.0;
  v17.origin.y = 0.0;
  v18 = CGRectStandardize(v17);
  x = v18.origin.x;
  width = v18.size.width;
  v18.origin.x = a5;
  v18.origin.y = a6;
  v18.size.width = a7;
  v18.size.height = a8;
  if (!CGRectIsNull(v18))
  {
    switch(a1)
    {
      case 3:
        v20.origin.x = a5;
        v20.origin.y = a6;
        v20.size.width = a7;
        v20.size.height = a8;
        x = CGRectGetMaxX(v20) - width;
        break;
      case 2:
        v21.origin.x = a5;
        v21.origin.y = a6;
        v21.size.width = a7;
        v21.size.height = a8;
        x = CGRectGetMidX(v21) + width * -0.5;
        break;
      case 1:
        v19.origin.x = a5;
        v19.origin.y = a6;
        v19.size.width = a7;
        v19.size.height = a8;
        x = CGRectGetMinX(v19);
        break;
    }
    switch(a2)
    {
      case 3:
        v23.origin.x = a5;
        v23.origin.y = a6;
        v23.size.width = a7;
        v23.size.height = a8;
        CGRectGetMaxY(v23);
        break;
      case 2:
        v24.origin.x = a5;
        v24.origin.y = a6;
        v24.size.width = a7;
        v24.size.height = a8;
        CGRectGetMidY(v24);
        break;
      case 1:
        v22.origin.x = a5;
        v22.origin.y = a6;
        v22.size.width = a7;
        v22.size.height = a8;
        CGRectGetMinY(v22);
        break;
    }
  }
  return x;
}

double DKDUpdateFixedSizeRectToIncludePoint(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  CGRect v21;
  CGRect v22;
  CGRect v23;

  v15 = a5 + a7 - CGRectGetMaxX(*(CGRect *)&a1);
  if (v15 <= 0.0)
    v15 = -0.0;
  v21.origin.x = a1 + v15;
  v21.origin.y = a2;
  v21.size.width = a3;
  v21.size.height = a4;
  v16 = v21.origin.x - fmax(CGRectGetMinX(v21) - (a5 - a7), 0.0);
  v22.origin.x = v16;
  v22.origin.y = a2;
  v22.size.width = a3;
  v22.size.height = a4;
  v17 = a6 + a8 - CGRectGetMaxY(v22);
  if (v17 <= 0.0)
    v17 = -0.0;
  v18 = a2 + v17;
  v23.origin.x = v16;
  v23.origin.y = v18;
  v23.size.width = a3;
  v23.size.height = a4;
  CGRectGetMinY(v23);
  return v16;
}

double DKDUpdateFixedSizeRectToIncludeRectIfPossible(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10)
{
  double MinY;
  double v27;
  double v28;
  double v29;
  double v30;
  CGFloat v31;
  double v32;
  double MaxY;
  double v34;
  double v35;
  double v36;
  double v37;
  CGFloat v38;
  double MaxX;
  double v40;
  double v41;
  CGFloat v42;
  double v43;
  CGFloat v44;
  double v45;
  CGFloat v46;
  double v47;
  double v48;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  double MinX;
  double v55;
  double v56;
  double v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v58.origin.x = a5;
  v58.origin.y = a6;
  v58.size.width = a7;
  v58.size.height = a8;
  if (!CGRectIsNull(v58))
  {
    v59.origin.x = a5;
    v59.origin.y = a6;
    v59.size.width = a7;
    v59.size.height = a8;
    MinX = CGRectGetMinX(v59);
    v60.origin.x = a5;
    v60.origin.y = a6;
    v60.size.width = a7;
    v60.size.height = a8;
    MinY = CGRectGetMinY(v60);
    v27 = DKDUpdateFixedSizeRectToIncludePoint(a1, a2, a3, a4, MinX, MinY, a9, a10);
    v52 = v28;
    v55 = v27;
    v50 = v29;
    v31 = v30;
    v61.origin.x = a5;
    v61.origin.y = a6;
    v61.size.width = a7;
    v61.size.height = a8;
    v32 = CGRectGetMinX(v61);
    v62.origin.x = a5;
    v62.origin.y = a6;
    v62.size.width = a7;
    v62.size.height = a8;
    MaxY = CGRectGetMaxY(v62);
    v34 = DKDUpdateFixedSizeRectToIncludePoint(v55, v52, v50, v31, v32, MaxY, a9, a10);
    v53 = v35;
    v56 = v34;
    v51 = v36;
    v38 = v37;
    v63.origin.x = a5;
    v63.origin.y = a6;
    v63.size.width = a7;
    v63.size.height = a8;
    MaxX = CGRectGetMaxX(v63);
    v64.origin.x = a5;
    v64.origin.y = a6;
    v64.size.width = a7;
    v64.size.height = a8;
    v40 = CGRectGetMinY(v64);
    v57 = DKDUpdateFixedSizeRectToIncludePoint(v56, v53, v51, v38, MaxX, v40, a9, a10);
    v42 = v41;
    v44 = v43;
    v46 = v45;
    v65.origin.x = a5;
    v65.origin.y = a6;
    v65.size.width = a7;
    v65.size.height = a8;
    v47 = CGRectGetMaxX(v65);
    v66.origin.x = a5;
    v66.origin.y = a6;
    v66.size.width = a7;
    v66.size.height = a8;
    v48 = CGRectGetMaxY(v66);
    return DKDUpdateFixedSizeRectToIncludePoint(v57, v42, v44, v46, v47, v48, a9, a10);
  }
  return a1;
}

CGFloat DKDUpdateFixedSizeRectToFitInsideRectIfPossible(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v14;
  double MinX;
  double MinY;
  double MaxX;
  CGFloat v18;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  v14 = a1;
  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  if (MinX < CGRectGetMinX(v21))
  {
    v22.origin.x = a5;
    v22.origin.y = a6;
    v22.size.width = a7;
    v22.size.height = a8;
    v14 = CGRectGetMinX(v22);
  }
  v23.origin.x = v14;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MinY = CGRectGetMinY(v23);
  v24.origin.x = a5;
  v24.origin.y = a6;
  v24.size.width = a7;
  v24.size.height = a8;
  if (MinY < CGRectGetMinY(v24))
  {
    v25.origin.x = a5;
    v25.origin.y = a6;
    v25.size.width = a7;
    v25.size.height = a8;
    a2 = CGRectGetMinY(v25);
  }
  v26.origin.x = v14;
  v26.origin.y = a2;
  v26.size.width = a3;
  v26.size.height = a4;
  MaxX = CGRectGetMaxX(v26);
  v27.origin.x = a5;
  v27.origin.y = a6;
  v27.size.width = a7;
  v27.size.height = a8;
  v18 = v14 - fmax(MaxX - CGRectGetMaxX(v27), 0.0);
  v28.origin.x = v18;
  v28.origin.y = a2;
  v28.size.width = a3;
  v28.size.height = a4;
  CGRectGetMaxY(v28);
  v29.origin.x = a5;
  v29.origin.y = a6;
  v29.size.width = a7;
  v29.size.height = a8;
  CGRectGetMaxY(v29);
  return v18;
}

BOOL DKDEqualPoints(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a1, a3) < a5;
  return vabdd_f64(a2, a4) < a5 && v5;
}

BOOL DKDNearlyEqualPoints(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = vabdd_f64(a1, a3) < 0.01;
  return vabdd_f64(a2, a4) < 0.01 && v4;
}

BOOL DKDNearlyEqualVectorFloat4(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;

  v2 = vsubq_f32(a1, a2);
  return fabsf(v2.f32[0]) < 0.01 && fabsf(v2.f32[1]) < 0.01 && fabsf(v2.f32[2]) < 0.01 && fabsf(v2.f32[3]) < 0.01;
}

BOOL DKDEqualSizes(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a1, a3) < a5;
  return vabdd_f64(a2, a4) < a5 && v5;
}

BOOL DKDNearlyEqualSizes(double a1, double a2, double a3, double a4)
{
  _BOOL4 v4;

  v4 = vabdd_f64(a1, a3) < 0.01;
  return vabdd_f64(a2, a4) < 0.01 && v4;
}

BOOL DKDNearlyEqualTransforms(double *a1, double *a2)
{
  return vabdd_f64(*a1, *a2) < 0.000000001
      && vabdd_f64(a1[1], a2[1]) < 0.000000001
      && vabdd_f64(a1[2], a2[2]) < 0.000000001
      && vabdd_f64(a1[3], a2[3]) < 0.000000001
      && vabdd_f64(a1[4], a2[4]) < 0.000000001
      && vabdd_f64(a1[5], a2[5]) < 0.000000001;
}

BOOL DKDEqualRects(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v17;
  _BOOL4 v20;

  v17 = vabdd_f64(a2, a6);
  if (vabdd_f64(a1, a5) >= a9 || v17 >= a9)
    return 0;
  v20 = vabdd_f64(a3, a7) < a9;
  return vabdd_f64(a4, a8) < a9 && v20;
}

BOOL DKDNearlyEqualRects(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL8 result;
  _BOOL4 v9;

  result = 0;
  if (vabdd_f64(a1, a5) < 0.01 && vabdd_f64(a2, a6) < 0.01)
  {
    v9 = vabdd_f64(a3, a7) < 0.01;
    return vabdd_f64(a4, a8) < 0.01 && v9;
  }
  return result;
}

BOOL DKDNearlyContainsRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v13;
  CGRect v14;

  v13 = CGRectInset(*(CGRect *)&a1, -0.01, -0.01);
  v14.origin.x = a5;
  v14.origin.y = a6;
  v14.size.width = a7;
  v14.size.height = a8;
  return CGRectContainsRect(v13, v14);
}

BOOL DKDCollinearPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return fabs((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1)) < 8.90029543e-308;
}

BOOL DKDNearlyCollinearPoints(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = a3 - a1;
  return (v6 * (a6 - a2) - (a4 - a2) * (a5 - a1)) * (v6 * (a6 - a2) - (a4 - a2) * (a5 - a1)) < ((a4 - a2) * (a4 - a2)
                                                                                              + v6 * v6)
                                                                                             * 0.0001
                                                                                             * ((a6 - a2) * (a6 - a2)
                                                                                              + (a5 - a1) * (a5 - a1));
}

double DKDDistanceSquared(double a1, double a2, double a3, double a4)
{
  return (a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3);
}

BOOL DKDRectsOverlapVertically(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v16;
  double MaxX;
  double v18;
  double MinX;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  v16 = CGRectGetMinX(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MaxX = CGRectGetMaxX(v23);
  v24.origin.x = a5;
  v24.origin.y = a6;
  v24.size.width = a7;
  v24.size.height = a8;
  v18 = CGRectGetMaxX(v24);
  if (MinX <= v16)
    return MaxX >= v16;
  else
    return v18 >= MinX;
}

BOOL DKDRectsOverlapHorizontally(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v16;
  double MaxY;
  double v18;
  double MinY;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  MinY = CGRectGetMinY(*(CGRect *)&a1);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  v16 = CGRectGetMinY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  MaxY = CGRectGetMaxY(v23);
  v24.origin.x = a5;
  v24.origin.y = a6;
  v24.size.width = a7;
  v24.size.height = a8;
  v18 = CGRectGetMaxY(v24);
  if (MinY <= v16)
    return MaxY >= v16;
  else
    return v18 >= MinY;
}

uint64_t DKDLineIntersectsRect(CGFloat a1, CGFloat a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double v12;
  double v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  double v19;
  double v20;
  int v21;

  v12 = a4;
  v13 = a3;
  while (1)
  {
    v16 = p_ComputeOutcode(a1, a2, a5, a6, a7, a8);
    v17 = p_ComputeOutcode(v13, v12, a5, a6, a7, a8);
    result = 1;
    if (!v16 || !v17)
      break;
    if ((v17 & v16) != 0)
      return 0;
    v19 = (v13 + a1) * 0.5;
    v20 = (v12 + a2) * 0.5;
    v21 = DKDLineIntersectsRect(1, a1, a2, v19, v20, a5, a6, a7, a8);
    a1 = v19;
    a2 = v20;
    v13 = a3;
    v12 = a4;
    if (v21)
      return 1;
  }
  return result;
}

uint64_t p_ComputeOutcode(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v12;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  if (a2 <= CGRectGetMaxY(v14))
  {
    v15.origin.x = a3;
    v15.origin.y = a4;
    v15.size.width = a5;
    v15.size.height = a6;
    if (a2 < CGRectGetMinY(v15))
      v12 = 2;
    else
      v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  if (a1 > CGRectGetMaxX(v16))
    return v12 | 4;
  v17.origin.x = a3;
  v17.origin.y = a4;
  v17.size.width = a5;
  v17.size.height = a6;
  if (a1 < CGRectGetMinX(v17))
    return v12 | 8;
  else
    return v12;
}

double DKDAveragePoints(double a1, double a2, double a3)
{
  return (a1 + a3) * 0.5;
}

double DKDNearestPointOnInfiniteLineToPoint(double *a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;

  v3 = a1[1];
  v4 = a1[2] - *a1;
  v5 = a1[3] - v3;
  v6 = 1.0 / sqrt(v5 * v5 + v4 * v4);
  return *a1 + v4 * v6 * ((a3 - v3) * (v5 * v6) + (a2 - *a1) * (v4 * v6));
}

double DKDNormalizePoint(double a1, double a2)
{
  return a1 * (1.0 / sqrt(a2 * a2 + a1 * a1));
}

double DKDSubtractPoints(double a1, double a2, double a3)
{
  return a1 - a3;
}

double DKDDotPoints(double a1, double a2, double a3, double a4)
{
  return a2 * a4 + a1 * a3;
}

double DKDAddPoints(double a1, double a2, double a3)
{
  return a1 + a3;
}

double DKDMultiplyPointScalar(double a1, double a2, double a3)
{
  return a1 * a3;
}

BOOL DKDSizeIsEmpty(double a1, double a2)
{
  return a2 == 0.0 || a1 == 0.0;
}

double DKDSizeWithMaxArea(double result, double a2, double a3, double a4)
{
  if (result * a2 <= a3 * a4)
    return a3;
  return result;
}

double DKDUnionRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v8;

  v8 = a7 <= 0.0;
  if (a8 > 0.0)
    v8 = 0;
  if (a3 > 0.0 || a4 > 0.0)
  {
    if (v8)
    {
      return a1;
    }
    else if (a1 < a5)
    {
      return a1;
    }
  }
  else if (v8)
  {
    return *MEMORY[0x1E0C9D648];
  }
  return a5;
}

double DKDHorizontalSpacingRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MaxY;
  CGFloat v16;
  double MinY;
  double v18;
  double result;
  CGFloat v20;
  double MaxX;
  double v23;
  double MinX;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v20 = a7;
  v26.size.height = a8;
  v25 = fmax(MinX, CGRectGetMinX(v26));
  v27.origin.x = a1;
  v27.origin.y = a2;
  v27.size.width = a3;
  v27.size.height = a4;
  MaxX = CGRectGetMaxX(v27);
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  v23 = fmin(MaxX, CGRectGetMaxX(v28));
  v29.origin.x = a1;
  v29.origin.y = a2;
  v29.size.width = a3;
  v29.size.height = a4;
  MaxY = CGRectGetMaxY(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = v20;
  v30.size.height = a8;
  v16 = fmin(MaxY, CGRectGetMaxY(v30));
  v31.origin.x = a1;
  v31.origin.y = a2;
  v31.size.width = a3;
  v31.size.height = a4;
  MinY = CGRectGetMinY(v31);
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = v20;
  v32.size.height = a8;
  v18 = fmax(MinY, CGRectGetMinY(v32));
  v33.origin.x = v25;
  v33.size.width = v23 - v25;
  v33.size.height = v18 - v16;
  v33.origin.y = v16;
  *(_QWORD *)&result = (unint64_t)CGRectStandardize(v33);
  return result;
}

double DKDVerticalSpacingRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MinY;
  CGFloat v16;
  double MaxY;
  double v18;
  double result;
  CGFloat v20;
  double MinX;
  double v23;
  double MaxX;
  double v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;
  CGRect v33;

  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v26.origin.x = a5;
  v26.origin.y = a6;
  v26.size.width = a7;
  v20 = a7;
  v26.size.height = a8;
  v25 = fmin(MaxX, CGRectGetMaxX(v26));
  v27.origin.x = a1;
  v27.origin.y = a2;
  v27.size.width = a3;
  v27.size.height = a4;
  MinX = CGRectGetMinX(v27);
  v28.origin.x = a5;
  v28.origin.y = a6;
  v28.size.width = a7;
  v28.size.height = a8;
  v23 = fmax(MinX, CGRectGetMinX(v28));
  v29.origin.x = a1;
  v29.origin.y = a2;
  v29.size.width = a3;
  v29.size.height = a4;
  MinY = CGRectGetMinY(v29);
  v30.origin.x = a5;
  v30.origin.y = a6;
  v30.size.width = v20;
  v30.size.height = a8;
  v16 = fmax(MinY, CGRectGetMinY(v30));
  v31.origin.x = a1;
  v31.origin.y = a2;
  v31.size.width = a3;
  v31.size.height = a4;
  MaxY = CGRectGetMaxY(v31);
  v32.origin.x = a5;
  v32.origin.y = a6;
  v32.size.width = v20;
  v32.size.height = a8;
  v18 = fmin(MaxY, CGRectGetMaxY(v32));
  v33.origin.x = v25;
  v33.size.width = v23 - v25;
  v33.size.height = v18 - v16;
  v33.origin.y = v16;
  *(_QWORD *)&result = (unint64_t)CGRectStandardize(v33);
  return result;
}

BOOL DKDIntersectsRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL8 result;

  if (a1 < a5)
    result = a1 + a3 > a5;
  else
    result = a5 + a7 > a1;
  if (a2 >= a6)
  {
    if (a6 + a8 > a2)
      return result;
    return 0;
  }
  if (a2 + a4 <= a6)
    return 0;
  return result;
}

BOOL DKDPointInRectInclusive(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;

  v6 = a3 + a5;
  return a1 >= a3 && a1 <= v6 && a2 >= a4 && a2 <= a4 + a6;
}

double DKDAddSizes(double a1, double a2, double a3)
{
  return a1 + a3;
}

double DKDSubtractSizes(double a1, double a2, double a3)
{
  return a1 - a3;
}

double DKDMultiplyPointBySize(double a1, double a2, double a3)
{
  return a1 * a3;
}

double DKDMultiplySizeScalar(double a1, double a2, double a3)
{
  return a1 * a3;
}

double DKDFlooredSize(double a1)
{
  return floor(a1);
}

double DKDMultiplyRectScalar(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v9;
  CGRect v11;

  v9 = a1;
  if (!CGRectIsInfinite(*(CGRect *)&a1))
  {
    v11.origin.x = v9;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    if (!CGRectIsNull(v11))
      return v9 * a5;
  }
  return v9;
}

double DKDFlooredPoint(double a1)
{
  return floor(a1);
}

double DKDPointLength(double a1, double a2)
{
  return sqrt(a2 * a2 + a1 * a1);
}

double DKDPointSquaredLength(double a1, double a2)
{
  return a2 * a2 + a1 * a1;
}

double DKDDistance(double a1, double a2, double a3, double a4)
{
  return sqrt((a2 - a4) * (a2 - a4) + (a1 - a3) * (a1 - a3));
}

double DKDOrthogonalDistance(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a1 - a3;
  if (v4 < 0.0)
    v4 = -v4;
  v5 = a2 - a4;
  if (v5 < 0.0)
    v5 = -v5;
  return v4 + v5;
}

void DKDDistanceToRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  double MaxX;
  double MinY;
  double MaxY;
  double v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;

  v16.origin.x = a3;
  v16.origin.y = a4;
  v16.size.width = a5;
  v16.size.height = a6;
  if (a1 < CGRectGetMinX(v16))
  {
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = a5;
    v17.size.height = a6;
    if (a2 < CGRectGetMinY(v17))
    {
      v18.origin.x = a3;
      v18.origin.y = a4;
      v18.size.width = a5;
      v18.size.height = a6;
      CGRectGetMinX(v18);
LABEL_7:
      v22.origin.x = a3;
      v22.origin.y = a4;
      v22.size.width = a5;
      v22.size.height = a6;
      CGRectGetMinY(v22);
      return;
    }
    v23.origin.x = a3;
    v23.origin.y = a4;
    v23.size.width = a5;
    v23.size.height = a6;
    MaxY = CGRectGetMaxY(v23);
    v24.origin.x = a3;
    v24.origin.y = a4;
    v24.size.width = a5;
    v24.size.height = a6;
    CGRectGetMinX(v24);
    if (a2 <= MaxY)
      return;
LABEL_13:
    v28.origin.x = a3;
    v28.origin.y = a4;
    v28.size.width = a5;
    v28.size.height = a6;
    CGRectGetMaxY(v28);
    return;
  }
  v19.origin.x = a3;
  v19.origin.y = a4;
  v19.size.width = a5;
  v19.size.height = a6;
  MaxX = CGRectGetMaxX(v19);
  v20.origin.x = a3;
  v20.origin.y = a4;
  v20.size.width = a5;
  v20.size.height = a6;
  MinY = CGRectGetMinY(v20);
  if (a1 <= MaxX)
  {
    if (a2 >= MinY)
    {
      v29.origin.x = a3;
      v29.origin.y = a4;
      v29.size.width = a5;
      v29.size.height = a6;
      if (a2 > CGRectGetMaxY(v29))
      {
        v30.origin.x = a3;
        v30.origin.y = a4;
        v30.size.width = a5;
        v30.size.height = a6;
        CGRectGetMaxY(v30);
      }
    }
    else
    {
      v25.origin.x = a3;
      v25.origin.y = a4;
      v25.size.width = a5;
      v25.size.height = a6;
      CGRectGetMinY(v25);
    }
    return;
  }
  if (a2 < MinY)
  {
    v21.origin.x = a3;
    v21.origin.y = a4;
    v21.size.width = a5;
    v21.size.height = a6;
    CGRectGetMaxX(v21);
    goto LABEL_7;
  }
  v26.origin.x = a3;
  v26.origin.y = a4;
  v26.size.width = a5;
  v26.size.height = a6;
  v15 = CGRectGetMaxY(v26);
  v27.origin.x = a3;
  v27.origin.y = a4;
  v27.size.width = a5;
  v27.size.height = a6;
  CGRectGetMaxX(v27);
  if (a2 > v15)
    goto LABEL_13;
}

double DKDDistanceToRectFromRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double v14;
  double MidX;
  double MidY;
  double v17;
  double v18;
  double v19;
  double v20;
  BOOL v21;
  double v22;
  CGRect v25;

  v14 = a1;
  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v25.origin.x = v14;
  v25.origin.y = a2;
  v25.size.width = a3;
  v25.size.height = a4;
  MidY = CGRectGetMidY(v25);
  v17 = a5 + a7;
  if (MidX <= a5 + a7)
    v17 = MidX;
  if (MidX < a5)
    v17 = a5;
  v18 = a6 + a8;
  if (MidY <= a6 + a8)
    v18 = MidY;
  if (MidY >= a6)
    v19 = v18;
  else
    v19 = a6;
  if (v17 >= v14)
  {
    v20 = v14 + a3;
    v21 = v17 <= v14 + a3;
    v14 = v17;
    if (!v21)
      v14 = v20;
  }
  if (v19 >= a2)
  {
    v22 = a2 + a4;
    v21 = v19 <= a2 + a4;
    a2 = v19;
    if (!v21)
      a2 = v22;
  }
  return sqrt((v19 - a2) * (v19 - a2) + (v17 - v14) * (v17 - v14));
}

double DKDClampPointInRect(double a1, double a2, double a3, double a4, double a5)
{
  double v5;

  if (a1 >= a3)
  {
    v5 = a3 + a5;
    a3 = a1;
    if (a1 > v5)
      return v5;
  }
  return a3;
}

double DKDCenterOfRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MidX;
  CGRect v10;

  MidX = CGRectGetMidX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMidY(v10);
  return MidX;
}

BOOL DKDPercentRectInsideRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  CGRect v9;

  v9 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  return CGRectEqualToRect(v9, *MEMORY[0x1E0C9D628]);
}

double DKDRectGetMinPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX;
  CGRect v10;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMinY(v10);
  return MinX;
}

double DKDRectGetMaxPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MaxX;
  CGRect v10;

  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMaxY(v10);
  return MaxX;
}

double DKDRectGetBottomLeftPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MinX;
  CGRect v10;

  MinX = CGRectGetMinX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMaxY(v10);
  return MinX;
}

double DKDRectGetTopRightPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  double MaxX;
  CGRect v10;

  MaxX = CGRectGetMaxX(*(CGRect *)&a1);
  v10.origin.x = a1;
  v10.origin.y = a2;
  v10.size.width = a3;
  v10.size.height = a4;
  CGRectGetMinY(v10);
  return MaxX;
}

double DKDRectGetPointFromCorner(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  double MaxX;
  double v10;
  double MinX;
  CGRect v13;
  CGRect v14;

  switch(a1)
  {
    case -1:
    case 8:
      MaxX = CGRectGetMaxX(*(CGRect *)&a2);
      goto LABEL_8;
    case 1:
      MinX = CGRectGetMinX(*(CGRect *)&a2);
      goto LABEL_6;
    case 2:
      MinX = CGRectGetMaxX(*(CGRect *)&a2);
LABEL_6:
      v10 = MinX;
      v13.origin.x = a2;
      v13.origin.y = a3;
      v13.size.width = a4;
      v13.size.height = a5;
      CGRectGetMinY(v13);
      break;
    case 4:
      MaxX = CGRectGetMinX(*(CGRect *)&a2);
LABEL_8:
      v10 = MaxX;
      v14.origin.x = a2;
      v14.origin.y = a3;
      v14.size.width = a4;
      v14.size.height = a5;
      CGRectGetMaxY(v14);
      break;
    default:
      v10 = *MEMORY[0x1E0C9D538];
      break;
  }
  return v10;
}

double DKDComplexMultiplyPoint(double a1, double a2, double a3, double a4)
{
  return a1 * a3 - a2 * a4;
}

double DKDCrossPoints(double a1, double a2, double a3, double a4)
{
  return a2 * a3 - a1 * a4;
}

double DKDGrowRectToPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double MinX;
  double v11;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;

  if (!CGRectIsNull(*(CGRect *)&a1))
  {
    v13.origin.x = a1;
    v13.origin.y = a2;
    v13.size.width = a3;
    v13.size.height = a4;
    MinX = CGRectGetMinX(v13);
    if (MinX >= a5)
      v11 = a5;
    else
      v11 = MinX;
    v14.origin.x = a1;
    v14.origin.y = a2;
    v14.size.width = a3;
    v14.size.height = a4;
    CGRectGetMaxX(v14);
    v15.origin.x = a1;
    v15.origin.y = a2;
    v15.size.width = a3;
    v15.size.height = a4;
    CGRectGetMinY(v15);
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    CGRectGetMaxY(v16);
    return v11;
  }
  return a5;
}

double DKDFlipRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v14;

  CGRectGetMidY(*(CGRect *)&a1);
  v14.origin.x = a5;
  v14.origin.y = a6;
  v14.size.width = a7;
  v14.size.height = a8;
  CGRectGetMidY(v14);
  return a1;
}

double DKDCenterRectOverRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MidY;
  double v17;
  CGFloat v18;
  double result;
  double MidX;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  v21.origin.x = a5;
  v21.origin.y = a6;
  v21.size.width = a7;
  v21.size.height = a8;
  MidX = CGRectGetMidX(v21);
  v22.origin.x = a5;
  v22.origin.y = a6;
  v22.size.width = a7;
  v22.size.height = a8;
  MidY = CGRectGetMidY(v22);
  v23.origin.x = a1;
  v23.origin.y = a2;
  v23.size.width = a3;
  v23.size.height = a4;
  v17 = CGRectGetMidX(v23);
  v24.origin.x = a1;
  v24.origin.y = a2;
  v24.size.width = a3;
  v24.size.height = a4;
  v18 = MidY - CGRectGetMidY(v24);
  v25.origin.x = a1;
  v25.origin.y = a2;
  v25.size.width = a3;
  v25.size.height = a4;
  *(_QWORD *)&result = (unint64_t)CGRectOffset(v25, MidX - v17, v18);
  return result;
}

uint64_t DKDPointIsFinite(double a1, double a2)
{
  double v2;
  _BOOL4 v3;
  double v4;
  _BOOL4 v5;

  v2 = fabs(a1);
  v3 = v2 < INFINITY;
  if (v2 > INFINITY)
    v3 = 1;
  v4 = fabs(a2);
  v5 = v4 < INFINITY;
  if (v4 > INFINITY)
    v5 = 1;
  return v3 & v5;
}

uint64_t DKDSizeIsFinite(double a1, double a2)
{
  double v2;
  _BOOL4 v3;
  double v4;
  _BOOL4 v5;

  v2 = fabs(a1);
  v3 = v2 < INFINITY;
  if (v2 > INFINITY)
    v3 = 1;
  v4 = fabs(a2);
  v5 = v4 < INFINITY;
  if (v4 > INFINITY)
    v5 = 1;
  return v3 & v5;
}

void DKDRectDivide(CGRect *a1, CGRect *a2, CGRectEdge a3, double a4, double a5, double a6, double a7, CGFloat a8)
{
  _OWORD v8[2];

  memset(v8, 0, sizeof(v8));
  if (!a1)
    a1 = (CGRect *)v8;
  if (!a2)
    a2 = (CGRect *)v8;
  CGRectDivide(*(CGRect *)&a4, a1, a2, a8, a3);
}

uint64_t DKDGetCanvasSpaceCorners(float64x2_t *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  float64x2_t v18;
  double MidX;
  CGFloat MidY;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  long double v27;
  double v28;
  BOOL v29;
  double v30;
  double v31;
  uint64_t v32;
  __int128 v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float64x2_t v46[3];
  double v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51[3];
  CGRect v52;
  CGRect v53;

  v51[2] = *(double *)MEMORY[0x1E0C80C00];
  v18 = a1[1];
  v46[0] = *a1;
  v46[1] = v18;
  v46[2] = a1[2];
  DKDTransformedCornersOfRect(v46, &v47, &v49, &v50, v51, a6, a7, a8, a9);
  v52.origin.x = a6;
  v52.origin.y = a7;
  v52.size.width = a8;
  v52.size.height = a9;
  MidX = CGRectGetMidX(v52);
  v53.origin.x = a6;
  v53.origin.y = a7;
  v53.size.width = a8;
  v53.size.height = a9;
  MidY = CGRectGetMidY(v53);
  v21 = 0;
  v22 = 0;
  v23 = a1[2].f64[0] + MidY * a1[1].f64[0] + a1->f64[0] * MidX;
  v24 = 1000000.0;
  v25 = a1[2].f64[1] + MidY * a1[1].f64[1] + a1->f64[1] * MidX;
  v26 = (double *)&v48;
  do
  {
    v27 = atan2(*v26 - v25, *(v26 - 1) - v23) * 57.2957795;
    v28 = fmod(v27, 360.0);
    v29 = v27 > 360.0 || v27 < 0.0;
    if (!v29)
      v28 = v27;
    if (v28 < 0.0)
      v28 = v28 + 360.0;
    if (v28 == 0.0)
      v30 = 225.0;
    else
      v30 = 360.0 - v28 + -135.0;
    v31 = fabs(v30);
    if (v31 < v24)
    {
      v21 = v22;
      v24 = v31;
    }
    ++v22;
    v26 += 2;
  }
  while (v22 != 4);
  v32 = (v21 + 2) & 3;
  if (v21 + 2 <= 0)
    v32 = -(-(v21 + 2) & 3);
  v33 = *((_OWORD *)&v47 + v32);
  *a2 = *((_OWORD *)&v47 + v21);
  *a4 = v33;
  v34 = a1->f64[1] * a1[1].f64[0] - a1->f64[0] * a1[1].f64[1];
  v35 = v21 + 3;
  if (v34 > 0.0)
    v36 = v21 + 1;
  else
    v36 = v21 + 3;
  v37 = v36 & 3;
  if (v34 <= 0.0)
    v35 = v21 + 1;
  v38 = -v36;
  v29 = v38 < 0;
  v39 = v38 & 3;
  if (v29)
    v40 = v37;
  else
    v40 = -v39;
  *a5 = *((_OWORD *)&v47 + v40);
  v41 = v35 & 3;
  v42 = -v35;
  v29 = v42 < 0;
  v43 = v42 & 3;
  if (v29)
    v44 = v41;
  else
    v44 = -v43;
  *a3 = *((_OWORD *)&v47 + v44);
  return v21;
}

double DKDAngleFromDelta(long double a1, long double a2)
{
  return atan2(a2, a1);
}

void DKDNormalizeAngleInDegrees(long double a1)
{
  fmod(a1, 360.0);
}

double DKDInterpolatePoints(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + a1 * (1.0 - a5);
}

double DKDMixPoints(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + a1 * (1.0 - a5);
}

uint64_t DKDMixBOOLs(uint64_t result, unsigned int a2, double a3)
{
  if (a3 > 0.5)
    return a2;
  else
    return result;
}

double DKDMixFloats(double a1, double a2, double a3)
{
  return a2 * a3 + a1 * (1.0 - a3);
}

double DKDNormalizedFloatInRange(double a1, double a2, double a3)
{
  return (a3 - a1) / (a2 - a1);
}

void DKDMixAnglesInDegrees(long double a1, long double a2, double a3)
{
  double v6;
  double v8;
  double v9;

  v6 = fmod(a1, 360.0);
  if (a1 <= 360.0 && a1 >= 0.0)
    v6 = a1;
  if (v6 < 0.0)
    v6 = v6 + 360.0;
  if (v6 == 0.0)
    v8 = 0.0;
  else
    v8 = v6;
  v9 = fmod(a2, 360.0);
  if (a2 <= 360.0 && a2 >= 0.0)
    v9 = a2;
  if (v9 < 0.0)
    v9 = v9 + 360.0;
  if (v9 == 0.0)
    v9 = 0.0;
  if (vabdd_f64(v9, v8) > 180.0)
  {
    if (v8 <= v9)
      v9 = v9 + -360.0;
    else
      v9 = v9 + 360.0;
  }
  fmod(v9 * a3 + v8 * (1.0 - a3), 360.0);
}

void DKDDiffAngleInRadians(long double a1, long double a2)
{
  fmod(a1, 6.28318531);
  fmod(a2, 6.28318531);
}

void DKDNormalizeAngleInRadians(long double a1)
{
  fmod(a1, 6.28318531);
}

void DKDMixAnglesInRadians(long double a1, long double a2, double a3)
{
  double v6;
  double v8;
  double v9;

  v6 = fmod(a1, 6.28318531);
  if (a1 <= 6.28318531 && a1 >= 0.0)
    v6 = a1;
  if (v6 < 0.0)
    v6 = v6 + 6.28318531;
  if (v6 == 0.0)
    v8 = 0.0;
  else
    v8 = v6;
  v9 = fmod(a2, 6.28318531);
  if (a2 <= 6.28318531 && a2 >= 0.0)
    v9 = a2;
  if (v9 < 0.0)
    v9 = v9 + 6.28318531;
  if (v9 == 0.0)
    v9 = 0.0;
  if (vabdd_f64(v9, v8) > 3.14159265)
  {
    if (v8 <= v9)
      v9 = v9 + -6.28318531;
    else
      v9 = v9 + 6.28318531;
  }
  fmod(v9 * a3 + v8 * (1.0 - a3), 6.28318531);
}

double DKDMixNormalizedAnglesInRadians(double a1, double a2, double a3)
{
  double v3;
  double result;

  v3 = vabdd_f64(a2, a1);
  result = a2 * a3 + a1 * (1.0 - a3);
  if (v3 > 3.14159265)
  {
    result = result + -3.14159265;
    if (result < 0.0)
      return result + 6.28318531;
  }
  return result;
}

double DKDMixSizes(double a1, double a2, double a3, double a4, double a5)
{
  return a3 * a5 + a1 * (1.0 - a5);
}

double DKDMixRects(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  return a5 * a9 + a1 * (1.0 - a9);
}

double DKDTranslatedRectMaximizingOverlapWithRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  double MaxX;
  double MinX;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double MaxY;
  double MinY;
  double v25;
  double v26;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v36.origin.x = a5;
  v36.origin.y = a6;
  v36.size.width = a7;
  v36.size.height = a8;
  MaxX = CGRectGetMaxX(v36);
  v34 = a1;
  v37.origin.x = a1;
  v37.origin.y = a2;
  v37.size.width = a3;
  v37.size.height = a4;
  if (MaxX > CGRectGetMaxX(v37))
  {
    v38.origin.x = a5;
    v38.origin.y = a6;
    v38.size.width = a7;
    v38.size.height = a8;
    MinX = CGRectGetMinX(v38);
    v39.origin.x = a1;
    v39.origin.y = a2;
    v39.size.width = a3;
    v39.size.height = a4;
    if (MinX > CGRectGetMinX(v39))
    {
      v40.origin.x = a5;
      v40.origin.y = a6;
      v40.size.width = a7;
      v40.size.height = a8;
      v29 = CGRectGetMaxX(v40);
      v41.origin.x = a1;
      v41.origin.y = a2;
      v41.size.width = a3;
      v41.size.height = a4;
      v30 = v29 - CGRectGetMaxX(v41);
      v42.origin.x = a5;
      v42.origin.y = a6;
      v42.size.width = a7;
      v42.size.height = a8;
      v28 = CGRectGetMinX(v42);
      v43.origin.x = a1;
      v43.origin.y = a2;
      v43.size.width = a3;
      v43.size.height = a4;
      v17 = v28 - CGRectGetMinX(v43);
      if (v30 < v17)
        v17 = v30;
      v18 = a1 + v17;
LABEL_11:
      v34 = v18;
      goto LABEL_12;
    }
  }
  v44.origin.x = a5;
  v44.origin.y = a6;
  v44.size.width = a7;
  v44.size.height = a8;
  v19 = CGRectGetMinX(v44);
  v45.origin.x = a1;
  v45.origin.y = a2;
  v45.size.width = a3;
  v45.size.height = a4;
  if (v19 < CGRectGetMinX(v45))
  {
    v46.origin.x = a5;
    v46.origin.y = a6;
    v46.size.width = a7;
    v46.size.height = a8;
    v20 = CGRectGetMaxX(v46);
    v47.origin.x = a1;
    v47.origin.y = a2;
    v47.size.width = a3;
    v47.size.height = a4;
    if (v20 < CGRectGetMaxX(v47))
    {
      v48.origin.x = a1;
      v48.origin.y = a2;
      v48.size.width = a3;
      v48.size.height = a4;
      v31 = CGRectGetMinX(v48);
      v49.origin.x = a5;
      v49.origin.y = a6;
      v49.size.width = a7;
      v49.size.height = a8;
      v32 = v31 - CGRectGetMinX(v49);
      v50.origin.x = a1;
      v50.origin.y = a2;
      v50.size.width = a3;
      v50.size.height = a4;
      v21 = CGRectGetMaxX(v50);
      v51.origin.x = a5;
      v51.origin.y = a6;
      v51.size.width = a7;
      v51.size.height = a8;
      v22 = v21 - CGRectGetMaxX(v51);
      if (v32 < v22)
        v22 = v32;
      v18 = a1 - v22;
      goto LABEL_11;
    }
  }
LABEL_12:
  v52.origin.x = a5;
  v52.origin.y = a6;
  v52.size.width = a7;
  v52.size.height = a8;
  MaxY = CGRectGetMaxY(v52);
  v53.origin.x = a1;
  v53.origin.y = a2;
  v53.size.width = a3;
  v53.size.height = a4;
  if (MaxY <= CGRectGetMaxY(v53))
    goto LABEL_15;
  v54.origin.x = a5;
  v54.origin.y = a6;
  v54.size.width = a7;
  v54.size.height = a8;
  MinY = CGRectGetMinY(v54);
  v55.origin.x = a1;
  v55.origin.y = a2;
  v55.size.width = a3;
  v55.size.height = a4;
  if (MinY <= CGRectGetMinY(v55))
  {
LABEL_15:
    v60.origin.x = a5;
    v60.origin.y = a6;
    v60.size.width = a7;
    v60.size.height = a8;
    v25 = CGRectGetMinY(v60);
    v61.origin.x = a1;
    v61.origin.y = a2;
    v61.size.width = a3;
    v61.size.height = a4;
    if (v25 < CGRectGetMinY(v61))
    {
      v62.origin.x = a5;
      v62.origin.y = a6;
      v62.size.width = a7;
      v62.size.height = a8;
      v26 = CGRectGetMaxY(v62);
      v63.origin.x = a1;
      v63.origin.y = a2;
      v63.size.width = a3;
      v63.size.height = a4;
      if (v26 < CGRectGetMaxY(v63))
      {
        v64.origin.x = a1;
        v64.origin.y = a2;
        v64.size.width = a3;
        v64.size.height = a4;
        CGRectGetMinY(v64);
        v65.origin.x = a5;
        v65.origin.y = a6;
        v65.size.width = a7;
        v65.size.height = a8;
        CGRectGetMinY(v65);
        v66.origin.x = a1;
        v66.origin.y = a2;
        v66.size.width = a3;
        v66.size.height = a4;
        CGRectGetMaxY(v66);
        v67.origin.x = a5;
        v67.origin.y = a6;
        v67.size.width = a7;
        v67.size.height = a8;
        CGRectGetMaxY(v67);
      }
    }
  }
  else
  {
    v56.origin.x = a5;
    v56.origin.y = a6;
    v56.size.width = a7;
    v56.size.height = a8;
    CGRectGetMaxY(v56);
    v57.origin.x = a1;
    v57.origin.y = a2;
    v57.size.width = a3;
    v57.size.height = a4;
    CGRectGetMaxY(v57);
    v58.origin.x = a5;
    v58.origin.y = a6;
    v58.size.width = a7;
    v58.size.height = a8;
    CGRectGetMinY(v58);
    v59.origin.x = a1;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    CGRectGetMinY(v59);
  }
  return v34;
}

double DKDRectByPinningEdgeToRect(int a1, double MinX, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  double MaxX;
  CGRect v15;
  CGRect v16;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  switch(a1)
  {
    case 0:
      v15.origin.x = a6;
      v15.origin.y = a7;
      v15.size.width = a8;
      v15.size.height = a9;
      MinX = CGRectGetMinX(v15);
      break;
    case 1:
      v16.origin.x = a6;
      v16.origin.y = a7;
      v16.size.width = a8;
      v16.size.height = a9;
      CGRectGetMinY(v16);
      break;
    case 2:
      v17.origin.x = a6;
      v17.origin.y = a7;
      v17.size.width = a8;
      v17.size.height = a9;
      MaxX = CGRectGetMaxX(v17);
      v18.origin.x = MinX;
      v18.origin.y = a3;
      v18.size.width = a4;
      v18.size.height = a5;
      MinX = MaxX - CGRectGetWidth(v18);
      break;
    case 3:
      v19.origin.x = a6;
      v19.origin.y = a7;
      v19.size.width = a8;
      v19.size.height = a9;
      CGRectGetMaxY(v19);
      v20.origin.x = MinX;
      v20.origin.y = a3;
      v20.size.width = a4;
      v20.size.height = a5;
      CGRectGetHeight(v20);
      break;
    default:
      return MinX;
  }
  return MinX;
}

double DKDOriginRotate(double *a1, double a2, double a3)
{
  __double2 v5;
  double result;

  v5 = __sincos_stret(a3);
  result = v5.__sinval * a2;
  *a1 = v5.__cosval * a2;
  a1[1] = v5.__sinval * a2;
  return result;
}

double DKDNiceAngleFromDelta(long double a1, long double a2)
{
  double result;

  if (a2 != 0.0)
    return atan2(a2, a1);
  result = 3.14159265;
  if (a1 >= 0.0)
    return 0.0;
  return result;
}

double DKDDeltaFromAngle(double a1)
{
  if (a1 == 0.0)
    return 1.0;
  return __sincos_stret(a1).__cosval;
}

double DKDShiftConstrainDelta(long double a1, long double a2)
{
  long double v4;

  v4 = atan2(a2, a1);
  return sqrt(a2 * a2 + a1 * a1)
       * __sincos_stret((double)(int)((v4 + 6.28318531) / 0.785398163 + 0.5) * 0.785398163).__cosval;
}

double DKDShiftConstrainDeltaToAngle(double a1, double a2, double a3)
{
  return __sincos_stret(a3).__cosval * sqrt(a2 * a2 + a1 * a1);
}

double DKDRotatePoint90Degrees(int a1, double a2, double a3)
{
  if (a1)
    return -a3;
  else
    return a3;
}

void DKDNormalizeSignedDifferenceAngleInDegrees(double a1, double a2)
{
  fmod(a1 - a2, 360.0);
}

double DKDNormalizeDifferenceAngleInDegrees(double a1, double a2)
{
  double v2;

  v2 = fmod(a1 - a2, 360.0);
  if (v2 > 180.0)
    v2 = v2 + -360.0;
  if (v2 < -180.0)
    v2 = v2 + 360.0;
  return fabs(v2);
}

void DKDNormalizeAngleAboutZeroInRadians(double a1)
{
  fmod(a1 + 3.14159265, 6.28318531);
}

double DKDDeltaApplyAffineTransform(float64x2_t *a1, double a2, double a3)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&vsubq_f64(vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], a3), *a1, a2)), vaddq_f64(a1[2], vmlaq_n_f64(vmulq_n_f64(a1[1], *(double *)(MEMORY[0x1E0C9D538] + 8)), *a1, *MEMORY[0x1E0C9D538])));
  return result;
}

void DKDDistanceBetweenAnglesInRadians(long double a1, long double a2)
{
  fmod(a1, 6.28318531);
  fmod(a2, 6.28318531);
}

double DKDNormalizedPointInRect(double a1, double a2, double a3, double a4, double a5)
{
  return (a1 - a3) / a5;
}

double DKDPointFromNormalizedRect(double a1, double a2, double a3, double a4, double a5)
{
  return a3 + a1 * a5;
}

void DKDRectFromNormalizedSubrect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  CGRect v12;
  CGRect v13;

  v12.origin.x = a5;
  v12.origin.y = a6;
  v12.size.width = a7;
  v12.size.height = a8;
  CGRectGetMaxX(v12);
  v13.origin.x = a5;
  v13.origin.y = a6;
  v13.size.width = a7;
  v13.size.height = a8;
  CGRectGetMaxY(v13);
}

void DKDNormalizedSubrectInRect(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGRect v8;

  CGRectGetMaxX(*(CGRect *)&a1);
  v8.origin.x = a1;
  v8.origin.y = a2;
  v8.size.width = a3;
  v8.size.height = a4;
  CGRectGetMaxY(v8);
}

double DKDRectSubtractingRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  double v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGRectEdge v21;
  double MaxX;
  double v23;
  double v24;
  double v25;
  double MinX;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  double MinY;
  double v33;
  double MaxY;
  double v35;
  CGFloat v36;
  double v37;
  double v38;
  CGFloat v39;
  CGRect slice;
  CGRect remainder;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v11 = a1;
  v42 = CGRectIntersection(*(CGRect *)&a1, *(CGRect *)&a5);
  x = v42.origin.x;
  y = v42.origin.y;
  width = v42.size.width;
  height = v42.size.height;
  if (!CGRectIsNull(v42))
  {
    v43.origin.x = x;
    v43.origin.y = y;
    v43.size.width = width;
    v43.size.height = height;
    MaxY = CGRectGetMaxY(v43);
    v44.origin.x = v11;
    v44.origin.y = a2;
    v44.size.width = a3;
    v44.size.height = a4;
    MinY = CGRectGetMinY(v44);
    v45.origin.x = v11;
    v45.origin.y = a2;
    v45.size.width = a3;
    v45.size.height = a4;
    v37 = CGRectGetMaxY(v45);
    v46.origin.x = x;
    v46.origin.y = y;
    v46.size.width = width;
    v46.size.height = height;
    v38 = v37 - CGRectGetMaxY(v46);
    v47.origin.x = v11;
    v47.origin.y = a2;
    v47.size.width = a3;
    v47.size.height = a4;
    v33 = v38 * CGRectGetWidth(v47);
    v36 = height;
    v39 = x;
    v48.origin.x = x;
    v48.origin.y = y;
    v48.size.width = width;
    v48.size.height = height;
    v16 = CGRectGetMinY(v48);
    v49.origin.x = v11;
    v49.origin.y = a2;
    v49.size.width = a3;
    v49.size.height = a4;
    v17 = v16 - CGRectGetMinY(v49);
    v50.origin.x = v11;
    v50.origin.y = a2;
    v50.size.width = a3;
    v50.size.height = a4;
    v18 = v17 * CGRectGetWidth(v50);
    v19 = v33;
    if (v18 <= v33)
    {
      v35 = MaxY - MinY;
      v21 = CGRectMinYEdge;
    }
    else
    {
      v51.origin.x = v11;
      v51.origin.y = a2;
      v51.size.width = a3;
      v51.size.height = a4;
      v20 = CGRectGetMaxY(v51);
      v52.size.height = v36;
      v52.origin.x = v39;
      v52.origin.y = y;
      v52.size.width = width;
      v35 = v20 - CGRectGetMinY(v52);
      v21 = CGRectMaxYEdge;
      v19 = v18;
    }
    v53.origin.x = v11;
    v53.origin.y = a2;
    v53.size.width = a3;
    v53.size.height = a4;
    MaxX = CGRectGetMaxX(v53);
    v54.size.height = v36;
    v54.origin.x = v39;
    v54.origin.y = y;
    v54.size.width = width;
    v23 = MaxX - CGRectGetMaxX(v54);
    v55.origin.x = v11;
    v55.origin.y = a2;
    v55.size.width = a3;
    v55.size.height = a4;
    v24 = v23 * CGRectGetHeight(v55);
    if (v24 > v19)
    {
      v56.size.height = v36;
      v56.origin.x = v39;
      v56.origin.y = y;
      v56.size.width = width;
      v25 = CGRectGetMaxX(v56);
      v57.origin.x = v11;
      v57.origin.y = a2;
      v57.size.width = a3;
      v57.size.height = a4;
      v21 = CGRectMinXEdge;
      v35 = v25 - CGRectGetMinX(v57);
      v19 = v24;
    }
    v58.size.height = v36;
    v58.origin.x = v39;
    v58.origin.y = y;
    v58.size.width = width;
    MinX = CGRectGetMinX(v58);
    v59.origin.x = v11;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    v27 = MinX - CGRectGetMinX(v59);
    v60.origin.x = v11;
    v60.origin.y = a2;
    v60.size.width = a3;
    v60.size.height = a4;
    v28 = CGRectGetHeight(v60);
    v29 = v35;
    if (v27 * v28 > v19)
    {
      v61.origin.x = v11;
      v61.origin.y = a2;
      v61.size.width = a3;
      v61.size.height = a4;
      v30 = CGRectGetMaxX(v61);
      v62.size.height = v36;
      v62.origin.x = v39;
      v62.origin.y = y;
      v62.size.width = width;
      v29 = v30 - CGRectGetMinX(v62);
      v21 = CGRectMaxXEdge;
    }
    memset(&remainder, 0, sizeof(remainder));
    memset(&slice, 0, sizeof(slice));
    v63.origin.x = v11;
    v63.origin.y = a2;
    v63.size.width = a3;
    v63.size.height = a4;
    CGRectDivide(v63, &slice, &remainder, v29, v21);
    return remainder.origin.x;
  }
  return v11;
}

double DKDSizeWithAspectRatio(int a1, double result, double a3, double a4, double a5)
{
  BOOL v5;
  double v6;

  v5 = result == a4 && a3 == a5;
  if (!v5 && a4 != 0.0 && a5 != 0.0 && a4 != 3.40282347e38 && a5 != 3.40282347e38)
  {
    if (a1)
    {
      v6 = sqrt(a5 * a5 + a4 * a4);
      return a4 / v6 * (a3 * (a5 / v6) + result * (a4 / v6));
    }
    else if (vabdd_f64(result, a4) < 0.01)
    {
      return a3 * a4 / a5;
    }
  }
  return result;
}

double DKDSizeExpandedToMatchAspectRatio(double result, double a2, double a3, double a4)
{
  _BOOL4 v4;
  BOOL v5;
  double v6;

  v4 = result != a3;
  if (a2 != a4)
    v4 = 1;
  v5 = a3 <= 0.0 || !v4;
  if (!v5 && a4 > 0.0)
  {
    v6 = a3 / a4;
    if (v6 > result / a2)
      return a2 * v6;
  }
  return result;
}

double DKDScaleSizeWithinSize(double a1, double a2, double a3, double a4)
{
  if (a1 / a2 < a3 / a4)
    return a1 * (a4 / a2);
  return a3;
}

double DKDShrinkSizeToFitInSize(double result, double a2, double a3, double a4)
{
  BOOL v4;
  BOOL v5;

  if (result <= a3)
  {
    v4 = a2 == a4;
    v5 = a2 < a4;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (!v5 && !v4)
  {
    if (result / a2 <= a3 / a4)
    {
      if (result / a2 < a3 / a4)
        return result * (a4 / a2);
      else
        return a3;
    }
    else
    {
      return a3;
    }
  }
  return result;
}

double DKDFitOrFillSizeInSize(int a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;

  v5 = a4 / a2;
  v6 = a5 / a3;
  if (v5 >= v6)
    v7 = v5;
  else
    v7 = v6;
  if (v5 >= v6)
    v5 = v6;
  if (a1)
    v5 = v7;
  return a2 * v5;
}

double DKDFitOrFillSizeInRect(int a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  double v11;
  double v12;
  double v13;

  v11 = a6 / a2;
  if (a6 / a2 >= a7 / a3)
    v12 = a6 / a2;
  else
    v12 = a7 / a3;
  if (a6 / a2 >= a7 / a3)
    v11 = a7 / a3;
  if (a1)
    v13 = v12;
  else
    v13 = v11;
  return DKDCenterRectOverRect(0.0, 0.0, a2 * v13, a3 * v13, a4, a5, a6, a7);
}

void DKDScaleRectAroundPoint(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7)
{
  CGAffineTransform v12;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGAffineTransform v15;
  CGAffineTransform v16;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGRect v19;

  memset(&v18, 0, sizeof(v18));
  CGAffineTransformMakeTranslation(&v18, -a5, -a6);
  memset(&v17, 0, sizeof(v17));
  CGAffineTransformMakeScale(&v17, a7, a7);
  memset(&v16, 0, sizeof(v16));
  t1 = v18;
  t2 = v17;
  CGAffineTransformConcat(&v15, &t1, &t2);
  t1 = v18;
  CGAffineTransformInvert(&v12, &t1);
  CGAffineTransformConcat(&v16, &v15, &v12);
  t1 = v16;
  v19.origin.x = a1;
  v19.origin.y = a2;
  v19.size.width = a3;
  v19.size.height = a4;
  CGRectApplyAffineTransform(v19, &t1);
}

void DKDVisibleUnscaledRectForNewScale(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, CGFloat a7, double a8)
{
  float64x2_t v14;
  CGAffineTransform v17;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGRect v20;
  CGRect v21;

  memset(&v19, 0, sizeof(v19));
  CGAffineTransformMakeScale(&v19, a7, a7);
  memset(&v18, 0, sizeof(v18));
  v17 = v19;
  CGAffineTransformInvert(&v18, &v17);
  v17 = v18;
  v20.origin.x = a1;
  v20.origin.y = a2;
  v20.size.width = a3;
  v20.size.height = a4;
  v21 = CGRectApplyAffineTransform(v20, &v17);
  v14 = vaddq_f64(*(float64x2_t *)&v18.tx, vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v18.c, a6), *(float64x2_t *)&v18.a, a5));
  DKDScaleRectAroundPoint(v21.origin.x, v21.origin.y, v21.size.width, v21.size.height, v14.f64[0], v14.f64[1], a7 / a8);
}

double DKDRectWithInverseNormalizedRect(double a1, double a2, double a3)
{
  return -a1 / a3;
}

double DKDRectByExpandingBoundingRectToContentRect(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10, double a11, double a12)
{
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double MaxX;
  double v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v25 = a1 + a5 * a3;
  v36.origin.x = a5;
  v36.origin.y = a6;
  v36.size.width = a7;
  v36.size.height = a8;
  MaxX = CGRectGetMaxX(v36);
  v37.origin.x = a5;
  v37.origin.y = a6;
  v37.size.width = a7;
  v37.size.height = a8;
  CGRectGetMaxY(v37);
  v26 = a1 + MaxX * a3;
  if (v25 >= v26)
    v27 = a1 + MaxX * a3;
  else
    v27 = v25;
  if (v25 >= v26)
    v26 = v25;
  v35 = v27;
  v28 = v26 - v27;
  v29 = -a9 / a11 * (v26 - v27);
  v38.origin.x = -a9 / a11;
  v38.origin.y = -a10 / a12;
  v38.size.width = 1.0 / a11;
  v38.size.height = 1.0 / a12;
  v30 = CGRectGetMaxX(v38);
  v39.origin.x = -a9 / a11;
  v39.origin.y = -a10 / a12;
  v39.size.width = 1.0 / a11;
  v39.size.height = 1.0 / a12;
  CGRectGetMaxY(v39);
  if (v29 >= v30 * v28)
    v31 = v30 * v28;
  else
    v31 = v29;
  return v35 + v31;
}

double DKDAliasRound(double a1)
{
  double v1;
  double v2;
  double result;

  v1 = floor(a1);
  v2 = a1 - v1;
  result = ceil(a1);
  if (v2 < 0.49)
    return v1;
  return result;
}

double DKDAliasRoundedPoint(double a1)
{
  double v1;
  double v2;
  double result;

  v1 = floor(a1);
  v2 = a1 - v1;
  result = ceil(a1);
  if (v2 < 0.49)
    return v1;
  return result;
}

double DKDRoundForScale(double a1, double a2)
{
  return round(a1 * a2) / a2;
}

double DKDRoundedPoint(double a1)
{
  return round(a1);
}

double DKDRoundedPointForScale(double a1, double a2, double a3)
{
  return 1.0 / a3 * round(a1 * a3);
}

double DKDRoundedSize(double a1)
{
  return round(a1);
}

double DKDRoundedSizeForScale(double a1, double a2, double a3)
{
  return round(a1 * a3) / a3;
}

double DKDCeilSize(double a1)
{
  return ceil(a1);
}

double DKDRoundedRect(double a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return DKDRoundedRectForScale(a1, a2, a3, a4, 1.0);
}

double DKDRoundedRectForScale(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v14;
  CGFloat v15;
  CGFloat v16;
  double MaxY;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v8 = a1;
  if (a5 != 0.0 && !CGRectIsNull(*(CGRect *)&a1))
  {
    v19.origin.x = DKDMultiplyRectScalar(v8, a2, a3, a4, a5);
    x = v19.origin.x;
    y = v19.origin.y;
    width = v19.size.width;
    height = v19.size.height;
    v14 = round(CGRectGetMinX(v19));
    v20.origin.x = x;
    v20.origin.y = y;
    v20.size.width = width;
    v20.size.height = height;
    v15 = round(CGRectGetMinY(v20));
    v21.origin.x = x;
    v21.origin.y = y;
    v21.size.width = width;
    v21.size.height = height;
    v16 = round(CGRectGetMaxX(v21)) - v14;
    v22.origin.x = x;
    v22.origin.y = y;
    v22.size.width = width;
    v22.size.height = height;
    MaxY = CGRectGetMaxY(v22);
    return DKDMultiplyRectScalar(v14, v15, v16, round(MaxY) - v15, 1.0 / a5);
  }
  return v8;
}

double DKDAliasRoundedRectForScale(double a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5)
{
  double v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double v15;
  double v16;
  double v17;
  double v18;
  double MinY;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  double MaxX;
  double v25;
  double v26;
  double v27;
  double MaxY;
  double v29;
  double v30;
  double v31;
  double v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;

  v8 = a1;
  if (a5 != 0.0 && !CGRectIsNull(*(CGRect *)&a1))
  {
    v34.origin.x = DKDMultiplyRectScalar(v8, a2, a3, a4, a5);
    x = v34.origin.x;
    y = v34.origin.y;
    width = v34.size.width;
    height = v34.size.height;
    MinX = CGRectGetMinX(v34);
    v15 = floor(MinX);
    v16 = MinX - v15;
    v17 = ceil(MinX);
    if (v16 >= 0.49)
      v18 = v17;
    else
      v18 = v15;
    v35.origin.x = x;
    v35.origin.y = y;
    v35.size.width = width;
    v35.size.height = height;
    MinY = CGRectGetMinY(v35);
    v20 = floor(MinY);
    v21 = MinY - v20;
    v22 = ceil(MinY);
    if (v21 >= 0.49)
      v23 = v22;
    else
      v23 = v20;
    v36.origin.x = x;
    v36.origin.y = y;
    v36.size.width = width;
    v36.size.height = height;
    MaxX = CGRectGetMaxX(v36);
    v25 = floor(MaxX);
    v26 = MaxX - v25;
    v27 = ceil(MaxX);
    if (v26 < 0.49)
      v27 = v25;
    v33 = v27 - v18;
    v37.origin.x = x;
    v37.origin.y = y;
    v37.size.width = width;
    v37.size.height = height;
    MaxY = CGRectGetMaxY(v37);
    v29 = floor(MaxY);
    v30 = MaxY - v29;
    v31 = ceil(MaxY);
    if (v30 < 0.49)
      v31 = v29;
    return DKDMultiplyRectScalar(v18, v23, v33, v31 - v23, 1.0 / a5);
  }
  return v8;
}

double DKDRoundedMinX(double a1, double a2, double a3, double a4)
{
  return round(CGRectGetMinX(*(CGRect *)&a1));
}

double DKDRoundedMidX(double a1, double a2, double a3, double a4)
{
  return round((round(a1) + round(CGRectGetMaxX(*(CGRect *)&a1))) * 0.5);
}

double DKDRoundedMaxX(double a1, double a2, double a3, double a4)
{
  return round(CGRectGetMaxX(*(CGRect *)&a1));
}

double DKDRoundedMinY(double a1, double a2, double a3, double a4)
{
  return round(CGRectGetMinY(*(CGRect *)&a1));
}

double DKDRoundedMidY(double a1, double a2, double a3, double a4)
{
  return round((round(a2) + round(CGRectGetMaxY(*(CGRect *)&a1))) * 0.5);
}

double DKDRoundedMaxY(double a1, double a2, double a3, double a4)
{
  return round(CGRectGetMaxY(*(CGRect *)&a1));
}

double DKDFloorForScale(double a1, double a2)
{
  return round(a1 * a2) / a2;
}

uint64_t DKDSizeHasNaNComponents()
{
  return 0;
}

uint64_t DKDRectHasNaNComponents()
{
  return 0;
}

uint64_t DKDPointHasNaNComponents()
{
  return 0;
}

uint64_t DKDTransformHasNaNComponents()
{
  return 0;
}

uint64_t DKDIntersectionOfInfiniteLines(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  return DKDIntersectionOfLines(a1, a2, a3, a4, a5, 1, 1);
}

uint64_t DKDIntersectionOfSegments(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  return DKDIntersectionOfLines(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t DKDPointOrientation(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  unsigned int v8;

  v6 = (a4 - a2) * (a5 - a3) - (a3 - a1) * (a6 - a4);
  v7 = fabs(v6);
  if (v6 > 0.0)
    v8 = 1;
  else
    v8 = 2;
  if (v7 >= 0.000001)
    return v8;
  else
    return 0;
}

double drawing::Drawing::Drawing(drawing::Drawing *this)
{
  double result;

  *(_QWORD *)this = &off_1E77749F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E77749F0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  return result;
}

void drawing::Drawing::~Drawing(void ***this)
{
  void **v2;
  void **v3;
  void **v4;

  *this = (void **)&off_1E77749F0;
  std::shared_ptr<PKProtobufUnknownFields>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  v4 = (void **)(this + 13);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<PB::Data>::reset[abi:ne180100](this + 12, 0);
  v4 = (void **)(this + 9);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(this + 6);
  std::vector<PB::Data>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(this + 3);
  std::vector<std::unique_ptr<drawing::Stroke>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = this[2];
  this[2] = 0;
  if (v2)
    (*((void (**)(void **))*v2 + 1))(v2);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    (*((void (**)(void **))*v3 + 1))(v3);
  PB::Base::~Base((PB::Base *)this);
}

{
  drawing::Drawing::~Drawing(this);
  JUMPOUT(0x1C3B7F770);
}

drawing::Drawing *drawing::Drawing::Drawing(drawing::Drawing *this, const drawing::Drawing *a2)
{
  int64x2_t *v4;
  drawing::Stroke ***v5;
  int64x2_t *v6;
  const drawing::StrokeID **v7;
  const drawing::StrokeID **v8;
  const drawing::StrokeID *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  const drawing::Ink **v26;
  const drawing::Ink **j;
  const drawing::Ink *v28;
  drawing::Ink *v29;
  unint64_t v30;
  drawing::Ink **v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  drawing::Ink **v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  drawing::Ink *v42;
  int64x2_t v43;
  char *v44;
  const drawing::Stroke **v45;
  const drawing::Stroke **v46;
  drawing::Rectangle *v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  PB::Data *v54;
  uint64_t *v56;
  const drawing::Drawing *i;
  void **v58;
  int64x2_t v59;
  char *v60;
  char *v61;

  *(_QWORD *)this = &off_1E77749F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  v56 = (uint64_t *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (int64x2_t *)((char *)this + 24);
  *(_OWORD *)((char *)this + 72) = 0u;
  v5 = (drawing::Stroke ***)((char *)this + 72);
  *(_OWORD *)((char *)this + 104) = 0u;
  v6 = (int64x2_t *)((char *)this + 104);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 17) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]((_QWORD *)this + 16, (uint64_t *)a2 + 16);
  if (this != a2)
    std::vector<PB::Data>::__assign_with_size[abi:ne180100]<PB::Data*,PB::Data*>((uint64_t)this + 48, *((PB::Data **)a2 + 6), *((PB::Data **)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  v8 = (const drawing::StrokeID **)*((_QWORD *)a2 + 13);
  v7 = (const drawing::StrokeID **)*((_QWORD *)a2 + 14);
  for (i = a2; v8 != v7; ++v8)
  {
    v9 = *v8;
    v10 = operator new();
    drawing::StrokeID::StrokeID(v10, v9);
    v12 = (uint64_t *)*((_QWORD *)this + 14);
    v11 = *((_QWORD *)this + 15);
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((uint64_t)v12 - v6->i64[0]) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v15 = v11 - v6->i64[0];
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      v61 = (char *)this + 120;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 120, v17);
      else
        v18 = 0;
      v19 = (uint64_t *)&v18[8 * v14];
      v20 = &v18[8 * v17];
      v60 = v20;
      *v19 = v10;
      v13 = v19 + 1;
      v59.i64[1] = (uint64_t)(v19 + 1);
      v22 = (_QWORD *)*((_QWORD *)this + 13);
      v21 = (_QWORD *)*((_QWORD *)this + 14);
      if (v21 == v22)
      {
        v24 = vdupq_n_s64((unint64_t)v21);
      }
      else
      {
        do
        {
          v23 = *--v21;
          *v21 = 0;
          *--v19 = v23;
        }
        while (v21 != v22);
        v24 = *v6;
        v13 = (_QWORD *)v59.i64[1];
        v20 = v60;
      }
      *((_QWORD *)this + 13) = v19;
      *((_QWORD *)this + 14) = v13;
      v59 = v24;
      v25 = (char *)*((_QWORD *)this + 15);
      *((_QWORD *)this + 15) = v20;
      v60 = v25;
      v58 = (void **)v24.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    *((_QWORD *)this + 14) = v13;
  }
  v26 = (const drawing::Ink **)*((_QWORD *)a2 + 3);
  for (j = (const drawing::Ink **)*((_QWORD *)a2 + 4); v26 != j; ++v26)
  {
    v28 = *v26;
    v29 = (drawing::Ink *)operator new();
    drawing::Ink::Ink(v29, v28);
    v31 = (drawing::Ink **)*((_QWORD *)this + 4);
    v30 = *((_QWORD *)this + 5);
    if ((unint64_t)v31 >= v30)
    {
      v33 = ((uint64_t)v31 - v4->i64[0]) >> 3;
      if ((unint64_t)(v33 + 1) >> 61)
        std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
      v34 = v30 - v4->i64[0];
      v35 = v34 >> 2;
      if (v34 >> 2 <= (unint64_t)(v33 + 1))
        v35 = v33 + 1;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      v61 = (char *)this + 40;
      if (v36)
        v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 40, v36);
      else
        v37 = 0;
      v38 = (drawing::Ink **)&v37[8 * v33];
      v39 = &v37[8 * v36];
      v60 = v39;
      *v38 = v29;
      v32 = v38 + 1;
      v59.i64[1] = (uint64_t)(v38 + 1);
      v41 = (_QWORD *)*((_QWORD *)this + 3);
      v40 = (_QWORD *)*((_QWORD *)this + 4);
      if (v40 == v41)
      {
        v43 = vdupq_n_s64((unint64_t)v40);
      }
      else
      {
        do
        {
          v42 = (drawing::Ink *)*--v40;
          *v40 = 0;
          *--v38 = v42;
        }
        while (v40 != v41);
        v43 = *v4;
        v32 = (_QWORD *)v59.i64[1];
        v39 = v60;
      }
      *((_QWORD *)this + 3) = v38;
      *((_QWORD *)this + 4) = v32;
      v59 = v43;
      v44 = (char *)*((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = v39;
      v60 = v44;
      v58 = (void **)v43.i64[0];
      std::__split_buffer<std::unique_ptr<legacy_drawing::VectorTimestampClockReplicaClock>>::~__split_buffer((uint64_t)&v58);
    }
    else
    {
      *v31 = v29;
      v32 = v31 + 1;
    }
    *((_QWORD *)this + 4) = v32;
  }
  v45 = (const drawing::Stroke **)*((_QWORD *)a2 + 9);
  v46 = (const drawing::Stroke **)*((_QWORD *)i + 10);
  while (v45 != v46)
    PB::PtrVector<drawing::Stroke>::emplace_back<drawing::Stroke const&>(v5, *v45++);
  if (*((_QWORD *)i + 1))
  {
    v47 = (drawing::Rectangle *)operator new();
    v48 = drawing::Rectangle::Rectangle(v47, *((const drawing::Rectangle **)i + 1));
    v49 = *v56;
    *v56 = v50;
    if (v49)
      (*(void (**)(uint64_t, float))(*(_QWORD *)v49 + 8))(v49, v48);
  }
  if (*((_QWORD *)i + 2))
  {
    v51 = operator new();
    v52 = drawing::StrokeID::StrokeID(v51, *((const drawing::StrokeID **)i + 2));
    v53 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v52;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  if (*((_QWORD *)i + 12))
  {
    v54 = (PB::Data *)operator new();
    PB::Data::Data(v54, *((const PB::Data **)i + 12));
    v58 = 0;
    std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)this + 12, (void **)v54);
    std::unique_ptr<PB::Data>::reset[abi:ne180100](&v58, 0);
  }
  return this;
}

void sub_1BE4C8AA8(void *a1)
{
  __clang_call_terminate(a1);
}

const drawing::Drawing *drawing::Drawing::operator=(const drawing::Drawing *a1, const drawing::Drawing *a2)
{
  drawing::Drawing *v3;
  void **v5[18];

  if (a1 != a2)
  {
    drawing::Drawing::Drawing((drawing::Drawing *)v5, a2);
    drawing::swap(a1, (drawing::Drawing *)v5, v3);
    drawing::Drawing::~Drawing(v5);
  }
  return a1;
}

_QWORD *drawing::swap(_QWORD *this, drawing::Drawing *a2, drawing::Drawing *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = this[16];
  this[16] = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 16) = v3;
  v4 = this[17];
  this[17] = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v4;
  v5 = this[6];
  this[6] = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v5;
  v6 = this[7];
  this[7] = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v6;
  v7 = this[8];
  this[8] = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v7;
  v8 = this[13];
  this[13] = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v8;
  v9 = this[14];
  this[14] = *((_QWORD *)a2 + 14);
  *((_QWORD *)a2 + 14) = v9;
  v10 = this[15];
  this[15] = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 15) = v10;
  v11 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v11;
  v12 = this[4];
  this[4] = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v12;
  v13 = this[5];
  this[5] = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v13;
  v14 = this[9];
  this[9] = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v14;
  v15 = this[10];
  this[10] = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v15;
  v16 = this[11];
  this[11] = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v16;
  v17 = this[1];
  this[1] = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v17;
  v18 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v18;
  v19 = this[12];
  this[12] = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v19;
  return this;
}

uint64_t drawing::Drawing::Drawing(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  *(_QWORD *)a1 = &off_1E77749F0;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = a1 + 24;
  *(_OWORD *)(a1 + 72) = 0u;
  v5 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = (_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  v7 = (void **)(a1 + 48);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100](a1 + 128, (__int128 *)(a2 + 128));
  std::vector<PB::Data>::__vdeallocate(v7);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v8 = (_QWORD *)*v6;
  if (*v6)
  {
    v9 = *(_QWORD **)(a1 + 112);
    v10 = (_QWORD *)*v6;
    if (v9 != v8)
    {
      do
      {
        v12 = *--v9;
        v11 = v12;
        *v9 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
      while (v9 != v8);
      v10 = (_QWORD *)*v6;
    }
    *(_QWORD *)(a1 + 112) = v8;
    operator delete(v10);
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v13 = *(_QWORD **)(a1 + 24);
  if (v13)
  {
    v14 = *(_QWORD **)(a1 + 32);
    v15 = *(void **)(a1 + 24);
    if (v14 != v13)
    {
      do
      {
        v17 = *--v14;
        v16 = v17;
        *v14 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      }
      while (v14 != v13);
      v15 = *(void **)v4;
    }
    *(_QWORD *)(a1 + 32) = v13;
    operator delete(v15);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  std::vector<std::unique_ptr<drawing::Stroke>>::__vdeallocate(v5);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v18 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v19 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v21 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v20;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(void ***)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  std::unique_ptr<PB::Data>::reset[abi:ne180100]((void ***)(a1 + 96), v22);
  return a1;
}

_QWORD *drawing::Drawing::operator=(_QWORD *a1, uint64_t a2)
{
  drawing::Drawing *v3;
  void **v5[18];

  if (a1 != (_QWORD *)a2)
  {
    drawing::Drawing::Drawing((uint64_t)v5, a2);
    drawing::swap(a1, (drawing::Drawing *)v5, v3);
    drawing::Drawing::~Drawing(v5);
  }
  return a1;
}

uint64_t drawing::Drawing::formatText(drawing::Drawing *this, PB::TextFormatter *a2, const char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;

  PB::TextFormatter::beginObject(a2, a3);
  v5 = *((_QWORD *)this + 1);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, a2, "bounds");
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, a2, "boundsVersion");
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, a2, "inks");
  }
  v10 = *((_QWORD *)this + 6);
  for (i = *((_QWORD *)this + 7); v10 != i; v10 += 16)
    PB::TextFormatter::format();
  v12 = (uint64_t *)*((_QWORD *)this + 9);
  v13 = (uint64_t *)*((_QWORD *)this + 10);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, a2, "strokes");
  }
  if (*((_QWORD *)this + 12))
    PB::TextFormatter::format();
  v15 = (uint64_t *)*((_QWORD *)this + 13);
  v16 = (uint64_t *)*((_QWORD *)this + 14);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, a2, "versionVector");
  }
  return PB::TextFormatter::endObject(a2);
}

BOOL drawing::Drawing::readFrom(drawing::Drawing *this, PB::Reader *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v8;
  PKProtobufUnknownFields **v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  int v21;
  unint64_t v22;
  PKProtobufUnknownFields *v23;
  PKProtobufUnknownFields *v24;
  PB::Writer **v25;
  _BOOL8 result;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t *v48;
  void **v49[5];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)a2 + 2);
  v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (void ***)((char *)this + 96);
  v46 = (uint64_t **)((char *)this + 24);
  v47 = (uint64_t **)((char *)this + 72);
  v48 = (uint64_t *)((char *)this + 48);
  v44 = (void **)((char *)this + 64);
  v45 = (uint64_t **)((char *)this + 104);
  v9 = (PKProtobufUnknownFields **)((char *)this + 128);
  while (1)
  {
    v10 = *(_QWORD *)a2;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)a2 + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_27:
      v21 = v13 & 7;
      if (v21 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      switch((v13 >> 3))
      {
        case 2u:
          v28 = (_QWORD *)*((_QWORD *)this + 7);
          v27 = *((_QWORD *)this + 8);
          if ((unint64_t)v28 >= v27)
          {
            v38 = ((uint64_t)v28 - *v48) >> 4;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 60)
              std::vector<AttachmentTileInfo>::__throw_length_error[abi:ne180100]();
            v40 = v27 - *v48;
            if (v40 >> 3 > v39)
              v39 = v40 >> 3;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
              v41 = 0xFFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            v49[4] = v44;
            if (v41)
              v42 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<CGPoint>>((uint64_t)v44, v41);
            else
              v42 = 0;
            v43 = &v42[2 * v38];
            v49[0] = v42;
            v49[1] = v43;
            v49[3] = &v42[2 * v41];
            *v43 = 0;
            v43[1] = 0;
            v49[2] = v43 + 2;
            std::vector<PB::Data>::__swap_out_circular_buffer(v48, v49);
            v29 = (_QWORD *)*((_QWORD *)this + 7);
            std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)v49);
          }
          else
          {
            *v28 = 0;
            v28[1] = 0;
            v29 = v28 + 2;
            *((_QWORD *)this + 7) = v28 + 2;
          }
          *((_QWORD *)this + 7) = v29;
          v37 = (void **)(v29 - 2);
          goto LABEL_56;
        case 3u:
          PB::PtrVector<drawing::StrokeID>::emplace_back<>(v45);
          v32 = *((_QWORD *)this + 14);
          goto LABEL_36;
        case 4u:
          PB::PtrVector<drawing::Ink>::emplace_back<>(v46);
          v32 = *((_QWORD *)this + 4);
          goto LABEL_36;
        case 5u:
          PB::PtrVector<drawing::Stroke>::emplace_back<>(v47);
          v32 = *((_QWORD *)this + 10);
LABEL_36:
          v33 = *(_QWORD *)(v32 - 8);
          if (!PB::Reader::placeMark())
            return 0;
          v34 = (*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v33 + 16))(v33, a2);
          goto LABEL_42;
        case 6u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_1E7774A60;
          v30[6] = 0;
          v31 = *((_QWORD *)this + 1);
          *((_QWORD *)this + 1) = v30;
          if (v31)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            v30 = (_DWORD *)*((_QWORD *)this + 1);
          }
          goto LABEL_40;
        case 7u:
          v30 = (_DWORD *)operator new();
          *(_QWORD *)v30 = &off_1E7774A28;
          v30[8] = 0;
          v35 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v30;
          if (v35)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
            v30 = (_DWORD *)*((_QWORD *)this + 2);
          }
LABEL_40:
          if (!PB::Reader::placeMark())
            return 0;
          v34 = (*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, a2);
LABEL_42:
          if ((v34 & 1) == 0)
            return 0;
          PB::Reader::recallMark();
          break;
        case 8u:
          v36 = operator new();
          *(_QWORD *)v36 = 0;
          *(_QWORD *)(v36 + 8) = 0;
          v49[0] = 0;
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v8, (void **)v36);
          std::unique_ptr<PB::Data>::reset[abi:ne180100](v49, 0);
          v37 = *v8;
LABEL_56:
          PB::Reader::read(a2, (PB::Data *)v37);
          goto LABEL_57;
        default:
          goto LABEL_21;
      }
      goto LABEL_57;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    do
    {
      if (v3 == v2)
      {
        v4 = 1;
        *((_BYTE *)a2 + 24) = 1;
        return v4 == 0;
      }
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_27;
      v17 += 7;
      v2 = v19;
      v16 = v18++ > 8;
    }
    while (!v16);
LABEL_20:
    v21 = 0;
    LODWORD(v22) = 0;
LABEL_21:
    v23 = *v9;
    if (!*v9)
    {
      v24 = (PKProtobufUnknownFields *)operator new();
      PKProtobufUnknownFields::PKProtobufUnknownFields(v24);
      v49[0] = (void **)v24;
      std::shared_ptr<PKProtobufUnknownFields>::operator=[abi:ne180100]<PKProtobufUnknownFields,std::default_delete<PKProtobufUnknownFields>,void>(v9, (uint64_t *)v49);
      v25 = (PB::Writer **)v49[0];
      v49[0] = 0;
      if (v25)
      {
        std::unique_ptr<PB::Writer>::reset[abi:ne180100](v25, 0);
        MEMORY[0x1C3B7F770](v25, 0x1020C40EDED9539);
      }
      v23 = *v9;
    }
    result = PKProtobufUnknownFields::add(v23, v22, v21, a2);
    if (!(_DWORD)result)
      return result;
LABEL_57:
    v2 = *((_QWORD *)a2 + 1);
    v3 = *((_QWORD *)a2 + 2);
    v4 = *((unsigned __int8 *)a2 + 24);
    if (v2 >= v3 || *((_BYTE *)a2 + 24))
      return v4 == 0;
  }
}

void sub_1BE4C943C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::__split_buffer<PB::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

const void ***drawing::Drawing::writeTo(drawing::Drawing *this, PB::Writer *a2)
{
  const PB::Data *v4;
  const PB::Data *v5;
  const PB::Base **v6;
  const PB::Base **v7;
  const PB::Base *v8;
  const PB::Base **v9;
  const PB::Base **v10;
  const PB::Base *v11;
  const PB::Base **v12;
  const PB::Base **v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Data *v17;
  const void ***result;

  v4 = (const PB::Data *)*((_QWORD *)this + 6);
  v5 = (const PB::Data *)*((_QWORD *)this + 7);
  while (v4 != v5)
  {
    PB::Writer::write(a2, v4);
    v4 = (const PB::Data *)((char *)v4 + 16);
  }
  v6 = (const PB::Base **)*((_QWORD *)this + 13);
  v7 = (const PB::Base **)*((_QWORD *)this + 14);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::Writer::writeSubmessage(a2, v8);
  }
  v9 = (const PB::Base **)*((_QWORD *)this + 3);
  v10 = (const PB::Base **)*((_QWORD *)this + 4);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::Writer::writeSubmessage(a2, v11);
  }
  v12 = (const PB::Base **)*((_QWORD *)this + 9);
  v13 = (const PB::Base **)*((_QWORD *)this + 10);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::Writer::writeSubmessage(a2, v14);
  }
  v15 = (const PB::Base *)*((_QWORD *)this + 1);
  if (v15)
    PB::Writer::writeSubmessage(a2, v15);
  v16 = (const PB::Base *)*((_QWORD *)this + 2);
  if (v16)
    PB::Writer::writeSubmessage(a2, v16);
  v17 = (const PB::Data *)*((_QWORD *)this + 12);
  if (v17)
    PB::Writer::write(a2, v17);
  result = (const void ***)*((_QWORD *)this + 16);
  if (result)
    return PKProtobufUnknownFields::writeTo(result, (char **)a2);
  return result;
}

uint64_t drawing::Drawing::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = PKProtobufUnknownFieldsCompare((_QWORD ***)(a1 + 128), (_QWORD ***)(a2 + 128));
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a2 + 48);
    if (v6 - v5 != *(_QWORD *)(a2 + 56) - v7)
      return 0;
    while (v5 != v6)
    {
      result = PB::Data::operator==();
      if (!(_DWORD)result)
        return result;
      v5 += 16;
      v7 += 16;
    }
    v8 = *(uint64_t **)(a1 + 104);
    v9 = *(uint64_t **)(a1 + 112);
    v10 = *(uint64_t **)(a2 + 104);
    if ((char *)v9 - (char *)v8 != *(_QWORD *)(a2 + 112) - (_QWORD)v10)
      return 0;
    while (v8 != v9)
    {
      result = drawing::StrokeID::operator==(*v8, *v10);
      if (!(_DWORD)result)
        return result;
      ++v8;
      ++v10;
    }
    v11 = *(uint64_t **)(a2 + 24);
    v13 = *(uint64_t **)(a1 + 24);
    v12 = *(uint64_t **)(a1 + 32);
    if ((char *)v12 - (char *)v13 != *(_QWORD *)(a2 + 32) - (_QWORD)v11)
      return 0;
    while (v13 != v12)
    {
      result = drawing::Ink::operator==(*v13, *v11);
      if (!(_DWORD)result)
        return result;
      ++v13;
      ++v11;
      v12 = *(uint64_t **)(a1 + 32);
    }
    result = PB::PtrVector<drawing::Stroke>::operator==((_QWORD *)(a1 + 72), (_QWORD *)(a2 + 72));
    if ((_DWORD)result)
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a2 + 8);
      if (v14)
      {
        if (!v15 || !drawing::Rectangle::operator==(v14, v15))
          return 0;
      }
      else if (v15)
      {
        return 0;
      }
      v16 = *(_QWORD *)(a1 + 16);
      v17 = *(_QWORD *)(a2 + 16);
      if (v16)
      {
        if (!v17 || !drawing::StrokeID::operator==(v16, v17))
          return 0;
LABEL_25:
        if (!*(_QWORD *)(a1 + 96))
          return *(_QWORD *)(a2 + 96) == 0;
        if (*(_QWORD *)(a2 + 96))
        {
          if ((PB::Data::operator==() & 1) != 0)
            return 1;
          if (!*(_QWORD *)(a1 + 96))
            return *(_QWORD *)(a2 + 96) == 0;
        }
        return 0;
      }
      if (!v17)
        goto LABEL_25;
      return 0;
    }
  }
  return result;
}

uint64_t drawing::Drawing::hash_value(drawing::Drawing *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  drawing::Ink **v12;
  drawing::Ink **v13;
  uint64_t v14;
  drawing::Ink *v15;
  drawing::Stroke **v16;
  drawing::Stroke **v17;
  uint64_t v18;
  drawing::Stroke *v19;
  drawing::Rectangle *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *((_QWORD *)this + 6);
  v3 = *((_QWORD *)this + 7);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v2 += 16;
      v4 ^= PBHashBytes();
    }
    while (v2 != v3);
  }
  v5 = *((_QWORD *)this + 13);
  v6 = *((_QWORD *)this + 14);
  if (v5 != v6)
  {
    v7 = 0;
    while (1)
    {
      v8 = *(_QWORD **)v5;
      if ((*(_BYTE *)(*(_QWORD *)v5 + 32) & 1) != 0)
      {
        v9 = v8[1];
        if ((*(_BYTE *)(*(_QWORD *)v5 + 32) & 2) != 0)
        {
LABEL_10:
          v10 = v8[2];
          if ((*(_BYTE *)(*(_QWORD *)v5 + 32) & 4) == 0)
            goto LABEL_14;
          goto LABEL_11;
        }
      }
      else
      {
        v9 = 0;
        if ((*(_BYTE *)(*(_QWORD *)v5 + 32) & 2) != 0)
          goto LABEL_10;
      }
      v10 = 0;
      if ((*(_BYTE *)(*(_QWORD *)v5 + 32) & 4) == 0)
      {
LABEL_14:
        v11 = 0;
        goto LABEL_15;
      }
LABEL_11:
      v11 = v8[3];
LABEL_15:
      v7 ^= v9 ^ v10 ^ v11;
      v5 += 8;
      if (v5 == v6)
        goto LABEL_18;
    }
  }
  v7 = 0;
LABEL_18:
  v12 = (drawing::Ink **)*((_QWORD *)this + 3);
  v13 = (drawing::Ink **)*((_QWORD *)this + 4);
  if (v12 == v13)
  {
    v14 = 0;
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = *v12++;
      v14 ^= drawing::Ink::hash_value(v15);
    }
    while (v12 != v13);
  }
  v16 = (drawing::Stroke **)*((_QWORD *)this + 9);
  v17 = (drawing::Stroke **)*((_QWORD *)this + 10);
  if (v16 == v17)
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = *v16++;
      v18 ^= drawing::Stroke::hash_value(v19);
    }
    while (v16 != v17);
  }
  v20 = (drawing::Rectangle *)*((_QWORD *)this + 1);
  if (v20)
    v21 = drawing::Rectangle::hash_value(v20);
  else
    v21 = 0;
  v22 = *((_QWORD *)this + 2);
  if (!v22)
  {
    v26 = 0;
    goto LABEL_41;
  }
  if ((*(_BYTE *)(v22 + 32) & 1) == 0)
  {
    v23 = 0;
    if ((*(_BYTE *)(v22 + 32) & 2) != 0)
      goto LABEL_34;
LABEL_38:
    v24 = 0;
    if ((*(_BYTE *)(v22 + 32) & 4) != 0)
      goto LABEL_35;
LABEL_39:
    v25 = 0;
    goto LABEL_40;
  }
  v23 = *(_QWORD *)(v22 + 8);
  if ((*(_BYTE *)(v22 + 32) & 2) == 0)
    goto LABEL_38;
LABEL_34:
  v24 = *(_QWORD *)(v22 + 16);
  if ((*(_BYTE *)(v22 + 32) & 4) == 0)
    goto LABEL_39;
LABEL_35:
  v25 = *(_QWORD *)(v22 + 24);
LABEL_40:
  v26 = v24 ^ v23 ^ v25;
LABEL_41:
  if (*((_QWORD *)this + 12))
    v27 = PBHashBytes();
  else
    v27 = 0;
  return v7 ^ v4 ^ v21 ^ v26 ^ v27 ^ v14 ^ v18;
}

_QWORD *drawing::Drawing::makeBounds(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[1])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A60;
    *(_DWORD *)(v2 + 24) = 0;
    this = (_QWORD *)v1[1];
    v1[1] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

_QWORD *drawing::Drawing::makeBoundsVersion(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;

  if (!this[2])
  {
    v1 = this;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E7774A28;
    *(_DWORD *)(v2 + 32) = 0;
    this = (_QWORD *)v1[2];
    v1[2] = v2;
    if (this)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
  }
  return this;
}

const __CFString *PKTextInputDescriptionForWritingState(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Active");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("Idle");
}

void sub_1BE4CF83C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1BE4D2D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void sub_1BE4D5928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id PencilKitBundle()
{
  if (qword_1ECEE6618 != -1)
    dispatch_once(&qword_1ECEE6618, &__block_literal_global_94);
  return (id)_MergedGlobals_162;
}

void sub_1BE4D63D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4D69E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE4D6BC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BE4D7160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1BE4D7830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17)
{

  _Unwind_Resume(a1);
}

void sub_1BE4D7A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BE4D7F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, id a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1BE4D8138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BE4D898C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1E0CAF5C8]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1E0CAF5F8]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1E0CAF608]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1E0CB00A0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1E0CB01F0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t static Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x1E0CB03D0]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1E0CB06B8]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1E0CB0948]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1E0CB0998]();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB1718]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1E0DF2100]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1E0DF2108]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1E0DF2118]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1E0DF2130]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1E0DF2150]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1E0DF2198]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1E0DF2218]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1E0DF2220]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1E0DF2228]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1E0DF2238]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1E0DF2268]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1E0CB17D8]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1E0DEA0F0]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1E0CB1940]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1E0DEA758]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x1E0DEA800](a1._countAndFlagsBits, a1._object);
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1E0DEAAD8]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1E0DEACA0]();
}

{
  return MEMORY[0x1E0DEACB8]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1E0DEAD18]();
}

{
  return MEMORY[0x1E0DEAD30]();
}

uint64_t RawRepresentable<>.codingKey.getter()
{
  return MEMORY[0x1E0DEAD78]();
}

uint64_t RawRepresentable<>.init<A>(codingKey:)()
{
  return MEMORY[0x1E0DEAD80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1E0CB1AC0]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1E0DEAF00]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x1E0DF06D8]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x1E0DF06E0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t Task<>.value.getter()
{
  return MEMORY[0x1E0DF08A8]();
}

uint64_t dispatch thunk of Decodable.init(from:)()
{
  return MEMORY[0x1E0DEB120]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1E0CB1BD8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1E0CB1C10]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1E0DF2298]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1E0DF22A0]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1E0DEFCD8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1E0DF22B0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x1E0DEC0C8]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x1E0DEC120]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x1E0DEC2A8](a1);
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return MEMORY[0x1E0DF0B60]();
}

uint64_t ContinuousClock.init()()
{
  return MEMORY[0x1E0DF0B98]();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return MEMORY[0x1E0DF0BA0]();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return MEMORY[0x1E0DEC7D0]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return MEMORY[0x1E0DECB40]();
}

uint64_t __CocoaDictionary.count.getter()
{
  return MEMORY[0x1E0DECB80]();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return MEMORY[0x1E0DECBB8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return MEMORY[0x1E0DECD48]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1E0DECD50]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1E0DECF28](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1E0DECFC0]();
}

{
  return MEMORY[0x1E0DECFC8]();
}

{
  return MEMORY[0x1E0DECFD0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1E0DED0F0]();
}

{
  return MEMORY[0x1E0DED0F8]();
}

{
  return MEMORY[0x1E0DED100]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1E0DED120]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1E0DED1B0](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x1E0DF0DD0]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1E0DED5F0]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)()
{
  return MEMORY[0x1E0DED658]();
}

uint64_t dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)()
{
  return MEMORY[0x1E0DED6F8]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1E0DED770]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return MEMORY[0x1E0DF0EE8]();
}

uint64_t dispatch thunk of Clock.sleep(until:tolerance:)()
{
  return MEMORY[0x1E0DF0EF0]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x1E0DEDED8]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1E0DEDEF8]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x1E0DEDF10](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x1E0DEDF30](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t dispatch thunk of Decoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t dispatch thunk of Encoder.singleValueContainer()()
{
  return MEMORY[0x1E0DEE260]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t static Duration.milliseconds(_:)()
{
  return MEMORY[0x1E0DEE760]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1E0D15428]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

CAFrameRateRange CAFrameRateRangeMake(float minimum, float maximum, float preferred)
{
  float v3;
  float v4;
  float v5;
  CAFrameRateRange result;

  MEMORY[0x1E0CD23D0](minimum, maximum, preferred);
  result.preferred = v5;
  result.maximum = v4;
  result.minimum = v3;
  return result;
}

uint64_t CARenderServerSnapshot()
{
  return MEMORY[0x1E0CD25E0]();
}

CGAffineTransform *__cdecl CATransform3DGetAffineTransform(CGAffineTransform *__return_ptr retstr, CATransform3D *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0CD2600](retstr, t);
}

BOOL CATransform3DIsAffine(CATransform3D *t)
{
  return MEMORY[0x1E0CD2620](t);
}

CATransform3D *__cdecl CATransform3DMakeAffineTransform(CATransform3D *__return_ptr retstr, CGAffineTransform *m)
{
  return (CATransform3D *)MEMORY[0x1E0CD2630](retstr, m);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

CATransform3D *__cdecl CATransform3DMakeTranslation(CATransform3D *__return_ptr retstr, CGFloat tx, CGFloat ty, CGFloat tz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2648](retstr, tx, ty, tz);
}

CATransform3D *__cdecl CATransform3DRotate(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x1E0CD2658](retstr, t, angle, x, y, z);
}

CATransform3D *__cdecl CATransform3DScale(CATransform3D *__return_ptr retstr, CATransform3D *t, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2668](retstr, t, sx, sy, sz);
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80088](*(_QWORD *)&op, *(_QWORD *)&alg, *(_QWORD *)&options, key, keyLength, iv, dataIn, dataInLength);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void *observer, CFNotificationName name, const void *object)
{
  MEMORY[0x1E0C98900](center, observer, name, object);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

void CFRunLoopAddObserver(CFRunLoopRef rl, CFRunLoopObserverRef observer, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE8](rl, observer, mode);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

CFRunLoopObserverRef CFRunLoopObserverCreateWithHandler(CFAllocatorRef allocator, CFOptionFlags activities, Boolean repeats, CFIndex order, void *block)
{
  return (CFRunLoopObserverRef)MEMORY[0x1E0C98C68](allocator, activities, repeats, order, block);
}

void CFRunLoopRun(void)
{
  MEMORY[0x1E0C98CA8]();
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringTokenizerTokenType CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef tokenizer, CFIndex index)
{
  return MEMORY[0x1E0C99238](tokenizer, index);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BA90](retstr, t1, t2);
}

BOOL CGAffineTransformEqualToTransform(CGAffineTransform *t1, CGAffineTransform *t2)
{
  return MEMORY[0x1E0C9BAA0](t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1E0C9BAB8](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD0](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF0](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

uint64_t CGBitmapContextCreateForFlatteningImage()
{
  return MEMORY[0x1E0C9BB18]();
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopy(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BC80](color);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCB8](red, green, blue, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BCC0](space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  CGFloat result;

  MEMORY[0x1E0C9BCF8](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *range)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE20](whitePoint, blackPoint, range);
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE30](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BEC8](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9BFD0](c, x, y);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C038](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextFillPath(CGContextRef c)
{
  MEMORY[0x1E0C9C218](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextFlush(CGContextRef c)
{
  MEMORY[0x1E0C9C230](c);
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9C250](retstr, c);
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C330](c, x, y);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x1E0C9C3C8](c, *(_QWORD *)&mode);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetLineCap(CGContextRef c, CGLineCap cap)
{
  MEMORY[0x1E0C9C468](c, *(_QWORD *)&cap);
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
  MEMORY[0x1E0C9C470](c, lengths, count, phase);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C508](c, color);
}

void CGContextStrokeEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C560](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextStrokePath(CGContextRef c)
{
  MEMORY[0x1E0C9C570](c);
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C578](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C600](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
  MEMORY[0x1E0C9C638](provider);
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CB80](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(_QWORD *)&bitmapInfo, provider);
}

uint64_t CGImageCreateMaskFromAlpha()
{
  return MEMORY[0x1E0C9CBA0]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithMask(CGImageRef image, CGImageRef mask)
{
  return (CGImageRef)MEMORY[0x1E0C9CBC0](image, mask);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

void CGImageDestinationAddImageAndMetadata(CGImageDestinationRef idst, CGImageRef image, CGImageMetadataRef metadata, CFDictionaryRef options)
{
  MEMORY[0x1E0CBC310](idst, image, metadata, options);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

uint64_t CGImageGetMask()
{
  return MEMORY[0x1E0C9CC78]();
}

CFStringRef CGImageGetUTType(CGImageRef image)
{
  return (CFStringRef)MEMORY[0x1E0C9CCC8](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

uint64_t CGImageHasAlpha()
{
  return MEMORY[0x1E0C9CCD8]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1E0CBC3C0]();
}

BOOL CGImageMetadataSetValueMatchingImageProperty(CGMutableImageMetadataRef metadata, CFStringRef dictionaryName, CFStringRef propertyName, CFTypeRef value)
{
  return MEMORY[0x1E0CBC420](metadata, dictionaryName, propertyName, value);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  MEMORY[0x1E0C9D280](path, m, clockwise, x, y, radius, startAngle, endAngle);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddEllipseInRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2A0](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2C0](path, m, cpx, cpy, x, y);
}

void CGPathAddRect(CGMutablePathRef path, const CGAffineTransform *m, CGRect rect)
{
  MEMORY[0x1E0C9D2C8](path, m, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
  MEMORY[0x1E0C9D2E8](path, info, function);
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
  MEMORY[0x1E0C9D300](path, block);
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
  MEMORY[0x1E0C9D310](path);
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x1E0C9D318](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D320](path);
}

CGPathRef CGPathCreateCopyByFlattening(CGPathRef path, CGFloat flatteningThreshold)
{
  return (CGPathRef)MEMORY[0x1E0C9D330](path, flatteningThreshold);
}

CGPathRef CGPathCreateCopyByIntersectingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)MEMORY[0x1E0C9D338](path, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  return (CGPathRef)MEMORY[0x1E0C9D348](path, transform, *(_QWORD *)&lineCap, *(_QWORD *)&lineJoin, lineWidth, miterLimit);
}

CGPathRef CGPathCreateCopyBySubtractingPath(CGPathRef path, CGPathRef maskPath, BOOL evenOddFillRule)
{
  return (CGPathRef)MEMORY[0x1E0C9D350](path, maskPath, evenOddFillRule);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D358](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D398](path, transform);
}

CFArrayRef CGPathCreateSeparateComponents(CGPathRef path, BOOL evenOddFillRule)
{
  return (CFArrayRef)MEMORY[0x1E0C9D3A0](path, evenOddFillRule);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3D0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D3F0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGPoint CGPathGetCurrentPoint(CGPathRef path)
{
  double v1;
  double v2;
  CGPoint result;

  MEMORY[0x1E0C9D3F8](path);
  result.y = v2;
  result.x = v1;
  return result;
}

uint64_t CGPathIntersectsRect()
{
  return MEMORY[0x1E0C9D428]();
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1E0C9D4A0](path);
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x1E0C9D4A8](info, matrix, *(_QWORD *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

void CGPatternRelease(CGPatternRef pattern)
{
  MEMORY[0x1E0C9D510](pattern);
}

CGPoint CGPointApplyAffineTransform(CGPoint point, CGAffineTransform *t)
{
  double v2;
  double v3;
  CGPoint result;

  MEMORY[0x1E0C9D520](t, (__n128)point, *(__n128 *)&point.y);
  result.y = v3;
  result.x = v2;
  return result;
}

CGPoint CGPointFromString(NSString *string)
{
  double v1;
  double v2;
  CGPoint result;

  MEMORY[0x1E0DC3270](string);
  result.y = v2;
  result.x = v1;
  return result;
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1E0C9D550]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D558]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
  MEMORY[0x1E0C9D568](slice, remainder, *(_QWORD *)&edge, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, amount);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectFromString(NSString *string)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0DC3278](string);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1E0C9D610]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D638]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D640]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t CHGetPersonalizedSynthesisSupportState()
{
  return MEMORY[0x1E0D16780]();
}

uint64_t CHGetSynthesisModelVersionForLocale()
{
  return MEMORY[0x1E0D16788]();
}

uint64_t IOHIDEventGetChildren()
{
  return MEMORY[0x1E0CBB0F8]();
}

uint64_t IOHIDEventGetIntegerValue()
{
  return MEMORY[0x1E0CBB130]();
}

uint64_t IOHIDEventGetSenderID()
{
  return MEMORY[0x1E0CBB150]();
}

uint64_t IOHIDEventGetType()
{
  return MEMORY[0x1E0CBB168]();
}

CFArrayRef IOHIDEventSystemClientCopyServices(IOHIDEventSystemClientRef client)
{
  return (CFArrayRef)MEMORY[0x1E0CBB1E8](client);
}

uint64_t IOHIDEventSystemClientCreateWithType()
{
  return MEMORY[0x1E0CBB1F8]();
}

uint64_t IOHIDEventSystemClientSetMatching()
{
  return MEMORY[0x1E0CBB268]();
}

void IOHIDManagerActivate(IOHIDManagerRef manager)
{
  MEMORY[0x1E0CBB368](manager);
}

void IOHIDManagerCancel(IOHIDManagerRef manager)
{
  MEMORY[0x1E0CBB370](manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return (IOHIDManagerRef)MEMORY[0x1E0CBB3A0](allocator, *(_QWORD *)&options);
}

void IOHIDManagerRegisterDeviceMatchingCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C0](manager, callback, context);
}

void IOHIDManagerRegisterDeviceRemovalCallback(IOHIDManagerRef manager, IOHIDDeviceCallback callback, void *context)
{
  MEMORY[0x1E0CBB3C8](manager, callback, context);
}

void IOHIDManagerSetCancelHandler(IOHIDManagerRef manager, dispatch_block_t handler)
{
  MEMORY[0x1E0CBB3E8](manager, handler);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
  MEMORY[0x1E0CBB3F0](manager, matching);
}

void IOHIDManagerSetDispatchQueue(IOHIDManagerRef manager, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB408](manager, queue);
}

CFTypeRef IOHIDServiceClientCopyProperty(IOHIDServiceClientRef service, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1E0CBB4B0](service, key);
}

uint64_t IOMobileFramebufferChangeFrameInfo()
{
  return MEMORY[0x1E0D39F50]();
}

uint64_t IOMobileFramebufferFrameInfo()
{
  return MEMORY[0x1E0D39FA8]();
}

uint64_t IOMobileFramebufferGetRunLoopSource()
{
  return MEMORY[0x1E0D3A038]();
}

uint64_t IOMobileFramebufferOpenByName()
{
  return MEMORY[0x1E0D3A078]();
}

uint64_t IOMobileFramebufferSupportedFrameInfo()
{
  return MEMORY[0x1E0D3A0F0]();
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1E0CBB890]();
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1E0CBBAF0](properties);
}

kern_return_t IOSurfaceSetPurgeable(IOSurfaceRef buffer, uint32_t newState, uint32_t *oldState)
{
  return MEMORY[0x1E0CBBE30](buffer, *(_QWORD *)&newState, oldState);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x1E0DE2B90]();
}

MDLVertexDescriptor *__cdecl MTKModelIOVertexDescriptorFromMetal(MTLVertexDescriptor *metalDescriptor)
{
  return (MDLVertexDescriptor *)MEMORY[0x1E0CC6BE8](metalDescriptor);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1E0CC6980]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  double v2;
  double v3;
  double v4;
  double v5;
  NSRect result;

  MEMORY[0x1E0CB2C60]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height, (__n128)bRect.origin, *(__n128 *)&bRect.origin.y, (__n128)bRect.size, *(__n128 *)&bRect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSRange NSRangeFromString(NSString *aString)
{
  NSUInteger v1;
  NSUInteger v2;
  NSRange result;

  v1 = MEMORY[0x1E0CB3128](aString);
  result.length = v2;
  result.location = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromCGAffineTransform(CGAffineTransform *transform)
{
  return (NSString *)MEMORY[0x1E0DC32D8](transform);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)MEMORY[0x1E0DC32E0]((__n128)point, *(__n128 *)&point.y);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x1E0DC32E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x1E0DC32F0]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

uint64_t PBHashBytes()
{
  return MEMORY[0x1E0D82CD0]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

uint64_t TIGetDefaultInputModesForLanguage()
{
  return MEMORY[0x1E0DBDF18]();
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return MEMORY[0x1E0DC4500]();
}

BOOL UIAccessibilityIsInvertColorsEnabled(void)
{
  return MEMORY[0x1E0DC4540]();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return MEMORY[0x1E0DC4548]();
}

BOOL UIAccessibilityIsVoiceOverRunning(void)
{
  return MEMORY[0x1E0DC4570]();
}

void UIAccessibilityPostNotification(UIAccessibilityNotifications notification, id argument)
{
  MEMORY[0x1E0DC4598](*(_QWORD *)&notification, argument);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return MEMORY[0x1E0DC4910](category);
}

uint64_t UIEdgeInsetsAdd()
{
  return MEMORY[0x1E0DC49A0]();
}

uint64_t UIFloorToViewScale()
{
  return MEMORY[0x1E0DC4A10]();
}

void UIGraphicsBeginImageContext(CGSize size)
{
  MEMORY[0x1E0DC4BB8]((__n128)size, *(__n128 *)&size.height);
}

void UIGraphicsBeginImageContextWithOptions(CGSize size, BOOL opaque, CGFloat scale)
{
  MEMORY[0x1E0DC4BC0](opaque, (__n128)size, *(__n128 *)&size.height, scale);
}

void UIGraphicsEndImageContext(void)
{
  MEMORY[0x1E0DC4BD8]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x1E0DC4BE8]();
}

UIImage *UIGraphicsGetImageFromCurrentImageContext(void)
{
  return (UIImage *)MEMORY[0x1E0DC4BF0]();
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x1E0DC4C60](image);
}

uint64_t UIKeyboardInputModeGetBaseLanguage()
{
  return MEMORY[0x1E0DC4EF8]();
}

uint64_t UIKeyboardInputModeGetRegion()
{
  return MEMORY[0x1E0DC4F10]();
}

uint64_t UIKeyboardLocalizedReturnKeyNameForLocale()
{
  return MEMORY[0x1E0DC4F68]();
}

uint64_t UIRectCenteredAboutPoint()
{
  return MEMORY[0x1E0DC5238]();
}

uint64_t UIRectCenteredAboutPointScale()
{
  return MEMORY[0x1E0DC5240]();
}

uint64_t UIRectCenteredIntegralRect()
{
  return MEMORY[0x1E0DC5248]();
}

void UIRectFill(CGRect rect)
{
  MEMORY[0x1E0DC5298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t UIRectGetCenter()
{
  return MEMORY[0x1E0DC52B0]();
}

uint64_t UIRectInset()
{
  return MEMORY[0x1E0DC52B8]();
}

uint64_t UIRectIntegralWithScale()
{
  return MEMORY[0x1E0DC52C8]();
}

uint64_t UIRectIntegralWithViewScale()
{
  return MEMORY[0x1E0DC52D0]();
}

uint64_t UIRoundToViewScale()
{
  return MEMORY[0x1E0DC52F8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFCopySystemVersionDictionaryValue()
{
  return MEMORY[0x1E0C9A0D8]();
}

uint64_t _UIAccessibilityForceTouchEnabled()
{
  return MEMORY[0x1E0DC56D8]();
}

uint64_t _UIAccessibilityForceTouchSensitivity()
{
  return MEMORY[0x1E0DC56E0]();
}

uint64_t _UIApplicationIsExtension()
{
  return MEMORY[0x1E0DC5720]();
}

uint64_t _UIMachTimeForMediaTime()
{
  return MEMORY[0x1E0DC5978]();
}

uint64_t _UIMediaTimeForMachTime()
{
  return MEMORY[0x1E0DC5980]();
}

uint64_t _UIUpdateCycleEnabled()
{
  return MEMORY[0x1E0DC5A50]();
}

uint64_t _UIUpdateRequestActivate()
{
  return MEMORY[0x1E0DC5A68]();
}

uint64_t _UIUpdateRequestDeactivate()
{
  return MEMORY[0x1E0DC5A70]();
}

uint64_t _UIUpdateSequenceInsertItem()
{
  return MEMORY[0x1E0DC5A90]();
}

uint64_t _UIUpdateSequenceRemoveItem()
{
  return MEMORY[0x1E0DC5AA0]();
}

uint64_t _UIUserInterfaceSizeClassForWidth()
{
  return MEMORY[0x1E0DC5AB0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t PB::TextFormatter::beginObject(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82EC0](this, a2);
}

uint64_t PB::TextFormatter::format()
{
  return MEMORY[0x1E0D82EC8]();
}

{
  return MEMORY[0x1E0D82ED0]();
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2)
{
  return MEMORY[0x1E0D82ED8](this, a2);
}

{
  return MEMORY[0x1E0D82EF8](this, a2);
}

{
  return MEMORY[0x1E0D82F08](this, a2);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, double a3)
{
  return MEMORY[0x1E0D82EE0](this, a2, a3);
}

uint64_t PB::TextFormatter::format(PB::TextFormatter *this, const char *a2, float a3)
{
  return MEMORY[0x1E0D82EE8](this, a2, a3);
}

uint64_t PB::TextFormatter::endObject(PB::TextFormatter *this)
{
  return MEMORY[0x1E0D82F10](this);
}

void PB::Base::~Base(PB::Base *this)
{
  MEMORY[0x1E0D82F18](this);
}

uint64_t PB::Data::assign(PB::Data *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1E0D82F20](this, a2, a3);
}

uint64_t PB::Data::Data(PB::Data *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D82F28](this, a2);
}

uint64_t PB::Data::Data(PB::Data *this, const PB::Data *a2)
{
  return MEMORY[0x1E0D82F30](this, a2);
}

uint64_t PB::Reader::recallMark()
{
  return MEMORY[0x1E0D82F38]();
}

uint64_t PB::Reader::read(PB::Reader *this, PB::Data *a2)
{
  return MEMORY[0x1E0D82F40](this, a2);
}

uint64_t PB::Reader::read()
{
  return MEMORY[0x1E0D82F48]();
}

{
  return MEMORY[0x1E0D82F50]();
}

uint64_t PB::Reader::skip(PB::Reader *this)
{
  return MEMORY[0x1E0D82F58](this);
}

uint64_t PB::Reader::placeMark()
{
  return MEMORY[0x1E0D82F60]();
}

uint64_t PB::Reader::Reader(PB::Reader *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0D82F68](this, a2);
}

uint64_t PB::Writer::writeFixed(PB::Writer *this)
{
  return MEMORY[0x1E0D82F70](this);
}

{
  return MEMORY[0x1E0D82F80](this);
}

uint64_t PB::Writer::writeVarInt(PB::Writer *this)
{
  return MEMORY[0x1E0D82F88](this);
}

{
  return MEMORY[0x1E0D82F90](this);
}

{
  return MEMORY[0x1E0D82FA0](this);
}

uint64_t PB::Writer::writeSubmessage(PB::Writer *this, const PB::Base *a2)
{
  return MEMORY[0x1E0D82FA8](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, const PB::Data *a2)
{
  return MEMORY[0x1E0D82FB0](this, a2);
}

uint64_t PB::Writer::write()
{
  return MEMORY[0x1E0D82FB8]();
}

{
  return MEMORY[0x1E0D82FC0]();
}

uint64_t PB::Writer::write(PB::Writer *this)
{
  return MEMORY[0x1E0D82FC8](this);
}

uint64_t PB::Writer::write(PB::Writer *this, double a2)
{
  return MEMORY[0x1E0D82FD0](this, a2);
}

uint64_t PB::Writer::write(PB::Writer *this, float a2)
{
  return MEMORY[0x1E0D82FD8](this, a2);
}

uint64_t PB::Writer::Writer(PB::Writer *this)
{
  return MEMORY[0x1E0D82FF0](this);
}

void PB::Writer::~Writer(PB::Writer *this)
{
  MEMORY[0x1E0D82FF8](this);
}

uint64_t PB::Data::operator==()
{
  return MEMORY[0x1E0D83000]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE4730]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1E0DE4DB0](this);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E7770A88();
}

void operator delete(void *__p)
{
  off_1E7770A90(__p);
}

uint64_t operator delete()
{
  return off_1E7770A98();
}

uint64_t operator new[]()
{
  return off_1E7770AA0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7770AA8(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E7770AB0(__sz, a2);
}

uint64_t operator new()
{
  return off_1E7770AB8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  simd_float4x4 result;

  MEMORY[0x1E0C80B38]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x1E0C80BD0](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_activity_initiate(void *dso, const char *description, os_activity_flag_t flags, os_block_t activity_block)
{
  MEMORY[0x1E0C80FD0](dso, description, *(_QWORD *)&flags, activity_block);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x1E0C81500](__x);
  return result;
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x1E0C82B40](__x);
  return result;
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x1E0C82C58](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82C98](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BE8](__x);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

kern_return_t mach_wait_until(uint64_t deadline)
{
  return MEMORY[0x1E0C83E28](deadline);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
  MEMORY[0x1E0DE7C30](dest, src, size, atomic, hasStrong);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

void objc_moveWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7D18](to, from);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F98](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

size_t os_proc_available_memory(void)
{
  return MEMORY[0x1E0C84908]();
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

const char *__cdecl protocol_getName(Protocol *p)
{
  return (const char *)MEMORY[0x1E0DE80B0](p);
}

uint64_t random(void)
{
  return MEMORY[0x1E0C84FC0]();
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1E0DEEB88]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x1E0DEEBB0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull()
{
  return MEMORY[0x1E0DEEDC0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1E0DEEEB8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x1E0C857E8](__x);
  return result;
}

int32_t u_getIntPropertyValue(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59C0](*(_QWORD *)&c, *(_QWORD *)&which);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

void uuid_clear(uuid_t uu)
{
  MEMORY[0x1E0C85A00](uu);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_generate(uuid_t out)
{
  MEMORY[0x1E0C85A18](out);
}

